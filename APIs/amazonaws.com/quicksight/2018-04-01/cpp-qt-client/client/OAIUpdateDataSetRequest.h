/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateDataSetRequest.h
 *
 * 
 */

#ifndef OAIUpdateDataSetRequest_H
#define OAIUpdateDataSetRequest_H

#include <QJsonObject>

#include "OAICreateDataSetRequest_RowLevelPermissionTagConfiguration.h"
#include "OAIDataSetImportMode.h"
#include "OAIDataSetUsageConfiguration.h"
#include "OAIUpdateDataSetRequest_RowLevelPermissionDataSet.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateDataSetRequest_RowLevelPermissionDataSet;
class OAICreateDataSetRequest_RowLevelPermissionTagConfiguration;
class OAIDataSetUsageConfiguration;

class OAIUpdateDataSetRequest : public OAIObject {
public:
    OAIUpdateDataSetRequest();
    OAIUpdateDataSetRequest(QString json);
    ~OAIUpdateDataSetRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QMap getPhysicalTableMap() const;
    void setPhysicalTableMap(const QMap &physical_table_map);
    bool is_physical_table_map_Set() const;
    bool is_physical_table_map_Valid() const;

    QMap getLogicalTableMap() const;
    void setLogicalTableMap(const QMap &logical_table_map);
    bool is_logical_table_map_Set() const;
    bool is_logical_table_map_Valid() const;

    OAIDataSetImportMode getImportMode() const;
    void setImportMode(const OAIDataSetImportMode &import_mode);
    bool is_import_mode_Set() const;
    bool is_import_mode_Valid() const;

    QList getColumnGroups() const;
    void setColumnGroups(const QList &column_groups);
    bool is_column_groups_Set() const;
    bool is_column_groups_Valid() const;

    QMap getFieldFolders() const;
    void setFieldFolders(const QMap &field_folders);
    bool is_field_folders_Set() const;
    bool is_field_folders_Valid() const;

    OAIUpdateDataSetRequest_RowLevelPermissionDataSet getRowLevelPermissionDataSet() const;
    void setRowLevelPermissionDataSet(const OAIUpdateDataSetRequest_RowLevelPermissionDataSet &row_level_permission_data_set);
    bool is_row_level_permission_data_set_Set() const;
    bool is_row_level_permission_data_set_Valid() const;

    OAICreateDataSetRequest_RowLevelPermissionTagConfiguration getRowLevelPermissionTagConfiguration() const;
    void setRowLevelPermissionTagConfiguration(const OAICreateDataSetRequest_RowLevelPermissionTagConfiguration &row_level_permission_tag_configuration);
    bool is_row_level_permission_tag_configuration_Set() const;
    bool is_row_level_permission_tag_configuration_Valid() const;

    QList getColumnLevelPermissionRules() const;
    void setColumnLevelPermissionRules(const QList &column_level_permission_rules);
    bool is_column_level_permission_rules_Set() const;
    bool is_column_level_permission_rules_Valid() const;

    OAIDataSetUsageConfiguration getDataSetUsageConfiguration() const;
    void setDataSetUsageConfiguration(const OAIDataSetUsageConfiguration &data_set_usage_configuration);
    bool is_data_set_usage_configuration_Set() const;
    bool is_data_set_usage_configuration_Valid() const;

    QList getDatasetParameters() const;
    void setDatasetParameters(const QList &dataset_parameters);
    bool is_dataset_parameters_Set() const;
    bool is_dataset_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QMap m_physical_table_map;
    bool m_physical_table_map_isSet;
    bool m_physical_table_map_isValid;

    QMap m_logical_table_map;
    bool m_logical_table_map_isSet;
    bool m_logical_table_map_isValid;

    OAIDataSetImportMode m_import_mode;
    bool m_import_mode_isSet;
    bool m_import_mode_isValid;

    QList m_column_groups;
    bool m_column_groups_isSet;
    bool m_column_groups_isValid;

    QMap m_field_folders;
    bool m_field_folders_isSet;
    bool m_field_folders_isValid;

    OAIUpdateDataSetRequest_RowLevelPermissionDataSet m_row_level_permission_data_set;
    bool m_row_level_permission_data_set_isSet;
    bool m_row_level_permission_data_set_isValid;

    OAICreateDataSetRequest_RowLevelPermissionTagConfiguration m_row_level_permission_tag_configuration;
    bool m_row_level_permission_tag_configuration_isSet;
    bool m_row_level_permission_tag_configuration_isValid;

    QList m_column_level_permission_rules;
    bool m_column_level_permission_rules_isSet;
    bool m_column_level_permission_rules_isValid;

    OAIDataSetUsageConfiguration m_data_set_usage_configuration;
    bool m_data_set_usage_configuration_isSet;
    bool m_data_set_usage_configuration_isValid;

    QList m_dataset_parameters;
    bool m_dataset_parameters_isSet;
    bool m_dataset_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateDataSetRequest)

#endif // OAIUpdateDataSetRequest_H
