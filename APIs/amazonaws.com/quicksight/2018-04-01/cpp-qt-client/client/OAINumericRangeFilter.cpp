/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericRangeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericRangeFilter::OAINumericRangeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericRangeFilter::OAINumericRangeFilter() {
    this->initializeModel();
}

OAINumericRangeFilter::~OAINumericRangeFilter() {}

void OAINumericRangeFilter::initializeModel() {

    m_filter_id_isSet = false;
    m_filter_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_include_minimum_isSet = false;
    m_include_minimum_isValid = false;

    m_include_maximum_isSet = false;
    m_include_maximum_isValid = false;

    m_range_minimum_isSet = false;
    m_range_minimum_isValid = false;

    m_range_maximum_isSet = false;
    m_range_maximum_isValid = false;

    m_select_all_options_isSet = false;
    m_select_all_options_isValid = false;

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;

    m_null_option_isSet = false;
    m_null_option_isValid = false;
}

void OAINumericRangeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericRangeFilter::fromJsonObject(QJsonObject json) {

    m_filter_id_isValid = ::OpenAPI::fromJsonValue(m_filter_id, json[QString("FilterId")]);
    m_filter_id_isSet = !json[QString("FilterId")].isNull() && m_filter_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_include_minimum_isValid = ::OpenAPI::fromJsonValue(m_include_minimum, json[QString("IncludeMinimum")]);
    m_include_minimum_isSet = !json[QString("IncludeMinimum")].isNull() && m_include_minimum_isValid;

    m_include_maximum_isValid = ::OpenAPI::fromJsonValue(m_include_maximum, json[QString("IncludeMaximum")]);
    m_include_maximum_isSet = !json[QString("IncludeMaximum")].isNull() && m_include_maximum_isValid;

    m_range_minimum_isValid = ::OpenAPI::fromJsonValue(m_range_minimum, json[QString("RangeMinimum")]);
    m_range_minimum_isSet = !json[QString("RangeMinimum")].isNull() && m_range_minimum_isValid;

    m_range_maximum_isValid = ::OpenAPI::fromJsonValue(m_range_maximum, json[QString("RangeMaximum")]);
    m_range_maximum_isSet = !json[QString("RangeMaximum")].isNull() && m_range_maximum_isValid;

    m_select_all_options_isValid = ::OpenAPI::fromJsonValue(m_select_all_options, json[QString("SelectAllOptions")]);
    m_select_all_options_isSet = !json[QString("SelectAllOptions")].isNull() && m_select_all_options_isValid;

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("AggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("AggregationFunction")].isNull() && m_aggregation_function_isValid;

    m_null_option_isValid = ::OpenAPI::fromJsonValue(m_null_option, json[QString("NullOption")]);
    m_null_option_isSet = !json[QString("NullOption")].isNull() && m_null_option_isValid;
}

QString OAINumericRangeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericRangeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_id_isSet) {
        obj.insert(QString("FilterId"), ::OpenAPI::toJsonValue(m_filter_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_include_minimum_isSet) {
        obj.insert(QString("IncludeMinimum"), ::OpenAPI::toJsonValue(m_include_minimum));
    }
    if (m_include_maximum_isSet) {
        obj.insert(QString("IncludeMaximum"), ::OpenAPI::toJsonValue(m_include_maximum));
    }
    if (m_range_minimum.isSet()) {
        obj.insert(QString("RangeMinimum"), ::OpenAPI::toJsonValue(m_range_minimum));
    }
    if (m_range_maximum.isSet()) {
        obj.insert(QString("RangeMaximum"), ::OpenAPI::toJsonValue(m_range_maximum));
    }
    if (m_select_all_options.isSet()) {
        obj.insert(QString("SelectAllOptions"), ::OpenAPI::toJsonValue(m_select_all_options));
    }
    if (m_aggregation_function.isSet()) {
        obj.insert(QString("AggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    if (m_null_option.isSet()) {
        obj.insert(QString("NullOption"), ::OpenAPI::toJsonValue(m_null_option));
    }
    return obj;
}

QString OAINumericRangeFilter::getFilterId() const {
    return m_filter_id;
}
void OAINumericRangeFilter::setFilterId(const QString &filter_id) {
    m_filter_id = filter_id;
    m_filter_id_isSet = true;
}

bool OAINumericRangeFilter::is_filter_id_Set() const{
    return m_filter_id_isSet;
}

bool OAINumericRangeFilter::is_filter_id_Valid() const{
    return m_filter_id_isValid;
}

OAICategoryDrillDownFilter_Column OAINumericRangeFilter::getColumn() const {
    return m_column;
}
void OAINumericRangeFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAINumericRangeFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAINumericRangeFilter::is_column_Valid() const{
    return m_column_isValid;
}

bool OAINumericRangeFilter::getIncludeMinimum() const {
    return m_include_minimum;
}
void OAINumericRangeFilter::setIncludeMinimum(const bool &include_minimum) {
    m_include_minimum = include_minimum;
    m_include_minimum_isSet = true;
}

bool OAINumericRangeFilter::is_include_minimum_Set() const{
    return m_include_minimum_isSet;
}

bool OAINumericRangeFilter::is_include_minimum_Valid() const{
    return m_include_minimum_isValid;
}

bool OAINumericRangeFilter::getIncludeMaximum() const {
    return m_include_maximum;
}
void OAINumericRangeFilter::setIncludeMaximum(const bool &include_maximum) {
    m_include_maximum = include_maximum;
    m_include_maximum_isSet = true;
}

bool OAINumericRangeFilter::is_include_maximum_Set() const{
    return m_include_maximum_isSet;
}

bool OAINumericRangeFilter::is_include_maximum_Valid() const{
    return m_include_maximum_isValid;
}

OAINumericRangeFilter_RangeMinimum OAINumericRangeFilter::getRangeMinimum() const {
    return m_range_minimum;
}
void OAINumericRangeFilter::setRangeMinimum(const OAINumericRangeFilter_RangeMinimum &range_minimum) {
    m_range_minimum = range_minimum;
    m_range_minimum_isSet = true;
}

bool OAINumericRangeFilter::is_range_minimum_Set() const{
    return m_range_minimum_isSet;
}

bool OAINumericRangeFilter::is_range_minimum_Valid() const{
    return m_range_minimum_isValid;
}

OAINumericRangeFilter_RangeMaximum OAINumericRangeFilter::getRangeMaximum() const {
    return m_range_maximum;
}
void OAINumericRangeFilter::setRangeMaximum(const OAINumericRangeFilter_RangeMaximum &range_maximum) {
    m_range_maximum = range_maximum;
    m_range_maximum_isSet = true;
}

bool OAINumericRangeFilter::is_range_maximum_Set() const{
    return m_range_maximum_isSet;
}

bool OAINumericRangeFilter::is_range_maximum_Valid() const{
    return m_range_maximum_isValid;
}

OAINumericFilterSelectAllOptions OAINumericRangeFilter::getSelectAllOptions() const {
    return m_select_all_options;
}
void OAINumericRangeFilter::setSelectAllOptions(const OAINumericFilterSelectAllOptions &select_all_options) {
    m_select_all_options = select_all_options;
    m_select_all_options_isSet = true;
}

bool OAINumericRangeFilter::is_select_all_options_Set() const{
    return m_select_all_options_isSet;
}

bool OAINumericRangeFilter::is_select_all_options_Valid() const{
    return m_select_all_options_isValid;
}

OAINumericRangeFilter_AggregationFunction OAINumericRangeFilter::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAINumericRangeFilter::setAggregationFunction(const OAINumericRangeFilter_AggregationFunction &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAINumericRangeFilter::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAINumericRangeFilter::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

OAIFilterNullOption OAINumericRangeFilter::getNullOption() const {
    return m_null_option;
}
void OAINumericRangeFilter::setNullOption(const OAIFilterNullOption &null_option) {
    m_null_option = null_option;
    m_null_option_isSet = true;
}

bool OAINumericRangeFilter::is_null_option_Set() const{
    return m_null_option_isSet;
}

bool OAINumericRangeFilter::is_null_option_Valid() const{
    return m_null_option_isValid;
}

bool OAINumericRangeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_minimum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_maximum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_all_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_option.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericRangeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_id_isValid && m_column_isValid && m_null_option_isValid && true;
}

} // namespace OpenAPI
