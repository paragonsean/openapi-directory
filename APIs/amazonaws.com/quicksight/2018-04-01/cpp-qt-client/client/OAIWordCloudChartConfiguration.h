/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWordCloudChartConfiguration.h
 *
 * The configuration of a word cloud visual.
 */

#ifndef OAIWordCloudChartConfiguration_H
#define OAIWordCloudChartConfiguration_H

#include <QJsonObject>

#include "OAIWordCloudChartConfiguration_CategoryLabelOptions.h"
#include "OAIWordCloudChartConfiguration_FieldWells.h"
#include "OAIWordCloudChartConfiguration_SortConfiguration.h"
#include "OAIWordCloudChartConfiguration_WordCloudOptions.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWordCloudChartConfiguration_FieldWells;
class OAIWordCloudChartConfiguration_SortConfiguration;
class OAIWordCloudChartConfiguration_CategoryLabelOptions;
class OAIWordCloudChartConfiguration_WordCloudOptions;

class OAIWordCloudChartConfiguration : public OAIObject {
public:
    OAIWordCloudChartConfiguration();
    OAIWordCloudChartConfiguration(QString json);
    ~OAIWordCloudChartConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIWordCloudChartConfiguration_FieldWells getFieldWells() const;
    void setFieldWells(const OAIWordCloudChartConfiguration_FieldWells &field_wells);
    bool is_field_wells_Set() const;
    bool is_field_wells_Valid() const;

    OAIWordCloudChartConfiguration_SortConfiguration getSortConfiguration() const;
    void setSortConfiguration(const OAIWordCloudChartConfiguration_SortConfiguration &sort_configuration);
    bool is_sort_configuration_Set() const;
    bool is_sort_configuration_Valid() const;

    OAIWordCloudChartConfiguration_CategoryLabelOptions getCategoryLabelOptions() const;
    void setCategoryLabelOptions(const OAIWordCloudChartConfiguration_CategoryLabelOptions &category_label_options);
    bool is_category_label_options_Set() const;
    bool is_category_label_options_Valid() const;

    OAIWordCloudChartConfiguration_WordCloudOptions getWordCloudOptions() const;
    void setWordCloudOptions(const OAIWordCloudChartConfiguration_WordCloudOptions &word_cloud_options);
    bool is_word_cloud_options_Set() const;
    bool is_word_cloud_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIWordCloudChartConfiguration_FieldWells m_field_wells;
    bool m_field_wells_isSet;
    bool m_field_wells_isValid;

    OAIWordCloudChartConfiguration_SortConfiguration m_sort_configuration;
    bool m_sort_configuration_isSet;
    bool m_sort_configuration_isValid;

    OAIWordCloudChartConfiguration_CategoryLabelOptions m_category_label_options;
    bool m_category_label_options_isSet;
    bool m_category_label_options_isValid;

    OAIWordCloudChartConfiguration_WordCloudOptions m_word_cloud_options;
    bool m_word_cloud_options_isSet;
    bool m_word_cloud_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWordCloudChartConfiguration)

#endif // OAIWordCloudChartConfiguration_H
