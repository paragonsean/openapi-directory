/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnSort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnSort::OAIColumnSort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnSort::OAIColumnSort() {
    this->initializeModel();
}

OAIColumnSort::~OAIColumnSort() {}

void OAIColumnSort::initializeModel() {

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;
}

void OAIColumnSort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnSort::fromJsonObject(QJsonObject json) {

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("Direction")]);
    m_direction_isSet = !json[QString("Direction")].isNull() && m_direction_isValid;

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("AggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("AggregationFunction")].isNull() && m_aggregation_function_isValid;
}

QString OAIColumnSort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnSort::asJsonObject() const {
    QJsonObject obj;
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("Direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_aggregation_function.isSet()) {
        obj.insert(QString("AggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    return obj;
}

OAIColumnIdentifier OAIColumnSort::getSortBy() const {
    return m_sort_by;
}
void OAIColumnSort::setSortBy(const OAIColumnIdentifier &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIColumnSort::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIColumnSort::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortDirection OAIColumnSort::getDirection() const {
    return m_direction;
}
void OAIColumnSort::setDirection(const OAISortDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIColumnSort::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIColumnSort::is_direction_Valid() const{
    return m_direction_isValid;
}

OAIColumnSort_AggregationFunction OAIColumnSort::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAIColumnSort::setAggregationFunction(const OAIColumnSort_AggregationFunction &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAIColumnSort::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAIColumnSort::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

bool OAIColumnSort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnSort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sort_by_isValid && m_direction_isValid && true;
}

} // namespace OpenAPI
