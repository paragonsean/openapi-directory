/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISemanticType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISemanticType::OAISemanticType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISemanticType::OAISemanticType() {
    this->initializeModel();
}

OAISemanticType::~OAISemanticType() {}

void OAISemanticType::initializeModel() {

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_sub_type_name_isSet = false;
    m_sub_type_name_isValid = false;

    m_type_parameters_isSet = false;
    m_type_parameters_isValid = false;

    m_truthy_cell_value_isSet = false;
    m_truthy_cell_value_isValid = false;

    m_truthy_cell_value_synonyms_isSet = false;
    m_truthy_cell_value_synonyms_isValid = false;

    m_falsey_cell_value_isSet = false;
    m_falsey_cell_value_isValid = false;

    m_falsey_cell_value_synonyms_isSet = false;
    m_falsey_cell_value_synonyms_isValid = false;
}

void OAISemanticType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISemanticType::fromJsonObject(QJsonObject json) {

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_sub_type_name_isValid = ::OpenAPI::fromJsonValue(m_sub_type_name, json[QString("SubTypeName")]);
    m_sub_type_name_isSet = !json[QString("SubTypeName")].isNull() && m_sub_type_name_isValid;

    m_type_parameters_isValid = ::OpenAPI::fromJsonValue(m_type_parameters, json[QString("TypeParameters")]);
    m_type_parameters_isSet = !json[QString("TypeParameters")].isNull() && m_type_parameters_isValid;

    m_truthy_cell_value_isValid = ::OpenAPI::fromJsonValue(m_truthy_cell_value, json[QString("TruthyCellValue")]);
    m_truthy_cell_value_isSet = !json[QString("TruthyCellValue")].isNull() && m_truthy_cell_value_isValid;

    m_truthy_cell_value_synonyms_isValid = ::OpenAPI::fromJsonValue(m_truthy_cell_value_synonyms, json[QString("TruthyCellValueSynonyms")]);
    m_truthy_cell_value_synonyms_isSet = !json[QString("TruthyCellValueSynonyms")].isNull() && m_truthy_cell_value_synonyms_isValid;

    m_falsey_cell_value_isValid = ::OpenAPI::fromJsonValue(m_falsey_cell_value, json[QString("FalseyCellValue")]);
    m_falsey_cell_value_isSet = !json[QString("FalseyCellValue")].isNull() && m_falsey_cell_value_isValid;

    m_falsey_cell_value_synonyms_isValid = ::OpenAPI::fromJsonValue(m_falsey_cell_value_synonyms, json[QString("FalseyCellValueSynonyms")]);
    m_falsey_cell_value_synonyms_isSet = !json[QString("FalseyCellValueSynonyms")].isNull() && m_falsey_cell_value_synonyms_isValid;
}

QString OAISemanticType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISemanticType::asJsonObject() const {
    QJsonObject obj;
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_sub_type_name_isSet) {
        obj.insert(QString("SubTypeName"), ::OpenAPI::toJsonValue(m_sub_type_name));
    }
    if (m_type_parameters.isSet()) {
        obj.insert(QString("TypeParameters"), ::OpenAPI::toJsonValue(m_type_parameters));
    }
    if (m_truthy_cell_value_isSet) {
        obj.insert(QString("TruthyCellValue"), ::OpenAPI::toJsonValue(m_truthy_cell_value));
    }
    if (m_truthy_cell_value_synonyms.isSet()) {
        obj.insert(QString("TruthyCellValueSynonyms"), ::OpenAPI::toJsonValue(m_truthy_cell_value_synonyms));
    }
    if (m_falsey_cell_value_isSet) {
        obj.insert(QString("FalseyCellValue"), ::OpenAPI::toJsonValue(m_falsey_cell_value));
    }
    if (m_falsey_cell_value_synonyms.isSet()) {
        obj.insert(QString("FalseyCellValueSynonyms"), ::OpenAPI::toJsonValue(m_falsey_cell_value_synonyms));
    }
    return obj;
}

QString OAISemanticType::getTypeName() const {
    return m_type_name;
}
void OAISemanticType::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAISemanticType::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAISemanticType::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAISemanticType::getSubTypeName() const {
    return m_sub_type_name;
}
void OAISemanticType::setSubTypeName(const QString &sub_type_name) {
    m_sub_type_name = sub_type_name;
    m_sub_type_name_isSet = true;
}

bool OAISemanticType::is_sub_type_name_Set() const{
    return m_sub_type_name_isSet;
}

bool OAISemanticType::is_sub_type_name_Valid() const{
    return m_sub_type_name_isValid;
}

QMap OAISemanticType::getTypeParameters() const {
    return m_type_parameters;
}
void OAISemanticType::setTypeParameters(const QMap &type_parameters) {
    m_type_parameters = type_parameters;
    m_type_parameters_isSet = true;
}

bool OAISemanticType::is_type_parameters_Set() const{
    return m_type_parameters_isSet;
}

bool OAISemanticType::is_type_parameters_Valid() const{
    return m_type_parameters_isValid;
}

QString OAISemanticType::getTruthyCellValue() const {
    return m_truthy_cell_value;
}
void OAISemanticType::setTruthyCellValue(const QString &truthy_cell_value) {
    m_truthy_cell_value = truthy_cell_value;
    m_truthy_cell_value_isSet = true;
}

bool OAISemanticType::is_truthy_cell_value_Set() const{
    return m_truthy_cell_value_isSet;
}

bool OAISemanticType::is_truthy_cell_value_Valid() const{
    return m_truthy_cell_value_isValid;
}

QList OAISemanticType::getTruthyCellValueSynonyms() const {
    return m_truthy_cell_value_synonyms;
}
void OAISemanticType::setTruthyCellValueSynonyms(const QList &truthy_cell_value_synonyms) {
    m_truthy_cell_value_synonyms = truthy_cell_value_synonyms;
    m_truthy_cell_value_synonyms_isSet = true;
}

bool OAISemanticType::is_truthy_cell_value_synonyms_Set() const{
    return m_truthy_cell_value_synonyms_isSet;
}

bool OAISemanticType::is_truthy_cell_value_synonyms_Valid() const{
    return m_truthy_cell_value_synonyms_isValid;
}

QString OAISemanticType::getFalseyCellValue() const {
    return m_falsey_cell_value;
}
void OAISemanticType::setFalseyCellValue(const QString &falsey_cell_value) {
    m_falsey_cell_value = falsey_cell_value;
    m_falsey_cell_value_isSet = true;
}

bool OAISemanticType::is_falsey_cell_value_Set() const{
    return m_falsey_cell_value_isSet;
}

bool OAISemanticType::is_falsey_cell_value_Valid() const{
    return m_falsey_cell_value_isValid;
}

QList OAISemanticType::getFalseyCellValueSynonyms() const {
    return m_falsey_cell_value_synonyms;
}
void OAISemanticType::setFalseyCellValueSynonyms(const QList &falsey_cell_value_synonyms) {
    m_falsey_cell_value_synonyms = falsey_cell_value_synonyms;
    m_falsey_cell_value_synonyms_isSet = true;
}

bool OAISemanticType::is_falsey_cell_value_synonyms_Set() const{
    return m_falsey_cell_value_synonyms_isSet;
}

bool OAISemanticType::is_falsey_cell_value_synonyms_Valid() const{
    return m_falsey_cell_value_synonyms_isValid;
}

bool OAISemanticType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_truthy_cell_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truthy_cell_value_synonyms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_falsey_cell_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_falsey_cell_value_synonyms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISemanticType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
