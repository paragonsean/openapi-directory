/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAssetBundleImportJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAssetBundleImportJobRequest::OAIStartAssetBundleImportJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAssetBundleImportJobRequest::OAIStartAssetBundleImportJobRequest() {
    this->initializeModel();
}

OAIStartAssetBundleImportJobRequest::~OAIStartAssetBundleImportJobRequest() {}

void OAIStartAssetBundleImportJobRequest::initializeModel() {

    m_asset_bundle_import_job_id_isSet = false;
    m_asset_bundle_import_job_id_isValid = false;

    m_asset_bundle_import_source_isSet = false;
    m_asset_bundle_import_source_isValid = false;

    m_override_parameters_isSet = false;
    m_override_parameters_isValid = false;

    m_failure_action_isSet = false;
    m_failure_action_isValid = false;
}

void OAIStartAssetBundleImportJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAssetBundleImportJobRequest::fromJsonObject(QJsonObject json) {

    m_asset_bundle_import_job_id_isValid = ::OpenAPI::fromJsonValue(m_asset_bundle_import_job_id, json[QString("AssetBundleImportJobId")]);
    m_asset_bundle_import_job_id_isSet = !json[QString("AssetBundleImportJobId")].isNull() && m_asset_bundle_import_job_id_isValid;

    m_asset_bundle_import_source_isValid = ::OpenAPI::fromJsonValue(m_asset_bundle_import_source, json[QString("AssetBundleImportSource")]);
    m_asset_bundle_import_source_isSet = !json[QString("AssetBundleImportSource")].isNull() && m_asset_bundle_import_source_isValid;

    m_override_parameters_isValid = ::OpenAPI::fromJsonValue(m_override_parameters, json[QString("OverrideParameters")]);
    m_override_parameters_isSet = !json[QString("OverrideParameters")].isNull() && m_override_parameters_isValid;

    m_failure_action_isValid = ::OpenAPI::fromJsonValue(m_failure_action, json[QString("FailureAction")]);
    m_failure_action_isSet = !json[QString("FailureAction")].isNull() && m_failure_action_isValid;
}

QString OAIStartAssetBundleImportJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAssetBundleImportJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_bundle_import_job_id_isSet) {
        obj.insert(QString("AssetBundleImportJobId"), ::OpenAPI::toJsonValue(m_asset_bundle_import_job_id));
    }
    if (m_asset_bundle_import_source.isSet()) {
        obj.insert(QString("AssetBundleImportSource"), ::OpenAPI::toJsonValue(m_asset_bundle_import_source));
    }
    if (m_override_parameters.isSet()) {
        obj.insert(QString("OverrideParameters"), ::OpenAPI::toJsonValue(m_override_parameters));
    }
    if (m_failure_action.isSet()) {
        obj.insert(QString("FailureAction"), ::OpenAPI::toJsonValue(m_failure_action));
    }
    return obj;
}

QString OAIStartAssetBundleImportJobRequest::getAssetBundleImportJobId() const {
    return m_asset_bundle_import_job_id;
}
void OAIStartAssetBundleImportJobRequest::setAssetBundleImportJobId(const QString &asset_bundle_import_job_id) {
    m_asset_bundle_import_job_id = asset_bundle_import_job_id;
    m_asset_bundle_import_job_id_isSet = true;
}

bool OAIStartAssetBundleImportJobRequest::is_asset_bundle_import_job_id_Set() const{
    return m_asset_bundle_import_job_id_isSet;
}

bool OAIStartAssetBundleImportJobRequest::is_asset_bundle_import_job_id_Valid() const{
    return m_asset_bundle_import_job_id_isValid;
}

OAIStartAssetBundleImportJobRequest_AssetBundleImportSource OAIStartAssetBundleImportJobRequest::getAssetBundleImportSource() const {
    return m_asset_bundle_import_source;
}
void OAIStartAssetBundleImportJobRequest::setAssetBundleImportSource(const OAIStartAssetBundleImportJobRequest_AssetBundleImportSource &asset_bundle_import_source) {
    m_asset_bundle_import_source = asset_bundle_import_source;
    m_asset_bundle_import_source_isSet = true;
}

bool OAIStartAssetBundleImportJobRequest::is_asset_bundle_import_source_Set() const{
    return m_asset_bundle_import_source_isSet;
}

bool OAIStartAssetBundleImportJobRequest::is_asset_bundle_import_source_Valid() const{
    return m_asset_bundle_import_source_isValid;
}

OAIDescribeAssetBundleImportJobResponse_OverrideParameters OAIStartAssetBundleImportJobRequest::getOverrideParameters() const {
    return m_override_parameters;
}
void OAIStartAssetBundleImportJobRequest::setOverrideParameters(const OAIDescribeAssetBundleImportJobResponse_OverrideParameters &override_parameters) {
    m_override_parameters = override_parameters;
    m_override_parameters_isSet = true;
}

bool OAIStartAssetBundleImportJobRequest::is_override_parameters_Set() const{
    return m_override_parameters_isSet;
}

bool OAIStartAssetBundleImportJobRequest::is_override_parameters_Valid() const{
    return m_override_parameters_isValid;
}

OAIAssetBundleImportFailureAction OAIStartAssetBundleImportJobRequest::getFailureAction() const {
    return m_failure_action;
}
void OAIStartAssetBundleImportJobRequest::setFailureAction(const OAIAssetBundleImportFailureAction &failure_action) {
    m_failure_action = failure_action;
    m_failure_action_isSet = true;
}

bool OAIStartAssetBundleImportJobRequest::is_failure_action_Set() const{
    return m_failure_action_isSet;
}

bool OAIStartAssetBundleImportJobRequest::is_failure_action_Valid() const{
    return m_failure_action_isValid;
}

bool OAIStartAssetBundleImportJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_bundle_import_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_bundle_import_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAssetBundleImportJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_bundle_import_job_id_isValid && m_asset_bundle_import_source_isValid && true;
}

} // namespace OpenAPI
