/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasureField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasureField::OAIMeasureField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasureField::OAIMeasureField() {
    this->initializeModel();
}

OAIMeasureField::~OAIMeasureField() {}

void OAIMeasureField::initializeModel() {

    m_numerical_measure_field_isSet = false;
    m_numerical_measure_field_isValid = false;

    m_categorical_measure_field_isSet = false;
    m_categorical_measure_field_isValid = false;

    m_date_measure_field_isSet = false;
    m_date_measure_field_isValid = false;

    m_calculated_measure_field_isSet = false;
    m_calculated_measure_field_isValid = false;
}

void OAIMeasureField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeasureField::fromJsonObject(QJsonObject json) {

    m_numerical_measure_field_isValid = ::OpenAPI::fromJsonValue(m_numerical_measure_field, json[QString("NumericalMeasureField")]);
    m_numerical_measure_field_isSet = !json[QString("NumericalMeasureField")].isNull() && m_numerical_measure_field_isValid;

    m_categorical_measure_field_isValid = ::OpenAPI::fromJsonValue(m_categorical_measure_field, json[QString("CategoricalMeasureField")]);
    m_categorical_measure_field_isSet = !json[QString("CategoricalMeasureField")].isNull() && m_categorical_measure_field_isValid;

    m_date_measure_field_isValid = ::OpenAPI::fromJsonValue(m_date_measure_field, json[QString("DateMeasureField")]);
    m_date_measure_field_isSet = !json[QString("DateMeasureField")].isNull() && m_date_measure_field_isValid;

    m_calculated_measure_field_isValid = ::OpenAPI::fromJsonValue(m_calculated_measure_field, json[QString("CalculatedMeasureField")]);
    m_calculated_measure_field_isSet = !json[QString("CalculatedMeasureField")].isNull() && m_calculated_measure_field_isValid;
}

QString OAIMeasureField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeasureField::asJsonObject() const {
    QJsonObject obj;
    if (m_numerical_measure_field.isSet()) {
        obj.insert(QString("NumericalMeasureField"), ::OpenAPI::toJsonValue(m_numerical_measure_field));
    }
    if (m_categorical_measure_field.isSet()) {
        obj.insert(QString("CategoricalMeasureField"), ::OpenAPI::toJsonValue(m_categorical_measure_field));
    }
    if (m_date_measure_field.isSet()) {
        obj.insert(QString("DateMeasureField"), ::OpenAPI::toJsonValue(m_date_measure_field));
    }
    if (m_calculated_measure_field.isSet()) {
        obj.insert(QString("CalculatedMeasureField"), ::OpenAPI::toJsonValue(m_calculated_measure_field));
    }
    return obj;
}

OAIMeasureField_NumericalMeasureField OAIMeasureField::getNumericalMeasureField() const {
    return m_numerical_measure_field;
}
void OAIMeasureField::setNumericalMeasureField(const OAIMeasureField_NumericalMeasureField &numerical_measure_field) {
    m_numerical_measure_field = numerical_measure_field;
    m_numerical_measure_field_isSet = true;
}

bool OAIMeasureField::is_numerical_measure_field_Set() const{
    return m_numerical_measure_field_isSet;
}

bool OAIMeasureField::is_numerical_measure_field_Valid() const{
    return m_numerical_measure_field_isValid;
}

OAIMeasureField_CategoricalMeasureField OAIMeasureField::getCategoricalMeasureField() const {
    return m_categorical_measure_field;
}
void OAIMeasureField::setCategoricalMeasureField(const OAIMeasureField_CategoricalMeasureField &categorical_measure_field) {
    m_categorical_measure_field = categorical_measure_field;
    m_categorical_measure_field_isSet = true;
}

bool OAIMeasureField::is_categorical_measure_field_Set() const{
    return m_categorical_measure_field_isSet;
}

bool OAIMeasureField::is_categorical_measure_field_Valid() const{
    return m_categorical_measure_field_isValid;
}

OAIMeasureField_DateMeasureField OAIMeasureField::getDateMeasureField() const {
    return m_date_measure_field;
}
void OAIMeasureField::setDateMeasureField(const OAIMeasureField_DateMeasureField &date_measure_field) {
    m_date_measure_field = date_measure_field;
    m_date_measure_field_isSet = true;
}

bool OAIMeasureField::is_date_measure_field_Set() const{
    return m_date_measure_field_isSet;
}

bool OAIMeasureField::is_date_measure_field_Valid() const{
    return m_date_measure_field_isValid;
}

OAIMeasureField_CalculatedMeasureField OAIMeasureField::getCalculatedMeasureField() const {
    return m_calculated_measure_field;
}
void OAIMeasureField::setCalculatedMeasureField(const OAIMeasureField_CalculatedMeasureField &calculated_measure_field) {
    m_calculated_measure_field = calculated_measure_field;
    m_calculated_measure_field_isSet = true;
}

bool OAIMeasureField::is_calculated_measure_field_Set() const{
    return m_calculated_measure_field_isSet;
}

bool OAIMeasureField::is_calculated_measure_field_Valid() const{
    return m_calculated_measure_field_isValid;
}

bool OAIMeasureField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_numerical_measure_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categorical_measure_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_measure_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_measure_field.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeasureField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
