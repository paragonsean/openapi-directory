/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberIdArnPair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberIdArnPair::OAIMemberIdArnPair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberIdArnPair::OAIMemberIdArnPair() {
    this->initializeModel();
}

OAIMemberIdArnPair::~OAIMemberIdArnPair() {}

void OAIMemberIdArnPair::initializeModel() {

    m_member_id_isSet = false;
    m_member_id_isValid = false;

    m_member_arn_isSet = false;
    m_member_arn_isValid = false;
}

void OAIMemberIdArnPair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberIdArnPair::fromJsonObject(QJsonObject json) {

    m_member_id_isValid = ::OpenAPI::fromJsonValue(m_member_id, json[QString("MemberId")]);
    m_member_id_isSet = !json[QString("MemberId")].isNull() && m_member_id_isValid;

    m_member_arn_isValid = ::OpenAPI::fromJsonValue(m_member_arn, json[QString("MemberArn")]);
    m_member_arn_isSet = !json[QString("MemberArn")].isNull() && m_member_arn_isValid;
}

QString OAIMemberIdArnPair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberIdArnPair::asJsonObject() const {
    QJsonObject obj;
    if (m_member_id_isSet) {
        obj.insert(QString("MemberId"), ::OpenAPI::toJsonValue(m_member_id));
    }
    if (m_member_arn_isSet) {
        obj.insert(QString("MemberArn"), ::OpenAPI::toJsonValue(m_member_arn));
    }
    return obj;
}

QString OAIMemberIdArnPair::getMemberId() const {
    return m_member_id;
}
void OAIMemberIdArnPair::setMemberId(const QString &member_id) {
    m_member_id = member_id;
    m_member_id_isSet = true;
}

bool OAIMemberIdArnPair::is_member_id_Set() const{
    return m_member_id_isSet;
}

bool OAIMemberIdArnPair::is_member_id_Valid() const{
    return m_member_id_isValid;
}

QString OAIMemberIdArnPair::getMemberArn() const {
    return m_member_arn;
}
void OAIMemberIdArnPair::setMemberArn(const QString &member_arn) {
    m_member_arn = member_arn;
    m_member_arn_isSet = true;
}

bool OAIMemberIdArnPair::is_member_arn_Set() const{
    return m_member_arn_isSet;
}

bool OAIMemberIdArnPair::is_member_arn_Valid() const{
    return m_member_arn_isValid;
}

bool OAIMemberIdArnPair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberIdArnPair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
