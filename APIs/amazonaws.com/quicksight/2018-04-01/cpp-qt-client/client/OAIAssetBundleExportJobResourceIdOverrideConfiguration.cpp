/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleExportJobResourceIdOverrideConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleExportJobResourceIdOverrideConfiguration::OAIAssetBundleExportJobResourceIdOverrideConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleExportJobResourceIdOverrideConfiguration::OAIAssetBundleExportJobResourceIdOverrideConfiguration() {
    this->initializeModel();
}

OAIAssetBundleExportJobResourceIdOverrideConfiguration::~OAIAssetBundleExportJobResourceIdOverrideConfiguration() {}

void OAIAssetBundleExportJobResourceIdOverrideConfiguration::initializeModel() {

    m_prefix_for_all_resources_isSet = false;
    m_prefix_for_all_resources_isValid = false;
}

void OAIAssetBundleExportJobResourceIdOverrideConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleExportJobResourceIdOverrideConfiguration::fromJsonObject(QJsonObject json) {

    m_prefix_for_all_resources_isValid = ::OpenAPI::fromJsonValue(m_prefix_for_all_resources, json[QString("PrefixForAllResources")]);
    m_prefix_for_all_resources_isSet = !json[QString("PrefixForAllResources")].isNull() && m_prefix_for_all_resources_isValid;
}

QString OAIAssetBundleExportJobResourceIdOverrideConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleExportJobResourceIdOverrideConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_prefix_for_all_resources_isSet) {
        obj.insert(QString("PrefixForAllResources"), ::OpenAPI::toJsonValue(m_prefix_for_all_resources));
    }
    return obj;
}

bool OAIAssetBundleExportJobResourceIdOverrideConfiguration::getPrefixForAllResources() const {
    return m_prefix_for_all_resources;
}
void OAIAssetBundleExportJobResourceIdOverrideConfiguration::setPrefixForAllResources(const bool &prefix_for_all_resources) {
    m_prefix_for_all_resources = prefix_for_all_resources;
    m_prefix_for_all_resources_isSet = true;
}

bool OAIAssetBundleExportJobResourceIdOverrideConfiguration::is_prefix_for_all_resources_Set() const{
    return m_prefix_for_all_resources_isSet;
}

bool OAIAssetBundleExportJobResourceIdOverrideConfiguration::is_prefix_for_all_resources_Valid() const{
    return m_prefix_for_all_resources_isValid;
}

bool OAIAssetBundleExportJobResourceIdOverrideConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prefix_for_all_resources_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleExportJobResourceIdOverrideConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
