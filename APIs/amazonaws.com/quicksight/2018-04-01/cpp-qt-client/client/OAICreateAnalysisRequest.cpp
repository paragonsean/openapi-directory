/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnalysisRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnalysisRequest::OAICreateAnalysisRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnalysisRequest::OAICreateAnalysisRequest() {
    this->initializeModel();
}

OAICreateAnalysisRequest::~OAICreateAnalysisRequest() {}

void OAICreateAnalysisRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_source_entity_isSet = false;
    m_source_entity_isValid = false;

    m_theme_arn_isSet = false;
    m_theme_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;
}

void OAICreateAnalysisRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnalysisRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_source_entity_isValid = ::OpenAPI::fromJsonValue(m_source_entity, json[QString("SourceEntity")]);
    m_source_entity_isSet = !json[QString("SourceEntity")].isNull() && m_source_entity_isValid;

    m_theme_arn_isValid = ::OpenAPI::fromJsonValue(m_theme_arn, json[QString("ThemeArn")]);
    m_theme_arn_isSet = !json[QString("ThemeArn")].isNull() && m_theme_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;
}

QString OAICreateAnalysisRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnalysisRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_source_entity.isSet()) {
        obj.insert(QString("SourceEntity"), ::OpenAPI::toJsonValue(m_source_entity));
    }
    if (m_theme_arn_isSet) {
        obj.insert(QString("ThemeArn"), ::OpenAPI::toJsonValue(m_theme_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    return obj;
}

QString OAICreateAnalysisRequest::getName() const {
    return m_name;
}
void OAICreateAnalysisRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAnalysisRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAnalysisRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateAnalysisRequest_Parameters OAICreateAnalysisRequest::getParameters() const {
    return m_parameters;
}
void OAICreateAnalysisRequest::setParameters(const OAICreateAnalysisRequest_Parameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateAnalysisRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateAnalysisRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList OAICreateAnalysisRequest::getPermissions() const {
    return m_permissions;
}
void OAICreateAnalysisRequest::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateAnalysisRequest::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateAnalysisRequest::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAICreateAnalysisRequest_SourceEntity OAICreateAnalysisRequest::getSourceEntity() const {
    return m_source_entity;
}
void OAICreateAnalysisRequest::setSourceEntity(const OAICreateAnalysisRequest_SourceEntity &source_entity) {
    m_source_entity = source_entity;
    m_source_entity_isSet = true;
}

bool OAICreateAnalysisRequest::is_source_entity_Set() const{
    return m_source_entity_isSet;
}

bool OAICreateAnalysisRequest::is_source_entity_Valid() const{
    return m_source_entity_isValid;
}

QString OAICreateAnalysisRequest::getThemeArn() const {
    return m_theme_arn;
}
void OAICreateAnalysisRequest::setThemeArn(const QString &theme_arn) {
    m_theme_arn = theme_arn;
    m_theme_arn_isSet = true;
}

bool OAICreateAnalysisRequest::is_theme_arn_Set() const{
    return m_theme_arn_isSet;
}

bool OAICreateAnalysisRequest::is_theme_arn_Valid() const{
    return m_theme_arn_isValid;
}

QList OAICreateAnalysisRequest::getTags() const {
    return m_tags;
}
void OAICreateAnalysisRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAnalysisRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAnalysisRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateAnalysisRequest_Definition OAICreateAnalysisRequest::getDefinition() const {
    return m_definition;
}
void OAICreateAnalysisRequest::setDefinition(const OAICreateAnalysisRequest_Definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAICreateAnalysisRequest::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAICreateAnalysisRequest::is_definition_Valid() const{
    return m_definition_isValid;
}

bool OAICreateAnalysisRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnalysisRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
