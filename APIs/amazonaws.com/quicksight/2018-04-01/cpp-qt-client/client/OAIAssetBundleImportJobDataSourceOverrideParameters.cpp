/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobDataSourceOverrideParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobDataSourceOverrideParameters::OAIAssetBundleImportJobDataSourceOverrideParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobDataSourceOverrideParameters::OAIAssetBundleImportJobDataSourceOverrideParameters() {
    this->initializeModel();
}

OAIAssetBundleImportJobDataSourceOverrideParameters::~OAIAssetBundleImportJobDataSourceOverrideParameters() {}

void OAIAssetBundleImportJobDataSourceOverrideParameters::initializeModel() {

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_data_source_parameters_isSet = false;
    m_data_source_parameters_isValid = false;

    m_vpc_connection_properties_isSet = false;
    m_vpc_connection_properties_isValid = false;

    m_ssl_properties_isSet = false;
    m_ssl_properties_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;
}

void OAIAssetBundleImportJobDataSourceOverrideParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportJobDataSourceOverrideParameters::fromJsonObject(QJsonObject json) {

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_data_source_parameters_isValid = ::OpenAPI::fromJsonValue(m_data_source_parameters, json[QString("DataSourceParameters")]);
    m_data_source_parameters_isSet = !json[QString("DataSourceParameters")].isNull() && m_data_source_parameters_isValid;

    m_vpc_connection_properties_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_properties, json[QString("VpcConnectionProperties")]);
    m_vpc_connection_properties_isSet = !json[QString("VpcConnectionProperties")].isNull() && m_vpc_connection_properties_isValid;

    m_ssl_properties_isValid = ::OpenAPI::fromJsonValue(m_ssl_properties, json[QString("SslProperties")]);
    m_ssl_properties_isSet = !json[QString("SslProperties")].isNull() && m_ssl_properties_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;
}

QString OAIAssetBundleImportJobDataSourceOverrideParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportJobDataSourceOverrideParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_data_source_parameters.isSet()) {
        obj.insert(QString("DataSourceParameters"), ::OpenAPI::toJsonValue(m_data_source_parameters));
    }
    if (m_vpc_connection_properties.isSet()) {
        obj.insert(QString("VpcConnectionProperties"), ::OpenAPI::toJsonValue(m_vpc_connection_properties));
    }
    if (m_ssl_properties.isSet()) {
        obj.insert(QString("SslProperties"), ::OpenAPI::toJsonValue(m_ssl_properties));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    return obj;
}

QString OAIAssetBundleImportJobDataSourceOverrideParameters::getDataSourceId() const {
    return m_data_source_id;
}
void OAIAssetBundleImportJobDataSourceOverrideParameters::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAIAssetBundleImportJobDataSourceOverrideParameters::getName() const {
    return m_name;
}
void OAIAssetBundleImportJobDataSourceOverrideParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_name_Valid() const{
    return m_name_isValid;
}

OAIDataSourceParameters OAIAssetBundleImportJobDataSourceOverrideParameters::getDataSourceParameters() const {
    return m_data_source_parameters;
}
void OAIAssetBundleImportJobDataSourceOverrideParameters::setDataSourceParameters(const OAIDataSourceParameters &data_source_parameters) {
    m_data_source_parameters = data_source_parameters;
    m_data_source_parameters_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_data_source_parameters_Set() const{
    return m_data_source_parameters_isSet;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_data_source_parameters_Valid() const{
    return m_data_source_parameters_isValid;
}

OAIVpcConnectionProperties OAIAssetBundleImportJobDataSourceOverrideParameters::getVpcConnectionProperties() const {
    return m_vpc_connection_properties;
}
void OAIAssetBundleImportJobDataSourceOverrideParameters::setVpcConnectionProperties(const OAIVpcConnectionProperties &vpc_connection_properties) {
    m_vpc_connection_properties = vpc_connection_properties;
    m_vpc_connection_properties_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_vpc_connection_properties_Set() const{
    return m_vpc_connection_properties_isSet;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_vpc_connection_properties_Valid() const{
    return m_vpc_connection_properties_isValid;
}

OAISslProperties OAIAssetBundleImportJobDataSourceOverrideParameters::getSslProperties() const {
    return m_ssl_properties;
}
void OAIAssetBundleImportJobDataSourceOverrideParameters::setSslProperties(const OAISslProperties &ssl_properties) {
    m_ssl_properties = ssl_properties;
    m_ssl_properties_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_ssl_properties_Set() const{
    return m_ssl_properties_isSet;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_ssl_properties_Valid() const{
    return m_ssl_properties_isValid;
}

OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials OAIAssetBundleImportJobDataSourceOverrideParameters::getCredentials() const {
    return m_credentials;
}
void OAIAssetBundleImportJobDataSourceOverrideParameters::setCredentials(const OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::is_credentials_Valid() const{
    return m_credentials_isValid;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connection_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_id_isValid && true;
}

} // namespace OpenAPI
