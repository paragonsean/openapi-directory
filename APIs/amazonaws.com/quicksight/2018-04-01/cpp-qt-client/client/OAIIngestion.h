/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIngestion.h
 *
 * Information about the SPICE ingestion for a dataset.
 */

#ifndef OAIIngestion_H
#define OAIIngestion_H

#include <QJsonObject>

#include "OAIIngestionRequestSource.h"
#include "OAIIngestionRequestType.h"
#include "OAIIngestionStatus.h"
#include "OAIIngestion_ErrorInfo.h"
#include "OAIQueueInfo.h"
#include "OAIRowInfo.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIngestion_ErrorInfo;
class OAIRowInfo;
class OAIQueueInfo;

class OAIIngestion : public OAIObject {
public:
    OAIIngestion();
    OAIIngestion(QString json);
    ~OAIIngestion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getIngestionId() const;
    void setIngestionId(const QString &ingestion_id);
    bool is_ingestion_id_Set() const;
    bool is_ingestion_id_Valid() const;

    OAIIngestionStatus getIngestionStatus() const;
    void setIngestionStatus(const OAIIngestionStatus &ingestion_status);
    bool is_ingestion_status_Set() const;
    bool is_ingestion_status_Valid() const;

    OAIIngestion_ErrorInfo getErrorInfo() const;
    void setErrorInfo(const OAIIngestion_ErrorInfo &error_info);
    bool is_error_info_Set() const;
    bool is_error_info_Valid() const;

    OAIRowInfo getRowInfo() const;
    void setRowInfo(const OAIRowInfo &row_info);
    bool is_row_info_Set() const;
    bool is_row_info_Valid() const;

    OAIQueueInfo getQueueInfo() const;
    void setQueueInfo(const OAIQueueInfo &queue_info);
    bool is_queue_info_Set() const;
    bool is_queue_info_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    qint32 getIngestionTimeInSeconds() const;
    void setIngestionTimeInSeconds(const qint32 &ingestion_time_in_seconds);
    bool is_ingestion_time_in_seconds_Set() const;
    bool is_ingestion_time_in_seconds_Valid() const;

    qint32 getIngestionSizeInBytes() const;
    void setIngestionSizeInBytes(const qint32 &ingestion_size_in_bytes);
    bool is_ingestion_size_in_bytes_Set() const;
    bool is_ingestion_size_in_bytes_Valid() const;

    OAIIngestionRequestSource getRequestSource() const;
    void setRequestSource(const OAIIngestionRequestSource &request_source);
    bool is_request_source_Set() const;
    bool is_request_source_Valid() const;

    OAIIngestionRequestType getRequestType() const;
    void setRequestType(const OAIIngestionRequestType &request_type);
    bool is_request_type_Set() const;
    bool is_request_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_ingestion_id;
    bool m_ingestion_id_isSet;
    bool m_ingestion_id_isValid;

    OAIIngestionStatus m_ingestion_status;
    bool m_ingestion_status_isSet;
    bool m_ingestion_status_isValid;

    OAIIngestion_ErrorInfo m_error_info;
    bool m_error_info_isSet;
    bool m_error_info_isValid;

    OAIRowInfo m_row_info;
    bool m_row_info_isSet;
    bool m_row_info_isValid;

    OAIQueueInfo m_queue_info;
    bool m_queue_info_isSet;
    bool m_queue_info_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    qint32 m_ingestion_time_in_seconds;
    bool m_ingestion_time_in_seconds_isSet;
    bool m_ingestion_time_in_seconds_isValid;

    qint32 m_ingestion_size_in_bytes;
    bool m_ingestion_size_in_bytes_isSet;
    bool m_ingestion_size_in_bytes_isValid;

    OAIIngestionRequestSource m_request_source;
    bool m_request_source_isSet;
    bool m_request_source_isValid;

    OAIIngestionRequestType m_request_type;
    bool m_request_type_isSet;
    bool m_request_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIngestion)

#endif // OAIIngestion_H
