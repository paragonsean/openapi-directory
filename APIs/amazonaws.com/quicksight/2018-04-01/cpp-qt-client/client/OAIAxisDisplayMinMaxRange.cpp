/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAxisDisplayMinMaxRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAxisDisplayMinMaxRange::OAIAxisDisplayMinMaxRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAxisDisplayMinMaxRange::OAIAxisDisplayMinMaxRange() {
    this->initializeModel();
}

OAIAxisDisplayMinMaxRange::~OAIAxisDisplayMinMaxRange() {}

void OAIAxisDisplayMinMaxRange::initializeModel() {

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;
}

void OAIAxisDisplayMinMaxRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAxisDisplayMinMaxRange::fromJsonObject(QJsonObject json) {

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("Minimum")]);
    m_minimum_isSet = !json[QString("Minimum")].isNull() && m_minimum_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("Maximum")]);
    m_maximum_isSet = !json[QString("Maximum")].isNull() && m_maximum_isValid;
}

QString OAIAxisDisplayMinMaxRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAxisDisplayMinMaxRange::asJsonObject() const {
    QJsonObject obj;
    if (m_minimum_isSet) {
        obj.insert(QString("Minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("Maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    return obj;
}

double OAIAxisDisplayMinMaxRange::getMinimum() const {
    return m_minimum;
}
void OAIAxisDisplayMinMaxRange::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIAxisDisplayMinMaxRange::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIAxisDisplayMinMaxRange::is_minimum_Valid() const{
    return m_minimum_isValid;
}

double OAIAxisDisplayMinMaxRange::getMaximum() const {
    return m_maximum;
}
void OAIAxisDisplayMinMaxRange::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIAxisDisplayMinMaxRange::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIAxisDisplayMinMaxRange::is_maximum_Valid() const{
    return m_maximum_isValid;
}

bool OAIAxisDisplayMinMaxRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAxisDisplayMinMaxRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
