/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpecialValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpecialValue::OAISpecialValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpecialValue::OAISpecialValue() {
    this->initializeModel();
}

OAISpecialValue::~OAISpecialValue() {}

void OAISpecialValue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISpecialValue::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISpecialValue::fromJson(QString jsonString) {
    
    if ( jsonString.compare("EMPTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISpecialValue::EMPTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NULL", Qt::CaseInsensitive) == 0) {
        m_value = eOAISpecialValue::r_NULL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAISpecialValue::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISpecialValue::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISpecialValue::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISpecialValue::EMPTY:
            val = "EMPTY";
            break;
        case eOAISpecialValue::r_NULL:
            val = "NULL";
            break;
        case eOAISpecialValue::OTHER:
            val = "OTHER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISpecialValue::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISpecialValue::eOAISpecialValue OAISpecialValue::getValue() const {
    return m_value;
}

void OAISpecialValue::setValue(const OAISpecialValue::eOAISpecialValue& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISpecialValue::isSet() const {
    
    return m_value_isSet;
}

bool OAISpecialValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
