/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotS3DestinationConfiguration_BucketConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotS3DestinationConfiguration_BucketConfiguration::OAISnapshotS3DestinationConfiguration_BucketConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotS3DestinationConfiguration_BucketConfiguration::OAISnapshotS3DestinationConfiguration_BucketConfiguration() {
    this->initializeModel();
}

OAISnapshotS3DestinationConfiguration_BucketConfiguration::~OAISnapshotS3DestinationConfiguration_BucketConfiguration() {}

void OAISnapshotS3DestinationConfiguration_BucketConfiguration::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_prefix_isSet = false;
    m_bucket_prefix_isValid = false;

    m_bucket_region_isSet = false;
    m_bucket_region_isValid = false;
}

void OAISnapshotS3DestinationConfiguration_BucketConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotS3DestinationConfiguration_BucketConfiguration::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_prefix_isValid = ::OpenAPI::fromJsonValue(m_bucket_prefix, json[QString("BucketPrefix")]);
    m_bucket_prefix_isSet = !json[QString("BucketPrefix")].isNull() && m_bucket_prefix_isValid;

    m_bucket_region_isValid = ::OpenAPI::fromJsonValue(m_bucket_region, json[QString("BucketRegion")]);
    m_bucket_region_isSet = !json[QString("BucketRegion")].isNull() && m_bucket_region_isValid;
}

QString OAISnapshotS3DestinationConfiguration_BucketConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotS3DestinationConfiguration_BucketConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_prefix_isSet) {
        obj.insert(QString("BucketPrefix"), ::OpenAPI::toJsonValue(m_bucket_prefix));
    }
    if (m_bucket_region_isSet) {
        obj.insert(QString("BucketRegion"), ::OpenAPI::toJsonValue(m_bucket_region));
    }
    return obj;
}

QString OAISnapshotS3DestinationConfiguration_BucketConfiguration::getBucketName() const {
    return m_bucket_name;
}
void OAISnapshotS3DestinationConfiguration_BucketConfiguration::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAISnapshotS3DestinationConfiguration_BucketConfiguration::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAISnapshotS3DestinationConfiguration_BucketConfiguration::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAISnapshotS3DestinationConfiguration_BucketConfiguration::getBucketPrefix() const {
    return m_bucket_prefix;
}
void OAISnapshotS3DestinationConfiguration_BucketConfiguration::setBucketPrefix(const QString &bucket_prefix) {
    m_bucket_prefix = bucket_prefix;
    m_bucket_prefix_isSet = true;
}

bool OAISnapshotS3DestinationConfiguration_BucketConfiguration::is_bucket_prefix_Set() const{
    return m_bucket_prefix_isSet;
}

bool OAISnapshotS3DestinationConfiguration_BucketConfiguration::is_bucket_prefix_Valid() const{
    return m_bucket_prefix_isValid;
}

QString OAISnapshotS3DestinationConfiguration_BucketConfiguration::getBucketRegion() const {
    return m_bucket_region;
}
void OAISnapshotS3DestinationConfiguration_BucketConfiguration::setBucketRegion(const QString &bucket_region) {
    m_bucket_region = bucket_region;
    m_bucket_region_isSet = true;
}

bool OAISnapshotS3DestinationConfiguration_BucketConfiguration::is_bucket_region_Set() const{
    return m_bucket_region_isSet;
}

bool OAISnapshotS3DestinationConfiguration_BucketConfiguration::is_bucket_region_Valid() const{
    return m_bucket_region_isValid;
}

bool OAISnapshotS3DestinationConfiguration_BucketConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotS3DestinationConfiguration_BucketConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_name_isValid && m_bucket_prefix_isValid && m_bucket_region_isValid && true;
}

} // namespace OpenAPI
