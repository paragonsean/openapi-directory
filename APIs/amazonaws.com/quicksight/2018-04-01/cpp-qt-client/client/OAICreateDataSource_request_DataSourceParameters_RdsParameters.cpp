/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSource_request_DataSourceParameters_RdsParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSource_request_DataSourceParameters_RdsParameters::OAICreateDataSource_request_DataSourceParameters_RdsParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSource_request_DataSourceParameters_RdsParameters::OAICreateDataSource_request_DataSourceParameters_RdsParameters() {
    this->initializeModel();
}

OAICreateDataSource_request_DataSourceParameters_RdsParameters::~OAICreateDataSource_request_DataSourceParameters_RdsParameters() {}

void OAICreateDataSource_request_DataSourceParameters_RdsParameters::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;
}

void OAICreateDataSource_request_DataSourceParameters_RdsParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSource_request_DataSourceParameters_RdsParameters::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;
}

QString OAICreateDataSource_request_DataSourceParameters_RdsParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSource_request_DataSourceParameters_RdsParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    return obj;
}

QString OAICreateDataSource_request_DataSourceParameters_RdsParameters::getInstanceId() const {
    return m_instance_id;
}
void OAICreateDataSource_request_DataSourceParameters_RdsParameters::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAICreateDataSource_request_DataSourceParameters_RdsParameters::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAICreateDataSource_request_DataSourceParameters_RdsParameters::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAICreateDataSource_request_DataSourceParameters_RdsParameters::getDatabase() const {
    return m_database;
}
void OAICreateDataSource_request_DataSourceParameters_RdsParameters::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAICreateDataSource_request_DataSourceParameters_RdsParameters::is_database_Set() const{
    return m_database_isSet;
}

bool OAICreateDataSource_request_DataSourceParameters_RdsParameters::is_database_Valid() const{
    return m_database_isValid;
}

bool OAICreateDataSource_request_DataSourceParameters_RdsParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSource_request_DataSourceParameters_RdsParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_database_isValid && true;
}

} // namespace OpenAPI
