/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldSortOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldSortOptions::OAIFieldSortOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldSortOptions::OAIFieldSortOptions() {
    this->initializeModel();
}

OAIFieldSortOptions::~OAIFieldSortOptions() {}

void OAIFieldSortOptions::initializeModel() {

    m_field_sort_isSet = false;
    m_field_sort_isValid = false;

    m_column_sort_isSet = false;
    m_column_sort_isValid = false;
}

void OAIFieldSortOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldSortOptions::fromJsonObject(QJsonObject json) {

    m_field_sort_isValid = ::OpenAPI::fromJsonValue(m_field_sort, json[QString("FieldSort")]);
    m_field_sort_isSet = !json[QString("FieldSort")].isNull() && m_field_sort_isValid;

    m_column_sort_isValid = ::OpenAPI::fromJsonValue(m_column_sort, json[QString("ColumnSort")]);
    m_column_sort_isSet = !json[QString("ColumnSort")].isNull() && m_column_sort_isValid;
}

QString OAIFieldSortOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldSortOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_field_sort.isSet()) {
        obj.insert(QString("FieldSort"), ::OpenAPI::toJsonValue(m_field_sort));
    }
    if (m_column_sort.isSet()) {
        obj.insert(QString("ColumnSort"), ::OpenAPI::toJsonValue(m_column_sort));
    }
    return obj;
}

OAIFieldSortOptions_FieldSort OAIFieldSortOptions::getFieldSort() const {
    return m_field_sort;
}
void OAIFieldSortOptions::setFieldSort(const OAIFieldSortOptions_FieldSort &field_sort) {
    m_field_sort = field_sort;
    m_field_sort_isSet = true;
}

bool OAIFieldSortOptions::is_field_sort_Set() const{
    return m_field_sort_isSet;
}

bool OAIFieldSortOptions::is_field_sort_Valid() const{
    return m_field_sort_isValid;
}

OAIFieldSortOptions_ColumnSort OAIFieldSortOptions::getColumnSort() const {
    return m_column_sort;
}
void OAIFieldSortOptions::setColumnSort(const OAIFieldSortOptions_ColumnSort &column_sort) {
    m_column_sort = column_sort;
    m_column_sort_isSet = true;
}

bool OAIFieldSortOptions::is_column_sort_Set() const{
    return m_column_sort_isSet;
}

bool OAIFieldSortOptions::is_column_sort_Valid() const{
    return m_column_sort_isValid;
}

bool OAIFieldSortOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldSortOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
