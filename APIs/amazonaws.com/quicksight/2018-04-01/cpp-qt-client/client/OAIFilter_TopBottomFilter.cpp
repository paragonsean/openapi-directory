/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter_TopBottomFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter_TopBottomFilter::OAIFilter_TopBottomFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter_TopBottomFilter::OAIFilter_TopBottomFilter() {
    this->initializeModel();
}

OAIFilter_TopBottomFilter::~OAIFilter_TopBottomFilter() {}

void OAIFilter_TopBottomFilter::initializeModel() {

    m_filter_id_isSet = false;
    m_filter_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_aggregation_sort_configurations_isSet = false;
    m_aggregation_sort_configurations_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;
}

void OAIFilter_TopBottomFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter_TopBottomFilter::fromJsonObject(QJsonObject json) {

    m_filter_id_isValid = ::OpenAPI::fromJsonValue(m_filter_id, json[QString("FilterId")]);
    m_filter_id_isSet = !json[QString("FilterId")].isNull() && m_filter_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_aggregation_sort_configurations_isValid = ::OpenAPI::fromJsonValue(m_aggregation_sort_configurations, json[QString("AggregationSortConfigurations")]);
    m_aggregation_sort_configurations_isSet = !json[QString("AggregationSortConfigurations")].isNull() && m_aggregation_sort_configurations_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;
}

QString OAIFilter_TopBottomFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter_TopBottomFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_id_isSet) {
        obj.insert(QString("FilterId"), ::OpenAPI::toJsonValue(m_filter_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_aggregation_sort_configurations.isSet()) {
        obj.insert(QString("AggregationSortConfigurations"), ::OpenAPI::toJsonValue(m_aggregation_sort_configurations));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    return obj;
}

QString OAIFilter_TopBottomFilter::getFilterId() const {
    return m_filter_id;
}
void OAIFilter_TopBottomFilter::setFilterId(const QString &filter_id) {
    m_filter_id = filter_id;
    m_filter_id_isSet = true;
}

bool OAIFilter_TopBottomFilter::is_filter_id_Set() const{
    return m_filter_id_isSet;
}

bool OAIFilter_TopBottomFilter::is_filter_id_Valid() const{
    return m_filter_id_isValid;
}

OAICategoryDrillDownFilter_Column OAIFilter_TopBottomFilter::getColumn() const {
    return m_column;
}
void OAIFilter_TopBottomFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIFilter_TopBottomFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAIFilter_TopBottomFilter::is_column_Valid() const{
    return m_column_isValid;
}

qint32 OAIFilter_TopBottomFilter::getLimit() const {
    return m_limit;
}
void OAIFilter_TopBottomFilter::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIFilter_TopBottomFilter::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIFilter_TopBottomFilter::is_limit_Valid() const{
    return m_limit_isValid;
}

QList OAIFilter_TopBottomFilter::getAggregationSortConfigurations() const {
    return m_aggregation_sort_configurations;
}
void OAIFilter_TopBottomFilter::setAggregationSortConfigurations(const QList &aggregation_sort_configurations) {
    m_aggregation_sort_configurations = aggregation_sort_configurations;
    m_aggregation_sort_configurations_isSet = true;
}

bool OAIFilter_TopBottomFilter::is_aggregation_sort_configurations_Set() const{
    return m_aggregation_sort_configurations_isSet;
}

bool OAIFilter_TopBottomFilter::is_aggregation_sort_configurations_Valid() const{
    return m_aggregation_sort_configurations_isValid;
}

OAITimeGranularity OAIFilter_TopBottomFilter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAIFilter_TopBottomFilter::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAIFilter_TopBottomFilter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAIFilter_TopBottomFilter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

QString OAIFilter_TopBottomFilter::getParameterName() const {
    return m_parameter_name;
}
void OAIFilter_TopBottomFilter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIFilter_TopBottomFilter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIFilter_TopBottomFilter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

bool OAIFilter_TopBottomFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_sort_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter_TopBottomFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_id_isValid && m_column_isValid && m_aggregation_sort_configurations_isValid && true;
}

} // namespace OpenAPI
