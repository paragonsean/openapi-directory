/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDataSetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDataSetRequest::OAIUpdateDataSetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDataSetRequest::OAIUpdateDataSetRequest() {
    this->initializeModel();
}

OAIUpdateDataSetRequest::~OAIUpdateDataSetRequest() {}

void OAIUpdateDataSetRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_physical_table_map_isSet = false;
    m_physical_table_map_isValid = false;

    m_logical_table_map_isSet = false;
    m_logical_table_map_isValid = false;

    m_import_mode_isSet = false;
    m_import_mode_isValid = false;

    m_column_groups_isSet = false;
    m_column_groups_isValid = false;

    m_field_folders_isSet = false;
    m_field_folders_isValid = false;

    m_row_level_permission_data_set_isSet = false;
    m_row_level_permission_data_set_isValid = false;

    m_row_level_permission_tag_configuration_isSet = false;
    m_row_level_permission_tag_configuration_isValid = false;

    m_column_level_permission_rules_isSet = false;
    m_column_level_permission_rules_isValid = false;

    m_data_set_usage_configuration_isSet = false;
    m_data_set_usage_configuration_isValid = false;

    m_dataset_parameters_isSet = false;
    m_dataset_parameters_isValid = false;
}

void OAIUpdateDataSetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDataSetRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_physical_table_map_isValid = ::OpenAPI::fromJsonValue(m_physical_table_map, json[QString("PhysicalTableMap")]);
    m_physical_table_map_isSet = !json[QString("PhysicalTableMap")].isNull() && m_physical_table_map_isValid;

    m_logical_table_map_isValid = ::OpenAPI::fromJsonValue(m_logical_table_map, json[QString("LogicalTableMap")]);
    m_logical_table_map_isSet = !json[QString("LogicalTableMap")].isNull() && m_logical_table_map_isValid;

    m_import_mode_isValid = ::OpenAPI::fromJsonValue(m_import_mode, json[QString("ImportMode")]);
    m_import_mode_isSet = !json[QString("ImportMode")].isNull() && m_import_mode_isValid;

    m_column_groups_isValid = ::OpenAPI::fromJsonValue(m_column_groups, json[QString("ColumnGroups")]);
    m_column_groups_isSet = !json[QString("ColumnGroups")].isNull() && m_column_groups_isValid;

    m_field_folders_isValid = ::OpenAPI::fromJsonValue(m_field_folders, json[QString("FieldFolders")]);
    m_field_folders_isSet = !json[QString("FieldFolders")].isNull() && m_field_folders_isValid;

    m_row_level_permission_data_set_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_data_set, json[QString("RowLevelPermissionDataSet")]);
    m_row_level_permission_data_set_isSet = !json[QString("RowLevelPermissionDataSet")].isNull() && m_row_level_permission_data_set_isValid;

    m_row_level_permission_tag_configuration_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_tag_configuration, json[QString("RowLevelPermissionTagConfiguration")]);
    m_row_level_permission_tag_configuration_isSet = !json[QString("RowLevelPermissionTagConfiguration")].isNull() && m_row_level_permission_tag_configuration_isValid;

    m_column_level_permission_rules_isValid = ::OpenAPI::fromJsonValue(m_column_level_permission_rules, json[QString("ColumnLevelPermissionRules")]);
    m_column_level_permission_rules_isSet = !json[QString("ColumnLevelPermissionRules")].isNull() && m_column_level_permission_rules_isValid;

    m_data_set_usage_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_set_usage_configuration, json[QString("DataSetUsageConfiguration")]);
    m_data_set_usage_configuration_isSet = !json[QString("DataSetUsageConfiguration")].isNull() && m_data_set_usage_configuration_isValid;

    m_dataset_parameters_isValid = ::OpenAPI::fromJsonValue(m_dataset_parameters, json[QString("DatasetParameters")]);
    m_dataset_parameters_isSet = !json[QString("DatasetParameters")].isNull() && m_dataset_parameters_isValid;
}

QString OAIUpdateDataSetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDataSetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_physical_table_map.isSet()) {
        obj.insert(QString("PhysicalTableMap"), ::OpenAPI::toJsonValue(m_physical_table_map));
    }
    if (m_logical_table_map.isSet()) {
        obj.insert(QString("LogicalTableMap"), ::OpenAPI::toJsonValue(m_logical_table_map));
    }
    if (m_import_mode.isSet()) {
        obj.insert(QString("ImportMode"), ::OpenAPI::toJsonValue(m_import_mode));
    }
    if (m_column_groups.isSet()) {
        obj.insert(QString("ColumnGroups"), ::OpenAPI::toJsonValue(m_column_groups));
    }
    if (m_field_folders.isSet()) {
        obj.insert(QString("FieldFolders"), ::OpenAPI::toJsonValue(m_field_folders));
    }
    if (m_row_level_permission_data_set.isSet()) {
        obj.insert(QString("RowLevelPermissionDataSet"), ::OpenAPI::toJsonValue(m_row_level_permission_data_set));
    }
    if (m_row_level_permission_tag_configuration.isSet()) {
        obj.insert(QString("RowLevelPermissionTagConfiguration"), ::OpenAPI::toJsonValue(m_row_level_permission_tag_configuration));
    }
    if (m_column_level_permission_rules.isSet()) {
        obj.insert(QString("ColumnLevelPermissionRules"), ::OpenAPI::toJsonValue(m_column_level_permission_rules));
    }
    if (m_data_set_usage_configuration.isSet()) {
        obj.insert(QString("DataSetUsageConfiguration"), ::OpenAPI::toJsonValue(m_data_set_usage_configuration));
    }
    if (m_dataset_parameters.isSet()) {
        obj.insert(QString("DatasetParameters"), ::OpenAPI::toJsonValue(m_dataset_parameters));
    }
    return obj;
}

QString OAIUpdateDataSetRequest::getName() const {
    return m_name;
}
void OAIUpdateDataSetRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateDataSetRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateDataSetRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAIUpdateDataSetRequest::getPhysicalTableMap() const {
    return m_physical_table_map;
}
void OAIUpdateDataSetRequest::setPhysicalTableMap(const QMap &physical_table_map) {
    m_physical_table_map = physical_table_map;
    m_physical_table_map_isSet = true;
}

bool OAIUpdateDataSetRequest::is_physical_table_map_Set() const{
    return m_physical_table_map_isSet;
}

bool OAIUpdateDataSetRequest::is_physical_table_map_Valid() const{
    return m_physical_table_map_isValid;
}

QMap OAIUpdateDataSetRequest::getLogicalTableMap() const {
    return m_logical_table_map;
}
void OAIUpdateDataSetRequest::setLogicalTableMap(const QMap &logical_table_map) {
    m_logical_table_map = logical_table_map;
    m_logical_table_map_isSet = true;
}

bool OAIUpdateDataSetRequest::is_logical_table_map_Set() const{
    return m_logical_table_map_isSet;
}

bool OAIUpdateDataSetRequest::is_logical_table_map_Valid() const{
    return m_logical_table_map_isValid;
}

OAIDataSetImportMode OAIUpdateDataSetRequest::getImportMode() const {
    return m_import_mode;
}
void OAIUpdateDataSetRequest::setImportMode(const OAIDataSetImportMode &import_mode) {
    m_import_mode = import_mode;
    m_import_mode_isSet = true;
}

bool OAIUpdateDataSetRequest::is_import_mode_Set() const{
    return m_import_mode_isSet;
}

bool OAIUpdateDataSetRequest::is_import_mode_Valid() const{
    return m_import_mode_isValid;
}

QList OAIUpdateDataSetRequest::getColumnGroups() const {
    return m_column_groups;
}
void OAIUpdateDataSetRequest::setColumnGroups(const QList &column_groups) {
    m_column_groups = column_groups;
    m_column_groups_isSet = true;
}

bool OAIUpdateDataSetRequest::is_column_groups_Set() const{
    return m_column_groups_isSet;
}

bool OAIUpdateDataSetRequest::is_column_groups_Valid() const{
    return m_column_groups_isValid;
}

QMap OAIUpdateDataSetRequest::getFieldFolders() const {
    return m_field_folders;
}
void OAIUpdateDataSetRequest::setFieldFolders(const QMap &field_folders) {
    m_field_folders = field_folders;
    m_field_folders_isSet = true;
}

bool OAIUpdateDataSetRequest::is_field_folders_Set() const{
    return m_field_folders_isSet;
}

bool OAIUpdateDataSetRequest::is_field_folders_Valid() const{
    return m_field_folders_isValid;
}

OAIUpdateDataSetRequest_RowLevelPermissionDataSet OAIUpdateDataSetRequest::getRowLevelPermissionDataSet() const {
    return m_row_level_permission_data_set;
}
void OAIUpdateDataSetRequest::setRowLevelPermissionDataSet(const OAIUpdateDataSetRequest_RowLevelPermissionDataSet &row_level_permission_data_set) {
    m_row_level_permission_data_set = row_level_permission_data_set;
    m_row_level_permission_data_set_isSet = true;
}

bool OAIUpdateDataSetRequest::is_row_level_permission_data_set_Set() const{
    return m_row_level_permission_data_set_isSet;
}

bool OAIUpdateDataSetRequest::is_row_level_permission_data_set_Valid() const{
    return m_row_level_permission_data_set_isValid;
}

OAICreateDataSetRequest_RowLevelPermissionTagConfiguration OAIUpdateDataSetRequest::getRowLevelPermissionTagConfiguration() const {
    return m_row_level_permission_tag_configuration;
}
void OAIUpdateDataSetRequest::setRowLevelPermissionTagConfiguration(const OAICreateDataSetRequest_RowLevelPermissionTagConfiguration &row_level_permission_tag_configuration) {
    m_row_level_permission_tag_configuration = row_level_permission_tag_configuration;
    m_row_level_permission_tag_configuration_isSet = true;
}

bool OAIUpdateDataSetRequest::is_row_level_permission_tag_configuration_Set() const{
    return m_row_level_permission_tag_configuration_isSet;
}

bool OAIUpdateDataSetRequest::is_row_level_permission_tag_configuration_Valid() const{
    return m_row_level_permission_tag_configuration_isValid;
}

QList OAIUpdateDataSetRequest::getColumnLevelPermissionRules() const {
    return m_column_level_permission_rules;
}
void OAIUpdateDataSetRequest::setColumnLevelPermissionRules(const QList &column_level_permission_rules) {
    m_column_level_permission_rules = column_level_permission_rules;
    m_column_level_permission_rules_isSet = true;
}

bool OAIUpdateDataSetRequest::is_column_level_permission_rules_Set() const{
    return m_column_level_permission_rules_isSet;
}

bool OAIUpdateDataSetRequest::is_column_level_permission_rules_Valid() const{
    return m_column_level_permission_rules_isValid;
}

OAIDataSetUsageConfiguration OAIUpdateDataSetRequest::getDataSetUsageConfiguration() const {
    return m_data_set_usage_configuration;
}
void OAIUpdateDataSetRequest::setDataSetUsageConfiguration(const OAIDataSetUsageConfiguration &data_set_usage_configuration) {
    m_data_set_usage_configuration = data_set_usage_configuration;
    m_data_set_usage_configuration_isSet = true;
}

bool OAIUpdateDataSetRequest::is_data_set_usage_configuration_Set() const{
    return m_data_set_usage_configuration_isSet;
}

bool OAIUpdateDataSetRequest::is_data_set_usage_configuration_Valid() const{
    return m_data_set_usage_configuration_isValid;
}

QList OAIUpdateDataSetRequest::getDatasetParameters() const {
    return m_dataset_parameters;
}
void OAIUpdateDataSetRequest::setDatasetParameters(const QList &dataset_parameters) {
    m_dataset_parameters = dataset_parameters;
    m_dataset_parameters_isSet = true;
}

bool OAIUpdateDataSetRequest::is_dataset_parameters_Set() const{
    return m_dataset_parameters_isSet;
}

bool OAIUpdateDataSetRequest::is_dataset_parameters_Valid() const{
    return m_dataset_parameters_isValid;
}

bool OAIUpdateDataSetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_table_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_table_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_folders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_data_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_tag_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_level_permission_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_usage_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDataSetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_physical_table_map_isValid && m_import_mode_isValid && true;
}

} // namespace OpenAPI
