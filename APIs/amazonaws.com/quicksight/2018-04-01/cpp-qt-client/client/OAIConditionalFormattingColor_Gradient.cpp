/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingColor_Gradient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingColor_Gradient::OAIConditionalFormattingColor_Gradient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingColor_Gradient::OAIConditionalFormattingColor_Gradient() {
    this->initializeModel();
}

OAIConditionalFormattingColor_Gradient::~OAIConditionalFormattingColor_Gradient() {}

void OAIConditionalFormattingColor_Gradient::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;
}

void OAIConditionalFormattingColor_Gradient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalFormattingColor_Gradient::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;
}

QString OAIConditionalFormattingColor_Gradient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalFormattingColor_Gradient::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_color.isSet()) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    return obj;
}

QString OAIConditionalFormattingColor_Gradient::getExpression() const {
    return m_expression;
}
void OAIConditionalFormattingColor_Gradient::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIConditionalFormattingColor_Gradient::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIConditionalFormattingColor_Gradient::is_expression_Valid() const{
    return m_expression_isValid;
}

OAIConditionalFormattingGradientColor_Color OAIConditionalFormattingColor_Gradient::getColor() const {
    return m_color;
}
void OAIConditionalFormattingColor_Gradient::setColor(const OAIConditionalFormattingGradientColor_Color &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIConditionalFormattingColor_Gradient::is_color_Set() const{
    return m_color_isSet;
}

bool OAIConditionalFormattingColor_Gradient::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIConditionalFormattingColor_Gradient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalFormattingColor_Gradient::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && m_color_isValid && true;
}

} // namespace OpenAPI
