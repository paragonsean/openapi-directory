/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter::OAIFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter::OAIFilter() {
    this->initializeModel();
}

OAIFilter::~OAIFilter() {}

void OAIFilter::initializeModel() {

    m_category_filter_isSet = false;
    m_category_filter_isValid = false;

    m_numeric_range_filter_isSet = false;
    m_numeric_range_filter_isValid = false;

    m_numeric_equality_filter_isSet = false;
    m_numeric_equality_filter_isValid = false;

    m_time_equality_filter_isSet = false;
    m_time_equality_filter_isValid = false;

    m_time_range_filter_isSet = false;
    m_time_range_filter_isValid = false;

    m_relative_dates_filter_isSet = false;
    m_relative_dates_filter_isValid = false;

    m_top_bottom_filter_isSet = false;
    m_top_bottom_filter_isValid = false;
}

void OAIFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter::fromJsonObject(QJsonObject json) {

    m_category_filter_isValid = ::OpenAPI::fromJsonValue(m_category_filter, json[QString("CategoryFilter")]);
    m_category_filter_isSet = !json[QString("CategoryFilter")].isNull() && m_category_filter_isValid;

    m_numeric_range_filter_isValid = ::OpenAPI::fromJsonValue(m_numeric_range_filter, json[QString("NumericRangeFilter")]);
    m_numeric_range_filter_isSet = !json[QString("NumericRangeFilter")].isNull() && m_numeric_range_filter_isValid;

    m_numeric_equality_filter_isValid = ::OpenAPI::fromJsonValue(m_numeric_equality_filter, json[QString("NumericEqualityFilter")]);
    m_numeric_equality_filter_isSet = !json[QString("NumericEqualityFilter")].isNull() && m_numeric_equality_filter_isValid;

    m_time_equality_filter_isValid = ::OpenAPI::fromJsonValue(m_time_equality_filter, json[QString("TimeEqualityFilter")]);
    m_time_equality_filter_isSet = !json[QString("TimeEqualityFilter")].isNull() && m_time_equality_filter_isValid;

    m_time_range_filter_isValid = ::OpenAPI::fromJsonValue(m_time_range_filter, json[QString("TimeRangeFilter")]);
    m_time_range_filter_isSet = !json[QString("TimeRangeFilter")].isNull() && m_time_range_filter_isValid;

    m_relative_dates_filter_isValid = ::OpenAPI::fromJsonValue(m_relative_dates_filter, json[QString("RelativeDatesFilter")]);
    m_relative_dates_filter_isSet = !json[QString("RelativeDatesFilter")].isNull() && m_relative_dates_filter_isValid;

    m_top_bottom_filter_isValid = ::OpenAPI::fromJsonValue(m_top_bottom_filter, json[QString("TopBottomFilter")]);
    m_top_bottom_filter_isSet = !json[QString("TopBottomFilter")].isNull() && m_top_bottom_filter_isValid;
}

QString OAIFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_category_filter.isSet()) {
        obj.insert(QString("CategoryFilter"), ::OpenAPI::toJsonValue(m_category_filter));
    }
    if (m_numeric_range_filter.isSet()) {
        obj.insert(QString("NumericRangeFilter"), ::OpenAPI::toJsonValue(m_numeric_range_filter));
    }
    if (m_numeric_equality_filter.isSet()) {
        obj.insert(QString("NumericEqualityFilter"), ::OpenAPI::toJsonValue(m_numeric_equality_filter));
    }
    if (m_time_equality_filter.isSet()) {
        obj.insert(QString("TimeEqualityFilter"), ::OpenAPI::toJsonValue(m_time_equality_filter));
    }
    if (m_time_range_filter.isSet()) {
        obj.insert(QString("TimeRangeFilter"), ::OpenAPI::toJsonValue(m_time_range_filter));
    }
    if (m_relative_dates_filter.isSet()) {
        obj.insert(QString("RelativeDatesFilter"), ::OpenAPI::toJsonValue(m_relative_dates_filter));
    }
    if (m_top_bottom_filter.isSet()) {
        obj.insert(QString("TopBottomFilter"), ::OpenAPI::toJsonValue(m_top_bottom_filter));
    }
    return obj;
}

OAIFilter_CategoryFilter OAIFilter::getCategoryFilter() const {
    return m_category_filter;
}
void OAIFilter::setCategoryFilter(const OAIFilter_CategoryFilter &category_filter) {
    m_category_filter = category_filter;
    m_category_filter_isSet = true;
}

bool OAIFilter::is_category_filter_Set() const{
    return m_category_filter_isSet;
}

bool OAIFilter::is_category_filter_Valid() const{
    return m_category_filter_isValid;
}

OAIFilter_NumericRangeFilter OAIFilter::getNumericRangeFilter() const {
    return m_numeric_range_filter;
}
void OAIFilter::setNumericRangeFilter(const OAIFilter_NumericRangeFilter &numeric_range_filter) {
    m_numeric_range_filter = numeric_range_filter;
    m_numeric_range_filter_isSet = true;
}

bool OAIFilter::is_numeric_range_filter_Set() const{
    return m_numeric_range_filter_isSet;
}

bool OAIFilter::is_numeric_range_filter_Valid() const{
    return m_numeric_range_filter_isValid;
}

OAIFilter_NumericEqualityFilter OAIFilter::getNumericEqualityFilter() const {
    return m_numeric_equality_filter;
}
void OAIFilter::setNumericEqualityFilter(const OAIFilter_NumericEqualityFilter &numeric_equality_filter) {
    m_numeric_equality_filter = numeric_equality_filter;
    m_numeric_equality_filter_isSet = true;
}

bool OAIFilter::is_numeric_equality_filter_Set() const{
    return m_numeric_equality_filter_isSet;
}

bool OAIFilter::is_numeric_equality_filter_Valid() const{
    return m_numeric_equality_filter_isValid;
}

OAIFilter_TimeEqualityFilter OAIFilter::getTimeEqualityFilter() const {
    return m_time_equality_filter;
}
void OAIFilter::setTimeEqualityFilter(const OAIFilter_TimeEqualityFilter &time_equality_filter) {
    m_time_equality_filter = time_equality_filter;
    m_time_equality_filter_isSet = true;
}

bool OAIFilter::is_time_equality_filter_Set() const{
    return m_time_equality_filter_isSet;
}

bool OAIFilter::is_time_equality_filter_Valid() const{
    return m_time_equality_filter_isValid;
}

OAIFilter_TimeRangeFilter OAIFilter::getTimeRangeFilter() const {
    return m_time_range_filter;
}
void OAIFilter::setTimeRangeFilter(const OAIFilter_TimeRangeFilter &time_range_filter) {
    m_time_range_filter = time_range_filter;
    m_time_range_filter_isSet = true;
}

bool OAIFilter::is_time_range_filter_Set() const{
    return m_time_range_filter_isSet;
}

bool OAIFilter::is_time_range_filter_Valid() const{
    return m_time_range_filter_isValid;
}

OAIFilter_RelativeDatesFilter OAIFilter::getRelativeDatesFilter() const {
    return m_relative_dates_filter;
}
void OAIFilter::setRelativeDatesFilter(const OAIFilter_RelativeDatesFilter &relative_dates_filter) {
    m_relative_dates_filter = relative_dates_filter;
    m_relative_dates_filter_isSet = true;
}

bool OAIFilter::is_relative_dates_filter_Set() const{
    return m_relative_dates_filter_isSet;
}

bool OAIFilter::is_relative_dates_filter_Valid() const{
    return m_relative_dates_filter_isValid;
}

OAIFilter_TopBottomFilter OAIFilter::getTopBottomFilter() const {
    return m_top_bottom_filter;
}
void OAIFilter::setTopBottomFilter(const OAIFilter_TopBottomFilter &top_bottom_filter) {
    m_top_bottom_filter = top_bottom_filter;
    m_top_bottom_filter_isSet = true;
}

bool OAIFilter::is_top_bottom_filter_Set() const{
    return m_top_bottom_filter_isSet;
}

bool OAIFilter::is_top_bottom_filter_Valid() const{
    return m_top_bottom_filter_isValid;
}

bool OAIFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_range_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_equality_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_equality_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_dates_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_bottom_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
