/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTopicRefreshResponse_RefreshDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTopicRefreshResponse_RefreshDetails::OAIDescribeTopicRefreshResponse_RefreshDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTopicRefreshResponse_RefreshDetails::OAIDescribeTopicRefreshResponse_RefreshDetails() {
    this->initializeModel();
}

OAIDescribeTopicRefreshResponse_RefreshDetails::~OAIDescribeTopicRefreshResponse_RefreshDetails() {}

void OAIDescribeTopicRefreshResponse_RefreshDetails::initializeModel() {

    m_refresh_arn_isSet = false;
    m_refresh_arn_isValid = false;

    m_refresh_id_isSet = false;
    m_refresh_id_isValid = false;

    m_refresh_status_isSet = false;
    m_refresh_status_isValid = false;
}

void OAIDescribeTopicRefreshResponse_RefreshDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTopicRefreshResponse_RefreshDetails::fromJsonObject(QJsonObject json) {

    m_refresh_arn_isValid = ::OpenAPI::fromJsonValue(m_refresh_arn, json[QString("RefreshArn")]);
    m_refresh_arn_isSet = !json[QString("RefreshArn")].isNull() && m_refresh_arn_isValid;

    m_refresh_id_isValid = ::OpenAPI::fromJsonValue(m_refresh_id, json[QString("RefreshId")]);
    m_refresh_id_isSet = !json[QString("RefreshId")].isNull() && m_refresh_id_isValid;

    m_refresh_status_isValid = ::OpenAPI::fromJsonValue(m_refresh_status, json[QString("RefreshStatus")]);
    m_refresh_status_isSet = !json[QString("RefreshStatus")].isNull() && m_refresh_status_isValid;
}

QString OAIDescribeTopicRefreshResponse_RefreshDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTopicRefreshResponse_RefreshDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_refresh_arn_isSet) {
        obj.insert(QString("RefreshArn"), ::OpenAPI::toJsonValue(m_refresh_arn));
    }
    if (m_refresh_id_isSet) {
        obj.insert(QString("RefreshId"), ::OpenAPI::toJsonValue(m_refresh_id));
    }
    if (m_refresh_status.isSet()) {
        obj.insert(QString("RefreshStatus"), ::OpenAPI::toJsonValue(m_refresh_status));
    }
    return obj;
}

QString OAIDescribeTopicRefreshResponse_RefreshDetails::getRefreshArn() const {
    return m_refresh_arn;
}
void OAIDescribeTopicRefreshResponse_RefreshDetails::setRefreshArn(const QString &refresh_arn) {
    m_refresh_arn = refresh_arn;
    m_refresh_arn_isSet = true;
}

bool OAIDescribeTopicRefreshResponse_RefreshDetails::is_refresh_arn_Set() const{
    return m_refresh_arn_isSet;
}

bool OAIDescribeTopicRefreshResponse_RefreshDetails::is_refresh_arn_Valid() const{
    return m_refresh_arn_isValid;
}

QString OAIDescribeTopicRefreshResponse_RefreshDetails::getRefreshId() const {
    return m_refresh_id;
}
void OAIDescribeTopicRefreshResponse_RefreshDetails::setRefreshId(const QString &refresh_id) {
    m_refresh_id = refresh_id;
    m_refresh_id_isSet = true;
}

bool OAIDescribeTopicRefreshResponse_RefreshDetails::is_refresh_id_Set() const{
    return m_refresh_id_isSet;
}

bool OAIDescribeTopicRefreshResponse_RefreshDetails::is_refresh_id_Valid() const{
    return m_refresh_id_isValid;
}

OAITopicRefreshStatus OAIDescribeTopicRefreshResponse_RefreshDetails::getRefreshStatus() const {
    return m_refresh_status;
}
void OAIDescribeTopicRefreshResponse_RefreshDetails::setRefreshStatus(const OAITopicRefreshStatus &refresh_status) {
    m_refresh_status = refresh_status;
    m_refresh_status_isSet = true;
}

bool OAIDescribeTopicRefreshResponse_RefreshDetails::is_refresh_status_Set() const{
    return m_refresh_status_isSet;
}

bool OAIDescribeTopicRefreshResponse_RefreshDetails::is_refresh_status_Valid() const{
    return m_refresh_status_isValid;
}

bool OAIDescribeTopicRefreshResponse_RefreshDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_refresh_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTopicRefreshResponse_RefreshDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
