/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDashboardPermissions_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDashboardPermissions_request::OAIUpdateDashboardPermissions_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDashboardPermissions_request::OAIUpdateDashboardPermissions_request() {
    this->initializeModel();
}

OAIUpdateDashboardPermissions_request::~OAIUpdateDashboardPermissions_request() {}

void OAIUpdateDashboardPermissions_request::initializeModel() {

    m_grant_permissions_isSet = false;
    m_grant_permissions_isValid = false;

    m_revoke_permissions_isSet = false;
    m_revoke_permissions_isValid = false;

    m_grant_link_permissions_isSet = false;
    m_grant_link_permissions_isValid = false;

    m_revoke_link_permissions_isSet = false;
    m_revoke_link_permissions_isValid = false;
}

void OAIUpdateDashboardPermissions_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDashboardPermissions_request::fromJsonObject(QJsonObject json) {

    m_grant_permissions_isValid = ::OpenAPI::fromJsonValue(m_grant_permissions, json[QString("GrantPermissions")]);
    m_grant_permissions_isSet = !json[QString("GrantPermissions")].isNull() && m_grant_permissions_isValid;

    m_revoke_permissions_isValid = ::OpenAPI::fromJsonValue(m_revoke_permissions, json[QString("RevokePermissions")]);
    m_revoke_permissions_isSet = !json[QString("RevokePermissions")].isNull() && m_revoke_permissions_isValid;

    m_grant_link_permissions_isValid = ::OpenAPI::fromJsonValue(m_grant_link_permissions, json[QString("GrantLinkPermissions")]);
    m_grant_link_permissions_isSet = !json[QString("GrantLinkPermissions")].isNull() && m_grant_link_permissions_isValid;

    m_revoke_link_permissions_isValid = ::OpenAPI::fromJsonValue(m_revoke_link_permissions, json[QString("RevokeLinkPermissions")]);
    m_revoke_link_permissions_isSet = !json[QString("RevokeLinkPermissions")].isNull() && m_revoke_link_permissions_isValid;
}

QString OAIUpdateDashboardPermissions_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDashboardPermissions_request::asJsonObject() const {
    QJsonObject obj;
    if (m_grant_permissions.size() > 0) {
        obj.insert(QString("GrantPermissions"), ::OpenAPI::toJsonValue(m_grant_permissions));
    }
    if (m_revoke_permissions.size() > 0) {
        obj.insert(QString("RevokePermissions"), ::OpenAPI::toJsonValue(m_revoke_permissions));
    }
    if (m_grant_link_permissions.size() > 0) {
        obj.insert(QString("GrantLinkPermissions"), ::OpenAPI::toJsonValue(m_grant_link_permissions));
    }
    if (m_revoke_link_permissions.size() > 0) {
        obj.insert(QString("RevokeLinkPermissions"), ::OpenAPI::toJsonValue(m_revoke_link_permissions));
    }
    return obj;
}

QList<OAIResourcePermission> OAIUpdateDashboardPermissions_request::getGrantPermissions() const {
    return m_grant_permissions;
}
void OAIUpdateDashboardPermissions_request::setGrantPermissions(const QList<OAIResourcePermission> &grant_permissions) {
    m_grant_permissions = grant_permissions;
    m_grant_permissions_isSet = true;
}

bool OAIUpdateDashboardPermissions_request::is_grant_permissions_Set() const{
    return m_grant_permissions_isSet;
}

bool OAIUpdateDashboardPermissions_request::is_grant_permissions_Valid() const{
    return m_grant_permissions_isValid;
}

QList<OAIResourcePermission> OAIUpdateDashboardPermissions_request::getRevokePermissions() const {
    return m_revoke_permissions;
}
void OAIUpdateDashboardPermissions_request::setRevokePermissions(const QList<OAIResourcePermission> &revoke_permissions) {
    m_revoke_permissions = revoke_permissions;
    m_revoke_permissions_isSet = true;
}

bool OAIUpdateDashboardPermissions_request::is_revoke_permissions_Set() const{
    return m_revoke_permissions_isSet;
}

bool OAIUpdateDashboardPermissions_request::is_revoke_permissions_Valid() const{
    return m_revoke_permissions_isValid;
}

QList<OAIResourcePermission> OAIUpdateDashboardPermissions_request::getGrantLinkPermissions() const {
    return m_grant_link_permissions;
}
void OAIUpdateDashboardPermissions_request::setGrantLinkPermissions(const QList<OAIResourcePermission> &grant_link_permissions) {
    m_grant_link_permissions = grant_link_permissions;
    m_grant_link_permissions_isSet = true;
}

bool OAIUpdateDashboardPermissions_request::is_grant_link_permissions_Set() const{
    return m_grant_link_permissions_isSet;
}

bool OAIUpdateDashboardPermissions_request::is_grant_link_permissions_Valid() const{
    return m_grant_link_permissions_isValid;
}

QList<OAIResourcePermission> OAIUpdateDashboardPermissions_request::getRevokeLinkPermissions() const {
    return m_revoke_link_permissions;
}
void OAIUpdateDashboardPermissions_request::setRevokeLinkPermissions(const QList<OAIResourcePermission> &revoke_link_permissions) {
    m_revoke_link_permissions = revoke_link_permissions;
    m_revoke_link_permissions_isSet = true;
}

bool OAIUpdateDashboardPermissions_request::is_revoke_link_permissions_Set() const{
    return m_revoke_link_permissions_isSet;
}

bool OAIUpdateDashboardPermissions_request::is_revoke_link_permissions_Valid() const{
    return m_revoke_link_permissions_isValid;
}

bool OAIUpdateDashboardPermissions_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grant_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoke_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_link_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoke_link_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDashboardPermissions_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
