/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericalMeasureField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericalMeasureField::OAINumericalMeasureField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericalMeasureField::OAINumericalMeasureField() {
    this->initializeModel();
}

OAINumericalMeasureField::~OAINumericalMeasureField() {}

void OAINumericalMeasureField::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;

    m_format_configuration_isSet = false;
    m_format_configuration_isValid = false;
}

void OAINumericalMeasureField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericalMeasureField::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("AggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("AggregationFunction")].isNull() && m_aggregation_function_isValid;

    m_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_format_configuration, json[QString("FormatConfiguration")]);
    m_format_configuration_isSet = !json[QString("FormatConfiguration")].isNull() && m_format_configuration_isValid;
}

QString OAINumericalMeasureField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericalMeasureField::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_aggregation_function.isSet()) {
        obj.insert(QString("AggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    if (m_format_configuration.isSet()) {
        obj.insert(QString("FormatConfiguration"), ::OpenAPI::toJsonValue(m_format_configuration));
    }
    return obj;
}

QString OAINumericalMeasureField::getFieldId() const {
    return m_field_id;
}
void OAINumericalMeasureField::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAINumericalMeasureField::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAINumericalMeasureField::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAINumericalMeasureField_Column OAINumericalMeasureField::getColumn() const {
    return m_column;
}
void OAINumericalMeasureField::setColumn(const OAINumericalMeasureField_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAINumericalMeasureField::is_column_Set() const{
    return m_column_isSet;
}

bool OAINumericalMeasureField::is_column_Valid() const{
    return m_column_isValid;
}

OAINumericalMeasureField_AggregationFunction OAINumericalMeasureField::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAINumericalMeasureField::setAggregationFunction(const OAINumericalMeasureField_AggregationFunction &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAINumericalMeasureField::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAINumericalMeasureField::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

OAINumericalDimensionField_FormatConfiguration OAINumericalMeasureField::getFormatConfiguration() const {
    return m_format_configuration;
}
void OAINumericalMeasureField::setFormatConfiguration(const OAINumericalDimensionField_FormatConfiguration &format_configuration) {
    m_format_configuration = format_configuration;
    m_format_configuration_isSet = true;
}

bool OAINumericalMeasureField::is_format_configuration_Set() const{
    return m_format_configuration_isSet;
}

bool OAINumericalMeasureField::is_format_configuration_Valid() const{
    return m_format_configuration_isValid;
}

bool OAINumericalMeasureField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericalMeasureField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_column_isValid && true;
}

} // namespace OpenAPI
