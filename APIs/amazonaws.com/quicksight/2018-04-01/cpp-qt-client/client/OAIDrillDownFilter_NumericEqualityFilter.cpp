/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrillDownFilter_NumericEqualityFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDrillDownFilter_NumericEqualityFilter::OAIDrillDownFilter_NumericEqualityFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDrillDownFilter_NumericEqualityFilter::OAIDrillDownFilter_NumericEqualityFilter() {
    this->initializeModel();
}

OAIDrillDownFilter_NumericEqualityFilter::~OAIDrillDownFilter_NumericEqualityFilter() {}

void OAIDrillDownFilter_NumericEqualityFilter::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDrillDownFilter_NumericEqualityFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDrillDownFilter_NumericEqualityFilter::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIDrillDownFilter_NumericEqualityFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDrillDownFilter_NumericEqualityFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAICategoryDrillDownFilter_Column OAIDrillDownFilter_NumericEqualityFilter::getColumn() const {
    return m_column;
}
void OAIDrillDownFilter_NumericEqualityFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIDrillDownFilter_NumericEqualityFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAIDrillDownFilter_NumericEqualityFilter::is_column_Valid() const{
    return m_column_isValid;
}

double OAIDrillDownFilter_NumericEqualityFilter::getValue() const {
    return m_value;
}
void OAIDrillDownFilter_NumericEqualityFilter::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDrillDownFilter_NumericEqualityFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDrillDownFilter_NumericEqualityFilter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDrillDownFilter_NumericEqualityFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDrillDownFilter_NumericEqualityFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
