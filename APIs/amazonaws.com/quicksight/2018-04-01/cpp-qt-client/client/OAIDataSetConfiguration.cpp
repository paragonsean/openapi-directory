/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetConfiguration::OAIDataSetConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetConfiguration::OAIDataSetConfiguration() {
    this->initializeModel();
}

OAIDataSetConfiguration::~OAIDataSetConfiguration() {}

void OAIDataSetConfiguration::initializeModel() {

    m_placeholder_isSet = false;
    m_placeholder_isValid = false;

    m_data_set_schema_isSet = false;
    m_data_set_schema_isValid = false;

    m_column_group_schema_list_isSet = false;
    m_column_group_schema_list_isValid = false;
}

void OAIDataSetConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetConfiguration::fromJsonObject(QJsonObject json) {

    m_placeholder_isValid = ::OpenAPI::fromJsonValue(m_placeholder, json[QString("Placeholder")]);
    m_placeholder_isSet = !json[QString("Placeholder")].isNull() && m_placeholder_isValid;

    m_data_set_schema_isValid = ::OpenAPI::fromJsonValue(m_data_set_schema, json[QString("DataSetSchema")]);
    m_data_set_schema_isSet = !json[QString("DataSetSchema")].isNull() && m_data_set_schema_isValid;

    m_column_group_schema_list_isValid = ::OpenAPI::fromJsonValue(m_column_group_schema_list, json[QString("ColumnGroupSchemaList")]);
    m_column_group_schema_list_isSet = !json[QString("ColumnGroupSchemaList")].isNull() && m_column_group_schema_list_isValid;
}

QString OAIDataSetConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_placeholder_isSet) {
        obj.insert(QString("Placeholder"), ::OpenAPI::toJsonValue(m_placeholder));
    }
    if (m_data_set_schema.isSet()) {
        obj.insert(QString("DataSetSchema"), ::OpenAPI::toJsonValue(m_data_set_schema));
    }
    if (m_column_group_schema_list.isSet()) {
        obj.insert(QString("ColumnGroupSchemaList"), ::OpenAPI::toJsonValue(m_column_group_schema_list));
    }
    return obj;
}

QString OAIDataSetConfiguration::getPlaceholder() const {
    return m_placeholder;
}
void OAIDataSetConfiguration::setPlaceholder(const QString &placeholder) {
    m_placeholder = placeholder;
    m_placeholder_isSet = true;
}

bool OAIDataSetConfiguration::is_placeholder_Set() const{
    return m_placeholder_isSet;
}

bool OAIDataSetConfiguration::is_placeholder_Valid() const{
    return m_placeholder_isValid;
}

OAIDataSetConfiguration_DataSetSchema OAIDataSetConfiguration::getDataSetSchema() const {
    return m_data_set_schema;
}
void OAIDataSetConfiguration::setDataSetSchema(const OAIDataSetConfiguration_DataSetSchema &data_set_schema) {
    m_data_set_schema = data_set_schema;
    m_data_set_schema_isSet = true;
}

bool OAIDataSetConfiguration::is_data_set_schema_Set() const{
    return m_data_set_schema_isSet;
}

bool OAIDataSetConfiguration::is_data_set_schema_Valid() const{
    return m_data_set_schema_isValid;
}

QList OAIDataSetConfiguration::getColumnGroupSchemaList() const {
    return m_column_group_schema_list;
}
void OAIDataSetConfiguration::setColumnGroupSchemaList(const QList &column_group_schema_list) {
    m_column_group_schema_list = column_group_schema_list;
    m_column_group_schema_list_isSet = true;
}

bool OAIDataSetConfiguration::is_column_group_schema_list_Set() const{
    return m_column_group_schema_list_isSet;
}

bool OAIDataSetConfiguration::is_column_group_schema_list_Valid() const{
    return m_column_group_schema_list_isValid;
}

bool OAIDataSetConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_placeholder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_group_schema_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
