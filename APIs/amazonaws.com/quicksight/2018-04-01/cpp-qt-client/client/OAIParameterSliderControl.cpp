/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterSliderControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterSliderControl::OAIParameterSliderControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterSliderControl::OAIParameterSliderControl() {
    this->initializeModel();
}

OAIParameterSliderControl::~OAIParameterSliderControl() {}

void OAIParameterSliderControl::initializeModel() {

    m_parameter_control_id_isSet = false;
    m_parameter_control_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_source_parameter_name_isSet = false;
    m_source_parameter_name_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;

    m_maximum_value_isSet = false;
    m_maximum_value_isValid = false;

    m_minimum_value_isSet = false;
    m_minimum_value_isValid = false;

    m_step_size_isSet = false;
    m_step_size_isValid = false;
}

void OAIParameterSliderControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterSliderControl::fromJsonObject(QJsonObject json) {

    m_parameter_control_id_isValid = ::OpenAPI::fromJsonValue(m_parameter_control_id, json[QString("ParameterControlId")]);
    m_parameter_control_id_isSet = !json[QString("ParameterControlId")].isNull() && m_parameter_control_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_source_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_source_parameter_name, json[QString("SourceParameterName")]);
    m_source_parameter_name_isSet = !json[QString("SourceParameterName")].isNull() && m_source_parameter_name_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("DisplayOptions")]);
    m_display_options_isSet = !json[QString("DisplayOptions")].isNull() && m_display_options_isValid;

    m_maximum_value_isValid = ::OpenAPI::fromJsonValue(m_maximum_value, json[QString("MaximumValue")]);
    m_maximum_value_isSet = !json[QString("MaximumValue")].isNull() && m_maximum_value_isValid;

    m_minimum_value_isValid = ::OpenAPI::fromJsonValue(m_minimum_value, json[QString("MinimumValue")]);
    m_minimum_value_isSet = !json[QString("MinimumValue")].isNull() && m_minimum_value_isValid;

    m_step_size_isValid = ::OpenAPI::fromJsonValue(m_step_size, json[QString("StepSize")]);
    m_step_size_isSet = !json[QString("StepSize")].isNull() && m_step_size_isValid;
}

QString OAIParameterSliderControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterSliderControl::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_control_id_isSet) {
        obj.insert(QString("ParameterControlId"), ::OpenAPI::toJsonValue(m_parameter_control_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_source_parameter_name_isSet) {
        obj.insert(QString("SourceParameterName"), ::OpenAPI::toJsonValue(m_source_parameter_name));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("DisplayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    if (m_maximum_value_isSet) {
        obj.insert(QString("MaximumValue"), ::OpenAPI::toJsonValue(m_maximum_value));
    }
    if (m_minimum_value_isSet) {
        obj.insert(QString("MinimumValue"), ::OpenAPI::toJsonValue(m_minimum_value));
    }
    if (m_step_size_isSet) {
        obj.insert(QString("StepSize"), ::OpenAPI::toJsonValue(m_step_size));
    }
    return obj;
}

QString OAIParameterSliderControl::getParameterControlId() const {
    return m_parameter_control_id;
}
void OAIParameterSliderControl::setParameterControlId(const QString &parameter_control_id) {
    m_parameter_control_id = parameter_control_id;
    m_parameter_control_id_isSet = true;
}

bool OAIParameterSliderControl::is_parameter_control_id_Set() const{
    return m_parameter_control_id_isSet;
}

bool OAIParameterSliderControl::is_parameter_control_id_Valid() const{
    return m_parameter_control_id_isValid;
}

QString OAIParameterSliderControl::getTitle() const {
    return m_title;
}
void OAIParameterSliderControl::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIParameterSliderControl::is_title_Set() const{
    return m_title_isSet;
}

bool OAIParameterSliderControl::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIParameterSliderControl::getSourceParameterName() const {
    return m_source_parameter_name;
}
void OAIParameterSliderControl::setSourceParameterName(const QString &source_parameter_name) {
    m_source_parameter_name = source_parameter_name;
    m_source_parameter_name_isSet = true;
}

bool OAIParameterSliderControl::is_source_parameter_name_Set() const{
    return m_source_parameter_name_isSet;
}

bool OAIParameterSliderControl::is_source_parameter_name_Valid() const{
    return m_source_parameter_name_isValid;
}

OAIFilterSliderControl_DisplayOptions OAIParameterSliderControl::getDisplayOptions() const {
    return m_display_options;
}
void OAIParameterSliderControl::setDisplayOptions(const OAIFilterSliderControl_DisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIParameterSliderControl::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIParameterSliderControl::is_display_options_Valid() const{
    return m_display_options_isValid;
}

double OAIParameterSliderControl::getMaximumValue() const {
    return m_maximum_value;
}
void OAIParameterSliderControl::setMaximumValue(const double &maximum_value) {
    m_maximum_value = maximum_value;
    m_maximum_value_isSet = true;
}

bool OAIParameterSliderControl::is_maximum_value_Set() const{
    return m_maximum_value_isSet;
}

bool OAIParameterSliderControl::is_maximum_value_Valid() const{
    return m_maximum_value_isValid;
}

double OAIParameterSliderControl::getMinimumValue() const {
    return m_minimum_value;
}
void OAIParameterSliderControl::setMinimumValue(const double &minimum_value) {
    m_minimum_value = minimum_value;
    m_minimum_value_isSet = true;
}

bool OAIParameterSliderControl::is_minimum_value_Set() const{
    return m_minimum_value_isSet;
}

bool OAIParameterSliderControl::is_minimum_value_Valid() const{
    return m_minimum_value_isValid;
}

double OAIParameterSliderControl::getStepSize() const {
    return m_step_size;
}
void OAIParameterSliderControl::setStepSize(const double &step_size) {
    m_step_size = step_size;
    m_step_size_isSet = true;
}

bool OAIParameterSliderControl::is_step_size_Set() const{
    return m_step_size_isSet;
}

bool OAIParameterSliderControl::is_step_size_Valid() const{
    return m_step_size_isValid;
}

bool OAIParameterSliderControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterSliderControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_control_id_isValid && m_title_isValid && m_source_parameter_name_isValid && m_maximum_value_isValid && m_minimum_value_isValid && m_step_size_isValid && true;
}

} // namespace OpenAPI
