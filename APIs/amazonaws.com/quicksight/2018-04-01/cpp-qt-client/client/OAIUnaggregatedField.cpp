/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnaggregatedField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnaggregatedField::OAIUnaggregatedField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnaggregatedField::OAIUnaggregatedField() {
    this->initializeModel();
}

OAIUnaggregatedField::~OAIUnaggregatedField() {}

void OAIUnaggregatedField::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_format_configuration_isSet = false;
    m_format_configuration_isValid = false;
}

void OAIUnaggregatedField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnaggregatedField::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_format_configuration, json[QString("FormatConfiguration")]);
    m_format_configuration_isSet = !json[QString("FormatConfiguration")].isNull() && m_format_configuration_isValid;
}

QString OAIUnaggregatedField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnaggregatedField::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_format_configuration.isSet()) {
        obj.insert(QString("FormatConfiguration"), ::OpenAPI::toJsonValue(m_format_configuration));
    }
    return obj;
}

QString OAIUnaggregatedField::getFieldId() const {
    return m_field_id;
}
void OAIUnaggregatedField::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIUnaggregatedField::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIUnaggregatedField::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIUnaggregatedField_Column OAIUnaggregatedField::getColumn() const {
    return m_column;
}
void OAIUnaggregatedField::setColumn(const OAIUnaggregatedField_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIUnaggregatedField::is_column_Set() const{
    return m_column_isSet;
}

bool OAIUnaggregatedField::is_column_Valid() const{
    return m_column_isValid;
}

OAIUnaggregatedField_FormatConfiguration OAIUnaggregatedField::getFormatConfiguration() const {
    return m_format_configuration;
}
void OAIUnaggregatedField::setFormatConfiguration(const OAIUnaggregatedField_FormatConfiguration &format_configuration) {
    m_format_configuration = format_configuration;
    m_format_configuration_isSet = true;
}

bool OAIUnaggregatedField::is_format_configuration_Set() const{
    return m_format_configuration_isSet;
}

bool OAIUnaggregatedField::is_format_configuration_Valid() const{
    return m_format_configuration_isValid;
}

bool OAIUnaggregatedField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnaggregatedField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_column_isValid && true;
}

} // namespace OpenAPI
