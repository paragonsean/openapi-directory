/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformOperation_FilterOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformOperation_FilterOperation::OAITransformOperation_FilterOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformOperation_FilterOperation::OAITransformOperation_FilterOperation() {
    this->initializeModel();
}

OAITransformOperation_FilterOperation::~OAITransformOperation_FilterOperation() {}

void OAITransformOperation_FilterOperation::initializeModel() {

    m_condition_expression_isSet = false;
    m_condition_expression_isValid = false;
}

void OAITransformOperation_FilterOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformOperation_FilterOperation::fromJsonObject(QJsonObject json) {

    m_condition_expression_isValid = ::OpenAPI::fromJsonValue(m_condition_expression, json[QString("ConditionExpression")]);
    m_condition_expression_isSet = !json[QString("ConditionExpression")].isNull() && m_condition_expression_isValid;
}

QString OAITransformOperation_FilterOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformOperation_FilterOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_expression_isSet) {
        obj.insert(QString("ConditionExpression"), ::OpenAPI::toJsonValue(m_condition_expression));
    }
    return obj;
}

QString OAITransformOperation_FilterOperation::getConditionExpression() const {
    return m_condition_expression;
}
void OAITransformOperation_FilterOperation::setConditionExpression(const QString &condition_expression) {
    m_condition_expression = condition_expression;
    m_condition_expression_isSet = true;
}

bool OAITransformOperation_FilterOperation::is_condition_expression_Set() const{
    return m_condition_expression_isSet;
}

bool OAITransformOperation_FilterOperation::is_condition_expression_Valid() const{
    return m_condition_expression_isValid;
}

bool OAITransformOperation_FilterOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformOperation_FilterOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_condition_expression_isValid && true;
}

} // namespace OpenAPI
