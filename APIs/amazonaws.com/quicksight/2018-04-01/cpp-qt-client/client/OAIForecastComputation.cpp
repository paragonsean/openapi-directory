/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastComputation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastComputation::OAIForecastComputation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastComputation::OAIForecastComputation() {
    this->initializeModel();
}

OAIForecastComputation::~OAIForecastComputation() {}

void OAIForecastComputation::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_periods_forward_isSet = false;
    m_periods_forward_isValid = false;

    m_periods_backward_isSet = false;
    m_periods_backward_isValid = false;

    m_upper_boundary_isSet = false;
    m_upper_boundary_isValid = false;

    m_lower_boundary_isSet = false;
    m_lower_boundary_isValid = false;

    m_prediction_interval_isSet = false;
    m_prediction_interval_isValid = false;

    m_seasonality_isSet = false;
    m_seasonality_isValid = false;

    m_custom_seasonality_value_isSet = false;
    m_custom_seasonality_value_isValid = false;
}

void OAIForecastComputation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastComputation::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_periods_forward_isValid = ::OpenAPI::fromJsonValue(m_periods_forward, json[QString("PeriodsForward")]);
    m_periods_forward_isSet = !json[QString("PeriodsForward")].isNull() && m_periods_forward_isValid;

    m_periods_backward_isValid = ::OpenAPI::fromJsonValue(m_periods_backward, json[QString("PeriodsBackward")]);
    m_periods_backward_isSet = !json[QString("PeriodsBackward")].isNull() && m_periods_backward_isValid;

    m_upper_boundary_isValid = ::OpenAPI::fromJsonValue(m_upper_boundary, json[QString("UpperBoundary")]);
    m_upper_boundary_isSet = !json[QString("UpperBoundary")].isNull() && m_upper_boundary_isValid;

    m_lower_boundary_isValid = ::OpenAPI::fromJsonValue(m_lower_boundary, json[QString("LowerBoundary")]);
    m_lower_boundary_isSet = !json[QString("LowerBoundary")].isNull() && m_lower_boundary_isValid;

    m_prediction_interval_isValid = ::OpenAPI::fromJsonValue(m_prediction_interval, json[QString("PredictionInterval")]);
    m_prediction_interval_isSet = !json[QString("PredictionInterval")].isNull() && m_prediction_interval_isValid;

    m_seasonality_isValid = ::OpenAPI::fromJsonValue(m_seasonality, json[QString("Seasonality")]);
    m_seasonality_isSet = !json[QString("Seasonality")].isNull() && m_seasonality_isValid;

    m_custom_seasonality_value_isValid = ::OpenAPI::fromJsonValue(m_custom_seasonality_value, json[QString("CustomSeasonalityValue")]);
    m_custom_seasonality_value_isSet = !json[QString("CustomSeasonalityValue")].isNull() && m_custom_seasonality_value_isValid;
}

QString OAIForecastComputation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastComputation::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time.isSet()) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_periods_forward_isSet) {
        obj.insert(QString("PeriodsForward"), ::OpenAPI::toJsonValue(m_periods_forward));
    }
    if (m_periods_backward_isSet) {
        obj.insert(QString("PeriodsBackward"), ::OpenAPI::toJsonValue(m_periods_backward));
    }
    if (m_upper_boundary_isSet) {
        obj.insert(QString("UpperBoundary"), ::OpenAPI::toJsonValue(m_upper_boundary));
    }
    if (m_lower_boundary_isSet) {
        obj.insert(QString("LowerBoundary"), ::OpenAPI::toJsonValue(m_lower_boundary));
    }
    if (m_prediction_interval_isSet) {
        obj.insert(QString("PredictionInterval"), ::OpenAPI::toJsonValue(m_prediction_interval));
    }
    if (m_seasonality.isSet()) {
        obj.insert(QString("Seasonality"), ::OpenAPI::toJsonValue(m_seasonality));
    }
    if (m_custom_seasonality_value_isSet) {
        obj.insert(QString("CustomSeasonalityValue"), ::OpenAPI::toJsonValue(m_custom_seasonality_value));
    }
    return obj;
}

QString OAIForecastComputation::getComputationId() const {
    return m_computation_id;
}
void OAIForecastComputation::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIForecastComputation::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIForecastComputation::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIForecastComputation::getName() const {
    return m_name;
}
void OAIForecastComputation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIForecastComputation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIForecastComputation::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomMoversComputation_Time OAIForecastComputation::getTime() const {
    return m_time;
}
void OAIForecastComputation::setTime(const OAITopBottomMoversComputation_Time &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIForecastComputation::is_time_Set() const{
    return m_time_isSet;
}

bool OAIForecastComputation::is_time_Valid() const{
    return m_time_isValid;
}

OAITopBottomRankedComputation_Value OAIForecastComputation::getValue() const {
    return m_value;
}
void OAIForecastComputation::setValue(const OAITopBottomRankedComputation_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIForecastComputation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIForecastComputation::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAIForecastComputation::getPeriodsForward() const {
    return m_periods_forward;
}
void OAIForecastComputation::setPeriodsForward(const qint32 &periods_forward) {
    m_periods_forward = periods_forward;
    m_periods_forward_isSet = true;
}

bool OAIForecastComputation::is_periods_forward_Set() const{
    return m_periods_forward_isSet;
}

bool OAIForecastComputation::is_periods_forward_Valid() const{
    return m_periods_forward_isValid;
}

qint32 OAIForecastComputation::getPeriodsBackward() const {
    return m_periods_backward;
}
void OAIForecastComputation::setPeriodsBackward(const qint32 &periods_backward) {
    m_periods_backward = periods_backward;
    m_periods_backward_isSet = true;
}

bool OAIForecastComputation::is_periods_backward_Set() const{
    return m_periods_backward_isSet;
}

bool OAIForecastComputation::is_periods_backward_Valid() const{
    return m_periods_backward_isValid;
}

double OAIForecastComputation::getUpperBoundary() const {
    return m_upper_boundary;
}
void OAIForecastComputation::setUpperBoundary(const double &upper_boundary) {
    m_upper_boundary = upper_boundary;
    m_upper_boundary_isSet = true;
}

bool OAIForecastComputation::is_upper_boundary_Set() const{
    return m_upper_boundary_isSet;
}

bool OAIForecastComputation::is_upper_boundary_Valid() const{
    return m_upper_boundary_isValid;
}

double OAIForecastComputation::getLowerBoundary() const {
    return m_lower_boundary;
}
void OAIForecastComputation::setLowerBoundary(const double &lower_boundary) {
    m_lower_boundary = lower_boundary;
    m_lower_boundary_isSet = true;
}

bool OAIForecastComputation::is_lower_boundary_Set() const{
    return m_lower_boundary_isSet;
}

bool OAIForecastComputation::is_lower_boundary_Valid() const{
    return m_lower_boundary_isValid;
}

qint32 OAIForecastComputation::getPredictionInterval() const {
    return m_prediction_interval;
}
void OAIForecastComputation::setPredictionInterval(const qint32 &prediction_interval) {
    m_prediction_interval = prediction_interval;
    m_prediction_interval_isSet = true;
}

bool OAIForecastComputation::is_prediction_interval_Set() const{
    return m_prediction_interval_isSet;
}

bool OAIForecastComputation::is_prediction_interval_Valid() const{
    return m_prediction_interval_isValid;
}

OAIForecastComputationSeasonality OAIForecastComputation::getSeasonality() const {
    return m_seasonality;
}
void OAIForecastComputation::setSeasonality(const OAIForecastComputationSeasonality &seasonality) {
    m_seasonality = seasonality;
    m_seasonality_isSet = true;
}

bool OAIForecastComputation::is_seasonality_Set() const{
    return m_seasonality_isSet;
}

bool OAIForecastComputation::is_seasonality_Valid() const{
    return m_seasonality_isValid;
}

qint32 OAIForecastComputation::getCustomSeasonalityValue() const {
    return m_custom_seasonality_value;
}
void OAIForecastComputation::setCustomSeasonalityValue(const qint32 &custom_seasonality_value) {
    m_custom_seasonality_value = custom_seasonality_value;
    m_custom_seasonality_value_isSet = true;
}

bool OAIForecastComputation::is_custom_seasonality_value_Set() const{
    return m_custom_seasonality_value_isSet;
}

bool OAIForecastComputation::is_custom_seasonality_value_Valid() const{
    return m_custom_seasonality_value_isValid;
}

bool OAIForecastComputation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods_forward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods_backward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_boundary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_boundary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_seasonality_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastComputation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_time_isValid && true;
}

} // namespace OpenAPI
