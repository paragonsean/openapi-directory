/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterControl::OAIFilterControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterControl::OAIFilterControl() {
    this->initializeModel();
}

OAIFilterControl::~OAIFilterControl() {}

void OAIFilterControl::initializeModel() {

    m_date_time_picker_isSet = false;
    m_date_time_picker_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_dropdown_isSet = false;
    m_dropdown_isValid = false;

    m_text_field_isSet = false;
    m_text_field_isValid = false;

    m_text_area_isSet = false;
    m_text_area_isValid = false;

    m_slider_isSet = false;
    m_slider_isValid = false;

    m_relative_date_time_isSet = false;
    m_relative_date_time_isValid = false;
}

void OAIFilterControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterControl::fromJsonObject(QJsonObject json) {

    m_date_time_picker_isValid = ::OpenAPI::fromJsonValue(m_date_time_picker, json[QString("DateTimePicker")]);
    m_date_time_picker_isSet = !json[QString("DateTimePicker")].isNull() && m_date_time_picker_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("List")]);
    m_list_isSet = !json[QString("List")].isNull() && m_list_isValid;

    m_dropdown_isValid = ::OpenAPI::fromJsonValue(m_dropdown, json[QString("Dropdown")]);
    m_dropdown_isSet = !json[QString("Dropdown")].isNull() && m_dropdown_isValid;

    m_text_field_isValid = ::OpenAPI::fromJsonValue(m_text_field, json[QString("TextField")]);
    m_text_field_isSet = !json[QString("TextField")].isNull() && m_text_field_isValid;

    m_text_area_isValid = ::OpenAPI::fromJsonValue(m_text_area, json[QString("TextArea")]);
    m_text_area_isSet = !json[QString("TextArea")].isNull() && m_text_area_isValid;

    m_slider_isValid = ::OpenAPI::fromJsonValue(m_slider, json[QString("Slider")]);
    m_slider_isSet = !json[QString("Slider")].isNull() && m_slider_isValid;

    m_relative_date_time_isValid = ::OpenAPI::fromJsonValue(m_relative_date_time, json[QString("RelativeDateTime")]);
    m_relative_date_time_isSet = !json[QString("RelativeDateTime")].isNull() && m_relative_date_time_isValid;
}

QString OAIFilterControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterControl::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_picker.isSet()) {
        obj.insert(QString("DateTimePicker"), ::OpenAPI::toJsonValue(m_date_time_picker));
    }
    if (m_list.isSet()) {
        obj.insert(QString("List"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_dropdown.isSet()) {
        obj.insert(QString("Dropdown"), ::OpenAPI::toJsonValue(m_dropdown));
    }
    if (m_text_field.isSet()) {
        obj.insert(QString("TextField"), ::OpenAPI::toJsonValue(m_text_field));
    }
    if (m_text_area.isSet()) {
        obj.insert(QString("TextArea"), ::OpenAPI::toJsonValue(m_text_area));
    }
    if (m_slider.isSet()) {
        obj.insert(QString("Slider"), ::OpenAPI::toJsonValue(m_slider));
    }
    if (m_relative_date_time.isSet()) {
        obj.insert(QString("RelativeDateTime"), ::OpenAPI::toJsonValue(m_relative_date_time));
    }
    return obj;
}

OAIFilterControl_DateTimePicker OAIFilterControl::getDateTimePicker() const {
    return m_date_time_picker;
}
void OAIFilterControl::setDateTimePicker(const OAIFilterControl_DateTimePicker &date_time_picker) {
    m_date_time_picker = date_time_picker;
    m_date_time_picker_isSet = true;
}

bool OAIFilterControl::is_date_time_picker_Set() const{
    return m_date_time_picker_isSet;
}

bool OAIFilterControl::is_date_time_picker_Valid() const{
    return m_date_time_picker_isValid;
}

OAIFilterControl_List OAIFilterControl::getList() const {
    return m_list;
}
void OAIFilterControl::setList(const OAIFilterControl_List &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIFilterControl::is_list_Set() const{
    return m_list_isSet;
}

bool OAIFilterControl::is_list_Valid() const{
    return m_list_isValid;
}

OAIFilterControl_Dropdown OAIFilterControl::getDropdown() const {
    return m_dropdown;
}
void OAIFilterControl::setDropdown(const OAIFilterControl_Dropdown &dropdown) {
    m_dropdown = dropdown;
    m_dropdown_isSet = true;
}

bool OAIFilterControl::is_dropdown_Set() const{
    return m_dropdown_isSet;
}

bool OAIFilterControl::is_dropdown_Valid() const{
    return m_dropdown_isValid;
}

OAIFilterControl_TextField OAIFilterControl::getTextField() const {
    return m_text_field;
}
void OAIFilterControl::setTextField(const OAIFilterControl_TextField &text_field) {
    m_text_field = text_field;
    m_text_field_isSet = true;
}

bool OAIFilterControl::is_text_field_Set() const{
    return m_text_field_isSet;
}

bool OAIFilterControl::is_text_field_Valid() const{
    return m_text_field_isValid;
}

OAIFilterControl_TextArea OAIFilterControl::getTextArea() const {
    return m_text_area;
}
void OAIFilterControl::setTextArea(const OAIFilterControl_TextArea &text_area) {
    m_text_area = text_area;
    m_text_area_isSet = true;
}

bool OAIFilterControl::is_text_area_Set() const{
    return m_text_area_isSet;
}

bool OAIFilterControl::is_text_area_Valid() const{
    return m_text_area_isValid;
}

OAIFilterControl_Slider OAIFilterControl::getSlider() const {
    return m_slider;
}
void OAIFilterControl::setSlider(const OAIFilterControl_Slider &slider) {
    m_slider = slider;
    m_slider_isSet = true;
}

bool OAIFilterControl::is_slider_Set() const{
    return m_slider_isSet;
}

bool OAIFilterControl::is_slider_Valid() const{
    return m_slider_isValid;
}

OAIFilterControl_RelativeDateTime OAIFilterControl::getRelativeDateTime() const {
    return m_relative_date_time;
}
void OAIFilterControl::setRelativeDateTime(const OAIFilterControl_RelativeDateTime &relative_date_time) {
    m_relative_date_time = relative_date_time;
    m_relative_date_time_isSet = true;
}

bool OAIFilterControl::is_relative_date_time_Set() const{
    return m_relative_date_time_isSet;
}

bool OAIFilterControl::is_relative_date_time_Valid() const{
    return m_relative_date_time_isValid;
}

bool OAIFilterControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_picker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropdown.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_date_time.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
