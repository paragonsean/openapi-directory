/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDashboardRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDashboardRequest::OAICreateDashboardRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDashboardRequest::OAICreateDashboardRequest() {
    this->initializeModel();
}

OAICreateDashboardRequest::~OAICreateDashboardRequest() {}

void OAICreateDashboardRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_source_entity_isSet = false;
    m_source_entity_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_description_isSet = false;
    m_version_description_isValid = false;

    m_dashboard_publish_options_isSet = false;
    m_dashboard_publish_options_isValid = false;

    m_theme_arn_isSet = false;
    m_theme_arn_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;
}

void OAICreateDashboardRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDashboardRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_source_entity_isValid = ::OpenAPI::fromJsonValue(m_source_entity, json[QString("SourceEntity")]);
    m_source_entity_isSet = !json[QString("SourceEntity")].isNull() && m_source_entity_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_version_description_isValid = ::OpenAPI::fromJsonValue(m_version_description, json[QString("VersionDescription")]);
    m_version_description_isSet = !json[QString("VersionDescription")].isNull() && m_version_description_isValid;

    m_dashboard_publish_options_isValid = ::OpenAPI::fromJsonValue(m_dashboard_publish_options, json[QString("DashboardPublishOptions")]);
    m_dashboard_publish_options_isSet = !json[QString("DashboardPublishOptions")].isNull() && m_dashboard_publish_options_isValid;

    m_theme_arn_isValid = ::OpenAPI::fromJsonValue(m_theme_arn, json[QString("ThemeArn")]);
    m_theme_arn_isSet = !json[QString("ThemeArn")].isNull() && m_theme_arn_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;
}

QString OAICreateDashboardRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDashboardRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_source_entity.isSet()) {
        obj.insert(QString("SourceEntity"), ::OpenAPI::toJsonValue(m_source_entity));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_description_isSet) {
        obj.insert(QString("VersionDescription"), ::OpenAPI::toJsonValue(m_version_description));
    }
    if (m_dashboard_publish_options.isSet()) {
        obj.insert(QString("DashboardPublishOptions"), ::OpenAPI::toJsonValue(m_dashboard_publish_options));
    }
    if (m_theme_arn_isSet) {
        obj.insert(QString("ThemeArn"), ::OpenAPI::toJsonValue(m_theme_arn));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    return obj;
}

QString OAICreateDashboardRequest::getName() const {
    return m_name;
}
void OAICreateDashboardRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDashboardRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDashboardRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateDashboardRequest_Parameters OAICreateDashboardRequest::getParameters() const {
    return m_parameters;
}
void OAICreateDashboardRequest::setParameters(const OAICreateDashboardRequest_Parameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateDashboardRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateDashboardRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList OAICreateDashboardRequest::getPermissions() const {
    return m_permissions;
}
void OAICreateDashboardRequest::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateDashboardRequest::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateDashboardRequest::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAICreateDashboardRequest_SourceEntity OAICreateDashboardRequest::getSourceEntity() const {
    return m_source_entity;
}
void OAICreateDashboardRequest::setSourceEntity(const OAICreateDashboardRequest_SourceEntity &source_entity) {
    m_source_entity = source_entity;
    m_source_entity_isSet = true;
}

bool OAICreateDashboardRequest::is_source_entity_Set() const{
    return m_source_entity_isSet;
}

bool OAICreateDashboardRequest::is_source_entity_Valid() const{
    return m_source_entity_isValid;
}

QList OAICreateDashboardRequest::getTags() const {
    return m_tags;
}
void OAICreateDashboardRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDashboardRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDashboardRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDashboardRequest::getVersionDescription() const {
    return m_version_description;
}
void OAICreateDashboardRequest::setVersionDescription(const QString &version_description) {
    m_version_description = version_description;
    m_version_description_isSet = true;
}

bool OAICreateDashboardRequest::is_version_description_Set() const{
    return m_version_description_isSet;
}

bool OAICreateDashboardRequest::is_version_description_Valid() const{
    return m_version_description_isValid;
}

OAICreateDashboardRequest_DashboardPublishOptions OAICreateDashboardRequest::getDashboardPublishOptions() const {
    return m_dashboard_publish_options;
}
void OAICreateDashboardRequest::setDashboardPublishOptions(const OAICreateDashboardRequest_DashboardPublishOptions &dashboard_publish_options) {
    m_dashboard_publish_options = dashboard_publish_options;
    m_dashboard_publish_options_isSet = true;
}

bool OAICreateDashboardRequest::is_dashboard_publish_options_Set() const{
    return m_dashboard_publish_options_isSet;
}

bool OAICreateDashboardRequest::is_dashboard_publish_options_Valid() const{
    return m_dashboard_publish_options_isValid;
}

QString OAICreateDashboardRequest::getThemeArn() const {
    return m_theme_arn;
}
void OAICreateDashboardRequest::setThemeArn(const QString &theme_arn) {
    m_theme_arn = theme_arn;
    m_theme_arn_isSet = true;
}

bool OAICreateDashboardRequest::is_theme_arn_Set() const{
    return m_theme_arn_isSet;
}

bool OAICreateDashboardRequest::is_theme_arn_Valid() const{
    return m_theme_arn_isValid;
}

OAICreateDashboardRequest_Definition OAICreateDashboardRequest::getDefinition() const {
    return m_definition;
}
void OAICreateDashboardRequest::setDefinition(const OAICreateDashboardRequest_Definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAICreateDashboardRequest::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAICreateDashboardRequest::is_definition_Valid() const{
    return m_definition_isValid;
}

bool OAICreateDashboardRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_publish_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDashboardRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
