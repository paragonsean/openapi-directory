/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterControl_RelativeDateTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterControl_RelativeDateTime::OAIFilterControl_RelativeDateTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterControl_RelativeDateTime::OAIFilterControl_RelativeDateTime() {
    this->initializeModel();
}

OAIFilterControl_RelativeDateTime::~OAIFilterControl_RelativeDateTime() {}

void OAIFilterControl_RelativeDateTime::initializeModel() {

    m_filter_control_id_isSet = false;
    m_filter_control_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_source_filter_id_isSet = false;
    m_source_filter_id_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;
}

void OAIFilterControl_RelativeDateTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterControl_RelativeDateTime::fromJsonObject(QJsonObject json) {

    m_filter_control_id_isValid = ::OpenAPI::fromJsonValue(m_filter_control_id, json[QString("FilterControlId")]);
    m_filter_control_id_isSet = !json[QString("FilterControlId")].isNull() && m_filter_control_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_source_filter_id_isValid = ::OpenAPI::fromJsonValue(m_source_filter_id, json[QString("SourceFilterId")]);
    m_source_filter_id_isSet = !json[QString("SourceFilterId")].isNull() && m_source_filter_id_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("DisplayOptions")]);
    m_display_options_isSet = !json[QString("DisplayOptions")].isNull() && m_display_options_isValid;
}

QString OAIFilterControl_RelativeDateTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterControl_RelativeDateTime::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_control_id_isSet) {
        obj.insert(QString("FilterControlId"), ::OpenAPI::toJsonValue(m_filter_control_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_source_filter_id_isSet) {
        obj.insert(QString("SourceFilterId"), ::OpenAPI::toJsonValue(m_source_filter_id));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("DisplayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    return obj;
}

QString OAIFilterControl_RelativeDateTime::getFilterControlId() const {
    return m_filter_control_id;
}
void OAIFilterControl_RelativeDateTime::setFilterControlId(const QString &filter_control_id) {
    m_filter_control_id = filter_control_id;
    m_filter_control_id_isSet = true;
}

bool OAIFilterControl_RelativeDateTime::is_filter_control_id_Set() const{
    return m_filter_control_id_isSet;
}

bool OAIFilterControl_RelativeDateTime::is_filter_control_id_Valid() const{
    return m_filter_control_id_isValid;
}

QString OAIFilterControl_RelativeDateTime::getTitle() const {
    return m_title;
}
void OAIFilterControl_RelativeDateTime::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFilterControl_RelativeDateTime::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFilterControl_RelativeDateTime::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFilterControl_RelativeDateTime::getSourceFilterId() const {
    return m_source_filter_id;
}
void OAIFilterControl_RelativeDateTime::setSourceFilterId(const QString &source_filter_id) {
    m_source_filter_id = source_filter_id;
    m_source_filter_id_isSet = true;
}

bool OAIFilterControl_RelativeDateTime::is_source_filter_id_Set() const{
    return m_source_filter_id_isSet;
}

bool OAIFilterControl_RelativeDateTime::is_source_filter_id_Valid() const{
    return m_source_filter_id_isValid;
}

OAIFilterRelativeDateTimeControl_DisplayOptions OAIFilterControl_RelativeDateTime::getDisplayOptions() const {
    return m_display_options;
}
void OAIFilterControl_RelativeDateTime::setDisplayOptions(const OAIFilterRelativeDateTimeControl_DisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIFilterControl_RelativeDateTime::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIFilterControl_RelativeDateTime::is_display_options_Valid() const{
    return m_display_options_isValid;
}

bool OAIFilterControl_RelativeDateTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterControl_RelativeDateTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_control_id_isValid && m_title_isValid && m_source_filter_id_isValid && true;
}

} // namespace OpenAPI
