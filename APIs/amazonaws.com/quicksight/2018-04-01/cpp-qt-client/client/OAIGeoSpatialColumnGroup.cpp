/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoSpatialColumnGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoSpatialColumnGroup::OAIGeoSpatialColumnGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoSpatialColumnGroup::OAIGeoSpatialColumnGroup() {
    this->initializeModel();
}

OAIGeoSpatialColumnGroup::~OAIGeoSpatialColumnGroup() {}

void OAIGeoSpatialColumnGroup::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;
}

void OAIGeoSpatialColumnGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoSpatialColumnGroup::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("CountryCode")]);
    m_country_code_isSet = !json[QString("CountryCode")].isNull() && m_country_code_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("Columns")]);
    m_columns_isSet = !json[QString("Columns")].isNull() && m_columns_isValid;
}

QString OAIGeoSpatialColumnGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoSpatialColumnGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_country_code.isSet()) {
        obj.insert(QString("CountryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_columns.isSet()) {
        obj.insert(QString("Columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    return obj;
}

QString OAIGeoSpatialColumnGroup::getName() const {
    return m_name;
}
void OAIGeoSpatialColumnGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGeoSpatialColumnGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGeoSpatialColumnGroup::is_name_Valid() const{
    return m_name_isValid;
}

OAIGeoSpatialCountryCode OAIGeoSpatialColumnGroup::getCountryCode() const {
    return m_country_code;
}
void OAIGeoSpatialColumnGroup::setCountryCode(const OAIGeoSpatialCountryCode &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIGeoSpatialColumnGroup::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIGeoSpatialColumnGroup::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QList OAIGeoSpatialColumnGroup::getColumns() const {
    return m_columns;
}
void OAIGeoSpatialColumnGroup::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIGeoSpatialColumnGroup::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIGeoSpatialColumnGroup::is_columns_Valid() const{
    return m_columns_isValid;
}

bool OAIGeoSpatialColumnGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoSpatialColumnGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_columns_isValid && true;
}

} // namespace OpenAPI
