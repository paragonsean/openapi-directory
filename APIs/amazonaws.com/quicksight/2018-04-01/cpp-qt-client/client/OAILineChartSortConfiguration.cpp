/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineChartSortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineChartSortConfiguration::OAILineChartSortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineChartSortConfiguration::OAILineChartSortConfiguration() {
    this->initializeModel();
}

OAILineChartSortConfiguration::~OAILineChartSortConfiguration() {}

void OAILineChartSortConfiguration::initializeModel() {

    m_category_sort_isSet = false;
    m_category_sort_isValid = false;

    m_category_items_limit_configuration_isSet = false;
    m_category_items_limit_configuration_isValid = false;

    m_color_items_limit_configuration_isSet = false;
    m_color_items_limit_configuration_isValid = false;

    m_small_multiples_sort_isSet = false;
    m_small_multiples_sort_isValid = false;

    m_small_multiples_limit_configuration_isSet = false;
    m_small_multiples_limit_configuration_isValid = false;
}

void OAILineChartSortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineChartSortConfiguration::fromJsonObject(QJsonObject json) {

    m_category_sort_isValid = ::OpenAPI::fromJsonValue(m_category_sort, json[QString("CategorySort")]);
    m_category_sort_isSet = !json[QString("CategorySort")].isNull() && m_category_sort_isValid;

    m_category_items_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_category_items_limit_configuration, json[QString("CategoryItemsLimitConfiguration")]);
    m_category_items_limit_configuration_isSet = !json[QString("CategoryItemsLimitConfiguration")].isNull() && m_category_items_limit_configuration_isValid;

    m_color_items_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_color_items_limit_configuration, json[QString("ColorItemsLimitConfiguration")]);
    m_color_items_limit_configuration_isSet = !json[QString("ColorItemsLimitConfiguration")].isNull() && m_color_items_limit_configuration_isValid;

    m_small_multiples_sort_isValid = ::OpenAPI::fromJsonValue(m_small_multiples_sort, json[QString("SmallMultiplesSort")]);
    m_small_multiples_sort_isSet = !json[QString("SmallMultiplesSort")].isNull() && m_small_multiples_sort_isValid;

    m_small_multiples_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_small_multiples_limit_configuration, json[QString("SmallMultiplesLimitConfiguration")]);
    m_small_multiples_limit_configuration_isSet = !json[QString("SmallMultiplesLimitConfiguration")].isNull() && m_small_multiples_limit_configuration_isValid;
}

QString OAILineChartSortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineChartSortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_category_sort.isSet()) {
        obj.insert(QString("CategorySort"), ::OpenAPI::toJsonValue(m_category_sort));
    }
    if (m_category_items_limit_configuration.isSet()) {
        obj.insert(QString("CategoryItemsLimitConfiguration"), ::OpenAPI::toJsonValue(m_category_items_limit_configuration));
    }
    if (m_color_items_limit_configuration.isSet()) {
        obj.insert(QString("ColorItemsLimitConfiguration"), ::OpenAPI::toJsonValue(m_color_items_limit_configuration));
    }
    if (m_small_multiples_sort.isSet()) {
        obj.insert(QString("SmallMultiplesSort"), ::OpenAPI::toJsonValue(m_small_multiples_sort));
    }
    if (m_small_multiples_limit_configuration.isSet()) {
        obj.insert(QString("SmallMultiplesLimitConfiguration"), ::OpenAPI::toJsonValue(m_small_multiples_limit_configuration));
    }
    return obj;
}

QList OAILineChartSortConfiguration::getCategorySort() const {
    return m_category_sort;
}
void OAILineChartSortConfiguration::setCategorySort(const QList &category_sort) {
    m_category_sort = category_sort;
    m_category_sort_isSet = true;
}

bool OAILineChartSortConfiguration::is_category_sort_Set() const{
    return m_category_sort_isSet;
}

bool OAILineChartSortConfiguration::is_category_sort_Valid() const{
    return m_category_sort_isValid;
}

OAILineChartSortConfiguration_CategoryItemsLimitConfiguration OAILineChartSortConfiguration::getCategoryItemsLimitConfiguration() const {
    return m_category_items_limit_configuration;
}
void OAILineChartSortConfiguration::setCategoryItemsLimitConfiguration(const OAILineChartSortConfiguration_CategoryItemsLimitConfiguration &category_items_limit_configuration) {
    m_category_items_limit_configuration = category_items_limit_configuration;
    m_category_items_limit_configuration_isSet = true;
}

bool OAILineChartSortConfiguration::is_category_items_limit_configuration_Set() const{
    return m_category_items_limit_configuration_isSet;
}

bool OAILineChartSortConfiguration::is_category_items_limit_configuration_Valid() const{
    return m_category_items_limit_configuration_isValid;
}

OAILineChartSortConfiguration_ColorItemsLimitConfiguration OAILineChartSortConfiguration::getColorItemsLimitConfiguration() const {
    return m_color_items_limit_configuration;
}
void OAILineChartSortConfiguration::setColorItemsLimitConfiguration(const OAILineChartSortConfiguration_ColorItemsLimitConfiguration &color_items_limit_configuration) {
    m_color_items_limit_configuration = color_items_limit_configuration;
    m_color_items_limit_configuration_isSet = true;
}

bool OAILineChartSortConfiguration::is_color_items_limit_configuration_Set() const{
    return m_color_items_limit_configuration_isSet;
}

bool OAILineChartSortConfiguration::is_color_items_limit_configuration_Valid() const{
    return m_color_items_limit_configuration_isValid;
}

QList OAILineChartSortConfiguration::getSmallMultiplesSort() const {
    return m_small_multiples_sort;
}
void OAILineChartSortConfiguration::setSmallMultiplesSort(const QList &small_multiples_sort) {
    m_small_multiples_sort = small_multiples_sort;
    m_small_multiples_sort_isSet = true;
}

bool OAILineChartSortConfiguration::is_small_multiples_sort_Set() const{
    return m_small_multiples_sort_isSet;
}

bool OAILineChartSortConfiguration::is_small_multiples_sort_Valid() const{
    return m_small_multiples_sort_isValid;
}

OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration OAILineChartSortConfiguration::getSmallMultiplesLimitConfiguration() const {
    return m_small_multiples_limit_configuration;
}
void OAILineChartSortConfiguration::setSmallMultiplesLimitConfiguration(const OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration &small_multiples_limit_configuration) {
    m_small_multiples_limit_configuration = small_multiples_limit_configuration;
    m_small_multiples_limit_configuration_isSet = true;
}

bool OAILineChartSortConfiguration::is_small_multiples_limit_configuration_Set() const{
    return m_small_multiples_limit_configuration_isSet;
}

bool OAILineChartSortConfiguration::is_small_multiples_limit_configuration_Valid() const{
    return m_small_multiples_limit_configuration_isValid;
}

bool OAILineChartSortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_items_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_items_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineChartSortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
