/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetElementConfigurationOverrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetElementConfigurationOverrides::OAISheetElementConfigurationOverrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetElementConfigurationOverrides::OAISheetElementConfigurationOverrides() {
    this->initializeModel();
}

OAISheetElementConfigurationOverrides::~OAISheetElementConfigurationOverrides() {}

void OAISheetElementConfigurationOverrides::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAISheetElementConfigurationOverrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetElementConfigurationOverrides::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;
}

QString OAISheetElementConfigurationOverrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetElementConfigurationOverrides::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIVisibility OAISheetElementConfigurationOverrides::getVisibility() const {
    return m_visibility;
}
void OAISheetElementConfigurationOverrides::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAISheetElementConfigurationOverrides::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAISheetElementConfigurationOverrides::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAISheetElementConfigurationOverrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetElementConfigurationOverrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
