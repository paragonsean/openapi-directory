/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalTable_CustomSql.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalTable_CustomSql::OAIPhysicalTable_CustomSql(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalTable_CustomSql::OAIPhysicalTable_CustomSql() {
    this->initializeModel();
}

OAIPhysicalTable_CustomSql::~OAIPhysicalTable_CustomSql() {}

void OAIPhysicalTable_CustomSql::initializeModel() {

    m_data_source_arn_isSet = false;
    m_data_source_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sql_query_isSet = false;
    m_sql_query_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;
}

void OAIPhysicalTable_CustomSql::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalTable_CustomSql::fromJsonObject(QJsonObject json) {

    m_data_source_arn_isValid = ::OpenAPI::fromJsonValue(m_data_source_arn, json[QString("DataSourceArn")]);
    m_data_source_arn_isSet = !json[QString("DataSourceArn")].isNull() && m_data_source_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_sql_query_isValid = ::OpenAPI::fromJsonValue(m_sql_query, json[QString("SqlQuery")]);
    m_sql_query_isSet = !json[QString("SqlQuery")].isNull() && m_sql_query_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("Columns")]);
    m_columns_isSet = !json[QString("Columns")].isNull() && m_columns_isValid;
}

QString OAIPhysicalTable_CustomSql::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalTable_CustomSql::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_arn_isSet) {
        obj.insert(QString("DataSourceArn"), ::OpenAPI::toJsonValue(m_data_source_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sql_query_isSet) {
        obj.insert(QString("SqlQuery"), ::OpenAPI::toJsonValue(m_sql_query));
    }
    if (m_columns.isSet()) {
        obj.insert(QString("Columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    return obj;
}

QString OAIPhysicalTable_CustomSql::getDataSourceArn() const {
    return m_data_source_arn;
}
void OAIPhysicalTable_CustomSql::setDataSourceArn(const QString &data_source_arn) {
    m_data_source_arn = data_source_arn;
    m_data_source_arn_isSet = true;
}

bool OAIPhysicalTable_CustomSql::is_data_source_arn_Set() const{
    return m_data_source_arn_isSet;
}

bool OAIPhysicalTable_CustomSql::is_data_source_arn_Valid() const{
    return m_data_source_arn_isValid;
}

QString OAIPhysicalTable_CustomSql::getName() const {
    return m_name;
}
void OAIPhysicalTable_CustomSql::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPhysicalTable_CustomSql::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPhysicalTable_CustomSql::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPhysicalTable_CustomSql::getSqlQuery() const {
    return m_sql_query;
}
void OAIPhysicalTable_CustomSql::setSqlQuery(const QString &sql_query) {
    m_sql_query = sql_query;
    m_sql_query_isSet = true;
}

bool OAIPhysicalTable_CustomSql::is_sql_query_Set() const{
    return m_sql_query_isSet;
}

bool OAIPhysicalTable_CustomSql::is_sql_query_Valid() const{
    return m_sql_query_isValid;
}

QList OAIPhysicalTable_CustomSql::getColumns() const {
    return m_columns;
}
void OAIPhysicalTable_CustomSql::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIPhysicalTable_CustomSql::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIPhysicalTable_CustomSql::is_columns_Valid() const{
    return m_columns_isValid;
}

bool OAIPhysicalTable_CustomSql::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalTable_CustomSql::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_arn_isValid && m_name_isValid && m_sql_query_isValid && true;
}

} // namespace OpenAPI
