/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence() {
    this->initializeModel();
}

OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::~OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence() {}

void OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;
}

void OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;
}

QString OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    return obj;
}

bool OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::getEnabled() const {
    return m_enabled;
}
void OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
