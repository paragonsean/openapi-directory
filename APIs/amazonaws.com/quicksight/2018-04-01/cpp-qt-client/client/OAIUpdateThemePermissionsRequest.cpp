/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateThemePermissionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateThemePermissionsRequest::OAIUpdateThemePermissionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateThemePermissionsRequest::OAIUpdateThemePermissionsRequest() {
    this->initializeModel();
}

OAIUpdateThemePermissionsRequest::~OAIUpdateThemePermissionsRequest() {}

void OAIUpdateThemePermissionsRequest::initializeModel() {

    m_grant_permissions_isSet = false;
    m_grant_permissions_isValid = false;

    m_revoke_permissions_isSet = false;
    m_revoke_permissions_isValid = false;
}

void OAIUpdateThemePermissionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateThemePermissionsRequest::fromJsonObject(QJsonObject json) {

    m_grant_permissions_isValid = ::OpenAPI::fromJsonValue(m_grant_permissions, json[QString("GrantPermissions")]);
    m_grant_permissions_isSet = !json[QString("GrantPermissions")].isNull() && m_grant_permissions_isValid;

    m_revoke_permissions_isValid = ::OpenAPI::fromJsonValue(m_revoke_permissions, json[QString("RevokePermissions")]);
    m_revoke_permissions_isSet = !json[QString("RevokePermissions")].isNull() && m_revoke_permissions_isValid;
}

QString OAIUpdateThemePermissionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateThemePermissionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_grant_permissions.isSet()) {
        obj.insert(QString("GrantPermissions"), ::OpenAPI::toJsonValue(m_grant_permissions));
    }
    if (m_revoke_permissions.isSet()) {
        obj.insert(QString("RevokePermissions"), ::OpenAPI::toJsonValue(m_revoke_permissions));
    }
    return obj;
}

QList OAIUpdateThemePermissionsRequest::getGrantPermissions() const {
    return m_grant_permissions;
}
void OAIUpdateThemePermissionsRequest::setGrantPermissions(const QList &grant_permissions) {
    m_grant_permissions = grant_permissions;
    m_grant_permissions_isSet = true;
}

bool OAIUpdateThemePermissionsRequest::is_grant_permissions_Set() const{
    return m_grant_permissions_isSet;
}

bool OAIUpdateThemePermissionsRequest::is_grant_permissions_Valid() const{
    return m_grant_permissions_isValid;
}

QList OAIUpdateThemePermissionsRequest::getRevokePermissions() const {
    return m_revoke_permissions;
}
void OAIUpdateThemePermissionsRequest::setRevokePermissions(const QList &revoke_permissions) {
    m_revoke_permissions = revoke_permissions;
    m_revoke_permissions_isSet = true;
}

bool OAIUpdateThemePermissionsRequest::is_revoke_permissions_Set() const{
    return m_revoke_permissions_isSet;
}

bool OAIUpdateThemePermissionsRequest::is_revoke_permissions_Valid() const{
    return m_revoke_permissions_isValid;
}

bool OAIUpdateThemePermissionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grant_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoke_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateThemePermissionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
