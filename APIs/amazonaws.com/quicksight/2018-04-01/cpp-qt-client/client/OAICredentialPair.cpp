/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICredentialPair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICredentialPair::OAICredentialPair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICredentialPair::OAICredentialPair() {
    this->initializeModel();
}

OAICredentialPair::~OAICredentialPair() {}

void OAICredentialPair::initializeModel() {

    m_username_isSet = false;
    m_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_alternate_data_source_parameters_isSet = false;
    m_alternate_data_source_parameters_isValid = false;
}

void OAICredentialPair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICredentialPair::fromJsonObject(QJsonObject json) {

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_alternate_data_source_parameters_isValid = ::OpenAPI::fromJsonValue(m_alternate_data_source_parameters, json[QString("AlternateDataSourceParameters")]);
    m_alternate_data_source_parameters_isSet = !json[QString("AlternateDataSourceParameters")].isNull() && m_alternate_data_source_parameters_isValid;
}

QString OAICredentialPair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICredentialPair::asJsonObject() const {
    QJsonObject obj;
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_alternate_data_source_parameters.isSet()) {
        obj.insert(QString("AlternateDataSourceParameters"), ::OpenAPI::toJsonValue(m_alternate_data_source_parameters));
    }
    return obj;
}

QString OAICredentialPair::getUsername() const {
    return m_username;
}
void OAICredentialPair::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAICredentialPair::is_username_Set() const{
    return m_username_isSet;
}

bool OAICredentialPair::is_username_Valid() const{
    return m_username_isValid;
}

QString OAICredentialPair::getPassword() const {
    return m_password;
}
void OAICredentialPair::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICredentialPair::is_password_Set() const{
    return m_password_isSet;
}

bool OAICredentialPair::is_password_Valid() const{
    return m_password_isValid;
}

QList OAICredentialPair::getAlternateDataSourceParameters() const {
    return m_alternate_data_source_parameters;
}
void OAICredentialPair::setAlternateDataSourceParameters(const QList &alternate_data_source_parameters) {
    m_alternate_data_source_parameters = alternate_data_source_parameters;
    m_alternate_data_source_parameters_isSet = true;
}

bool OAICredentialPair::is_alternate_data_source_parameters_Set() const{
    return m_alternate_data_source_parameters_isSet;
}

bool OAICredentialPair::is_alternate_data_source_parameters_Valid() const{
    return m_alternate_data_source_parameters_isValid;
}

bool OAICredentialPair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_data_source_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICredentialPair::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_username_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
