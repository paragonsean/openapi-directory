/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKPIProgressBarConditionalFormatting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKPIProgressBarConditionalFormatting::OAIKPIProgressBarConditionalFormatting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKPIProgressBarConditionalFormatting::OAIKPIProgressBarConditionalFormatting() {
    this->initializeModel();
}

OAIKPIProgressBarConditionalFormatting::~OAIKPIProgressBarConditionalFormatting() {}

void OAIKPIProgressBarConditionalFormatting::initializeModel() {

    m_foreground_color_isSet = false;
    m_foreground_color_isValid = false;
}

void OAIKPIProgressBarConditionalFormatting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKPIProgressBarConditionalFormatting::fromJsonObject(QJsonObject json) {

    m_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_foreground_color, json[QString("ForegroundColor")]);
    m_foreground_color_isSet = !json[QString("ForegroundColor")].isNull() && m_foreground_color_isValid;
}

QString OAIKPIProgressBarConditionalFormatting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKPIProgressBarConditionalFormatting::asJsonObject() const {
    QJsonObject obj;
    if (m_foreground_color.isSet()) {
        obj.insert(QString("ForegroundColor"), ::OpenAPI::toJsonValue(m_foreground_color));
    }
    return obj;
}

OAIKPIProgressBarConditionalFormatting_ForegroundColor OAIKPIProgressBarConditionalFormatting::getForegroundColor() const {
    return m_foreground_color;
}
void OAIKPIProgressBarConditionalFormatting::setForegroundColor(const OAIKPIProgressBarConditionalFormatting_ForegroundColor &foreground_color) {
    m_foreground_color = foreground_color;
    m_foreground_color_isSet = true;
}

bool OAIKPIProgressBarConditionalFormatting::is_foreground_color_Set() const{
    return m_foreground_color_isSet;
}

bool OAIKPIProgressBarConditionalFormatting::is_foreground_color_Valid() const{
    return m_foreground_color_isValid;
}

bool OAIKPIProgressBarConditionalFormatting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_foreground_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKPIProgressBarConditionalFormatting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
