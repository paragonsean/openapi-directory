/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilledMapConditionalFormattingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilledMapConditionalFormattingOption::OAIFilledMapConditionalFormattingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilledMapConditionalFormattingOption::OAIFilledMapConditionalFormattingOption() {
    this->initializeModel();
}

OAIFilledMapConditionalFormattingOption::~OAIFilledMapConditionalFormattingOption() {}

void OAIFilledMapConditionalFormattingOption::initializeModel() {

    m_shape_isSet = false;
    m_shape_isValid = false;
}

void OAIFilledMapConditionalFormattingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilledMapConditionalFormattingOption::fromJsonObject(QJsonObject json) {

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("Shape")]);
    m_shape_isSet = !json[QString("Shape")].isNull() && m_shape_isValid;
}

QString OAIFilledMapConditionalFormattingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilledMapConditionalFormattingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_shape.isSet()) {
        obj.insert(QString("Shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    return obj;
}

OAIFilledMapConditionalFormattingOption_Shape OAIFilledMapConditionalFormattingOption::getShape() const {
    return m_shape;
}
void OAIFilledMapConditionalFormattingOption::setShape(const OAIFilledMapConditionalFormattingOption_Shape &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIFilledMapConditionalFormattingOption::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIFilledMapConditionalFormattingOption::is_shape_Valid() const{
    return m_shape_isValid;
}

bool OAIFilledMapConditionalFormattingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilledMapConditionalFormattingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_shape_isValid && true;
}

} // namespace OpenAPI
