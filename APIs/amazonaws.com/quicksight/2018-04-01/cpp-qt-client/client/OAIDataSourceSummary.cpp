/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceSummary::OAIDataSourceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceSummary::OAIDataSourceSummary() {
    this->initializeModel();
}

OAIDataSourceSummary::~OAIDataSourceSummary() {}

void OAIDataSourceSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIDataSourceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIDataSourceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAIDataSourceSummary::getArn() const {
    return m_arn;
}
void OAIDataSourceSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDataSourceSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDataSourceSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDataSourceSummary::getDataSourceId() const {
    return m_data_source_id;
}
void OAIDataSourceSummary::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIDataSourceSummary::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIDataSourceSummary::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAIDataSourceSummary::getName() const {
    return m_name;
}
void OAIDataSourceSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSourceSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSourceSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIDataSourceType OAIDataSourceSummary::getType() const {
    return m_type;
}
void OAIDataSourceSummary::setType(const OAIDataSourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataSourceSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataSourceSummary::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIDataSourceSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIDataSourceSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDataSourceSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDataSourceSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDataSourceSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDataSourceSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDataSourceSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDataSourceSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIDataSourceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
