/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeVPCConnectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeVPCConnectionResponse::OAIDescribeVPCConnectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeVPCConnectionResponse::OAIDescribeVPCConnectionResponse() {
    this->initializeModel();
}

OAIDescribeVPCConnectionResponse::~OAIDescribeVPCConnectionResponse() {}

void OAIDescribeVPCConnectionResponse::initializeModel() {

    m_vpc_connection_isSet = false;
    m_vpc_connection_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeVPCConnectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeVPCConnectionResponse::fromJsonObject(QJsonObject json) {

    m_vpc_connection_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection, json[QString("VPCConnection")]);
    m_vpc_connection_isSet = !json[QString("VPCConnection")].isNull() && m_vpc_connection_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeVPCConnectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeVPCConnectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_connection.isSet()) {
        obj.insert(QString("VPCConnection"), ::OpenAPI::toJsonValue(m_vpc_connection));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIDescribeVPCConnectionResponse_VPCConnection OAIDescribeVPCConnectionResponse::getVpcConnection() const {
    return m_vpc_connection;
}
void OAIDescribeVPCConnectionResponse::setVpcConnection(const OAIDescribeVPCConnectionResponse_VPCConnection &vpc_connection) {
    m_vpc_connection = vpc_connection;
    m_vpc_connection_isSet = true;
}

bool OAIDescribeVPCConnectionResponse::is_vpc_connection_Set() const{
    return m_vpc_connection_isSet;
}

bool OAIDescribeVPCConnectionResponse::is_vpc_connection_Valid() const{
    return m_vpc_connection_isValid;
}

QString OAIDescribeVPCConnectionResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeVPCConnectionResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeVPCConnectionResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeVPCConnectionResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeVPCConnectionResponse::getStatus() const {
    return m_status;
}
void OAIDescribeVPCConnectionResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeVPCConnectionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeVPCConnectionResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeVPCConnectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeVPCConnectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
