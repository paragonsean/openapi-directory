/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetParameter::OAIDatasetParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetParameter::OAIDatasetParameter() {
    this->initializeModel();
}

OAIDatasetParameter::~OAIDatasetParameter() {}

void OAIDatasetParameter::initializeModel() {

    m_string_dataset_parameter_isSet = false;
    m_string_dataset_parameter_isValid = false;

    m_decimal_dataset_parameter_isSet = false;
    m_decimal_dataset_parameter_isValid = false;

    m_integer_dataset_parameter_isSet = false;
    m_integer_dataset_parameter_isValid = false;

    m_date_time_dataset_parameter_isSet = false;
    m_date_time_dataset_parameter_isValid = false;
}

void OAIDatasetParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetParameter::fromJsonObject(QJsonObject json) {

    m_string_dataset_parameter_isValid = ::OpenAPI::fromJsonValue(m_string_dataset_parameter, json[QString("StringDatasetParameter")]);
    m_string_dataset_parameter_isSet = !json[QString("StringDatasetParameter")].isNull() && m_string_dataset_parameter_isValid;

    m_decimal_dataset_parameter_isValid = ::OpenAPI::fromJsonValue(m_decimal_dataset_parameter, json[QString("DecimalDatasetParameter")]);
    m_decimal_dataset_parameter_isSet = !json[QString("DecimalDatasetParameter")].isNull() && m_decimal_dataset_parameter_isValid;

    m_integer_dataset_parameter_isValid = ::OpenAPI::fromJsonValue(m_integer_dataset_parameter, json[QString("IntegerDatasetParameter")]);
    m_integer_dataset_parameter_isSet = !json[QString("IntegerDatasetParameter")].isNull() && m_integer_dataset_parameter_isValid;

    m_date_time_dataset_parameter_isValid = ::OpenAPI::fromJsonValue(m_date_time_dataset_parameter, json[QString("DateTimeDatasetParameter")]);
    m_date_time_dataset_parameter_isSet = !json[QString("DateTimeDatasetParameter")].isNull() && m_date_time_dataset_parameter_isValid;
}

QString OAIDatasetParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_string_dataset_parameter.isSet()) {
        obj.insert(QString("StringDatasetParameter"), ::OpenAPI::toJsonValue(m_string_dataset_parameter));
    }
    if (m_decimal_dataset_parameter.isSet()) {
        obj.insert(QString("DecimalDatasetParameter"), ::OpenAPI::toJsonValue(m_decimal_dataset_parameter));
    }
    if (m_integer_dataset_parameter.isSet()) {
        obj.insert(QString("IntegerDatasetParameter"), ::OpenAPI::toJsonValue(m_integer_dataset_parameter));
    }
    if (m_date_time_dataset_parameter.isSet()) {
        obj.insert(QString("DateTimeDatasetParameter"), ::OpenAPI::toJsonValue(m_date_time_dataset_parameter));
    }
    return obj;
}

OAIDatasetParameter_StringDatasetParameter OAIDatasetParameter::getStringDatasetParameter() const {
    return m_string_dataset_parameter;
}
void OAIDatasetParameter::setStringDatasetParameter(const OAIDatasetParameter_StringDatasetParameter &string_dataset_parameter) {
    m_string_dataset_parameter = string_dataset_parameter;
    m_string_dataset_parameter_isSet = true;
}

bool OAIDatasetParameter::is_string_dataset_parameter_Set() const{
    return m_string_dataset_parameter_isSet;
}

bool OAIDatasetParameter::is_string_dataset_parameter_Valid() const{
    return m_string_dataset_parameter_isValid;
}

OAIDatasetParameter_DecimalDatasetParameter OAIDatasetParameter::getDecimalDatasetParameter() const {
    return m_decimal_dataset_parameter;
}
void OAIDatasetParameter::setDecimalDatasetParameter(const OAIDatasetParameter_DecimalDatasetParameter &decimal_dataset_parameter) {
    m_decimal_dataset_parameter = decimal_dataset_parameter;
    m_decimal_dataset_parameter_isSet = true;
}

bool OAIDatasetParameter::is_decimal_dataset_parameter_Set() const{
    return m_decimal_dataset_parameter_isSet;
}

bool OAIDatasetParameter::is_decimal_dataset_parameter_Valid() const{
    return m_decimal_dataset_parameter_isValid;
}

OAIDatasetParameter_IntegerDatasetParameter OAIDatasetParameter::getIntegerDatasetParameter() const {
    return m_integer_dataset_parameter;
}
void OAIDatasetParameter::setIntegerDatasetParameter(const OAIDatasetParameter_IntegerDatasetParameter &integer_dataset_parameter) {
    m_integer_dataset_parameter = integer_dataset_parameter;
    m_integer_dataset_parameter_isSet = true;
}

bool OAIDatasetParameter::is_integer_dataset_parameter_Set() const{
    return m_integer_dataset_parameter_isSet;
}

bool OAIDatasetParameter::is_integer_dataset_parameter_Valid() const{
    return m_integer_dataset_parameter_isValid;
}

OAIDatasetParameter_DateTimeDatasetParameter OAIDatasetParameter::getDateTimeDatasetParameter() const {
    return m_date_time_dataset_parameter;
}
void OAIDatasetParameter::setDateTimeDatasetParameter(const OAIDatasetParameter_DateTimeDatasetParameter &date_time_dataset_parameter) {
    m_date_time_dataset_parameter = date_time_dataset_parameter;
    m_date_time_dataset_parameter_isSet = true;
}

bool OAIDatasetParameter::is_date_time_dataset_parameter_Set() const{
    return m_date_time_dataset_parameter_isSet;
}

bool OAIDatasetParameter::is_date_time_dataset_parameter_Valid() const{
    return m_date_time_dataset_parameter_isValid;
}

bool OAIDatasetParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_dataset_parameter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_dataset_parameter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_dataset_parameter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_dataset_parameter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
