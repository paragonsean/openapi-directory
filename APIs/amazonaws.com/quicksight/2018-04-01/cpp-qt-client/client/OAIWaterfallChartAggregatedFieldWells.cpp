/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterfallChartAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterfallChartAggregatedFieldWells::OAIWaterfallChartAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterfallChartAggregatedFieldWells::OAIWaterfallChartAggregatedFieldWells() {
    this->initializeModel();
}

OAIWaterfallChartAggregatedFieldWells::~OAIWaterfallChartAggregatedFieldWells() {}

void OAIWaterfallChartAggregatedFieldWells::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_breakdowns_isSet = false;
    m_breakdowns_isValid = false;
}

void OAIWaterfallChartAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterfallChartAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_breakdowns_isValid = ::OpenAPI::fromJsonValue(m_breakdowns, json[QString("Breakdowns")]);
    m_breakdowns_isSet = !json[QString("Breakdowns")].isNull() && m_breakdowns_isValid;
}

QString OAIWaterfallChartAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterfallChartAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.isSet()) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_breakdowns.isSet()) {
        obj.insert(QString("Breakdowns"), ::OpenAPI::toJsonValue(m_breakdowns));
    }
    return obj;
}

QList OAIWaterfallChartAggregatedFieldWells::getCategories() const {
    return m_categories;
}
void OAIWaterfallChartAggregatedFieldWells::setCategories(const QList &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIWaterfallChartAggregatedFieldWells::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIWaterfallChartAggregatedFieldWells::is_categories_Valid() const{
    return m_categories_isValid;
}

QList OAIWaterfallChartAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIWaterfallChartAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIWaterfallChartAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIWaterfallChartAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

QList OAIWaterfallChartAggregatedFieldWells::getBreakdowns() const {
    return m_breakdowns;
}
void OAIWaterfallChartAggregatedFieldWells::setBreakdowns(const QList &breakdowns) {
    m_breakdowns = breakdowns;
    m_breakdowns_isSet = true;
}

bool OAIWaterfallChartAggregatedFieldWells::is_breakdowns_Set() const{
    return m_breakdowns_isSet;
}

bool OAIWaterfallChartAggregatedFieldWells::is_breakdowns_Valid() const{
    return m_breakdowns_isValid;
}

bool OAIWaterfallChartAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakdowns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterfallChartAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
