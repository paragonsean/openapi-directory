/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWordCloudOptions.h
 *
 * The word cloud options for a word cloud visual.
 */

#ifndef OAIWordCloudOptions_H
#define OAIWordCloudOptions_H

#include <QJsonObject>

#include "OAIWordCloudCloudLayout.h"
#include "OAIWordCloudWordCasing.h"
#include "OAIWordCloudWordOrientation.h"
#include "OAIWordCloudWordPadding.h"
#include "OAIWordCloudWordScaling.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWordCloudOptions : public OAIObject {
public:
    OAIWordCloudOptions();
    OAIWordCloudOptions(QString json);
    ~OAIWordCloudOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIWordCloudWordOrientation getWordOrientation() const;
    void setWordOrientation(const OAIWordCloudWordOrientation &word_orientation);
    bool is_word_orientation_Set() const;
    bool is_word_orientation_Valid() const;

    OAIWordCloudWordScaling getWordScaling() const;
    void setWordScaling(const OAIWordCloudWordScaling &word_scaling);
    bool is_word_scaling_Set() const;
    bool is_word_scaling_Valid() const;

    OAIWordCloudCloudLayout getCloudLayout() const;
    void setCloudLayout(const OAIWordCloudCloudLayout &cloud_layout);
    bool is_cloud_layout_Set() const;
    bool is_cloud_layout_Valid() const;

    OAIWordCloudWordCasing getWordCasing() const;
    void setWordCasing(const OAIWordCloudWordCasing &word_casing);
    bool is_word_casing_Set() const;
    bool is_word_casing_Valid() const;

    OAIWordCloudWordPadding getWordPadding() const;
    void setWordPadding(const OAIWordCloudWordPadding &word_padding);
    bool is_word_padding_Set() const;
    bool is_word_padding_Valid() const;

    qint32 getMaximumStringLength() const;
    void setMaximumStringLength(const qint32 &maximum_string_length);
    bool is_maximum_string_length_Set() const;
    bool is_maximum_string_length_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIWordCloudWordOrientation m_word_orientation;
    bool m_word_orientation_isSet;
    bool m_word_orientation_isValid;

    OAIWordCloudWordScaling m_word_scaling;
    bool m_word_scaling_isSet;
    bool m_word_scaling_isValid;

    OAIWordCloudCloudLayout m_cloud_layout;
    bool m_cloud_layout_isSet;
    bool m_cloud_layout_isValid;

    OAIWordCloudWordCasing m_word_casing;
    bool m_word_casing_isSet;
    bool m_word_casing_isValid;

    OAIWordCloudWordPadding m_word_padding;
    bool m_word_padding_isSet;
    bool m_word_padding_isValid;

    qint32 m_maximum_string_length;
    bool m_maximum_string_length_isSet;
    bool m_maximum_string_length_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWordCloudOptions)

#endif // OAIWordCloudOptions_H
