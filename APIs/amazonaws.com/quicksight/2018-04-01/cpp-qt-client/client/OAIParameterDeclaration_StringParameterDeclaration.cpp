/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterDeclaration_StringParameterDeclaration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterDeclaration_StringParameterDeclaration::OAIParameterDeclaration_StringParameterDeclaration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterDeclaration_StringParameterDeclaration::OAIParameterDeclaration_StringParameterDeclaration() {
    this->initializeModel();
}

OAIParameterDeclaration_StringParameterDeclaration::~OAIParameterDeclaration_StringParameterDeclaration() {}

void OAIParameterDeclaration_StringParameterDeclaration::initializeModel() {

    m_parameter_value_type_isSet = false;
    m_parameter_value_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_default_values_isSet = false;
    m_default_values_isValid = false;

    m_value_when_unset_isSet = false;
    m_value_when_unset_isValid = false;

    m_mapped_data_set_parameters_isSet = false;
    m_mapped_data_set_parameters_isValid = false;
}

void OAIParameterDeclaration_StringParameterDeclaration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterDeclaration_StringParameterDeclaration::fromJsonObject(QJsonObject json) {

    m_parameter_value_type_isValid = ::OpenAPI::fromJsonValue(m_parameter_value_type, json[QString("ParameterValueType")]);
    m_parameter_value_type_isSet = !json[QString("ParameterValueType")].isNull() && m_parameter_value_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_default_values_isValid = ::OpenAPI::fromJsonValue(m_default_values, json[QString("DefaultValues")]);
    m_default_values_isSet = !json[QString("DefaultValues")].isNull() && m_default_values_isValid;

    m_value_when_unset_isValid = ::OpenAPI::fromJsonValue(m_value_when_unset, json[QString("ValueWhenUnset")]);
    m_value_when_unset_isSet = !json[QString("ValueWhenUnset")].isNull() && m_value_when_unset_isValid;

    m_mapped_data_set_parameters_isValid = ::OpenAPI::fromJsonValue(m_mapped_data_set_parameters, json[QString("MappedDataSetParameters")]);
    m_mapped_data_set_parameters_isSet = !json[QString("MappedDataSetParameters")].isNull() && m_mapped_data_set_parameters_isValid;
}

QString OAIParameterDeclaration_StringParameterDeclaration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterDeclaration_StringParameterDeclaration::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_value_type.isSet()) {
        obj.insert(QString("ParameterValueType"), ::OpenAPI::toJsonValue(m_parameter_value_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_default_values.isSet()) {
        obj.insert(QString("DefaultValues"), ::OpenAPI::toJsonValue(m_default_values));
    }
    if (m_value_when_unset.isSet()) {
        obj.insert(QString("ValueWhenUnset"), ::OpenAPI::toJsonValue(m_value_when_unset));
    }
    if (m_mapped_data_set_parameters.size() > 0) {
        obj.insert(QString("MappedDataSetParameters"), ::OpenAPI::toJsonValue(m_mapped_data_set_parameters));
    }
    return obj;
}

OAIParameterValueType OAIParameterDeclaration_StringParameterDeclaration::getParameterValueType() const {
    return m_parameter_value_type;
}
void OAIParameterDeclaration_StringParameterDeclaration::setParameterValueType(const OAIParameterValueType &parameter_value_type) {
    m_parameter_value_type = parameter_value_type;
    m_parameter_value_type_isSet = true;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_parameter_value_type_Set() const{
    return m_parameter_value_type_isSet;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_parameter_value_type_Valid() const{
    return m_parameter_value_type_isValid;
}

QString OAIParameterDeclaration_StringParameterDeclaration::getName() const {
    return m_name;
}
void OAIParameterDeclaration_StringParameterDeclaration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_name_Valid() const{
    return m_name_isValid;
}

OAIStringParameterDeclaration_DefaultValues OAIParameterDeclaration_StringParameterDeclaration::getDefaultValues() const {
    return m_default_values;
}
void OAIParameterDeclaration_StringParameterDeclaration::setDefaultValues(const OAIStringParameterDeclaration_DefaultValues &default_values) {
    m_default_values = default_values;
    m_default_values_isSet = true;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_default_values_Set() const{
    return m_default_values_isSet;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_default_values_Valid() const{
    return m_default_values_isValid;
}

OAIStringParameterDeclaration_ValueWhenUnset OAIParameterDeclaration_StringParameterDeclaration::getValueWhenUnset() const {
    return m_value_when_unset;
}
void OAIParameterDeclaration_StringParameterDeclaration::setValueWhenUnset(const OAIStringParameterDeclaration_ValueWhenUnset &value_when_unset) {
    m_value_when_unset = value_when_unset;
    m_value_when_unset_isSet = true;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_value_when_unset_Set() const{
    return m_value_when_unset_isSet;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_value_when_unset_Valid() const{
    return m_value_when_unset_isValid;
}

QList<OAIMappedDataSetParameter> OAIParameterDeclaration_StringParameterDeclaration::getMappedDataSetParameters() const {
    return m_mapped_data_set_parameters;
}
void OAIParameterDeclaration_StringParameterDeclaration::setMappedDataSetParameters(const QList<OAIMappedDataSetParameter> &mapped_data_set_parameters) {
    m_mapped_data_set_parameters = mapped_data_set_parameters;
    m_mapped_data_set_parameters_isSet = true;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_mapped_data_set_parameters_Set() const{
    return m_mapped_data_set_parameters_isSet;
}

bool OAIParameterDeclaration_StringParameterDeclaration::is_mapped_data_set_parameters_Valid() const{
    return m_mapped_data_set_parameters_isValid;
}

bool OAIParameterDeclaration_StringParameterDeclaration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_value_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_when_unset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapped_data_set_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterDeclaration_StringParameterDeclaration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_value_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
