/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGeospatialMapConfiguration_PointStyleOptions.h
 *
 * 
 */

#ifndef OAIGeospatialMapConfiguration_PointStyleOptions_H
#define OAIGeospatialMapConfiguration_PointStyleOptions_H

#include <QJsonObject>

#include "OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration.h"
#include "OAIGeospatialPointStyleOptions_HeatmapConfiguration.h"
#include "OAIGeospatialSelectedPointStyle.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration;
class OAIGeospatialPointStyleOptions_HeatmapConfiguration;

class OAIGeospatialMapConfiguration_PointStyleOptions : public OAIObject {
public:
    OAIGeospatialMapConfiguration_PointStyleOptions();
    OAIGeospatialMapConfiguration_PointStyleOptions(QString json);
    ~OAIGeospatialMapConfiguration_PointStyleOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGeospatialSelectedPointStyle getSelectedPointStyle() const;
    void setSelectedPointStyle(const OAIGeospatialSelectedPointStyle &selected_point_style);
    bool is_selected_point_style_Set() const;
    bool is_selected_point_style_Valid() const;

    OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration getClusterMarkerConfiguration() const;
    void setClusterMarkerConfiguration(const OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration &cluster_marker_configuration);
    bool is_cluster_marker_configuration_Set() const;
    bool is_cluster_marker_configuration_Valid() const;

    OAIGeospatialPointStyleOptions_HeatmapConfiguration getHeatmapConfiguration() const;
    void setHeatmapConfiguration(const OAIGeospatialPointStyleOptions_HeatmapConfiguration &heatmap_configuration);
    bool is_heatmap_configuration_Set() const;
    bool is_heatmap_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGeospatialSelectedPointStyle m_selected_point_style;
    bool m_selected_point_style_isSet;
    bool m_selected_point_style_isValid;

    OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration m_cluster_marker_configuration;
    bool m_cluster_marker_configuration_isSet;
    bool m_cluster_marker_configuration_isValid;

    OAIGeospatialPointStyleOptions_HeatmapConfiguration m_heatmap_configuration;
    bool m_heatmap_configuration_isSet;
    bool m_heatmap_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGeospatialMapConfiguration_PointStyleOptions)

#endif // OAIGeospatialMapConfiguration_PointStyleOptions_H
