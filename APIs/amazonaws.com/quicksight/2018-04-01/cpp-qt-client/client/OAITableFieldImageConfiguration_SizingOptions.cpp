/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableFieldImageConfiguration_SizingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableFieldImageConfiguration_SizingOptions::OAITableFieldImageConfiguration_SizingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableFieldImageConfiguration_SizingOptions::OAITableFieldImageConfiguration_SizingOptions() {
    this->initializeModel();
}

OAITableFieldImageConfiguration_SizingOptions::~OAITableFieldImageConfiguration_SizingOptions() {}

void OAITableFieldImageConfiguration_SizingOptions::initializeModel() {

    m_table_cell_image_scaling_configuration_isSet = false;
    m_table_cell_image_scaling_configuration_isValid = false;
}

void OAITableFieldImageConfiguration_SizingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableFieldImageConfiguration_SizingOptions::fromJsonObject(QJsonObject json) {

    m_table_cell_image_scaling_configuration_isValid = ::OpenAPI::fromJsonValue(m_table_cell_image_scaling_configuration, json[QString("TableCellImageScalingConfiguration")]);
    m_table_cell_image_scaling_configuration_isSet = !json[QString("TableCellImageScalingConfiguration")].isNull() && m_table_cell_image_scaling_configuration_isValid;
}

QString OAITableFieldImageConfiguration_SizingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableFieldImageConfiguration_SizingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_table_cell_image_scaling_configuration.isSet()) {
        obj.insert(QString("TableCellImageScalingConfiguration"), ::OpenAPI::toJsonValue(m_table_cell_image_scaling_configuration));
    }
    return obj;
}

OAITableCellImageScalingConfiguration OAITableFieldImageConfiguration_SizingOptions::getTableCellImageScalingConfiguration() const {
    return m_table_cell_image_scaling_configuration;
}
void OAITableFieldImageConfiguration_SizingOptions::setTableCellImageScalingConfiguration(const OAITableCellImageScalingConfiguration &table_cell_image_scaling_configuration) {
    m_table_cell_image_scaling_configuration = table_cell_image_scaling_configuration;
    m_table_cell_image_scaling_configuration_isSet = true;
}

bool OAITableFieldImageConfiguration_SizingOptions::is_table_cell_image_scaling_configuration_Set() const{
    return m_table_cell_image_scaling_configuration_isSet;
}

bool OAITableFieldImageConfiguration_SizingOptions::is_table_cell_image_scaling_configuration_Valid() const{
    return m_table_cell_image_scaling_configuration_isValid;
}

bool OAITableFieldImageConfiguration_SizingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_cell_image_scaling_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableFieldImageConfiguration_SizingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
