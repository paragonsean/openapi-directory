/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordCloudOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordCloudOptions::OAIWordCloudOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordCloudOptions::OAIWordCloudOptions() {
    this->initializeModel();
}

OAIWordCloudOptions::~OAIWordCloudOptions() {}

void OAIWordCloudOptions::initializeModel() {

    m_word_orientation_isSet = false;
    m_word_orientation_isValid = false;

    m_word_scaling_isSet = false;
    m_word_scaling_isValid = false;

    m_cloud_layout_isSet = false;
    m_cloud_layout_isValid = false;

    m_word_casing_isSet = false;
    m_word_casing_isValid = false;

    m_word_padding_isSet = false;
    m_word_padding_isValid = false;

    m_maximum_string_length_isSet = false;
    m_maximum_string_length_isValid = false;
}

void OAIWordCloudOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordCloudOptions::fromJsonObject(QJsonObject json) {

    m_word_orientation_isValid = ::OpenAPI::fromJsonValue(m_word_orientation, json[QString("WordOrientation")]);
    m_word_orientation_isSet = !json[QString("WordOrientation")].isNull() && m_word_orientation_isValid;

    m_word_scaling_isValid = ::OpenAPI::fromJsonValue(m_word_scaling, json[QString("WordScaling")]);
    m_word_scaling_isSet = !json[QString("WordScaling")].isNull() && m_word_scaling_isValid;

    m_cloud_layout_isValid = ::OpenAPI::fromJsonValue(m_cloud_layout, json[QString("CloudLayout")]);
    m_cloud_layout_isSet = !json[QString("CloudLayout")].isNull() && m_cloud_layout_isValid;

    m_word_casing_isValid = ::OpenAPI::fromJsonValue(m_word_casing, json[QString("WordCasing")]);
    m_word_casing_isSet = !json[QString("WordCasing")].isNull() && m_word_casing_isValid;

    m_word_padding_isValid = ::OpenAPI::fromJsonValue(m_word_padding, json[QString("WordPadding")]);
    m_word_padding_isSet = !json[QString("WordPadding")].isNull() && m_word_padding_isValid;

    m_maximum_string_length_isValid = ::OpenAPI::fromJsonValue(m_maximum_string_length, json[QString("MaximumStringLength")]);
    m_maximum_string_length_isSet = !json[QString("MaximumStringLength")].isNull() && m_maximum_string_length_isValid;
}

QString OAIWordCloudOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordCloudOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_word_orientation.isSet()) {
        obj.insert(QString("WordOrientation"), ::OpenAPI::toJsonValue(m_word_orientation));
    }
    if (m_word_scaling.isSet()) {
        obj.insert(QString("WordScaling"), ::OpenAPI::toJsonValue(m_word_scaling));
    }
    if (m_cloud_layout.isSet()) {
        obj.insert(QString("CloudLayout"), ::OpenAPI::toJsonValue(m_cloud_layout));
    }
    if (m_word_casing.isSet()) {
        obj.insert(QString("WordCasing"), ::OpenAPI::toJsonValue(m_word_casing));
    }
    if (m_word_padding.isSet()) {
        obj.insert(QString("WordPadding"), ::OpenAPI::toJsonValue(m_word_padding));
    }
    if (m_maximum_string_length_isSet) {
        obj.insert(QString("MaximumStringLength"), ::OpenAPI::toJsonValue(m_maximum_string_length));
    }
    return obj;
}

OAIWordCloudWordOrientation OAIWordCloudOptions::getWordOrientation() const {
    return m_word_orientation;
}
void OAIWordCloudOptions::setWordOrientation(const OAIWordCloudWordOrientation &word_orientation) {
    m_word_orientation = word_orientation;
    m_word_orientation_isSet = true;
}

bool OAIWordCloudOptions::is_word_orientation_Set() const{
    return m_word_orientation_isSet;
}

bool OAIWordCloudOptions::is_word_orientation_Valid() const{
    return m_word_orientation_isValid;
}

OAIWordCloudWordScaling OAIWordCloudOptions::getWordScaling() const {
    return m_word_scaling;
}
void OAIWordCloudOptions::setWordScaling(const OAIWordCloudWordScaling &word_scaling) {
    m_word_scaling = word_scaling;
    m_word_scaling_isSet = true;
}

bool OAIWordCloudOptions::is_word_scaling_Set() const{
    return m_word_scaling_isSet;
}

bool OAIWordCloudOptions::is_word_scaling_Valid() const{
    return m_word_scaling_isValid;
}

OAIWordCloudCloudLayout OAIWordCloudOptions::getCloudLayout() const {
    return m_cloud_layout;
}
void OAIWordCloudOptions::setCloudLayout(const OAIWordCloudCloudLayout &cloud_layout) {
    m_cloud_layout = cloud_layout;
    m_cloud_layout_isSet = true;
}

bool OAIWordCloudOptions::is_cloud_layout_Set() const{
    return m_cloud_layout_isSet;
}

bool OAIWordCloudOptions::is_cloud_layout_Valid() const{
    return m_cloud_layout_isValid;
}

OAIWordCloudWordCasing OAIWordCloudOptions::getWordCasing() const {
    return m_word_casing;
}
void OAIWordCloudOptions::setWordCasing(const OAIWordCloudWordCasing &word_casing) {
    m_word_casing = word_casing;
    m_word_casing_isSet = true;
}

bool OAIWordCloudOptions::is_word_casing_Set() const{
    return m_word_casing_isSet;
}

bool OAIWordCloudOptions::is_word_casing_Valid() const{
    return m_word_casing_isValid;
}

OAIWordCloudWordPadding OAIWordCloudOptions::getWordPadding() const {
    return m_word_padding;
}
void OAIWordCloudOptions::setWordPadding(const OAIWordCloudWordPadding &word_padding) {
    m_word_padding = word_padding;
    m_word_padding_isSet = true;
}

bool OAIWordCloudOptions::is_word_padding_Set() const{
    return m_word_padding_isSet;
}

bool OAIWordCloudOptions::is_word_padding_Valid() const{
    return m_word_padding_isValid;
}

qint32 OAIWordCloudOptions::getMaximumStringLength() const {
    return m_maximum_string_length;
}
void OAIWordCloudOptions::setMaximumStringLength(const qint32 &maximum_string_length) {
    m_maximum_string_length = maximum_string_length;
    m_maximum_string_length_isSet = true;
}

bool OAIWordCloudOptions::is_maximum_string_length_Set() const{
    return m_maximum_string_length_isSet;
}

bool OAIWordCloudOptions::is_maximum_string_length_Valid() const{
    return m_maximum_string_length_isValid;
}

bool OAIWordCloudOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_word_orientation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_scaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_casing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_padding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_string_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordCloudOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
