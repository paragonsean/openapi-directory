/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialHeatmapConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialHeatmapConfiguration::OAIGeospatialHeatmapConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialHeatmapConfiguration::OAIGeospatialHeatmapConfiguration() {
    this->initializeModel();
}

OAIGeospatialHeatmapConfiguration::~OAIGeospatialHeatmapConfiguration() {}

void OAIGeospatialHeatmapConfiguration::initializeModel() {

    m_heatmap_color_isSet = false;
    m_heatmap_color_isValid = false;
}

void OAIGeospatialHeatmapConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialHeatmapConfiguration::fromJsonObject(QJsonObject json) {

    m_heatmap_color_isValid = ::OpenAPI::fromJsonValue(m_heatmap_color, json[QString("HeatmapColor")]);
    m_heatmap_color_isSet = !json[QString("HeatmapColor")].isNull() && m_heatmap_color_isValid;
}

QString OAIGeospatialHeatmapConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialHeatmapConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_heatmap_color.isSet()) {
        obj.insert(QString("HeatmapColor"), ::OpenAPI::toJsonValue(m_heatmap_color));
    }
    return obj;
}

OAIGeospatialHeatmapConfiguration_HeatmapColor OAIGeospatialHeatmapConfiguration::getHeatmapColor() const {
    return m_heatmap_color;
}
void OAIGeospatialHeatmapConfiguration::setHeatmapColor(const OAIGeospatialHeatmapConfiguration_HeatmapColor &heatmap_color) {
    m_heatmap_color = heatmap_color;
    m_heatmap_color_isSet = true;
}

bool OAIGeospatialHeatmapConfiguration::is_heatmap_color_Set() const{
    return m_heatmap_color_isSet;
}

bool OAIGeospatialHeatmapConfiguration::is_heatmap_color_Valid() const{
    return m_heatmap_color_isValid;
}

bool OAIGeospatialHeatmapConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_heatmap_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialHeatmapConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
