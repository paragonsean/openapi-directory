/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableVisual_ConditionalFormatting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableVisual_ConditionalFormatting::OAITableVisual_ConditionalFormatting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableVisual_ConditionalFormatting::OAITableVisual_ConditionalFormatting() {
    this->initializeModel();
}

OAITableVisual_ConditionalFormatting::~OAITableVisual_ConditionalFormatting() {}

void OAITableVisual_ConditionalFormatting::initializeModel() {

    m_conditional_formatting_options_isSet = false;
    m_conditional_formatting_options_isValid = false;
}

void OAITableVisual_ConditionalFormatting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableVisual_ConditionalFormatting::fromJsonObject(QJsonObject json) {

    m_conditional_formatting_options_isValid = ::OpenAPI::fromJsonValue(m_conditional_formatting_options, json[QString("ConditionalFormattingOptions")]);
    m_conditional_formatting_options_isSet = !json[QString("ConditionalFormattingOptions")].isNull() && m_conditional_formatting_options_isValid;
}

QString OAITableVisual_ConditionalFormatting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableVisual_ConditionalFormatting::asJsonObject() const {
    QJsonObject obj;
    if (m_conditional_formatting_options.isSet()) {
        obj.insert(QString("ConditionalFormattingOptions"), ::OpenAPI::toJsonValue(m_conditional_formatting_options));
    }
    return obj;
}

QList OAITableVisual_ConditionalFormatting::getConditionalFormattingOptions() const {
    return m_conditional_formatting_options;
}
void OAITableVisual_ConditionalFormatting::setConditionalFormattingOptions(const QList &conditional_formatting_options) {
    m_conditional_formatting_options = conditional_formatting_options;
    m_conditional_formatting_options_isSet = true;
}

bool OAITableVisual_ConditionalFormatting::is_conditional_formatting_options_Set() const{
    return m_conditional_formatting_options_isSet;
}

bool OAITableVisual_ConditionalFormatting::is_conditional_formatting_options_Valid() const{
    return m_conditional_formatting_options_isValid;
}

bool OAITableVisual_ConditionalFormatting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditional_formatting_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableVisual_ConditionalFormatting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
