/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableFieldCustomIconContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableFieldCustomIconContent::OAITableFieldCustomIconContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableFieldCustomIconContent::OAITableFieldCustomIconContent() {
    this->initializeModel();
}

OAITableFieldCustomIconContent::~OAITableFieldCustomIconContent() {}

void OAITableFieldCustomIconContent::initializeModel() {

    m_icon_isSet = false;
    m_icon_isValid = false;
}

void OAITableFieldCustomIconContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableFieldCustomIconContent::fromJsonObject(QJsonObject json) {

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("Icon")]);
    m_icon_isSet = !json[QString("Icon")].isNull() && m_icon_isValid;
}

QString OAITableFieldCustomIconContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableFieldCustomIconContent::asJsonObject() const {
    QJsonObject obj;
    if (m_icon.isSet()) {
        obj.insert(QString("Icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    return obj;
}

OAITableFieldIconSetType OAITableFieldCustomIconContent::getIcon() const {
    return m_icon;
}
void OAITableFieldCustomIconContent::setIcon(const OAITableFieldIconSetType &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAITableFieldCustomIconContent::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAITableFieldCustomIconContent::is_icon_Valid() const{
    return m_icon_isValid;
}

bool OAITableFieldCustomIconContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableFieldCustomIconContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
