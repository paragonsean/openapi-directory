/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAxisDisplayOptions_DataOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAxisDisplayOptions_DataOptions::OAIAxisDisplayOptions_DataOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAxisDisplayOptions_DataOptions::OAIAxisDisplayOptions_DataOptions() {
    this->initializeModel();
}

OAIAxisDisplayOptions_DataOptions::~OAIAxisDisplayOptions_DataOptions() {}

void OAIAxisDisplayOptions_DataOptions::initializeModel() {

    m_numeric_axis_options_isSet = false;
    m_numeric_axis_options_isValid = false;

    m_date_axis_options_isSet = false;
    m_date_axis_options_isValid = false;
}

void OAIAxisDisplayOptions_DataOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAxisDisplayOptions_DataOptions::fromJsonObject(QJsonObject json) {

    m_numeric_axis_options_isValid = ::OpenAPI::fromJsonValue(m_numeric_axis_options, json[QString("NumericAxisOptions")]);
    m_numeric_axis_options_isSet = !json[QString("NumericAxisOptions")].isNull() && m_numeric_axis_options_isValid;

    m_date_axis_options_isValid = ::OpenAPI::fromJsonValue(m_date_axis_options, json[QString("DateAxisOptions")]);
    m_date_axis_options_isSet = !json[QString("DateAxisOptions")].isNull() && m_date_axis_options_isValid;
}

QString OAIAxisDisplayOptions_DataOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAxisDisplayOptions_DataOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_numeric_axis_options.isSet()) {
        obj.insert(QString("NumericAxisOptions"), ::OpenAPI::toJsonValue(m_numeric_axis_options));
    }
    if (m_date_axis_options.isSet()) {
        obj.insert(QString("DateAxisOptions"), ::OpenAPI::toJsonValue(m_date_axis_options));
    }
    return obj;
}

OAIAxisDataOptions_NumericAxisOptions OAIAxisDisplayOptions_DataOptions::getNumericAxisOptions() const {
    return m_numeric_axis_options;
}
void OAIAxisDisplayOptions_DataOptions::setNumericAxisOptions(const OAIAxisDataOptions_NumericAxisOptions &numeric_axis_options) {
    m_numeric_axis_options = numeric_axis_options;
    m_numeric_axis_options_isSet = true;
}

bool OAIAxisDisplayOptions_DataOptions::is_numeric_axis_options_Set() const{
    return m_numeric_axis_options_isSet;
}

bool OAIAxisDisplayOptions_DataOptions::is_numeric_axis_options_Valid() const{
    return m_numeric_axis_options_isValid;
}

OAIAxisDataOptions_DateAxisOptions OAIAxisDisplayOptions_DataOptions::getDateAxisOptions() const {
    return m_date_axis_options;
}
void OAIAxisDisplayOptions_DataOptions::setDateAxisOptions(const OAIAxisDataOptions_DateAxisOptions &date_axis_options) {
    m_date_axis_options = date_axis_options;
    m_date_axis_options_isSet = true;
}

bool OAIAxisDisplayOptions_DataOptions::is_date_axis_options_Set() const{
    return m_date_axis_options_isSet;
}

bool OAIAxisDisplayOptions_DataOptions::is_date_axis_options_Valid() const{
    return m_date_axis_options_isValid;
}

bool OAIAxisDisplayOptions_DataOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_numeric_axis_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_axis_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAxisDisplayOptions_DataOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
