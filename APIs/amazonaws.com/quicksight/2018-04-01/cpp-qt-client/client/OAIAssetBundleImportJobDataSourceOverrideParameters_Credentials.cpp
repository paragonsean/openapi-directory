/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials() {
    this->initializeModel();
}

OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::~OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials() {}

void OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::initializeModel() {

    m_credential_pair_isSet = false;
    m_credential_pair_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;
}

void OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::fromJsonObject(QJsonObject json) {

    m_credential_pair_isValid = ::OpenAPI::fromJsonValue(m_credential_pair, json[QString("CredentialPair")]);
    m_credential_pair_isSet = !json[QString("CredentialPair")].isNull() && m_credential_pair_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;
}

QString OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::asJsonObject() const {
    QJsonObject obj;
    if (m_credential_pair.isSet()) {
        obj.insert(QString("CredentialPair"), ::OpenAPI::toJsonValue(m_credential_pair));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    return obj;
}

OAIAssetBundleImportJobDataSourceCredentials_CredentialPair OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::getCredentialPair() const {
    return m_credential_pair;
}
void OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::setCredentialPair(const OAIAssetBundleImportJobDataSourceCredentials_CredentialPair &credential_pair) {
    m_credential_pair = credential_pair;
    m_credential_pair_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::is_credential_pair_Set() const{
    return m_credential_pair_isSet;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::is_credential_pair_Valid() const{
    return m_credential_pair_isValid;
}

QString OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::getSecretArn() const {
    return m_secret_arn;
}
void OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credential_pair.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportJobDataSourceOverrideParameters_Credentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
