/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialMapStyleOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialMapStyleOptions::OAIGeospatialMapStyleOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialMapStyleOptions::OAIGeospatialMapStyleOptions() {
    this->initializeModel();
}

OAIGeospatialMapStyleOptions::~OAIGeospatialMapStyleOptions() {}

void OAIGeospatialMapStyleOptions::initializeModel() {

    m_base_map_style_isSet = false;
    m_base_map_style_isValid = false;
}

void OAIGeospatialMapStyleOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialMapStyleOptions::fromJsonObject(QJsonObject json) {

    m_base_map_style_isValid = ::OpenAPI::fromJsonValue(m_base_map_style, json[QString("BaseMapStyle")]);
    m_base_map_style_isSet = !json[QString("BaseMapStyle")].isNull() && m_base_map_style_isValid;
}

QString OAIGeospatialMapStyleOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialMapStyleOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_base_map_style.isSet()) {
        obj.insert(QString("BaseMapStyle"), ::OpenAPI::toJsonValue(m_base_map_style));
    }
    return obj;
}

OAIBaseMapStyleType OAIGeospatialMapStyleOptions::getBaseMapStyle() const {
    return m_base_map_style;
}
void OAIGeospatialMapStyleOptions::setBaseMapStyle(const OAIBaseMapStyleType &base_map_style) {
    m_base_map_style = base_map_style;
    m_base_map_style_isSet = true;
}

bool OAIGeospatialMapStyleOptions::is_base_map_style_Set() const{
    return m_base_map_style_isSet;
}

bool OAIGeospatialMapStyleOptions::is_base_map_style_Valid() const{
    return m_base_map_style_isValid;
}

bool OAIGeospatialMapStyleOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_map_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialMapStyleOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
