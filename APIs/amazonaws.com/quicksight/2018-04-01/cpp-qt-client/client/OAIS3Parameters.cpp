/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Parameters::OAIS3Parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Parameters::OAIS3Parameters() {
    this->initializeModel();
}

OAIS3Parameters::~OAIS3Parameters() {}

void OAIS3Parameters::initializeModel() {

    m_manifest_file_location_isSet = false;
    m_manifest_file_location_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIS3Parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Parameters::fromJsonObject(QJsonObject json) {

    m_manifest_file_location_isValid = ::OpenAPI::fromJsonValue(m_manifest_file_location, json[QString("ManifestFileLocation")]);
    m_manifest_file_location_isSet = !json[QString("ManifestFileLocation")].isNull() && m_manifest_file_location_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIS3Parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_manifest_file_location.isSet()) {
        obj.insert(QString("ManifestFileLocation"), ::OpenAPI::toJsonValue(m_manifest_file_location));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

OAIS3Parameters_ManifestFileLocation OAIS3Parameters::getManifestFileLocation() const {
    return m_manifest_file_location;
}
void OAIS3Parameters::setManifestFileLocation(const OAIS3Parameters_ManifestFileLocation &manifest_file_location) {
    m_manifest_file_location = manifest_file_location;
    m_manifest_file_location_isSet = true;
}

bool OAIS3Parameters::is_manifest_file_location_Set() const{
    return m_manifest_file_location_isSet;
}

bool OAIS3Parameters::is_manifest_file_location_Valid() const{
    return m_manifest_file_location_isValid;
}

QString OAIS3Parameters::getRoleArn() const {
    return m_role_arn;
}
void OAIS3Parameters::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIS3Parameters::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIS3Parameters::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIS3Parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_manifest_file_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_manifest_file_location_isValid && true;
}

} // namespace OpenAPI
