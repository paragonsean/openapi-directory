/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterOperator::OAIFilterOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterOperator::OAIFilterOperator() {
    this->initializeModel();
}

OAIFilterOperator::~OAIFilterOperator() {}

void OAIFilterOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFilterOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFilterOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("StringEquals", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterOperator::STRINGEQUALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StringLike", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterOperator::STRINGLIKE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFilterOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFilterOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFilterOperator::STRINGEQUALS:
            val = "StringEquals";
            break;
        case eOAIFilterOperator::STRINGLIKE:
            val = "StringLike";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFilterOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFilterOperator::eOAIFilterOperator OAIFilterOperator::getValue() const {
    return m_value;
}

void OAIFilterOperator::setValue(const OAIFilterOperator::eOAIFilterOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFilterOperator::isSet() const {
    
    return m_value_isSet;
}

bool OAIFilterOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
