/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramConfiguration_BinOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramConfiguration_BinOptions::OAIHistogramConfiguration_BinOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramConfiguration_BinOptions::OAIHistogramConfiguration_BinOptions() {
    this->initializeModel();
}

OAIHistogramConfiguration_BinOptions::~OAIHistogramConfiguration_BinOptions() {}

void OAIHistogramConfiguration_BinOptions::initializeModel() {

    m_selected_bin_type_isSet = false;
    m_selected_bin_type_isValid = false;

    m_bin_count_isSet = false;
    m_bin_count_isValid = false;

    m_bin_width_isSet = false;
    m_bin_width_isValid = false;

    m_start_value_isSet = false;
    m_start_value_isValid = false;
}

void OAIHistogramConfiguration_BinOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramConfiguration_BinOptions::fromJsonObject(QJsonObject json) {

    m_selected_bin_type_isValid = ::OpenAPI::fromJsonValue(m_selected_bin_type, json[QString("SelectedBinType")]);
    m_selected_bin_type_isSet = !json[QString("SelectedBinType")].isNull() && m_selected_bin_type_isValid;

    m_bin_count_isValid = ::OpenAPI::fromJsonValue(m_bin_count, json[QString("BinCount")]);
    m_bin_count_isSet = !json[QString("BinCount")].isNull() && m_bin_count_isValid;

    m_bin_width_isValid = ::OpenAPI::fromJsonValue(m_bin_width, json[QString("BinWidth")]);
    m_bin_width_isSet = !json[QString("BinWidth")].isNull() && m_bin_width_isValid;

    m_start_value_isValid = ::OpenAPI::fromJsonValue(m_start_value, json[QString("StartValue")]);
    m_start_value_isSet = !json[QString("StartValue")].isNull() && m_start_value_isValid;
}

QString OAIHistogramConfiguration_BinOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramConfiguration_BinOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_bin_type.isSet()) {
        obj.insert(QString("SelectedBinType"), ::OpenAPI::toJsonValue(m_selected_bin_type));
    }
    if (m_bin_count.isSet()) {
        obj.insert(QString("BinCount"), ::OpenAPI::toJsonValue(m_bin_count));
    }
    if (m_bin_width.isSet()) {
        obj.insert(QString("BinWidth"), ::OpenAPI::toJsonValue(m_bin_width));
    }
    if (m_start_value_isSet) {
        obj.insert(QString("StartValue"), ::OpenAPI::toJsonValue(m_start_value));
    }
    return obj;
}

OAIHistogramBinType OAIHistogramConfiguration_BinOptions::getSelectedBinType() const {
    return m_selected_bin_type;
}
void OAIHistogramConfiguration_BinOptions::setSelectedBinType(const OAIHistogramBinType &selected_bin_type) {
    m_selected_bin_type = selected_bin_type;
    m_selected_bin_type_isSet = true;
}

bool OAIHistogramConfiguration_BinOptions::is_selected_bin_type_Set() const{
    return m_selected_bin_type_isSet;
}

bool OAIHistogramConfiguration_BinOptions::is_selected_bin_type_Valid() const{
    return m_selected_bin_type_isValid;
}

OAIHistogramBinOptions_BinCount OAIHistogramConfiguration_BinOptions::getBinCount() const {
    return m_bin_count;
}
void OAIHistogramConfiguration_BinOptions::setBinCount(const OAIHistogramBinOptions_BinCount &bin_count) {
    m_bin_count = bin_count;
    m_bin_count_isSet = true;
}

bool OAIHistogramConfiguration_BinOptions::is_bin_count_Set() const{
    return m_bin_count_isSet;
}

bool OAIHistogramConfiguration_BinOptions::is_bin_count_Valid() const{
    return m_bin_count_isValid;
}

OAIHistogramBinOptions_BinWidth OAIHistogramConfiguration_BinOptions::getBinWidth() const {
    return m_bin_width;
}
void OAIHistogramConfiguration_BinOptions::setBinWidth(const OAIHistogramBinOptions_BinWidth &bin_width) {
    m_bin_width = bin_width;
    m_bin_width_isSet = true;
}

bool OAIHistogramConfiguration_BinOptions::is_bin_width_Set() const{
    return m_bin_width_isSet;
}

bool OAIHistogramConfiguration_BinOptions::is_bin_width_Valid() const{
    return m_bin_width_isValid;
}

double OAIHistogramConfiguration_BinOptions::getStartValue() const {
    return m_start_value;
}
void OAIHistogramConfiguration_BinOptions::setStartValue(const double &start_value) {
    m_start_value = start_value;
    m_start_value_isSet = true;
}

bool OAIHistogramConfiguration_BinOptions::is_start_value_Set() const{
    return m_start_value_isSet;
}

bool OAIHistogramConfiguration_BinOptions::is_start_value_Valid() const{
    return m_start_value_isValid;
}

bool OAIHistogramConfiguration_BinOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_bin_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_width.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramConfiguration_BinOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
