/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIngestionRequestType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIngestionRequestType::OAIIngestionRequestType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIngestionRequestType::OAIIngestionRequestType() {
    this->initializeModel();
}

OAIIngestionRequestType::~OAIIngestionRequestType() {}

void OAIIngestionRequestType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIngestionRequestType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIngestionRequestType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("INITIAL_INGESTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIngestionRequestType::INITIAL_INGESTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EDIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIngestionRequestType::EDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCREMENTAL_REFRESH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIngestionRequestType::INCREMENTAL_REFRESH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FULL_REFRESH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIngestionRequestType::FULL_REFRESH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIngestionRequestType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIngestionRequestType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIngestionRequestType::INITIAL_INGESTION:
            val = "INITIAL_INGESTION";
            break;
        case eOAIIngestionRequestType::EDIT:
            val = "EDIT";
            break;
        case eOAIIngestionRequestType::INCREMENTAL_REFRESH:
            val = "INCREMENTAL_REFRESH";
            break;
        case eOAIIngestionRequestType::FULL_REFRESH:
            val = "FULL_REFRESH";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIngestionRequestType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIngestionRequestType::eOAIIngestionRequestType OAIIngestionRequestType::getValue() const {
    return m_value;
}

void OAIIngestionRequestType::setValue(const OAIIngestionRequestType::eOAIIngestionRequestType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIngestionRequestType::isSet() const {
    
    return m_value_isSet;
}

bool OAIIngestionRequestType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
