/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastConfiguration::OAIForecastConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastConfiguration::OAIForecastConfiguration() {
    this->initializeModel();
}

OAIForecastConfiguration::~OAIForecastConfiguration() {}

void OAIForecastConfiguration::initializeModel() {

    m_forecast_properties_isSet = false;
    m_forecast_properties_isValid = false;

    m_scenario_isSet = false;
    m_scenario_isValid = false;
}

void OAIForecastConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastConfiguration::fromJsonObject(QJsonObject json) {

    m_forecast_properties_isValid = ::OpenAPI::fromJsonValue(m_forecast_properties, json[QString("ForecastProperties")]);
    m_forecast_properties_isSet = !json[QString("ForecastProperties")].isNull() && m_forecast_properties_isValid;

    m_scenario_isValid = ::OpenAPI::fromJsonValue(m_scenario, json[QString("Scenario")]);
    m_scenario_isSet = !json[QString("Scenario")].isNull() && m_scenario_isValid;
}

QString OAIForecastConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_forecast_properties.isSet()) {
        obj.insert(QString("ForecastProperties"), ::OpenAPI::toJsonValue(m_forecast_properties));
    }
    if (m_scenario.isSet()) {
        obj.insert(QString("Scenario"), ::OpenAPI::toJsonValue(m_scenario));
    }
    return obj;
}

OAIForecastConfiguration_ForecastProperties OAIForecastConfiguration::getForecastProperties() const {
    return m_forecast_properties;
}
void OAIForecastConfiguration::setForecastProperties(const OAIForecastConfiguration_ForecastProperties &forecast_properties) {
    m_forecast_properties = forecast_properties;
    m_forecast_properties_isSet = true;
}

bool OAIForecastConfiguration::is_forecast_properties_Set() const{
    return m_forecast_properties_isSet;
}

bool OAIForecastConfiguration::is_forecast_properties_Valid() const{
    return m_forecast_properties_isValid;
}

OAIForecastConfiguration_Scenario OAIForecastConfiguration::getScenario() const {
    return m_scenario;
}
void OAIForecastConfiguration::setScenario(const OAIForecastConfiguration_Scenario &scenario) {
    m_scenario = scenario;
    m_scenario_isSet = true;
}

bool OAIForecastConfiguration::is_scenario_Set() const{
    return m_scenario_isSet;
}

bool OAIForecastConfiguration::is_scenario_Valid() const{
    return m_scenario_isValid;
}

bool OAIForecastConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forecast_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
