/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComboChartConfiguration_LineDataLabels.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComboChartConfiguration_LineDataLabels::OAIComboChartConfiguration_LineDataLabels(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComboChartConfiguration_LineDataLabels::OAIComboChartConfiguration_LineDataLabels() {
    this->initializeModel();
}

OAIComboChartConfiguration_LineDataLabels::~OAIComboChartConfiguration_LineDataLabels() {}

void OAIComboChartConfiguration_LineDataLabels::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_category_label_visibility_isSet = false;
    m_category_label_visibility_isValid = false;

    m_measure_label_visibility_isSet = false;
    m_measure_label_visibility_isValid = false;

    m_data_label_types_isSet = false;
    m_data_label_types_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_label_content_isSet = false;
    m_label_content_isValid = false;

    m_label_font_configuration_isSet = false;
    m_label_font_configuration_isValid = false;

    m_label_color_isSet = false;
    m_label_color_isValid = false;

    m_overlap_isSet = false;
    m_overlap_isValid = false;

    m_totals_visibility_isSet = false;
    m_totals_visibility_isValid = false;
}

void OAIComboChartConfiguration_LineDataLabels::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComboChartConfiguration_LineDataLabels::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_category_label_visibility_isValid = ::OpenAPI::fromJsonValue(m_category_label_visibility, json[QString("CategoryLabelVisibility")]);
    m_category_label_visibility_isSet = !json[QString("CategoryLabelVisibility")].isNull() && m_category_label_visibility_isValid;

    m_measure_label_visibility_isValid = ::OpenAPI::fromJsonValue(m_measure_label_visibility, json[QString("MeasureLabelVisibility")]);
    m_measure_label_visibility_isSet = !json[QString("MeasureLabelVisibility")].isNull() && m_measure_label_visibility_isValid;

    m_data_label_types_isValid = ::OpenAPI::fromJsonValue(m_data_label_types, json[QString("DataLabelTypes")]);
    m_data_label_types_isSet = !json[QString("DataLabelTypes")].isNull() && m_data_label_types_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_label_content_isValid = ::OpenAPI::fromJsonValue(m_label_content, json[QString("LabelContent")]);
    m_label_content_isSet = !json[QString("LabelContent")].isNull() && m_label_content_isValid;

    m_label_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_label_font_configuration, json[QString("LabelFontConfiguration")]);
    m_label_font_configuration_isSet = !json[QString("LabelFontConfiguration")].isNull() && m_label_font_configuration_isValid;

    m_label_color_isValid = ::OpenAPI::fromJsonValue(m_label_color, json[QString("LabelColor")]);
    m_label_color_isSet = !json[QString("LabelColor")].isNull() && m_label_color_isValid;

    m_overlap_isValid = ::OpenAPI::fromJsonValue(m_overlap, json[QString("Overlap")]);
    m_overlap_isSet = !json[QString("Overlap")].isNull() && m_overlap_isValid;

    m_totals_visibility_isValid = ::OpenAPI::fromJsonValue(m_totals_visibility, json[QString("TotalsVisibility")]);
    m_totals_visibility_isSet = !json[QString("TotalsVisibility")].isNull() && m_totals_visibility_isValid;
}

QString OAIComboChartConfiguration_LineDataLabels::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComboChartConfiguration_LineDataLabels::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_category_label_visibility.isSet()) {
        obj.insert(QString("CategoryLabelVisibility"), ::OpenAPI::toJsonValue(m_category_label_visibility));
    }
    if (m_measure_label_visibility.isSet()) {
        obj.insert(QString("MeasureLabelVisibility"), ::OpenAPI::toJsonValue(m_measure_label_visibility));
    }
    if (m_data_label_types.isSet()) {
        obj.insert(QString("DataLabelTypes"), ::OpenAPI::toJsonValue(m_data_label_types));
    }
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_label_content.isSet()) {
        obj.insert(QString("LabelContent"), ::OpenAPI::toJsonValue(m_label_content));
    }
    if (m_label_font_configuration.isSet()) {
        obj.insert(QString("LabelFontConfiguration"), ::OpenAPI::toJsonValue(m_label_font_configuration));
    }
    if (m_label_color_isSet) {
        obj.insert(QString("LabelColor"), ::OpenAPI::toJsonValue(m_label_color));
    }
    if (m_overlap.isSet()) {
        obj.insert(QString("Overlap"), ::OpenAPI::toJsonValue(m_overlap));
    }
    if (m_totals_visibility.isSet()) {
        obj.insert(QString("TotalsVisibility"), ::OpenAPI::toJsonValue(m_totals_visibility));
    }
    return obj;
}

OAIVisibility OAIComboChartConfiguration_LineDataLabels::getVisibility() const {
    return m_visibility;
}
void OAIComboChartConfiguration_LineDataLabels::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIVisibility OAIComboChartConfiguration_LineDataLabels::getCategoryLabelVisibility() const {
    return m_category_label_visibility;
}
void OAIComboChartConfiguration_LineDataLabels::setCategoryLabelVisibility(const OAIVisibility &category_label_visibility) {
    m_category_label_visibility = category_label_visibility;
    m_category_label_visibility_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_category_label_visibility_Set() const{
    return m_category_label_visibility_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_category_label_visibility_Valid() const{
    return m_category_label_visibility_isValid;
}

OAIVisibility OAIComboChartConfiguration_LineDataLabels::getMeasureLabelVisibility() const {
    return m_measure_label_visibility;
}
void OAIComboChartConfiguration_LineDataLabels::setMeasureLabelVisibility(const OAIVisibility &measure_label_visibility) {
    m_measure_label_visibility = measure_label_visibility;
    m_measure_label_visibility_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_measure_label_visibility_Set() const{
    return m_measure_label_visibility_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_measure_label_visibility_Valid() const{
    return m_measure_label_visibility_isValid;
}

QList OAIComboChartConfiguration_LineDataLabels::getDataLabelTypes() const {
    return m_data_label_types;
}
void OAIComboChartConfiguration_LineDataLabels::setDataLabelTypes(const QList &data_label_types) {
    m_data_label_types = data_label_types;
    m_data_label_types_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_data_label_types_Set() const{
    return m_data_label_types_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_data_label_types_Valid() const{
    return m_data_label_types_isValid;
}

OAIDataLabelPosition OAIComboChartConfiguration_LineDataLabels::getPosition() const {
    return m_position;
}
void OAIComboChartConfiguration_LineDataLabels::setPosition(const OAIDataLabelPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_position_Set() const{
    return m_position_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_position_Valid() const{
    return m_position_isValid;
}

OAIDataLabelContent OAIComboChartConfiguration_LineDataLabels::getLabelContent() const {
    return m_label_content;
}
void OAIComboChartConfiguration_LineDataLabels::setLabelContent(const OAIDataLabelContent &label_content) {
    m_label_content = label_content;
    m_label_content_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_label_content_Set() const{
    return m_label_content_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_label_content_Valid() const{
    return m_label_content_isValid;
}

OAIDataLabelOptions_LabelFontConfiguration OAIComboChartConfiguration_LineDataLabels::getLabelFontConfiguration() const {
    return m_label_font_configuration;
}
void OAIComboChartConfiguration_LineDataLabels::setLabelFontConfiguration(const OAIDataLabelOptions_LabelFontConfiguration &label_font_configuration) {
    m_label_font_configuration = label_font_configuration;
    m_label_font_configuration_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_label_font_configuration_Set() const{
    return m_label_font_configuration_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_label_font_configuration_Valid() const{
    return m_label_font_configuration_isValid;
}

QString OAIComboChartConfiguration_LineDataLabels::getLabelColor() const {
    return m_label_color;
}
void OAIComboChartConfiguration_LineDataLabels::setLabelColor(const QString &label_color) {
    m_label_color = label_color;
    m_label_color_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_label_color_Set() const{
    return m_label_color_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_label_color_Valid() const{
    return m_label_color_isValid;
}

OAIDataLabelOverlap OAIComboChartConfiguration_LineDataLabels::getOverlap() const {
    return m_overlap;
}
void OAIComboChartConfiguration_LineDataLabels::setOverlap(const OAIDataLabelOverlap &overlap) {
    m_overlap = overlap;
    m_overlap_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_overlap_Set() const{
    return m_overlap_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_overlap_Valid() const{
    return m_overlap_isValid;
}

OAIVisibility OAIComboChartConfiguration_LineDataLabels::getTotalsVisibility() const {
    return m_totals_visibility;
}
void OAIComboChartConfiguration_LineDataLabels::setTotalsVisibility(const OAIVisibility &totals_visibility) {
    m_totals_visibility = totals_visibility;
    m_totals_visibility_isSet = true;
}

bool OAIComboChartConfiguration_LineDataLabels::is_totals_visibility_Set() const{
    return m_totals_visibility_isSet;
}

bool OAIComboChartConfiguration_LineDataLabels::is_totals_visibility_Valid() const{
    return m_totals_visibility_isValid;
}

bool OAIComboChartConfiguration_LineDataLabels::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_label_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_label_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComboChartConfiguration_LineDataLabels::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
