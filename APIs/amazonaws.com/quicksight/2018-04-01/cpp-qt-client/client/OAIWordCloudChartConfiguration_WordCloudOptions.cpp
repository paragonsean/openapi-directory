/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordCloudChartConfiguration_WordCloudOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordCloudChartConfiguration_WordCloudOptions::OAIWordCloudChartConfiguration_WordCloudOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordCloudChartConfiguration_WordCloudOptions::OAIWordCloudChartConfiguration_WordCloudOptions() {
    this->initializeModel();
}

OAIWordCloudChartConfiguration_WordCloudOptions::~OAIWordCloudChartConfiguration_WordCloudOptions() {}

void OAIWordCloudChartConfiguration_WordCloudOptions::initializeModel() {

    m_word_orientation_isSet = false;
    m_word_orientation_isValid = false;

    m_word_scaling_isSet = false;
    m_word_scaling_isValid = false;

    m_cloud_layout_isSet = false;
    m_cloud_layout_isValid = false;

    m_word_casing_isSet = false;
    m_word_casing_isValid = false;

    m_word_padding_isSet = false;
    m_word_padding_isValid = false;

    m_maximum_string_length_isSet = false;
    m_maximum_string_length_isValid = false;
}

void OAIWordCloudChartConfiguration_WordCloudOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordCloudChartConfiguration_WordCloudOptions::fromJsonObject(QJsonObject json) {

    m_word_orientation_isValid = ::OpenAPI::fromJsonValue(m_word_orientation, json[QString("WordOrientation")]);
    m_word_orientation_isSet = !json[QString("WordOrientation")].isNull() && m_word_orientation_isValid;

    m_word_scaling_isValid = ::OpenAPI::fromJsonValue(m_word_scaling, json[QString("WordScaling")]);
    m_word_scaling_isSet = !json[QString("WordScaling")].isNull() && m_word_scaling_isValid;

    m_cloud_layout_isValid = ::OpenAPI::fromJsonValue(m_cloud_layout, json[QString("CloudLayout")]);
    m_cloud_layout_isSet = !json[QString("CloudLayout")].isNull() && m_cloud_layout_isValid;

    m_word_casing_isValid = ::OpenAPI::fromJsonValue(m_word_casing, json[QString("WordCasing")]);
    m_word_casing_isSet = !json[QString("WordCasing")].isNull() && m_word_casing_isValid;

    m_word_padding_isValid = ::OpenAPI::fromJsonValue(m_word_padding, json[QString("WordPadding")]);
    m_word_padding_isSet = !json[QString("WordPadding")].isNull() && m_word_padding_isValid;

    m_maximum_string_length_isValid = ::OpenAPI::fromJsonValue(m_maximum_string_length, json[QString("MaximumStringLength")]);
    m_maximum_string_length_isSet = !json[QString("MaximumStringLength")].isNull() && m_maximum_string_length_isValid;
}

QString OAIWordCloudChartConfiguration_WordCloudOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordCloudChartConfiguration_WordCloudOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_word_orientation.isSet()) {
        obj.insert(QString("WordOrientation"), ::OpenAPI::toJsonValue(m_word_orientation));
    }
    if (m_word_scaling.isSet()) {
        obj.insert(QString("WordScaling"), ::OpenAPI::toJsonValue(m_word_scaling));
    }
    if (m_cloud_layout.isSet()) {
        obj.insert(QString("CloudLayout"), ::OpenAPI::toJsonValue(m_cloud_layout));
    }
    if (m_word_casing.isSet()) {
        obj.insert(QString("WordCasing"), ::OpenAPI::toJsonValue(m_word_casing));
    }
    if (m_word_padding.isSet()) {
        obj.insert(QString("WordPadding"), ::OpenAPI::toJsonValue(m_word_padding));
    }
    if (m_maximum_string_length_isSet) {
        obj.insert(QString("MaximumStringLength"), ::OpenAPI::toJsonValue(m_maximum_string_length));
    }
    return obj;
}

OAIWordCloudWordOrientation OAIWordCloudChartConfiguration_WordCloudOptions::getWordOrientation() const {
    return m_word_orientation;
}
void OAIWordCloudChartConfiguration_WordCloudOptions::setWordOrientation(const OAIWordCloudWordOrientation &word_orientation) {
    m_word_orientation = word_orientation;
    m_word_orientation_isSet = true;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_word_orientation_Set() const{
    return m_word_orientation_isSet;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_word_orientation_Valid() const{
    return m_word_orientation_isValid;
}

OAIWordCloudWordScaling OAIWordCloudChartConfiguration_WordCloudOptions::getWordScaling() const {
    return m_word_scaling;
}
void OAIWordCloudChartConfiguration_WordCloudOptions::setWordScaling(const OAIWordCloudWordScaling &word_scaling) {
    m_word_scaling = word_scaling;
    m_word_scaling_isSet = true;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_word_scaling_Set() const{
    return m_word_scaling_isSet;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_word_scaling_Valid() const{
    return m_word_scaling_isValid;
}

OAIWordCloudCloudLayout OAIWordCloudChartConfiguration_WordCloudOptions::getCloudLayout() const {
    return m_cloud_layout;
}
void OAIWordCloudChartConfiguration_WordCloudOptions::setCloudLayout(const OAIWordCloudCloudLayout &cloud_layout) {
    m_cloud_layout = cloud_layout;
    m_cloud_layout_isSet = true;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_cloud_layout_Set() const{
    return m_cloud_layout_isSet;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_cloud_layout_Valid() const{
    return m_cloud_layout_isValid;
}

OAIWordCloudWordCasing OAIWordCloudChartConfiguration_WordCloudOptions::getWordCasing() const {
    return m_word_casing;
}
void OAIWordCloudChartConfiguration_WordCloudOptions::setWordCasing(const OAIWordCloudWordCasing &word_casing) {
    m_word_casing = word_casing;
    m_word_casing_isSet = true;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_word_casing_Set() const{
    return m_word_casing_isSet;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_word_casing_Valid() const{
    return m_word_casing_isValid;
}

OAIWordCloudWordPadding OAIWordCloudChartConfiguration_WordCloudOptions::getWordPadding() const {
    return m_word_padding;
}
void OAIWordCloudChartConfiguration_WordCloudOptions::setWordPadding(const OAIWordCloudWordPadding &word_padding) {
    m_word_padding = word_padding;
    m_word_padding_isSet = true;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_word_padding_Set() const{
    return m_word_padding_isSet;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_word_padding_Valid() const{
    return m_word_padding_isValid;
}

qint32 OAIWordCloudChartConfiguration_WordCloudOptions::getMaximumStringLength() const {
    return m_maximum_string_length;
}
void OAIWordCloudChartConfiguration_WordCloudOptions::setMaximumStringLength(const qint32 &maximum_string_length) {
    m_maximum_string_length = maximum_string_length;
    m_maximum_string_length_isSet = true;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_maximum_string_length_Set() const{
    return m_maximum_string_length_isSet;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::is_maximum_string_length_Valid() const{
    return m_maximum_string_length_isValid;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_word_orientation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_scaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_casing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_padding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_string_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordCloudChartConfiguration_WordCloudOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
