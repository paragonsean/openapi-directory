/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLine_DataConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLine_DataConfiguration::OAIReferenceLine_DataConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLine_DataConfiguration::OAIReferenceLine_DataConfiguration() {
    this->initializeModel();
}

OAIReferenceLine_DataConfiguration::~OAIReferenceLine_DataConfiguration() {}

void OAIReferenceLine_DataConfiguration::initializeModel() {

    m_static_configuration_isSet = false;
    m_static_configuration_isValid = false;

    m_dynamic_configuration_isSet = false;
    m_dynamic_configuration_isValid = false;

    m_axis_binding_isSet = false;
    m_axis_binding_isValid = false;
}

void OAIReferenceLine_DataConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLine_DataConfiguration::fromJsonObject(QJsonObject json) {

    m_static_configuration_isValid = ::OpenAPI::fromJsonValue(m_static_configuration, json[QString("StaticConfiguration")]);
    m_static_configuration_isSet = !json[QString("StaticConfiguration")].isNull() && m_static_configuration_isValid;

    m_dynamic_configuration_isValid = ::OpenAPI::fromJsonValue(m_dynamic_configuration, json[QString("DynamicConfiguration")]);
    m_dynamic_configuration_isSet = !json[QString("DynamicConfiguration")].isNull() && m_dynamic_configuration_isValid;

    m_axis_binding_isValid = ::OpenAPI::fromJsonValue(m_axis_binding, json[QString("AxisBinding")]);
    m_axis_binding_isSet = !json[QString("AxisBinding")].isNull() && m_axis_binding_isValid;
}

QString OAIReferenceLine_DataConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLine_DataConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_static_configuration.isSet()) {
        obj.insert(QString("StaticConfiguration"), ::OpenAPI::toJsonValue(m_static_configuration));
    }
    if (m_dynamic_configuration.isSet()) {
        obj.insert(QString("DynamicConfiguration"), ::OpenAPI::toJsonValue(m_dynamic_configuration));
    }
    if (m_axis_binding.isSet()) {
        obj.insert(QString("AxisBinding"), ::OpenAPI::toJsonValue(m_axis_binding));
    }
    return obj;
}

OAIReferenceLineDataConfiguration_StaticConfiguration OAIReferenceLine_DataConfiguration::getStaticConfiguration() const {
    return m_static_configuration;
}
void OAIReferenceLine_DataConfiguration::setStaticConfiguration(const OAIReferenceLineDataConfiguration_StaticConfiguration &static_configuration) {
    m_static_configuration = static_configuration;
    m_static_configuration_isSet = true;
}

bool OAIReferenceLine_DataConfiguration::is_static_configuration_Set() const{
    return m_static_configuration_isSet;
}

bool OAIReferenceLine_DataConfiguration::is_static_configuration_Valid() const{
    return m_static_configuration_isValid;
}

OAIReferenceLineDataConfiguration_DynamicConfiguration OAIReferenceLine_DataConfiguration::getDynamicConfiguration() const {
    return m_dynamic_configuration;
}
void OAIReferenceLine_DataConfiguration::setDynamicConfiguration(const OAIReferenceLineDataConfiguration_DynamicConfiguration &dynamic_configuration) {
    m_dynamic_configuration = dynamic_configuration;
    m_dynamic_configuration_isSet = true;
}

bool OAIReferenceLine_DataConfiguration::is_dynamic_configuration_Set() const{
    return m_dynamic_configuration_isSet;
}

bool OAIReferenceLine_DataConfiguration::is_dynamic_configuration_Valid() const{
    return m_dynamic_configuration_isValid;
}

OAIAxisBinding OAIReferenceLine_DataConfiguration::getAxisBinding() const {
    return m_axis_binding;
}
void OAIReferenceLine_DataConfiguration::setAxisBinding(const OAIAxisBinding &axis_binding) {
    m_axis_binding = axis_binding;
    m_axis_binding_isSet = true;
}

bool OAIReferenceLine_DataConfiguration::is_axis_binding_Set() const{
    return m_axis_binding_isSet;
}

bool OAIReferenceLine_DataConfiguration::is_axis_binding_Valid() const{
    return m_axis_binding_isValid;
}

bool OAIReferenceLine_DataConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_static_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_binding.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLine_DataConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
