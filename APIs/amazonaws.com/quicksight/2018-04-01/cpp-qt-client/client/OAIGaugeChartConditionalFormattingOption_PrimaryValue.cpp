/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGaugeChartConditionalFormattingOption_PrimaryValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGaugeChartConditionalFormattingOption_PrimaryValue::OAIGaugeChartConditionalFormattingOption_PrimaryValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGaugeChartConditionalFormattingOption_PrimaryValue::OAIGaugeChartConditionalFormattingOption_PrimaryValue() {
    this->initializeModel();
}

OAIGaugeChartConditionalFormattingOption_PrimaryValue::~OAIGaugeChartConditionalFormattingOption_PrimaryValue() {}

void OAIGaugeChartConditionalFormattingOption_PrimaryValue::initializeModel() {

    m_text_color_isSet = false;
    m_text_color_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;
}

void OAIGaugeChartConditionalFormattingOption_PrimaryValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGaugeChartConditionalFormattingOption_PrimaryValue::fromJsonObject(QJsonObject json) {

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("TextColor")]);
    m_text_color_isSet = !json[QString("TextColor")].isNull() && m_text_color_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("Icon")]);
    m_icon_isSet = !json[QString("Icon")].isNull() && m_icon_isValid;
}

QString OAIGaugeChartConditionalFormattingOption_PrimaryValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGaugeChartConditionalFormattingOption_PrimaryValue::asJsonObject() const {
    QJsonObject obj;
    if (m_text_color.isSet()) {
        obj.insert(QString("TextColor"), ::OpenAPI::toJsonValue(m_text_color));
    }
    if (m_icon.isSet()) {
        obj.insert(QString("Icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    return obj;
}

OAIGaugeChartPrimaryValueConditionalFormatting_TextColor OAIGaugeChartConditionalFormattingOption_PrimaryValue::getTextColor() const {
    return m_text_color;
}
void OAIGaugeChartConditionalFormattingOption_PrimaryValue::setTextColor(const OAIGaugeChartPrimaryValueConditionalFormatting_TextColor &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAIGaugeChartConditionalFormattingOption_PrimaryValue::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAIGaugeChartConditionalFormattingOption_PrimaryValue::is_text_color_Valid() const{
    return m_text_color_isValid;
}

OAIGaugeChartPrimaryValueConditionalFormatting_Icon OAIGaugeChartConditionalFormattingOption_PrimaryValue::getIcon() const {
    return m_icon;
}
void OAIGaugeChartConditionalFormattingOption_PrimaryValue::setIcon(const OAIGaugeChartPrimaryValueConditionalFormatting_Icon &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIGaugeChartConditionalFormattingOption_PrimaryValue::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIGaugeChartConditionalFormattingOption_PrimaryValue::is_icon_Valid() const{
    return m_icon_isValid;
}

bool OAIGaugeChartConditionalFormattingOption_PrimaryValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGaugeChartConditionalFormattingOption_PrimaryValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
