/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingCustomIconCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingCustomIconCondition::OAIConditionalFormattingCustomIconCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingCustomIconCondition::OAIConditionalFormattingCustomIconCondition() {
    this->initializeModel();
}

OAIConditionalFormattingCustomIconCondition::~OAIConditionalFormattingCustomIconCondition() {}

void OAIConditionalFormattingCustomIconCondition::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_icon_options_isSet = false;
    m_icon_options_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_display_configuration_isSet = false;
    m_display_configuration_isValid = false;
}

void OAIConditionalFormattingCustomIconCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalFormattingCustomIconCondition::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_icon_options_isValid = ::OpenAPI::fromJsonValue(m_icon_options, json[QString("IconOptions")]);
    m_icon_options_isSet = !json[QString("IconOptions")].isNull() && m_icon_options_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_display_configuration_isValid = ::OpenAPI::fromJsonValue(m_display_configuration, json[QString("DisplayConfiguration")]);
    m_display_configuration_isSet = !json[QString("DisplayConfiguration")].isNull() && m_display_configuration_isValid;
}

QString OAIConditionalFormattingCustomIconCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalFormattingCustomIconCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_icon_options.isSet()) {
        obj.insert(QString("IconOptions"), ::OpenAPI::toJsonValue(m_icon_options));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_display_configuration.isSet()) {
        obj.insert(QString("DisplayConfiguration"), ::OpenAPI::toJsonValue(m_display_configuration));
    }
    return obj;
}

QString OAIConditionalFormattingCustomIconCondition::getExpression() const {
    return m_expression;
}
void OAIConditionalFormattingCustomIconCondition::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIConditionalFormattingCustomIconCondition::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIConditionalFormattingCustomIconCondition::is_expression_Valid() const{
    return m_expression_isValid;
}

OAIConditionalFormattingCustomIconCondition_IconOptions OAIConditionalFormattingCustomIconCondition::getIconOptions() const {
    return m_icon_options;
}
void OAIConditionalFormattingCustomIconCondition::setIconOptions(const OAIConditionalFormattingCustomIconCondition_IconOptions &icon_options) {
    m_icon_options = icon_options;
    m_icon_options_isSet = true;
}

bool OAIConditionalFormattingCustomIconCondition::is_icon_options_Set() const{
    return m_icon_options_isSet;
}

bool OAIConditionalFormattingCustomIconCondition::is_icon_options_Valid() const{
    return m_icon_options_isValid;
}

QString OAIConditionalFormattingCustomIconCondition::getColor() const {
    return m_color;
}
void OAIConditionalFormattingCustomIconCondition::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIConditionalFormattingCustomIconCondition::is_color_Set() const{
    return m_color_isSet;
}

bool OAIConditionalFormattingCustomIconCondition::is_color_Valid() const{
    return m_color_isValid;
}

OAIConditionalFormattingCustomIconCondition_DisplayConfiguration OAIConditionalFormattingCustomIconCondition::getDisplayConfiguration() const {
    return m_display_configuration;
}
void OAIConditionalFormattingCustomIconCondition::setDisplayConfiguration(const OAIConditionalFormattingCustomIconCondition_DisplayConfiguration &display_configuration) {
    m_display_configuration = display_configuration;
    m_display_configuration_isSet = true;
}

bool OAIConditionalFormattingCustomIconCondition::is_display_configuration_Set() const{
    return m_display_configuration_isSet;
}

bool OAIConditionalFormattingCustomIconCondition::is_display_configuration_Valid() const{
    return m_display_configuration_isValid;
}

bool OAIConditionalFormattingCustomIconCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalFormattingCustomIconCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && m_icon_options_isValid && true;
}

} // namespace OpenAPI
