/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSet_RowLevelPermissionDataSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSet_RowLevelPermissionDataSet::OAIDataSet_RowLevelPermissionDataSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSet_RowLevelPermissionDataSet::OAIDataSet_RowLevelPermissionDataSet() {
    this->initializeModel();
}

OAIDataSet_RowLevelPermissionDataSet::~OAIDataSet_RowLevelPermissionDataSet() {}

void OAIDataSet_RowLevelPermissionDataSet::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_permission_policy_isSet = false;
    m_permission_policy_isValid = false;

    m_format_version_isSet = false;
    m_format_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDataSet_RowLevelPermissionDataSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSet_RowLevelPermissionDataSet::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_permission_policy_isValid = ::OpenAPI::fromJsonValue(m_permission_policy, json[QString("PermissionPolicy")]);
    m_permission_policy_isSet = !json[QString("PermissionPolicy")].isNull() && m_permission_policy_isValid;

    m_format_version_isValid = ::OpenAPI::fromJsonValue(m_format_version, json[QString("FormatVersion")]);
    m_format_version_isSet = !json[QString("FormatVersion")].isNull() && m_format_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDataSet_RowLevelPermissionDataSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSet_RowLevelPermissionDataSet::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_permission_policy.isSet()) {
        obj.insert(QString("PermissionPolicy"), ::OpenAPI::toJsonValue(m_permission_policy));
    }
    if (m_format_version.isSet()) {
        obj.insert(QString("FormatVersion"), ::OpenAPI::toJsonValue(m_format_version));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDataSet_RowLevelPermissionDataSet::getRNamespace() const {
    return m_r_namespace;
}
void OAIDataSet_RowLevelPermissionDataSet::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIDataSet_RowLevelPermissionDataSet::getArn() const {
    return m_arn;
}
void OAIDataSet_RowLevelPermissionDataSet::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIRowLevelPermissionPolicy OAIDataSet_RowLevelPermissionDataSet::getPermissionPolicy() const {
    return m_permission_policy;
}
void OAIDataSet_RowLevelPermissionDataSet::setPermissionPolicy(const OAIRowLevelPermissionPolicy &permission_policy) {
    m_permission_policy = permission_policy;
    m_permission_policy_isSet = true;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_permission_policy_Set() const{
    return m_permission_policy_isSet;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_permission_policy_Valid() const{
    return m_permission_policy_isValid;
}

OAIRowLevelPermissionFormatVersion OAIDataSet_RowLevelPermissionDataSet::getFormatVersion() const {
    return m_format_version;
}
void OAIDataSet_RowLevelPermissionDataSet::setFormatVersion(const OAIRowLevelPermissionFormatVersion &format_version) {
    m_format_version = format_version;
    m_format_version_isSet = true;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_format_version_Set() const{
    return m_format_version_isSet;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_format_version_Valid() const{
    return m_format_version_isValid;
}

OAIStatus OAIDataSet_RowLevelPermissionDataSet::getStatus() const {
    return m_status;
}
void OAIDataSet_RowLevelPermissionDataSet::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataSet_RowLevelPermissionDataSet::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDataSet_RowLevelPermissionDataSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSet_RowLevelPermissionDataSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_permission_policy_isValid && true;
}

} // namespace OpenAPI
