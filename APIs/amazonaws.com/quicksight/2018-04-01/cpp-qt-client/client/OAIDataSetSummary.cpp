/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetSummary::OAIDataSetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetSummary::OAIDataSetSummary() {
    this->initializeModel();
}

OAIDataSetSummary::~OAIDataSetSummary() {}

void OAIDataSetSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_import_mode_isSet = false;
    m_import_mode_isValid = false;

    m_row_level_permission_data_set_isSet = false;
    m_row_level_permission_data_set_isValid = false;

    m_row_level_permission_tag_configuration_applied_isSet = false;
    m_row_level_permission_tag_configuration_applied_isValid = false;

    m_column_level_permission_rules_applied_isSet = false;
    m_column_level_permission_rules_applied_isValid = false;
}

void OAIDataSetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("DataSetId")]);
    m_data_set_id_isSet = !json[QString("DataSetId")].isNull() && m_data_set_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_import_mode_isValid = ::OpenAPI::fromJsonValue(m_import_mode, json[QString("ImportMode")]);
    m_import_mode_isSet = !json[QString("ImportMode")].isNull() && m_import_mode_isValid;

    m_row_level_permission_data_set_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_data_set, json[QString("RowLevelPermissionDataSet")]);
    m_row_level_permission_data_set_isSet = !json[QString("RowLevelPermissionDataSet")].isNull() && m_row_level_permission_data_set_isValid;

    m_row_level_permission_tag_configuration_applied_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_tag_configuration_applied, json[QString("RowLevelPermissionTagConfigurationApplied")]);
    m_row_level_permission_tag_configuration_applied_isSet = !json[QString("RowLevelPermissionTagConfigurationApplied")].isNull() && m_row_level_permission_tag_configuration_applied_isValid;

    m_column_level_permission_rules_applied_isValid = ::OpenAPI::fromJsonValue(m_column_level_permission_rules_applied, json[QString("ColumnLevelPermissionRulesApplied")]);
    m_column_level_permission_rules_applied_isSet = !json[QString("ColumnLevelPermissionRulesApplied")].isNull() && m_column_level_permission_rules_applied_isValid;
}

QString OAIDataSetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_data_set_id_isSet) {
        obj.insert(QString("DataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_import_mode.isSet()) {
        obj.insert(QString("ImportMode"), ::OpenAPI::toJsonValue(m_import_mode));
    }
    if (m_row_level_permission_data_set.isSet()) {
        obj.insert(QString("RowLevelPermissionDataSet"), ::OpenAPI::toJsonValue(m_row_level_permission_data_set));
    }
    if (m_row_level_permission_tag_configuration_applied_isSet) {
        obj.insert(QString("RowLevelPermissionTagConfigurationApplied"), ::OpenAPI::toJsonValue(m_row_level_permission_tag_configuration_applied));
    }
    if (m_column_level_permission_rules_applied_isSet) {
        obj.insert(QString("ColumnLevelPermissionRulesApplied"), ::OpenAPI::toJsonValue(m_column_level_permission_rules_applied));
    }
    return obj;
}

QString OAIDataSetSummary::getArn() const {
    return m_arn;
}
void OAIDataSetSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDataSetSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDataSetSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDataSetSummary::getDataSetId() const {
    return m_data_set_id;
}
void OAIDataSetSummary::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIDataSetSummary::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIDataSetSummary::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAIDataSetSummary::getName() const {
    return m_name;
}
void OAIDataSetSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSetSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSetSummary::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIDataSetSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIDataSetSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDataSetSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDataSetSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDataSetSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDataSetSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDataSetSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDataSetSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

OAIDataSetImportMode OAIDataSetSummary::getImportMode() const {
    return m_import_mode;
}
void OAIDataSetSummary::setImportMode(const OAIDataSetImportMode &import_mode) {
    m_import_mode = import_mode;
    m_import_mode_isSet = true;
}

bool OAIDataSetSummary::is_import_mode_Set() const{
    return m_import_mode_isSet;
}

bool OAIDataSetSummary::is_import_mode_Valid() const{
    return m_import_mode_isValid;
}

OAIDataSet_RowLevelPermissionDataSet OAIDataSetSummary::getRowLevelPermissionDataSet() const {
    return m_row_level_permission_data_set;
}
void OAIDataSetSummary::setRowLevelPermissionDataSet(const OAIDataSet_RowLevelPermissionDataSet &row_level_permission_data_set) {
    m_row_level_permission_data_set = row_level_permission_data_set;
    m_row_level_permission_data_set_isSet = true;
}

bool OAIDataSetSummary::is_row_level_permission_data_set_Set() const{
    return m_row_level_permission_data_set_isSet;
}

bool OAIDataSetSummary::is_row_level_permission_data_set_Valid() const{
    return m_row_level_permission_data_set_isValid;
}

bool OAIDataSetSummary::getRowLevelPermissionTagConfigurationApplied() const {
    return m_row_level_permission_tag_configuration_applied;
}
void OAIDataSetSummary::setRowLevelPermissionTagConfigurationApplied(const bool &row_level_permission_tag_configuration_applied) {
    m_row_level_permission_tag_configuration_applied = row_level_permission_tag_configuration_applied;
    m_row_level_permission_tag_configuration_applied_isSet = true;
}

bool OAIDataSetSummary::is_row_level_permission_tag_configuration_applied_Set() const{
    return m_row_level_permission_tag_configuration_applied_isSet;
}

bool OAIDataSetSummary::is_row_level_permission_tag_configuration_applied_Valid() const{
    return m_row_level_permission_tag_configuration_applied_isValid;
}

bool OAIDataSetSummary::getColumnLevelPermissionRulesApplied() const {
    return m_column_level_permission_rules_applied;
}
void OAIDataSetSummary::setColumnLevelPermissionRulesApplied(const bool &column_level_permission_rules_applied) {
    m_column_level_permission_rules_applied = column_level_permission_rules_applied;
    m_column_level_permission_rules_applied_isSet = true;
}

bool OAIDataSetSummary::is_column_level_permission_rules_applied_Set() const{
    return m_column_level_permission_rules_applied_isSet;
}

bool OAIDataSetSummary::is_column_level_permission_rules_applied_Valid() const{
    return m_column_level_permission_rules_applied_isValid;
}

bool OAIDataSetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_data_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_tag_configuration_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_level_permission_rules_applied_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
