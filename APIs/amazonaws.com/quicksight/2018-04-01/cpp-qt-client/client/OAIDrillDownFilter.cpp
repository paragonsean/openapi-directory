/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrillDownFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDrillDownFilter::OAIDrillDownFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDrillDownFilter::OAIDrillDownFilter() {
    this->initializeModel();
}

OAIDrillDownFilter::~OAIDrillDownFilter() {}

void OAIDrillDownFilter::initializeModel() {

    m_numeric_equality_filter_isSet = false;
    m_numeric_equality_filter_isValid = false;

    m_category_filter_isSet = false;
    m_category_filter_isValid = false;

    m_time_range_filter_isSet = false;
    m_time_range_filter_isValid = false;
}

void OAIDrillDownFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDrillDownFilter::fromJsonObject(QJsonObject json) {

    m_numeric_equality_filter_isValid = ::OpenAPI::fromJsonValue(m_numeric_equality_filter, json[QString("NumericEqualityFilter")]);
    m_numeric_equality_filter_isSet = !json[QString("NumericEqualityFilter")].isNull() && m_numeric_equality_filter_isValid;

    m_category_filter_isValid = ::OpenAPI::fromJsonValue(m_category_filter, json[QString("CategoryFilter")]);
    m_category_filter_isSet = !json[QString("CategoryFilter")].isNull() && m_category_filter_isValid;

    m_time_range_filter_isValid = ::OpenAPI::fromJsonValue(m_time_range_filter, json[QString("TimeRangeFilter")]);
    m_time_range_filter_isSet = !json[QString("TimeRangeFilter")].isNull() && m_time_range_filter_isValid;
}

QString OAIDrillDownFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDrillDownFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_numeric_equality_filter.isSet()) {
        obj.insert(QString("NumericEqualityFilter"), ::OpenAPI::toJsonValue(m_numeric_equality_filter));
    }
    if (m_category_filter.isSet()) {
        obj.insert(QString("CategoryFilter"), ::OpenAPI::toJsonValue(m_category_filter));
    }
    if (m_time_range_filter.isSet()) {
        obj.insert(QString("TimeRangeFilter"), ::OpenAPI::toJsonValue(m_time_range_filter));
    }
    return obj;
}

OAIDrillDownFilter_NumericEqualityFilter OAIDrillDownFilter::getNumericEqualityFilter() const {
    return m_numeric_equality_filter;
}
void OAIDrillDownFilter::setNumericEqualityFilter(const OAIDrillDownFilter_NumericEqualityFilter &numeric_equality_filter) {
    m_numeric_equality_filter = numeric_equality_filter;
    m_numeric_equality_filter_isSet = true;
}

bool OAIDrillDownFilter::is_numeric_equality_filter_Set() const{
    return m_numeric_equality_filter_isSet;
}

bool OAIDrillDownFilter::is_numeric_equality_filter_Valid() const{
    return m_numeric_equality_filter_isValid;
}

OAIDrillDownFilter_CategoryFilter OAIDrillDownFilter::getCategoryFilter() const {
    return m_category_filter;
}
void OAIDrillDownFilter::setCategoryFilter(const OAIDrillDownFilter_CategoryFilter &category_filter) {
    m_category_filter = category_filter;
    m_category_filter_isSet = true;
}

bool OAIDrillDownFilter::is_category_filter_Set() const{
    return m_category_filter_isSet;
}

bool OAIDrillDownFilter::is_category_filter_Valid() const{
    return m_category_filter_isValid;
}

OAIDrillDownFilter_TimeRangeFilter OAIDrillDownFilter::getTimeRangeFilter() const {
    return m_time_range_filter;
}
void OAIDrillDownFilter::setTimeRangeFilter(const OAIDrillDownFilter_TimeRangeFilter &time_range_filter) {
    m_time_range_filter = time_range_filter;
    m_time_range_filter_isSet = true;
}

bool OAIDrillDownFilter::is_time_range_filter_Set() const{
    return m_time_range_filter_isSet;
}

bool OAIDrillDownFilter::is_time_range_filter_Valid() const{
    return m_time_range_filter_isValid;
}

bool OAIDrillDownFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_numeric_equality_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDrillDownFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
