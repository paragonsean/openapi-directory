/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPivotTableConfiguration_TotalOptions.h
 *
 * 
 */

#ifndef OAIPivotTableConfiguration_TotalOptions_H
#define OAIPivotTableConfiguration_TotalOptions_H

#include <QJsonObject>

#include "OAIPivotTableTotalOptions_ColumnSubtotalOptions.h"
#include "OAIPivotTableTotalOptions_ColumnTotalOptions.h"
#include "OAIPivotTableTotalOptions_RowSubtotalOptions.h"
#include "OAIPivotTableTotalOptions_RowTotalOptions.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPivotTableTotalOptions_RowSubtotalOptions;
class OAIPivotTableTotalOptions_ColumnSubtotalOptions;
class OAIPivotTableTotalOptions_RowTotalOptions;
class OAIPivotTableTotalOptions_ColumnTotalOptions;

class OAIPivotTableConfiguration_TotalOptions : public OAIObject {
public:
    OAIPivotTableConfiguration_TotalOptions();
    OAIPivotTableConfiguration_TotalOptions(QString json);
    ~OAIPivotTableConfiguration_TotalOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPivotTableTotalOptions_RowSubtotalOptions getRowSubtotalOptions() const;
    void setRowSubtotalOptions(const OAIPivotTableTotalOptions_RowSubtotalOptions &row_subtotal_options);
    bool is_row_subtotal_options_Set() const;
    bool is_row_subtotal_options_Valid() const;

    OAIPivotTableTotalOptions_ColumnSubtotalOptions getColumnSubtotalOptions() const;
    void setColumnSubtotalOptions(const OAIPivotTableTotalOptions_ColumnSubtotalOptions &column_subtotal_options);
    bool is_column_subtotal_options_Set() const;
    bool is_column_subtotal_options_Valid() const;

    OAIPivotTableTotalOptions_RowTotalOptions getRowTotalOptions() const;
    void setRowTotalOptions(const OAIPivotTableTotalOptions_RowTotalOptions &row_total_options);
    bool is_row_total_options_Set() const;
    bool is_row_total_options_Valid() const;

    OAIPivotTableTotalOptions_ColumnTotalOptions getColumnTotalOptions() const;
    void setColumnTotalOptions(const OAIPivotTableTotalOptions_ColumnTotalOptions &column_total_options);
    bool is_column_total_options_Set() const;
    bool is_column_total_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPivotTableTotalOptions_RowSubtotalOptions m_row_subtotal_options;
    bool m_row_subtotal_options_isSet;
    bool m_row_subtotal_options_isValid;

    OAIPivotTableTotalOptions_ColumnSubtotalOptions m_column_subtotal_options;
    bool m_column_subtotal_options_isSet;
    bool m_column_subtotal_options_isValid;

    OAIPivotTableTotalOptions_RowTotalOptions m_row_total_options;
    bool m_row_total_options_isSet;
    bool m_row_total_options_isValid;

    OAIPivotTableTotalOptions_ColumnTotalOptions m_column_total_options;
    bool m_column_total_options_isSet;
    bool m_column_total_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPivotTableConfiguration_TotalOptions)

#endif // OAIPivotTableConfiguration_TotalOptions_H
