/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionField_DateDimensionField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionField_DateDimensionField::OAIDimensionField_DateDimensionField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionField_DateDimensionField::OAIDimensionField_DateDimensionField() {
    this->initializeModel();
}

OAIDimensionField_DateDimensionField::~OAIDimensionField_DateDimensionField() {}

void OAIDimensionField_DateDimensionField::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_date_granularity_isSet = false;
    m_date_granularity_isValid = false;

    m_hierarchy_id_isSet = false;
    m_hierarchy_id_isValid = false;

    m_format_configuration_isSet = false;
    m_format_configuration_isValid = false;
}

void OAIDimensionField_DateDimensionField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionField_DateDimensionField::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_date_granularity_isValid = ::OpenAPI::fromJsonValue(m_date_granularity, json[QString("DateGranularity")]);
    m_date_granularity_isSet = !json[QString("DateGranularity")].isNull() && m_date_granularity_isValid;

    m_hierarchy_id_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_id, json[QString("HierarchyId")]);
    m_hierarchy_id_isSet = !json[QString("HierarchyId")].isNull() && m_hierarchy_id_isValid;

    m_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_format_configuration, json[QString("FormatConfiguration")]);
    m_format_configuration_isSet = !json[QString("FormatConfiguration")].isNull() && m_format_configuration_isValid;
}

QString OAIDimensionField_DateDimensionField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionField_DateDimensionField::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_date_granularity.isSet()) {
        obj.insert(QString("DateGranularity"), ::OpenAPI::toJsonValue(m_date_granularity));
    }
    if (m_hierarchy_id_isSet) {
        obj.insert(QString("HierarchyId"), ::OpenAPI::toJsonValue(m_hierarchy_id));
    }
    if (m_format_configuration.isSet()) {
        obj.insert(QString("FormatConfiguration"), ::OpenAPI::toJsonValue(m_format_configuration));
    }
    return obj;
}

QString OAIDimensionField_DateDimensionField::getFieldId() const {
    return m_field_id;
}
void OAIDimensionField_DateDimensionField::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIDimensionField_DateDimensionField::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIDimensionField_DateDimensionField::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIDateDimensionField_Column OAIDimensionField_DateDimensionField::getColumn() const {
    return m_column;
}
void OAIDimensionField_DateDimensionField::setColumn(const OAIDateDimensionField_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIDimensionField_DateDimensionField::is_column_Set() const{
    return m_column_isSet;
}

bool OAIDimensionField_DateDimensionField::is_column_Valid() const{
    return m_column_isValid;
}

OAITimeGranularity OAIDimensionField_DateDimensionField::getDateGranularity() const {
    return m_date_granularity;
}
void OAIDimensionField_DateDimensionField::setDateGranularity(const OAITimeGranularity &date_granularity) {
    m_date_granularity = date_granularity;
    m_date_granularity_isSet = true;
}

bool OAIDimensionField_DateDimensionField::is_date_granularity_Set() const{
    return m_date_granularity_isSet;
}

bool OAIDimensionField_DateDimensionField::is_date_granularity_Valid() const{
    return m_date_granularity_isValid;
}

QString OAIDimensionField_DateDimensionField::getHierarchyId() const {
    return m_hierarchy_id;
}
void OAIDimensionField_DateDimensionField::setHierarchyId(const QString &hierarchy_id) {
    m_hierarchy_id = hierarchy_id;
    m_hierarchy_id_isSet = true;
}

bool OAIDimensionField_DateDimensionField::is_hierarchy_id_Set() const{
    return m_hierarchy_id_isSet;
}

bool OAIDimensionField_DateDimensionField::is_hierarchy_id_Valid() const{
    return m_hierarchy_id_isValid;
}

OAIDateDimensionField_FormatConfiguration OAIDimensionField_DateDimensionField::getFormatConfiguration() const {
    return m_format_configuration;
}
void OAIDimensionField_DateDimensionField::setFormatConfiguration(const OAIDateDimensionField_FormatConfiguration &format_configuration) {
    m_format_configuration = format_configuration;
    m_format_configuration_isSet = true;
}

bool OAIDimensionField_DateDimensionField::is_format_configuration_Set() const{
    return m_format_configuration_isSet;
}

bool OAIDimensionField_DateDimensionField::is_format_configuration_Valid() const{
    return m_format_configuration_isValid;
}

bool OAIDimensionField_DateDimensionField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionField_DateDimensionField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_column_isValid && true;
}

} // namespace OpenAPI
