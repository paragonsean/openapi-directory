/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComparisonConfiguration_ComparisonFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComparisonConfiguration_ComparisonFormat::OAIComparisonConfiguration_ComparisonFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComparisonConfiguration_ComparisonFormat::OAIComparisonConfiguration_ComparisonFormat() {
    this->initializeModel();
}

OAIComparisonConfiguration_ComparisonFormat::~OAIComparisonConfiguration_ComparisonFormat() {}

void OAIComparisonConfiguration_ComparisonFormat::initializeModel() {

    m_number_display_format_configuration_isSet = false;
    m_number_display_format_configuration_isValid = false;

    m_percentage_display_format_configuration_isSet = false;
    m_percentage_display_format_configuration_isValid = false;
}

void OAIComparisonConfiguration_ComparisonFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComparisonConfiguration_ComparisonFormat::fromJsonObject(QJsonObject json) {

    m_number_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_number_display_format_configuration, json[QString("NumberDisplayFormatConfiguration")]);
    m_number_display_format_configuration_isSet = !json[QString("NumberDisplayFormatConfiguration")].isNull() && m_number_display_format_configuration_isValid;

    m_percentage_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_percentage_display_format_configuration, json[QString("PercentageDisplayFormatConfiguration")]);
    m_percentage_display_format_configuration_isSet = !json[QString("PercentageDisplayFormatConfiguration")].isNull() && m_percentage_display_format_configuration_isValid;
}

QString OAIComparisonConfiguration_ComparisonFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComparisonConfiguration_ComparisonFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_number_display_format_configuration.isSet()) {
        obj.insert(QString("NumberDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_number_display_format_configuration));
    }
    if (m_percentage_display_format_configuration.isSet()) {
        obj.insert(QString("PercentageDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_percentage_display_format_configuration));
    }
    return obj;
}

OAIComparisonFormatConfiguration_NumberDisplayFormatConfiguration OAIComparisonConfiguration_ComparisonFormat::getNumberDisplayFormatConfiguration() const {
    return m_number_display_format_configuration;
}
void OAIComparisonConfiguration_ComparisonFormat::setNumberDisplayFormatConfiguration(const OAIComparisonFormatConfiguration_NumberDisplayFormatConfiguration &number_display_format_configuration) {
    m_number_display_format_configuration = number_display_format_configuration;
    m_number_display_format_configuration_isSet = true;
}

bool OAIComparisonConfiguration_ComparisonFormat::is_number_display_format_configuration_Set() const{
    return m_number_display_format_configuration_isSet;
}

bool OAIComparisonConfiguration_ComparisonFormat::is_number_display_format_configuration_Valid() const{
    return m_number_display_format_configuration_isValid;
}

OAIComparisonFormatConfiguration_PercentageDisplayFormatConfiguration OAIComparisonConfiguration_ComparisonFormat::getPercentageDisplayFormatConfiguration() const {
    return m_percentage_display_format_configuration;
}
void OAIComparisonConfiguration_ComparisonFormat::setPercentageDisplayFormatConfiguration(const OAIComparisonFormatConfiguration_PercentageDisplayFormatConfiguration &percentage_display_format_configuration) {
    m_percentage_display_format_configuration = percentage_display_format_configuration;
    m_percentage_display_format_configuration_isSet = true;
}

bool OAIComparisonConfiguration_ComparisonFormat::is_percentage_display_format_configuration_Set() const{
    return m_percentage_display_format_configuration_isSet;
}

bool OAIComparisonConfiguration_ComparisonFormat::is_percentage_display_format_configuration_Valid() const{
    return m_percentage_display_format_configuration_isValid;
}

bool OAIComparisonConfiguration_ComparisonFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComparisonConfiguration_ComparisonFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
