/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialMapAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialMapAggregatedFieldWells::OAIGeospatialMapAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialMapAggregatedFieldWells::OAIGeospatialMapAggregatedFieldWells() {
    this->initializeModel();
}

OAIGeospatialMapAggregatedFieldWells::~OAIGeospatialMapAggregatedFieldWells() {}

void OAIGeospatialMapAggregatedFieldWells::initializeModel() {

    m_geospatial_isSet = false;
    m_geospatial_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;
}

void OAIGeospatialMapAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialMapAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_geospatial_isValid = ::OpenAPI::fromJsonValue(m_geospatial, json[QString("Geospatial")]);
    m_geospatial_isSet = !json[QString("Geospatial")].isNull() && m_geospatial_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("Colors")]);
    m_colors_isSet = !json[QString("Colors")].isNull() && m_colors_isValid;
}

QString OAIGeospatialMapAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialMapAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_geospatial.isSet()) {
        obj.insert(QString("Geospatial"), ::OpenAPI::toJsonValue(m_geospatial));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_colors.isSet()) {
        obj.insert(QString("Colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    return obj;
}

QList OAIGeospatialMapAggregatedFieldWells::getGeospatial() const {
    return m_geospatial;
}
void OAIGeospatialMapAggregatedFieldWells::setGeospatial(const QList &geospatial) {
    m_geospatial = geospatial;
    m_geospatial_isSet = true;
}

bool OAIGeospatialMapAggregatedFieldWells::is_geospatial_Set() const{
    return m_geospatial_isSet;
}

bool OAIGeospatialMapAggregatedFieldWells::is_geospatial_Valid() const{
    return m_geospatial_isValid;
}

QList OAIGeospatialMapAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIGeospatialMapAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIGeospatialMapAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIGeospatialMapAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

QList OAIGeospatialMapAggregatedFieldWells::getColors() const {
    return m_colors;
}
void OAIGeospatialMapAggregatedFieldWells::setColors(const QList &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIGeospatialMapAggregatedFieldWells::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIGeospatialMapAggregatedFieldWells::is_colors_Valid() const{
    return m_colors_isValid;
}

bool OAIGeospatialMapAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geospatial.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialMapAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
