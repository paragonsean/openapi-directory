/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBinWidthOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBinWidthOptions::OAIBinWidthOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBinWidthOptions::OAIBinWidthOptions() {
    this->initializeModel();
}

OAIBinWidthOptions::~OAIBinWidthOptions() {}

void OAIBinWidthOptions::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_bin_count_limit_isSet = false;
    m_bin_count_limit_isValid = false;
}

void OAIBinWidthOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBinWidthOptions::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_bin_count_limit_isValid = ::OpenAPI::fromJsonValue(m_bin_count_limit, json[QString("BinCountLimit")]);
    m_bin_count_limit_isSet = !json[QString("BinCountLimit")].isNull() && m_bin_count_limit_isValid;
}

QString OAIBinWidthOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBinWidthOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_bin_count_limit_isSet) {
        obj.insert(QString("BinCountLimit"), ::OpenAPI::toJsonValue(m_bin_count_limit));
    }
    return obj;
}

double OAIBinWidthOptions::getValue() const {
    return m_value;
}
void OAIBinWidthOptions::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIBinWidthOptions::is_value_Set() const{
    return m_value_isSet;
}

bool OAIBinWidthOptions::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAIBinWidthOptions::getBinCountLimit() const {
    return m_bin_count_limit;
}
void OAIBinWidthOptions::setBinCountLimit(const qint32 &bin_count_limit) {
    m_bin_count_limit = bin_count_limit;
    m_bin_count_limit_isSet = true;
}

bool OAIBinWidthOptions::is_bin_count_limit_Set() const{
    return m_bin_count_limit_isSet;
}

bool OAIBinWidthOptions::is_bin_count_limit_Valid() const{
    return m_bin_count_limit_isValid;
}

bool OAIBinWidthOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_count_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBinWidthOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
