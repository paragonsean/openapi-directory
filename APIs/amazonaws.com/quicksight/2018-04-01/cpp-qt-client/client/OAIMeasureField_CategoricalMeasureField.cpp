/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasureField_CategoricalMeasureField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasureField_CategoricalMeasureField::OAIMeasureField_CategoricalMeasureField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasureField_CategoricalMeasureField::OAIMeasureField_CategoricalMeasureField() {
    this->initializeModel();
}

OAIMeasureField_CategoricalMeasureField::~OAIMeasureField_CategoricalMeasureField() {}

void OAIMeasureField_CategoricalMeasureField::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;

    m_format_configuration_isSet = false;
    m_format_configuration_isValid = false;
}

void OAIMeasureField_CategoricalMeasureField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeasureField_CategoricalMeasureField::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("AggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("AggregationFunction")].isNull() && m_aggregation_function_isValid;

    m_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_format_configuration, json[QString("FormatConfiguration")]);
    m_format_configuration_isSet = !json[QString("FormatConfiguration")].isNull() && m_format_configuration_isValid;
}

QString OAIMeasureField_CategoricalMeasureField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeasureField_CategoricalMeasureField::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_aggregation_function.isSet()) {
        obj.insert(QString("AggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    if (m_format_configuration.isSet()) {
        obj.insert(QString("FormatConfiguration"), ::OpenAPI::toJsonValue(m_format_configuration));
    }
    return obj;
}

QString OAIMeasureField_CategoricalMeasureField::getFieldId() const {
    return m_field_id;
}
void OAIMeasureField_CategoricalMeasureField::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIMeasureField_CategoricalMeasureField::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIMeasureField_CategoricalMeasureField::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAICategoricalMeasureField_Column OAIMeasureField_CategoricalMeasureField::getColumn() const {
    return m_column;
}
void OAIMeasureField_CategoricalMeasureField::setColumn(const OAICategoricalMeasureField_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIMeasureField_CategoricalMeasureField::is_column_Set() const{
    return m_column_isSet;
}

bool OAIMeasureField_CategoricalMeasureField::is_column_Valid() const{
    return m_column_isValid;
}

OAICategoricalAggregationFunction OAIMeasureField_CategoricalMeasureField::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAIMeasureField_CategoricalMeasureField::setAggregationFunction(const OAICategoricalAggregationFunction &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAIMeasureField_CategoricalMeasureField::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAIMeasureField_CategoricalMeasureField::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

OAICategoricalDimensionField_FormatConfiguration OAIMeasureField_CategoricalMeasureField::getFormatConfiguration() const {
    return m_format_configuration;
}
void OAIMeasureField_CategoricalMeasureField::setFormatConfiguration(const OAICategoricalDimensionField_FormatConfiguration &format_configuration) {
    m_format_configuration = format_configuration;
    m_format_configuration_isSet = true;
}

bool OAIMeasureField_CategoricalMeasureField::is_format_configuration_Set() const{
    return m_format_configuration_isSet;
}

bool OAIMeasureField_CategoricalMeasureField::is_format_configuration_Valid() const{
    return m_format_configuration_isValid;
}

bool OAIMeasureField_CategoricalMeasureField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeasureField_CategoricalMeasureField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_column_isValid && true;
}

} // namespace OpenAPI
