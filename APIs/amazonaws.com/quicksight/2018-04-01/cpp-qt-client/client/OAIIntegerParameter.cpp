/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegerParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegerParameter::OAIIntegerParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegerParameter::OAIIntegerParameter() {
    this->initializeModel();
}

OAIIntegerParameter::~OAIIntegerParameter() {}

void OAIIntegerParameter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIIntegerParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegerParameter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIIntegerParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegerParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIIntegerParameter::getName() const {
    return m_name;
}
void OAIIntegerParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIntegerParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIntegerParameter::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIIntegerParameter::getValues() const {
    return m_values;
}
void OAIIntegerParameter::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIIntegerParameter::is_values_Set() const{
    return m_values_isSet;
}

bool OAIIntegerParameter::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIIntegerParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegerParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
