/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobSummary::OAIAssetBundleImportJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobSummary::OAIAssetBundleImportJobSummary() {
    this->initializeModel();
}

OAIAssetBundleImportJobSummary::~OAIAssetBundleImportJobSummary() {}

void OAIAssetBundleImportJobSummary::initializeModel() {

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_asset_bundle_import_job_id_isSet = false;
    m_asset_bundle_import_job_id_isValid = false;

    m_failure_action_isSet = false;
    m_failure_action_isValid = false;
}

void OAIAssetBundleImportJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportJobSummary::fromJsonObject(QJsonObject json) {

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_asset_bundle_import_job_id_isValid = ::OpenAPI::fromJsonValue(m_asset_bundle_import_job_id, json[QString("AssetBundleImportJobId")]);
    m_asset_bundle_import_job_id_isSet = !json[QString("AssetBundleImportJobId")].isNull() && m_asset_bundle_import_job_id_isValid;

    m_failure_action_isValid = ::OpenAPI::fromJsonValue(m_failure_action, json[QString("FailureAction")]);
    m_failure_action_isSet = !json[QString("FailureAction")].isNull() && m_failure_action_isValid;
}

QString OAIAssetBundleImportJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_asset_bundle_import_job_id_isSet) {
        obj.insert(QString("AssetBundleImportJobId"), ::OpenAPI::toJsonValue(m_asset_bundle_import_job_id));
    }
    if (m_failure_action.isSet()) {
        obj.insert(QString("FailureAction"), ::OpenAPI::toJsonValue(m_failure_action));
    }
    return obj;
}

OAIAssetBundleImportJobStatus OAIAssetBundleImportJobSummary::getJobStatus() const {
    return m_job_status;
}
void OAIAssetBundleImportJobSummary::setJobStatus(const OAIAssetBundleImportJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIAssetBundleImportJobSummary::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIAssetBundleImportJobSummary::is_job_status_Valid() const{
    return m_job_status_isValid;
}

QString OAIAssetBundleImportJobSummary::getArn() const {
    return m_arn;
}
void OAIAssetBundleImportJobSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAssetBundleImportJobSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAssetBundleImportJobSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIAssetBundleImportJobSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIAssetBundleImportJobSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIAssetBundleImportJobSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAssetBundleImportJobSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIAssetBundleImportJobSummary::getAssetBundleImportJobId() const {
    return m_asset_bundle_import_job_id;
}
void OAIAssetBundleImportJobSummary::setAssetBundleImportJobId(const QString &asset_bundle_import_job_id) {
    m_asset_bundle_import_job_id = asset_bundle_import_job_id;
    m_asset_bundle_import_job_id_isSet = true;
}

bool OAIAssetBundleImportJobSummary::is_asset_bundle_import_job_id_Set() const{
    return m_asset_bundle_import_job_id_isSet;
}

bool OAIAssetBundleImportJobSummary::is_asset_bundle_import_job_id_Valid() const{
    return m_asset_bundle_import_job_id_isValid;
}

OAIAssetBundleImportFailureAction OAIAssetBundleImportJobSummary::getFailureAction() const {
    return m_failure_action;
}
void OAIAssetBundleImportJobSummary::setFailureAction(const OAIAssetBundleImportFailureAction &failure_action) {
    m_failure_action = failure_action;
    m_failure_action_isSet = true;
}

bool OAIAssetBundleImportJobSummary::is_failure_action_Set() const{
    return m_failure_action_isSet;
}

bool OAIAssetBundleImportJobSummary::is_failure_action_Valid() const{
    return m_failure_action_isValid;
}

bool OAIAssetBundleImportJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_bundle_import_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
