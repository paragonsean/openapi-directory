/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutDataSetRefreshProperties_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutDataSetRefreshProperties_request::OAIPutDataSetRefreshProperties_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutDataSetRefreshProperties_request::OAIPutDataSetRefreshProperties_request() {
    this->initializeModel();
}

OAIPutDataSetRefreshProperties_request::~OAIPutDataSetRefreshProperties_request() {}

void OAIPutDataSetRefreshProperties_request::initializeModel() {

    m_data_set_refresh_properties_isSet = false;
    m_data_set_refresh_properties_isValid = false;
}

void OAIPutDataSetRefreshProperties_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutDataSetRefreshProperties_request::fromJsonObject(QJsonObject json) {

    m_data_set_refresh_properties_isValid = ::OpenAPI::fromJsonValue(m_data_set_refresh_properties, json[QString("DataSetRefreshProperties")]);
    m_data_set_refresh_properties_isSet = !json[QString("DataSetRefreshProperties")].isNull() && m_data_set_refresh_properties_isValid;
}

QString OAIPutDataSetRefreshProperties_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutDataSetRefreshProperties_request::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_refresh_properties.isSet()) {
        obj.insert(QString("DataSetRefreshProperties"), ::OpenAPI::toJsonValue(m_data_set_refresh_properties));
    }
    return obj;
}

OAIPutDataSetRefreshProperties_request_DataSetRefreshProperties OAIPutDataSetRefreshProperties_request::getDataSetRefreshProperties() const {
    return m_data_set_refresh_properties;
}
void OAIPutDataSetRefreshProperties_request::setDataSetRefreshProperties(const OAIPutDataSetRefreshProperties_request_DataSetRefreshProperties &data_set_refresh_properties) {
    m_data_set_refresh_properties = data_set_refresh_properties;
    m_data_set_refresh_properties_isSet = true;
}

bool OAIPutDataSetRefreshProperties_request::is_data_set_refresh_properties_Set() const{
    return m_data_set_refresh_properties_isSet;
}

bool OAIPutDataSetRefreshProperties_request::is_data_set_refresh_properties_Valid() const{
    return m_data_set_refresh_properties_isValid;
}

bool OAIPutDataSetRefreshProperties_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_refresh_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutDataSetRefreshProperties_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_refresh_properties_isValid && true;
}

} // namespace OpenAPI
