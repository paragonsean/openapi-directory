/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunnelChartVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunnelChartVisual_ChartConfiguration::OAIFunnelChartVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunnelChartVisual_ChartConfiguration::OAIFunnelChartVisual_ChartConfiguration() {
    this->initializeModel();
}

OAIFunnelChartVisual_ChartConfiguration::~OAIFunnelChartVisual_ChartConfiguration() {}

void OAIFunnelChartVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_category_label_options_isSet = false;
    m_category_label_options_isValid = false;

    m_value_label_options_isSet = false;
    m_value_label_options_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_data_label_options_isSet = false;
    m_data_label_options_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAIFunnelChartVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunnelChartVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_category_label_options_isValid = ::OpenAPI::fromJsonValue(m_category_label_options, json[QString("CategoryLabelOptions")]);
    m_category_label_options_isSet = !json[QString("CategoryLabelOptions")].isNull() && m_category_label_options_isValid;

    m_value_label_options_isValid = ::OpenAPI::fromJsonValue(m_value_label_options, json[QString("ValueLabelOptions")]);
    m_value_label_options_isSet = !json[QString("ValueLabelOptions")].isNull() && m_value_label_options_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_data_label_options_isValid = ::OpenAPI::fromJsonValue(m_data_label_options, json[QString("DataLabelOptions")]);
    m_data_label_options_isSet = !json[QString("DataLabelOptions")].isNull() && m_data_label_options_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAIFunnelChartVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunnelChartVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_category_label_options.isSet()) {
        obj.insert(QString("CategoryLabelOptions"), ::OpenAPI::toJsonValue(m_category_label_options));
    }
    if (m_value_label_options.isSet()) {
        obj.insert(QString("ValueLabelOptions"), ::OpenAPI::toJsonValue(m_value_label_options));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_data_label_options.isSet()) {
        obj.insert(QString("DataLabelOptions"), ::OpenAPI::toJsonValue(m_data_label_options));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAIFunnelChartConfiguration_FieldWells OAIFunnelChartVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIFunnelChartVisual_ChartConfiguration::setFieldWells(const OAIFunnelChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIFunnelChartConfiguration_SortConfiguration OAIFunnelChartVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIFunnelChartVisual_ChartConfiguration::setSortConfiguration(const OAIFunnelChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIFunnelChartConfiguration_CategoryLabelOptions OAIFunnelChartVisual_ChartConfiguration::getCategoryLabelOptions() const {
    return m_category_label_options;
}
void OAIFunnelChartVisual_ChartConfiguration::setCategoryLabelOptions(const OAIFunnelChartConfiguration_CategoryLabelOptions &category_label_options) {
    m_category_label_options = category_label_options;
    m_category_label_options_isSet = true;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_category_label_options_Set() const{
    return m_category_label_options_isSet;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_category_label_options_Valid() const{
    return m_category_label_options_isValid;
}

OAIFunnelChartConfiguration_ValueLabelOptions OAIFunnelChartVisual_ChartConfiguration::getValueLabelOptions() const {
    return m_value_label_options;
}
void OAIFunnelChartVisual_ChartConfiguration::setValueLabelOptions(const OAIFunnelChartConfiguration_ValueLabelOptions &value_label_options) {
    m_value_label_options = value_label_options;
    m_value_label_options_isSet = true;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_value_label_options_Set() const{
    return m_value_label_options_isSet;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_value_label_options_Valid() const{
    return m_value_label_options_isValid;
}

OAIFunnelChartConfiguration_Tooltip OAIFunnelChartVisual_ChartConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIFunnelChartVisual_ChartConfiguration::setTooltip(const OAIFunnelChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

OAIFunnelChartConfiguration_DataLabelOptions OAIFunnelChartVisual_ChartConfiguration::getDataLabelOptions() const {
    return m_data_label_options;
}
void OAIFunnelChartVisual_ChartConfiguration::setDataLabelOptions(const OAIFunnelChartConfiguration_DataLabelOptions &data_label_options) {
    m_data_label_options = data_label_options;
    m_data_label_options_isSet = true;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_data_label_options_Set() const{
    return m_data_label_options_isSet;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_data_label_options_Valid() const{
    return m_data_label_options_isValid;
}

OAIFunnelChartConfiguration_VisualPalette OAIFunnelChartVisual_ChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIFunnelChartVisual_ChartConfiguration::setVisualPalette(const OAIFunnelChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIFunnelChartVisual_ChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAIFunnelChartVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunnelChartVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
