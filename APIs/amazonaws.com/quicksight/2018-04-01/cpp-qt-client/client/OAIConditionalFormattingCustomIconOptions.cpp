/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingCustomIconOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingCustomIconOptions::OAIConditionalFormattingCustomIconOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingCustomIconOptions::OAIConditionalFormattingCustomIconOptions() {
    this->initializeModel();
}

OAIConditionalFormattingCustomIconOptions::~OAIConditionalFormattingCustomIconOptions() {}

void OAIConditionalFormattingCustomIconOptions::initializeModel() {

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_unicode_icon_isSet = false;
    m_unicode_icon_isValid = false;
}

void OAIConditionalFormattingCustomIconOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalFormattingCustomIconOptions::fromJsonObject(QJsonObject json) {

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("Icon")]);
    m_icon_isSet = !json[QString("Icon")].isNull() && m_icon_isValid;

    m_unicode_icon_isValid = ::OpenAPI::fromJsonValue(m_unicode_icon, json[QString("UnicodeIcon")]);
    m_unicode_icon_isSet = !json[QString("UnicodeIcon")].isNull() && m_unicode_icon_isValid;
}

QString OAIConditionalFormattingCustomIconOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalFormattingCustomIconOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_icon.isSet()) {
        obj.insert(QString("Icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_unicode_icon_isSet) {
        obj.insert(QString("UnicodeIcon"), ::OpenAPI::toJsonValue(m_unicode_icon));
    }
    return obj;
}

OAIIcon OAIConditionalFormattingCustomIconOptions::getIcon() const {
    return m_icon;
}
void OAIConditionalFormattingCustomIconOptions::setIcon(const OAIIcon &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIConditionalFormattingCustomIconOptions::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIConditionalFormattingCustomIconOptions::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIConditionalFormattingCustomIconOptions::getUnicodeIcon() const {
    return m_unicode_icon;
}
void OAIConditionalFormattingCustomIconOptions::setUnicodeIcon(const QString &unicode_icon) {
    m_unicode_icon = unicode_icon;
    m_unicode_icon_isSet = true;
}

bool OAIConditionalFormattingCustomIconOptions::is_unicode_icon_Set() const{
    return m_unicode_icon_isSet;
}

bool OAIConditionalFormattingCustomIconOptions::is_unicode_icon_Valid() const{
    return m_unicode_icon_isValid;
}

bool OAIConditionalFormattingCustomIconOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unicode_icon_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalFormattingCustomIconOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
