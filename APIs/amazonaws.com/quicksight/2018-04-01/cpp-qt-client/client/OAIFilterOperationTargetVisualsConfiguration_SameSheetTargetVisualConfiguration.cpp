/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration() {
    this->initializeModel();
}

OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::~OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration() {}

void OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::initializeModel() {

    m_target_visuals_isSet = false;
    m_target_visuals_isValid = false;

    m_target_visual_options_isSet = false;
    m_target_visual_options_isValid = false;
}

void OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::fromJsonObject(QJsonObject json) {

    m_target_visuals_isValid = ::OpenAPI::fromJsonValue(m_target_visuals, json[QString("TargetVisuals")]);
    m_target_visuals_isSet = !json[QString("TargetVisuals")].isNull() && m_target_visuals_isValid;

    m_target_visual_options_isValid = ::OpenAPI::fromJsonValue(m_target_visual_options, json[QString("TargetVisualOptions")]);
    m_target_visual_options_isSet = !json[QString("TargetVisualOptions")].isNull() && m_target_visual_options_isValid;
}

QString OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_target_visuals.isSet()) {
        obj.insert(QString("TargetVisuals"), ::OpenAPI::toJsonValue(m_target_visuals));
    }
    if (m_target_visual_options.isSet()) {
        obj.insert(QString("TargetVisualOptions"), ::OpenAPI::toJsonValue(m_target_visual_options));
    }
    return obj;
}

QList OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::getTargetVisuals() const {
    return m_target_visuals;
}
void OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::setTargetVisuals(const QList &target_visuals) {
    m_target_visuals = target_visuals;
    m_target_visuals_isSet = true;
}

bool OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::is_target_visuals_Set() const{
    return m_target_visuals_isSet;
}

bool OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::is_target_visuals_Valid() const{
    return m_target_visuals_isValid;
}

OAITargetVisualOptions OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::getTargetVisualOptions() const {
    return m_target_visual_options;
}
void OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::setTargetVisualOptions(const OAITargetVisualOptions &target_visual_options) {
    m_target_visual_options = target_visual_options;
    m_target_visual_options_isSet = true;
}

bool OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::is_target_visual_options_Set() const{
    return m_target_visual_options_isSet;
}

bool OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::is_target_visual_options_Valid() const{
    return m_target_visual_options_isValid;
}

bool OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_visuals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_visual_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterOperationTargetVisualsConfiguration_SameSheetTargetVisualConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
