/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateEmbedUrlForRegisteredUser_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateEmbedUrlForRegisteredUser_request::OAIGenerateEmbedUrlForRegisteredUser_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateEmbedUrlForRegisteredUser_request::OAIGenerateEmbedUrlForRegisteredUser_request() {
    this->initializeModel();
}

OAIGenerateEmbedUrlForRegisteredUser_request::~OAIGenerateEmbedUrlForRegisteredUser_request() {}

void OAIGenerateEmbedUrlForRegisteredUser_request::initializeModel() {

    m_session_lifetime_in_minutes_isSet = false;
    m_session_lifetime_in_minutes_isValid = false;

    m_user_arn_isSet = false;
    m_user_arn_isValid = false;

    m_experience_configuration_isSet = false;
    m_experience_configuration_isValid = false;

    m_allowed_domains_isSet = false;
    m_allowed_domains_isValid = false;
}

void OAIGenerateEmbedUrlForRegisteredUser_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateEmbedUrlForRegisteredUser_request::fromJsonObject(QJsonObject json) {

    m_session_lifetime_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_session_lifetime_in_minutes, json[QString("SessionLifetimeInMinutes")]);
    m_session_lifetime_in_minutes_isSet = !json[QString("SessionLifetimeInMinutes")].isNull() && m_session_lifetime_in_minutes_isValid;

    m_user_arn_isValid = ::OpenAPI::fromJsonValue(m_user_arn, json[QString("UserArn")]);
    m_user_arn_isSet = !json[QString("UserArn")].isNull() && m_user_arn_isValid;

    m_experience_configuration_isValid = ::OpenAPI::fromJsonValue(m_experience_configuration, json[QString("ExperienceConfiguration")]);
    m_experience_configuration_isSet = !json[QString("ExperienceConfiguration")].isNull() && m_experience_configuration_isValid;

    m_allowed_domains_isValid = ::OpenAPI::fromJsonValue(m_allowed_domains, json[QString("AllowedDomains")]);
    m_allowed_domains_isSet = !json[QString("AllowedDomains")].isNull() && m_allowed_domains_isValid;
}

QString OAIGenerateEmbedUrlForRegisteredUser_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateEmbedUrlForRegisteredUser_request::asJsonObject() const {
    QJsonObject obj;
    if (m_session_lifetime_in_minutes_isSet) {
        obj.insert(QString("SessionLifetimeInMinutes"), ::OpenAPI::toJsonValue(m_session_lifetime_in_minutes));
    }
    if (m_user_arn_isSet) {
        obj.insert(QString("UserArn"), ::OpenAPI::toJsonValue(m_user_arn));
    }
    if (m_experience_configuration.isSet()) {
        obj.insert(QString("ExperienceConfiguration"), ::OpenAPI::toJsonValue(m_experience_configuration));
    }
    if (m_allowed_domains.size() > 0) {
        obj.insert(QString("AllowedDomains"), ::OpenAPI::toJsonValue(m_allowed_domains));
    }
    return obj;
}

qint32 OAIGenerateEmbedUrlForRegisteredUser_request::getSessionLifetimeInMinutes() const {
    return m_session_lifetime_in_minutes;
}
void OAIGenerateEmbedUrlForRegisteredUser_request::setSessionLifetimeInMinutes(const qint32 &session_lifetime_in_minutes) {
    m_session_lifetime_in_minutes = session_lifetime_in_minutes;
    m_session_lifetime_in_minutes_isSet = true;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::is_session_lifetime_in_minutes_Set() const{
    return m_session_lifetime_in_minutes_isSet;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::is_session_lifetime_in_minutes_Valid() const{
    return m_session_lifetime_in_minutes_isValid;
}

QString OAIGenerateEmbedUrlForRegisteredUser_request::getUserArn() const {
    return m_user_arn;
}
void OAIGenerateEmbedUrlForRegisteredUser_request::setUserArn(const QString &user_arn) {
    m_user_arn = user_arn;
    m_user_arn_isSet = true;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::is_user_arn_Set() const{
    return m_user_arn_isSet;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::is_user_arn_Valid() const{
    return m_user_arn_isValid;
}

OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration OAIGenerateEmbedUrlForRegisteredUser_request::getExperienceConfiguration() const {
    return m_experience_configuration;
}
void OAIGenerateEmbedUrlForRegisteredUser_request::setExperienceConfiguration(const OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration &experience_configuration) {
    m_experience_configuration = experience_configuration;
    m_experience_configuration_isSet = true;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::is_experience_configuration_Set() const{
    return m_experience_configuration_isSet;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::is_experience_configuration_Valid() const{
    return m_experience_configuration_isValid;
}

QList<QString> OAIGenerateEmbedUrlForRegisteredUser_request::getAllowedDomains() const {
    return m_allowed_domains;
}
void OAIGenerateEmbedUrlForRegisteredUser_request::setAllowedDomains(const QList<QString> &allowed_domains) {
    m_allowed_domains = allowed_domains;
    m_allowed_domains_isSet = true;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::is_allowed_domains_Set() const{
    return m_allowed_domains_isSet;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::is_allowed_domains_Valid() const{
    return m_allowed_domains_isValid;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_lifetime_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateEmbedUrlForRegisteredUser_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_arn_isValid && m_experience_configuration_isValid && true;
}

} // namespace OpenAPI
