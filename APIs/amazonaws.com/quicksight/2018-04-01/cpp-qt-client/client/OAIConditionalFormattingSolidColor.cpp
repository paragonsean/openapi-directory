/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingSolidColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingSolidColor::OAIConditionalFormattingSolidColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingSolidColor::OAIConditionalFormattingSolidColor() {
    this->initializeModel();
}

OAIConditionalFormattingSolidColor::~OAIConditionalFormattingSolidColor() {}

void OAIConditionalFormattingSolidColor::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;
}

void OAIConditionalFormattingSolidColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalFormattingSolidColor::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;
}

QString OAIConditionalFormattingSolidColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalFormattingSolidColor::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    return obj;
}

QString OAIConditionalFormattingSolidColor::getExpression() const {
    return m_expression;
}
void OAIConditionalFormattingSolidColor::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIConditionalFormattingSolidColor::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIConditionalFormattingSolidColor::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIConditionalFormattingSolidColor::getColor() const {
    return m_color;
}
void OAIConditionalFormattingSolidColor::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIConditionalFormattingSolidColor::is_color_Set() const{
    return m_color_isSet;
}

bool OAIConditionalFormattingSolidColor::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIConditionalFormattingSolidColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalFormattingSolidColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && true;
}

} // namespace OpenAPI
