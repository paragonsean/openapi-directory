/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKPIConditionalFormattingOption_ProgressBar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKPIConditionalFormattingOption_ProgressBar::OAIKPIConditionalFormattingOption_ProgressBar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKPIConditionalFormattingOption_ProgressBar::OAIKPIConditionalFormattingOption_ProgressBar() {
    this->initializeModel();
}

OAIKPIConditionalFormattingOption_ProgressBar::~OAIKPIConditionalFormattingOption_ProgressBar() {}

void OAIKPIConditionalFormattingOption_ProgressBar::initializeModel() {

    m_foreground_color_isSet = false;
    m_foreground_color_isValid = false;
}

void OAIKPIConditionalFormattingOption_ProgressBar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKPIConditionalFormattingOption_ProgressBar::fromJsonObject(QJsonObject json) {

    m_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_foreground_color, json[QString("ForegroundColor")]);
    m_foreground_color_isSet = !json[QString("ForegroundColor")].isNull() && m_foreground_color_isValid;
}

QString OAIKPIConditionalFormattingOption_ProgressBar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKPIConditionalFormattingOption_ProgressBar::asJsonObject() const {
    QJsonObject obj;
    if (m_foreground_color.isSet()) {
        obj.insert(QString("ForegroundColor"), ::OpenAPI::toJsonValue(m_foreground_color));
    }
    return obj;
}

OAIKPIProgressBarConditionalFormatting_ForegroundColor OAIKPIConditionalFormattingOption_ProgressBar::getForegroundColor() const {
    return m_foreground_color;
}
void OAIKPIConditionalFormattingOption_ProgressBar::setForegroundColor(const OAIKPIProgressBarConditionalFormatting_ForegroundColor &foreground_color) {
    m_foreground_color = foreground_color;
    m_foreground_color_isSet = true;
}

bool OAIKPIConditionalFormattingOption_ProgressBar::is_foreground_color_Set() const{
    return m_foreground_color_isSet;
}

bool OAIKPIConditionalFormattingOption_ProgressBar::is_foreground_color_Valid() const{
    return m_foreground_color_isValid;
}

bool OAIKPIConditionalFormattingOption_ProgressBar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_foreground_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKPIConditionalFormattingOption_ProgressBar::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
