/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalTable::OAIPhysicalTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalTable::OAIPhysicalTable() {
    this->initializeModel();
}

OAIPhysicalTable::~OAIPhysicalTable() {}

void OAIPhysicalTable::initializeModel() {

    m_relational_table_isSet = false;
    m_relational_table_isValid = false;

    m_custom_sql_isSet = false;
    m_custom_sql_isValid = false;

    m_s3_source_isSet = false;
    m_s3_source_isValid = false;
}

void OAIPhysicalTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalTable::fromJsonObject(QJsonObject json) {

    m_relational_table_isValid = ::OpenAPI::fromJsonValue(m_relational_table, json[QString("RelationalTable")]);
    m_relational_table_isSet = !json[QString("RelationalTable")].isNull() && m_relational_table_isValid;

    m_custom_sql_isValid = ::OpenAPI::fromJsonValue(m_custom_sql, json[QString("CustomSql")]);
    m_custom_sql_isSet = !json[QString("CustomSql")].isNull() && m_custom_sql_isValid;

    m_s3_source_isValid = ::OpenAPI::fromJsonValue(m_s3_source, json[QString("S3Source")]);
    m_s3_source_isSet = !json[QString("S3Source")].isNull() && m_s3_source_isValid;
}

QString OAIPhysicalTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalTable::asJsonObject() const {
    QJsonObject obj;
    if (m_relational_table.isSet()) {
        obj.insert(QString("RelationalTable"), ::OpenAPI::toJsonValue(m_relational_table));
    }
    if (m_custom_sql.isSet()) {
        obj.insert(QString("CustomSql"), ::OpenAPI::toJsonValue(m_custom_sql));
    }
    if (m_s3_source.isSet()) {
        obj.insert(QString("S3Source"), ::OpenAPI::toJsonValue(m_s3_source));
    }
    return obj;
}

OAIPhysicalTable_RelationalTable OAIPhysicalTable::getRelationalTable() const {
    return m_relational_table;
}
void OAIPhysicalTable::setRelationalTable(const OAIPhysicalTable_RelationalTable &relational_table) {
    m_relational_table = relational_table;
    m_relational_table_isSet = true;
}

bool OAIPhysicalTable::is_relational_table_Set() const{
    return m_relational_table_isSet;
}

bool OAIPhysicalTable::is_relational_table_Valid() const{
    return m_relational_table_isValid;
}

OAIPhysicalTable_CustomSql OAIPhysicalTable::getCustomSql() const {
    return m_custom_sql;
}
void OAIPhysicalTable::setCustomSql(const OAIPhysicalTable_CustomSql &custom_sql) {
    m_custom_sql = custom_sql;
    m_custom_sql_isSet = true;
}

bool OAIPhysicalTable::is_custom_sql_Set() const{
    return m_custom_sql_isSet;
}

bool OAIPhysicalTable::is_custom_sql_Valid() const{
    return m_custom_sql_isValid;
}

OAIPhysicalTable_S3Source OAIPhysicalTable::getS3Source() const {
    return m_s3_source;
}
void OAIPhysicalTable::setS3Source(const OAIPhysicalTable_S3Source &s3_source) {
    m_s3_source = s3_source;
    m_s3_source_isSet = true;
}

bool OAIPhysicalTable::is_s3_source_Set() const{
    return m_s3_source_isSet;
}

bool OAIPhysicalTable::is_s3_source_Valid() const{
    return m_s3_source_isValid;
}

bool OAIPhysicalTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_relational_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_sql.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
