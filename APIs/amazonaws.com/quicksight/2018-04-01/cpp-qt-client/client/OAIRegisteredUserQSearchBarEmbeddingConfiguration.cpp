/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredUserQSearchBarEmbeddingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredUserQSearchBarEmbeddingConfiguration::OAIRegisteredUserQSearchBarEmbeddingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredUserQSearchBarEmbeddingConfiguration::OAIRegisteredUserQSearchBarEmbeddingConfiguration() {
    this->initializeModel();
}

OAIRegisteredUserQSearchBarEmbeddingConfiguration::~OAIRegisteredUserQSearchBarEmbeddingConfiguration() {}

void OAIRegisteredUserQSearchBarEmbeddingConfiguration::initializeModel() {

    m_initial_topic_id_isSet = false;
    m_initial_topic_id_isValid = false;
}

void OAIRegisteredUserQSearchBarEmbeddingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredUserQSearchBarEmbeddingConfiguration::fromJsonObject(QJsonObject json) {

    m_initial_topic_id_isValid = ::OpenAPI::fromJsonValue(m_initial_topic_id, json[QString("InitialTopicId")]);
    m_initial_topic_id_isSet = !json[QString("InitialTopicId")].isNull() && m_initial_topic_id_isValid;
}

QString OAIRegisteredUserQSearchBarEmbeddingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredUserQSearchBarEmbeddingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_topic_id_isSet) {
        obj.insert(QString("InitialTopicId"), ::OpenAPI::toJsonValue(m_initial_topic_id));
    }
    return obj;
}

QString OAIRegisteredUserQSearchBarEmbeddingConfiguration::getInitialTopicId() const {
    return m_initial_topic_id;
}
void OAIRegisteredUserQSearchBarEmbeddingConfiguration::setInitialTopicId(const QString &initial_topic_id) {
    m_initial_topic_id = initial_topic_id;
    m_initial_topic_id_isSet = true;
}

bool OAIRegisteredUserQSearchBarEmbeddingConfiguration::is_initial_topic_id_Set() const{
    return m_initial_topic_id_isSet;
}

bool OAIRegisteredUserQSearchBarEmbeddingConfiguration::is_initial_topic_id_Valid() const{
    return m_initial_topic_id_isValid;
}

bool OAIRegisteredUserQSearchBarEmbeddingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredUserQSearchBarEmbeddingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
