/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemsLimitConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemsLimitConfiguration::OAIItemsLimitConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemsLimitConfiguration::OAIItemsLimitConfiguration() {
    this->initializeModel();
}

OAIItemsLimitConfiguration::~OAIItemsLimitConfiguration() {}

void OAIItemsLimitConfiguration::initializeModel() {

    m_items_limit_isSet = false;
    m_items_limit_isValid = false;

    m_other_categories_isSet = false;
    m_other_categories_isValid = false;
}

void OAIItemsLimitConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemsLimitConfiguration::fromJsonObject(QJsonObject json) {

    m_items_limit_isValid = ::OpenAPI::fromJsonValue(m_items_limit, json[QString("ItemsLimit")]);
    m_items_limit_isSet = !json[QString("ItemsLimit")].isNull() && m_items_limit_isValid;

    m_other_categories_isValid = ::OpenAPI::fromJsonValue(m_other_categories, json[QString("OtherCategories")]);
    m_other_categories_isSet = !json[QString("OtherCategories")].isNull() && m_other_categories_isValid;
}

QString OAIItemsLimitConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemsLimitConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_items_limit_isSet) {
        obj.insert(QString("ItemsLimit"), ::OpenAPI::toJsonValue(m_items_limit));
    }
    if (m_other_categories.isSet()) {
        obj.insert(QString("OtherCategories"), ::OpenAPI::toJsonValue(m_other_categories));
    }
    return obj;
}

qint32 OAIItemsLimitConfiguration::getItemsLimit() const {
    return m_items_limit;
}
void OAIItemsLimitConfiguration::setItemsLimit(const qint32 &items_limit) {
    m_items_limit = items_limit;
    m_items_limit_isSet = true;
}

bool OAIItemsLimitConfiguration::is_items_limit_Set() const{
    return m_items_limit_isSet;
}

bool OAIItemsLimitConfiguration::is_items_limit_Valid() const{
    return m_items_limit_isValid;
}

OAIOtherCategories OAIItemsLimitConfiguration::getOtherCategories() const {
    return m_other_categories;
}
void OAIItemsLimitConfiguration::setOtherCategories(const OAIOtherCategories &other_categories) {
    m_other_categories = other_categories;
    m_other_categories_isSet = true;
}

bool OAIItemsLimitConfiguration::is_other_categories_Set() const{
    return m_other_categories_isSet;
}

bool OAIItemsLimitConfiguration::is_other_categories_Valid() const{
    return m_other_categories_isValid;
}

bool OAIItemsLimitConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemsLimitConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
