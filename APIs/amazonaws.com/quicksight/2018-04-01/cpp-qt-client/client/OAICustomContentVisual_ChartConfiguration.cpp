/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomContentVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomContentVisual_ChartConfiguration::OAICustomContentVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomContentVisual_ChartConfiguration::OAICustomContentVisual_ChartConfiguration() {
    this->initializeModel();
}

OAICustomContentVisual_ChartConfiguration::~OAICustomContentVisual_ChartConfiguration() {}

void OAICustomContentVisual_ChartConfiguration::initializeModel() {

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_image_scaling_isSet = false;
    m_image_scaling_isValid = false;
}

void OAICustomContentVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomContentVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("ContentUrl")]);
    m_content_url_isSet = !json[QString("ContentUrl")].isNull() && m_content_url_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_image_scaling_isValid = ::OpenAPI::fromJsonValue(m_image_scaling, json[QString("ImageScaling")]);
    m_image_scaling_isSet = !json[QString("ImageScaling")].isNull() && m_image_scaling_isValid;
}

QString OAICustomContentVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomContentVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_content_url_isSet) {
        obj.insert(QString("ContentUrl"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_content_type.isSet()) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_image_scaling.isSet()) {
        obj.insert(QString("ImageScaling"), ::OpenAPI::toJsonValue(m_image_scaling));
    }
    return obj;
}

QString OAICustomContentVisual_ChartConfiguration::getContentUrl() const {
    return m_content_url;
}
void OAICustomContentVisual_ChartConfiguration::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAICustomContentVisual_ChartConfiguration::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAICustomContentVisual_ChartConfiguration::is_content_url_Valid() const{
    return m_content_url_isValid;
}

OAICustomContentType OAICustomContentVisual_ChartConfiguration::getContentType() const {
    return m_content_type;
}
void OAICustomContentVisual_ChartConfiguration::setContentType(const OAICustomContentType &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAICustomContentVisual_ChartConfiguration::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAICustomContentVisual_ChartConfiguration::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAICustomContentImageScalingConfiguration OAICustomContentVisual_ChartConfiguration::getImageScaling() const {
    return m_image_scaling;
}
void OAICustomContentVisual_ChartConfiguration::setImageScaling(const OAICustomContentImageScalingConfiguration &image_scaling) {
    m_image_scaling = image_scaling;
    m_image_scaling_isSet = true;
}

bool OAICustomContentVisual_ChartConfiguration::is_image_scaling_Set() const{
    return m_image_scaling_isSet;
}

bool OAICustomContentVisual_ChartConfiguration::is_image_scaling_Valid() const{
    return m_image_scaling_isValid;
}

bool OAICustomContentVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_scaling.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomContentVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
