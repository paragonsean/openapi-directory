/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKPIPrimaryValueConditionalFormatting_TextColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKPIPrimaryValueConditionalFormatting_TextColor::OAIKPIPrimaryValueConditionalFormatting_TextColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKPIPrimaryValueConditionalFormatting_TextColor::OAIKPIPrimaryValueConditionalFormatting_TextColor() {
    this->initializeModel();
}

OAIKPIPrimaryValueConditionalFormatting_TextColor::~OAIKPIPrimaryValueConditionalFormatting_TextColor() {}

void OAIKPIPrimaryValueConditionalFormatting_TextColor::initializeModel() {

    m_solid_isSet = false;
    m_solid_isValid = false;

    m_gradient_isSet = false;
    m_gradient_isValid = false;
}

void OAIKPIPrimaryValueConditionalFormatting_TextColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKPIPrimaryValueConditionalFormatting_TextColor::fromJsonObject(QJsonObject json) {

    m_solid_isValid = ::OpenAPI::fromJsonValue(m_solid, json[QString("Solid")]);
    m_solid_isSet = !json[QString("Solid")].isNull() && m_solid_isValid;

    m_gradient_isValid = ::OpenAPI::fromJsonValue(m_gradient, json[QString("Gradient")]);
    m_gradient_isSet = !json[QString("Gradient")].isNull() && m_gradient_isValid;
}

QString OAIKPIPrimaryValueConditionalFormatting_TextColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKPIPrimaryValueConditionalFormatting_TextColor::asJsonObject() const {
    QJsonObject obj;
    if (m_solid.isSet()) {
        obj.insert(QString("Solid"), ::OpenAPI::toJsonValue(m_solid));
    }
    if (m_gradient.isSet()) {
        obj.insert(QString("Gradient"), ::OpenAPI::toJsonValue(m_gradient));
    }
    return obj;
}

OAIConditionalFormattingColor_Solid OAIKPIPrimaryValueConditionalFormatting_TextColor::getSolid() const {
    return m_solid;
}
void OAIKPIPrimaryValueConditionalFormatting_TextColor::setSolid(const OAIConditionalFormattingColor_Solid &solid) {
    m_solid = solid;
    m_solid_isSet = true;
}

bool OAIKPIPrimaryValueConditionalFormatting_TextColor::is_solid_Set() const{
    return m_solid_isSet;
}

bool OAIKPIPrimaryValueConditionalFormatting_TextColor::is_solid_Valid() const{
    return m_solid_isValid;
}

OAIConditionalFormattingColor_Gradient OAIKPIPrimaryValueConditionalFormatting_TextColor::getGradient() const {
    return m_gradient;
}
void OAIKPIPrimaryValueConditionalFormatting_TextColor::setGradient(const OAIConditionalFormattingColor_Gradient &gradient) {
    m_gradient = gradient;
    m_gradient_isSet = true;
}

bool OAIKPIPrimaryValueConditionalFormatting_TextColor::is_gradient_Set() const{
    return m_gradient_isSet;
}

bool OAIKPIPrimaryValueConditionalFormatting_TextColor::is_gradient_Valid() const{
    return m_gradient_isValid;
}

bool OAIKPIPrimaryValueConditionalFormatting_TextColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_solid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gradient.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKPIPrimaryValueConditionalFormatting_TextColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
