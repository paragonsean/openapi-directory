/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDataSet_request_RowLevelPermissionDataSet.h
 *
 * &lt;p&gt;Information about a dataset that contains permissions for row-level security (RLS). The permissions dataset maps fields to users or groups. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html\&quot;&gt;Using Row-Level Security (RLS) to Restrict Access to a Dataset&lt;/a&gt; in the &lt;i&gt;Amazon QuickSight User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The option to deny permissions by setting &lt;code&gt;PermissionPolicy&lt;/code&gt; to &lt;code&gt;DENY_ACCESS&lt;/code&gt; is not supported for new RLS datasets.&lt;/p&gt;
 */

#ifndef OAICreateDataSet_request_RowLevelPermissionDataSet_H
#define OAICreateDataSet_request_RowLevelPermissionDataSet_H

#include <QJsonObject>

#include "OAIRowLevelPermissionFormatVersion.h"
#include "OAIRowLevelPermissionPolicy.h"
#include "OAIStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateDataSet_request_RowLevelPermissionDataSet : public OAIObject {
public:
    OAICreateDataSet_request_RowLevelPermissionDataSet();
    OAICreateDataSet_request_RowLevelPermissionDataSet(QString json);
    ~OAICreateDataSet_request_RowLevelPermissionDataSet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    OAIRowLevelPermissionPolicy getPermissionPolicy() const;
    void setPermissionPolicy(const OAIRowLevelPermissionPolicy &permission_policy);
    bool is_permission_policy_Set() const;
    bool is_permission_policy_Valid() const;

    OAIRowLevelPermissionFormatVersion getFormatVersion() const;
    void setFormatVersion(const OAIRowLevelPermissionFormatVersion &format_version);
    bool is_format_version_Set() const;
    bool is_format_version_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    OAIRowLevelPermissionPolicy m_permission_policy;
    bool m_permission_policy_isSet;
    bool m_permission_policy_isValid;

    OAIRowLevelPermissionFormatVersion m_format_version;
    bool m_format_version_isSet;
    bool m_format_version_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDataSet_request_RowLevelPermissionDataSet)

#endif // OAICreateDataSet_request_RowLevelPermissionDataSet_H
