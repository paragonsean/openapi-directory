/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextQualifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextQualifier::OAITextQualifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextQualifier::OAITextQualifier() {
    this->initializeModel();
}

OAITextQualifier::~OAITextQualifier() {}

void OAITextQualifier::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITextQualifier::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITextQualifier::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DOUBLE_QUOTE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITextQualifier::DOUBLE_QUOTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SINGLE_QUOTE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITextQualifier::SINGLE_QUOTE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITextQualifier::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITextQualifier::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITextQualifier::DOUBLE_QUOTE:
            val = "DOUBLE_QUOTE";
            break;
        case eOAITextQualifier::SINGLE_QUOTE:
            val = "SINGLE_QUOTE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITextQualifier::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITextQualifier::eOAITextQualifier OAITextQualifier::getValue() const {
    return m_value;
}

void OAITextQualifier::setValue(const OAITextQualifier::eOAITextQualifier& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITextQualifier::isSet() const {
    
    return m_value_isSet;
}

bool OAITextQualifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
