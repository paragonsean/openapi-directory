/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableConditionalFormattingOption_Cell.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableConditionalFormattingOption_Cell::OAIPivotTableConditionalFormattingOption_Cell(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableConditionalFormattingOption_Cell::OAIPivotTableConditionalFormattingOption_Cell() {
    this->initializeModel();
}

OAIPivotTableConditionalFormattingOption_Cell::~OAIPivotTableConditionalFormattingOption_Cell() {}

void OAIPivotTableConditionalFormattingOption_Cell::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_text_format_isSet = false;
    m_text_format_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIPivotTableConditionalFormattingOption_Cell::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableConditionalFormattingOption_Cell::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_text_format_isValid = ::OpenAPI::fromJsonValue(m_text_format, json[QString("TextFormat")]);
    m_text_format_isSet = !json[QString("TextFormat")].isNull() && m_text_format_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("Scope")]);
    m_scope_isSet = !json[QString("Scope")].isNull() && m_scope_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("Scopes")]);
    m_scopes_isSet = !json[QString("Scopes")].isNull() && m_scopes_isValid;
}

QString OAIPivotTableConditionalFormattingOption_Cell::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableConditionalFormattingOption_Cell::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_text_format.isSet()) {
        obj.insert(QString("TextFormat"), ::OpenAPI::toJsonValue(m_text_format));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("Scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_scopes.isSet()) {
        obj.insert(QString("Scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QString OAIPivotTableConditionalFormattingOption_Cell::getFieldId() const {
    return m_field_id;
}
void OAIPivotTableConditionalFormattingOption_Cell::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIPivotTableConditionalFormattingOption_Cell::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIPivotTableConditionalFormattingOption_Cell::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIPivotTableCellConditionalFormatting_TextFormat OAIPivotTableConditionalFormattingOption_Cell::getTextFormat() const {
    return m_text_format;
}
void OAIPivotTableConditionalFormattingOption_Cell::setTextFormat(const OAIPivotTableCellConditionalFormatting_TextFormat &text_format) {
    m_text_format = text_format;
    m_text_format_isSet = true;
}

bool OAIPivotTableConditionalFormattingOption_Cell::is_text_format_Set() const{
    return m_text_format_isSet;
}

bool OAIPivotTableConditionalFormattingOption_Cell::is_text_format_Valid() const{
    return m_text_format_isValid;
}

OAIPivotTableCellConditionalFormatting_Scope OAIPivotTableConditionalFormattingOption_Cell::getScope() const {
    return m_scope;
}
void OAIPivotTableConditionalFormattingOption_Cell::setScope(const OAIPivotTableCellConditionalFormatting_Scope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIPivotTableConditionalFormattingOption_Cell::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIPivotTableConditionalFormattingOption_Cell::is_scope_Valid() const{
    return m_scope_isValid;
}

QList OAIPivotTableConditionalFormattingOption_Cell::getScopes() const {
    return m_scopes;
}
void OAIPivotTableConditionalFormattingOption_Cell::setScopes(const QList &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIPivotTableConditionalFormattingOption_Cell::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIPivotTableConditionalFormattingOption_Cell::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIPivotTableConditionalFormattingOption_Cell::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableConditionalFormattingOption_Cell::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && true;
}

} // namespace OpenAPI
