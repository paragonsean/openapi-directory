/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKPIProgressBarConditionalFormatting_ForegroundColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKPIProgressBarConditionalFormatting_ForegroundColor::OAIKPIProgressBarConditionalFormatting_ForegroundColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKPIProgressBarConditionalFormatting_ForegroundColor::OAIKPIProgressBarConditionalFormatting_ForegroundColor() {
    this->initializeModel();
}

OAIKPIProgressBarConditionalFormatting_ForegroundColor::~OAIKPIProgressBarConditionalFormatting_ForegroundColor() {}

void OAIKPIProgressBarConditionalFormatting_ForegroundColor::initializeModel() {

    m_solid_isSet = false;
    m_solid_isValid = false;

    m_gradient_isSet = false;
    m_gradient_isValid = false;
}

void OAIKPIProgressBarConditionalFormatting_ForegroundColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKPIProgressBarConditionalFormatting_ForegroundColor::fromJsonObject(QJsonObject json) {

    m_solid_isValid = ::OpenAPI::fromJsonValue(m_solid, json[QString("Solid")]);
    m_solid_isSet = !json[QString("Solid")].isNull() && m_solid_isValid;

    m_gradient_isValid = ::OpenAPI::fromJsonValue(m_gradient, json[QString("Gradient")]);
    m_gradient_isSet = !json[QString("Gradient")].isNull() && m_gradient_isValid;
}

QString OAIKPIProgressBarConditionalFormatting_ForegroundColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKPIProgressBarConditionalFormatting_ForegroundColor::asJsonObject() const {
    QJsonObject obj;
    if (m_solid.isSet()) {
        obj.insert(QString("Solid"), ::OpenAPI::toJsonValue(m_solid));
    }
    if (m_gradient.isSet()) {
        obj.insert(QString("Gradient"), ::OpenAPI::toJsonValue(m_gradient));
    }
    return obj;
}

OAIConditionalFormattingColor_Solid OAIKPIProgressBarConditionalFormatting_ForegroundColor::getSolid() const {
    return m_solid;
}
void OAIKPIProgressBarConditionalFormatting_ForegroundColor::setSolid(const OAIConditionalFormattingColor_Solid &solid) {
    m_solid = solid;
    m_solid_isSet = true;
}

bool OAIKPIProgressBarConditionalFormatting_ForegroundColor::is_solid_Set() const{
    return m_solid_isSet;
}

bool OAIKPIProgressBarConditionalFormatting_ForegroundColor::is_solid_Valid() const{
    return m_solid_isValid;
}

OAIConditionalFormattingColor_Gradient OAIKPIProgressBarConditionalFormatting_ForegroundColor::getGradient() const {
    return m_gradient;
}
void OAIKPIProgressBarConditionalFormatting_ForegroundColor::setGradient(const OAIConditionalFormattingColor_Gradient &gradient) {
    m_gradient = gradient;
    m_gradient_isSet = true;
}

bool OAIKPIProgressBarConditionalFormatting_ForegroundColor::is_gradient_Set() const{
    return m_gradient_isSet;
}

bool OAIKPIProgressBarConditionalFormatting_ForegroundColor::is_gradient_Valid() const{
    return m_gradient_isValid;
}

bool OAIKPIProgressBarConditionalFormatting_ForegroundColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_solid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gradient.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKPIProgressBarConditionalFormatting_ForegroundColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
