/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobDataSourceCredentialPair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobDataSourceCredentialPair::OAIAssetBundleImportJobDataSourceCredentialPair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobDataSourceCredentialPair::OAIAssetBundleImportJobDataSourceCredentialPair() {
    this->initializeModel();
}

OAIAssetBundleImportJobDataSourceCredentialPair::~OAIAssetBundleImportJobDataSourceCredentialPair() {}

void OAIAssetBundleImportJobDataSourceCredentialPair::initializeModel() {

    m_username_isSet = false;
    m_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;
}

void OAIAssetBundleImportJobDataSourceCredentialPair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportJobDataSourceCredentialPair::fromJsonObject(QJsonObject json) {

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;
}

QString OAIAssetBundleImportJobDataSourceCredentialPair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportJobDataSourceCredentialPair::asJsonObject() const {
    QJsonObject obj;
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    return obj;
}

QString OAIAssetBundleImportJobDataSourceCredentialPair::getUsername() const {
    return m_username;
}
void OAIAssetBundleImportJobDataSourceCredentialPair::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceCredentialPair::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAssetBundleImportJobDataSourceCredentialPair::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIAssetBundleImportJobDataSourceCredentialPair::getPassword() const {
    return m_password;
}
void OAIAssetBundleImportJobDataSourceCredentialPair::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceCredentialPair::is_password_Set() const{
    return m_password_isSet;
}

bool OAIAssetBundleImportJobDataSourceCredentialPair::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIAssetBundleImportJobDataSourceCredentialPair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportJobDataSourceCredentialPair::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_username_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
