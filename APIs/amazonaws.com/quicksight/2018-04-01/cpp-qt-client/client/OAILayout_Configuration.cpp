/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayout_Configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayout_Configuration::OAILayout_Configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayout_Configuration::OAILayout_Configuration() {
    this->initializeModel();
}

OAILayout_Configuration::~OAILayout_Configuration() {}

void OAILayout_Configuration::initializeModel() {

    m_grid_layout_isSet = false;
    m_grid_layout_isValid = false;

    m_free_form_layout_isSet = false;
    m_free_form_layout_isValid = false;

    m_section_based_layout_isSet = false;
    m_section_based_layout_isValid = false;
}

void OAILayout_Configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILayout_Configuration::fromJsonObject(QJsonObject json) {

    m_grid_layout_isValid = ::OpenAPI::fromJsonValue(m_grid_layout, json[QString("GridLayout")]);
    m_grid_layout_isSet = !json[QString("GridLayout")].isNull() && m_grid_layout_isValid;

    m_free_form_layout_isValid = ::OpenAPI::fromJsonValue(m_free_form_layout, json[QString("FreeFormLayout")]);
    m_free_form_layout_isSet = !json[QString("FreeFormLayout")].isNull() && m_free_form_layout_isValid;

    m_section_based_layout_isValid = ::OpenAPI::fromJsonValue(m_section_based_layout, json[QString("SectionBasedLayout")]);
    m_section_based_layout_isSet = !json[QString("SectionBasedLayout")].isNull() && m_section_based_layout_isValid;
}

QString OAILayout_Configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILayout_Configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_grid_layout.isSet()) {
        obj.insert(QString("GridLayout"), ::OpenAPI::toJsonValue(m_grid_layout));
    }
    if (m_free_form_layout.isSet()) {
        obj.insert(QString("FreeFormLayout"), ::OpenAPI::toJsonValue(m_free_form_layout));
    }
    if (m_section_based_layout.isSet()) {
        obj.insert(QString("SectionBasedLayout"), ::OpenAPI::toJsonValue(m_section_based_layout));
    }
    return obj;
}

OAILayoutConfiguration_GridLayout OAILayout_Configuration::getGridLayout() const {
    return m_grid_layout;
}
void OAILayout_Configuration::setGridLayout(const OAILayoutConfiguration_GridLayout &grid_layout) {
    m_grid_layout = grid_layout;
    m_grid_layout_isSet = true;
}

bool OAILayout_Configuration::is_grid_layout_Set() const{
    return m_grid_layout_isSet;
}

bool OAILayout_Configuration::is_grid_layout_Valid() const{
    return m_grid_layout_isValid;
}

OAILayoutConfiguration_FreeFormLayout OAILayout_Configuration::getFreeFormLayout() const {
    return m_free_form_layout;
}
void OAILayout_Configuration::setFreeFormLayout(const OAILayoutConfiguration_FreeFormLayout &free_form_layout) {
    m_free_form_layout = free_form_layout;
    m_free_form_layout_isSet = true;
}

bool OAILayout_Configuration::is_free_form_layout_Set() const{
    return m_free_form_layout_isSet;
}

bool OAILayout_Configuration::is_free_form_layout_Valid() const{
    return m_free_form_layout_isValid;
}

OAILayoutConfiguration_SectionBasedLayout OAILayout_Configuration::getSectionBasedLayout() const {
    return m_section_based_layout;
}
void OAILayout_Configuration::setSectionBasedLayout(const OAILayoutConfiguration_SectionBasedLayout &section_based_layout) {
    m_section_based_layout = section_based_layout;
    m_section_based_layout_isSet = true;
}

bool OAILayout_Configuration::is_section_based_layout_Set() const{
    return m_section_based_layout_isSet;
}

bool OAILayout_Configuration::is_section_based_layout_Valid() const{
    return m_section_based_layout_isValid;
}

bool OAILayout_Configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grid_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_form_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_based_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILayout_Configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
