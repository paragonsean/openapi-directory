/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIForecastComputation.h
 *
 * The forecast computation configuration.
 */

#ifndef OAIForecastComputation_H
#define OAIForecastComputation_H

#include <QJsonObject>

#include "OAIForecastComputationSeasonality.h"
#include "OAITopBottomMoversComputation_Time.h"
#include "OAITopBottomRankedComputation_Value.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITopBottomMoversComputation_Time;
class OAITopBottomRankedComputation_Value;

class OAIForecastComputation : public OAIObject {
public:
    OAIForecastComputation();
    OAIForecastComputation(QString json);
    ~OAIForecastComputation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComputationId() const;
    void setComputationId(const QString &computation_id);
    bool is_computation_id_Set() const;
    bool is_computation_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAITopBottomMoversComputation_Time getTime() const;
    void setTime(const OAITopBottomMoversComputation_Time &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    OAITopBottomRankedComputation_Value getValue() const;
    void setValue(const OAITopBottomRankedComputation_Value &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    qint32 getPeriodsForward() const;
    void setPeriodsForward(const qint32 &periods_forward);
    bool is_periods_forward_Set() const;
    bool is_periods_forward_Valid() const;

    qint32 getPeriodsBackward() const;
    void setPeriodsBackward(const qint32 &periods_backward);
    bool is_periods_backward_Set() const;
    bool is_periods_backward_Valid() const;

    double getUpperBoundary() const;
    void setUpperBoundary(const double &upper_boundary);
    bool is_upper_boundary_Set() const;
    bool is_upper_boundary_Valid() const;

    double getLowerBoundary() const;
    void setLowerBoundary(const double &lower_boundary);
    bool is_lower_boundary_Set() const;
    bool is_lower_boundary_Valid() const;

    qint32 getPredictionInterval() const;
    void setPredictionInterval(const qint32 &prediction_interval);
    bool is_prediction_interval_Set() const;
    bool is_prediction_interval_Valid() const;

    OAIForecastComputationSeasonality getSeasonality() const;
    void setSeasonality(const OAIForecastComputationSeasonality &seasonality);
    bool is_seasonality_Set() const;
    bool is_seasonality_Valid() const;

    qint32 getCustomSeasonalityValue() const;
    void setCustomSeasonalityValue(const qint32 &custom_seasonality_value);
    bool is_custom_seasonality_value_Set() const;
    bool is_custom_seasonality_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_computation_id;
    bool m_computation_id_isSet;
    bool m_computation_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAITopBottomMoversComputation_Time m_time;
    bool m_time_isSet;
    bool m_time_isValid;

    OAITopBottomRankedComputation_Value m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    qint32 m_periods_forward;
    bool m_periods_forward_isSet;
    bool m_periods_forward_isValid;

    qint32 m_periods_backward;
    bool m_periods_backward_isSet;
    bool m_periods_backward_isValid;

    double m_upper_boundary;
    bool m_upper_boundary_isSet;
    bool m_upper_boundary_isValid;

    double m_lower_boundary;
    bool m_lower_boundary_isSet;
    bool m_lower_boundary_isValid;

    qint32 m_prediction_interval;
    bool m_prediction_interval_isSet;
    bool m_prediction_interval_isValid;

    OAIForecastComputationSeasonality m_seasonality;
    bool m_seasonality_isSet;
    bool m_seasonality_isValid;

    qint32 m_custom_seasonality_value;
    bool m_custom_seasonality_value_isSet;
    bool m_custom_seasonality_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIForecastComputation)

#endif // OAIForecastComputation_H
