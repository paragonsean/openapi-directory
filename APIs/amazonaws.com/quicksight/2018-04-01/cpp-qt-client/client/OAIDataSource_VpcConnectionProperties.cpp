/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSource_VpcConnectionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSource_VpcConnectionProperties::OAIDataSource_VpcConnectionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSource_VpcConnectionProperties::OAIDataSource_VpcConnectionProperties() {
    this->initializeModel();
}

OAIDataSource_VpcConnectionProperties::~OAIDataSource_VpcConnectionProperties() {}

void OAIDataSource_VpcConnectionProperties::initializeModel() {

    m_vpc_connection_arn_isSet = false;
    m_vpc_connection_arn_isValid = false;
}

void OAIDataSource_VpcConnectionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSource_VpcConnectionProperties::fromJsonObject(QJsonObject json) {

    m_vpc_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_arn, json[QString("VpcConnectionArn")]);
    m_vpc_connection_arn_isSet = !json[QString("VpcConnectionArn")].isNull() && m_vpc_connection_arn_isValid;
}

QString OAIDataSource_VpcConnectionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSource_VpcConnectionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_connection_arn_isSet) {
        obj.insert(QString("VpcConnectionArn"), ::OpenAPI::toJsonValue(m_vpc_connection_arn));
    }
    return obj;
}

QString OAIDataSource_VpcConnectionProperties::getVpcConnectionArn() const {
    return m_vpc_connection_arn;
}
void OAIDataSource_VpcConnectionProperties::setVpcConnectionArn(const QString &vpc_connection_arn) {
    m_vpc_connection_arn = vpc_connection_arn;
    m_vpc_connection_arn_isSet = true;
}

bool OAIDataSource_VpcConnectionProperties::is_vpc_connection_arn_Set() const{
    return m_vpc_connection_arn_isSet;
}

bool OAIDataSource_VpcConnectionProperties::is_vpc_connection_arn_Valid() const{
    return m_vpc_connection_arn_isValid;
}

bool OAIDataSource_VpcConnectionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSource_VpcConnectionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vpc_connection_arn_isValid && true;
}

} // namespace OpenAPI
