/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSource_request_DataSourceParameters_DatabricksParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::OAICreateDataSource_request_DataSourceParameters_DatabricksParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::OAICreateDataSource_request_DataSourceParameters_DatabricksParameters() {
    this->initializeModel();
}

OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::~OAICreateDataSource_request_DataSourceParameters_DatabricksParameters() {}

void OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_sql_endpoint_path_isSet = false;
    m_sql_endpoint_path_isValid = false;
}

void OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("Host")]);
    m_host_isSet = !json[QString("Host")].isNull() && m_host_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_sql_endpoint_path_isValid = ::OpenAPI::fromJsonValue(m_sql_endpoint_path, json[QString("SqlEndpointPath")]);
    m_sql_endpoint_path_isSet = !json[QString("SqlEndpointPath")].isNull() && m_sql_endpoint_path_isValid;
}

QString OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("Host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_sql_endpoint_path_isSet) {
        obj.insert(QString("SqlEndpointPath"), ::OpenAPI::toJsonValue(m_sql_endpoint_path));
    }
    return obj;
}

QString OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::getHost() const {
    return m_host;
}
void OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::is_host_Set() const{
    return m_host_isSet;
}

bool OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::getPort() const {
    return m_port;
}
void OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::is_port_Valid() const{
    return m_port_isValid;
}

QString OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::getSqlEndpointPath() const {
    return m_sql_endpoint_path;
}
void OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::setSqlEndpointPath(const QString &sql_endpoint_path) {
    m_sql_endpoint_path = sql_endpoint_path;
    m_sql_endpoint_path_isSet = true;
}

bool OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::is_sql_endpoint_path_Set() const{
    return m_sql_endpoint_path_isSet;
}

bool OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::is_sql_endpoint_path_Valid() const{
    return m_sql_endpoint_path_isValid;
}

bool OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_endpoint_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSource_request_DataSourceParameters_DatabricksParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_isValid && m_port_isValid && m_sql_endpoint_path_isValid && true;
}

} // namespace OpenAPI
