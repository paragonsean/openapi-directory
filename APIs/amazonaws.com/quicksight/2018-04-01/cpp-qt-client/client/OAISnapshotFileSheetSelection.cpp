/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotFileSheetSelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotFileSheetSelection::OAISnapshotFileSheetSelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotFileSheetSelection::OAISnapshotFileSheetSelection() {
    this->initializeModel();
}

OAISnapshotFileSheetSelection::~OAISnapshotFileSheetSelection() {}

void OAISnapshotFileSheetSelection::initializeModel() {

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;

    m_selection_scope_isSet = false;
    m_selection_scope_isValid = false;

    m_visual_ids_isSet = false;
    m_visual_ids_isValid = false;
}

void OAISnapshotFileSheetSelection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotFileSheetSelection::fromJsonObject(QJsonObject json) {

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("SheetId")]);
    m_sheet_id_isSet = !json[QString("SheetId")].isNull() && m_sheet_id_isValid;

    m_selection_scope_isValid = ::OpenAPI::fromJsonValue(m_selection_scope, json[QString("SelectionScope")]);
    m_selection_scope_isSet = !json[QString("SelectionScope")].isNull() && m_selection_scope_isValid;

    m_visual_ids_isValid = ::OpenAPI::fromJsonValue(m_visual_ids, json[QString("VisualIds")]);
    m_visual_ids_isSet = !json[QString("VisualIds")].isNull() && m_visual_ids_isValid;
}

QString OAISnapshotFileSheetSelection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotFileSheetSelection::asJsonObject() const {
    QJsonObject obj;
    if (m_sheet_id_isSet) {
        obj.insert(QString("SheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    if (m_selection_scope.isSet()) {
        obj.insert(QString("SelectionScope"), ::OpenAPI::toJsonValue(m_selection_scope));
    }
    if (m_visual_ids.isSet()) {
        obj.insert(QString("VisualIds"), ::OpenAPI::toJsonValue(m_visual_ids));
    }
    return obj;
}

QString OAISnapshotFileSheetSelection::getSheetId() const {
    return m_sheet_id;
}
void OAISnapshotFileSheetSelection::setSheetId(const QString &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAISnapshotFileSheetSelection::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAISnapshotFileSheetSelection::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

OAISnapshotFileSheetSelectionScope OAISnapshotFileSheetSelection::getSelectionScope() const {
    return m_selection_scope;
}
void OAISnapshotFileSheetSelection::setSelectionScope(const OAISnapshotFileSheetSelectionScope &selection_scope) {
    m_selection_scope = selection_scope;
    m_selection_scope_isSet = true;
}

bool OAISnapshotFileSheetSelection::is_selection_scope_Set() const{
    return m_selection_scope_isSet;
}

bool OAISnapshotFileSheetSelection::is_selection_scope_Valid() const{
    return m_selection_scope_isValid;
}

QList OAISnapshotFileSheetSelection::getVisualIds() const {
    return m_visual_ids;
}
void OAISnapshotFileSheetSelection::setVisualIds(const QList &visual_ids) {
    m_visual_ids = visual_ids;
    m_visual_ids_isSet = true;
}

bool OAISnapshotFileSheetSelection::is_visual_ids_Set() const{
    return m_visual_ids_isSet;
}

bool OAISnapshotFileSheetSelection::is_visual_ids_Valid() const{
    return m_visual_ids_isValid;
}

bool OAISnapshotFileSheetSelection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotFileSheetSelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sheet_id_isValid && m_selection_scope_isValid && true;
}

} // namespace OpenAPI
