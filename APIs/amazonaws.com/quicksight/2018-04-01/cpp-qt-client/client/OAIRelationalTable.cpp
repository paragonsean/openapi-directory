/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationalTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationalTable::OAIRelationalTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationalTable::OAIRelationalTable() {
    this->initializeModel();
}

OAIRelationalTable::~OAIRelationalTable() {}

void OAIRelationalTable::initializeModel() {

    m_data_source_arn_isSet = false;
    m_data_source_arn_isValid = false;

    m_catalog_isSet = false;
    m_catalog_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_input_columns_isSet = false;
    m_input_columns_isValid = false;
}

void OAIRelationalTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationalTable::fromJsonObject(QJsonObject json) {

    m_data_source_arn_isValid = ::OpenAPI::fromJsonValue(m_data_source_arn, json[QString("DataSourceArn")]);
    m_data_source_arn_isSet = !json[QString("DataSourceArn")].isNull() && m_data_source_arn_isValid;

    m_catalog_isValid = ::OpenAPI::fromJsonValue(m_catalog, json[QString("Catalog")]);
    m_catalog_isSet = !json[QString("Catalog")].isNull() && m_catalog_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_input_columns_isValid = ::OpenAPI::fromJsonValue(m_input_columns, json[QString("InputColumns")]);
    m_input_columns_isSet = !json[QString("InputColumns")].isNull() && m_input_columns_isValid;
}

QString OAIRelationalTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationalTable::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_arn_isSet) {
        obj.insert(QString("DataSourceArn"), ::OpenAPI::toJsonValue(m_data_source_arn));
    }
    if (m_catalog_isSet) {
        obj.insert(QString("Catalog"), ::OpenAPI::toJsonValue(m_catalog));
    }
    if (m_schema_isSet) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_input_columns.isSet()) {
        obj.insert(QString("InputColumns"), ::OpenAPI::toJsonValue(m_input_columns));
    }
    return obj;
}

QString OAIRelationalTable::getDataSourceArn() const {
    return m_data_source_arn;
}
void OAIRelationalTable::setDataSourceArn(const QString &data_source_arn) {
    m_data_source_arn = data_source_arn;
    m_data_source_arn_isSet = true;
}

bool OAIRelationalTable::is_data_source_arn_Set() const{
    return m_data_source_arn_isSet;
}

bool OAIRelationalTable::is_data_source_arn_Valid() const{
    return m_data_source_arn_isValid;
}

QString OAIRelationalTable::getCatalog() const {
    return m_catalog;
}
void OAIRelationalTable::setCatalog(const QString &catalog) {
    m_catalog = catalog;
    m_catalog_isSet = true;
}

bool OAIRelationalTable::is_catalog_Set() const{
    return m_catalog_isSet;
}

bool OAIRelationalTable::is_catalog_Valid() const{
    return m_catalog_isValid;
}

QString OAIRelationalTable::getSchema() const {
    return m_schema;
}
void OAIRelationalTable::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIRelationalTable::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIRelationalTable::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIRelationalTable::getName() const {
    return m_name;
}
void OAIRelationalTable::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRelationalTable::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRelationalTable::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIRelationalTable::getInputColumns() const {
    return m_input_columns;
}
void OAIRelationalTable::setInputColumns(const QList &input_columns) {
    m_input_columns = input_columns;
    m_input_columns_isSet = true;
}

bool OAIRelationalTable::is_input_columns_Set() const{
    return m_input_columns_isSet;
}

bool OAIRelationalTable::is_input_columns_Valid() const{
    return m_input_columns_isValid;
}

bool OAIRelationalTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationalTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_arn_isValid && m_name_isValid && m_input_columns_isValid && true;
}

} // namespace OpenAPI
