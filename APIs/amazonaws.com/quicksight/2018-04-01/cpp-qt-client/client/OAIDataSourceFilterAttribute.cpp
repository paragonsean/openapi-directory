/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceFilterAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceFilterAttribute::OAIDataSourceFilterAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceFilterAttribute::OAIDataSourceFilterAttribute() {
    this->initializeModel();
}

OAIDataSourceFilterAttribute::~OAIDataSourceFilterAttribute() {}

void OAIDataSourceFilterAttribute::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataSourceFilterAttribute::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataSourceFilterAttribute::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DIRECT_QUICKSIGHT_VIEWER_OR_OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceFilterAttribute::DIRECT_QUICKSIGHT_VIEWER_OR_OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECT_QUICKSIGHT_OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceFilterAttribute::DIRECT_QUICKSIGHT_OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECT_QUICKSIGHT_SOLE_OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceFilterAttribute::DIRECT_QUICKSIGHT_SOLE_OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATASOURCE_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceFilterAttribute::DATASOURCE_NAME;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataSourceFilterAttribute::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataSourceFilterAttribute::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataSourceFilterAttribute::DIRECT_QUICKSIGHT_VIEWER_OR_OWNER:
            val = "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER";
            break;
        case eOAIDataSourceFilterAttribute::DIRECT_QUICKSIGHT_OWNER:
            val = "DIRECT_QUICKSIGHT_OWNER";
            break;
        case eOAIDataSourceFilterAttribute::DIRECT_QUICKSIGHT_SOLE_OWNER:
            val = "DIRECT_QUICKSIGHT_SOLE_OWNER";
            break;
        case eOAIDataSourceFilterAttribute::DATASOURCE_NAME:
            val = "DATASOURCE_NAME";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataSourceFilterAttribute::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataSourceFilterAttribute::eOAIDataSourceFilterAttribute OAIDataSourceFilterAttribute::getValue() const {
    return m_value;
}

void OAIDataSourceFilterAttribute::setValue(const OAIDataSourceFilterAttribute::eOAIDataSourceFilterAttribute& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataSourceFilterAttribute::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataSourceFilterAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
