/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomActionFilterOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomActionFilterOperation::OAICustomActionFilterOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomActionFilterOperation::OAICustomActionFilterOperation() {
    this->initializeModel();
}

OAICustomActionFilterOperation::~OAICustomActionFilterOperation() {}

void OAICustomActionFilterOperation::initializeModel() {

    m_selected_fields_configuration_isSet = false;
    m_selected_fields_configuration_isValid = false;

    m_target_visuals_configuration_isSet = false;
    m_target_visuals_configuration_isValid = false;
}

void OAICustomActionFilterOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomActionFilterOperation::fromJsonObject(QJsonObject json) {

    m_selected_fields_configuration_isValid = ::OpenAPI::fromJsonValue(m_selected_fields_configuration, json[QString("SelectedFieldsConfiguration")]);
    m_selected_fields_configuration_isSet = !json[QString("SelectedFieldsConfiguration")].isNull() && m_selected_fields_configuration_isValid;

    m_target_visuals_configuration_isValid = ::OpenAPI::fromJsonValue(m_target_visuals_configuration, json[QString("TargetVisualsConfiguration")]);
    m_target_visuals_configuration_isSet = !json[QString("TargetVisualsConfiguration")].isNull() && m_target_visuals_configuration_isValid;
}

QString OAICustomActionFilterOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomActionFilterOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_fields_configuration.isSet()) {
        obj.insert(QString("SelectedFieldsConfiguration"), ::OpenAPI::toJsonValue(m_selected_fields_configuration));
    }
    if (m_target_visuals_configuration.isSet()) {
        obj.insert(QString("TargetVisualsConfiguration"), ::OpenAPI::toJsonValue(m_target_visuals_configuration));
    }
    return obj;
}

OAICustomActionFilterOperation_SelectedFieldsConfiguration OAICustomActionFilterOperation::getSelectedFieldsConfiguration() const {
    return m_selected_fields_configuration;
}
void OAICustomActionFilterOperation::setSelectedFieldsConfiguration(const OAICustomActionFilterOperation_SelectedFieldsConfiguration &selected_fields_configuration) {
    m_selected_fields_configuration = selected_fields_configuration;
    m_selected_fields_configuration_isSet = true;
}

bool OAICustomActionFilterOperation::is_selected_fields_configuration_Set() const{
    return m_selected_fields_configuration_isSet;
}

bool OAICustomActionFilterOperation::is_selected_fields_configuration_Valid() const{
    return m_selected_fields_configuration_isValid;
}

OAICustomActionFilterOperation_TargetVisualsConfiguration OAICustomActionFilterOperation::getTargetVisualsConfiguration() const {
    return m_target_visuals_configuration;
}
void OAICustomActionFilterOperation::setTargetVisualsConfiguration(const OAICustomActionFilterOperation_TargetVisualsConfiguration &target_visuals_configuration) {
    m_target_visuals_configuration = target_visuals_configuration;
    m_target_visuals_configuration_isSet = true;
}

bool OAICustomActionFilterOperation::is_target_visuals_configuration_Set() const{
    return m_target_visuals_configuration_isSet;
}

bool OAICustomActionFilterOperation::is_target_visuals_configuration_Valid() const{
    return m_target_visuals_configuration_isValid;
}

bool OAICustomActionFilterOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_fields_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_visuals_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomActionFilterOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_selected_fields_configuration_isValid && m_target_visuals_configuration_isValid && true;
}

} // namespace OpenAPI
