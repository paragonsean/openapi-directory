/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelativeDatesFilter_AnchorDateConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelativeDatesFilter_AnchorDateConfiguration::OAIRelativeDatesFilter_AnchorDateConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelativeDatesFilter_AnchorDateConfiguration::OAIRelativeDatesFilter_AnchorDateConfiguration() {
    this->initializeModel();
}

OAIRelativeDatesFilter_AnchorDateConfiguration::~OAIRelativeDatesFilter_AnchorDateConfiguration() {}

void OAIRelativeDatesFilter_AnchorDateConfiguration::initializeModel() {

    m_anchor_option_isSet = false;
    m_anchor_option_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;
}

void OAIRelativeDatesFilter_AnchorDateConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelativeDatesFilter_AnchorDateConfiguration::fromJsonObject(QJsonObject json) {

    m_anchor_option_isValid = ::OpenAPI::fromJsonValue(m_anchor_option, json[QString("AnchorOption")]);
    m_anchor_option_isSet = !json[QString("AnchorOption")].isNull() && m_anchor_option_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;
}

QString OAIRelativeDatesFilter_AnchorDateConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelativeDatesFilter_AnchorDateConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_anchor_option.isSet()) {
        obj.insert(QString("AnchorOption"), ::OpenAPI::toJsonValue(m_anchor_option));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    return obj;
}

OAIAnchorOption OAIRelativeDatesFilter_AnchorDateConfiguration::getAnchorOption() const {
    return m_anchor_option;
}
void OAIRelativeDatesFilter_AnchorDateConfiguration::setAnchorOption(const OAIAnchorOption &anchor_option) {
    m_anchor_option = anchor_option;
    m_anchor_option_isSet = true;
}

bool OAIRelativeDatesFilter_AnchorDateConfiguration::is_anchor_option_Set() const{
    return m_anchor_option_isSet;
}

bool OAIRelativeDatesFilter_AnchorDateConfiguration::is_anchor_option_Valid() const{
    return m_anchor_option_isValid;
}

QString OAIRelativeDatesFilter_AnchorDateConfiguration::getParameterName() const {
    return m_parameter_name;
}
void OAIRelativeDatesFilter_AnchorDateConfiguration::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIRelativeDatesFilter_AnchorDateConfiguration::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIRelativeDatesFilter_AnchorDateConfiguration::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

bool OAIRelativeDatesFilter_AnchorDateConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anchor_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelativeDatesFilter_AnchorDateConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
