/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeNamespaceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeNamespaceResponse::OAIDescribeNamespaceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeNamespaceResponse::OAIDescribeNamespaceResponse() {
    this->initializeModel();
}

OAIDescribeNamespaceResponse::~OAIDescribeNamespaceResponse() {}

void OAIDescribeNamespaceResponse::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeNamespaceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeNamespaceResponse::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeNamespaceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeNamespaceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace.isSet()) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIDescribeNamespaceResponse_Namespace OAIDescribeNamespaceResponse::getRNamespace() const {
    return m_r_namespace;
}
void OAIDescribeNamespaceResponse::setRNamespace(const OAIDescribeNamespaceResponse_Namespace &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIDescribeNamespaceResponse::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIDescribeNamespaceResponse::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIDescribeNamespaceResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeNamespaceResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeNamespaceResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeNamespaceResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeNamespaceResponse::getStatus() const {
    return m_status;
}
void OAIDescribeNamespaceResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeNamespaceResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeNamespaceResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeNamespaceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeNamespaceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
