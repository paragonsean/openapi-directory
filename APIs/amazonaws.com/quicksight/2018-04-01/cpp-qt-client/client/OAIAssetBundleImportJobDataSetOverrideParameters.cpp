/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobDataSetOverrideParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobDataSetOverrideParameters::OAIAssetBundleImportJobDataSetOverrideParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobDataSetOverrideParameters::OAIAssetBundleImportJobDataSetOverrideParameters() {
    this->initializeModel();
}

OAIAssetBundleImportJobDataSetOverrideParameters::~OAIAssetBundleImportJobDataSetOverrideParameters() {}

void OAIAssetBundleImportJobDataSetOverrideParameters::initializeModel() {

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAssetBundleImportJobDataSetOverrideParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportJobDataSetOverrideParameters::fromJsonObject(QJsonObject json) {

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("DataSetId")]);
    m_data_set_id_isSet = !json[QString("DataSetId")].isNull() && m_data_set_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIAssetBundleImportJobDataSetOverrideParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportJobDataSetOverrideParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_id_isSet) {
        obj.insert(QString("DataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIAssetBundleImportJobDataSetOverrideParameters::getDataSetId() const {
    return m_data_set_id;
}
void OAIAssetBundleImportJobDataSetOverrideParameters::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIAssetBundleImportJobDataSetOverrideParameters::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIAssetBundleImportJobDataSetOverrideParameters::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAIAssetBundleImportJobDataSetOverrideParameters::getName() const {
    return m_name;
}
void OAIAssetBundleImportJobDataSetOverrideParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssetBundleImportJobDataSetOverrideParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssetBundleImportJobDataSetOverrideParameters::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAssetBundleImportJobDataSetOverrideParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportJobDataSetOverrideParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_id_isValid && true;
}

} // namespace OpenAPI
