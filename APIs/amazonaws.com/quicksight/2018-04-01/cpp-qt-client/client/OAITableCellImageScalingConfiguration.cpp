/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableCellImageScalingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableCellImageScalingConfiguration::OAITableCellImageScalingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableCellImageScalingConfiguration::OAITableCellImageScalingConfiguration() {
    this->initializeModel();
}

OAITableCellImageScalingConfiguration::~OAITableCellImageScalingConfiguration() {}

void OAITableCellImageScalingConfiguration::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITableCellImageScalingConfiguration::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITableCellImageScalingConfiguration::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FIT_TO_CELL_HEIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITableCellImageScalingConfiguration::FIT_TO_CELL_HEIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIT_TO_CELL_WIDTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITableCellImageScalingConfiguration::FIT_TO_CELL_WIDTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DO_NOT_SCALE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITableCellImageScalingConfiguration::DO_NOT_SCALE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITableCellImageScalingConfiguration::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITableCellImageScalingConfiguration::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITableCellImageScalingConfiguration::FIT_TO_CELL_HEIGHT:
            val = "FIT_TO_CELL_HEIGHT";
            break;
        case eOAITableCellImageScalingConfiguration::FIT_TO_CELL_WIDTH:
            val = "FIT_TO_CELL_WIDTH";
            break;
        case eOAITableCellImageScalingConfiguration::DO_NOT_SCALE:
            val = "DO_NOT_SCALE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITableCellImageScalingConfiguration::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITableCellImageScalingConfiguration::eOAITableCellImageScalingConfiguration OAITableCellImageScalingConfiguration::getValue() const {
    return m_value;
}

void OAITableCellImageScalingConfiguration::setValue(const OAITableCellImageScalingConfiguration::eOAITableCellImageScalingConfiguration& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITableCellImageScalingConfiguration::isSet() const {
    
    return m_value_isSet;
}

bool OAITableCellImageScalingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
