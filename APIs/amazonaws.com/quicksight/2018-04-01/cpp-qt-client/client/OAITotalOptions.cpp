/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITotalOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITotalOptions::OAITotalOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITotalOptions::OAITotalOptions() {
    this->initializeModel();
}

OAITotalOptions::~OAITotalOptions() {}

void OAITotalOptions::initializeModel() {

    m_totals_visibility_isSet = false;
    m_totals_visibility_isValid = false;

    m_placement_isSet = false;
    m_placement_isValid = false;

    m_scroll_status_isSet = false;
    m_scroll_status_isValid = false;

    m_custom_label_isSet = false;
    m_custom_label_isValid = false;

    m_total_cell_style_isSet = false;
    m_total_cell_style_isValid = false;
}

void OAITotalOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITotalOptions::fromJsonObject(QJsonObject json) {

    m_totals_visibility_isValid = ::OpenAPI::fromJsonValue(m_totals_visibility, json[QString("TotalsVisibility")]);
    m_totals_visibility_isSet = !json[QString("TotalsVisibility")].isNull() && m_totals_visibility_isValid;

    m_placement_isValid = ::OpenAPI::fromJsonValue(m_placement, json[QString("Placement")]);
    m_placement_isSet = !json[QString("Placement")].isNull() && m_placement_isValid;

    m_scroll_status_isValid = ::OpenAPI::fromJsonValue(m_scroll_status, json[QString("ScrollStatus")]);
    m_scroll_status_isSet = !json[QString("ScrollStatus")].isNull() && m_scroll_status_isValid;

    m_custom_label_isValid = ::OpenAPI::fromJsonValue(m_custom_label, json[QString("CustomLabel")]);
    m_custom_label_isSet = !json[QString("CustomLabel")].isNull() && m_custom_label_isValid;

    m_total_cell_style_isValid = ::OpenAPI::fromJsonValue(m_total_cell_style, json[QString("TotalCellStyle")]);
    m_total_cell_style_isSet = !json[QString("TotalCellStyle")].isNull() && m_total_cell_style_isValid;
}

QString OAITotalOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITotalOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_totals_visibility.isSet()) {
        obj.insert(QString("TotalsVisibility"), ::OpenAPI::toJsonValue(m_totals_visibility));
    }
    if (m_placement.isSet()) {
        obj.insert(QString("Placement"), ::OpenAPI::toJsonValue(m_placement));
    }
    if (m_scroll_status.isSet()) {
        obj.insert(QString("ScrollStatus"), ::OpenAPI::toJsonValue(m_scroll_status));
    }
    if (m_custom_label_isSet) {
        obj.insert(QString("CustomLabel"), ::OpenAPI::toJsonValue(m_custom_label));
    }
    if (m_total_cell_style.isSet()) {
        obj.insert(QString("TotalCellStyle"), ::OpenAPI::toJsonValue(m_total_cell_style));
    }
    return obj;
}

OAIVisibility OAITotalOptions::getTotalsVisibility() const {
    return m_totals_visibility;
}
void OAITotalOptions::setTotalsVisibility(const OAIVisibility &totals_visibility) {
    m_totals_visibility = totals_visibility;
    m_totals_visibility_isSet = true;
}

bool OAITotalOptions::is_totals_visibility_Set() const{
    return m_totals_visibility_isSet;
}

bool OAITotalOptions::is_totals_visibility_Valid() const{
    return m_totals_visibility_isValid;
}

OAITableTotalsPlacement OAITotalOptions::getPlacement() const {
    return m_placement;
}
void OAITotalOptions::setPlacement(const OAITableTotalsPlacement &placement) {
    m_placement = placement;
    m_placement_isSet = true;
}

bool OAITotalOptions::is_placement_Set() const{
    return m_placement_isSet;
}

bool OAITotalOptions::is_placement_Valid() const{
    return m_placement_isValid;
}

OAITableTotalsScrollStatus OAITotalOptions::getScrollStatus() const {
    return m_scroll_status;
}
void OAITotalOptions::setScrollStatus(const OAITableTotalsScrollStatus &scroll_status) {
    m_scroll_status = scroll_status;
    m_scroll_status_isSet = true;
}

bool OAITotalOptions::is_scroll_status_Set() const{
    return m_scroll_status_isSet;
}

bool OAITotalOptions::is_scroll_status_Valid() const{
    return m_scroll_status_isValid;
}

QString OAITotalOptions::getCustomLabel() const {
    return m_custom_label;
}
void OAITotalOptions::setCustomLabel(const QString &custom_label) {
    m_custom_label = custom_label;
    m_custom_label_isSet = true;
}

bool OAITotalOptions::is_custom_label_Set() const{
    return m_custom_label_isSet;
}

bool OAITotalOptions::is_custom_label_Valid() const{
    return m_custom_label_isValid;
}

OAITotalOptions_TotalCellStyle OAITotalOptions::getTotalCellStyle() const {
    return m_total_cell_style;
}
void OAITotalOptions::setTotalCellStyle(const OAITotalOptions_TotalCellStyle &total_cell_style) {
    m_total_cell_style = total_cell_style;
    m_total_cell_style_isSet = true;
}

bool OAITotalOptions::is_total_cell_style_Set() const{
    return m_total_cell_style_isSet;
}

bool OAITotalOptions::is_total_cell_style_Valid() const{
    return m_total_cell_style_isValid;
}

bool OAITotalOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_totals_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scroll_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITotalOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
