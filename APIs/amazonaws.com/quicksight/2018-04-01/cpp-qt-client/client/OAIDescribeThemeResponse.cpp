/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeThemeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeThemeResponse::OAIDescribeThemeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeThemeResponse::OAIDescribeThemeResponse() {
    this->initializeModel();
}

OAIDescribeThemeResponse::~OAIDescribeThemeResponse() {}

void OAIDescribeThemeResponse::initializeModel() {

    m_theme_isSet = false;
    m_theme_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDescribeThemeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeThemeResponse::fromJsonObject(QJsonObject json) {

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("Theme")]);
    m_theme_isSet = !json[QString("Theme")].isNull() && m_theme_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIDescribeThemeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeThemeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_theme.isSet()) {
        obj.insert(QString("Theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIDescribeThemeResponse_Theme OAIDescribeThemeResponse::getTheme() const {
    return m_theme;
}
void OAIDescribeThemeResponse::setTheme(const OAIDescribeThemeResponse_Theme &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIDescribeThemeResponse::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIDescribeThemeResponse::is_theme_Valid() const{
    return m_theme_isValid;
}

qint32 OAIDescribeThemeResponse::getStatus() const {
    return m_status;
}
void OAIDescribeThemeResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeThemeResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeThemeResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeThemeResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeThemeResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeThemeResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeThemeResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDescribeThemeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_theme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeThemeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
