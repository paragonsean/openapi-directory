/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysis::OAIAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysis::OAIAnalysis() {
    this->initializeModel();
}

OAIAnalysis::~OAIAnalysis() {}

void OAIAnalysis::initializeModel() {

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_data_set_arns_isSet = false;
    m_data_set_arns_isValid = false;

    m_theme_arn_isSet = false;
    m_theme_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_sheets_isSet = false;
    m_sheets_isValid = false;
}

void OAIAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysis::fromJsonObject(QJsonObject json) {

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_data_set_arns_isValid = ::OpenAPI::fromJsonValue(m_data_set_arns, json[QString("DataSetArns")]);
    m_data_set_arns_isSet = !json[QString("DataSetArns")].isNull() && m_data_set_arns_isValid;

    m_theme_arn_isValid = ::OpenAPI::fromJsonValue(m_theme_arn, json[QString("ThemeArn")]);
    m_theme_arn_isSet = !json[QString("ThemeArn")].isNull() && m_theme_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_sheets_isValid = ::OpenAPI::fromJsonValue(m_sheets, json[QString("Sheets")]);
    m_sheets_isSet = !json[QString("Sheets")].isNull() && m_sheets_isValid;
}

QString OAIAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_data_set_arns.isSet()) {
        obj.insert(QString("DataSetArns"), ::OpenAPI::toJsonValue(m_data_set_arns));
    }
    if (m_theme_arn_isSet) {
        obj.insert(QString("ThemeArn"), ::OpenAPI::toJsonValue(m_theme_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_sheets.isSet()) {
        obj.insert(QString("Sheets"), ::OpenAPI::toJsonValue(m_sheets));
    }
    return obj;
}

QString OAIAnalysis::getAnalysisId() const {
    return m_analysis_id;
}
void OAIAnalysis::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIAnalysis::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIAnalysis::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

QString OAIAnalysis::getArn() const {
    return m_arn;
}
void OAIAnalysis::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAnalysis::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAnalysis::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIAnalysis::getName() const {
    return m_name;
}
void OAIAnalysis::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnalysis::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnalysis::is_name_Valid() const{
    return m_name_isValid;
}

OAIResourceStatus OAIAnalysis::getStatus() const {
    return m_status;
}
void OAIAnalysis::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAnalysis::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAnalysis::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIAnalysis::getErrors() const {
    return m_errors;
}
void OAIAnalysis::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIAnalysis::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIAnalysis::is_errors_Valid() const{
    return m_errors_isValid;
}

QList OAIAnalysis::getDataSetArns() const {
    return m_data_set_arns;
}
void OAIAnalysis::setDataSetArns(const QList &data_set_arns) {
    m_data_set_arns = data_set_arns;
    m_data_set_arns_isSet = true;
}

bool OAIAnalysis::is_data_set_arns_Set() const{
    return m_data_set_arns_isSet;
}

bool OAIAnalysis::is_data_set_arns_Valid() const{
    return m_data_set_arns_isValid;
}

QString OAIAnalysis::getThemeArn() const {
    return m_theme_arn;
}
void OAIAnalysis::setThemeArn(const QString &theme_arn) {
    m_theme_arn = theme_arn;
    m_theme_arn_isSet = true;
}

bool OAIAnalysis::is_theme_arn_Set() const{
    return m_theme_arn_isSet;
}

bool OAIAnalysis::is_theme_arn_Valid() const{
    return m_theme_arn_isValid;
}

QDateTime OAIAnalysis::getCreatedTime() const {
    return m_created_time;
}
void OAIAnalysis::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIAnalysis::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAnalysis::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIAnalysis::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIAnalysis::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIAnalysis::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIAnalysis::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList OAIAnalysis::getSheets() const {
    return m_sheets;
}
void OAIAnalysis::setSheets(const QList &sheets) {
    m_sheets = sheets;
    m_sheets_isSet = true;
}

bool OAIAnalysis::is_sheets_Set() const{
    return m_sheets_isSet;
}

bool OAIAnalysis::is_sheets_Valid() const{
    return m_sheets_isValid;
}

bool OAIAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
