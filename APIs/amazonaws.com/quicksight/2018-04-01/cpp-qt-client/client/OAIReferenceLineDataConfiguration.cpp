/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLineDataConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLineDataConfiguration::OAIReferenceLineDataConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLineDataConfiguration::OAIReferenceLineDataConfiguration() {
    this->initializeModel();
}

OAIReferenceLineDataConfiguration::~OAIReferenceLineDataConfiguration() {}

void OAIReferenceLineDataConfiguration::initializeModel() {

    m_static_configuration_isSet = false;
    m_static_configuration_isValid = false;

    m_dynamic_configuration_isSet = false;
    m_dynamic_configuration_isValid = false;

    m_axis_binding_isSet = false;
    m_axis_binding_isValid = false;
}

void OAIReferenceLineDataConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLineDataConfiguration::fromJsonObject(QJsonObject json) {

    m_static_configuration_isValid = ::OpenAPI::fromJsonValue(m_static_configuration, json[QString("StaticConfiguration")]);
    m_static_configuration_isSet = !json[QString("StaticConfiguration")].isNull() && m_static_configuration_isValid;

    m_dynamic_configuration_isValid = ::OpenAPI::fromJsonValue(m_dynamic_configuration, json[QString("DynamicConfiguration")]);
    m_dynamic_configuration_isSet = !json[QString("DynamicConfiguration")].isNull() && m_dynamic_configuration_isValid;

    m_axis_binding_isValid = ::OpenAPI::fromJsonValue(m_axis_binding, json[QString("AxisBinding")]);
    m_axis_binding_isSet = !json[QString("AxisBinding")].isNull() && m_axis_binding_isValid;
}

QString OAIReferenceLineDataConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLineDataConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_static_configuration.isSet()) {
        obj.insert(QString("StaticConfiguration"), ::OpenAPI::toJsonValue(m_static_configuration));
    }
    if (m_dynamic_configuration.isSet()) {
        obj.insert(QString("DynamicConfiguration"), ::OpenAPI::toJsonValue(m_dynamic_configuration));
    }
    if (m_axis_binding.isSet()) {
        obj.insert(QString("AxisBinding"), ::OpenAPI::toJsonValue(m_axis_binding));
    }
    return obj;
}

OAIReferenceLineDataConfiguration_StaticConfiguration OAIReferenceLineDataConfiguration::getStaticConfiguration() const {
    return m_static_configuration;
}
void OAIReferenceLineDataConfiguration::setStaticConfiguration(const OAIReferenceLineDataConfiguration_StaticConfiguration &static_configuration) {
    m_static_configuration = static_configuration;
    m_static_configuration_isSet = true;
}

bool OAIReferenceLineDataConfiguration::is_static_configuration_Set() const{
    return m_static_configuration_isSet;
}

bool OAIReferenceLineDataConfiguration::is_static_configuration_Valid() const{
    return m_static_configuration_isValid;
}

OAIReferenceLineDataConfiguration_DynamicConfiguration OAIReferenceLineDataConfiguration::getDynamicConfiguration() const {
    return m_dynamic_configuration;
}
void OAIReferenceLineDataConfiguration::setDynamicConfiguration(const OAIReferenceLineDataConfiguration_DynamicConfiguration &dynamic_configuration) {
    m_dynamic_configuration = dynamic_configuration;
    m_dynamic_configuration_isSet = true;
}

bool OAIReferenceLineDataConfiguration::is_dynamic_configuration_Set() const{
    return m_dynamic_configuration_isSet;
}

bool OAIReferenceLineDataConfiguration::is_dynamic_configuration_Valid() const{
    return m_dynamic_configuration_isValid;
}

OAIAxisBinding OAIReferenceLineDataConfiguration::getAxisBinding() const {
    return m_axis_binding;
}
void OAIReferenceLineDataConfiguration::setAxisBinding(const OAIAxisBinding &axis_binding) {
    m_axis_binding = axis_binding;
    m_axis_binding_isSet = true;
}

bool OAIReferenceLineDataConfiguration::is_axis_binding_Set() const{
    return m_axis_binding_isSet;
}

bool OAIReferenceLineDataConfiguration::is_axis_binding_Valid() const{
    return m_axis_binding_isValid;
}

bool OAIReferenceLineDataConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_static_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_binding.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLineDataConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
