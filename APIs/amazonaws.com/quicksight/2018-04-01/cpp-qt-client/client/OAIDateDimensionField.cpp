/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateDimensionField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateDimensionField::OAIDateDimensionField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateDimensionField::OAIDateDimensionField() {
    this->initializeModel();
}

OAIDateDimensionField::~OAIDateDimensionField() {}

void OAIDateDimensionField::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_date_granularity_isSet = false;
    m_date_granularity_isValid = false;

    m_hierarchy_id_isSet = false;
    m_hierarchy_id_isValid = false;

    m_format_configuration_isSet = false;
    m_format_configuration_isValid = false;
}

void OAIDateDimensionField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateDimensionField::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_date_granularity_isValid = ::OpenAPI::fromJsonValue(m_date_granularity, json[QString("DateGranularity")]);
    m_date_granularity_isSet = !json[QString("DateGranularity")].isNull() && m_date_granularity_isValid;

    m_hierarchy_id_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_id, json[QString("HierarchyId")]);
    m_hierarchy_id_isSet = !json[QString("HierarchyId")].isNull() && m_hierarchy_id_isValid;

    m_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_format_configuration, json[QString("FormatConfiguration")]);
    m_format_configuration_isSet = !json[QString("FormatConfiguration")].isNull() && m_format_configuration_isValid;
}

QString OAIDateDimensionField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateDimensionField::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_date_granularity.isSet()) {
        obj.insert(QString("DateGranularity"), ::OpenAPI::toJsonValue(m_date_granularity));
    }
    if (m_hierarchy_id_isSet) {
        obj.insert(QString("HierarchyId"), ::OpenAPI::toJsonValue(m_hierarchy_id));
    }
    if (m_format_configuration.isSet()) {
        obj.insert(QString("FormatConfiguration"), ::OpenAPI::toJsonValue(m_format_configuration));
    }
    return obj;
}

QString OAIDateDimensionField::getFieldId() const {
    return m_field_id;
}
void OAIDateDimensionField::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIDateDimensionField::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIDateDimensionField::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIDateDimensionField_Column OAIDateDimensionField::getColumn() const {
    return m_column;
}
void OAIDateDimensionField::setColumn(const OAIDateDimensionField_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIDateDimensionField::is_column_Set() const{
    return m_column_isSet;
}

bool OAIDateDimensionField::is_column_Valid() const{
    return m_column_isValid;
}

OAITimeGranularity OAIDateDimensionField::getDateGranularity() const {
    return m_date_granularity;
}
void OAIDateDimensionField::setDateGranularity(const OAITimeGranularity &date_granularity) {
    m_date_granularity = date_granularity;
    m_date_granularity_isSet = true;
}

bool OAIDateDimensionField::is_date_granularity_Set() const{
    return m_date_granularity_isSet;
}

bool OAIDateDimensionField::is_date_granularity_Valid() const{
    return m_date_granularity_isValid;
}

QString OAIDateDimensionField::getHierarchyId() const {
    return m_hierarchy_id;
}
void OAIDateDimensionField::setHierarchyId(const QString &hierarchy_id) {
    m_hierarchy_id = hierarchy_id;
    m_hierarchy_id_isSet = true;
}

bool OAIDateDimensionField::is_hierarchy_id_Set() const{
    return m_hierarchy_id_isSet;
}

bool OAIDateDimensionField::is_hierarchy_id_Valid() const{
    return m_hierarchy_id_isValid;
}

OAIDateDimensionField_FormatConfiguration OAIDateDimensionField::getFormatConfiguration() const {
    return m_format_configuration;
}
void OAIDateDimensionField::setFormatConfiguration(const OAIDateDimensionField_FormatConfiguration &format_configuration) {
    m_format_configuration = format_configuration;
    m_format_configuration_isSet = true;
}

bool OAIDateDimensionField::is_format_configuration_Set() const{
    return m_format_configuration_isSet;
}

bool OAIDateDimensionField::is_format_configuration_Valid() const{
    return m_format_configuration_isValid;
}

bool OAIDateDimensionField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateDimensionField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_column_isValid && true;
}

} // namespace OpenAPI
