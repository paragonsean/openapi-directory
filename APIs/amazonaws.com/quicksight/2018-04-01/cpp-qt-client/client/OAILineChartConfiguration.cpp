/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineChartConfiguration::OAILineChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineChartConfiguration::OAILineChartConfiguration() {
    this->initializeModel();
}

OAILineChartConfiguration::~OAILineChartConfiguration() {}

void OAILineChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_forecast_configurations_isSet = false;
    m_forecast_configurations_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_small_multiples_options_isSet = false;
    m_small_multiples_options_isValid = false;

    m_x_axis_display_options_isSet = false;
    m_x_axis_display_options_isValid = false;

    m_x_axis_label_options_isSet = false;
    m_x_axis_label_options_isValid = false;

    m_primary_y_axis_display_options_isSet = false;
    m_primary_y_axis_display_options_isValid = false;

    m_primary_y_axis_label_options_isSet = false;
    m_primary_y_axis_label_options_isValid = false;

    m_secondary_y_axis_display_options_isSet = false;
    m_secondary_y_axis_display_options_isValid = false;

    m_secondary_y_axis_label_options_isSet = false;
    m_secondary_y_axis_label_options_isValid = false;

    m_default_series_settings_isSet = false;
    m_default_series_settings_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;

    m_reference_lines_isSet = false;
    m_reference_lines_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_contribution_analysis_defaults_isSet = false;
    m_contribution_analysis_defaults_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAILineChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_forecast_configurations_isValid = ::OpenAPI::fromJsonValue(m_forecast_configurations, json[QString("ForecastConfigurations")]);
    m_forecast_configurations_isSet = !json[QString("ForecastConfigurations")].isNull() && m_forecast_configurations_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_small_multiples_options_isValid = ::OpenAPI::fromJsonValue(m_small_multiples_options, json[QString("SmallMultiplesOptions")]);
    m_small_multiples_options_isSet = !json[QString("SmallMultiplesOptions")].isNull() && m_small_multiples_options_isValid;

    m_x_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_x_axis_display_options, json[QString("XAxisDisplayOptions")]);
    m_x_axis_display_options_isSet = !json[QString("XAxisDisplayOptions")].isNull() && m_x_axis_display_options_isValid;

    m_x_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_x_axis_label_options, json[QString("XAxisLabelOptions")]);
    m_x_axis_label_options_isSet = !json[QString("XAxisLabelOptions")].isNull() && m_x_axis_label_options_isValid;

    m_primary_y_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_primary_y_axis_display_options, json[QString("PrimaryYAxisDisplayOptions")]);
    m_primary_y_axis_display_options_isSet = !json[QString("PrimaryYAxisDisplayOptions")].isNull() && m_primary_y_axis_display_options_isValid;

    m_primary_y_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_primary_y_axis_label_options, json[QString("PrimaryYAxisLabelOptions")]);
    m_primary_y_axis_label_options_isSet = !json[QString("PrimaryYAxisLabelOptions")].isNull() && m_primary_y_axis_label_options_isValid;

    m_secondary_y_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_secondary_y_axis_display_options, json[QString("SecondaryYAxisDisplayOptions")]);
    m_secondary_y_axis_display_options_isSet = !json[QString("SecondaryYAxisDisplayOptions")].isNull() && m_secondary_y_axis_display_options_isValid;

    m_secondary_y_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_secondary_y_axis_label_options, json[QString("SecondaryYAxisLabelOptions")]);
    m_secondary_y_axis_label_options_isSet = !json[QString("SecondaryYAxisLabelOptions")].isNull() && m_secondary_y_axis_label_options_isValid;

    m_default_series_settings_isValid = ::OpenAPI::fromJsonValue(m_default_series_settings, json[QString("DefaultSeriesSettings")]);
    m_default_series_settings_isSet = !json[QString("DefaultSeriesSettings")].isNull() && m_default_series_settings_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("Series")]);
    m_series_isSet = !json[QString("Series")].isNull() && m_series_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;

    m_reference_lines_isValid = ::OpenAPI::fromJsonValue(m_reference_lines, json[QString("ReferenceLines")]);
    m_reference_lines_isSet = !json[QString("ReferenceLines")].isNull() && m_reference_lines_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_contribution_analysis_defaults_isValid = ::OpenAPI::fromJsonValue(m_contribution_analysis_defaults, json[QString("ContributionAnalysisDefaults")]);
    m_contribution_analysis_defaults_isSet = !json[QString("ContributionAnalysisDefaults")].isNull() && m_contribution_analysis_defaults_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAILineChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_forecast_configurations.isSet()) {
        obj.insert(QString("ForecastConfigurations"), ::OpenAPI::toJsonValue(m_forecast_configurations));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_small_multiples_options.isSet()) {
        obj.insert(QString("SmallMultiplesOptions"), ::OpenAPI::toJsonValue(m_small_multiples_options));
    }
    if (m_x_axis_display_options.isSet()) {
        obj.insert(QString("XAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_x_axis_display_options));
    }
    if (m_x_axis_label_options.isSet()) {
        obj.insert(QString("XAxisLabelOptions"), ::OpenAPI::toJsonValue(m_x_axis_label_options));
    }
    if (m_primary_y_axis_display_options.isSet()) {
        obj.insert(QString("PrimaryYAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_primary_y_axis_display_options));
    }
    if (m_primary_y_axis_label_options.isSet()) {
        obj.insert(QString("PrimaryYAxisLabelOptions"), ::OpenAPI::toJsonValue(m_primary_y_axis_label_options));
    }
    if (m_secondary_y_axis_display_options.isSet()) {
        obj.insert(QString("SecondaryYAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_secondary_y_axis_display_options));
    }
    if (m_secondary_y_axis_label_options.isSet()) {
        obj.insert(QString("SecondaryYAxisLabelOptions"), ::OpenAPI::toJsonValue(m_secondary_y_axis_label_options));
    }
    if (m_default_series_settings.isSet()) {
        obj.insert(QString("DefaultSeriesSettings"), ::OpenAPI::toJsonValue(m_default_series_settings));
    }
    if (m_series.isSet()) {
        obj.insert(QString("Series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    if (m_reference_lines.isSet()) {
        obj.insert(QString("ReferenceLines"), ::OpenAPI::toJsonValue(m_reference_lines));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_contribution_analysis_defaults.isSet()) {
        obj.insert(QString("ContributionAnalysisDefaults"), ::OpenAPI::toJsonValue(m_contribution_analysis_defaults));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAILineChartConfiguration_FieldWells OAILineChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAILineChartConfiguration::setFieldWells(const OAILineChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAILineChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAILineChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAILineChartConfiguration_SortConfiguration OAILineChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAILineChartConfiguration::setSortConfiguration(const OAILineChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAILineChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAILineChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

QList OAILineChartConfiguration::getForecastConfigurations() const {
    return m_forecast_configurations;
}
void OAILineChartConfiguration::setForecastConfigurations(const QList &forecast_configurations) {
    m_forecast_configurations = forecast_configurations;
    m_forecast_configurations_isSet = true;
}

bool OAILineChartConfiguration::is_forecast_configurations_Set() const{
    return m_forecast_configurations_isSet;
}

bool OAILineChartConfiguration::is_forecast_configurations_Valid() const{
    return m_forecast_configurations_isValid;
}

OAILineChartType OAILineChartConfiguration::getType() const {
    return m_type;
}
void OAILineChartConfiguration::setType(const OAILineChartType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILineChartConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAILineChartConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

OAIBarChartConfiguration_SmallMultiplesOptions OAILineChartConfiguration::getSmallMultiplesOptions() const {
    return m_small_multiples_options;
}
void OAILineChartConfiguration::setSmallMultiplesOptions(const OAIBarChartConfiguration_SmallMultiplesOptions &small_multiples_options) {
    m_small_multiples_options = small_multiples_options;
    m_small_multiples_options_isSet = true;
}

bool OAILineChartConfiguration::is_small_multiples_options_Set() const{
    return m_small_multiples_options_isSet;
}

bool OAILineChartConfiguration::is_small_multiples_options_Valid() const{
    return m_small_multiples_options_isValid;
}

OAIHistogramConfiguration_XAxisDisplayOptions OAILineChartConfiguration::getXAxisDisplayOptions() const {
    return m_x_axis_display_options;
}
void OAILineChartConfiguration::setXAxisDisplayOptions(const OAIHistogramConfiguration_XAxisDisplayOptions &x_axis_display_options) {
    m_x_axis_display_options = x_axis_display_options;
    m_x_axis_display_options_isSet = true;
}

bool OAILineChartConfiguration::is_x_axis_display_options_Set() const{
    return m_x_axis_display_options_isSet;
}

bool OAILineChartConfiguration::is_x_axis_display_options_Valid() const{
    return m_x_axis_display_options_isValid;
}

OAIHistogramConfiguration_XAxisLabelOptions OAILineChartConfiguration::getXAxisLabelOptions() const {
    return m_x_axis_label_options;
}
void OAILineChartConfiguration::setXAxisLabelOptions(const OAIHistogramConfiguration_XAxisLabelOptions &x_axis_label_options) {
    m_x_axis_label_options = x_axis_label_options;
    m_x_axis_label_options_isSet = true;
}

bool OAILineChartConfiguration::is_x_axis_label_options_Set() const{
    return m_x_axis_label_options_isSet;
}

bool OAILineChartConfiguration::is_x_axis_label_options_Valid() const{
    return m_x_axis_label_options_isValid;
}

OAILineChartConfiguration_PrimaryYAxisDisplayOptions OAILineChartConfiguration::getPrimaryYAxisDisplayOptions() const {
    return m_primary_y_axis_display_options;
}
void OAILineChartConfiguration::setPrimaryYAxisDisplayOptions(const OAILineChartConfiguration_PrimaryYAxisDisplayOptions &primary_y_axis_display_options) {
    m_primary_y_axis_display_options = primary_y_axis_display_options;
    m_primary_y_axis_display_options_isSet = true;
}

bool OAILineChartConfiguration::is_primary_y_axis_display_options_Set() const{
    return m_primary_y_axis_display_options_isSet;
}

bool OAILineChartConfiguration::is_primary_y_axis_display_options_Valid() const{
    return m_primary_y_axis_display_options_isValid;
}

OAILineChartConfiguration_PrimaryYAxisLabelOptions OAILineChartConfiguration::getPrimaryYAxisLabelOptions() const {
    return m_primary_y_axis_label_options;
}
void OAILineChartConfiguration::setPrimaryYAxisLabelOptions(const OAILineChartConfiguration_PrimaryYAxisLabelOptions &primary_y_axis_label_options) {
    m_primary_y_axis_label_options = primary_y_axis_label_options;
    m_primary_y_axis_label_options_isSet = true;
}

bool OAILineChartConfiguration::is_primary_y_axis_label_options_Set() const{
    return m_primary_y_axis_label_options_isSet;
}

bool OAILineChartConfiguration::is_primary_y_axis_label_options_Valid() const{
    return m_primary_y_axis_label_options_isValid;
}

OAILineChartConfiguration_PrimaryYAxisDisplayOptions OAILineChartConfiguration::getSecondaryYAxisDisplayOptions() const {
    return m_secondary_y_axis_display_options;
}
void OAILineChartConfiguration::setSecondaryYAxisDisplayOptions(const OAILineChartConfiguration_PrimaryYAxisDisplayOptions &secondary_y_axis_display_options) {
    m_secondary_y_axis_display_options = secondary_y_axis_display_options;
    m_secondary_y_axis_display_options_isSet = true;
}

bool OAILineChartConfiguration::is_secondary_y_axis_display_options_Set() const{
    return m_secondary_y_axis_display_options_isSet;
}

bool OAILineChartConfiguration::is_secondary_y_axis_display_options_Valid() const{
    return m_secondary_y_axis_display_options_isValid;
}

OAILineChartConfiguration_SecondaryYAxisLabelOptions OAILineChartConfiguration::getSecondaryYAxisLabelOptions() const {
    return m_secondary_y_axis_label_options;
}
void OAILineChartConfiguration::setSecondaryYAxisLabelOptions(const OAILineChartConfiguration_SecondaryYAxisLabelOptions &secondary_y_axis_label_options) {
    m_secondary_y_axis_label_options = secondary_y_axis_label_options;
    m_secondary_y_axis_label_options_isSet = true;
}

bool OAILineChartConfiguration::is_secondary_y_axis_label_options_Set() const{
    return m_secondary_y_axis_label_options_isSet;
}

bool OAILineChartConfiguration::is_secondary_y_axis_label_options_Valid() const{
    return m_secondary_y_axis_label_options_isValid;
}

OAILineChartConfiguration_DefaultSeriesSettings OAILineChartConfiguration::getDefaultSeriesSettings() const {
    return m_default_series_settings;
}
void OAILineChartConfiguration::setDefaultSeriesSettings(const OAILineChartConfiguration_DefaultSeriesSettings &default_series_settings) {
    m_default_series_settings = default_series_settings;
    m_default_series_settings_isSet = true;
}

bool OAILineChartConfiguration::is_default_series_settings_Set() const{
    return m_default_series_settings_isSet;
}

bool OAILineChartConfiguration::is_default_series_settings_Valid() const{
    return m_default_series_settings_isValid;
}

QList OAILineChartConfiguration::getSeries() const {
    return m_series;
}
void OAILineChartConfiguration::setSeries(const QList &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAILineChartConfiguration::is_series_Set() const{
    return m_series_isSet;
}

bool OAILineChartConfiguration::is_series_Valid() const{
    return m_series_isValid;
}

OAILineChartConfiguration_Legend OAILineChartConfiguration::getLegend() const {
    return m_legend;
}
void OAILineChartConfiguration::setLegend(const OAILineChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAILineChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAILineChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAILineChartConfiguration_DataLabels OAILineChartConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAILineChartConfiguration::setDataLabels(const OAILineChartConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAILineChartConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAILineChartConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

QList OAILineChartConfiguration::getReferenceLines() const {
    return m_reference_lines;
}
void OAILineChartConfiguration::setReferenceLines(const QList &reference_lines) {
    m_reference_lines = reference_lines;
    m_reference_lines_isSet = true;
}

bool OAILineChartConfiguration::is_reference_lines_Set() const{
    return m_reference_lines_isSet;
}

bool OAILineChartConfiguration::is_reference_lines_Valid() const{
    return m_reference_lines_isValid;
}

OAILineChartConfiguration_Tooltip OAILineChartConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAILineChartConfiguration::setTooltip(const OAILineChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAILineChartConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAILineChartConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

QList OAILineChartConfiguration::getContributionAnalysisDefaults() const {
    return m_contribution_analysis_defaults;
}
void OAILineChartConfiguration::setContributionAnalysisDefaults(const QList &contribution_analysis_defaults) {
    m_contribution_analysis_defaults = contribution_analysis_defaults;
    m_contribution_analysis_defaults_isSet = true;
}

bool OAILineChartConfiguration::is_contribution_analysis_defaults_Set() const{
    return m_contribution_analysis_defaults_isSet;
}

bool OAILineChartConfiguration::is_contribution_analysis_defaults_Valid() const{
    return m_contribution_analysis_defaults_isValid;
}

OAILineChartConfiguration_VisualPalette OAILineChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAILineChartConfiguration::setVisualPalette(const OAILineChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAILineChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAILineChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAILineChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_y_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_y_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_y_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_y_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_series_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_lines.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_analysis_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
