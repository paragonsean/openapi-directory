/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeDataSetResponse_DataSet.h
 *
 * 
 */

#ifndef OAIDescribeDataSetResponse_DataSet_H
#define OAIDescribeDataSetResponse_DataSet_H

#include <QJsonObject>

#include "OAIDataSetImportMode.h"
#include "OAIDataSet_DataSetUsageConfiguration.h"
#include "OAIDataSet_RowLevelPermissionDataSet.h"
#include "OAIDataSet_RowLevelPermissionTagConfiguration.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataSet_RowLevelPermissionDataSet;
class OAIDataSet_RowLevelPermissionTagConfiguration;
class OAIDataSet_DataSetUsageConfiguration;

class OAIDescribeDataSetResponse_DataSet : public OAIObject {
public:
    OAIDescribeDataSetResponse_DataSet();
    OAIDescribeDataSetResponse_DataSet(QString json);
    ~OAIDescribeDataSetResponse_DataSet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getDataSetId() const;
    void setDataSetId(const QString &data_set_id);
    bool is_data_set_id_Set() const;
    bool is_data_set_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    QMap getPhysicalTableMap() const;
    void setPhysicalTableMap(const QMap &physical_table_map);
    bool is_physical_table_map_Set() const;
    bool is_physical_table_map_Valid() const;

    QMap getLogicalTableMap() const;
    void setLogicalTableMap(const QMap &logical_table_map);
    bool is_logical_table_map_Set() const;
    bool is_logical_table_map_Valid() const;

    QList getOutputColumns() const;
    void setOutputColumns(const QList &output_columns);
    bool is_output_columns_Set() const;
    bool is_output_columns_Valid() const;

    OAIDataSetImportMode getImportMode() const;
    void setImportMode(const OAIDataSetImportMode &import_mode);
    bool is_import_mode_Set() const;
    bool is_import_mode_Valid() const;

    qint32 getConsumedSpiceCapacityInBytes() const;
    void setConsumedSpiceCapacityInBytes(const qint32 &consumed_spice_capacity_in_bytes);
    bool is_consumed_spice_capacity_in_bytes_Set() const;
    bool is_consumed_spice_capacity_in_bytes_Valid() const;

    QList getColumnGroups() const;
    void setColumnGroups(const QList &column_groups);
    bool is_column_groups_Set() const;
    bool is_column_groups_Valid() const;

    QMap getFieldFolders() const;
    void setFieldFolders(const QMap &field_folders);
    bool is_field_folders_Set() const;
    bool is_field_folders_Valid() const;

    OAIDataSet_RowLevelPermissionDataSet getRowLevelPermissionDataSet() const;
    void setRowLevelPermissionDataSet(const OAIDataSet_RowLevelPermissionDataSet &row_level_permission_data_set);
    bool is_row_level_permission_data_set_Set() const;
    bool is_row_level_permission_data_set_Valid() const;

    OAIDataSet_RowLevelPermissionTagConfiguration getRowLevelPermissionTagConfiguration() const;
    void setRowLevelPermissionTagConfiguration(const OAIDataSet_RowLevelPermissionTagConfiguration &row_level_permission_tag_configuration);
    bool is_row_level_permission_tag_configuration_Set() const;
    bool is_row_level_permission_tag_configuration_Valid() const;

    QList getColumnLevelPermissionRules() const;
    void setColumnLevelPermissionRules(const QList &column_level_permission_rules);
    bool is_column_level_permission_rules_Set() const;
    bool is_column_level_permission_rules_Valid() const;

    OAIDataSet_DataSetUsageConfiguration getDataSetUsageConfiguration() const;
    void setDataSetUsageConfiguration(const OAIDataSet_DataSetUsageConfiguration &data_set_usage_configuration);
    bool is_data_set_usage_configuration_Set() const;
    bool is_data_set_usage_configuration_Valid() const;

    QList getDatasetParameters() const;
    void setDatasetParameters(const QList &dataset_parameters);
    bool is_dataset_parameters_Set() const;
    bool is_dataset_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_data_set_id;
    bool m_data_set_id_isSet;
    bool m_data_set_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    QMap m_physical_table_map;
    bool m_physical_table_map_isSet;
    bool m_physical_table_map_isValid;

    QMap m_logical_table_map;
    bool m_logical_table_map_isSet;
    bool m_logical_table_map_isValid;

    QList m_output_columns;
    bool m_output_columns_isSet;
    bool m_output_columns_isValid;

    OAIDataSetImportMode m_import_mode;
    bool m_import_mode_isSet;
    bool m_import_mode_isValid;

    qint32 m_consumed_spice_capacity_in_bytes;
    bool m_consumed_spice_capacity_in_bytes_isSet;
    bool m_consumed_spice_capacity_in_bytes_isValid;

    QList m_column_groups;
    bool m_column_groups_isSet;
    bool m_column_groups_isValid;

    QMap m_field_folders;
    bool m_field_folders_isSet;
    bool m_field_folders_isValid;

    OAIDataSet_RowLevelPermissionDataSet m_row_level_permission_data_set;
    bool m_row_level_permission_data_set_isSet;
    bool m_row_level_permission_data_set_isValid;

    OAIDataSet_RowLevelPermissionTagConfiguration m_row_level_permission_tag_configuration;
    bool m_row_level_permission_tag_configuration_isSet;
    bool m_row_level_permission_tag_configuration_isValid;

    QList m_column_level_permission_rules;
    bool m_column_level_permission_rules_isSet;
    bool m_column_level_permission_rules_isValid;

    OAIDataSet_DataSetUsageConfiguration m_data_set_usage_configuration;
    bool m_data_set_usage_configuration_isSet;
    bool m_data_set_usage_configuration_isValid;

    QList m_dataset_parameters;
    bool m_dataset_parameters_isSet;
    bool m_dataset_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeDataSetResponse_DataSet)

#endif // OAIDescribeDataSetResponse_DataSet_H
