/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJoinInstruction_LeftJoinKeyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJoinInstruction_LeftJoinKeyProperties::OAIJoinInstruction_LeftJoinKeyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJoinInstruction_LeftJoinKeyProperties::OAIJoinInstruction_LeftJoinKeyProperties() {
    this->initializeModel();
}

OAIJoinInstruction_LeftJoinKeyProperties::~OAIJoinInstruction_LeftJoinKeyProperties() {}

void OAIJoinInstruction_LeftJoinKeyProperties::initializeModel() {

    m_unique_key_isSet = false;
    m_unique_key_isValid = false;
}

void OAIJoinInstruction_LeftJoinKeyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJoinInstruction_LeftJoinKeyProperties::fromJsonObject(QJsonObject json) {

    m_unique_key_isValid = ::OpenAPI::fromJsonValue(m_unique_key, json[QString("UniqueKey")]);
    m_unique_key_isSet = !json[QString("UniqueKey")].isNull() && m_unique_key_isValid;
}

QString OAIJoinInstruction_LeftJoinKeyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJoinInstruction_LeftJoinKeyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_unique_key_isSet) {
        obj.insert(QString("UniqueKey"), ::OpenAPI::toJsonValue(m_unique_key));
    }
    return obj;
}

bool OAIJoinInstruction_LeftJoinKeyProperties::getUniqueKey() const {
    return m_unique_key;
}
void OAIJoinInstruction_LeftJoinKeyProperties::setUniqueKey(const bool &unique_key) {
    m_unique_key = unique_key;
    m_unique_key_isSet = true;
}

bool OAIJoinInstruction_LeftJoinKeyProperties::is_unique_key_Set() const{
    return m_unique_key_isSet;
}

bool OAIJoinInstruction_LeftJoinKeyProperties::is_unique_key_Valid() const{
    return m_unique_key_isValid;
}

bool OAIJoinInstruction_LeftJoinKeyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unique_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJoinInstruction_LeftJoinKeyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
