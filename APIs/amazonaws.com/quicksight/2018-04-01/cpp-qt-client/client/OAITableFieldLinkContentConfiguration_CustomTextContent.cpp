/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableFieldLinkContentConfiguration_CustomTextContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableFieldLinkContentConfiguration_CustomTextContent::OAITableFieldLinkContentConfiguration_CustomTextContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableFieldLinkContentConfiguration_CustomTextContent::OAITableFieldLinkContentConfiguration_CustomTextContent() {
    this->initializeModel();
}

OAITableFieldLinkContentConfiguration_CustomTextContent::~OAITableFieldLinkContentConfiguration_CustomTextContent() {}

void OAITableFieldLinkContentConfiguration_CustomTextContent::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_font_configuration_isSet = false;
    m_font_configuration_isValid = false;
}

void OAITableFieldLinkContentConfiguration_CustomTextContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableFieldLinkContentConfiguration_CustomTextContent::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_font_configuration, json[QString("FontConfiguration")]);
    m_font_configuration_isSet = !json[QString("FontConfiguration")].isNull() && m_font_configuration_isValid;
}

QString OAITableFieldLinkContentConfiguration_CustomTextContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableFieldLinkContentConfiguration_CustomTextContent::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_font_configuration.isSet()) {
        obj.insert(QString("FontConfiguration"), ::OpenAPI::toJsonValue(m_font_configuration));
    }
    return obj;
}

QString OAITableFieldLinkContentConfiguration_CustomTextContent::getValue() const {
    return m_value;
}
void OAITableFieldLinkContentConfiguration_CustomTextContent::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITableFieldLinkContentConfiguration_CustomTextContent::is_value_Set() const{
    return m_value_isSet;
}

bool OAITableFieldLinkContentConfiguration_CustomTextContent::is_value_Valid() const{
    return m_value_isValid;
}

OAITableFieldCustomTextContent_FontConfiguration OAITableFieldLinkContentConfiguration_CustomTextContent::getFontConfiguration() const {
    return m_font_configuration;
}
void OAITableFieldLinkContentConfiguration_CustomTextContent::setFontConfiguration(const OAITableFieldCustomTextContent_FontConfiguration &font_configuration) {
    m_font_configuration = font_configuration;
    m_font_configuration_isSet = true;
}

bool OAITableFieldLinkContentConfiguration_CustomTextContent::is_font_configuration_Set() const{
    return m_font_configuration_isSet;
}

bool OAITableFieldLinkContentConfiguration_CustomTextContent::is_font_configuration_Valid() const{
    return m_font_configuration_isValid;
}

bool OAITableFieldLinkContentConfiguration_CustomTextContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableFieldLinkContentConfiguration_CustomTextContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_font_configuration_isValid && true;
}

} // namespace OpenAPI
