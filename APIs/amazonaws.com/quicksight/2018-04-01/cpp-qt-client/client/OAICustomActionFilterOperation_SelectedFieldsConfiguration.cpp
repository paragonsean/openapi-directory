/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomActionFilterOperation_SelectedFieldsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomActionFilterOperation_SelectedFieldsConfiguration::OAICustomActionFilterOperation_SelectedFieldsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomActionFilterOperation_SelectedFieldsConfiguration::OAICustomActionFilterOperation_SelectedFieldsConfiguration() {
    this->initializeModel();
}

OAICustomActionFilterOperation_SelectedFieldsConfiguration::~OAICustomActionFilterOperation_SelectedFieldsConfiguration() {}

void OAICustomActionFilterOperation_SelectedFieldsConfiguration::initializeModel() {

    m_selected_fields_isSet = false;
    m_selected_fields_isValid = false;

    m_selected_field_options_isSet = false;
    m_selected_field_options_isValid = false;

    m_selected_columns_isSet = false;
    m_selected_columns_isValid = false;
}

void OAICustomActionFilterOperation_SelectedFieldsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomActionFilterOperation_SelectedFieldsConfiguration::fromJsonObject(QJsonObject json) {

    m_selected_fields_isValid = ::OpenAPI::fromJsonValue(m_selected_fields, json[QString("SelectedFields")]);
    m_selected_fields_isSet = !json[QString("SelectedFields")].isNull() && m_selected_fields_isValid;

    m_selected_field_options_isValid = ::OpenAPI::fromJsonValue(m_selected_field_options, json[QString("SelectedFieldOptions")]);
    m_selected_field_options_isSet = !json[QString("SelectedFieldOptions")].isNull() && m_selected_field_options_isValid;

    m_selected_columns_isValid = ::OpenAPI::fromJsonValue(m_selected_columns, json[QString("SelectedColumns")]);
    m_selected_columns_isSet = !json[QString("SelectedColumns")].isNull() && m_selected_columns_isValid;
}

QString OAICustomActionFilterOperation_SelectedFieldsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomActionFilterOperation_SelectedFieldsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_fields.isSet()) {
        obj.insert(QString("SelectedFields"), ::OpenAPI::toJsonValue(m_selected_fields));
    }
    if (m_selected_field_options.isSet()) {
        obj.insert(QString("SelectedFieldOptions"), ::OpenAPI::toJsonValue(m_selected_field_options));
    }
    if (m_selected_columns.isSet()) {
        obj.insert(QString("SelectedColumns"), ::OpenAPI::toJsonValue(m_selected_columns));
    }
    return obj;
}

QList OAICustomActionFilterOperation_SelectedFieldsConfiguration::getSelectedFields() const {
    return m_selected_fields;
}
void OAICustomActionFilterOperation_SelectedFieldsConfiguration::setSelectedFields(const QList &selected_fields) {
    m_selected_fields = selected_fields;
    m_selected_fields_isSet = true;
}

bool OAICustomActionFilterOperation_SelectedFieldsConfiguration::is_selected_fields_Set() const{
    return m_selected_fields_isSet;
}

bool OAICustomActionFilterOperation_SelectedFieldsConfiguration::is_selected_fields_Valid() const{
    return m_selected_fields_isValid;
}

OAISelectedFieldOptions OAICustomActionFilterOperation_SelectedFieldsConfiguration::getSelectedFieldOptions() const {
    return m_selected_field_options;
}
void OAICustomActionFilterOperation_SelectedFieldsConfiguration::setSelectedFieldOptions(const OAISelectedFieldOptions &selected_field_options) {
    m_selected_field_options = selected_field_options;
    m_selected_field_options_isSet = true;
}

bool OAICustomActionFilterOperation_SelectedFieldsConfiguration::is_selected_field_options_Set() const{
    return m_selected_field_options_isSet;
}

bool OAICustomActionFilterOperation_SelectedFieldsConfiguration::is_selected_field_options_Valid() const{
    return m_selected_field_options_isValid;
}

QList OAICustomActionFilterOperation_SelectedFieldsConfiguration::getSelectedColumns() const {
    return m_selected_columns;
}
void OAICustomActionFilterOperation_SelectedFieldsConfiguration::setSelectedColumns(const QList &selected_columns) {
    m_selected_columns = selected_columns;
    m_selected_columns_isSet = true;
}

bool OAICustomActionFilterOperation_SelectedFieldsConfiguration::is_selected_columns_Set() const{
    return m_selected_columns_isSet;
}

bool OAICustomActionFilterOperation_SelectedFieldsConfiguration::is_selected_columns_Valid() const{
    return m_selected_columns_isValid;
}

bool OAICustomActionFilterOperation_SelectedFieldsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_field_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomActionFilterOperation_SelectedFieldsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
