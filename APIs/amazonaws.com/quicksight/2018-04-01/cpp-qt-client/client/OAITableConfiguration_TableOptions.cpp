/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableConfiguration_TableOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableConfiguration_TableOptions::OAITableConfiguration_TableOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableConfiguration_TableOptions::OAITableConfiguration_TableOptions() {
    this->initializeModel();
}

OAITableConfiguration_TableOptions::~OAITableConfiguration_TableOptions() {}

void OAITableConfiguration_TableOptions::initializeModel() {

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_header_style_isSet = false;
    m_header_style_isValid = false;

    m_cell_style_isSet = false;
    m_cell_style_isValid = false;

    m_row_alternate_color_options_isSet = false;
    m_row_alternate_color_options_isValid = false;
}

void OAITableConfiguration_TableOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableConfiguration_TableOptions::fromJsonObject(QJsonObject json) {

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("Orientation")]);
    m_orientation_isSet = !json[QString("Orientation")].isNull() && m_orientation_isValid;

    m_header_style_isValid = ::OpenAPI::fromJsonValue(m_header_style, json[QString("HeaderStyle")]);
    m_header_style_isSet = !json[QString("HeaderStyle")].isNull() && m_header_style_isValid;

    m_cell_style_isValid = ::OpenAPI::fromJsonValue(m_cell_style, json[QString("CellStyle")]);
    m_cell_style_isSet = !json[QString("CellStyle")].isNull() && m_cell_style_isValid;

    m_row_alternate_color_options_isValid = ::OpenAPI::fromJsonValue(m_row_alternate_color_options, json[QString("RowAlternateColorOptions")]);
    m_row_alternate_color_options_isSet = !json[QString("RowAlternateColorOptions")].isNull() && m_row_alternate_color_options_isValid;
}

QString OAITableConfiguration_TableOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableConfiguration_TableOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_orientation.isSet()) {
        obj.insert(QString("Orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_header_style.isSet()) {
        obj.insert(QString("HeaderStyle"), ::OpenAPI::toJsonValue(m_header_style));
    }
    if (m_cell_style.isSet()) {
        obj.insert(QString("CellStyle"), ::OpenAPI::toJsonValue(m_cell_style));
    }
    if (m_row_alternate_color_options.isSet()) {
        obj.insert(QString("RowAlternateColorOptions"), ::OpenAPI::toJsonValue(m_row_alternate_color_options));
    }
    return obj;
}

OAITableOrientation OAITableConfiguration_TableOptions::getOrientation() const {
    return m_orientation;
}
void OAITableConfiguration_TableOptions::setOrientation(const OAITableOrientation &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAITableConfiguration_TableOptions::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAITableConfiguration_TableOptions::is_orientation_Valid() const{
    return m_orientation_isValid;
}

OAITableOptions_HeaderStyle OAITableConfiguration_TableOptions::getHeaderStyle() const {
    return m_header_style;
}
void OAITableConfiguration_TableOptions::setHeaderStyle(const OAITableOptions_HeaderStyle &header_style) {
    m_header_style = header_style;
    m_header_style_isSet = true;
}

bool OAITableConfiguration_TableOptions::is_header_style_Set() const{
    return m_header_style_isSet;
}

bool OAITableConfiguration_TableOptions::is_header_style_Valid() const{
    return m_header_style_isValid;
}

OAITableOptions_CellStyle OAITableConfiguration_TableOptions::getCellStyle() const {
    return m_cell_style;
}
void OAITableConfiguration_TableOptions::setCellStyle(const OAITableOptions_CellStyle &cell_style) {
    m_cell_style = cell_style;
    m_cell_style_isSet = true;
}

bool OAITableConfiguration_TableOptions::is_cell_style_Set() const{
    return m_cell_style_isSet;
}

bool OAITableConfiguration_TableOptions::is_cell_style_Valid() const{
    return m_cell_style_isValid;
}

OAITableOptions_RowAlternateColorOptions OAITableConfiguration_TableOptions::getRowAlternateColorOptions() const {
    return m_row_alternate_color_options;
}
void OAITableConfiguration_TableOptions::setRowAlternateColorOptions(const OAITableOptions_RowAlternateColorOptions &row_alternate_color_options) {
    m_row_alternate_color_options = row_alternate_color_options;
    m_row_alternate_color_options_isSet = true;
}

bool OAITableConfiguration_TableOptions::is_row_alternate_color_options_Set() const{
    return m_row_alternate_color_options_isSet;
}

bool OAITableConfiguration_TableOptions::is_row_alternate_color_options_Valid() const{
    return m_row_alternate_color_options_isValid;
}

bool OAITableConfiguration_TableOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_orientation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_alternate_color_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableConfiguration_TableOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
