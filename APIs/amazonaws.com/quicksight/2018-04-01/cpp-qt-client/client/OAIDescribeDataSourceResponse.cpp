/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDataSourceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDataSourceResponse::OAIDescribeDataSourceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDataSourceResponse::OAIDescribeDataSourceResponse() {
    this->initializeModel();
}

OAIDescribeDataSourceResponse::~OAIDescribeDataSourceResponse() {}

void OAIDescribeDataSourceResponse::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeDataSourceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDataSourceResponse::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeDataSourceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDataSourceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIDescribeDataSourceResponse_DataSource OAIDescribeDataSourceResponse::getDataSource() const {
    return m_data_source;
}
void OAIDescribeDataSourceResponse::setDataSource(const OAIDescribeDataSourceResponse_DataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIDescribeDataSourceResponse::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIDescribeDataSourceResponse::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIDescribeDataSourceResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeDataSourceResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeDataSourceResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeDataSourceResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeDataSourceResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDataSourceResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDataSourceResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDataSourceResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeDataSourceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDataSourceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
