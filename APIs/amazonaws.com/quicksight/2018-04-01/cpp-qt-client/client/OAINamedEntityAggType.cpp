/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamedEntityAggType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamedEntityAggType::OAINamedEntityAggType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamedEntityAggType::OAINamedEntityAggType() {
    this->initializeModel();
}

OAINamedEntityAggType::~OAINamedEntityAggType() {}

void OAINamedEntityAggType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINamedEntityAggType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINamedEntityAggType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SUM", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::SUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::MIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAX", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::MAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVERAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::AVERAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISTINCT_COUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::DISTINCT_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STDEV", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::STDEV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STDEVP", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::STDEVP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::VAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VARP", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::VARP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PERCENTILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::PERCENTILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDIAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::MEDIAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamedEntityAggType::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINamedEntityAggType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINamedEntityAggType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINamedEntityAggType::SUM:
            val = "SUM";
            break;
        case eOAINamedEntityAggType::MIN:
            val = "MIN";
            break;
        case eOAINamedEntityAggType::MAX:
            val = "MAX";
            break;
        case eOAINamedEntityAggType::COUNT:
            val = "COUNT";
            break;
        case eOAINamedEntityAggType::AVERAGE:
            val = "AVERAGE";
            break;
        case eOAINamedEntityAggType::DISTINCT_COUNT:
            val = "DISTINCT_COUNT";
            break;
        case eOAINamedEntityAggType::STDEV:
            val = "STDEV";
            break;
        case eOAINamedEntityAggType::STDEVP:
            val = "STDEVP";
            break;
        case eOAINamedEntityAggType::VAR:
            val = "VAR";
            break;
        case eOAINamedEntityAggType::VARP:
            val = "VARP";
            break;
        case eOAINamedEntityAggType::PERCENTILE:
            val = "PERCENTILE";
            break;
        case eOAINamedEntityAggType::MEDIAN:
            val = "MEDIAN";
            break;
        case eOAINamedEntityAggType::CUSTOM:
            val = "CUSTOM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINamedEntityAggType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINamedEntityAggType::eOAINamedEntityAggType OAINamedEntityAggType::getValue() const {
    return m_value;
}

void OAINamedEntityAggType::setValue(const OAINamedEntityAggType::eOAINamedEntityAggType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINamedEntityAggType::isSet() const {
    
    return m_value_isSet;
}

bool OAINamedEntityAggType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
