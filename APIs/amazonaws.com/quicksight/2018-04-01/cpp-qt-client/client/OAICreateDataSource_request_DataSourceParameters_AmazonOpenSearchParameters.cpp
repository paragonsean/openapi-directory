/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters() {
    this->initializeModel();
}

OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::~OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters() {}

void OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;
}

void OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;
}

QString OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    return obj;
}

QString OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::getDomain() const {
    return m_domain;
}
void OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && true;
}

} // namespace OpenAPI
