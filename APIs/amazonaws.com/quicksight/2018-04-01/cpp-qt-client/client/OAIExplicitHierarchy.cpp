/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExplicitHierarchy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExplicitHierarchy::OAIExplicitHierarchy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExplicitHierarchy::OAIExplicitHierarchy() {
    this->initializeModel();
}

OAIExplicitHierarchy::~OAIExplicitHierarchy() {}

void OAIExplicitHierarchy::initializeModel() {

    m_hierarchy_id_isSet = false;
    m_hierarchy_id_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_drill_down_filters_isSet = false;
    m_drill_down_filters_isValid = false;
}

void OAIExplicitHierarchy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExplicitHierarchy::fromJsonObject(QJsonObject json) {

    m_hierarchy_id_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_id, json[QString("HierarchyId")]);
    m_hierarchy_id_isSet = !json[QString("HierarchyId")].isNull() && m_hierarchy_id_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("Columns")]);
    m_columns_isSet = !json[QString("Columns")].isNull() && m_columns_isValid;

    m_drill_down_filters_isValid = ::OpenAPI::fromJsonValue(m_drill_down_filters, json[QString("DrillDownFilters")]);
    m_drill_down_filters_isSet = !json[QString("DrillDownFilters")].isNull() && m_drill_down_filters_isValid;
}

QString OAIExplicitHierarchy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExplicitHierarchy::asJsonObject() const {
    QJsonObject obj;
    if (m_hierarchy_id_isSet) {
        obj.insert(QString("HierarchyId"), ::OpenAPI::toJsonValue(m_hierarchy_id));
    }
    if (m_columns.isSet()) {
        obj.insert(QString("Columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_drill_down_filters.isSet()) {
        obj.insert(QString("DrillDownFilters"), ::OpenAPI::toJsonValue(m_drill_down_filters));
    }
    return obj;
}

QString OAIExplicitHierarchy::getHierarchyId() const {
    return m_hierarchy_id;
}
void OAIExplicitHierarchy::setHierarchyId(const QString &hierarchy_id) {
    m_hierarchy_id = hierarchy_id;
    m_hierarchy_id_isSet = true;
}

bool OAIExplicitHierarchy::is_hierarchy_id_Set() const{
    return m_hierarchy_id_isSet;
}

bool OAIExplicitHierarchy::is_hierarchy_id_Valid() const{
    return m_hierarchy_id_isValid;
}

QList OAIExplicitHierarchy::getColumns() const {
    return m_columns;
}
void OAIExplicitHierarchy::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIExplicitHierarchy::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIExplicitHierarchy::is_columns_Valid() const{
    return m_columns_isValid;
}

QList OAIExplicitHierarchy::getDrillDownFilters() const {
    return m_drill_down_filters;
}
void OAIExplicitHierarchy::setDrillDownFilters(const QList &drill_down_filters) {
    m_drill_down_filters = drill_down_filters;
    m_drill_down_filters_isSet = true;
}

bool OAIExplicitHierarchy::is_drill_down_filters_Set() const{
    return m_drill_down_filters_isSet;
}

bool OAIExplicitHierarchy::is_drill_down_filters_Valid() const{
    return m_drill_down_filters_isValid;
}

bool OAIExplicitHierarchy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hierarchy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drill_down_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExplicitHierarchy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hierarchy_id_isValid && m_columns_isValid && true;
}

} // namespace OpenAPI
