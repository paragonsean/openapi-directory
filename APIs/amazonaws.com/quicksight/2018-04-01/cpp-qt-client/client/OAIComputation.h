/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComputation.h
 *
 * &lt;p&gt;The computation union that is used in an insight visual.&lt;/p&gt; &lt;p&gt;This is a union type structure. For this structure to be valid, only one of the attributes can be defined.&lt;/p&gt;
 */

#ifndef OAIComputation_H
#define OAIComputation_H

#include <QJsonObject>

#include "OAIComputation_Forecast.h"
#include "OAIComputation_GrowthRate.h"
#include "OAIComputation_MaximumMinimum.h"
#include "OAIComputation_MetricComparison.h"
#include "OAIComputation_PeriodOverPeriod.h"
#include "OAIComputation_PeriodToDate.h"
#include "OAIComputation_TopBottomMovers.h"
#include "OAIComputation_TopBottomRanked.h"
#include "OAIComputation_TotalAggregation.h"
#include "OAIComputation_UniqueValues.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComputation_TopBottomRanked;
class OAIComputation_TopBottomMovers;
class OAIComputation_TotalAggregation;
class OAIComputation_MaximumMinimum;
class OAIComputation_MetricComparison;
class OAIComputation_PeriodOverPeriod;
class OAIComputation_PeriodToDate;
class OAIComputation_GrowthRate;
class OAIComputation_UniqueValues;
class OAIComputation_Forecast;

class OAIComputation : public OAIObject {
public:
    OAIComputation();
    OAIComputation(QString json);
    ~OAIComputation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIComputation_TopBottomRanked getTopBottomRanked() const;
    void setTopBottomRanked(const OAIComputation_TopBottomRanked &top_bottom_ranked);
    bool is_top_bottom_ranked_Set() const;
    bool is_top_bottom_ranked_Valid() const;

    OAIComputation_TopBottomMovers getTopBottomMovers() const;
    void setTopBottomMovers(const OAIComputation_TopBottomMovers &top_bottom_movers);
    bool is_top_bottom_movers_Set() const;
    bool is_top_bottom_movers_Valid() const;

    OAIComputation_TotalAggregation getTotalAggregation() const;
    void setTotalAggregation(const OAIComputation_TotalAggregation &total_aggregation);
    bool is_total_aggregation_Set() const;
    bool is_total_aggregation_Valid() const;

    OAIComputation_MaximumMinimum getMaximumMinimum() const;
    void setMaximumMinimum(const OAIComputation_MaximumMinimum &maximum_minimum);
    bool is_maximum_minimum_Set() const;
    bool is_maximum_minimum_Valid() const;

    OAIComputation_MetricComparison getMetricComparison() const;
    void setMetricComparison(const OAIComputation_MetricComparison &metric_comparison);
    bool is_metric_comparison_Set() const;
    bool is_metric_comparison_Valid() const;

    OAIComputation_PeriodOverPeriod getPeriodOverPeriod() const;
    void setPeriodOverPeriod(const OAIComputation_PeriodOverPeriod &period_over_period);
    bool is_period_over_period_Set() const;
    bool is_period_over_period_Valid() const;

    OAIComputation_PeriodToDate getPeriodToDate() const;
    void setPeriodToDate(const OAIComputation_PeriodToDate &period_to_date);
    bool is_period_to_date_Set() const;
    bool is_period_to_date_Valid() const;

    OAIComputation_GrowthRate getGrowthRate() const;
    void setGrowthRate(const OAIComputation_GrowthRate &growth_rate);
    bool is_growth_rate_Set() const;
    bool is_growth_rate_Valid() const;

    OAIComputation_UniqueValues getUniqueValues() const;
    void setUniqueValues(const OAIComputation_UniqueValues &unique_values);
    bool is_unique_values_Set() const;
    bool is_unique_values_Valid() const;

    OAIComputation_Forecast getForecast() const;
    void setForecast(const OAIComputation_Forecast &forecast);
    bool is_forecast_Set() const;
    bool is_forecast_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIComputation_TopBottomRanked m_top_bottom_ranked;
    bool m_top_bottom_ranked_isSet;
    bool m_top_bottom_ranked_isValid;

    OAIComputation_TopBottomMovers m_top_bottom_movers;
    bool m_top_bottom_movers_isSet;
    bool m_top_bottom_movers_isValid;

    OAIComputation_TotalAggregation m_total_aggregation;
    bool m_total_aggregation_isSet;
    bool m_total_aggregation_isValid;

    OAIComputation_MaximumMinimum m_maximum_minimum;
    bool m_maximum_minimum_isSet;
    bool m_maximum_minimum_isValid;

    OAIComputation_MetricComparison m_metric_comparison;
    bool m_metric_comparison_isSet;
    bool m_metric_comparison_isValid;

    OAIComputation_PeriodOverPeriod m_period_over_period;
    bool m_period_over_period_isSet;
    bool m_period_over_period_isValid;

    OAIComputation_PeriodToDate m_period_to_date;
    bool m_period_to_date_isSet;
    bool m_period_to_date_isValid;

    OAIComputation_GrowthRate m_growth_rate;
    bool m_growth_rate_isSet;
    bool m_growth_rate_isValid;

    OAIComputation_UniqueValues m_unique_values;
    bool m_unique_values_isSet;
    bool m_unique_values_isValid;

    OAIComputation_Forecast m_forecast;
    bool m_forecast_isSet;
    bool m_forecast_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComputation)

#endif // OAIComputation_H
