/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordCloudChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordCloudChartConfiguration::OAIWordCloudChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordCloudChartConfiguration::OAIWordCloudChartConfiguration() {
    this->initializeModel();
}

OAIWordCloudChartConfiguration::~OAIWordCloudChartConfiguration() {}

void OAIWordCloudChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_category_label_options_isSet = false;
    m_category_label_options_isValid = false;

    m_word_cloud_options_isSet = false;
    m_word_cloud_options_isValid = false;
}

void OAIWordCloudChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordCloudChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_category_label_options_isValid = ::OpenAPI::fromJsonValue(m_category_label_options, json[QString("CategoryLabelOptions")]);
    m_category_label_options_isSet = !json[QString("CategoryLabelOptions")].isNull() && m_category_label_options_isValid;

    m_word_cloud_options_isValid = ::OpenAPI::fromJsonValue(m_word_cloud_options, json[QString("WordCloudOptions")]);
    m_word_cloud_options_isSet = !json[QString("WordCloudOptions")].isNull() && m_word_cloud_options_isValid;
}

QString OAIWordCloudChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordCloudChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_category_label_options.isSet()) {
        obj.insert(QString("CategoryLabelOptions"), ::OpenAPI::toJsonValue(m_category_label_options));
    }
    if (m_word_cloud_options.isSet()) {
        obj.insert(QString("WordCloudOptions"), ::OpenAPI::toJsonValue(m_word_cloud_options));
    }
    return obj;
}

OAIWordCloudChartConfiguration_FieldWells OAIWordCloudChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIWordCloudChartConfiguration::setFieldWells(const OAIWordCloudChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIWordCloudChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIWordCloudChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIWordCloudChartConfiguration_SortConfiguration OAIWordCloudChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIWordCloudChartConfiguration::setSortConfiguration(const OAIWordCloudChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIWordCloudChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIWordCloudChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIWordCloudChartConfiguration_CategoryLabelOptions OAIWordCloudChartConfiguration::getCategoryLabelOptions() const {
    return m_category_label_options;
}
void OAIWordCloudChartConfiguration::setCategoryLabelOptions(const OAIWordCloudChartConfiguration_CategoryLabelOptions &category_label_options) {
    m_category_label_options = category_label_options;
    m_category_label_options_isSet = true;
}

bool OAIWordCloudChartConfiguration::is_category_label_options_Set() const{
    return m_category_label_options_isSet;
}

bool OAIWordCloudChartConfiguration::is_category_label_options_Valid() const{
    return m_category_label_options_isValid;
}

OAIWordCloudChartConfiguration_WordCloudOptions OAIWordCloudChartConfiguration::getWordCloudOptions() const {
    return m_word_cloud_options;
}
void OAIWordCloudChartConfiguration::setWordCloudOptions(const OAIWordCloudChartConfiguration_WordCloudOptions &word_cloud_options) {
    m_word_cloud_options = word_cloud_options;
    m_word_cloud_options_isSet = true;
}

bool OAIWordCloudChartConfiguration::is_word_cloud_options_Set() const{
    return m_word_cloud_options_isSet;
}

bool OAIWordCloudChartConfiguration::is_word_cloud_options_Valid() const{
    return m_word_cloud_options_isValid;
}

bool OAIWordCloudChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_cloud_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordCloudChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
