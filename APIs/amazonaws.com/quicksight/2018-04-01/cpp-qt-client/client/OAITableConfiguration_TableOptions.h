/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITableConfiguration_TableOptions.h
 *
 * 
 */

#ifndef OAITableConfiguration_TableOptions_H
#define OAITableConfiguration_TableOptions_H

#include <QJsonObject>

#include "OAITableOptions_CellStyle.h"
#include "OAITableOptions_HeaderStyle.h"
#include "OAITableOptions_RowAlternateColorOptions.h"
#include "OAITableOrientation.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITableOptions_HeaderStyle;
class OAITableOptions_CellStyle;
class OAITableOptions_RowAlternateColorOptions;

class OAITableConfiguration_TableOptions : public OAIObject {
public:
    OAITableConfiguration_TableOptions();
    OAITableConfiguration_TableOptions(QString json);
    ~OAITableConfiguration_TableOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITableOrientation getOrientation() const;
    void setOrientation(const OAITableOrientation &orientation);
    bool is_orientation_Set() const;
    bool is_orientation_Valid() const;

    OAITableOptions_HeaderStyle getHeaderStyle() const;
    void setHeaderStyle(const OAITableOptions_HeaderStyle &header_style);
    bool is_header_style_Set() const;
    bool is_header_style_Valid() const;

    OAITableOptions_CellStyle getCellStyle() const;
    void setCellStyle(const OAITableOptions_CellStyle &cell_style);
    bool is_cell_style_Set() const;
    bool is_cell_style_Valid() const;

    OAITableOptions_RowAlternateColorOptions getRowAlternateColorOptions() const;
    void setRowAlternateColorOptions(const OAITableOptions_RowAlternateColorOptions &row_alternate_color_options);
    bool is_row_alternate_color_options_Set() const;
    bool is_row_alternate_color_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITableOrientation m_orientation;
    bool m_orientation_isSet;
    bool m_orientation_isValid;

    OAITableOptions_HeaderStyle m_header_style;
    bool m_header_style_isSet;
    bool m_header_style_isValid;

    OAITableOptions_CellStyle m_cell_style;
    bool m_cell_style_isSet;
    bool m_cell_style_isValid;

    OAITableOptions_RowAlternateColorOptions m_row_alternate_color_options;
    bool m_row_alternate_color_options_isSet;
    bool m_row_alternate_color_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITableConfiguration_TableOptions)

#endif // OAITableConfiguration_TableOptions_H
