/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDataSetRefreshPropertiesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDataSetRefreshPropertiesResponse::OAIDescribeDataSetRefreshPropertiesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDataSetRefreshPropertiesResponse::OAIDescribeDataSetRefreshPropertiesResponse() {
    this->initializeModel();
}

OAIDescribeDataSetRefreshPropertiesResponse::~OAIDescribeDataSetRefreshPropertiesResponse() {}

void OAIDescribeDataSetRefreshPropertiesResponse::initializeModel() {

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_data_set_refresh_properties_isSet = false;
    m_data_set_refresh_properties_isValid = false;
}

void OAIDescribeDataSetRefreshPropertiesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDataSetRefreshPropertiesResponse::fromJsonObject(QJsonObject json) {

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_data_set_refresh_properties_isValid = ::OpenAPI::fromJsonValue(m_data_set_refresh_properties, json[QString("DataSetRefreshProperties")]);
    m_data_set_refresh_properties_isSet = !json[QString("DataSetRefreshProperties")].isNull() && m_data_set_refresh_properties_isValid;
}

QString OAIDescribeDataSetRefreshPropertiesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDataSetRefreshPropertiesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_data_set_refresh_properties.isSet()) {
        obj.insert(QString("DataSetRefreshProperties"), ::OpenAPI::toJsonValue(m_data_set_refresh_properties));
    }
    return obj;
}

QString OAIDescribeDataSetRefreshPropertiesResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeDataSetRefreshPropertiesResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeDataSetRefreshPropertiesResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeDataSetRefreshPropertiesResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeDataSetRefreshPropertiesResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDataSetRefreshPropertiesResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDataSetRefreshPropertiesResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDataSetRefreshPropertiesResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIDescribeDataSetRefreshPropertiesResponse_DataSetRefreshProperties OAIDescribeDataSetRefreshPropertiesResponse::getDataSetRefreshProperties() const {
    return m_data_set_refresh_properties;
}
void OAIDescribeDataSetRefreshPropertiesResponse::setDataSetRefreshProperties(const OAIDescribeDataSetRefreshPropertiesResponse_DataSetRefreshProperties &data_set_refresh_properties) {
    m_data_set_refresh_properties = data_set_refresh_properties;
    m_data_set_refresh_properties_isSet = true;
}

bool OAIDescribeDataSetRefreshPropertiesResponse::is_data_set_refresh_properties_Set() const{
    return m_data_set_refresh_properties_isSet;
}

bool OAIDescribeDataSetRefreshPropertiesResponse::is_data_set_refresh_properties_Valid() const{
    return m_data_set_refresh_properties_isValid;
}

bool OAIDescribeDataSetRefreshPropertiesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_refresh_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDataSetRefreshPropertiesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
