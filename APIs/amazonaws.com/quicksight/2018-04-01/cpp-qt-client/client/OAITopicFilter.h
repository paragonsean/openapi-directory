/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITopicFilter.h
 *
 * A structure that represents a filter used to select items for a topic.
 */

#ifndef OAITopicFilter_H
#define OAITopicFilter_H

#include <QJsonObject>

#include "OAIFilterClass.h"
#include "OAINamedFilterType.h"
#include "OAITopicFilter_CategoryFilter.h"
#include "OAITopicFilter_DateRangeFilter.h"
#include "OAITopicFilter_NumericEqualityFilter.h"
#include "OAITopicFilter_NumericRangeFilter.h"
#include "OAITopicFilter_RelativeDateFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITopicFilter_CategoryFilter;
class OAITopicFilter_NumericEqualityFilter;
class OAITopicFilter_NumericRangeFilter;
class OAITopicFilter_DateRangeFilter;
class OAITopicFilter_RelativeDateFilter;

class OAITopicFilter : public OAIObject {
public:
    OAITopicFilter();
    OAITopicFilter(QString json);
    ~OAITopicFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFilterDescription() const;
    void setFilterDescription(const QString &filter_description);
    bool is_filter_description_Set() const;
    bool is_filter_description_Valid() const;

    OAIFilterClass getFilterClass() const;
    void setFilterClass(const OAIFilterClass &filter_class);
    bool is_filter_class_Set() const;
    bool is_filter_class_Valid() const;

    QString getFilterName() const;
    void setFilterName(const QString &filter_name);
    bool is_filter_name_Set() const;
    bool is_filter_name_Valid() const;

    QList getFilterSynonyms() const;
    void setFilterSynonyms(const QList &filter_synonyms);
    bool is_filter_synonyms_Set() const;
    bool is_filter_synonyms_Valid() const;

    QString getOperandFieldName() const;
    void setOperandFieldName(const QString &operand_field_name);
    bool is_operand_field_name_Set() const;
    bool is_operand_field_name_Valid() const;

    OAINamedFilterType getFilterType() const;
    void setFilterType(const OAINamedFilterType &filter_type);
    bool is_filter_type_Set() const;
    bool is_filter_type_Valid() const;

    OAITopicFilter_CategoryFilter getCategoryFilter() const;
    void setCategoryFilter(const OAITopicFilter_CategoryFilter &category_filter);
    bool is_category_filter_Set() const;
    bool is_category_filter_Valid() const;

    OAITopicFilter_NumericEqualityFilter getNumericEqualityFilter() const;
    void setNumericEqualityFilter(const OAITopicFilter_NumericEqualityFilter &numeric_equality_filter);
    bool is_numeric_equality_filter_Set() const;
    bool is_numeric_equality_filter_Valid() const;

    OAITopicFilter_NumericRangeFilter getNumericRangeFilter() const;
    void setNumericRangeFilter(const OAITopicFilter_NumericRangeFilter &numeric_range_filter);
    bool is_numeric_range_filter_Set() const;
    bool is_numeric_range_filter_Valid() const;

    OAITopicFilter_DateRangeFilter getDateRangeFilter() const;
    void setDateRangeFilter(const OAITopicFilter_DateRangeFilter &date_range_filter);
    bool is_date_range_filter_Set() const;
    bool is_date_range_filter_Valid() const;

    OAITopicFilter_RelativeDateFilter getRelativeDateFilter() const;
    void setRelativeDateFilter(const OAITopicFilter_RelativeDateFilter &relative_date_filter);
    bool is_relative_date_filter_Set() const;
    bool is_relative_date_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_filter_description;
    bool m_filter_description_isSet;
    bool m_filter_description_isValid;

    OAIFilterClass m_filter_class;
    bool m_filter_class_isSet;
    bool m_filter_class_isValid;

    QString m_filter_name;
    bool m_filter_name_isSet;
    bool m_filter_name_isValid;

    QList m_filter_synonyms;
    bool m_filter_synonyms_isSet;
    bool m_filter_synonyms_isValid;

    QString m_operand_field_name;
    bool m_operand_field_name_isSet;
    bool m_operand_field_name_isValid;

    OAINamedFilterType m_filter_type;
    bool m_filter_type_isSet;
    bool m_filter_type_isValid;

    OAITopicFilter_CategoryFilter m_category_filter;
    bool m_category_filter_isSet;
    bool m_category_filter_isValid;

    OAITopicFilter_NumericEqualityFilter m_numeric_equality_filter;
    bool m_numeric_equality_filter_isSet;
    bool m_numeric_equality_filter_isValid;

    OAITopicFilter_NumericRangeFilter m_numeric_range_filter;
    bool m_numeric_range_filter_isSet;
    bool m_numeric_range_filter_isValid;

    OAITopicFilter_DateRangeFilter m_date_range_filter;
    bool m_date_range_filter_isSet;
    bool m_date_range_filter_isValid;

    OAITopicFilter_RelativeDateFilter m_relative_date_filter;
    bool m_relative_date_filter_isSet;
    bool m_relative_date_filter_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITopicFilter)

#endif // OAITopicFilter_H
