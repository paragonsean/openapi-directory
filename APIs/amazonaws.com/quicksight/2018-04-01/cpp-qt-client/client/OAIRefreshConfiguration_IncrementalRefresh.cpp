/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefreshConfiguration_IncrementalRefresh.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefreshConfiguration_IncrementalRefresh::OAIRefreshConfiguration_IncrementalRefresh(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefreshConfiguration_IncrementalRefresh::OAIRefreshConfiguration_IncrementalRefresh() {
    this->initializeModel();
}

OAIRefreshConfiguration_IncrementalRefresh::~OAIRefreshConfiguration_IncrementalRefresh() {}

void OAIRefreshConfiguration_IncrementalRefresh::initializeModel() {

    m_lookback_window_isSet = false;
    m_lookback_window_isValid = false;
}

void OAIRefreshConfiguration_IncrementalRefresh::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefreshConfiguration_IncrementalRefresh::fromJsonObject(QJsonObject json) {

    m_lookback_window_isValid = ::OpenAPI::fromJsonValue(m_lookback_window, json[QString("LookbackWindow")]);
    m_lookback_window_isSet = !json[QString("LookbackWindow")].isNull() && m_lookback_window_isValid;
}

QString OAIRefreshConfiguration_IncrementalRefresh::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefreshConfiguration_IncrementalRefresh::asJsonObject() const {
    QJsonObject obj;
    if (m_lookback_window.isSet()) {
        obj.insert(QString("LookbackWindow"), ::OpenAPI::toJsonValue(m_lookback_window));
    }
    return obj;
}

OAIIncrementalRefresh_LookbackWindow OAIRefreshConfiguration_IncrementalRefresh::getLookbackWindow() const {
    return m_lookback_window;
}
void OAIRefreshConfiguration_IncrementalRefresh::setLookbackWindow(const OAIIncrementalRefresh_LookbackWindow &lookback_window) {
    m_lookback_window = lookback_window;
    m_lookback_window_isSet = true;
}

bool OAIRefreshConfiguration_IncrementalRefresh::is_lookback_window_Set() const{
    return m_lookback_window_isSet;
}

bool OAIRefreshConfiguration_IncrementalRefresh::is_lookback_window_Valid() const{
    return m_lookback_window_isValid;
}

bool OAIRefreshConfiguration_IncrementalRefresh::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lookback_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefreshConfiguration_IncrementalRefresh::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lookback_window_isValid && true;
}

} // namespace OpenAPI
