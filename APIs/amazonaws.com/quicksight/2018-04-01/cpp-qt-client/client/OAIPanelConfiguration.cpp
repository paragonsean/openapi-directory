/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPanelConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPanelConfiguration::OAIPanelConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPanelConfiguration::OAIPanelConfiguration() {
    this->initializeModel();
}

OAIPanelConfiguration::~OAIPanelConfiguration() {}

void OAIPanelConfiguration::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_border_visibility_isSet = false;
    m_border_visibility_isValid = false;

    m_border_thickness_isSet = false;
    m_border_thickness_isValid = false;

    m_border_style_isSet = false;
    m_border_style_isValid = false;

    m_border_color_isSet = false;
    m_border_color_isValid = false;

    m_gutter_visibility_isSet = false;
    m_gutter_visibility_isValid = false;

    m_gutter_spacing_isSet = false;
    m_gutter_spacing_isValid = false;

    m_background_visibility_isSet = false;
    m_background_visibility_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;
}

void OAIPanelConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPanelConfiguration::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_border_visibility_isValid = ::OpenAPI::fromJsonValue(m_border_visibility, json[QString("BorderVisibility")]);
    m_border_visibility_isSet = !json[QString("BorderVisibility")].isNull() && m_border_visibility_isValid;

    m_border_thickness_isValid = ::OpenAPI::fromJsonValue(m_border_thickness, json[QString("BorderThickness")]);
    m_border_thickness_isSet = !json[QString("BorderThickness")].isNull() && m_border_thickness_isValid;

    m_border_style_isValid = ::OpenAPI::fromJsonValue(m_border_style, json[QString("BorderStyle")]);
    m_border_style_isSet = !json[QString("BorderStyle")].isNull() && m_border_style_isValid;

    m_border_color_isValid = ::OpenAPI::fromJsonValue(m_border_color, json[QString("BorderColor")]);
    m_border_color_isSet = !json[QString("BorderColor")].isNull() && m_border_color_isValid;

    m_gutter_visibility_isValid = ::OpenAPI::fromJsonValue(m_gutter_visibility, json[QString("GutterVisibility")]);
    m_gutter_visibility_isSet = !json[QString("GutterVisibility")].isNull() && m_gutter_visibility_isValid;

    m_gutter_spacing_isValid = ::OpenAPI::fromJsonValue(m_gutter_spacing, json[QString("GutterSpacing")]);
    m_gutter_spacing_isSet = !json[QString("GutterSpacing")].isNull() && m_gutter_spacing_isValid;

    m_background_visibility_isValid = ::OpenAPI::fromJsonValue(m_background_visibility, json[QString("BackgroundVisibility")]);
    m_background_visibility_isSet = !json[QString("BackgroundVisibility")].isNull() && m_background_visibility_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;
}

QString OAIPanelConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPanelConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_title.isSet()) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_border_visibility.isSet()) {
        obj.insert(QString("BorderVisibility"), ::OpenAPI::toJsonValue(m_border_visibility));
    }
    if (m_border_thickness_isSet) {
        obj.insert(QString("BorderThickness"), ::OpenAPI::toJsonValue(m_border_thickness));
    }
    if (m_border_style.isSet()) {
        obj.insert(QString("BorderStyle"), ::OpenAPI::toJsonValue(m_border_style));
    }
    if (m_border_color_isSet) {
        obj.insert(QString("BorderColor"), ::OpenAPI::toJsonValue(m_border_color));
    }
    if (m_gutter_visibility.isSet()) {
        obj.insert(QString("GutterVisibility"), ::OpenAPI::toJsonValue(m_gutter_visibility));
    }
    if (m_gutter_spacing_isSet) {
        obj.insert(QString("GutterSpacing"), ::OpenAPI::toJsonValue(m_gutter_spacing));
    }
    if (m_background_visibility.isSet()) {
        obj.insert(QString("BackgroundVisibility"), ::OpenAPI::toJsonValue(m_background_visibility));
    }
    if (m_background_color_isSet) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    return obj;
}

OAIPanelConfiguration_Title OAIPanelConfiguration::getTitle() const {
    return m_title;
}
void OAIPanelConfiguration::setTitle(const OAIPanelConfiguration_Title &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPanelConfiguration::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPanelConfiguration::is_title_Valid() const{
    return m_title_isValid;
}

OAIVisibility OAIPanelConfiguration::getBorderVisibility() const {
    return m_border_visibility;
}
void OAIPanelConfiguration::setBorderVisibility(const OAIVisibility &border_visibility) {
    m_border_visibility = border_visibility;
    m_border_visibility_isSet = true;
}

bool OAIPanelConfiguration::is_border_visibility_Set() const{
    return m_border_visibility_isSet;
}

bool OAIPanelConfiguration::is_border_visibility_Valid() const{
    return m_border_visibility_isValid;
}

QString OAIPanelConfiguration::getBorderThickness() const {
    return m_border_thickness;
}
void OAIPanelConfiguration::setBorderThickness(const QString &border_thickness) {
    m_border_thickness = border_thickness;
    m_border_thickness_isSet = true;
}

bool OAIPanelConfiguration::is_border_thickness_Set() const{
    return m_border_thickness_isSet;
}

bool OAIPanelConfiguration::is_border_thickness_Valid() const{
    return m_border_thickness_isValid;
}

OAIPanelBorderStyle OAIPanelConfiguration::getBorderStyle() const {
    return m_border_style;
}
void OAIPanelConfiguration::setBorderStyle(const OAIPanelBorderStyle &border_style) {
    m_border_style = border_style;
    m_border_style_isSet = true;
}

bool OAIPanelConfiguration::is_border_style_Set() const{
    return m_border_style_isSet;
}

bool OAIPanelConfiguration::is_border_style_Valid() const{
    return m_border_style_isValid;
}

QString OAIPanelConfiguration::getBorderColor() const {
    return m_border_color;
}
void OAIPanelConfiguration::setBorderColor(const QString &border_color) {
    m_border_color = border_color;
    m_border_color_isSet = true;
}

bool OAIPanelConfiguration::is_border_color_Set() const{
    return m_border_color_isSet;
}

bool OAIPanelConfiguration::is_border_color_Valid() const{
    return m_border_color_isValid;
}

OAIVisibility OAIPanelConfiguration::getGutterVisibility() const {
    return m_gutter_visibility;
}
void OAIPanelConfiguration::setGutterVisibility(const OAIVisibility &gutter_visibility) {
    m_gutter_visibility = gutter_visibility;
    m_gutter_visibility_isSet = true;
}

bool OAIPanelConfiguration::is_gutter_visibility_Set() const{
    return m_gutter_visibility_isSet;
}

bool OAIPanelConfiguration::is_gutter_visibility_Valid() const{
    return m_gutter_visibility_isValid;
}

QString OAIPanelConfiguration::getGutterSpacing() const {
    return m_gutter_spacing;
}
void OAIPanelConfiguration::setGutterSpacing(const QString &gutter_spacing) {
    m_gutter_spacing = gutter_spacing;
    m_gutter_spacing_isSet = true;
}

bool OAIPanelConfiguration::is_gutter_spacing_Set() const{
    return m_gutter_spacing_isSet;
}

bool OAIPanelConfiguration::is_gutter_spacing_Valid() const{
    return m_gutter_spacing_isValid;
}

OAIVisibility OAIPanelConfiguration::getBackgroundVisibility() const {
    return m_background_visibility;
}
void OAIPanelConfiguration::setBackgroundVisibility(const OAIVisibility &background_visibility) {
    m_background_visibility = background_visibility;
    m_background_visibility_isSet = true;
}

bool OAIPanelConfiguration::is_background_visibility_Set() const{
    return m_background_visibility_isSet;
}

bool OAIPanelConfiguration::is_background_visibility_Valid() const{
    return m_background_visibility_isValid;
}

QString OAIPanelConfiguration::getBackgroundColor() const {
    return m_background_color;
}
void OAIPanelConfiguration::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIPanelConfiguration::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIPanelConfiguration::is_background_color_Valid() const{
    return m_background_color_isValid;
}

bool OAIPanelConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_thickness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gutter_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gutter_spacing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPanelConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
