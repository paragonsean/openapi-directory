/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRowLevelPermissionTagConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRowLevelPermissionTagConfiguration::OAIRowLevelPermissionTagConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRowLevelPermissionTagConfiguration::OAIRowLevelPermissionTagConfiguration() {
    this->initializeModel();
}

OAIRowLevelPermissionTagConfiguration::~OAIRowLevelPermissionTagConfiguration() {}

void OAIRowLevelPermissionTagConfiguration::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_rules_isSet = false;
    m_tag_rules_isValid = false;

    m_tag_rule_configurations_isSet = false;
    m_tag_rule_configurations_isValid = false;
}

void OAIRowLevelPermissionTagConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRowLevelPermissionTagConfiguration::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tag_rules_isValid = ::OpenAPI::fromJsonValue(m_tag_rules, json[QString("TagRules")]);
    m_tag_rules_isSet = !json[QString("TagRules")].isNull() && m_tag_rules_isValid;

    m_tag_rule_configurations_isValid = ::OpenAPI::fromJsonValue(m_tag_rule_configurations, json[QString("TagRuleConfigurations")]);
    m_tag_rule_configurations_isSet = !json[QString("TagRuleConfigurations")].isNull() && m_tag_rule_configurations_isValid;
}

QString OAIRowLevelPermissionTagConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRowLevelPermissionTagConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_rules.isSet()) {
        obj.insert(QString("TagRules"), ::OpenAPI::toJsonValue(m_tag_rules));
    }
    if (m_tag_rule_configurations.isSet()) {
        obj.insert(QString("TagRuleConfigurations"), ::OpenAPI::toJsonValue(m_tag_rule_configurations));
    }
    return obj;
}

OAIStatus OAIRowLevelPermissionTagConfiguration::getStatus() const {
    return m_status;
}
void OAIRowLevelPermissionTagConfiguration::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRowLevelPermissionTagConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRowLevelPermissionTagConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIRowLevelPermissionTagConfiguration::getTagRules() const {
    return m_tag_rules;
}
void OAIRowLevelPermissionTagConfiguration::setTagRules(const QList &tag_rules) {
    m_tag_rules = tag_rules;
    m_tag_rules_isSet = true;
}

bool OAIRowLevelPermissionTagConfiguration::is_tag_rules_Set() const{
    return m_tag_rules_isSet;
}

bool OAIRowLevelPermissionTagConfiguration::is_tag_rules_Valid() const{
    return m_tag_rules_isValid;
}

QList OAIRowLevelPermissionTagConfiguration::getTagRuleConfigurations() const {
    return m_tag_rule_configurations;
}
void OAIRowLevelPermissionTagConfiguration::setTagRuleConfigurations(const QList &tag_rule_configurations) {
    m_tag_rule_configurations = tag_rule_configurations;
    m_tag_rule_configurations_isSet = true;
}

bool OAIRowLevelPermissionTagConfiguration::is_tag_rule_configurations_Set() const{
    return m_tag_rule_configurations_isSet;
}

bool OAIRowLevelPermissionTagConfiguration::is_tag_rule_configurations_Valid() const{
    return m_tag_rule_configurations_isValid;
}

bool OAIRowLevelPermissionTagConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_rule_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRowLevelPermissionTagConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tag_rules_isValid && true;
}

} // namespace OpenAPI
