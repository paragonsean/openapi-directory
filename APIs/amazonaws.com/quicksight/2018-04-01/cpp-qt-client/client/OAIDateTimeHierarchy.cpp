/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeHierarchy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeHierarchy::OAIDateTimeHierarchy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeHierarchy::OAIDateTimeHierarchy() {
    this->initializeModel();
}

OAIDateTimeHierarchy::~OAIDateTimeHierarchy() {}

void OAIDateTimeHierarchy::initializeModel() {

    m_hierarchy_id_isSet = false;
    m_hierarchy_id_isValid = false;

    m_drill_down_filters_isSet = false;
    m_drill_down_filters_isValid = false;
}

void OAIDateTimeHierarchy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeHierarchy::fromJsonObject(QJsonObject json) {

    m_hierarchy_id_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_id, json[QString("HierarchyId")]);
    m_hierarchy_id_isSet = !json[QString("HierarchyId")].isNull() && m_hierarchy_id_isValid;

    m_drill_down_filters_isValid = ::OpenAPI::fromJsonValue(m_drill_down_filters, json[QString("DrillDownFilters")]);
    m_drill_down_filters_isSet = !json[QString("DrillDownFilters")].isNull() && m_drill_down_filters_isValid;
}

QString OAIDateTimeHierarchy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeHierarchy::asJsonObject() const {
    QJsonObject obj;
    if (m_hierarchy_id_isSet) {
        obj.insert(QString("HierarchyId"), ::OpenAPI::toJsonValue(m_hierarchy_id));
    }
    if (m_drill_down_filters.isSet()) {
        obj.insert(QString("DrillDownFilters"), ::OpenAPI::toJsonValue(m_drill_down_filters));
    }
    return obj;
}

QString OAIDateTimeHierarchy::getHierarchyId() const {
    return m_hierarchy_id;
}
void OAIDateTimeHierarchy::setHierarchyId(const QString &hierarchy_id) {
    m_hierarchy_id = hierarchy_id;
    m_hierarchy_id_isSet = true;
}

bool OAIDateTimeHierarchy::is_hierarchy_id_Set() const{
    return m_hierarchy_id_isSet;
}

bool OAIDateTimeHierarchy::is_hierarchy_id_Valid() const{
    return m_hierarchy_id_isValid;
}

QList OAIDateTimeHierarchy::getDrillDownFilters() const {
    return m_drill_down_filters;
}
void OAIDateTimeHierarchy::setDrillDownFilters(const QList &drill_down_filters) {
    m_drill_down_filters = drill_down_filters;
    m_drill_down_filters_isSet = true;
}

bool OAIDateTimeHierarchy::is_drill_down_filters_Set() const{
    return m_drill_down_filters_isSet;
}

bool OAIDateTimeHierarchy::is_drill_down_filters_Valid() const{
    return m_drill_down_filters_isValid;
}

bool OAIDateTimeHierarchy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hierarchy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drill_down_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeHierarchy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hierarchy_id_isValid && true;
}

} // namespace OpenAPI
