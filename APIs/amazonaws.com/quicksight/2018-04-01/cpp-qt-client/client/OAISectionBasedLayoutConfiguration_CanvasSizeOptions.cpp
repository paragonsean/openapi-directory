/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISectionBasedLayoutConfiguration_CanvasSizeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISectionBasedLayoutConfiguration_CanvasSizeOptions::OAISectionBasedLayoutConfiguration_CanvasSizeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISectionBasedLayoutConfiguration_CanvasSizeOptions::OAISectionBasedLayoutConfiguration_CanvasSizeOptions() {
    this->initializeModel();
}

OAISectionBasedLayoutConfiguration_CanvasSizeOptions::~OAISectionBasedLayoutConfiguration_CanvasSizeOptions() {}

void OAISectionBasedLayoutConfiguration_CanvasSizeOptions::initializeModel() {

    m_paper_canvas_size_options_isSet = false;
    m_paper_canvas_size_options_isValid = false;
}

void OAISectionBasedLayoutConfiguration_CanvasSizeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISectionBasedLayoutConfiguration_CanvasSizeOptions::fromJsonObject(QJsonObject json) {

    m_paper_canvas_size_options_isValid = ::OpenAPI::fromJsonValue(m_paper_canvas_size_options, json[QString("PaperCanvasSizeOptions")]);
    m_paper_canvas_size_options_isSet = !json[QString("PaperCanvasSizeOptions")].isNull() && m_paper_canvas_size_options_isValid;
}

QString OAISectionBasedLayoutConfiguration_CanvasSizeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISectionBasedLayoutConfiguration_CanvasSizeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_paper_canvas_size_options.isSet()) {
        obj.insert(QString("PaperCanvasSizeOptions"), ::OpenAPI::toJsonValue(m_paper_canvas_size_options));
    }
    return obj;
}

OAISectionBasedLayoutCanvasSizeOptions_PaperCanvasSizeOptions OAISectionBasedLayoutConfiguration_CanvasSizeOptions::getPaperCanvasSizeOptions() const {
    return m_paper_canvas_size_options;
}
void OAISectionBasedLayoutConfiguration_CanvasSizeOptions::setPaperCanvasSizeOptions(const OAISectionBasedLayoutCanvasSizeOptions_PaperCanvasSizeOptions &paper_canvas_size_options) {
    m_paper_canvas_size_options = paper_canvas_size_options;
    m_paper_canvas_size_options_isSet = true;
}

bool OAISectionBasedLayoutConfiguration_CanvasSizeOptions::is_paper_canvas_size_options_Set() const{
    return m_paper_canvas_size_options_isSet;
}

bool OAISectionBasedLayoutConfiguration_CanvasSizeOptions::is_paper_canvas_size_options_Valid() const{
    return m_paper_canvas_size_options_isValid;
}

bool OAISectionBasedLayoutConfiguration_CanvasSizeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_paper_canvas_size_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISectionBasedLayoutConfiguration_CanvasSizeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
