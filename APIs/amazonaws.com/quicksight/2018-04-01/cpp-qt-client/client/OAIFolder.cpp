/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFolder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFolder::OAIFolder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFolder::OAIFolder() {
    this->initializeModel();
}

OAIFolder::~OAIFolder() {}

void OAIFolder::initializeModel() {

    m_folder_id_isSet = false;
    m_folder_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_folder_type_isSet = false;
    m_folder_type_isValid = false;

    m_folder_path_isSet = false;
    m_folder_path_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIFolder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFolder::fromJsonObject(QJsonObject json) {

    m_folder_id_isValid = ::OpenAPI::fromJsonValue(m_folder_id, json[QString("FolderId")]);
    m_folder_id_isSet = !json[QString("FolderId")].isNull() && m_folder_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_folder_type_isValid = ::OpenAPI::fromJsonValue(m_folder_type, json[QString("FolderType")]);
    m_folder_type_isSet = !json[QString("FolderType")].isNull() && m_folder_type_isValid;

    m_folder_path_isValid = ::OpenAPI::fromJsonValue(m_folder_path, json[QString("FolderPath")]);
    m_folder_path_isSet = !json[QString("FolderPath")].isNull() && m_folder_path_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIFolder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFolder::asJsonObject() const {
    QJsonObject obj;
    if (m_folder_id_isSet) {
        obj.insert(QString("FolderId"), ::OpenAPI::toJsonValue(m_folder_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_folder_type.isSet()) {
        obj.insert(QString("FolderType"), ::OpenAPI::toJsonValue(m_folder_type));
    }
    if (m_folder_path.isSet()) {
        obj.insert(QString("FolderPath"), ::OpenAPI::toJsonValue(m_folder_path));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAIFolder::getFolderId() const {
    return m_folder_id;
}
void OAIFolder::setFolderId(const QString &folder_id) {
    m_folder_id = folder_id;
    m_folder_id_isSet = true;
}

bool OAIFolder::is_folder_id_Set() const{
    return m_folder_id_isSet;
}

bool OAIFolder::is_folder_id_Valid() const{
    return m_folder_id_isValid;
}

QString OAIFolder::getArn() const {
    return m_arn;
}
void OAIFolder::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIFolder::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIFolder::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIFolder::getName() const {
    return m_name;
}
void OAIFolder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFolder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFolder::is_name_Valid() const{
    return m_name_isValid;
}

OAIFolderType OAIFolder::getFolderType() const {
    return m_folder_type;
}
void OAIFolder::setFolderType(const OAIFolderType &folder_type) {
    m_folder_type = folder_type;
    m_folder_type_isSet = true;
}

bool OAIFolder::is_folder_type_Set() const{
    return m_folder_type_isSet;
}

bool OAIFolder::is_folder_type_Valid() const{
    return m_folder_type_isValid;
}

QList OAIFolder::getFolderPath() const {
    return m_folder_path;
}
void OAIFolder::setFolderPath(const QList &folder_path) {
    m_folder_path = folder_path;
    m_folder_path_isSet = true;
}

bool OAIFolder::is_folder_path_Set() const{
    return m_folder_path_isSet;
}

bool OAIFolder::is_folder_path_Valid() const{
    return m_folder_path_isValid;
}

QDateTime OAIFolder::getCreatedTime() const {
    return m_created_time;
}
void OAIFolder::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIFolder::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIFolder::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIFolder::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIFolder::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIFolder::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIFolder::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIFolder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFolder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
