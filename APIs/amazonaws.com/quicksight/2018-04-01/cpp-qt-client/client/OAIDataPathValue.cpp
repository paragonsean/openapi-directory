/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataPathValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataPathValue::OAIDataPathValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataPathValue::OAIDataPathValue() {
    this->initializeModel();
}

OAIDataPathValue::~OAIDataPathValue() {}

void OAIDataPathValue::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_field_value_isSet = false;
    m_field_value_isValid = false;
}

void OAIDataPathValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataPathValue::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_field_value_isValid = ::OpenAPI::fromJsonValue(m_field_value, json[QString("FieldValue")]);
    m_field_value_isSet = !json[QString("FieldValue")].isNull() && m_field_value_isValid;
}

QString OAIDataPathValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataPathValue::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_field_value_isSet) {
        obj.insert(QString("FieldValue"), ::OpenAPI::toJsonValue(m_field_value));
    }
    return obj;
}

QString OAIDataPathValue::getFieldId() const {
    return m_field_id;
}
void OAIDataPathValue::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIDataPathValue::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIDataPathValue::is_field_id_Valid() const{
    return m_field_id_isValid;
}

QString OAIDataPathValue::getFieldValue() const {
    return m_field_value;
}
void OAIDataPathValue::setFieldValue(const QString &field_value) {
    m_field_value = field_value;
    m_field_value_isSet = true;
}

bool OAIDataPathValue::is_field_value_Set() const{
    return m_field_value_isSet;
}

bool OAIDataPathValue::is_field_value_Valid() const{
    return m_field_value_isValid;
}

bool OAIDataPathValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataPathValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_field_value_isValid && true;
}

} // namespace OpenAPI
