/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHorizontalTextAlignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHorizontalTextAlignment::OAIHorizontalTextAlignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHorizontalTextAlignment::OAIHorizontalTextAlignment() {
    this->initializeModel();
}

OAIHorizontalTextAlignment::~OAIHorizontalTextAlignment() {}

void OAIHorizontalTextAlignment::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIHorizontalTextAlignment::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIHorizontalTextAlignment::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LEFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHorizontalTextAlignment::LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CENTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHorizontalTextAlignment::CENTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHorizontalTextAlignment::RIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHorizontalTextAlignment::AUTO;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIHorizontalTextAlignment::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIHorizontalTextAlignment::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIHorizontalTextAlignment::LEFT:
            val = "LEFT";
            break;
        case eOAIHorizontalTextAlignment::CENTER:
            val = "CENTER";
            break;
        case eOAIHorizontalTextAlignment::RIGHT:
            val = "RIGHT";
            break;
        case eOAIHorizontalTextAlignment::AUTO:
            val = "AUTO";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIHorizontalTextAlignment::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIHorizontalTextAlignment::eOAIHorizontalTextAlignment OAIHorizontalTextAlignment::getValue() const {
    return m_value;
}

void OAIHorizontalTextAlignment::setValue(const OAIHorizontalTextAlignment::eOAIHorizontalTextAlignment& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIHorizontalTextAlignment::isSet() const {
    
    return m_value_isSet;
}

bool OAIHorizontalTextAlignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
