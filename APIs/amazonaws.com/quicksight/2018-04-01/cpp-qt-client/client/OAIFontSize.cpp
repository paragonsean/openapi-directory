/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFontSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFontSize::OAIFontSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFontSize::OAIFontSize() {
    this->initializeModel();
}

OAIFontSize::~OAIFontSize() {}

void OAIFontSize::initializeModel() {

    m_relative_isSet = false;
    m_relative_isValid = false;
}

void OAIFontSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFontSize::fromJsonObject(QJsonObject json) {

    m_relative_isValid = ::OpenAPI::fromJsonValue(m_relative, json[QString("Relative")]);
    m_relative_isSet = !json[QString("Relative")].isNull() && m_relative_isValid;
}

QString OAIFontSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFontSize::asJsonObject() const {
    QJsonObject obj;
    if (m_relative.isSet()) {
        obj.insert(QString("Relative"), ::OpenAPI::toJsonValue(m_relative));
    }
    return obj;
}

OAIRelativeFontSize OAIFontSize::getRelative() const {
    return m_relative;
}
void OAIFontSize::setRelative(const OAIRelativeFontSize &relative) {
    m_relative = relative;
    m_relative_isSet = true;
}

bool OAIFontSize::is_relative_Set() const{
    return m_relative_isSet;
}

bool OAIFontSize::is_relative_Valid() const{
    return m_relative_isValid;
}

bool OAIFontSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_relative.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFontSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
