/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncrementalRefresh.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncrementalRefresh::OAIIncrementalRefresh(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncrementalRefresh::OAIIncrementalRefresh() {
    this->initializeModel();
}

OAIIncrementalRefresh::~OAIIncrementalRefresh() {}

void OAIIncrementalRefresh::initializeModel() {

    m_lookback_window_isSet = false;
    m_lookback_window_isValid = false;
}

void OAIIncrementalRefresh::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncrementalRefresh::fromJsonObject(QJsonObject json) {

    m_lookback_window_isValid = ::OpenAPI::fromJsonValue(m_lookback_window, json[QString("LookbackWindow")]);
    m_lookback_window_isSet = !json[QString("LookbackWindow")].isNull() && m_lookback_window_isValid;
}

QString OAIIncrementalRefresh::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncrementalRefresh::asJsonObject() const {
    QJsonObject obj;
    if (m_lookback_window.isSet()) {
        obj.insert(QString("LookbackWindow"), ::OpenAPI::toJsonValue(m_lookback_window));
    }
    return obj;
}

OAIIncrementalRefresh_LookbackWindow OAIIncrementalRefresh::getLookbackWindow() const {
    return m_lookback_window;
}
void OAIIncrementalRefresh::setLookbackWindow(const OAIIncrementalRefresh_LookbackWindow &lookback_window) {
    m_lookback_window = lookback_window;
    m_lookback_window_isSet = true;
}

bool OAIIncrementalRefresh::is_lookback_window_Set() const{
    return m_lookback_window_isSet;
}

bool OAIIncrementalRefresh::is_lookback_window_Valid() const{
    return m_lookback_window_isValid;
}

bool OAIIncrementalRefresh::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lookback_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncrementalRefresh::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lookback_window_isValid && true;
}

} // namespace OpenAPI
