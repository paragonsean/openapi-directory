/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobError::OAIAssetBundleImportJobError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobError::OAIAssetBundleImportJobError() {
    this->initializeModel();
}

OAIAssetBundleImportJobError::~OAIAssetBundleImportJobError() {}

void OAIAssetBundleImportJobError::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIAssetBundleImportJobError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportJobError::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIAssetBundleImportJobError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportJobError::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIAssetBundleImportJobError::getArn() const {
    return m_arn;
}
void OAIAssetBundleImportJobError::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAssetBundleImportJobError::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAssetBundleImportJobError::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIAssetBundleImportJobError::getType() const {
    return m_type;
}
void OAIAssetBundleImportJobError::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAssetBundleImportJobError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAssetBundleImportJobError::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAssetBundleImportJobError::getMessage() const {
    return m_message;
}
void OAIAssetBundleImportJobError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAssetBundleImportJobError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAssetBundleImportJobError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIAssetBundleImportJobError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportJobError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
