/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDashboardResponse_Dashboard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDashboardResponse_Dashboard::OAIDescribeDashboardResponse_Dashboard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDashboardResponse_Dashboard::OAIDescribeDashboardResponse_Dashboard() {
    this->initializeModel();
}

OAIDescribeDashboardResponse_Dashboard::~OAIDescribeDashboardResponse_Dashboard() {}

void OAIDescribeDashboardResponse_Dashboard::initializeModel() {

    m_dashboard_id_isSet = false;
    m_dashboard_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_published_time_isSet = false;
    m_last_published_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIDescribeDashboardResponse_Dashboard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDashboardResponse_Dashboard::fromJsonObject(QJsonObject json) {

    m_dashboard_id_isValid = ::OpenAPI::fromJsonValue(m_dashboard_id, json[QString("DashboardId")]);
    m_dashboard_id_isSet = !json[QString("DashboardId")].isNull() && m_dashboard_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_published_time_isValid = ::OpenAPI::fromJsonValue(m_last_published_time, json[QString("LastPublishedTime")]);
    m_last_published_time_isSet = !json[QString("LastPublishedTime")].isNull() && m_last_published_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIDescribeDashboardResponse_Dashboard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDashboardResponse_Dashboard::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard_id_isSet) {
        obj.insert(QString("DashboardId"), ::OpenAPI::toJsonValue(m_dashboard_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version.isSet()) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_published_time_isSet) {
        obj.insert(QString("LastPublishedTime"), ::OpenAPI::toJsonValue(m_last_published_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAIDescribeDashboardResponse_Dashboard::getDashboardId() const {
    return m_dashboard_id;
}
void OAIDescribeDashboardResponse_Dashboard::setDashboardId(const QString &dashboard_id) {
    m_dashboard_id = dashboard_id;
    m_dashboard_id_isSet = true;
}

bool OAIDescribeDashboardResponse_Dashboard::is_dashboard_id_Set() const{
    return m_dashboard_id_isSet;
}

bool OAIDescribeDashboardResponse_Dashboard::is_dashboard_id_Valid() const{
    return m_dashboard_id_isValid;
}

QString OAIDescribeDashboardResponse_Dashboard::getArn() const {
    return m_arn;
}
void OAIDescribeDashboardResponse_Dashboard::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeDashboardResponse_Dashboard::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeDashboardResponse_Dashboard::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeDashboardResponse_Dashboard::getName() const {
    return m_name;
}
void OAIDescribeDashboardResponse_Dashboard::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeDashboardResponse_Dashboard::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeDashboardResponse_Dashboard::is_name_Valid() const{
    return m_name_isValid;
}

OAIDashboard_Version OAIDescribeDashboardResponse_Dashboard::getVersion() const {
    return m_version;
}
void OAIDescribeDashboardResponse_Dashboard::setVersion(const OAIDashboard_Version &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDescribeDashboardResponse_Dashboard::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDescribeDashboardResponse_Dashboard::is_version_Valid() const{
    return m_version_isValid;
}

QDateTime OAIDescribeDashboardResponse_Dashboard::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeDashboardResponse_Dashboard::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeDashboardResponse_Dashboard::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeDashboardResponse_Dashboard::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDescribeDashboardResponse_Dashboard::getLastPublishedTime() const {
    return m_last_published_time;
}
void OAIDescribeDashboardResponse_Dashboard::setLastPublishedTime(const QDateTime &last_published_time) {
    m_last_published_time = last_published_time;
    m_last_published_time_isSet = true;
}

bool OAIDescribeDashboardResponse_Dashboard::is_last_published_time_Set() const{
    return m_last_published_time_isSet;
}

bool OAIDescribeDashboardResponse_Dashboard::is_last_published_time_Valid() const{
    return m_last_published_time_isValid;
}

QDateTime OAIDescribeDashboardResponse_Dashboard::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDescribeDashboardResponse_Dashboard::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDescribeDashboardResponse_Dashboard::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDescribeDashboardResponse_Dashboard::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIDescribeDashboardResponse_Dashboard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_published_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDashboardResponse_Dashboard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
