/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLine_StyleConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLine_StyleConfiguration::OAIReferenceLine_StyleConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLine_StyleConfiguration::OAIReferenceLine_StyleConfiguration() {
    this->initializeModel();
}

OAIReferenceLine_StyleConfiguration::~OAIReferenceLine_StyleConfiguration() {}

void OAIReferenceLine_StyleConfiguration::initializeModel() {

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;
}

void OAIReferenceLine_StyleConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLine_StyleConfiguration::fromJsonObject(QJsonObject json) {

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("Pattern")]);
    m_pattern_isSet = !json[QString("Pattern")].isNull() && m_pattern_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;
}

QString OAIReferenceLine_StyleConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLine_StyleConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_pattern.isSet()) {
        obj.insert(QString("Pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    return obj;
}

OAIReferenceLinePatternType OAIReferenceLine_StyleConfiguration::getPattern() const {
    return m_pattern;
}
void OAIReferenceLine_StyleConfiguration::setPattern(const OAIReferenceLinePatternType &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIReferenceLine_StyleConfiguration::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIReferenceLine_StyleConfiguration::is_pattern_Valid() const{
    return m_pattern_isValid;
}

QString OAIReferenceLine_StyleConfiguration::getColor() const {
    return m_color;
}
void OAIReferenceLine_StyleConfiguration::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIReferenceLine_StyleConfiguration::is_color_Set() const{
    return m_color_isSet;
}

bool OAIReferenceLine_StyleConfiguration::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIReferenceLine_StyleConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pattern.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLine_StyleConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
