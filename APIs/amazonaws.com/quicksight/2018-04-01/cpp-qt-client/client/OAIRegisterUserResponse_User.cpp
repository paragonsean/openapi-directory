/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterUserResponse_User.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterUserResponse_User::OAIRegisterUserResponse_User(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterUserResponse_User::OAIRegisterUserResponse_User() {
    this->initializeModel();
}

OAIRegisterUserResponse_User::~OAIRegisterUserResponse_User() {}

void OAIRegisterUserResponse_User::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_identity_type_isSet = false;
    m_identity_type_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_custom_permissions_name_isSet = false;
    m_custom_permissions_name_isValid = false;

    m_external_login_federation_provider_type_isSet = false;
    m_external_login_federation_provider_type_isValid = false;

    m_external_login_federation_provider_url_isSet = false;
    m_external_login_federation_provider_url_isValid = false;

    m_external_login_id_isSet = false;
    m_external_login_id_isValid = false;
}

void OAIRegisterUserResponse_User::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterUserResponse_User::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_identity_type_isValid = ::OpenAPI::fromJsonValue(m_identity_type, json[QString("IdentityType")]);
    m_identity_type_isSet = !json[QString("IdentityType")].isNull() && m_identity_type_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("PrincipalId")]);
    m_principal_id_isSet = !json[QString("PrincipalId")].isNull() && m_principal_id_isValid;

    m_custom_permissions_name_isValid = ::OpenAPI::fromJsonValue(m_custom_permissions_name, json[QString("CustomPermissionsName")]);
    m_custom_permissions_name_isSet = !json[QString("CustomPermissionsName")].isNull() && m_custom_permissions_name_isValid;

    m_external_login_federation_provider_type_isValid = ::OpenAPI::fromJsonValue(m_external_login_federation_provider_type, json[QString("ExternalLoginFederationProviderType")]);
    m_external_login_federation_provider_type_isSet = !json[QString("ExternalLoginFederationProviderType")].isNull() && m_external_login_federation_provider_type_isValid;

    m_external_login_federation_provider_url_isValid = ::OpenAPI::fromJsonValue(m_external_login_federation_provider_url, json[QString("ExternalLoginFederationProviderUrl")]);
    m_external_login_federation_provider_url_isSet = !json[QString("ExternalLoginFederationProviderUrl")].isNull() && m_external_login_federation_provider_url_isValid;

    m_external_login_id_isValid = ::OpenAPI::fromJsonValue(m_external_login_id, json[QString("ExternalLoginId")]);
    m_external_login_id_isSet = !json[QString("ExternalLoginId")].isNull() && m_external_login_id_isValid;
}

QString OAIRegisterUserResponse_User::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterUserResponse_User::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_role.isSet()) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_identity_type.isSet()) {
        obj.insert(QString("IdentityType"), ::OpenAPI::toJsonValue(m_identity_type));
    }
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_principal_id_isSet) {
        obj.insert(QString("PrincipalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_custom_permissions_name_isSet) {
        obj.insert(QString("CustomPermissionsName"), ::OpenAPI::toJsonValue(m_custom_permissions_name));
    }
    if (m_external_login_federation_provider_type_isSet) {
        obj.insert(QString("ExternalLoginFederationProviderType"), ::OpenAPI::toJsonValue(m_external_login_federation_provider_type));
    }
    if (m_external_login_federation_provider_url_isSet) {
        obj.insert(QString("ExternalLoginFederationProviderUrl"), ::OpenAPI::toJsonValue(m_external_login_federation_provider_url));
    }
    if (m_external_login_id_isSet) {
        obj.insert(QString("ExternalLoginId"), ::OpenAPI::toJsonValue(m_external_login_id));
    }
    return obj;
}

QString OAIRegisterUserResponse_User::getArn() const {
    return m_arn;
}
void OAIRegisterUserResponse_User::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIRegisterUserResponse_User::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIRegisterUserResponse_User::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIRegisterUserResponse_User::getUserName() const {
    return m_user_name;
}
void OAIRegisterUserResponse_User::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIRegisterUserResponse_User::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIRegisterUserResponse_User::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIRegisterUserResponse_User::getEmail() const {
    return m_email;
}
void OAIRegisterUserResponse_User::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRegisterUserResponse_User::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRegisterUserResponse_User::is_email_Valid() const{
    return m_email_isValid;
}

OAIUserRole OAIRegisterUserResponse_User::getRole() const {
    return m_role;
}
void OAIRegisterUserResponse_User::setRole(const OAIUserRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIRegisterUserResponse_User::is_role_Set() const{
    return m_role_isSet;
}

bool OAIRegisterUserResponse_User::is_role_Valid() const{
    return m_role_isValid;
}

OAIIdentityType OAIRegisterUserResponse_User::getIdentityType() const {
    return m_identity_type;
}
void OAIRegisterUserResponse_User::setIdentityType(const OAIIdentityType &identity_type) {
    m_identity_type = identity_type;
    m_identity_type_isSet = true;
}

bool OAIRegisterUserResponse_User::is_identity_type_Set() const{
    return m_identity_type_isSet;
}

bool OAIRegisterUserResponse_User::is_identity_type_Valid() const{
    return m_identity_type_isValid;
}

bool OAIRegisterUserResponse_User::getActive() const {
    return m_active;
}
void OAIRegisterUserResponse_User::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIRegisterUserResponse_User::is_active_Set() const{
    return m_active_isSet;
}

bool OAIRegisterUserResponse_User::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIRegisterUserResponse_User::getPrincipalId() const {
    return m_principal_id;
}
void OAIRegisterUserResponse_User::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIRegisterUserResponse_User::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIRegisterUserResponse_User::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QString OAIRegisterUserResponse_User::getCustomPermissionsName() const {
    return m_custom_permissions_name;
}
void OAIRegisterUserResponse_User::setCustomPermissionsName(const QString &custom_permissions_name) {
    m_custom_permissions_name = custom_permissions_name;
    m_custom_permissions_name_isSet = true;
}

bool OAIRegisterUserResponse_User::is_custom_permissions_name_Set() const{
    return m_custom_permissions_name_isSet;
}

bool OAIRegisterUserResponse_User::is_custom_permissions_name_Valid() const{
    return m_custom_permissions_name_isValid;
}

QString OAIRegisterUserResponse_User::getExternalLoginFederationProviderType() const {
    return m_external_login_federation_provider_type;
}
void OAIRegisterUserResponse_User::setExternalLoginFederationProviderType(const QString &external_login_federation_provider_type) {
    m_external_login_federation_provider_type = external_login_federation_provider_type;
    m_external_login_federation_provider_type_isSet = true;
}

bool OAIRegisterUserResponse_User::is_external_login_federation_provider_type_Set() const{
    return m_external_login_federation_provider_type_isSet;
}

bool OAIRegisterUserResponse_User::is_external_login_federation_provider_type_Valid() const{
    return m_external_login_federation_provider_type_isValid;
}

QString OAIRegisterUserResponse_User::getExternalLoginFederationProviderUrl() const {
    return m_external_login_federation_provider_url;
}
void OAIRegisterUserResponse_User::setExternalLoginFederationProviderUrl(const QString &external_login_federation_provider_url) {
    m_external_login_federation_provider_url = external_login_federation_provider_url;
    m_external_login_federation_provider_url_isSet = true;
}

bool OAIRegisterUserResponse_User::is_external_login_federation_provider_url_Set() const{
    return m_external_login_federation_provider_url_isSet;
}

bool OAIRegisterUserResponse_User::is_external_login_federation_provider_url_Valid() const{
    return m_external_login_federation_provider_url_isValid;
}

QString OAIRegisterUserResponse_User::getExternalLoginId() const {
    return m_external_login_id;
}
void OAIRegisterUserResponse_User::setExternalLoginId(const QString &external_login_id) {
    m_external_login_id = external_login_id;
    m_external_login_id_isSet = true;
}

bool OAIRegisterUserResponse_User::is_external_login_id_Set() const{
    return m_external_login_id_isSet;
}

bool OAIRegisterUserResponse_User::is_external_login_id_Valid() const{
    return m_external_login_id_isValid;
}

bool OAIRegisterUserResponse_User::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_permissions_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_login_federation_provider_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_login_federation_provider_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_login_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterUserResponse_User::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
