/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAssetBundleImportJob_request_AssetBundleImportSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAssetBundleImportJob_request_AssetBundleImportSource::OAIStartAssetBundleImportJob_request_AssetBundleImportSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAssetBundleImportJob_request_AssetBundleImportSource::OAIStartAssetBundleImportJob_request_AssetBundleImportSource() {
    this->initializeModel();
}

OAIStartAssetBundleImportJob_request_AssetBundleImportSource::~OAIStartAssetBundleImportJob_request_AssetBundleImportSource() {}

void OAIStartAssetBundleImportJob_request_AssetBundleImportSource::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_s3_uri_isSet = false;
    m_s3_uri_isValid = false;
}

void OAIStartAssetBundleImportJob_request_AssetBundleImportSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAssetBundleImportJob_request_AssetBundleImportSource::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("Body")]);
    m_body_isSet = !json[QString("Body")].isNull() && m_body_isValid;

    m_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_s3_uri, json[QString("S3Uri")]);
    m_s3_uri_isSet = !json[QString("S3Uri")].isNull() && m_s3_uri_isValid;
}

QString OAIStartAssetBundleImportJob_request_AssetBundleImportSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAssetBundleImportJob_request_AssetBundleImportSource::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("Body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_s3_uri_isSet) {
        obj.insert(QString("S3Uri"), ::OpenAPI::toJsonValue(m_s3_uri));
    }
    return obj;
}

QString OAIStartAssetBundleImportJob_request_AssetBundleImportSource::getBody() const {
    return m_body;
}
void OAIStartAssetBundleImportJob_request_AssetBundleImportSource::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIStartAssetBundleImportJob_request_AssetBundleImportSource::is_body_Set() const{
    return m_body_isSet;
}

bool OAIStartAssetBundleImportJob_request_AssetBundleImportSource::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIStartAssetBundleImportJob_request_AssetBundleImportSource::getS3Uri() const {
    return m_s3_uri;
}
void OAIStartAssetBundleImportJob_request_AssetBundleImportSource::setS3Uri(const QString &s3_uri) {
    m_s3_uri = s3_uri;
    m_s3_uri_isSet = true;
}

bool OAIStartAssetBundleImportJob_request_AssetBundleImportSource::is_s3_uri_Set() const{
    return m_s3_uri_isSet;
}

bool OAIStartAssetBundleImportJob_request_AssetBundleImportSource::is_s3_uri_Valid() const{
    return m_s3_uri_isValid;
}

bool OAIStartAssetBundleImportJob_request_AssetBundleImportSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAssetBundleImportJob_request_AssetBundleImportSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
