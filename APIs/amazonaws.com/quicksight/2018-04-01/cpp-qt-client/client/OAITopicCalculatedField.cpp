/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicCalculatedField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicCalculatedField::OAITopicCalculatedField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicCalculatedField::OAITopicCalculatedField() {
    this->initializeModel();
}

OAITopicCalculatedField::~OAITopicCalculatedField() {}

void OAITopicCalculatedField::initializeModel() {

    m_calculated_field_name_isSet = false;
    m_calculated_field_name_isValid = false;

    m_calculated_field_description_isSet = false;
    m_calculated_field_description_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_calculated_field_synonyms_isSet = false;
    m_calculated_field_synonyms_isValid = false;

    m_is_included_in_topic_isSet = false;
    m_is_included_in_topic_isValid = false;

    m_disable_indexing_isSet = false;
    m_disable_indexing_isValid = false;

    m_column_data_role_isSet = false;
    m_column_data_role_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;

    m_default_formatting_isSet = false;
    m_default_formatting_isValid = false;

    m_aggregation_isSet = false;
    m_aggregation_isValid = false;

    m_comparative_order_isSet = false;
    m_comparative_order_isValid = false;

    m_semantic_type_isSet = false;
    m_semantic_type_isValid = false;

    m_allowed_aggregations_isSet = false;
    m_allowed_aggregations_isValid = false;

    m_not_allowed_aggregations_isSet = false;
    m_not_allowed_aggregations_isValid = false;

    m_never_aggregate_in_filter_isSet = false;
    m_never_aggregate_in_filter_isValid = false;

    m_cell_value_synonyms_isSet = false;
    m_cell_value_synonyms_isValid = false;
}

void OAITopicCalculatedField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicCalculatedField::fromJsonObject(QJsonObject json) {

    m_calculated_field_name_isValid = ::OpenAPI::fromJsonValue(m_calculated_field_name, json[QString("CalculatedFieldName")]);
    m_calculated_field_name_isSet = !json[QString("CalculatedFieldName")].isNull() && m_calculated_field_name_isValid;

    m_calculated_field_description_isValid = ::OpenAPI::fromJsonValue(m_calculated_field_description, json[QString("CalculatedFieldDescription")]);
    m_calculated_field_description_isSet = !json[QString("CalculatedFieldDescription")].isNull() && m_calculated_field_description_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_calculated_field_synonyms_isValid = ::OpenAPI::fromJsonValue(m_calculated_field_synonyms, json[QString("CalculatedFieldSynonyms")]);
    m_calculated_field_synonyms_isSet = !json[QString("CalculatedFieldSynonyms")].isNull() && m_calculated_field_synonyms_isValid;

    m_is_included_in_topic_isValid = ::OpenAPI::fromJsonValue(m_is_included_in_topic, json[QString("IsIncludedInTopic")]);
    m_is_included_in_topic_isSet = !json[QString("IsIncludedInTopic")].isNull() && m_is_included_in_topic_isValid;

    m_disable_indexing_isValid = ::OpenAPI::fromJsonValue(m_disable_indexing, json[QString("DisableIndexing")]);
    m_disable_indexing_isSet = !json[QString("DisableIndexing")].isNull() && m_disable_indexing_isValid;

    m_column_data_role_isValid = ::OpenAPI::fromJsonValue(m_column_data_role, json[QString("ColumnDataRole")]);
    m_column_data_role_isSet = !json[QString("ColumnDataRole")].isNull() && m_column_data_role_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;

    m_default_formatting_isValid = ::OpenAPI::fromJsonValue(m_default_formatting, json[QString("DefaultFormatting")]);
    m_default_formatting_isSet = !json[QString("DefaultFormatting")].isNull() && m_default_formatting_isValid;

    m_aggregation_isValid = ::OpenAPI::fromJsonValue(m_aggregation, json[QString("Aggregation")]);
    m_aggregation_isSet = !json[QString("Aggregation")].isNull() && m_aggregation_isValid;

    m_comparative_order_isValid = ::OpenAPI::fromJsonValue(m_comparative_order, json[QString("ComparativeOrder")]);
    m_comparative_order_isSet = !json[QString("ComparativeOrder")].isNull() && m_comparative_order_isValid;

    m_semantic_type_isValid = ::OpenAPI::fromJsonValue(m_semantic_type, json[QString("SemanticType")]);
    m_semantic_type_isSet = !json[QString("SemanticType")].isNull() && m_semantic_type_isValid;

    m_allowed_aggregations_isValid = ::OpenAPI::fromJsonValue(m_allowed_aggregations, json[QString("AllowedAggregations")]);
    m_allowed_aggregations_isSet = !json[QString("AllowedAggregations")].isNull() && m_allowed_aggregations_isValid;

    m_not_allowed_aggregations_isValid = ::OpenAPI::fromJsonValue(m_not_allowed_aggregations, json[QString("NotAllowedAggregations")]);
    m_not_allowed_aggregations_isSet = !json[QString("NotAllowedAggregations")].isNull() && m_not_allowed_aggregations_isValid;

    m_never_aggregate_in_filter_isValid = ::OpenAPI::fromJsonValue(m_never_aggregate_in_filter, json[QString("NeverAggregateInFilter")]);
    m_never_aggregate_in_filter_isSet = !json[QString("NeverAggregateInFilter")].isNull() && m_never_aggregate_in_filter_isValid;

    m_cell_value_synonyms_isValid = ::OpenAPI::fromJsonValue(m_cell_value_synonyms, json[QString("CellValueSynonyms")]);
    m_cell_value_synonyms_isSet = !json[QString("CellValueSynonyms")].isNull() && m_cell_value_synonyms_isValid;
}

QString OAITopicCalculatedField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicCalculatedField::asJsonObject() const {
    QJsonObject obj;
    if (m_calculated_field_name_isSet) {
        obj.insert(QString("CalculatedFieldName"), ::OpenAPI::toJsonValue(m_calculated_field_name));
    }
    if (m_calculated_field_description_isSet) {
        obj.insert(QString("CalculatedFieldDescription"), ::OpenAPI::toJsonValue(m_calculated_field_description));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_calculated_field_synonyms.isSet()) {
        obj.insert(QString("CalculatedFieldSynonyms"), ::OpenAPI::toJsonValue(m_calculated_field_synonyms));
    }
    if (m_is_included_in_topic_isSet) {
        obj.insert(QString("IsIncludedInTopic"), ::OpenAPI::toJsonValue(m_is_included_in_topic));
    }
    if (m_disable_indexing_isSet) {
        obj.insert(QString("DisableIndexing"), ::OpenAPI::toJsonValue(m_disable_indexing));
    }
    if (m_column_data_role.isSet()) {
        obj.insert(QString("ColumnDataRole"), ::OpenAPI::toJsonValue(m_column_data_role));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    if (m_default_formatting.isSet()) {
        obj.insert(QString("DefaultFormatting"), ::OpenAPI::toJsonValue(m_default_formatting));
    }
    if (m_aggregation.isSet()) {
        obj.insert(QString("Aggregation"), ::OpenAPI::toJsonValue(m_aggregation));
    }
    if (m_comparative_order.isSet()) {
        obj.insert(QString("ComparativeOrder"), ::OpenAPI::toJsonValue(m_comparative_order));
    }
    if (m_semantic_type.isSet()) {
        obj.insert(QString("SemanticType"), ::OpenAPI::toJsonValue(m_semantic_type));
    }
    if (m_allowed_aggregations.isSet()) {
        obj.insert(QString("AllowedAggregations"), ::OpenAPI::toJsonValue(m_allowed_aggregations));
    }
    if (m_not_allowed_aggregations.isSet()) {
        obj.insert(QString("NotAllowedAggregations"), ::OpenAPI::toJsonValue(m_not_allowed_aggregations));
    }
    if (m_never_aggregate_in_filter_isSet) {
        obj.insert(QString("NeverAggregateInFilter"), ::OpenAPI::toJsonValue(m_never_aggregate_in_filter));
    }
    if (m_cell_value_synonyms.isSet()) {
        obj.insert(QString("CellValueSynonyms"), ::OpenAPI::toJsonValue(m_cell_value_synonyms));
    }
    return obj;
}

QString OAITopicCalculatedField::getCalculatedFieldName() const {
    return m_calculated_field_name;
}
void OAITopicCalculatedField::setCalculatedFieldName(const QString &calculated_field_name) {
    m_calculated_field_name = calculated_field_name;
    m_calculated_field_name_isSet = true;
}

bool OAITopicCalculatedField::is_calculated_field_name_Set() const{
    return m_calculated_field_name_isSet;
}

bool OAITopicCalculatedField::is_calculated_field_name_Valid() const{
    return m_calculated_field_name_isValid;
}

QString OAITopicCalculatedField::getCalculatedFieldDescription() const {
    return m_calculated_field_description;
}
void OAITopicCalculatedField::setCalculatedFieldDescription(const QString &calculated_field_description) {
    m_calculated_field_description = calculated_field_description;
    m_calculated_field_description_isSet = true;
}

bool OAITopicCalculatedField::is_calculated_field_description_Set() const{
    return m_calculated_field_description_isSet;
}

bool OAITopicCalculatedField::is_calculated_field_description_Valid() const{
    return m_calculated_field_description_isValid;
}

QString OAITopicCalculatedField::getExpression() const {
    return m_expression;
}
void OAITopicCalculatedField::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAITopicCalculatedField::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAITopicCalculatedField::is_expression_Valid() const{
    return m_expression_isValid;
}

QList OAITopicCalculatedField::getCalculatedFieldSynonyms() const {
    return m_calculated_field_synonyms;
}
void OAITopicCalculatedField::setCalculatedFieldSynonyms(const QList &calculated_field_synonyms) {
    m_calculated_field_synonyms = calculated_field_synonyms;
    m_calculated_field_synonyms_isSet = true;
}

bool OAITopicCalculatedField::is_calculated_field_synonyms_Set() const{
    return m_calculated_field_synonyms_isSet;
}

bool OAITopicCalculatedField::is_calculated_field_synonyms_Valid() const{
    return m_calculated_field_synonyms_isValid;
}

bool OAITopicCalculatedField::getIsIncludedInTopic() const {
    return m_is_included_in_topic;
}
void OAITopicCalculatedField::setIsIncludedInTopic(const bool &is_included_in_topic) {
    m_is_included_in_topic = is_included_in_topic;
    m_is_included_in_topic_isSet = true;
}

bool OAITopicCalculatedField::is_is_included_in_topic_Set() const{
    return m_is_included_in_topic_isSet;
}

bool OAITopicCalculatedField::is_is_included_in_topic_Valid() const{
    return m_is_included_in_topic_isValid;
}

bool OAITopicCalculatedField::getDisableIndexing() const {
    return m_disable_indexing;
}
void OAITopicCalculatedField::setDisableIndexing(const bool &disable_indexing) {
    m_disable_indexing = disable_indexing;
    m_disable_indexing_isSet = true;
}

bool OAITopicCalculatedField::is_disable_indexing_Set() const{
    return m_disable_indexing_isSet;
}

bool OAITopicCalculatedField::is_disable_indexing_Valid() const{
    return m_disable_indexing_isValid;
}

OAIColumnDataRole OAITopicCalculatedField::getColumnDataRole() const {
    return m_column_data_role;
}
void OAITopicCalculatedField::setColumnDataRole(const OAIColumnDataRole &column_data_role) {
    m_column_data_role = column_data_role;
    m_column_data_role_isSet = true;
}

bool OAITopicCalculatedField::is_column_data_role_Set() const{
    return m_column_data_role_isSet;
}

bool OAITopicCalculatedField::is_column_data_role_Valid() const{
    return m_column_data_role_isValid;
}

OAITopicTimeGranularity OAITopicCalculatedField::getTimeGranularity() const {
    return m_time_granularity;
}
void OAITopicCalculatedField::setTimeGranularity(const OAITopicTimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAITopicCalculatedField::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAITopicCalculatedField::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

OAITopicCalculatedField_DefaultFormatting OAITopicCalculatedField::getDefaultFormatting() const {
    return m_default_formatting;
}
void OAITopicCalculatedField::setDefaultFormatting(const OAITopicCalculatedField_DefaultFormatting &default_formatting) {
    m_default_formatting = default_formatting;
    m_default_formatting_isSet = true;
}

bool OAITopicCalculatedField::is_default_formatting_Set() const{
    return m_default_formatting_isSet;
}

bool OAITopicCalculatedField::is_default_formatting_Valid() const{
    return m_default_formatting_isValid;
}

OAIDefaultAggregation OAITopicCalculatedField::getAggregation() const {
    return m_aggregation;
}
void OAITopicCalculatedField::setAggregation(const OAIDefaultAggregation &aggregation) {
    m_aggregation = aggregation;
    m_aggregation_isSet = true;
}

bool OAITopicCalculatedField::is_aggregation_Set() const{
    return m_aggregation_isSet;
}

bool OAITopicCalculatedField::is_aggregation_Valid() const{
    return m_aggregation_isValid;
}

OAITopicCalculatedField_ComparativeOrder OAITopicCalculatedField::getComparativeOrder() const {
    return m_comparative_order;
}
void OAITopicCalculatedField::setComparativeOrder(const OAITopicCalculatedField_ComparativeOrder &comparative_order) {
    m_comparative_order = comparative_order;
    m_comparative_order_isSet = true;
}

bool OAITopicCalculatedField::is_comparative_order_Set() const{
    return m_comparative_order_isSet;
}

bool OAITopicCalculatedField::is_comparative_order_Valid() const{
    return m_comparative_order_isValid;
}

OAITopicCalculatedField_SemanticType OAITopicCalculatedField::getSemanticType() const {
    return m_semantic_type;
}
void OAITopicCalculatedField::setSemanticType(const OAITopicCalculatedField_SemanticType &semantic_type) {
    m_semantic_type = semantic_type;
    m_semantic_type_isSet = true;
}

bool OAITopicCalculatedField::is_semantic_type_Set() const{
    return m_semantic_type_isSet;
}

bool OAITopicCalculatedField::is_semantic_type_Valid() const{
    return m_semantic_type_isValid;
}

QList OAITopicCalculatedField::getAllowedAggregations() const {
    return m_allowed_aggregations;
}
void OAITopicCalculatedField::setAllowedAggregations(const QList &allowed_aggregations) {
    m_allowed_aggregations = allowed_aggregations;
    m_allowed_aggregations_isSet = true;
}

bool OAITopicCalculatedField::is_allowed_aggregations_Set() const{
    return m_allowed_aggregations_isSet;
}

bool OAITopicCalculatedField::is_allowed_aggregations_Valid() const{
    return m_allowed_aggregations_isValid;
}

QList OAITopicCalculatedField::getNotAllowedAggregations() const {
    return m_not_allowed_aggregations;
}
void OAITopicCalculatedField::setNotAllowedAggregations(const QList &not_allowed_aggregations) {
    m_not_allowed_aggregations = not_allowed_aggregations;
    m_not_allowed_aggregations_isSet = true;
}

bool OAITopicCalculatedField::is_not_allowed_aggregations_Set() const{
    return m_not_allowed_aggregations_isSet;
}

bool OAITopicCalculatedField::is_not_allowed_aggregations_Valid() const{
    return m_not_allowed_aggregations_isValid;
}

bool OAITopicCalculatedField::getNeverAggregateInFilter() const {
    return m_never_aggregate_in_filter;
}
void OAITopicCalculatedField::setNeverAggregateInFilter(const bool &never_aggregate_in_filter) {
    m_never_aggregate_in_filter = never_aggregate_in_filter;
    m_never_aggregate_in_filter_isSet = true;
}

bool OAITopicCalculatedField::is_never_aggregate_in_filter_Set() const{
    return m_never_aggregate_in_filter_isSet;
}

bool OAITopicCalculatedField::is_never_aggregate_in_filter_Valid() const{
    return m_never_aggregate_in_filter_isValid;
}

QList OAITopicCalculatedField::getCellValueSynonyms() const {
    return m_cell_value_synonyms;
}
void OAITopicCalculatedField::setCellValueSynonyms(const QList &cell_value_synonyms) {
    m_cell_value_synonyms = cell_value_synonyms;
    m_cell_value_synonyms_isSet = true;
}

bool OAITopicCalculatedField::is_cell_value_synonyms_Set() const{
    return m_cell_value_synonyms_isSet;
}

bool OAITopicCalculatedField::is_cell_value_synonyms_Valid() const{
    return m_cell_value_synonyms_isValid;
}

bool OAITopicCalculatedField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculated_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_field_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_field_synonyms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_included_in_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_indexing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_data_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_formatting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparative_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_semantic_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_aggregations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_allowed_aggregations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_never_aggregate_in_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_value_synonyms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicCalculatedField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calculated_field_name_isValid && m_expression_isValid && true;
}

} // namespace OpenAPI
