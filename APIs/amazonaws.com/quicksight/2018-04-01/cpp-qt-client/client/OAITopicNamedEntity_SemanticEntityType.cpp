/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicNamedEntity_SemanticEntityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicNamedEntity_SemanticEntityType::OAITopicNamedEntity_SemanticEntityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicNamedEntity_SemanticEntityType::OAITopicNamedEntity_SemanticEntityType() {
    this->initializeModel();
}

OAITopicNamedEntity_SemanticEntityType::~OAITopicNamedEntity_SemanticEntityType() {}

void OAITopicNamedEntity_SemanticEntityType::initializeModel() {

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_sub_type_name_isSet = false;
    m_sub_type_name_isValid = false;

    m_type_parameters_isSet = false;
    m_type_parameters_isValid = false;
}

void OAITopicNamedEntity_SemanticEntityType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicNamedEntity_SemanticEntityType::fromJsonObject(QJsonObject json) {

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_sub_type_name_isValid = ::OpenAPI::fromJsonValue(m_sub_type_name, json[QString("SubTypeName")]);
    m_sub_type_name_isSet = !json[QString("SubTypeName")].isNull() && m_sub_type_name_isValid;

    m_type_parameters_isValid = ::OpenAPI::fromJsonValue(m_type_parameters, json[QString("TypeParameters")]);
    m_type_parameters_isSet = !json[QString("TypeParameters")].isNull() && m_type_parameters_isValid;
}

QString OAITopicNamedEntity_SemanticEntityType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicNamedEntity_SemanticEntityType::asJsonObject() const {
    QJsonObject obj;
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_sub_type_name_isSet) {
        obj.insert(QString("SubTypeName"), ::OpenAPI::toJsonValue(m_sub_type_name));
    }
    if (m_type_parameters.isSet()) {
        obj.insert(QString("TypeParameters"), ::OpenAPI::toJsonValue(m_type_parameters));
    }
    return obj;
}

QString OAITopicNamedEntity_SemanticEntityType::getTypeName() const {
    return m_type_name;
}
void OAITopicNamedEntity_SemanticEntityType::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAITopicNamedEntity_SemanticEntityType::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAITopicNamedEntity_SemanticEntityType::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAITopicNamedEntity_SemanticEntityType::getSubTypeName() const {
    return m_sub_type_name;
}
void OAITopicNamedEntity_SemanticEntityType::setSubTypeName(const QString &sub_type_name) {
    m_sub_type_name = sub_type_name;
    m_sub_type_name_isSet = true;
}

bool OAITopicNamedEntity_SemanticEntityType::is_sub_type_name_Set() const{
    return m_sub_type_name_isSet;
}

bool OAITopicNamedEntity_SemanticEntityType::is_sub_type_name_Valid() const{
    return m_sub_type_name_isValid;
}

QMap OAITopicNamedEntity_SemanticEntityType::getTypeParameters() const {
    return m_type_parameters;
}
void OAITopicNamedEntity_SemanticEntityType::setTypeParameters(const QMap &type_parameters) {
    m_type_parameters = type_parameters;
    m_type_parameters_isSet = true;
}

bool OAITopicNamedEntity_SemanticEntityType::is_type_parameters_Set() const{
    return m_type_parameters_isSet;
}

bool OAITopicNamedEntity_SemanticEntityType::is_type_parameters_Valid() const{
    return m_type_parameters_isValid;
}

bool OAITopicNamedEntity_SemanticEntityType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicNamedEntity_SemanticEntityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
