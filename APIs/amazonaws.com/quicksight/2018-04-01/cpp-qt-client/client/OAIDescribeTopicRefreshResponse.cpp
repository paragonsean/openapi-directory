/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTopicRefreshResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTopicRefreshResponse::OAIDescribeTopicRefreshResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTopicRefreshResponse::OAIDescribeTopicRefreshResponse() {
    this->initializeModel();
}

OAIDescribeTopicRefreshResponse::~OAIDescribeTopicRefreshResponse() {}

void OAIDescribeTopicRefreshResponse::initializeModel() {

    m_refresh_details_isSet = false;
    m_refresh_details_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeTopicRefreshResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTopicRefreshResponse::fromJsonObject(QJsonObject json) {

    m_refresh_details_isValid = ::OpenAPI::fromJsonValue(m_refresh_details, json[QString("RefreshDetails")]);
    m_refresh_details_isSet = !json[QString("RefreshDetails")].isNull() && m_refresh_details_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeTopicRefreshResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTopicRefreshResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_refresh_details.isSet()) {
        obj.insert(QString("RefreshDetails"), ::OpenAPI::toJsonValue(m_refresh_details));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIDescribeTopicRefreshResponse_RefreshDetails OAIDescribeTopicRefreshResponse::getRefreshDetails() const {
    return m_refresh_details;
}
void OAIDescribeTopicRefreshResponse::setRefreshDetails(const OAIDescribeTopicRefreshResponse_RefreshDetails &refresh_details) {
    m_refresh_details = refresh_details;
    m_refresh_details_isSet = true;
}

bool OAIDescribeTopicRefreshResponse::is_refresh_details_Set() const{
    return m_refresh_details_isSet;
}

bool OAIDescribeTopicRefreshResponse::is_refresh_details_Valid() const{
    return m_refresh_details_isValid;
}

QString OAIDescribeTopicRefreshResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeTopicRefreshResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeTopicRefreshResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeTopicRefreshResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeTopicRefreshResponse::getStatus() const {
    return m_status;
}
void OAIDescribeTopicRefreshResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeTopicRefreshResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeTopicRefreshResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeTopicRefreshResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_refresh_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTopicRefreshResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
