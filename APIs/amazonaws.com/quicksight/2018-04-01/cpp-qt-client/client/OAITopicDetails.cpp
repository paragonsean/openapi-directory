/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicDetails::OAITopicDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicDetails::OAITopicDetails() {
    this->initializeModel();
}

OAITopicDetails::~OAITopicDetails() {}

void OAITopicDetails::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;
}

void OAITopicDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicDetails::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("DataSets")]);
    m_data_sets_isSet = !json[QString("DataSets")].isNull() && m_data_sets_isValid;
}

QString OAITopicDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_data_sets.isSet()) {
        obj.insert(QString("DataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    return obj;
}

QString OAITopicDetails::getName() const {
    return m_name;
}
void OAITopicDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITopicDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAITopicDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITopicDetails::getDescription() const {
    return m_description;
}
void OAITopicDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITopicDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAITopicDetails::is_description_Valid() const{
    return m_description_isValid;
}

QList OAITopicDetails::getDataSets() const {
    return m_data_sets;
}
void OAITopicDetails::setDataSets(const QList &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAITopicDetails::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAITopicDetails::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

bool OAITopicDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
