/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputation_UniqueValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputation_UniqueValues::OAIComputation_UniqueValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputation_UniqueValues::OAIComputation_UniqueValues() {
    this->initializeModel();
}

OAIComputation_UniqueValues::~OAIComputation_UniqueValues() {}

void OAIComputation_UniqueValues::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;
}

void OAIComputation_UniqueValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputation_UniqueValues::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;
}

QString OAIComputation_UniqueValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputation_UniqueValues::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    return obj;
}

QString OAIComputation_UniqueValues::getComputationId() const {
    return m_computation_id;
}
void OAIComputation_UniqueValues::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIComputation_UniqueValues::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIComputation_UniqueValues::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIComputation_UniqueValues::getName() const {
    return m_name;
}
void OAIComputation_UniqueValues::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComputation_UniqueValues::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComputation_UniqueValues::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomRankedComputation_Category OAIComputation_UniqueValues::getCategory() const {
    return m_category;
}
void OAIComputation_UniqueValues::setCategory(const OAITopBottomRankedComputation_Category &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIComputation_UniqueValues::is_category_Set() const{
    return m_category_isSet;
}

bool OAIComputation_UniqueValues::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIComputation_UniqueValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputation_UniqueValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_category_isValid && true;
}

} // namespace OpenAPI
