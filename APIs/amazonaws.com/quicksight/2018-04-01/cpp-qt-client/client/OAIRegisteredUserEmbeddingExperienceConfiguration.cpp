/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredUserEmbeddingExperienceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredUserEmbeddingExperienceConfiguration::OAIRegisteredUserEmbeddingExperienceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredUserEmbeddingExperienceConfiguration::OAIRegisteredUserEmbeddingExperienceConfiguration() {
    this->initializeModel();
}

OAIRegisteredUserEmbeddingExperienceConfiguration::~OAIRegisteredUserEmbeddingExperienceConfiguration() {}

void OAIRegisteredUserEmbeddingExperienceConfiguration::initializeModel() {

    m_dashboard_isSet = false;
    m_dashboard_isValid = false;

    m_quick_sight_console_isSet = false;
    m_quick_sight_console_isValid = false;

    m_q_search_bar_isSet = false;
    m_q_search_bar_isValid = false;

    m_dashboard_visual_isSet = false;
    m_dashboard_visual_isValid = false;
}

void OAIRegisteredUserEmbeddingExperienceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredUserEmbeddingExperienceConfiguration::fromJsonObject(QJsonObject json) {

    m_dashboard_isValid = ::OpenAPI::fromJsonValue(m_dashboard, json[QString("Dashboard")]);
    m_dashboard_isSet = !json[QString("Dashboard")].isNull() && m_dashboard_isValid;

    m_quick_sight_console_isValid = ::OpenAPI::fromJsonValue(m_quick_sight_console, json[QString("QuickSightConsole")]);
    m_quick_sight_console_isSet = !json[QString("QuickSightConsole")].isNull() && m_quick_sight_console_isValid;

    m_q_search_bar_isValid = ::OpenAPI::fromJsonValue(m_q_search_bar, json[QString("QSearchBar")]);
    m_q_search_bar_isSet = !json[QString("QSearchBar")].isNull() && m_q_search_bar_isValid;

    m_dashboard_visual_isValid = ::OpenAPI::fromJsonValue(m_dashboard_visual, json[QString("DashboardVisual")]);
    m_dashboard_visual_isSet = !json[QString("DashboardVisual")].isNull() && m_dashboard_visual_isValid;
}

QString OAIRegisteredUserEmbeddingExperienceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredUserEmbeddingExperienceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard.isSet()) {
        obj.insert(QString("Dashboard"), ::OpenAPI::toJsonValue(m_dashboard));
    }
    if (m_quick_sight_console.isSet()) {
        obj.insert(QString("QuickSightConsole"), ::OpenAPI::toJsonValue(m_quick_sight_console));
    }
    if (m_q_search_bar.isSet()) {
        obj.insert(QString("QSearchBar"), ::OpenAPI::toJsonValue(m_q_search_bar));
    }
    if (m_dashboard_visual.isSet()) {
        obj.insert(QString("DashboardVisual"), ::OpenAPI::toJsonValue(m_dashboard_visual));
    }
    return obj;
}

OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration_Dashboard OAIRegisteredUserEmbeddingExperienceConfiguration::getDashboard() const {
    return m_dashboard;
}
void OAIRegisteredUserEmbeddingExperienceConfiguration::setDashboard(const OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration_Dashboard &dashboard) {
    m_dashboard = dashboard;
    m_dashboard_isSet = true;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::is_dashboard_Set() const{
    return m_dashboard_isSet;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::is_dashboard_Valid() const{
    return m_dashboard_isValid;
}

OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration_QuickSightConsole OAIRegisteredUserEmbeddingExperienceConfiguration::getQuickSightConsole() const {
    return m_quick_sight_console;
}
void OAIRegisteredUserEmbeddingExperienceConfiguration::setQuickSightConsole(const OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration_QuickSightConsole &quick_sight_console) {
    m_quick_sight_console = quick_sight_console;
    m_quick_sight_console_isSet = true;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::is_quick_sight_console_Set() const{
    return m_quick_sight_console_isSet;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::is_quick_sight_console_Valid() const{
    return m_quick_sight_console_isValid;
}

OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration_QSearchBar OAIRegisteredUserEmbeddingExperienceConfiguration::getQSearchBar() const {
    return m_q_search_bar;
}
void OAIRegisteredUserEmbeddingExperienceConfiguration::setQSearchBar(const OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration_QSearchBar &q_search_bar) {
    m_q_search_bar = q_search_bar;
    m_q_search_bar_isSet = true;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::is_q_search_bar_Set() const{
    return m_q_search_bar_isSet;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::is_q_search_bar_Valid() const{
    return m_q_search_bar_isValid;
}

OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration_DashboardVisual OAIRegisteredUserEmbeddingExperienceConfiguration::getDashboardVisual() const {
    return m_dashboard_visual;
}
void OAIRegisteredUserEmbeddingExperienceConfiguration::setDashboardVisual(const OAIGenerateEmbedUrlForRegisteredUser_request_ExperienceConfiguration_DashboardVisual &dashboard_visual) {
    m_dashboard_visual = dashboard_visual;
    m_dashboard_visual_isSet = true;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::is_dashboard_visual_Set() const{
    return m_dashboard_visual_isSet;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::is_dashboard_visual_Valid() const{
    return m_dashboard_visual_isValid;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quick_sight_console.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_q_search_bar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredUserEmbeddingExperienceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
