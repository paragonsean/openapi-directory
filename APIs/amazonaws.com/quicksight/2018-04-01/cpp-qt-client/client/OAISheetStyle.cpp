/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetStyle::OAISheetStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetStyle::OAISheetStyle() {
    this->initializeModel();
}

OAISheetStyle::~OAISheetStyle() {}

void OAISheetStyle::initializeModel() {

    m_tile_isSet = false;
    m_tile_isValid = false;

    m_tile_layout_isSet = false;
    m_tile_layout_isValid = false;
}

void OAISheetStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetStyle::fromJsonObject(QJsonObject json) {

    m_tile_isValid = ::OpenAPI::fromJsonValue(m_tile, json[QString("Tile")]);
    m_tile_isSet = !json[QString("Tile")].isNull() && m_tile_isValid;

    m_tile_layout_isValid = ::OpenAPI::fromJsonValue(m_tile_layout, json[QString("TileLayout")]);
    m_tile_layout_isSet = !json[QString("TileLayout")].isNull() && m_tile_layout_isValid;
}

QString OAISheetStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_tile.isSet()) {
        obj.insert(QString("Tile"), ::OpenAPI::toJsonValue(m_tile));
    }
    if (m_tile_layout.isSet()) {
        obj.insert(QString("TileLayout"), ::OpenAPI::toJsonValue(m_tile_layout));
    }
    return obj;
}

OAISheetStyle_Tile OAISheetStyle::getTile() const {
    return m_tile;
}
void OAISheetStyle::setTile(const OAISheetStyle_Tile &tile) {
    m_tile = tile;
    m_tile_isSet = true;
}

bool OAISheetStyle::is_tile_Set() const{
    return m_tile_isSet;
}

bool OAISheetStyle::is_tile_Valid() const{
    return m_tile_isValid;
}

OAISheetStyle_TileLayout OAISheetStyle::getTileLayout() const {
    return m_tile_layout;
}
void OAISheetStyle::setTileLayout(const OAISheetStyle_TileLayout &tile_layout) {
    m_tile_layout = tile_layout;
    m_tile_layout_isSet = true;
}

bool OAISheetStyle::is_tile_layout_Set() const{
    return m_tile_layout_isSet;
}

bool OAISheetStyle::is_tile_layout_Valid() const{
    return m_tile_layout_isValid;
}

bool OAISheetStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tile_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
