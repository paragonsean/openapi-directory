/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasureField_CalculatedMeasureField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasureField_CalculatedMeasureField::OAIMeasureField_CalculatedMeasureField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasureField_CalculatedMeasureField::OAIMeasureField_CalculatedMeasureField() {
    this->initializeModel();
}

OAIMeasureField_CalculatedMeasureField::~OAIMeasureField_CalculatedMeasureField() {}

void OAIMeasureField_CalculatedMeasureField::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;
}

void OAIMeasureField_CalculatedMeasureField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeasureField_CalculatedMeasureField::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;
}

QString OAIMeasureField_CalculatedMeasureField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeasureField_CalculatedMeasureField::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    return obj;
}

QString OAIMeasureField_CalculatedMeasureField::getFieldId() const {
    return m_field_id;
}
void OAIMeasureField_CalculatedMeasureField::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIMeasureField_CalculatedMeasureField::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIMeasureField_CalculatedMeasureField::is_field_id_Valid() const{
    return m_field_id_isValid;
}

QString OAIMeasureField_CalculatedMeasureField::getExpression() const {
    return m_expression;
}
void OAIMeasureField_CalculatedMeasureField::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIMeasureField_CalculatedMeasureField::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIMeasureField_CalculatedMeasureField::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAIMeasureField_CalculatedMeasureField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeasureField_CalculatedMeasureField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_expression_isValid && true;
}

} // namespace OpenAPI
