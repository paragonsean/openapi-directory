/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableAggregatedFieldWells::OAITableAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableAggregatedFieldWells::OAITableAggregatedFieldWells() {
    this->initializeModel();
}

OAITableAggregatedFieldWells::~OAITableAggregatedFieldWells() {}

void OAITableAggregatedFieldWells::initializeModel() {

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAITableAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("GroupBy")]);
    m_group_by_isSet = !json[QString("GroupBy")].isNull() && m_group_by_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAITableAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_group_by.isSet()) {
        obj.insert(QString("GroupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList OAITableAggregatedFieldWells::getGroupBy() const {
    return m_group_by;
}
void OAITableAggregatedFieldWells::setGroupBy(const QList &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAITableAggregatedFieldWells::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAITableAggregatedFieldWells::is_group_by_Valid() const{
    return m_group_by_isValid;
}

QList OAITableAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAITableAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAITableAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAITableAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

bool OAITableAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
