/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArcAxisConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArcAxisConfiguration::OAIArcAxisConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArcAxisConfiguration::OAIArcAxisConfiguration() {
    this->initializeModel();
}

OAIArcAxisConfiguration::~OAIArcAxisConfiguration() {}

void OAIArcAxisConfiguration::initializeModel() {

    m_range_isSet = false;
    m_range_isValid = false;

    m_reserve_range_isSet = false;
    m_reserve_range_isValid = false;
}

void OAIArcAxisConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArcAxisConfiguration::fromJsonObject(QJsonObject json) {

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("Range")]);
    m_range_isSet = !json[QString("Range")].isNull() && m_range_isValid;

    m_reserve_range_isValid = ::OpenAPI::fromJsonValue(m_reserve_range, json[QString("ReserveRange")]);
    m_reserve_range_isSet = !json[QString("ReserveRange")].isNull() && m_reserve_range_isValid;
}

QString OAIArcAxisConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArcAxisConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_range.isSet()) {
        obj.insert(QString("Range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_reserve_range_isSet) {
        obj.insert(QString("ReserveRange"), ::OpenAPI::toJsonValue(m_reserve_range));
    }
    return obj;
}

OAIArcAxisConfiguration_Range OAIArcAxisConfiguration::getRange() const {
    return m_range;
}
void OAIArcAxisConfiguration::setRange(const OAIArcAxisConfiguration_Range &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIArcAxisConfiguration::is_range_Set() const{
    return m_range_isSet;
}

bool OAIArcAxisConfiguration::is_range_Valid() const{
    return m_range_isValid;
}

qint32 OAIArcAxisConfiguration::getReserveRange() const {
    return m_reserve_range;
}
void OAIArcAxisConfiguration::setReserveRange(const qint32 &reserve_range) {
    m_reserve_range = reserve_range;
    m_reserve_range_isSet = true;
}

bool OAIArcAxisConfiguration::is_reserve_range_Set() const{
    return m_reserve_range_isSet;
}

bool OAIArcAxisConfiguration::is_reserve_range_Valid() const{
    return m_reserve_range_isValid;
}

bool OAIArcAxisConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserve_range_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArcAxisConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
