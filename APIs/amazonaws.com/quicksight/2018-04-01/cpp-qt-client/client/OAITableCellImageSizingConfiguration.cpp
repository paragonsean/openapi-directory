/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableCellImageSizingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableCellImageSizingConfiguration::OAITableCellImageSizingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableCellImageSizingConfiguration::OAITableCellImageSizingConfiguration() {
    this->initializeModel();
}

OAITableCellImageSizingConfiguration::~OAITableCellImageSizingConfiguration() {}

void OAITableCellImageSizingConfiguration::initializeModel() {

    m_table_cell_image_scaling_configuration_isSet = false;
    m_table_cell_image_scaling_configuration_isValid = false;
}

void OAITableCellImageSizingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableCellImageSizingConfiguration::fromJsonObject(QJsonObject json) {

    m_table_cell_image_scaling_configuration_isValid = ::OpenAPI::fromJsonValue(m_table_cell_image_scaling_configuration, json[QString("TableCellImageScalingConfiguration")]);
    m_table_cell_image_scaling_configuration_isSet = !json[QString("TableCellImageScalingConfiguration")].isNull() && m_table_cell_image_scaling_configuration_isValid;
}

QString OAITableCellImageSizingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableCellImageSizingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_table_cell_image_scaling_configuration.isSet()) {
        obj.insert(QString("TableCellImageScalingConfiguration"), ::OpenAPI::toJsonValue(m_table_cell_image_scaling_configuration));
    }
    return obj;
}

OAITableCellImageScalingConfiguration OAITableCellImageSizingConfiguration::getTableCellImageScalingConfiguration() const {
    return m_table_cell_image_scaling_configuration;
}
void OAITableCellImageSizingConfiguration::setTableCellImageScalingConfiguration(const OAITableCellImageScalingConfiguration &table_cell_image_scaling_configuration) {
    m_table_cell_image_scaling_configuration = table_cell_image_scaling_configuration;
    m_table_cell_image_scaling_configuration_isSet = true;
}

bool OAITableCellImageSizingConfiguration::is_table_cell_image_scaling_configuration_Set() const{
    return m_table_cell_image_scaling_configuration_isSet;
}

bool OAITableCellImageSizingConfiguration::is_table_cell_image_scaling_configuration_Valid() const{
    return m_table_cell_image_scaling_configuration_isValid;
}

bool OAITableCellImageSizingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_cell_image_scaling_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableCellImageSizingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
