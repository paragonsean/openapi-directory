/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISankeyDiagramAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISankeyDiagramAggregatedFieldWells::OAISankeyDiagramAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISankeyDiagramAggregatedFieldWells::OAISankeyDiagramAggregatedFieldWells() {
    this->initializeModel();
}

OAISankeyDiagramAggregatedFieldWells::~OAISankeyDiagramAggregatedFieldWells() {}

void OAISankeyDiagramAggregatedFieldWells::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAISankeyDiagramAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISankeyDiagramAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAISankeyDiagramAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISankeyDiagramAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QList OAISankeyDiagramAggregatedFieldWells::getSource() const {
    return m_source;
}
void OAISankeyDiagramAggregatedFieldWells::setSource(const QList &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAISankeyDiagramAggregatedFieldWells::is_source_Set() const{
    return m_source_isSet;
}

bool OAISankeyDiagramAggregatedFieldWells::is_source_Valid() const{
    return m_source_isValid;
}

QList OAISankeyDiagramAggregatedFieldWells::getDestination() const {
    return m_destination;
}
void OAISankeyDiagramAggregatedFieldWells::setDestination(const QList &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAISankeyDiagramAggregatedFieldWells::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAISankeyDiagramAggregatedFieldWells::is_destination_Valid() const{
    return m_destination_isValid;
}

QList OAISankeyDiagramAggregatedFieldWells::getWeight() const {
    return m_weight;
}
void OAISankeyDiagramAggregatedFieldWells::setWeight(const QList &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISankeyDiagramAggregatedFieldWells::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISankeyDiagramAggregatedFieldWells::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAISankeyDiagramAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISankeyDiagramAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
