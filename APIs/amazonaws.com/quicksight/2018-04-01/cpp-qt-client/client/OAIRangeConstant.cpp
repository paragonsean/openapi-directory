/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRangeConstant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRangeConstant::OAIRangeConstant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRangeConstant::OAIRangeConstant() {
    this->initializeModel();
}

OAIRangeConstant::~OAIRangeConstant() {}

void OAIRangeConstant::initializeModel() {

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;
}

void OAIRangeConstant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRangeConstant::fromJsonObject(QJsonObject json) {

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("Minimum")]);
    m_minimum_isSet = !json[QString("Minimum")].isNull() && m_minimum_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("Maximum")]);
    m_maximum_isSet = !json[QString("Maximum")].isNull() && m_maximum_isValid;
}

QString OAIRangeConstant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRangeConstant::asJsonObject() const {
    QJsonObject obj;
    if (m_minimum_isSet) {
        obj.insert(QString("Minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("Maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    return obj;
}

QString OAIRangeConstant::getMinimum() const {
    return m_minimum;
}
void OAIRangeConstant::setMinimum(const QString &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIRangeConstant::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIRangeConstant::is_minimum_Valid() const{
    return m_minimum_isValid;
}

QString OAIRangeConstant::getMaximum() const {
    return m_maximum;
}
void OAIRangeConstant::setMaximum(const QString &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIRangeConstant::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIRangeConstant::is_maximum_Valid() const{
    return m_maximum_isValid;
}

bool OAIRangeConstant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRangeConstant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
