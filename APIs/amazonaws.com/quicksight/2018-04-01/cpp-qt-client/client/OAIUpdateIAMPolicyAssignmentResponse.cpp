/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateIAMPolicyAssignmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateIAMPolicyAssignmentResponse::OAIUpdateIAMPolicyAssignmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateIAMPolicyAssignmentResponse::OAIUpdateIAMPolicyAssignmentResponse() {
    this->initializeModel();
}

OAIUpdateIAMPolicyAssignmentResponse::~OAIUpdateIAMPolicyAssignmentResponse() {}

void OAIUpdateIAMPolicyAssignmentResponse::initializeModel() {

    m_assignment_name_isSet = false;
    m_assignment_name_isValid = false;

    m_assignment_id_isSet = false;
    m_assignment_id_isValid = false;

    m_policy_arn_isSet = false;
    m_policy_arn_isValid = false;

    m_identities_isSet = false;
    m_identities_isValid = false;

    m_assignment_status_isSet = false;
    m_assignment_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateIAMPolicyAssignmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateIAMPolicyAssignmentResponse::fromJsonObject(QJsonObject json) {

    m_assignment_name_isValid = ::OpenAPI::fromJsonValue(m_assignment_name, json[QString("AssignmentName")]);
    m_assignment_name_isSet = !json[QString("AssignmentName")].isNull() && m_assignment_name_isValid;

    m_assignment_id_isValid = ::OpenAPI::fromJsonValue(m_assignment_id, json[QString("AssignmentId")]);
    m_assignment_id_isSet = !json[QString("AssignmentId")].isNull() && m_assignment_id_isValid;

    m_policy_arn_isValid = ::OpenAPI::fromJsonValue(m_policy_arn, json[QString("PolicyArn")]);
    m_policy_arn_isSet = !json[QString("PolicyArn")].isNull() && m_policy_arn_isValid;

    m_identities_isValid = ::OpenAPI::fromJsonValue(m_identities, json[QString("Identities")]);
    m_identities_isSet = !json[QString("Identities")].isNull() && m_identities_isValid;

    m_assignment_status_isValid = ::OpenAPI::fromJsonValue(m_assignment_status, json[QString("AssignmentStatus")]);
    m_assignment_status_isSet = !json[QString("AssignmentStatus")].isNull() && m_assignment_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIUpdateIAMPolicyAssignmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateIAMPolicyAssignmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_name_isSet) {
        obj.insert(QString("AssignmentName"), ::OpenAPI::toJsonValue(m_assignment_name));
    }
    if (m_assignment_id_isSet) {
        obj.insert(QString("AssignmentId"), ::OpenAPI::toJsonValue(m_assignment_id));
    }
    if (m_policy_arn_isSet) {
        obj.insert(QString("PolicyArn"), ::OpenAPI::toJsonValue(m_policy_arn));
    }
    if (m_identities.isSet()) {
        obj.insert(QString("Identities"), ::OpenAPI::toJsonValue(m_identities));
    }
    if (m_assignment_status.isSet()) {
        obj.insert(QString("AssignmentStatus"), ::OpenAPI::toJsonValue(m_assignment_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUpdateIAMPolicyAssignmentResponse::getAssignmentName() const {
    return m_assignment_name;
}
void OAIUpdateIAMPolicyAssignmentResponse::setAssignmentName(const QString &assignment_name) {
    m_assignment_name = assignment_name;
    m_assignment_name_isSet = true;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_assignment_name_Set() const{
    return m_assignment_name_isSet;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_assignment_name_Valid() const{
    return m_assignment_name_isValid;
}

QString OAIUpdateIAMPolicyAssignmentResponse::getAssignmentId() const {
    return m_assignment_id;
}
void OAIUpdateIAMPolicyAssignmentResponse::setAssignmentId(const QString &assignment_id) {
    m_assignment_id = assignment_id;
    m_assignment_id_isSet = true;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_assignment_id_Set() const{
    return m_assignment_id_isSet;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_assignment_id_Valid() const{
    return m_assignment_id_isValid;
}

QString OAIUpdateIAMPolicyAssignmentResponse::getPolicyArn() const {
    return m_policy_arn;
}
void OAIUpdateIAMPolicyAssignmentResponse::setPolicyArn(const QString &policy_arn) {
    m_policy_arn = policy_arn;
    m_policy_arn_isSet = true;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_policy_arn_Set() const{
    return m_policy_arn_isSet;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_policy_arn_Valid() const{
    return m_policy_arn_isValid;
}

QMap OAIUpdateIAMPolicyAssignmentResponse::getIdentities() const {
    return m_identities;
}
void OAIUpdateIAMPolicyAssignmentResponse::setIdentities(const QMap &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_identities_Valid() const{
    return m_identities_isValid;
}

OAIAssignmentStatus OAIUpdateIAMPolicyAssignmentResponse::getAssignmentStatus() const {
    return m_assignment_status;
}
void OAIUpdateIAMPolicyAssignmentResponse::setAssignmentStatus(const OAIAssignmentStatus &assignment_status) {
    m_assignment_status = assignment_status;
    m_assignment_status_isSet = true;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_assignment_status_Set() const{
    return m_assignment_status_isSet;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_assignment_status_Valid() const{
    return m_assignment_status_isValid;
}

QString OAIUpdateIAMPolicyAssignmentResponse::getRequestId() const {
    return m_request_id;
}
void OAIUpdateIAMPolicyAssignmentResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIUpdateIAMPolicyAssignmentResponse::getStatus() const {
    return m_status;
}
void OAIUpdateIAMPolicyAssignmentResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateIAMPolicyAssignmentResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateIAMPolicyAssignmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateIAMPolicyAssignmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
