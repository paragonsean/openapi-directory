/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNamespaceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNamespaceResponse::OAICreateNamespaceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNamespaceResponse::OAICreateNamespaceResponse() {
    this->initializeModel();
}

OAICreateNamespaceResponse::~OAICreateNamespaceResponse() {}

void OAICreateNamespaceResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_capacity_region_isSet = false;
    m_capacity_region_isValid = false;

    m_creation_status_isSet = false;
    m_creation_status_isValid = false;

    m_identity_store_isSet = false;
    m_identity_store_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICreateNamespaceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNamespaceResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_capacity_region_isValid = ::OpenAPI::fromJsonValue(m_capacity_region, json[QString("CapacityRegion")]);
    m_capacity_region_isSet = !json[QString("CapacityRegion")].isNull() && m_capacity_region_isValid;

    m_creation_status_isValid = ::OpenAPI::fromJsonValue(m_creation_status, json[QString("CreationStatus")]);
    m_creation_status_isSet = !json[QString("CreationStatus")].isNull() && m_creation_status_isValid;

    m_identity_store_isValid = ::OpenAPI::fromJsonValue(m_identity_store, json[QString("IdentityStore")]);
    m_identity_store_isSet = !json[QString("IdentityStore")].isNull() && m_identity_store_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAICreateNamespaceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNamespaceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_capacity_region_isSet) {
        obj.insert(QString("CapacityRegion"), ::OpenAPI::toJsonValue(m_capacity_region));
    }
    if (m_creation_status.isSet()) {
        obj.insert(QString("CreationStatus"), ::OpenAPI::toJsonValue(m_creation_status));
    }
    if (m_identity_store.isSet()) {
        obj.insert(QString("IdentityStore"), ::OpenAPI::toJsonValue(m_identity_store));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICreateNamespaceResponse::getArn() const {
    return m_arn;
}
void OAICreateNamespaceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateNamespaceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateNamespaceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateNamespaceResponse::getName() const {
    return m_name;
}
void OAICreateNamespaceResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNamespaceResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNamespaceResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateNamespaceResponse::getCapacityRegion() const {
    return m_capacity_region;
}
void OAICreateNamespaceResponse::setCapacityRegion(const QString &capacity_region) {
    m_capacity_region = capacity_region;
    m_capacity_region_isSet = true;
}

bool OAICreateNamespaceResponse::is_capacity_region_Set() const{
    return m_capacity_region_isSet;
}

bool OAICreateNamespaceResponse::is_capacity_region_Valid() const{
    return m_capacity_region_isValid;
}

OAINamespaceStatus OAICreateNamespaceResponse::getCreationStatus() const {
    return m_creation_status;
}
void OAICreateNamespaceResponse::setCreationStatus(const OAINamespaceStatus &creation_status) {
    m_creation_status = creation_status;
    m_creation_status_isSet = true;
}

bool OAICreateNamespaceResponse::is_creation_status_Set() const{
    return m_creation_status_isSet;
}

bool OAICreateNamespaceResponse::is_creation_status_Valid() const{
    return m_creation_status_isValid;
}

OAIIdentityStore OAICreateNamespaceResponse::getIdentityStore() const {
    return m_identity_store;
}
void OAICreateNamespaceResponse::setIdentityStore(const OAIIdentityStore &identity_store) {
    m_identity_store = identity_store;
    m_identity_store_isSet = true;
}

bool OAICreateNamespaceResponse::is_identity_store_Set() const{
    return m_identity_store_isSet;
}

bool OAICreateNamespaceResponse::is_identity_store_Valid() const{
    return m_identity_store_isValid;
}

QString OAICreateNamespaceResponse::getRequestId() const {
    return m_request_id;
}
void OAICreateNamespaceResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateNamespaceResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateNamespaceResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAICreateNamespaceResponse::getStatus() const {
    return m_status;
}
void OAICreateNamespaceResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateNamespaceResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateNamespaceResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateNamespaceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_store.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNamespaceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
