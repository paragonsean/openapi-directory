/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobRefreshScheduleOverrideParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobRefreshScheduleOverrideParameters::OAIAssetBundleImportJobRefreshScheduleOverrideParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobRefreshScheduleOverrideParameters::OAIAssetBundleImportJobRefreshScheduleOverrideParameters() {
    this->initializeModel();
}

OAIAssetBundleImportJobRefreshScheduleOverrideParameters::~OAIAssetBundleImportJobRefreshScheduleOverrideParameters() {}

void OAIAssetBundleImportJobRefreshScheduleOverrideParameters::initializeModel() {

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_schedule_id_isSet = false;
    m_schedule_id_isValid = false;

    m_start_after_date_time_isSet = false;
    m_start_after_date_time_isValid = false;
}

void OAIAssetBundleImportJobRefreshScheduleOverrideParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportJobRefreshScheduleOverrideParameters::fromJsonObject(QJsonObject json) {

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("DataSetId")]);
    m_data_set_id_isSet = !json[QString("DataSetId")].isNull() && m_data_set_id_isValid;

    m_schedule_id_isValid = ::OpenAPI::fromJsonValue(m_schedule_id, json[QString("ScheduleId")]);
    m_schedule_id_isSet = !json[QString("ScheduleId")].isNull() && m_schedule_id_isValid;

    m_start_after_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_after_date_time, json[QString("StartAfterDateTime")]);
    m_start_after_date_time_isSet = !json[QString("StartAfterDateTime")].isNull() && m_start_after_date_time_isValid;
}

QString OAIAssetBundleImportJobRefreshScheduleOverrideParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportJobRefreshScheduleOverrideParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_id_isSet) {
        obj.insert(QString("DataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_schedule_id_isSet) {
        obj.insert(QString("ScheduleId"), ::OpenAPI::toJsonValue(m_schedule_id));
    }
    if (m_start_after_date_time_isSet) {
        obj.insert(QString("StartAfterDateTime"), ::OpenAPI::toJsonValue(m_start_after_date_time));
    }
    return obj;
}

QString OAIAssetBundleImportJobRefreshScheduleOverrideParameters::getDataSetId() const {
    return m_data_set_id;
}
void OAIAssetBundleImportJobRefreshScheduleOverrideParameters::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIAssetBundleImportJobRefreshScheduleOverrideParameters::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIAssetBundleImportJobRefreshScheduleOverrideParameters::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAIAssetBundleImportJobRefreshScheduleOverrideParameters::getScheduleId() const {
    return m_schedule_id;
}
void OAIAssetBundleImportJobRefreshScheduleOverrideParameters::setScheduleId(const QString &schedule_id) {
    m_schedule_id = schedule_id;
    m_schedule_id_isSet = true;
}

bool OAIAssetBundleImportJobRefreshScheduleOverrideParameters::is_schedule_id_Set() const{
    return m_schedule_id_isSet;
}

bool OAIAssetBundleImportJobRefreshScheduleOverrideParameters::is_schedule_id_Valid() const{
    return m_schedule_id_isValid;
}

QDateTime OAIAssetBundleImportJobRefreshScheduleOverrideParameters::getStartAfterDateTime() const {
    return m_start_after_date_time;
}
void OAIAssetBundleImportJobRefreshScheduleOverrideParameters::setStartAfterDateTime(const QDateTime &start_after_date_time) {
    m_start_after_date_time = start_after_date_time;
    m_start_after_date_time_isSet = true;
}

bool OAIAssetBundleImportJobRefreshScheduleOverrideParameters::is_start_after_date_time_Set() const{
    return m_start_after_date_time_isSet;
}

bool OAIAssetBundleImportJobRefreshScheduleOverrideParameters::is_start_after_date_time_Valid() const{
    return m_start_after_date_time_isValid;
}

bool OAIAssetBundleImportJobRefreshScheduleOverrideParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_after_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportJobRefreshScheduleOverrideParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_id_isValid && m_schedule_id_isValid && true;
}

} // namespace OpenAPI
