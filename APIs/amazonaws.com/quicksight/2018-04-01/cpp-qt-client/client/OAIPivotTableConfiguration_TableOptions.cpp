/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableConfiguration_TableOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableConfiguration_TableOptions::OAIPivotTableConfiguration_TableOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableConfiguration_TableOptions::OAIPivotTableConfiguration_TableOptions() {
    this->initializeModel();
}

OAIPivotTableConfiguration_TableOptions::~OAIPivotTableConfiguration_TableOptions() {}

void OAIPivotTableConfiguration_TableOptions::initializeModel() {

    m_metric_placement_isSet = false;
    m_metric_placement_isValid = false;

    m_single_metric_visibility_isSet = false;
    m_single_metric_visibility_isValid = false;

    m_column_names_visibility_isSet = false;
    m_column_names_visibility_isValid = false;

    m_toggle_buttons_visibility_isSet = false;
    m_toggle_buttons_visibility_isValid = false;

    m_column_header_style_isSet = false;
    m_column_header_style_isValid = false;

    m_row_header_style_isSet = false;
    m_row_header_style_isValid = false;

    m_cell_style_isSet = false;
    m_cell_style_isValid = false;

    m_row_field_names_style_isSet = false;
    m_row_field_names_style_isValid = false;

    m_row_alternate_color_options_isSet = false;
    m_row_alternate_color_options_isValid = false;

    m_collapsed_row_dimensions_visibility_isSet = false;
    m_collapsed_row_dimensions_visibility_isValid = false;
}

void OAIPivotTableConfiguration_TableOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableConfiguration_TableOptions::fromJsonObject(QJsonObject json) {

    m_metric_placement_isValid = ::OpenAPI::fromJsonValue(m_metric_placement, json[QString("MetricPlacement")]);
    m_metric_placement_isSet = !json[QString("MetricPlacement")].isNull() && m_metric_placement_isValid;

    m_single_metric_visibility_isValid = ::OpenAPI::fromJsonValue(m_single_metric_visibility, json[QString("SingleMetricVisibility")]);
    m_single_metric_visibility_isSet = !json[QString("SingleMetricVisibility")].isNull() && m_single_metric_visibility_isValid;

    m_column_names_visibility_isValid = ::OpenAPI::fromJsonValue(m_column_names_visibility, json[QString("ColumnNamesVisibility")]);
    m_column_names_visibility_isSet = !json[QString("ColumnNamesVisibility")].isNull() && m_column_names_visibility_isValid;

    m_toggle_buttons_visibility_isValid = ::OpenAPI::fromJsonValue(m_toggle_buttons_visibility, json[QString("ToggleButtonsVisibility")]);
    m_toggle_buttons_visibility_isSet = !json[QString("ToggleButtonsVisibility")].isNull() && m_toggle_buttons_visibility_isValid;

    m_column_header_style_isValid = ::OpenAPI::fromJsonValue(m_column_header_style, json[QString("ColumnHeaderStyle")]);
    m_column_header_style_isSet = !json[QString("ColumnHeaderStyle")].isNull() && m_column_header_style_isValid;

    m_row_header_style_isValid = ::OpenAPI::fromJsonValue(m_row_header_style, json[QString("RowHeaderStyle")]);
    m_row_header_style_isSet = !json[QString("RowHeaderStyle")].isNull() && m_row_header_style_isValid;

    m_cell_style_isValid = ::OpenAPI::fromJsonValue(m_cell_style, json[QString("CellStyle")]);
    m_cell_style_isSet = !json[QString("CellStyle")].isNull() && m_cell_style_isValid;

    m_row_field_names_style_isValid = ::OpenAPI::fromJsonValue(m_row_field_names_style, json[QString("RowFieldNamesStyle")]);
    m_row_field_names_style_isSet = !json[QString("RowFieldNamesStyle")].isNull() && m_row_field_names_style_isValid;

    m_row_alternate_color_options_isValid = ::OpenAPI::fromJsonValue(m_row_alternate_color_options, json[QString("RowAlternateColorOptions")]);
    m_row_alternate_color_options_isSet = !json[QString("RowAlternateColorOptions")].isNull() && m_row_alternate_color_options_isValid;

    m_collapsed_row_dimensions_visibility_isValid = ::OpenAPI::fromJsonValue(m_collapsed_row_dimensions_visibility, json[QString("CollapsedRowDimensionsVisibility")]);
    m_collapsed_row_dimensions_visibility_isSet = !json[QString("CollapsedRowDimensionsVisibility")].isNull() && m_collapsed_row_dimensions_visibility_isValid;
}

QString OAIPivotTableConfiguration_TableOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableConfiguration_TableOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_placement.isSet()) {
        obj.insert(QString("MetricPlacement"), ::OpenAPI::toJsonValue(m_metric_placement));
    }
    if (m_single_metric_visibility.isSet()) {
        obj.insert(QString("SingleMetricVisibility"), ::OpenAPI::toJsonValue(m_single_metric_visibility));
    }
    if (m_column_names_visibility.isSet()) {
        obj.insert(QString("ColumnNamesVisibility"), ::OpenAPI::toJsonValue(m_column_names_visibility));
    }
    if (m_toggle_buttons_visibility.isSet()) {
        obj.insert(QString("ToggleButtonsVisibility"), ::OpenAPI::toJsonValue(m_toggle_buttons_visibility));
    }
    if (m_column_header_style.isSet()) {
        obj.insert(QString("ColumnHeaderStyle"), ::OpenAPI::toJsonValue(m_column_header_style));
    }
    if (m_row_header_style.isSet()) {
        obj.insert(QString("RowHeaderStyle"), ::OpenAPI::toJsonValue(m_row_header_style));
    }
    if (m_cell_style.isSet()) {
        obj.insert(QString("CellStyle"), ::OpenAPI::toJsonValue(m_cell_style));
    }
    if (m_row_field_names_style.isSet()) {
        obj.insert(QString("RowFieldNamesStyle"), ::OpenAPI::toJsonValue(m_row_field_names_style));
    }
    if (m_row_alternate_color_options.isSet()) {
        obj.insert(QString("RowAlternateColorOptions"), ::OpenAPI::toJsonValue(m_row_alternate_color_options));
    }
    if (m_collapsed_row_dimensions_visibility.isSet()) {
        obj.insert(QString("CollapsedRowDimensionsVisibility"), ::OpenAPI::toJsonValue(m_collapsed_row_dimensions_visibility));
    }
    return obj;
}

OAIPivotTableMetricPlacement OAIPivotTableConfiguration_TableOptions::getMetricPlacement() const {
    return m_metric_placement;
}
void OAIPivotTableConfiguration_TableOptions::setMetricPlacement(const OAIPivotTableMetricPlacement &metric_placement) {
    m_metric_placement = metric_placement;
    m_metric_placement_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_metric_placement_Set() const{
    return m_metric_placement_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_metric_placement_Valid() const{
    return m_metric_placement_isValid;
}

OAIVisibility OAIPivotTableConfiguration_TableOptions::getSingleMetricVisibility() const {
    return m_single_metric_visibility;
}
void OAIPivotTableConfiguration_TableOptions::setSingleMetricVisibility(const OAIVisibility &single_metric_visibility) {
    m_single_metric_visibility = single_metric_visibility;
    m_single_metric_visibility_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_single_metric_visibility_Set() const{
    return m_single_metric_visibility_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_single_metric_visibility_Valid() const{
    return m_single_metric_visibility_isValid;
}

OAIVisibility OAIPivotTableConfiguration_TableOptions::getColumnNamesVisibility() const {
    return m_column_names_visibility;
}
void OAIPivotTableConfiguration_TableOptions::setColumnNamesVisibility(const OAIVisibility &column_names_visibility) {
    m_column_names_visibility = column_names_visibility;
    m_column_names_visibility_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_column_names_visibility_Set() const{
    return m_column_names_visibility_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_column_names_visibility_Valid() const{
    return m_column_names_visibility_isValid;
}

OAIVisibility OAIPivotTableConfiguration_TableOptions::getToggleButtonsVisibility() const {
    return m_toggle_buttons_visibility;
}
void OAIPivotTableConfiguration_TableOptions::setToggleButtonsVisibility(const OAIVisibility &toggle_buttons_visibility) {
    m_toggle_buttons_visibility = toggle_buttons_visibility;
    m_toggle_buttons_visibility_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_toggle_buttons_visibility_Set() const{
    return m_toggle_buttons_visibility_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_toggle_buttons_visibility_Valid() const{
    return m_toggle_buttons_visibility_isValid;
}

OAIPivotTableOptions_ColumnHeaderStyle OAIPivotTableConfiguration_TableOptions::getColumnHeaderStyle() const {
    return m_column_header_style;
}
void OAIPivotTableConfiguration_TableOptions::setColumnHeaderStyle(const OAIPivotTableOptions_ColumnHeaderStyle &column_header_style) {
    m_column_header_style = column_header_style;
    m_column_header_style_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_column_header_style_Set() const{
    return m_column_header_style_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_column_header_style_Valid() const{
    return m_column_header_style_isValid;
}

OAIPivotTableOptions_RowHeaderStyle OAIPivotTableConfiguration_TableOptions::getRowHeaderStyle() const {
    return m_row_header_style;
}
void OAIPivotTableConfiguration_TableOptions::setRowHeaderStyle(const OAIPivotTableOptions_RowHeaderStyle &row_header_style) {
    m_row_header_style = row_header_style;
    m_row_header_style_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_row_header_style_Set() const{
    return m_row_header_style_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_row_header_style_Valid() const{
    return m_row_header_style_isValid;
}

OAIPivotTableOptions_CellStyle OAIPivotTableConfiguration_TableOptions::getCellStyle() const {
    return m_cell_style;
}
void OAIPivotTableConfiguration_TableOptions::setCellStyle(const OAIPivotTableOptions_CellStyle &cell_style) {
    m_cell_style = cell_style;
    m_cell_style_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_cell_style_Set() const{
    return m_cell_style_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_cell_style_Valid() const{
    return m_cell_style_isValid;
}

OAIPivotTableOptions_RowFieldNamesStyle OAIPivotTableConfiguration_TableOptions::getRowFieldNamesStyle() const {
    return m_row_field_names_style;
}
void OAIPivotTableConfiguration_TableOptions::setRowFieldNamesStyle(const OAIPivotTableOptions_RowFieldNamesStyle &row_field_names_style) {
    m_row_field_names_style = row_field_names_style;
    m_row_field_names_style_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_row_field_names_style_Set() const{
    return m_row_field_names_style_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_row_field_names_style_Valid() const{
    return m_row_field_names_style_isValid;
}

OAIPivotTableOptions_RowAlternateColorOptions OAIPivotTableConfiguration_TableOptions::getRowAlternateColorOptions() const {
    return m_row_alternate_color_options;
}
void OAIPivotTableConfiguration_TableOptions::setRowAlternateColorOptions(const OAIPivotTableOptions_RowAlternateColorOptions &row_alternate_color_options) {
    m_row_alternate_color_options = row_alternate_color_options;
    m_row_alternate_color_options_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_row_alternate_color_options_Set() const{
    return m_row_alternate_color_options_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_row_alternate_color_options_Valid() const{
    return m_row_alternate_color_options_isValid;
}

OAIVisibility OAIPivotTableConfiguration_TableOptions::getCollapsedRowDimensionsVisibility() const {
    return m_collapsed_row_dimensions_visibility;
}
void OAIPivotTableConfiguration_TableOptions::setCollapsedRowDimensionsVisibility(const OAIVisibility &collapsed_row_dimensions_visibility) {
    m_collapsed_row_dimensions_visibility = collapsed_row_dimensions_visibility;
    m_collapsed_row_dimensions_visibility_isSet = true;
}

bool OAIPivotTableConfiguration_TableOptions::is_collapsed_row_dimensions_visibility_Set() const{
    return m_collapsed_row_dimensions_visibility_isSet;
}

bool OAIPivotTableConfiguration_TableOptions::is_collapsed_row_dimensions_visibility_Valid() const{
    return m_collapsed_row_dimensions_visibility_isValid;
}

bool OAIPivotTableConfiguration_TableOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_metric_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_names_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_toggle_buttons_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_header_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_header_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_field_names_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_alternate_color_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collapsed_row_dimensions_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableConfiguration_TableOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
