/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeTemplateDefinitionResponse.h
 *
 * 
 */

#ifndef OAIDescribeTemplateDefinitionResponse_H
#define OAIDescribeTemplateDefinitionResponse_H

#include <QJsonObject>

#include "OAIDescribeTemplateDefinitionResponse_Definition.h"
#include "OAIResourceStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeTemplateDefinitionResponse_Definition;

class OAIDescribeTemplateDefinitionResponse : public OAIObject {
public:
    OAIDescribeTemplateDefinitionResponse();
    OAIDescribeTemplateDefinitionResponse(QString json);
    ~OAIDescribeTemplateDefinitionResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getTemplateId() const;
    void setTemplateId(const QString &template_id);
    bool is_template_id_Set() const;
    bool is_template_id_Valid() const;

    QList getErrors() const;
    void setErrors(const QList &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    OAIResourceStatus getResourceStatus() const;
    void setResourceStatus(const OAIResourceStatus &resource_status);
    bool is_resource_status_Set() const;
    bool is_resource_status_Valid() const;

    QString getThemeArn() const;
    void setThemeArn(const QString &theme_arn);
    bool is_theme_arn_Set() const;
    bool is_theme_arn_Valid() const;

    OAIDescribeTemplateDefinitionResponse_Definition getDefinition() const;
    void setDefinition(const OAIDescribeTemplateDefinitionResponse_Definition &definition);
    bool is_definition_Set() const;
    bool is_definition_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_template_id;
    bool m_template_id_isSet;
    bool m_template_id_isValid;

    QList m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    OAIResourceStatus m_resource_status;
    bool m_resource_status_isSet;
    bool m_resource_status_isValid;

    QString m_theme_arn;
    bool m_theme_arn_isSet;
    bool m_theme_arn_isValid;

    OAIDescribeTemplateDefinitionResponse_Definition m_definition;
    bool m_definition_isSet;
    bool m_definition_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeTemplateDefinitionResponse)

#endif // OAIDescribeTemplateDefinitionResponse_H
