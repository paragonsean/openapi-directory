/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegendOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegendOptions::OAILegendOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegendOptions::OAILegendOptions() {
    this->initializeModel();
}

OAILegendOptions::~OAILegendOptions() {}

void OAILegendOptions::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;
}

void OAILegendOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegendOptions::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;
}

QString OAILegendOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegendOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_title.isSet()) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    return obj;
}

OAIVisibility OAILegendOptions::getVisibility() const {
    return m_visibility;
}
void OAILegendOptions::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAILegendOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAILegendOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAILegendOptions_Title OAILegendOptions::getTitle() const {
    return m_title;
}
void OAILegendOptions::setTitle(const OAILegendOptions_Title &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILegendOptions::is_title_Set() const{
    return m_title_isSet;
}

bool OAILegendOptions::is_title_Valid() const{
    return m_title_isValid;
}

OAILegendPosition OAILegendOptions::getPosition() const {
    return m_position;
}
void OAILegendOptions::setPosition(const OAILegendPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAILegendOptions::is_position_Set() const{
    return m_position_isSet;
}

bool OAILegendOptions::is_position_Valid() const{
    return m_position_isValid;
}

QString OAILegendOptions::getWidth() const {
    return m_width;
}
void OAILegendOptions::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAILegendOptions::is_width_Set() const{
    return m_width_isSet;
}

bool OAILegendOptions::is_width_Valid() const{
    return m_width_isValid;
}

QString OAILegendOptions::getHeight() const {
    return m_height;
}
void OAILegendOptions::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAILegendOptions::is_height_Set() const{
    return m_height_isSet;
}

bool OAILegendOptions::is_height_Valid() const{
    return m_height_isValid;
}

bool OAILegendOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegendOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
