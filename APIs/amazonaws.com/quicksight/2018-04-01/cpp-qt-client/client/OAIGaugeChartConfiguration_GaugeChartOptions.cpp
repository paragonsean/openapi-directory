/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGaugeChartConfiguration_GaugeChartOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGaugeChartConfiguration_GaugeChartOptions::OAIGaugeChartConfiguration_GaugeChartOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGaugeChartConfiguration_GaugeChartOptions::OAIGaugeChartConfiguration_GaugeChartOptions() {
    this->initializeModel();
}

OAIGaugeChartConfiguration_GaugeChartOptions::~OAIGaugeChartConfiguration_GaugeChartOptions() {}

void OAIGaugeChartConfiguration_GaugeChartOptions::initializeModel() {

    m_primary_value_display_type_isSet = false;
    m_primary_value_display_type_isValid = false;

    m_comparison_isSet = false;
    m_comparison_isValid = false;

    m_arc_axis_isSet = false;
    m_arc_axis_isValid = false;

    m_arc_isSet = false;
    m_arc_isValid = false;

    m_primary_value_font_configuration_isSet = false;
    m_primary_value_font_configuration_isValid = false;
}

void OAIGaugeChartConfiguration_GaugeChartOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGaugeChartConfiguration_GaugeChartOptions::fromJsonObject(QJsonObject json) {

    m_primary_value_display_type_isValid = ::OpenAPI::fromJsonValue(m_primary_value_display_type, json[QString("PrimaryValueDisplayType")]);
    m_primary_value_display_type_isSet = !json[QString("PrimaryValueDisplayType")].isNull() && m_primary_value_display_type_isValid;

    m_comparison_isValid = ::OpenAPI::fromJsonValue(m_comparison, json[QString("Comparison")]);
    m_comparison_isSet = !json[QString("Comparison")].isNull() && m_comparison_isValid;

    m_arc_axis_isValid = ::OpenAPI::fromJsonValue(m_arc_axis, json[QString("ArcAxis")]);
    m_arc_axis_isSet = !json[QString("ArcAxis")].isNull() && m_arc_axis_isValid;

    m_arc_isValid = ::OpenAPI::fromJsonValue(m_arc, json[QString("Arc")]);
    m_arc_isSet = !json[QString("Arc")].isNull() && m_arc_isValid;

    m_primary_value_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_primary_value_font_configuration, json[QString("PrimaryValueFontConfiguration")]);
    m_primary_value_font_configuration_isSet = !json[QString("PrimaryValueFontConfiguration")].isNull() && m_primary_value_font_configuration_isValid;
}

QString OAIGaugeChartConfiguration_GaugeChartOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGaugeChartConfiguration_GaugeChartOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_value_display_type.isSet()) {
        obj.insert(QString("PrimaryValueDisplayType"), ::OpenAPI::toJsonValue(m_primary_value_display_type));
    }
    if (m_comparison.isSet()) {
        obj.insert(QString("Comparison"), ::OpenAPI::toJsonValue(m_comparison));
    }
    if (m_arc_axis.isSet()) {
        obj.insert(QString("ArcAxis"), ::OpenAPI::toJsonValue(m_arc_axis));
    }
    if (m_arc.isSet()) {
        obj.insert(QString("Arc"), ::OpenAPI::toJsonValue(m_arc));
    }
    if (m_primary_value_font_configuration.isSet()) {
        obj.insert(QString("PrimaryValueFontConfiguration"), ::OpenAPI::toJsonValue(m_primary_value_font_configuration));
    }
    return obj;
}

OAIPrimaryValueDisplayType OAIGaugeChartConfiguration_GaugeChartOptions::getPrimaryValueDisplayType() const {
    return m_primary_value_display_type;
}
void OAIGaugeChartConfiguration_GaugeChartOptions::setPrimaryValueDisplayType(const OAIPrimaryValueDisplayType &primary_value_display_type) {
    m_primary_value_display_type = primary_value_display_type;
    m_primary_value_display_type_isSet = true;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_primary_value_display_type_Set() const{
    return m_primary_value_display_type_isSet;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_primary_value_display_type_Valid() const{
    return m_primary_value_display_type_isValid;
}

OAIGaugeChartOptions_Comparison OAIGaugeChartConfiguration_GaugeChartOptions::getComparison() const {
    return m_comparison;
}
void OAIGaugeChartConfiguration_GaugeChartOptions::setComparison(const OAIGaugeChartOptions_Comparison &comparison) {
    m_comparison = comparison;
    m_comparison_isSet = true;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_comparison_Set() const{
    return m_comparison_isSet;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_comparison_Valid() const{
    return m_comparison_isValid;
}

OAIGaugeChartOptions_ArcAxis OAIGaugeChartConfiguration_GaugeChartOptions::getArcAxis() const {
    return m_arc_axis;
}
void OAIGaugeChartConfiguration_GaugeChartOptions::setArcAxis(const OAIGaugeChartOptions_ArcAxis &arc_axis) {
    m_arc_axis = arc_axis;
    m_arc_axis_isSet = true;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_arc_axis_Set() const{
    return m_arc_axis_isSet;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_arc_axis_Valid() const{
    return m_arc_axis_isValid;
}

OAIGaugeChartOptions_Arc OAIGaugeChartConfiguration_GaugeChartOptions::getArc() const {
    return m_arc;
}
void OAIGaugeChartConfiguration_GaugeChartOptions::setArc(const OAIGaugeChartOptions_Arc &arc) {
    m_arc = arc;
    m_arc_isSet = true;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_arc_Set() const{
    return m_arc_isSet;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_arc_Valid() const{
    return m_arc_isValid;
}

OAIGaugeChartOptions_PrimaryValueFontConfiguration OAIGaugeChartConfiguration_GaugeChartOptions::getPrimaryValueFontConfiguration() const {
    return m_primary_value_font_configuration;
}
void OAIGaugeChartConfiguration_GaugeChartOptions::setPrimaryValueFontConfiguration(const OAIGaugeChartOptions_PrimaryValueFontConfiguration &primary_value_font_configuration) {
    m_primary_value_font_configuration = primary_value_font_configuration;
    m_primary_value_font_configuration_isSet = true;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_primary_value_font_configuration_Set() const{
    return m_primary_value_font_configuration_isSet;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::is_primary_value_font_configuration_Valid() const{
    return m_primary_value_font_configuration_isValid;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_value_display_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arc_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_value_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGaugeChartConfiguration_GaugeChartOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
