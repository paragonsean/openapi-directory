/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnHierarchy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnHierarchy::OAIColumnHierarchy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnHierarchy::OAIColumnHierarchy() {
    this->initializeModel();
}

OAIColumnHierarchy::~OAIColumnHierarchy() {}

void OAIColumnHierarchy::initializeModel() {

    m_explicit_hierarchy_isSet = false;
    m_explicit_hierarchy_isValid = false;

    m_date_time_hierarchy_isSet = false;
    m_date_time_hierarchy_isValid = false;

    m_predefined_hierarchy_isSet = false;
    m_predefined_hierarchy_isValid = false;
}

void OAIColumnHierarchy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnHierarchy::fromJsonObject(QJsonObject json) {

    m_explicit_hierarchy_isValid = ::OpenAPI::fromJsonValue(m_explicit_hierarchy, json[QString("ExplicitHierarchy")]);
    m_explicit_hierarchy_isSet = !json[QString("ExplicitHierarchy")].isNull() && m_explicit_hierarchy_isValid;

    m_date_time_hierarchy_isValid = ::OpenAPI::fromJsonValue(m_date_time_hierarchy, json[QString("DateTimeHierarchy")]);
    m_date_time_hierarchy_isSet = !json[QString("DateTimeHierarchy")].isNull() && m_date_time_hierarchy_isValid;

    m_predefined_hierarchy_isValid = ::OpenAPI::fromJsonValue(m_predefined_hierarchy, json[QString("PredefinedHierarchy")]);
    m_predefined_hierarchy_isSet = !json[QString("PredefinedHierarchy")].isNull() && m_predefined_hierarchy_isValid;
}

QString OAIColumnHierarchy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnHierarchy::asJsonObject() const {
    QJsonObject obj;
    if (m_explicit_hierarchy.isSet()) {
        obj.insert(QString("ExplicitHierarchy"), ::OpenAPI::toJsonValue(m_explicit_hierarchy));
    }
    if (m_date_time_hierarchy.isSet()) {
        obj.insert(QString("DateTimeHierarchy"), ::OpenAPI::toJsonValue(m_date_time_hierarchy));
    }
    if (m_predefined_hierarchy.isSet()) {
        obj.insert(QString("PredefinedHierarchy"), ::OpenAPI::toJsonValue(m_predefined_hierarchy));
    }
    return obj;
}

OAIColumnHierarchy_ExplicitHierarchy OAIColumnHierarchy::getExplicitHierarchy() const {
    return m_explicit_hierarchy;
}
void OAIColumnHierarchy::setExplicitHierarchy(const OAIColumnHierarchy_ExplicitHierarchy &explicit_hierarchy) {
    m_explicit_hierarchy = explicit_hierarchy;
    m_explicit_hierarchy_isSet = true;
}

bool OAIColumnHierarchy::is_explicit_hierarchy_Set() const{
    return m_explicit_hierarchy_isSet;
}

bool OAIColumnHierarchy::is_explicit_hierarchy_Valid() const{
    return m_explicit_hierarchy_isValid;
}

OAIColumnHierarchy_DateTimeHierarchy OAIColumnHierarchy::getDateTimeHierarchy() const {
    return m_date_time_hierarchy;
}
void OAIColumnHierarchy::setDateTimeHierarchy(const OAIColumnHierarchy_DateTimeHierarchy &date_time_hierarchy) {
    m_date_time_hierarchy = date_time_hierarchy;
    m_date_time_hierarchy_isSet = true;
}

bool OAIColumnHierarchy::is_date_time_hierarchy_Set() const{
    return m_date_time_hierarchy_isSet;
}

bool OAIColumnHierarchy::is_date_time_hierarchy_Valid() const{
    return m_date_time_hierarchy_isValid;
}

OAIColumnHierarchy_PredefinedHierarchy OAIColumnHierarchy::getPredefinedHierarchy() const {
    return m_predefined_hierarchy;
}
void OAIColumnHierarchy::setPredefinedHierarchy(const OAIColumnHierarchy_PredefinedHierarchy &predefined_hierarchy) {
    m_predefined_hierarchy = predefined_hierarchy;
    m_predefined_hierarchy_isSet = true;
}

bool OAIColumnHierarchy::is_predefined_hierarchy_Set() const{
    return m_predefined_hierarchy_isSet;
}

bool OAIColumnHierarchy::is_predefined_hierarchy_Valid() const{
    return m_predefined_hierarchy_isValid;
}

bool OAIColumnHierarchy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explicit_hierarchy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_hierarchy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_hierarchy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnHierarchy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
