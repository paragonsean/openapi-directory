/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultSectionBasedLayoutConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultSectionBasedLayoutConfiguration::OAIDefaultSectionBasedLayoutConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultSectionBasedLayoutConfiguration::OAIDefaultSectionBasedLayoutConfiguration() {
    this->initializeModel();
}

OAIDefaultSectionBasedLayoutConfiguration::~OAIDefaultSectionBasedLayoutConfiguration() {}

void OAIDefaultSectionBasedLayoutConfiguration::initializeModel() {

    m_canvas_size_options_isSet = false;
    m_canvas_size_options_isValid = false;
}

void OAIDefaultSectionBasedLayoutConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultSectionBasedLayoutConfiguration::fromJsonObject(QJsonObject json) {

    m_canvas_size_options_isValid = ::OpenAPI::fromJsonValue(m_canvas_size_options, json[QString("CanvasSizeOptions")]);
    m_canvas_size_options_isSet = !json[QString("CanvasSizeOptions")].isNull() && m_canvas_size_options_isValid;
}

QString OAIDefaultSectionBasedLayoutConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultSectionBasedLayoutConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_canvas_size_options.isSet()) {
        obj.insert(QString("CanvasSizeOptions"), ::OpenAPI::toJsonValue(m_canvas_size_options));
    }
    return obj;
}

OAIDefaultSectionBasedLayoutConfiguration_CanvasSizeOptions OAIDefaultSectionBasedLayoutConfiguration::getCanvasSizeOptions() const {
    return m_canvas_size_options;
}
void OAIDefaultSectionBasedLayoutConfiguration::setCanvasSizeOptions(const OAIDefaultSectionBasedLayoutConfiguration_CanvasSizeOptions &canvas_size_options) {
    m_canvas_size_options = canvas_size_options;
    m_canvas_size_options_isSet = true;
}

bool OAIDefaultSectionBasedLayoutConfiguration::is_canvas_size_options_Set() const{
    return m_canvas_size_options_isSet;
}

bool OAIDefaultSectionBasedLayoutConfiguration::is_canvas_size_options_Valid() const{
    return m_canvas_size_options_isValid;
}

bool OAIDefaultSectionBasedLayoutConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canvas_size_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultSectionBasedLayoutConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_canvas_size_options_isValid && true;
}

} // namespace OpenAPI
