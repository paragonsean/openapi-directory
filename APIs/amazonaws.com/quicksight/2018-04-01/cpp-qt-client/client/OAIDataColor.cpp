/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataColor::OAIDataColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataColor::OAIDataColor() {
    this->initializeModel();
}

OAIDataColor::~OAIDataColor() {}

void OAIDataColor::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_data_value_isSet = false;
    m_data_value_isValid = false;
}

void OAIDataColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataColor::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_data_value_isValid = ::OpenAPI::fromJsonValue(m_data_value, json[QString("DataValue")]);
    m_data_value_isSet = !json[QString("DataValue")].isNull() && m_data_value_isValid;
}

QString OAIDataColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataColor::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_data_value_isSet) {
        obj.insert(QString("DataValue"), ::OpenAPI::toJsonValue(m_data_value));
    }
    return obj;
}

QString OAIDataColor::getColor() const {
    return m_color;
}
void OAIDataColor::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIDataColor::is_color_Set() const{
    return m_color_isSet;
}

bool OAIDataColor::is_color_Valid() const{
    return m_color_isValid;
}

double OAIDataColor::getDataValue() const {
    return m_data_value;
}
void OAIDataColor::setDataValue(const double &data_value) {
    m_data_value = data_value;
    m_data_value_isSet = true;
}

bool OAIDataColor::is_data_value_Set() const{
    return m_data_value_isSet;
}

bool OAIDataColor::is_data_value_Valid() const{
    return m_data_value_isValid;
}

bool OAIDataColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
