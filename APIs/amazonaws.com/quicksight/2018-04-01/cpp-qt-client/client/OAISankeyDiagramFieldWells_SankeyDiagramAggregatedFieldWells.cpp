/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells() {
    this->initializeModel();
}

OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::~OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells() {}

void OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QList OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::getSource() const {
    return m_source;
}
void OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::setSource(const QList &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::is_source_Set() const{
    return m_source_isSet;
}

bool OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::is_source_Valid() const{
    return m_source_isValid;
}

QList OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::getDestination() const {
    return m_destination;
}
void OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::setDestination(const QList &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::is_destination_Valid() const{
    return m_destination_isValid;
}

QList OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::getWeight() const {
    return m_weight;
}
void OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::setWeight(const QList &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISankeyDiagramFieldWells_SankeyDiagramAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
