/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThemeVersion_Configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThemeVersion_Configuration::OAIThemeVersion_Configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThemeVersion_Configuration::OAIThemeVersion_Configuration() {
    this->initializeModel();
}

OAIThemeVersion_Configuration::~OAIThemeVersion_Configuration() {}

void OAIThemeVersion_Configuration::initializeModel() {

    m_data_color_palette_isSet = false;
    m_data_color_palette_isValid = false;

    m_ui_color_palette_isSet = false;
    m_ui_color_palette_isValid = false;

    m_sheet_isSet = false;
    m_sheet_isValid = false;

    m_typography_isSet = false;
    m_typography_isValid = false;
}

void OAIThemeVersion_Configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThemeVersion_Configuration::fromJsonObject(QJsonObject json) {

    m_data_color_palette_isValid = ::OpenAPI::fromJsonValue(m_data_color_palette, json[QString("DataColorPalette")]);
    m_data_color_palette_isSet = !json[QString("DataColorPalette")].isNull() && m_data_color_palette_isValid;

    m_ui_color_palette_isValid = ::OpenAPI::fromJsonValue(m_ui_color_palette, json[QString("UIColorPalette")]);
    m_ui_color_palette_isSet = !json[QString("UIColorPalette")].isNull() && m_ui_color_palette_isValid;

    m_sheet_isValid = ::OpenAPI::fromJsonValue(m_sheet, json[QString("Sheet")]);
    m_sheet_isSet = !json[QString("Sheet")].isNull() && m_sheet_isValid;

    m_typography_isValid = ::OpenAPI::fromJsonValue(m_typography, json[QString("Typography")]);
    m_typography_isSet = !json[QString("Typography")].isNull() && m_typography_isValid;
}

QString OAIThemeVersion_Configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThemeVersion_Configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_data_color_palette.isSet()) {
        obj.insert(QString("DataColorPalette"), ::OpenAPI::toJsonValue(m_data_color_palette));
    }
    if (m_ui_color_palette.isSet()) {
        obj.insert(QString("UIColorPalette"), ::OpenAPI::toJsonValue(m_ui_color_palette));
    }
    if (m_sheet.isSet()) {
        obj.insert(QString("Sheet"), ::OpenAPI::toJsonValue(m_sheet));
    }
    if (m_typography.isSet()) {
        obj.insert(QString("Typography"), ::OpenAPI::toJsonValue(m_typography));
    }
    return obj;
}

OAIUpdateTheme_request_Configuration_DataColorPalette OAIThemeVersion_Configuration::getDataColorPalette() const {
    return m_data_color_palette;
}
void OAIThemeVersion_Configuration::setDataColorPalette(const OAIUpdateTheme_request_Configuration_DataColorPalette &data_color_palette) {
    m_data_color_palette = data_color_palette;
    m_data_color_palette_isSet = true;
}

bool OAIThemeVersion_Configuration::is_data_color_palette_Set() const{
    return m_data_color_palette_isSet;
}

bool OAIThemeVersion_Configuration::is_data_color_palette_Valid() const{
    return m_data_color_palette_isValid;
}

OAIUpdateTheme_request_Configuration_UIColorPalette OAIThemeVersion_Configuration::getUiColorPalette() const {
    return m_ui_color_palette;
}
void OAIThemeVersion_Configuration::setUiColorPalette(const OAIUpdateTheme_request_Configuration_UIColorPalette &ui_color_palette) {
    m_ui_color_palette = ui_color_palette;
    m_ui_color_palette_isSet = true;
}

bool OAIThemeVersion_Configuration::is_ui_color_palette_Set() const{
    return m_ui_color_palette_isSet;
}

bool OAIThemeVersion_Configuration::is_ui_color_palette_Valid() const{
    return m_ui_color_palette_isValid;
}

OAIUpdateTheme_request_Configuration_Sheet OAIThemeVersion_Configuration::getSheet() const {
    return m_sheet;
}
void OAIThemeVersion_Configuration::setSheet(const OAIUpdateTheme_request_Configuration_Sheet &sheet) {
    m_sheet = sheet;
    m_sheet_isSet = true;
}

bool OAIThemeVersion_Configuration::is_sheet_Set() const{
    return m_sheet_isSet;
}

bool OAIThemeVersion_Configuration::is_sheet_Valid() const{
    return m_sheet_isValid;
}

OAITypography OAIThemeVersion_Configuration::getTypography() const {
    return m_typography;
}
void OAIThemeVersion_Configuration::setTypography(const OAITypography &typography) {
    m_typography = typography;
    m_typography_isSet = true;
}

bool OAIThemeVersion_Configuration::is_typography_Set() const{
    return m_typography_isSet;
}

bool OAIThemeVersion_Configuration::is_typography_Valid() const{
    return m_typography_isValid;
}

bool OAIThemeVersion_Configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_color_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_color_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_typography.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThemeVersion_Configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
