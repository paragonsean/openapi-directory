/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDataSourceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDataSourceResponse::OAIUpdateDataSourceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDataSourceResponse::OAIUpdateDataSourceResponse() {
    this->initializeModel();
}

OAIUpdateDataSourceResponse::~OAIUpdateDataSourceResponse() {}

void OAIUpdateDataSourceResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_update_status_isSet = false;
    m_update_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateDataSourceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDataSourceResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;

    m_update_status_isValid = ::OpenAPI::fromJsonValue(m_update_status, json[QString("UpdateStatus")]);
    m_update_status_isSet = !json[QString("UpdateStatus")].isNull() && m_update_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIUpdateDataSourceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDataSourceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_update_status.isSet()) {
        obj.insert(QString("UpdateStatus"), ::OpenAPI::toJsonValue(m_update_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUpdateDataSourceResponse::getArn() const {
    return m_arn;
}
void OAIUpdateDataSourceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateDataSourceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateDataSourceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUpdateDataSourceResponse::getDataSourceId() const {
    return m_data_source_id;
}
void OAIUpdateDataSourceResponse::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIUpdateDataSourceResponse::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIUpdateDataSourceResponse::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

OAIResourceStatus OAIUpdateDataSourceResponse::getUpdateStatus() const {
    return m_update_status;
}
void OAIUpdateDataSourceResponse::setUpdateStatus(const OAIResourceStatus &update_status) {
    m_update_status = update_status;
    m_update_status_isSet = true;
}

bool OAIUpdateDataSourceResponse::is_update_status_Set() const{
    return m_update_status_isSet;
}

bool OAIUpdateDataSourceResponse::is_update_status_Valid() const{
    return m_update_status_isValid;
}

QString OAIUpdateDataSourceResponse::getRequestId() const {
    return m_request_id;
}
void OAIUpdateDataSourceResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIUpdateDataSourceResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIUpdateDataSourceResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIUpdateDataSourceResponse::getStatus() const {
    return m_status;
}
void OAIUpdateDataSourceResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateDataSourceResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateDataSourceResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateDataSourceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDataSourceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
