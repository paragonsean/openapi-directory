/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIKPIOptions.h
 *
 * The options that determine the presentation of a KPI visual.
 */

#ifndef OAIKPIOptions_H
#define OAIKPIOptions_H

#include <QJsonObject>

#include "OAIGaugeChartOptions_PrimaryValueFontConfiguration.h"
#include "OAIKPIOptions_Comparison.h"
#include "OAIKPIOptions_ProgressBar.h"
#include "OAIKPIOptions_SecondaryValue.h"
#include "OAIKPIOptions_SecondaryValueFontConfiguration.h"
#include "OAIKPIOptions_TrendArrows.h"
#include "OAIPrimaryValueDisplayType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKPIOptions_ProgressBar;
class OAIKPIOptions_TrendArrows;
class OAIKPIOptions_SecondaryValue;
class OAIKPIOptions_Comparison;
class OAIGaugeChartOptions_PrimaryValueFontConfiguration;
class OAIKPIOptions_SecondaryValueFontConfiguration;

class OAIKPIOptions : public OAIObject {
public:
    OAIKPIOptions();
    OAIKPIOptions(QString json);
    ~OAIKPIOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIKPIOptions_ProgressBar getProgressBar() const;
    void setProgressBar(const OAIKPIOptions_ProgressBar &progress_bar);
    bool is_progress_bar_Set() const;
    bool is_progress_bar_Valid() const;

    OAIKPIOptions_TrendArrows getTrendArrows() const;
    void setTrendArrows(const OAIKPIOptions_TrendArrows &trend_arrows);
    bool is_trend_arrows_Set() const;
    bool is_trend_arrows_Valid() const;

    OAIKPIOptions_SecondaryValue getSecondaryValue() const;
    void setSecondaryValue(const OAIKPIOptions_SecondaryValue &secondary_value);
    bool is_secondary_value_Set() const;
    bool is_secondary_value_Valid() const;

    OAIKPIOptions_Comparison getComparison() const;
    void setComparison(const OAIKPIOptions_Comparison &comparison);
    bool is_comparison_Set() const;
    bool is_comparison_Valid() const;

    OAIPrimaryValueDisplayType getPrimaryValueDisplayType() const;
    void setPrimaryValueDisplayType(const OAIPrimaryValueDisplayType &primary_value_display_type);
    bool is_primary_value_display_type_Set() const;
    bool is_primary_value_display_type_Valid() const;

    OAIGaugeChartOptions_PrimaryValueFontConfiguration getPrimaryValueFontConfiguration() const;
    void setPrimaryValueFontConfiguration(const OAIGaugeChartOptions_PrimaryValueFontConfiguration &primary_value_font_configuration);
    bool is_primary_value_font_configuration_Set() const;
    bool is_primary_value_font_configuration_Valid() const;

    OAIKPIOptions_SecondaryValueFontConfiguration getSecondaryValueFontConfiguration() const;
    void setSecondaryValueFontConfiguration(const OAIKPIOptions_SecondaryValueFontConfiguration &secondary_value_font_configuration);
    bool is_secondary_value_font_configuration_Set() const;
    bool is_secondary_value_font_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIKPIOptions_ProgressBar m_progress_bar;
    bool m_progress_bar_isSet;
    bool m_progress_bar_isValid;

    OAIKPIOptions_TrendArrows m_trend_arrows;
    bool m_trend_arrows_isSet;
    bool m_trend_arrows_isValid;

    OAIKPIOptions_SecondaryValue m_secondary_value;
    bool m_secondary_value_isSet;
    bool m_secondary_value_isValid;

    OAIKPIOptions_Comparison m_comparison;
    bool m_comparison_isSet;
    bool m_comparison_isValid;

    OAIPrimaryValueDisplayType m_primary_value_display_type;
    bool m_primary_value_display_type_isSet;
    bool m_primary_value_display_type_isValid;

    OAIGaugeChartOptions_PrimaryValueFontConfiguration m_primary_value_font_configuration;
    bool m_primary_value_font_configuration_isSet;
    bool m_primary_value_font_configuration_isValid;

    OAIKPIOptions_SecondaryValueFontConfiguration m_secondary_value_font_configuration;
    bool m_secondary_value_font_configuration_isSet;
    bool m_secondary_value_font_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIKPIOptions)

#endif // OAIKPIOptions_H
