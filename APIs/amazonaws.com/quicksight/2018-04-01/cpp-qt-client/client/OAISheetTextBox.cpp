/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetTextBox.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetTextBox::OAISheetTextBox(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetTextBox::OAISheetTextBox() {
    this->initializeModel();
}

OAISheetTextBox::~OAISheetTextBox() {}

void OAISheetTextBox::initializeModel() {

    m_sheet_text_box_id_isSet = false;
    m_sheet_text_box_id_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;
}

void OAISheetTextBox::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetTextBox::fromJsonObject(QJsonObject json) {

    m_sheet_text_box_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_text_box_id, json[QString("SheetTextBoxId")]);
    m_sheet_text_box_id_isSet = !json[QString("SheetTextBoxId")].isNull() && m_sheet_text_box_id_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;
}

QString OAISheetTextBox::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetTextBox::asJsonObject() const {
    QJsonObject obj;
    if (m_sheet_text_box_id_isSet) {
        obj.insert(QString("SheetTextBoxId"), ::OpenAPI::toJsonValue(m_sheet_text_box_id));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    return obj;
}

QString OAISheetTextBox::getSheetTextBoxId() const {
    return m_sheet_text_box_id;
}
void OAISheetTextBox::setSheetTextBoxId(const QString &sheet_text_box_id) {
    m_sheet_text_box_id = sheet_text_box_id;
    m_sheet_text_box_id_isSet = true;
}

bool OAISheetTextBox::is_sheet_text_box_id_Set() const{
    return m_sheet_text_box_id_isSet;
}

bool OAISheetTextBox::is_sheet_text_box_id_Valid() const{
    return m_sheet_text_box_id_isValid;
}

QString OAISheetTextBox::getContent() const {
    return m_content;
}
void OAISheetTextBox::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAISheetTextBox::is_content_Set() const{
    return m_content_isSet;
}

bool OAISheetTextBox::is_content_Valid() const{
    return m_content_isValid;
}

bool OAISheetTextBox::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sheet_text_box_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetTextBox::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sheet_text_box_id_isValid && true;
}

} // namespace OpenAPI
