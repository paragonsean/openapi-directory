/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamicDefaultValue_UserNameColumn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamicDefaultValue_UserNameColumn::OAIDynamicDefaultValue_UserNameColumn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamicDefaultValue_UserNameColumn::OAIDynamicDefaultValue_UserNameColumn() {
    this->initializeModel();
}

OAIDynamicDefaultValue_UserNameColumn::~OAIDynamicDefaultValue_UserNameColumn() {}

void OAIDynamicDefaultValue_UserNameColumn::initializeModel() {

    m_data_set_identifier_isSet = false;
    m_data_set_identifier_isValid = false;

    m_column_name_isSet = false;
    m_column_name_isValid = false;
}

void OAIDynamicDefaultValue_UserNameColumn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDynamicDefaultValue_UserNameColumn::fromJsonObject(QJsonObject json) {

    m_data_set_identifier_isValid = ::OpenAPI::fromJsonValue(m_data_set_identifier, json[QString("DataSetIdentifier")]);
    m_data_set_identifier_isSet = !json[QString("DataSetIdentifier")].isNull() && m_data_set_identifier_isValid;

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;
}

QString OAIDynamicDefaultValue_UserNameColumn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDynamicDefaultValue_UserNameColumn::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_identifier_isSet) {
        obj.insert(QString("DataSetIdentifier"), ::OpenAPI::toJsonValue(m_data_set_identifier));
    }
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    return obj;
}

QString OAIDynamicDefaultValue_UserNameColumn::getDataSetIdentifier() const {
    return m_data_set_identifier;
}
void OAIDynamicDefaultValue_UserNameColumn::setDataSetIdentifier(const QString &data_set_identifier) {
    m_data_set_identifier = data_set_identifier;
    m_data_set_identifier_isSet = true;
}

bool OAIDynamicDefaultValue_UserNameColumn::is_data_set_identifier_Set() const{
    return m_data_set_identifier_isSet;
}

bool OAIDynamicDefaultValue_UserNameColumn::is_data_set_identifier_Valid() const{
    return m_data_set_identifier_isValid;
}

QString OAIDynamicDefaultValue_UserNameColumn::getColumnName() const {
    return m_column_name;
}
void OAIDynamicDefaultValue_UserNameColumn::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIDynamicDefaultValue_UserNameColumn::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIDynamicDefaultValue_UserNameColumn::is_column_name_Valid() const{
    return m_column_name_isValid;
}

bool OAIDynamicDefaultValue_UserNameColumn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDynamicDefaultValue_UserNameColumn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_identifier_isValid && m_column_name_isValid && true;
}

} // namespace OpenAPI
