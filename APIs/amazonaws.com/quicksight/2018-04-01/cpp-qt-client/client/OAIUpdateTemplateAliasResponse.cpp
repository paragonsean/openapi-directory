/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTemplateAliasResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTemplateAliasResponse::OAIUpdateTemplateAliasResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTemplateAliasResponse::OAIUpdateTemplateAliasResponse() {
    this->initializeModel();
}

OAIUpdateTemplateAliasResponse::~OAIUpdateTemplateAliasResponse() {}

void OAIUpdateTemplateAliasResponse::initializeModel() {

    m_template_alias_isSet = false;
    m_template_alias_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIUpdateTemplateAliasResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTemplateAliasResponse::fromJsonObject(QJsonObject json) {

    m_template_alias_isValid = ::OpenAPI::fromJsonValue(m_template_alias, json[QString("TemplateAlias")]);
    m_template_alias_isSet = !json[QString("TemplateAlias")].isNull() && m_template_alias_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIUpdateTemplateAliasResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTemplateAliasResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_template_alias.isSet()) {
        obj.insert(QString("TemplateAlias"), ::OpenAPI::toJsonValue(m_template_alias));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIUpdateTemplateAliasResponse_TemplateAlias OAIUpdateTemplateAliasResponse::getTemplateAlias() const {
    return m_template_alias;
}
void OAIUpdateTemplateAliasResponse::setTemplateAlias(const OAIUpdateTemplateAliasResponse_TemplateAlias &template_alias) {
    m_template_alias = template_alias;
    m_template_alias_isSet = true;
}

bool OAIUpdateTemplateAliasResponse::is_template_alias_Set() const{
    return m_template_alias_isSet;
}

bool OAIUpdateTemplateAliasResponse::is_template_alias_Valid() const{
    return m_template_alias_isValid;
}

qint32 OAIUpdateTemplateAliasResponse::getStatus() const {
    return m_status;
}
void OAIUpdateTemplateAliasResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateTemplateAliasResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateTemplateAliasResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateTemplateAliasResponse::getRequestId() const {
    return m_request_id;
}
void OAIUpdateTemplateAliasResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIUpdateTemplateAliasResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIUpdateTemplateAliasResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIUpdateTemplateAliasResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_template_alias.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTemplateAliasResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
