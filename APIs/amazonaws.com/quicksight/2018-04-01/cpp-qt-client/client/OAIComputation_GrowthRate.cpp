/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputation_GrowthRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputation_GrowthRate::OAIComputation_GrowthRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputation_GrowthRate::OAIComputation_GrowthRate() {
    this->initializeModel();
}

OAIComputation_GrowthRate::~OAIComputation_GrowthRate() {}

void OAIComputation_GrowthRate::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_period_size_isSet = false;
    m_period_size_isValid = false;
}

void OAIComputation_GrowthRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputation_GrowthRate::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_period_size_isValid = ::OpenAPI::fromJsonValue(m_period_size, json[QString("PeriodSize")]);
    m_period_size_isSet = !json[QString("PeriodSize")].isNull() && m_period_size_isValid;
}

QString OAIComputation_GrowthRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputation_GrowthRate::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time.isSet()) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_period_size_isSet) {
        obj.insert(QString("PeriodSize"), ::OpenAPI::toJsonValue(m_period_size));
    }
    return obj;
}

QString OAIComputation_GrowthRate::getComputationId() const {
    return m_computation_id;
}
void OAIComputation_GrowthRate::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIComputation_GrowthRate::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIComputation_GrowthRate::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIComputation_GrowthRate::getName() const {
    return m_name;
}
void OAIComputation_GrowthRate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComputation_GrowthRate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComputation_GrowthRate::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomMoversComputation_Time OAIComputation_GrowthRate::getTime() const {
    return m_time;
}
void OAIComputation_GrowthRate::setTime(const OAITopBottomMoversComputation_Time &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIComputation_GrowthRate::is_time_Set() const{
    return m_time_isSet;
}

bool OAIComputation_GrowthRate::is_time_Valid() const{
    return m_time_isValid;
}

OAITopBottomRankedComputation_Value OAIComputation_GrowthRate::getValue() const {
    return m_value;
}
void OAIComputation_GrowthRate::setValue(const OAITopBottomRankedComputation_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIComputation_GrowthRate::is_value_Set() const{
    return m_value_isSet;
}

bool OAIComputation_GrowthRate::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAIComputation_GrowthRate::getPeriodSize() const {
    return m_period_size;
}
void OAIComputation_GrowthRate::setPeriodSize(const qint32 &period_size) {
    m_period_size = period_size;
    m_period_size_isSet = true;
}

bool OAIComputation_GrowthRate::is_period_size_Set() const{
    return m_period_size_isSet;
}

bool OAIComputation_GrowthRate::is_period_size_Valid() const{
    return m_period_size_isValid;
}

bool OAIComputation_GrowthRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputation_GrowthRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_time_isValid && true;
}

} // namespace OpenAPI
