/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotAnonymousUserRedacted.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotAnonymousUserRedacted::OAISnapshotAnonymousUserRedacted(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotAnonymousUserRedacted::OAISnapshotAnonymousUserRedacted() {
    this->initializeModel();
}

OAISnapshotAnonymousUserRedacted::~OAISnapshotAnonymousUserRedacted() {}

void OAISnapshotAnonymousUserRedacted::initializeModel() {

    m_row_level_permission_tag_keys_isSet = false;
    m_row_level_permission_tag_keys_isValid = false;
}

void OAISnapshotAnonymousUserRedacted::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotAnonymousUserRedacted::fromJsonObject(QJsonObject json) {

    m_row_level_permission_tag_keys_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_tag_keys, json[QString("RowLevelPermissionTagKeys")]);
    m_row_level_permission_tag_keys_isSet = !json[QString("RowLevelPermissionTagKeys")].isNull() && m_row_level_permission_tag_keys_isValid;
}

QString OAISnapshotAnonymousUserRedacted::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotAnonymousUserRedacted::asJsonObject() const {
    QJsonObject obj;
    if (m_row_level_permission_tag_keys.isSet()) {
        obj.insert(QString("RowLevelPermissionTagKeys"), ::OpenAPI::toJsonValue(m_row_level_permission_tag_keys));
    }
    return obj;
}

QList OAISnapshotAnonymousUserRedacted::getRowLevelPermissionTagKeys() const {
    return m_row_level_permission_tag_keys;
}
void OAISnapshotAnonymousUserRedacted::setRowLevelPermissionTagKeys(const QList &row_level_permission_tag_keys) {
    m_row_level_permission_tag_keys = row_level_permission_tag_keys;
    m_row_level_permission_tag_keys_isSet = true;
}

bool OAISnapshotAnonymousUserRedacted::is_row_level_permission_tag_keys_Set() const{
    return m_row_level_permission_tag_keys_isSet;
}

bool OAISnapshotAnonymousUserRedacted::is_row_level_permission_tag_keys_Valid() const{
    return m_row_level_permission_tag_keys_isValid;
}

bool OAISnapshotAnonymousUserRedacted::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_row_level_permission_tag_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotAnonymousUserRedacted::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
