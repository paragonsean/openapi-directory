/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPivotTableCellConditionalFormatting_TextFormat.h
 *
 * 
 */

#ifndef OAIPivotTableCellConditionalFormatting_TextFormat_H
#define OAIPivotTableCellConditionalFormatting_TextFormat_H

#include <QJsonObject>

#include "OAITextConditionalFormat_BackgroundColor.h"
#include "OAITextConditionalFormat_Icon.h"
#include "OAITextConditionalFormat_TextColor.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITextConditionalFormat_BackgroundColor;
class OAITextConditionalFormat_TextColor;
class OAITextConditionalFormat_Icon;

class OAIPivotTableCellConditionalFormatting_TextFormat : public OAIObject {
public:
    OAIPivotTableCellConditionalFormatting_TextFormat();
    OAIPivotTableCellConditionalFormatting_TextFormat(QString json);
    ~OAIPivotTableCellConditionalFormatting_TextFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITextConditionalFormat_BackgroundColor getBackgroundColor() const;
    void setBackgroundColor(const OAITextConditionalFormat_BackgroundColor &background_color);
    bool is_background_color_Set() const;
    bool is_background_color_Valid() const;

    OAITextConditionalFormat_TextColor getTextColor() const;
    void setTextColor(const OAITextConditionalFormat_TextColor &text_color);
    bool is_text_color_Set() const;
    bool is_text_color_Valid() const;

    OAITextConditionalFormat_Icon getIcon() const;
    void setIcon(const OAITextConditionalFormat_Icon &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITextConditionalFormat_BackgroundColor m_background_color;
    bool m_background_color_isSet;
    bool m_background_color_isValid;

    OAITextConditionalFormat_TextColor m_text_color;
    bool m_text_color_isSet;
    bool m_text_color_isValid;

    OAITextConditionalFormat_Icon m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPivotTableCellConditionalFormatting_TextFormat)

#endif // OAIPivotTableCellConditionalFormatting_TextFormat_H
