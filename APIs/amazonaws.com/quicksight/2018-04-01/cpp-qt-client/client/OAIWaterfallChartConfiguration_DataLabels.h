/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWaterfallChartConfiguration_DataLabels.h
 *
 * 
 */

#ifndef OAIWaterfallChartConfiguration_DataLabels_H
#define OAIWaterfallChartConfiguration_DataLabels_H

#include <QJsonObject>

#include "OAIDataLabelContent.h"
#include "OAIDataLabelOptions_LabelFontConfiguration.h"
#include "OAIDataLabelOverlap.h"
#include "OAIDataLabelPosition.h"
#include "OAIVisibility.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataLabelOptions_LabelFontConfiguration;

class OAIWaterfallChartConfiguration_DataLabels : public OAIObject {
public:
    OAIWaterfallChartConfiguration_DataLabels();
    OAIWaterfallChartConfiguration_DataLabels(QString json);
    ~OAIWaterfallChartConfiguration_DataLabels() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIVisibility getVisibility() const;
    void setVisibility(const OAIVisibility &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    OAIVisibility getCategoryLabelVisibility() const;
    void setCategoryLabelVisibility(const OAIVisibility &category_label_visibility);
    bool is_category_label_visibility_Set() const;
    bool is_category_label_visibility_Valid() const;

    OAIVisibility getMeasureLabelVisibility() const;
    void setMeasureLabelVisibility(const OAIVisibility &measure_label_visibility);
    bool is_measure_label_visibility_Set() const;
    bool is_measure_label_visibility_Valid() const;

    QList getDataLabelTypes() const;
    void setDataLabelTypes(const QList &data_label_types);
    bool is_data_label_types_Set() const;
    bool is_data_label_types_Valid() const;

    OAIDataLabelPosition getPosition() const;
    void setPosition(const OAIDataLabelPosition &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    OAIDataLabelContent getLabelContent() const;
    void setLabelContent(const OAIDataLabelContent &label_content);
    bool is_label_content_Set() const;
    bool is_label_content_Valid() const;

    OAIDataLabelOptions_LabelFontConfiguration getLabelFontConfiguration() const;
    void setLabelFontConfiguration(const OAIDataLabelOptions_LabelFontConfiguration &label_font_configuration);
    bool is_label_font_configuration_Set() const;
    bool is_label_font_configuration_Valid() const;

    QString getLabelColor() const;
    void setLabelColor(const QString &label_color);
    bool is_label_color_Set() const;
    bool is_label_color_Valid() const;

    OAIDataLabelOverlap getOverlap() const;
    void setOverlap(const OAIDataLabelOverlap &overlap);
    bool is_overlap_Set() const;
    bool is_overlap_Valid() const;

    OAIVisibility getTotalsVisibility() const;
    void setTotalsVisibility(const OAIVisibility &totals_visibility);
    bool is_totals_visibility_Set() const;
    bool is_totals_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIVisibility m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;

    OAIVisibility m_category_label_visibility;
    bool m_category_label_visibility_isSet;
    bool m_category_label_visibility_isValid;

    OAIVisibility m_measure_label_visibility;
    bool m_measure_label_visibility_isSet;
    bool m_measure_label_visibility_isValid;

    QList m_data_label_types;
    bool m_data_label_types_isSet;
    bool m_data_label_types_isValid;

    OAIDataLabelPosition m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    OAIDataLabelContent m_label_content;
    bool m_label_content_isSet;
    bool m_label_content_isValid;

    OAIDataLabelOptions_LabelFontConfiguration m_label_font_configuration;
    bool m_label_font_configuration_isSet;
    bool m_label_font_configuration_isValid;

    QString m_label_color;
    bool m_label_color_isSet;
    bool m_label_color_isValid;

    OAIDataLabelOverlap m_overlap;
    bool m_overlap_isSet;
    bool m_overlap_isValid;

    OAIVisibility m_totals_visibility;
    bool m_totals_visibility_isSet;
    bool m_totals_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWaterfallChartConfiguration_DataLabels)

#endif // OAIWaterfallChartConfiguration_DataLabels_H
