/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordCloudChartConfiguration_CategoryLabelOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordCloudChartConfiguration_CategoryLabelOptions::OAIWordCloudChartConfiguration_CategoryLabelOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordCloudChartConfiguration_CategoryLabelOptions::OAIWordCloudChartConfiguration_CategoryLabelOptions() {
    this->initializeModel();
}

OAIWordCloudChartConfiguration_CategoryLabelOptions::~OAIWordCloudChartConfiguration_CategoryLabelOptions() {}

void OAIWordCloudChartConfiguration_CategoryLabelOptions::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_sort_icon_visibility_isSet = false;
    m_sort_icon_visibility_isValid = false;

    m_axis_label_options_isSet = false;
    m_axis_label_options_isValid = false;
}

void OAIWordCloudChartConfiguration_CategoryLabelOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordCloudChartConfiguration_CategoryLabelOptions::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_sort_icon_visibility_isValid = ::OpenAPI::fromJsonValue(m_sort_icon_visibility, json[QString("SortIconVisibility")]);
    m_sort_icon_visibility_isSet = !json[QString("SortIconVisibility")].isNull() && m_sort_icon_visibility_isValid;

    m_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_axis_label_options, json[QString("AxisLabelOptions")]);
    m_axis_label_options_isSet = !json[QString("AxisLabelOptions")].isNull() && m_axis_label_options_isValid;
}

QString OAIWordCloudChartConfiguration_CategoryLabelOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordCloudChartConfiguration_CategoryLabelOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_sort_icon_visibility.isSet()) {
        obj.insert(QString("SortIconVisibility"), ::OpenAPI::toJsonValue(m_sort_icon_visibility));
    }
    if (m_axis_label_options.isSet()) {
        obj.insert(QString("AxisLabelOptions"), ::OpenAPI::toJsonValue(m_axis_label_options));
    }
    return obj;
}

OAIVisibility OAIWordCloudChartConfiguration_CategoryLabelOptions::getVisibility() const {
    return m_visibility;
}
void OAIWordCloudChartConfiguration_CategoryLabelOptions::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIWordCloudChartConfiguration_CategoryLabelOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIWordCloudChartConfiguration_CategoryLabelOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIVisibility OAIWordCloudChartConfiguration_CategoryLabelOptions::getSortIconVisibility() const {
    return m_sort_icon_visibility;
}
void OAIWordCloudChartConfiguration_CategoryLabelOptions::setSortIconVisibility(const OAIVisibility &sort_icon_visibility) {
    m_sort_icon_visibility = sort_icon_visibility;
    m_sort_icon_visibility_isSet = true;
}

bool OAIWordCloudChartConfiguration_CategoryLabelOptions::is_sort_icon_visibility_Set() const{
    return m_sort_icon_visibility_isSet;
}

bool OAIWordCloudChartConfiguration_CategoryLabelOptions::is_sort_icon_visibility_Valid() const{
    return m_sort_icon_visibility_isValid;
}

QList OAIWordCloudChartConfiguration_CategoryLabelOptions::getAxisLabelOptions() const {
    return m_axis_label_options;
}
void OAIWordCloudChartConfiguration_CategoryLabelOptions::setAxisLabelOptions(const QList &axis_label_options) {
    m_axis_label_options = axis_label_options;
    m_axis_label_options_isSet = true;
}

bool OAIWordCloudChartConfiguration_CategoryLabelOptions::is_axis_label_options_Set() const{
    return m_axis_label_options_isSet;
}

bool OAIWordCloudChartConfiguration_CategoryLabelOptions::is_axis_label_options_Valid() const{
    return m_axis_label_options_isValid;
}

bool OAIWordCloudChartConfiguration_CategoryLabelOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_icon_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordCloudChartConfiguration_CategoryLabelOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
