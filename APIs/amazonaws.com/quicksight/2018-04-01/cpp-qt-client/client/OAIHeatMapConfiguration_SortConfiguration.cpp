/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeatMapConfiguration_SortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeatMapConfiguration_SortConfiguration::OAIHeatMapConfiguration_SortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeatMapConfiguration_SortConfiguration::OAIHeatMapConfiguration_SortConfiguration() {
    this->initializeModel();
}

OAIHeatMapConfiguration_SortConfiguration::~OAIHeatMapConfiguration_SortConfiguration() {}

void OAIHeatMapConfiguration_SortConfiguration::initializeModel() {

    m_heat_map_row_sort_isSet = false;
    m_heat_map_row_sort_isValid = false;

    m_heat_map_column_sort_isSet = false;
    m_heat_map_column_sort_isValid = false;

    m_heat_map_row_items_limit_configuration_isSet = false;
    m_heat_map_row_items_limit_configuration_isValid = false;

    m_heat_map_column_items_limit_configuration_isSet = false;
    m_heat_map_column_items_limit_configuration_isValid = false;
}

void OAIHeatMapConfiguration_SortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeatMapConfiguration_SortConfiguration::fromJsonObject(QJsonObject json) {

    m_heat_map_row_sort_isValid = ::OpenAPI::fromJsonValue(m_heat_map_row_sort, json[QString("HeatMapRowSort")]);
    m_heat_map_row_sort_isSet = !json[QString("HeatMapRowSort")].isNull() && m_heat_map_row_sort_isValid;

    m_heat_map_column_sort_isValid = ::OpenAPI::fromJsonValue(m_heat_map_column_sort, json[QString("HeatMapColumnSort")]);
    m_heat_map_column_sort_isSet = !json[QString("HeatMapColumnSort")].isNull() && m_heat_map_column_sort_isValid;

    m_heat_map_row_items_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_heat_map_row_items_limit_configuration, json[QString("HeatMapRowItemsLimitConfiguration")]);
    m_heat_map_row_items_limit_configuration_isSet = !json[QString("HeatMapRowItemsLimitConfiguration")].isNull() && m_heat_map_row_items_limit_configuration_isValid;

    m_heat_map_column_items_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_heat_map_column_items_limit_configuration, json[QString("HeatMapColumnItemsLimitConfiguration")]);
    m_heat_map_column_items_limit_configuration_isSet = !json[QString("HeatMapColumnItemsLimitConfiguration")].isNull() && m_heat_map_column_items_limit_configuration_isValid;
}

QString OAIHeatMapConfiguration_SortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeatMapConfiguration_SortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_heat_map_row_sort.isSet()) {
        obj.insert(QString("HeatMapRowSort"), ::OpenAPI::toJsonValue(m_heat_map_row_sort));
    }
    if (m_heat_map_column_sort.isSet()) {
        obj.insert(QString("HeatMapColumnSort"), ::OpenAPI::toJsonValue(m_heat_map_column_sort));
    }
    if (m_heat_map_row_items_limit_configuration.isSet()) {
        obj.insert(QString("HeatMapRowItemsLimitConfiguration"), ::OpenAPI::toJsonValue(m_heat_map_row_items_limit_configuration));
    }
    if (m_heat_map_column_items_limit_configuration.isSet()) {
        obj.insert(QString("HeatMapColumnItemsLimitConfiguration"), ::OpenAPI::toJsonValue(m_heat_map_column_items_limit_configuration));
    }
    return obj;
}

QList OAIHeatMapConfiguration_SortConfiguration::getHeatMapRowSort() const {
    return m_heat_map_row_sort;
}
void OAIHeatMapConfiguration_SortConfiguration::setHeatMapRowSort(const QList &heat_map_row_sort) {
    m_heat_map_row_sort = heat_map_row_sort;
    m_heat_map_row_sort_isSet = true;
}

bool OAIHeatMapConfiguration_SortConfiguration::is_heat_map_row_sort_Set() const{
    return m_heat_map_row_sort_isSet;
}

bool OAIHeatMapConfiguration_SortConfiguration::is_heat_map_row_sort_Valid() const{
    return m_heat_map_row_sort_isValid;
}

QList OAIHeatMapConfiguration_SortConfiguration::getHeatMapColumnSort() const {
    return m_heat_map_column_sort;
}
void OAIHeatMapConfiguration_SortConfiguration::setHeatMapColumnSort(const QList &heat_map_column_sort) {
    m_heat_map_column_sort = heat_map_column_sort;
    m_heat_map_column_sort_isSet = true;
}

bool OAIHeatMapConfiguration_SortConfiguration::is_heat_map_column_sort_Set() const{
    return m_heat_map_column_sort_isSet;
}

bool OAIHeatMapConfiguration_SortConfiguration::is_heat_map_column_sort_Valid() const{
    return m_heat_map_column_sort_isValid;
}

OAIHeatMapSortConfiguration_HeatMapRowItemsLimitConfiguration OAIHeatMapConfiguration_SortConfiguration::getHeatMapRowItemsLimitConfiguration() const {
    return m_heat_map_row_items_limit_configuration;
}
void OAIHeatMapConfiguration_SortConfiguration::setHeatMapRowItemsLimitConfiguration(const OAIHeatMapSortConfiguration_HeatMapRowItemsLimitConfiguration &heat_map_row_items_limit_configuration) {
    m_heat_map_row_items_limit_configuration = heat_map_row_items_limit_configuration;
    m_heat_map_row_items_limit_configuration_isSet = true;
}

bool OAIHeatMapConfiguration_SortConfiguration::is_heat_map_row_items_limit_configuration_Set() const{
    return m_heat_map_row_items_limit_configuration_isSet;
}

bool OAIHeatMapConfiguration_SortConfiguration::is_heat_map_row_items_limit_configuration_Valid() const{
    return m_heat_map_row_items_limit_configuration_isValid;
}

OAIHeatMapSortConfiguration_HeatMapColumnItemsLimitConfiguration OAIHeatMapConfiguration_SortConfiguration::getHeatMapColumnItemsLimitConfiguration() const {
    return m_heat_map_column_items_limit_configuration;
}
void OAIHeatMapConfiguration_SortConfiguration::setHeatMapColumnItemsLimitConfiguration(const OAIHeatMapSortConfiguration_HeatMapColumnItemsLimitConfiguration &heat_map_column_items_limit_configuration) {
    m_heat_map_column_items_limit_configuration = heat_map_column_items_limit_configuration;
    m_heat_map_column_items_limit_configuration_isSet = true;
}

bool OAIHeatMapConfiguration_SortConfiguration::is_heat_map_column_items_limit_configuration_Set() const{
    return m_heat_map_column_items_limit_configuration_isSet;
}

bool OAIHeatMapConfiguration_SortConfiguration::is_heat_map_column_items_limit_configuration_Valid() const{
    return m_heat_map_column_items_limit_configuration_isValid;
}

bool OAIHeatMapConfiguration_SortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_heat_map_row_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heat_map_column_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heat_map_row_items_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heat_map_column_items_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeatMapConfiguration_SortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
