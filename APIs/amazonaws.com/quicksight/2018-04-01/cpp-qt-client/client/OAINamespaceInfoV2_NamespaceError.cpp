/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespaceInfoV2_NamespaceError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespaceInfoV2_NamespaceError::OAINamespaceInfoV2_NamespaceError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespaceInfoV2_NamespaceError::OAINamespaceInfoV2_NamespaceError() {
    this->initializeModel();
}

OAINamespaceInfoV2_NamespaceError::~OAINamespaceInfoV2_NamespaceError() {}

void OAINamespaceInfoV2_NamespaceError::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAINamespaceInfoV2_NamespaceError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespaceInfoV2_NamespaceError::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAINamespaceInfoV2_NamespaceError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespaceInfoV2_NamespaceError::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAINamespaceErrorType OAINamespaceInfoV2_NamespaceError::getType() const {
    return m_type;
}
void OAINamespaceInfoV2_NamespaceError::setType(const OAINamespaceErrorType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINamespaceInfoV2_NamespaceError::is_type_Set() const{
    return m_type_isSet;
}

bool OAINamespaceInfoV2_NamespaceError::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINamespaceInfoV2_NamespaceError::getMessage() const {
    return m_message;
}
void OAINamespaceInfoV2_NamespaceError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINamespaceInfoV2_NamespaceError::is_message_Set() const{
    return m_message_isSet;
}

bool OAINamespaceInfoV2_NamespaceError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAINamespaceInfoV2_NamespaceError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespaceInfoV2_NamespaceError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
