/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateDataSet_request.h
 *
 * 
 */

#ifndef OAIUpdateDataSet_request_H
#define OAIUpdateDataSet_request_H

#include <QJsonObject>

#include "OAIColumnGroup.h"
#include "OAIColumnLevelPermissionRule.h"
#include "OAICreateDataSet_request_DataSetUsageConfiguration.h"
#include "OAICreateDataSet_request_RowLevelPermissionDataSet.h"
#include "OAICreateDataSet_request_RowLevelPermissionTagConfiguration.h"
#include "OAIDatasetParameter.h"
#include "OAIFieldFolder.h"
#include "OAILogicalTable.h"
#include "OAIPhysicalTable.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPhysicalTable;
class OAILogicalTable;
class OAIColumnGroup;
class OAIFieldFolder;
class OAICreateDataSet_request_RowLevelPermissionDataSet;
class OAICreateDataSet_request_RowLevelPermissionTagConfiguration;
class OAIColumnLevelPermissionRule;
class OAICreateDataSet_request_DataSetUsageConfiguration;
class OAIDatasetParameter;

class OAIUpdateDataSet_request : public OAIObject {
public:
    OAIUpdateDataSet_request();
    OAIUpdateDataSet_request(QString json);
    ~OAIUpdateDataSet_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QMap<QString, OAIPhysicalTable> getPhysicalTableMap() const;
    void setPhysicalTableMap(const QMap<QString, OAIPhysicalTable> &physical_table_map);
    bool is_physical_table_map_Set() const;
    bool is_physical_table_map_Valid() const;

    QMap<QString, OAILogicalTable> getLogicalTableMap() const;
    void setLogicalTableMap(const QMap<QString, OAILogicalTable> &logical_table_map);
    bool is_logical_table_map_Set() const;
    bool is_logical_table_map_Valid() const;

    QString getImportMode() const;
    void setImportMode(const QString &import_mode);
    bool is_import_mode_Set() const;
    bool is_import_mode_Valid() const;

    QList<OAIColumnGroup> getColumnGroups() const;
    void setColumnGroups(const QList<OAIColumnGroup> &column_groups);
    bool is_column_groups_Set() const;
    bool is_column_groups_Valid() const;

    QMap<QString, OAIFieldFolder> getFieldFolders() const;
    void setFieldFolders(const QMap<QString, OAIFieldFolder> &field_folders);
    bool is_field_folders_Set() const;
    bool is_field_folders_Valid() const;

    OAICreateDataSet_request_RowLevelPermissionDataSet getRowLevelPermissionDataSet() const;
    void setRowLevelPermissionDataSet(const OAICreateDataSet_request_RowLevelPermissionDataSet &row_level_permission_data_set);
    bool is_row_level_permission_data_set_Set() const;
    bool is_row_level_permission_data_set_Valid() const;

    OAICreateDataSet_request_RowLevelPermissionTagConfiguration getRowLevelPermissionTagConfiguration() const;
    void setRowLevelPermissionTagConfiguration(const OAICreateDataSet_request_RowLevelPermissionTagConfiguration &row_level_permission_tag_configuration);
    bool is_row_level_permission_tag_configuration_Set() const;
    bool is_row_level_permission_tag_configuration_Valid() const;

    QList<OAIColumnLevelPermissionRule> getColumnLevelPermissionRules() const;
    void setColumnLevelPermissionRules(const QList<OAIColumnLevelPermissionRule> &column_level_permission_rules);
    bool is_column_level_permission_rules_Set() const;
    bool is_column_level_permission_rules_Valid() const;

    OAICreateDataSet_request_DataSetUsageConfiguration getDataSetUsageConfiguration() const;
    void setDataSetUsageConfiguration(const OAICreateDataSet_request_DataSetUsageConfiguration &data_set_usage_configuration);
    bool is_data_set_usage_configuration_Set() const;
    bool is_data_set_usage_configuration_Valid() const;

    QList<OAIDatasetParameter> getDatasetParameters() const;
    void setDatasetParameters(const QList<OAIDatasetParameter> &dataset_parameters);
    bool is_dataset_parameters_Set() const;
    bool is_dataset_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QMap<QString, OAIPhysicalTable> m_physical_table_map;
    bool m_physical_table_map_isSet;
    bool m_physical_table_map_isValid;

    QMap<QString, OAILogicalTable> m_logical_table_map;
    bool m_logical_table_map_isSet;
    bool m_logical_table_map_isValid;

    QString m_import_mode;
    bool m_import_mode_isSet;
    bool m_import_mode_isValid;

    QList<OAIColumnGroup> m_column_groups;
    bool m_column_groups_isSet;
    bool m_column_groups_isValid;

    QMap<QString, OAIFieldFolder> m_field_folders;
    bool m_field_folders_isSet;
    bool m_field_folders_isValid;

    OAICreateDataSet_request_RowLevelPermissionDataSet m_row_level_permission_data_set;
    bool m_row_level_permission_data_set_isSet;
    bool m_row_level_permission_data_set_isValid;

    OAICreateDataSet_request_RowLevelPermissionTagConfiguration m_row_level_permission_tag_configuration;
    bool m_row_level_permission_tag_configuration_isSet;
    bool m_row_level_permission_tag_configuration_isValid;

    QList<OAIColumnLevelPermissionRule> m_column_level_permission_rules;
    bool m_column_level_permission_rules_isSet;
    bool m_column_level_permission_rules_isValid;

    OAICreateDataSet_request_DataSetUsageConfiguration m_data_set_usage_configuration;
    bool m_data_set_usage_configuration_isSet;
    bool m_data_set_usage_configuration_isValid;

    QList<OAIDatasetParameter> m_dataset_parameters;
    bool m_dataset_parameters_isSet;
    bool m_dataset_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateDataSet_request)

#endif // OAIUpdateDataSet_request_H
