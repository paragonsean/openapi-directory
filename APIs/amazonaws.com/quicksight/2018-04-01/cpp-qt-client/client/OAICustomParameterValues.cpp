/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomParameterValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomParameterValues::OAICustomParameterValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomParameterValues::OAICustomParameterValues() {
    this->initializeModel();
}

OAICustomParameterValues::~OAICustomParameterValues() {}

void OAICustomParameterValues::initializeModel() {

    m_string_values_isSet = false;
    m_string_values_isValid = false;

    m_integer_values_isSet = false;
    m_integer_values_isValid = false;

    m_decimal_values_isSet = false;
    m_decimal_values_isValid = false;

    m_date_time_values_isSet = false;
    m_date_time_values_isValid = false;
}

void OAICustomParameterValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomParameterValues::fromJsonObject(QJsonObject json) {

    m_string_values_isValid = ::OpenAPI::fromJsonValue(m_string_values, json[QString("StringValues")]);
    m_string_values_isSet = !json[QString("StringValues")].isNull() && m_string_values_isValid;

    m_integer_values_isValid = ::OpenAPI::fromJsonValue(m_integer_values, json[QString("IntegerValues")]);
    m_integer_values_isSet = !json[QString("IntegerValues")].isNull() && m_integer_values_isValid;

    m_decimal_values_isValid = ::OpenAPI::fromJsonValue(m_decimal_values, json[QString("DecimalValues")]);
    m_decimal_values_isSet = !json[QString("DecimalValues")].isNull() && m_decimal_values_isValid;

    m_date_time_values_isValid = ::OpenAPI::fromJsonValue(m_date_time_values, json[QString("DateTimeValues")]);
    m_date_time_values_isSet = !json[QString("DateTimeValues")].isNull() && m_date_time_values_isValid;
}

QString OAICustomParameterValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomParameterValues::asJsonObject() const {
    QJsonObject obj;
    if (m_string_values.isSet()) {
        obj.insert(QString("StringValues"), ::OpenAPI::toJsonValue(m_string_values));
    }
    if (m_integer_values.isSet()) {
        obj.insert(QString("IntegerValues"), ::OpenAPI::toJsonValue(m_integer_values));
    }
    if (m_decimal_values.isSet()) {
        obj.insert(QString("DecimalValues"), ::OpenAPI::toJsonValue(m_decimal_values));
    }
    if (m_date_time_values.isSet()) {
        obj.insert(QString("DateTimeValues"), ::OpenAPI::toJsonValue(m_date_time_values));
    }
    return obj;
}

QList OAICustomParameterValues::getStringValues() const {
    return m_string_values;
}
void OAICustomParameterValues::setStringValues(const QList &string_values) {
    m_string_values = string_values;
    m_string_values_isSet = true;
}

bool OAICustomParameterValues::is_string_values_Set() const{
    return m_string_values_isSet;
}

bool OAICustomParameterValues::is_string_values_Valid() const{
    return m_string_values_isValid;
}

QList OAICustomParameterValues::getIntegerValues() const {
    return m_integer_values;
}
void OAICustomParameterValues::setIntegerValues(const QList &integer_values) {
    m_integer_values = integer_values;
    m_integer_values_isSet = true;
}

bool OAICustomParameterValues::is_integer_values_Set() const{
    return m_integer_values_isSet;
}

bool OAICustomParameterValues::is_integer_values_Valid() const{
    return m_integer_values_isValid;
}

QList OAICustomParameterValues::getDecimalValues() const {
    return m_decimal_values;
}
void OAICustomParameterValues::setDecimalValues(const QList &decimal_values) {
    m_decimal_values = decimal_values;
    m_decimal_values_isSet = true;
}

bool OAICustomParameterValues::is_decimal_values_Set() const{
    return m_decimal_values_isSet;
}

bool OAICustomParameterValues::is_decimal_values_Valid() const{
    return m_decimal_values_isValid;
}

QList OAICustomParameterValues::getDateTimeValues() const {
    return m_date_time_values;
}
void OAICustomParameterValues::setDateTimeValues(const QList &date_time_values) {
    m_date_time_values = date_time_values;
    m_date_time_values_isSet = true;
}

bool OAICustomParameterValues::is_date_time_values_Set() const{
    return m_date_time_values_isSet;
}

bool OAICustomParameterValues::is_date_time_values_Valid() const{
    return m_date_time_values_isValid;
}

bool OAICustomParameterValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomParameterValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
