/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceErrorInfoType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceErrorInfoType::OAIDataSourceErrorInfoType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceErrorInfoType::OAIDataSourceErrorInfoType() {
    this->initializeModel();
}

OAIDataSourceErrorInfoType::~OAIDataSourceErrorInfoType() {}

void OAIDataSourceErrorInfoType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataSourceErrorInfoType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataSourceErrorInfoType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceErrorInfoType::ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COPY_SOURCE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceErrorInfoType::COPY_SOURCE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMEOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceErrorInfoType::TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENGINE_VERSION_NOT_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceErrorInfoType::ENGINE_VERSION_NOT_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN_HOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceErrorInfoType::UNKNOWN_HOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GENERIC_SQL_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceErrorInfoType::GENERIC_SQL_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFLICT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceErrorInfoType::CONFLICT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceErrorInfoType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataSourceErrorInfoType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataSourceErrorInfoType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataSourceErrorInfoType::ACCESS_DENIED:
            val = "ACCESS_DENIED";
            break;
        case eOAIDataSourceErrorInfoType::COPY_SOURCE_NOT_FOUND:
            val = "COPY_SOURCE_NOT_FOUND";
            break;
        case eOAIDataSourceErrorInfoType::TIMEOUT:
            val = "TIMEOUT";
            break;
        case eOAIDataSourceErrorInfoType::ENGINE_VERSION_NOT_SUPPORTED:
            val = "ENGINE_VERSION_NOT_SUPPORTED";
            break;
        case eOAIDataSourceErrorInfoType::UNKNOWN_HOST:
            val = "UNKNOWN_HOST";
            break;
        case eOAIDataSourceErrorInfoType::GENERIC_SQL_FAILURE:
            val = "GENERIC_SQL_FAILURE";
            break;
        case eOAIDataSourceErrorInfoType::CONFLICT:
            val = "CONFLICT";
            break;
        case eOAIDataSourceErrorInfoType::UNKNOWN:
            val = "UNKNOWN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataSourceErrorInfoType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataSourceErrorInfoType::eOAIDataSourceErrorInfoType OAIDataSourceErrorInfoType::getValue() const {
    return m_value;
}

void OAIDataSourceErrorInfoType::setValue(const OAIDataSourceErrorInfoType::eOAIDataSourceErrorInfoType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataSourceErrorInfoType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataSourceErrorInfoType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
