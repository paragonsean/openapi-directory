/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRadarChartFieldWells_RadarChartAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::OAIRadarChartFieldWells_RadarChartAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::OAIRadarChartFieldWells_RadarChartAggregatedFieldWells() {
    this->initializeModel();
}

OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::~OAIRadarChartFieldWells_RadarChartAggregatedFieldWells() {}

void OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_color.isSet()) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::getCategory() const {
    return m_category;
}
void OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::setCategory(const QList &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::is_category_Set() const{
    return m_category_isSet;
}

bool OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::is_category_Valid() const{
    return m_category_isValid;
}

QList OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::getColor() const {
    return m_color;
}
void OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::setColor(const QList &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::is_color_Set() const{
    return m_color_isSet;
}

bool OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::is_color_Valid() const{
    return m_color_isValid;
}

QList OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRadarChartFieldWells_RadarChartAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
