/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetReference::OAIDataSetReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetReference::OAIDataSetReference() {
    this->initializeModel();
}

OAIDataSetReference::~OAIDataSetReference() {}

void OAIDataSetReference::initializeModel() {

    m_data_set_placeholder_isSet = false;
    m_data_set_placeholder_isValid = false;

    m_data_set_arn_isSet = false;
    m_data_set_arn_isValid = false;
}

void OAIDataSetReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetReference::fromJsonObject(QJsonObject json) {

    m_data_set_placeholder_isValid = ::OpenAPI::fromJsonValue(m_data_set_placeholder, json[QString("DataSetPlaceholder")]);
    m_data_set_placeholder_isSet = !json[QString("DataSetPlaceholder")].isNull() && m_data_set_placeholder_isValid;

    m_data_set_arn_isValid = ::OpenAPI::fromJsonValue(m_data_set_arn, json[QString("DataSetArn")]);
    m_data_set_arn_isSet = !json[QString("DataSetArn")].isNull() && m_data_set_arn_isValid;
}

QString OAIDataSetReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetReference::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_placeholder_isSet) {
        obj.insert(QString("DataSetPlaceholder"), ::OpenAPI::toJsonValue(m_data_set_placeholder));
    }
    if (m_data_set_arn_isSet) {
        obj.insert(QString("DataSetArn"), ::OpenAPI::toJsonValue(m_data_set_arn));
    }
    return obj;
}

QString OAIDataSetReference::getDataSetPlaceholder() const {
    return m_data_set_placeholder;
}
void OAIDataSetReference::setDataSetPlaceholder(const QString &data_set_placeholder) {
    m_data_set_placeholder = data_set_placeholder;
    m_data_set_placeholder_isSet = true;
}

bool OAIDataSetReference::is_data_set_placeholder_Set() const{
    return m_data_set_placeholder_isSet;
}

bool OAIDataSetReference::is_data_set_placeholder_Valid() const{
    return m_data_set_placeholder_isValid;
}

QString OAIDataSetReference::getDataSetArn() const {
    return m_data_set_arn;
}
void OAIDataSetReference::setDataSetArn(const QString &data_set_arn) {
    m_data_set_arn = data_set_arn;
    m_data_set_arn_isSet = true;
}

bool OAIDataSetReference::is_data_set_arn_Set() const{
    return m_data_set_arn_isSet;
}

bool OAIDataSetReference::is_data_set_arn_Valid() const{
    return m_data_set_arn_isValid;
}

bool OAIDataSetReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_placeholder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_placeholder_isValid && m_data_set_arn_isValid && true;
}

} // namespace OpenAPI
