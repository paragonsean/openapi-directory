/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComboChartAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComboChartAggregatedFieldWells::OAIComboChartAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComboChartAggregatedFieldWells::OAIComboChartAggregatedFieldWells() {
    this->initializeModel();
}

OAIComboChartAggregatedFieldWells::~OAIComboChartAggregatedFieldWells() {}

void OAIComboChartAggregatedFieldWells::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_bar_values_isSet = false;
    m_bar_values_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_line_values_isSet = false;
    m_line_values_isValid = false;
}

void OAIComboChartAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComboChartAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_bar_values_isValid = ::OpenAPI::fromJsonValue(m_bar_values, json[QString("BarValues")]);
    m_bar_values_isSet = !json[QString("BarValues")].isNull() && m_bar_values_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("Colors")]);
    m_colors_isSet = !json[QString("Colors")].isNull() && m_colors_isValid;

    m_line_values_isValid = ::OpenAPI::fromJsonValue(m_line_values, json[QString("LineValues")]);
    m_line_values_isSet = !json[QString("LineValues")].isNull() && m_line_values_isValid;
}

QString OAIComboChartAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComboChartAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_bar_values.isSet()) {
        obj.insert(QString("BarValues"), ::OpenAPI::toJsonValue(m_bar_values));
    }
    if (m_colors.isSet()) {
        obj.insert(QString("Colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_line_values.isSet()) {
        obj.insert(QString("LineValues"), ::OpenAPI::toJsonValue(m_line_values));
    }
    return obj;
}

QList OAIComboChartAggregatedFieldWells::getCategory() const {
    return m_category;
}
void OAIComboChartAggregatedFieldWells::setCategory(const QList &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIComboChartAggregatedFieldWells::is_category_Set() const{
    return m_category_isSet;
}

bool OAIComboChartAggregatedFieldWells::is_category_Valid() const{
    return m_category_isValid;
}

QList OAIComboChartAggregatedFieldWells::getBarValues() const {
    return m_bar_values;
}
void OAIComboChartAggregatedFieldWells::setBarValues(const QList &bar_values) {
    m_bar_values = bar_values;
    m_bar_values_isSet = true;
}

bool OAIComboChartAggregatedFieldWells::is_bar_values_Set() const{
    return m_bar_values_isSet;
}

bool OAIComboChartAggregatedFieldWells::is_bar_values_Valid() const{
    return m_bar_values_isValid;
}

QList OAIComboChartAggregatedFieldWells::getColors() const {
    return m_colors;
}
void OAIComboChartAggregatedFieldWells::setColors(const QList &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIComboChartAggregatedFieldWells::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIComboChartAggregatedFieldWells::is_colors_Valid() const{
    return m_colors_isValid;
}

QList OAIComboChartAggregatedFieldWells::getLineValues() const {
    return m_line_values;
}
void OAIComboChartAggregatedFieldWells::setLineValues(const QList &line_values) {
    m_line_values = line_values;
    m_line_values_isSet = true;
}

bool OAIComboChartAggregatedFieldWells::is_line_values_Set() const{
    return m_line_values_isSet;
}

bool OAIComboChartAggregatedFieldWells::is_line_values_Valid() const{
    return m_line_values_isValid;
}

bool OAIComboChartAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bar_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComboChartAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
