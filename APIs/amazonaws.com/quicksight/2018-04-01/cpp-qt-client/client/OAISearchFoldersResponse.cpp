/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchFoldersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchFoldersResponse::OAISearchFoldersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchFoldersResponse::OAISearchFoldersResponse() {
    this->initializeModel();
}

OAISearchFoldersResponse::~OAISearchFoldersResponse() {}

void OAISearchFoldersResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_folder_summary_list_isSet = false;
    m_folder_summary_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAISearchFoldersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchFoldersResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_folder_summary_list_isValid = ::OpenAPI::fromJsonValue(m_folder_summary_list, json[QString("FolderSummaryList")]);
    m_folder_summary_list_isSet = !json[QString("FolderSummaryList")].isNull() && m_folder_summary_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAISearchFoldersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchFoldersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_folder_summary_list.isSet()) {
        obj.insert(QString("FolderSummaryList"), ::OpenAPI::toJsonValue(m_folder_summary_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

qint32 OAISearchFoldersResponse::getStatus() const {
    return m_status;
}
void OAISearchFoldersResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISearchFoldersResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISearchFoldersResponse::is_status_Valid() const{
    return m_status_isValid;
}

QList OAISearchFoldersResponse::getFolderSummaryList() const {
    return m_folder_summary_list;
}
void OAISearchFoldersResponse::setFolderSummaryList(const QList &folder_summary_list) {
    m_folder_summary_list = folder_summary_list;
    m_folder_summary_list_isSet = true;
}

bool OAISearchFoldersResponse::is_folder_summary_list_Set() const{
    return m_folder_summary_list_isSet;
}

bool OAISearchFoldersResponse::is_folder_summary_list_Valid() const{
    return m_folder_summary_list_isValid;
}

QString OAISearchFoldersResponse::getNextToken() const {
    return m_next_token;
}
void OAISearchFoldersResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchFoldersResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchFoldersResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAISearchFoldersResponse::getRequestId() const {
    return m_request_id;
}
void OAISearchFoldersResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAISearchFoldersResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAISearchFoldersResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAISearchFoldersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_summary_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchFoldersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
