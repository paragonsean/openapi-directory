/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITreeMapAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITreeMapAggregatedFieldWells::OAITreeMapAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITreeMapAggregatedFieldWells::OAITreeMapAggregatedFieldWells() {
    this->initializeModel();
}

OAITreeMapAggregatedFieldWells::~OAITreeMapAggregatedFieldWells() {}

void OAITreeMapAggregatedFieldWells::initializeModel() {

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_sizes_isSet = false;
    m_sizes_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;
}

void OAITreeMapAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITreeMapAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("Groups")]);
    m_groups_isSet = !json[QString("Groups")].isNull() && m_groups_isValid;

    m_sizes_isValid = ::OpenAPI::fromJsonValue(m_sizes, json[QString("Sizes")]);
    m_sizes_isSet = !json[QString("Sizes")].isNull() && m_sizes_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("Colors")]);
    m_colors_isSet = !json[QString("Colors")].isNull() && m_colors_isValid;
}

QString OAITreeMapAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITreeMapAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_groups.isSet()) {
        obj.insert(QString("Groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_sizes.isSet()) {
        obj.insert(QString("Sizes"), ::OpenAPI::toJsonValue(m_sizes));
    }
    if (m_colors.isSet()) {
        obj.insert(QString("Colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    return obj;
}

QList OAITreeMapAggregatedFieldWells::getGroups() const {
    return m_groups;
}
void OAITreeMapAggregatedFieldWells::setGroups(const QList &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAITreeMapAggregatedFieldWells::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAITreeMapAggregatedFieldWells::is_groups_Valid() const{
    return m_groups_isValid;
}

QList OAITreeMapAggregatedFieldWells::getSizes() const {
    return m_sizes;
}
void OAITreeMapAggregatedFieldWells::setSizes(const QList &sizes) {
    m_sizes = sizes;
    m_sizes_isSet = true;
}

bool OAITreeMapAggregatedFieldWells::is_sizes_Set() const{
    return m_sizes_isSet;
}

bool OAITreeMapAggregatedFieldWells::is_sizes_Valid() const{
    return m_sizes_isValid;
}

QList OAITreeMapAggregatedFieldWells::getColors() const {
    return m_colors;
}
void OAITreeMapAggregatedFieldWells::setColors(const QList &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAITreeMapAggregatedFieldWells::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAITreeMapAggregatedFieldWells::is_colors_Valid() const{
    return m_colors_isValid;
}

bool OAITreeMapAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sizes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITreeMapAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
