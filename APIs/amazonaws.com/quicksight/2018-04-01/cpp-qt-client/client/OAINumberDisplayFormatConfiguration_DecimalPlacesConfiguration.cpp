/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration() {
    this->initializeModel();
}

OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::~OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration() {}

void OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::initializeModel() {

    m_decimal_places_isSet = false;
    m_decimal_places_isValid = false;
}

void OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::fromJsonObject(QJsonObject json) {

    m_decimal_places_isValid = ::OpenAPI::fromJsonValue(m_decimal_places, json[QString("DecimalPlaces")]);
    m_decimal_places_isSet = !json[QString("DecimalPlaces")].isNull() && m_decimal_places_isValid;
}

QString OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_decimal_places_isSet) {
        obj.insert(QString("DecimalPlaces"), ::OpenAPI::toJsonValue(m_decimal_places));
    }
    return obj;
}

qint32 OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::getDecimalPlaces() const {
    return m_decimal_places;
}
void OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::setDecimalPlaces(const qint32 &decimal_places) {
    m_decimal_places = decimal_places;
    m_decimal_places_isSet = true;
}

bool OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::is_decimal_places_Set() const{
    return m_decimal_places_isSet;
}

bool OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::is_decimal_places_Valid() const{
    return m_decimal_places_isValid;
}

bool OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decimal_places_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_decimal_places_isValid && true;
}

} // namespace OpenAPI
