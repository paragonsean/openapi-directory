/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPieChartVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPieChartVisual_ChartConfiguration::OAIPieChartVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPieChartVisual_ChartConfiguration::OAIPieChartVisual_ChartConfiguration() {
    this->initializeModel();
}

OAIPieChartVisual_ChartConfiguration::~OAIPieChartVisual_ChartConfiguration() {}

void OAIPieChartVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_donut_options_isSet = false;
    m_donut_options_isValid = false;

    m_small_multiples_options_isSet = false;
    m_small_multiples_options_isValid = false;

    m_category_label_options_isSet = false;
    m_category_label_options_isValid = false;

    m_value_label_options_isSet = false;
    m_value_label_options_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;

    m_contribution_analysis_defaults_isSet = false;
    m_contribution_analysis_defaults_isValid = false;
}

void OAIPieChartVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPieChartVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_donut_options_isValid = ::OpenAPI::fromJsonValue(m_donut_options, json[QString("DonutOptions")]);
    m_donut_options_isSet = !json[QString("DonutOptions")].isNull() && m_donut_options_isValid;

    m_small_multiples_options_isValid = ::OpenAPI::fromJsonValue(m_small_multiples_options, json[QString("SmallMultiplesOptions")]);
    m_small_multiples_options_isSet = !json[QString("SmallMultiplesOptions")].isNull() && m_small_multiples_options_isValid;

    m_category_label_options_isValid = ::OpenAPI::fromJsonValue(m_category_label_options, json[QString("CategoryLabelOptions")]);
    m_category_label_options_isSet = !json[QString("CategoryLabelOptions")].isNull() && m_category_label_options_isValid;

    m_value_label_options_isValid = ::OpenAPI::fromJsonValue(m_value_label_options, json[QString("ValueLabelOptions")]);
    m_value_label_options_isSet = !json[QString("ValueLabelOptions")].isNull() && m_value_label_options_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;

    m_contribution_analysis_defaults_isValid = ::OpenAPI::fromJsonValue(m_contribution_analysis_defaults, json[QString("ContributionAnalysisDefaults")]);
    m_contribution_analysis_defaults_isSet = !json[QString("ContributionAnalysisDefaults")].isNull() && m_contribution_analysis_defaults_isValid;
}

QString OAIPieChartVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPieChartVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_donut_options.isSet()) {
        obj.insert(QString("DonutOptions"), ::OpenAPI::toJsonValue(m_donut_options));
    }
    if (m_small_multiples_options.isSet()) {
        obj.insert(QString("SmallMultiplesOptions"), ::OpenAPI::toJsonValue(m_small_multiples_options));
    }
    if (m_category_label_options.isSet()) {
        obj.insert(QString("CategoryLabelOptions"), ::OpenAPI::toJsonValue(m_category_label_options));
    }
    if (m_value_label_options.isSet()) {
        obj.insert(QString("ValueLabelOptions"), ::OpenAPI::toJsonValue(m_value_label_options));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    if (m_contribution_analysis_defaults.isSet()) {
        obj.insert(QString("ContributionAnalysisDefaults"), ::OpenAPI::toJsonValue(m_contribution_analysis_defaults));
    }
    return obj;
}

OAIPieChartConfiguration_FieldWells OAIPieChartVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIPieChartVisual_ChartConfiguration::setFieldWells(const OAIPieChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIPieChartConfiguration_SortConfiguration OAIPieChartVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIPieChartVisual_ChartConfiguration::setSortConfiguration(const OAIPieChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIPieChartConfiguration_DonutOptions OAIPieChartVisual_ChartConfiguration::getDonutOptions() const {
    return m_donut_options;
}
void OAIPieChartVisual_ChartConfiguration::setDonutOptions(const OAIPieChartConfiguration_DonutOptions &donut_options) {
    m_donut_options = donut_options;
    m_donut_options_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_donut_options_Set() const{
    return m_donut_options_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_donut_options_Valid() const{
    return m_donut_options_isValid;
}

OAIBarChartConfiguration_SmallMultiplesOptions OAIPieChartVisual_ChartConfiguration::getSmallMultiplesOptions() const {
    return m_small_multiples_options;
}
void OAIPieChartVisual_ChartConfiguration::setSmallMultiplesOptions(const OAIBarChartConfiguration_SmallMultiplesOptions &small_multiples_options) {
    m_small_multiples_options = small_multiples_options;
    m_small_multiples_options_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_small_multiples_options_Set() const{
    return m_small_multiples_options_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_small_multiples_options_Valid() const{
    return m_small_multiples_options_isValid;
}

OAIPieChartConfiguration_CategoryLabelOptions OAIPieChartVisual_ChartConfiguration::getCategoryLabelOptions() const {
    return m_category_label_options;
}
void OAIPieChartVisual_ChartConfiguration::setCategoryLabelOptions(const OAIPieChartConfiguration_CategoryLabelOptions &category_label_options) {
    m_category_label_options = category_label_options;
    m_category_label_options_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_category_label_options_Set() const{
    return m_category_label_options_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_category_label_options_Valid() const{
    return m_category_label_options_isValid;
}

OAIPieChartConfiguration_ValueLabelOptions OAIPieChartVisual_ChartConfiguration::getValueLabelOptions() const {
    return m_value_label_options;
}
void OAIPieChartVisual_ChartConfiguration::setValueLabelOptions(const OAIPieChartConfiguration_ValueLabelOptions &value_label_options) {
    m_value_label_options = value_label_options;
    m_value_label_options_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_value_label_options_Set() const{
    return m_value_label_options_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_value_label_options_Valid() const{
    return m_value_label_options_isValid;
}

OAIBarChartConfiguration_Legend OAIPieChartVisual_ChartConfiguration::getLegend() const {
    return m_legend;
}
void OAIPieChartVisual_ChartConfiguration::setLegend(const OAIBarChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIBarChartConfiguration_DataLabels OAIPieChartVisual_ChartConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAIPieChartVisual_ChartConfiguration::setDataLabels(const OAIBarChartConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

OAIBarChartConfiguration_Tooltip OAIPieChartVisual_ChartConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIPieChartVisual_ChartConfiguration::setTooltip(const OAIBarChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

OAIBarChartConfiguration_VisualPalette OAIPieChartVisual_ChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIPieChartVisual_ChartConfiguration::setVisualPalette(const OAIBarChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

QList OAIPieChartVisual_ChartConfiguration::getContributionAnalysisDefaults() const {
    return m_contribution_analysis_defaults;
}
void OAIPieChartVisual_ChartConfiguration::setContributionAnalysisDefaults(const QList &contribution_analysis_defaults) {
    m_contribution_analysis_defaults = contribution_analysis_defaults;
    m_contribution_analysis_defaults_isSet = true;
}

bool OAIPieChartVisual_ChartConfiguration::is_contribution_analysis_defaults_Set() const{
    return m_contribution_analysis_defaults_isSet;
}

bool OAIPieChartVisual_ChartConfiguration::is_contribution_analysis_defaults_Valid() const{
    return m_contribution_analysis_defaults_isValid;
}

bool OAIPieChartVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_donut_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_analysis_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPieChartVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
