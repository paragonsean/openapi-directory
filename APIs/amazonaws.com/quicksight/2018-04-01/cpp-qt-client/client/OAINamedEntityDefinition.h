/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINamedEntityDefinition.h
 *
 * A structure that represents a named entity.
 */

#ifndef OAINamedEntityDefinition_H
#define OAINamedEntityDefinition_H

#include <QJsonObject>

#include "OAINamedEntityDefinition_Metric.h"
#include "OAIPropertyRole.h"
#include "OAIPropertyUsage.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINamedEntityDefinition_Metric;

class OAINamedEntityDefinition : public OAIObject {
public:
    OAINamedEntityDefinition();
    OAINamedEntityDefinition(QString json);
    ~OAINamedEntityDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFieldName() const;
    void setFieldName(const QString &field_name);
    bool is_field_name_Set() const;
    bool is_field_name_Valid() const;

    QString getPropertyName() const;
    void setPropertyName(const QString &property_name);
    bool is_property_name_Set() const;
    bool is_property_name_Valid() const;

    OAIPropertyRole getPropertyRole() const;
    void setPropertyRole(const OAIPropertyRole &property_role);
    bool is_property_role_Set() const;
    bool is_property_role_Valid() const;

    OAIPropertyUsage getPropertyUsage() const;
    void setPropertyUsage(const OAIPropertyUsage &property_usage);
    bool is_property_usage_Set() const;
    bool is_property_usage_Valid() const;

    OAINamedEntityDefinition_Metric getMetric() const;
    void setMetric(const OAINamedEntityDefinition_Metric &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_field_name;
    bool m_field_name_isSet;
    bool m_field_name_isValid;

    QString m_property_name;
    bool m_property_name_isSet;
    bool m_property_name_isValid;

    OAIPropertyRole m_property_role;
    bool m_property_role_isSet;
    bool m_property_role_isValid;

    OAIPropertyUsage m_property_usage;
    bool m_property_usage_isSet;
    bool m_property_usage_isValid;

    OAINamedEntityDefinition_Metric m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINamedEntityDefinition)

#endif // OAINamedEntityDefinition_H
