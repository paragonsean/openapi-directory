/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastScenario_WhatIfPointScenario.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastScenario_WhatIfPointScenario::OAIForecastScenario_WhatIfPointScenario(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastScenario_WhatIfPointScenario::OAIForecastScenario_WhatIfPointScenario() {
    this->initializeModel();
}

OAIForecastScenario_WhatIfPointScenario::~OAIForecastScenario_WhatIfPointScenario() {}

void OAIForecastScenario_WhatIfPointScenario::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIForecastScenario_WhatIfPointScenario::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastScenario_WhatIfPointScenario::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIForecastScenario_WhatIfPointScenario::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastScenario_WhatIfPointScenario::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QDateTime OAIForecastScenario_WhatIfPointScenario::getDate() const {
    return m_date;
}
void OAIForecastScenario_WhatIfPointScenario::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIForecastScenario_WhatIfPointScenario::is_date_Set() const{
    return m_date_isSet;
}

bool OAIForecastScenario_WhatIfPointScenario::is_date_Valid() const{
    return m_date_isValid;
}

double OAIForecastScenario_WhatIfPointScenario::getValue() const {
    return m_value;
}
void OAIForecastScenario_WhatIfPointScenario::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIForecastScenario_WhatIfPointScenario::is_value_Set() const{
    return m_value_isSet;
}

bool OAIForecastScenario_WhatIfPointScenario::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIForecastScenario_WhatIfPointScenario::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastScenario_WhatIfPointScenario::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
