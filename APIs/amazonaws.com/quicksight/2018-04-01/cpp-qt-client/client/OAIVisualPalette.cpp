/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisualPalette.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisualPalette::OAIVisualPalette(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisualPalette::OAIVisualPalette() {
    this->initializeModel();
}

OAIVisualPalette::~OAIVisualPalette() {}

void OAIVisualPalette::initializeModel() {

    m_chart_color_isSet = false;
    m_chart_color_isValid = false;

    m_color_map_isSet = false;
    m_color_map_isValid = false;
}

void OAIVisualPalette::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisualPalette::fromJsonObject(QJsonObject json) {

    m_chart_color_isValid = ::OpenAPI::fromJsonValue(m_chart_color, json[QString("ChartColor")]);
    m_chart_color_isSet = !json[QString("ChartColor")].isNull() && m_chart_color_isValid;

    m_color_map_isValid = ::OpenAPI::fromJsonValue(m_color_map, json[QString("ColorMap")]);
    m_color_map_isSet = !json[QString("ColorMap")].isNull() && m_color_map_isValid;
}

QString OAIVisualPalette::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisualPalette::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_color_isSet) {
        obj.insert(QString("ChartColor"), ::OpenAPI::toJsonValue(m_chart_color));
    }
    if (m_color_map.isSet()) {
        obj.insert(QString("ColorMap"), ::OpenAPI::toJsonValue(m_color_map));
    }
    return obj;
}

QString OAIVisualPalette::getChartColor() const {
    return m_chart_color;
}
void OAIVisualPalette::setChartColor(const QString &chart_color) {
    m_chart_color = chart_color;
    m_chart_color_isSet = true;
}

bool OAIVisualPalette::is_chart_color_Set() const{
    return m_chart_color_isSet;
}

bool OAIVisualPalette::is_chart_color_Valid() const{
    return m_chart_color_isValid;
}

QList OAIVisualPalette::getColorMap() const {
    return m_color_map;
}
void OAIVisualPalette::setColorMap(const QList &color_map) {
    m_color_map = color_map;
    m_color_map_isSet = true;
}

bool OAIVisualPalette::is_color_map_Set() const{
    return m_color_map_isSet;
}

bool OAIVisualPalette::is_color_map_Valid() const{
    return m_color_map_isValid;
}

bool OAIVisualPalette::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_map.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisualPalette::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
