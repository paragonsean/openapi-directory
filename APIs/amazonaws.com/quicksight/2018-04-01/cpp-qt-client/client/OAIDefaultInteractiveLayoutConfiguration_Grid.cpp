/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultInteractiveLayoutConfiguration_Grid.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultInteractiveLayoutConfiguration_Grid::OAIDefaultInteractiveLayoutConfiguration_Grid(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultInteractiveLayoutConfiguration_Grid::OAIDefaultInteractiveLayoutConfiguration_Grid() {
    this->initializeModel();
}

OAIDefaultInteractiveLayoutConfiguration_Grid::~OAIDefaultInteractiveLayoutConfiguration_Grid() {}

void OAIDefaultInteractiveLayoutConfiguration_Grid::initializeModel() {

    m_canvas_size_options_isSet = false;
    m_canvas_size_options_isValid = false;
}

void OAIDefaultInteractiveLayoutConfiguration_Grid::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultInteractiveLayoutConfiguration_Grid::fromJsonObject(QJsonObject json) {

    m_canvas_size_options_isValid = ::OpenAPI::fromJsonValue(m_canvas_size_options, json[QString("CanvasSizeOptions")]);
    m_canvas_size_options_isSet = !json[QString("CanvasSizeOptions")].isNull() && m_canvas_size_options_isValid;
}

QString OAIDefaultInteractiveLayoutConfiguration_Grid::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultInteractiveLayoutConfiguration_Grid::asJsonObject() const {
    QJsonObject obj;
    if (m_canvas_size_options.isSet()) {
        obj.insert(QString("CanvasSizeOptions"), ::OpenAPI::toJsonValue(m_canvas_size_options));
    }
    return obj;
}

OAIDefaultGridLayoutConfiguration_CanvasSizeOptions OAIDefaultInteractiveLayoutConfiguration_Grid::getCanvasSizeOptions() const {
    return m_canvas_size_options;
}
void OAIDefaultInteractiveLayoutConfiguration_Grid::setCanvasSizeOptions(const OAIDefaultGridLayoutConfiguration_CanvasSizeOptions &canvas_size_options) {
    m_canvas_size_options = canvas_size_options;
    m_canvas_size_options_isSet = true;
}

bool OAIDefaultInteractiveLayoutConfiguration_Grid::is_canvas_size_options_Set() const{
    return m_canvas_size_options_isSet;
}

bool OAIDefaultInteractiveLayoutConfiguration_Grid::is_canvas_size_options_Valid() const{
    return m_canvas_size_options_isValid;
}

bool OAIDefaultInteractiveLayoutConfiguration_Grid::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canvas_size_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultInteractiveLayoutConfiguration_Grid::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_canvas_size_options_isValid && true;
}

} // namespace OpenAPI
