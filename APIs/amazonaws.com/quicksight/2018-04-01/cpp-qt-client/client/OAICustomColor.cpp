/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomColor::OAICustomColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomColor::OAICustomColor() {
    this->initializeModel();
}

OAICustomColor::~OAICustomColor() {}

void OAICustomColor::initializeModel() {

    m_field_value_isSet = false;
    m_field_value_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_special_value_isSet = false;
    m_special_value_isValid = false;
}

void OAICustomColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomColor::fromJsonObject(QJsonObject json) {

    m_field_value_isValid = ::OpenAPI::fromJsonValue(m_field_value, json[QString("FieldValue")]);
    m_field_value_isSet = !json[QString("FieldValue")].isNull() && m_field_value_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_special_value_isValid = ::OpenAPI::fromJsonValue(m_special_value, json[QString("SpecialValue")]);
    m_special_value_isSet = !json[QString("SpecialValue")].isNull() && m_special_value_isValid;
}

QString OAICustomColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomColor::asJsonObject() const {
    QJsonObject obj;
    if (m_field_value_isSet) {
        obj.insert(QString("FieldValue"), ::OpenAPI::toJsonValue(m_field_value));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_special_value.isSet()) {
        obj.insert(QString("SpecialValue"), ::OpenAPI::toJsonValue(m_special_value));
    }
    return obj;
}

QString OAICustomColor::getFieldValue() const {
    return m_field_value;
}
void OAICustomColor::setFieldValue(const QString &field_value) {
    m_field_value = field_value;
    m_field_value_isSet = true;
}

bool OAICustomColor::is_field_value_Set() const{
    return m_field_value_isSet;
}

bool OAICustomColor::is_field_value_Valid() const{
    return m_field_value_isValid;
}

QString OAICustomColor::getColor() const {
    return m_color;
}
void OAICustomColor::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAICustomColor::is_color_Set() const{
    return m_color_isSet;
}

bool OAICustomColor::is_color_Valid() const{
    return m_color_isValid;
}

OAISpecialValue OAICustomColor::getSpecialValue() const {
    return m_special_value;
}
void OAICustomColor::setSpecialValue(const OAISpecialValue &special_value) {
    m_special_value = special_value;
    m_special_value_isSet = true;
}

bool OAICustomColor::is_special_value_Set() const{
    return m_special_value_isSet;
}

bool OAICustomColor::is_special_value_Valid() const{
    return m_special_value_isValid;
}

bool OAICustomColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_color_isValid && true;
}

} // namespace OpenAPI
