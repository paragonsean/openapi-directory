/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataLabelPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataLabelPosition::OAIDataLabelPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataLabelPosition::OAIDataLabelPosition() {
    this->initializeModel();
}

OAIDataLabelPosition::~OAIDataLabelPosition() {}

void OAIDataLabelPosition::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataLabelPosition::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataLabelPosition::fromJson(QString jsonString) {
    
    if ( jsonString.compare("INSIDE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLabelPosition::INSIDE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUTSIDE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLabelPosition::OUTSIDE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLabelPosition::LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLabelPosition::TOP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOTTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLabelPosition::BOTTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLabelPosition::RIGHT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataLabelPosition::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataLabelPosition::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataLabelPosition::INSIDE:
            val = "INSIDE";
            break;
        case eOAIDataLabelPosition::OUTSIDE:
            val = "OUTSIDE";
            break;
        case eOAIDataLabelPosition::LEFT:
            val = "LEFT";
            break;
        case eOAIDataLabelPosition::TOP:
            val = "TOP";
            break;
        case eOAIDataLabelPosition::BOTTOM:
            val = "BOTTOM";
            break;
        case eOAIDataLabelPosition::RIGHT:
            val = "RIGHT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataLabelPosition::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataLabelPosition::eOAIDataLabelPosition OAIDataLabelPosition::getValue() const {
    return m_value;
}

void OAIDataLabelPosition::setValue(const OAIDataLabelPosition::eOAIDataLabelPosition& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataLabelPosition::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataLabelPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
