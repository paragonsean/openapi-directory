/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisual_FilledMapVisual.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisual_FilledMapVisual::OAIVisual_FilledMapVisual(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisual_FilledMapVisual::OAIVisual_FilledMapVisual() {
    this->initializeModel();
}

OAIVisual_FilledMapVisual::~OAIVisual_FilledMapVisual() {}

void OAIVisual_FilledMapVisual::initializeModel() {

    m_visual_id_isSet = false;
    m_visual_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_chart_configuration_isSet = false;
    m_chart_configuration_isValid = false;

    m_conditional_formatting_isSet = false;
    m_conditional_formatting_isValid = false;

    m_column_hierarchies_isSet = false;
    m_column_hierarchies_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;
}

void OAIVisual_FilledMapVisual::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisual_FilledMapVisual::fromJsonObject(QJsonObject json) {

    m_visual_id_isValid = ::OpenAPI::fromJsonValue(m_visual_id, json[QString("VisualId")]);
    m_visual_id_isSet = !json[QString("VisualId")].isNull() && m_visual_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("Subtitle")]);
    m_subtitle_isSet = !json[QString("Subtitle")].isNull() && m_subtitle_isValid;

    m_chart_configuration_isValid = ::OpenAPI::fromJsonValue(m_chart_configuration, json[QString("ChartConfiguration")]);
    m_chart_configuration_isSet = !json[QString("ChartConfiguration")].isNull() && m_chart_configuration_isValid;

    m_conditional_formatting_isValid = ::OpenAPI::fromJsonValue(m_conditional_formatting, json[QString("ConditionalFormatting")]);
    m_conditional_formatting_isSet = !json[QString("ConditionalFormatting")].isNull() && m_conditional_formatting_isValid;

    m_column_hierarchies_isValid = ::OpenAPI::fromJsonValue(m_column_hierarchies, json[QString("ColumnHierarchies")]);
    m_column_hierarchies_isSet = !json[QString("ColumnHierarchies")].isNull() && m_column_hierarchies_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;
}

QString OAIVisual_FilledMapVisual::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisual_FilledMapVisual::asJsonObject() const {
    QJsonObject obj;
    if (m_visual_id_isSet) {
        obj.insert(QString("VisualId"), ::OpenAPI::toJsonValue(m_visual_id));
    }
    if (m_title.isSet()) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_subtitle.isSet()) {
        obj.insert(QString("Subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_chart_configuration.isSet()) {
        obj.insert(QString("ChartConfiguration"), ::OpenAPI::toJsonValue(m_chart_configuration));
    }
    if (m_conditional_formatting.isSet()) {
        obj.insert(QString("ConditionalFormatting"), ::OpenAPI::toJsonValue(m_conditional_formatting));
    }
    if (m_column_hierarchies.isSet()) {
        obj.insert(QString("ColumnHierarchies"), ::OpenAPI::toJsonValue(m_column_hierarchies));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    return obj;
}

QString OAIVisual_FilledMapVisual::getVisualId() const {
    return m_visual_id;
}
void OAIVisual_FilledMapVisual::setVisualId(const QString &visual_id) {
    m_visual_id = visual_id;
    m_visual_id_isSet = true;
}

bool OAIVisual_FilledMapVisual::is_visual_id_Set() const{
    return m_visual_id_isSet;
}

bool OAIVisual_FilledMapVisual::is_visual_id_Valid() const{
    return m_visual_id_isValid;
}

OAIBarChartVisual_Title OAIVisual_FilledMapVisual::getTitle() const {
    return m_title;
}
void OAIVisual_FilledMapVisual::setTitle(const OAIBarChartVisual_Title &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVisual_FilledMapVisual::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVisual_FilledMapVisual::is_title_Valid() const{
    return m_title_isValid;
}

OAIBarChartVisual_Subtitle OAIVisual_FilledMapVisual::getSubtitle() const {
    return m_subtitle;
}
void OAIVisual_FilledMapVisual::setSubtitle(const OAIBarChartVisual_Subtitle &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIVisual_FilledMapVisual::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIVisual_FilledMapVisual::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

OAIFilledMapVisual_ChartConfiguration OAIVisual_FilledMapVisual::getChartConfiguration() const {
    return m_chart_configuration;
}
void OAIVisual_FilledMapVisual::setChartConfiguration(const OAIFilledMapVisual_ChartConfiguration &chart_configuration) {
    m_chart_configuration = chart_configuration;
    m_chart_configuration_isSet = true;
}

bool OAIVisual_FilledMapVisual::is_chart_configuration_Set() const{
    return m_chart_configuration_isSet;
}

bool OAIVisual_FilledMapVisual::is_chart_configuration_Valid() const{
    return m_chart_configuration_isValid;
}

OAIFilledMapVisual_ConditionalFormatting OAIVisual_FilledMapVisual::getConditionalFormatting() const {
    return m_conditional_formatting;
}
void OAIVisual_FilledMapVisual::setConditionalFormatting(const OAIFilledMapVisual_ConditionalFormatting &conditional_formatting) {
    m_conditional_formatting = conditional_formatting;
    m_conditional_formatting_isSet = true;
}

bool OAIVisual_FilledMapVisual::is_conditional_formatting_Set() const{
    return m_conditional_formatting_isSet;
}

bool OAIVisual_FilledMapVisual::is_conditional_formatting_Valid() const{
    return m_conditional_formatting_isValid;
}

QList OAIVisual_FilledMapVisual::getColumnHierarchies() const {
    return m_column_hierarchies;
}
void OAIVisual_FilledMapVisual::setColumnHierarchies(const QList &column_hierarchies) {
    m_column_hierarchies = column_hierarchies;
    m_column_hierarchies_isSet = true;
}

bool OAIVisual_FilledMapVisual::is_column_hierarchies_Set() const{
    return m_column_hierarchies_isSet;
}

bool OAIVisual_FilledMapVisual::is_column_hierarchies_Valid() const{
    return m_column_hierarchies_isValid;
}

QList OAIVisual_FilledMapVisual::getActions() const {
    return m_actions;
}
void OAIVisual_FilledMapVisual::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIVisual_FilledMapVisual::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIVisual_FilledMapVisual::is_actions_Valid() const{
    return m_actions_isValid;
}

bool OAIVisual_FilledMapVisual::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visual_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_formatting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_hierarchies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisual_FilledMapVisual::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_visual_id_isValid && true;
}

} // namespace OpenAPI
