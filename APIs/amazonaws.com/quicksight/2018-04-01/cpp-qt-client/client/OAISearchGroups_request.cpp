/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchGroups_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchGroups_request::OAISearchGroups_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchGroups_request::OAISearchGroups_request() {
    this->initializeModel();
}

OAISearchGroups_request::~OAISearchGroups_request() {}

void OAISearchGroups_request::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAISearchGroups_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchGroups_request::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;
}

QString OAISearchGroups_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchGroups_request::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.size() > 0) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QList<OAIGroupSearchFilter> OAISearchGroups_request::getFilters() const {
    return m_filters;
}
void OAISearchGroups_request::setFilters(const QList<OAIGroupSearchFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchGroups_request::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchGroups_request::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAISearchGroups_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchGroups_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filters_isValid && true;
}

} // namespace OpenAPI
