/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredUserConsoleFeatureConfigurations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredUserConsoleFeatureConfigurations::OAIRegisteredUserConsoleFeatureConfigurations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredUserConsoleFeatureConfigurations::OAIRegisteredUserConsoleFeatureConfigurations() {
    this->initializeModel();
}

OAIRegisteredUserConsoleFeatureConfigurations::~OAIRegisteredUserConsoleFeatureConfigurations() {}

void OAIRegisteredUserConsoleFeatureConfigurations::initializeModel() {

    m_state_persistence_isSet = false;
    m_state_persistence_isValid = false;
}

void OAIRegisteredUserConsoleFeatureConfigurations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredUserConsoleFeatureConfigurations::fromJsonObject(QJsonObject json) {

    m_state_persistence_isValid = ::OpenAPI::fromJsonValue(m_state_persistence, json[QString("StatePersistence")]);
    m_state_persistence_isSet = !json[QString("StatePersistence")].isNull() && m_state_persistence_isValid;
}

QString OAIRegisteredUserConsoleFeatureConfigurations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredUserConsoleFeatureConfigurations::asJsonObject() const {
    QJsonObject obj;
    if (m_state_persistence.isSet()) {
        obj.insert(QString("StatePersistence"), ::OpenAPI::toJsonValue(m_state_persistence));
    }
    return obj;
}

OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence OAIRegisteredUserConsoleFeatureConfigurations::getStatePersistence() const {
    return m_state_persistence;
}
void OAIRegisteredUserConsoleFeatureConfigurations::setStatePersistence(const OAIRegisteredUserConsoleFeatureConfigurations_StatePersistence &state_persistence) {
    m_state_persistence = state_persistence;
    m_state_persistence_isSet = true;
}

bool OAIRegisteredUserConsoleFeatureConfigurations::is_state_persistence_Set() const{
    return m_state_persistence_isSet;
}

bool OAIRegisteredUserConsoleFeatureConfigurations::is_state_persistence_Valid() const{
    return m_state_persistence_isValid;
}

bool OAIRegisteredUserConsoleFeatureConfigurations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_persistence.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredUserConsoleFeatureConfigurations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
