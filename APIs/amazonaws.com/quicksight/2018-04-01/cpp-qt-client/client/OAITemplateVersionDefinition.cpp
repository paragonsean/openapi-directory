/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateVersionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateVersionDefinition::OAITemplateVersionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateVersionDefinition::OAITemplateVersionDefinition() {
    this->initializeModel();
}

OAITemplateVersionDefinition::~OAITemplateVersionDefinition() {}

void OAITemplateVersionDefinition::initializeModel() {

    m_data_set_configurations_isSet = false;
    m_data_set_configurations_isValid = false;

    m_sheets_isSet = false;
    m_sheets_isValid = false;

    m_calculated_fields_isSet = false;
    m_calculated_fields_isValid = false;

    m_parameter_declarations_isSet = false;
    m_parameter_declarations_isValid = false;

    m_filter_groups_isSet = false;
    m_filter_groups_isValid = false;

    m_column_configurations_isSet = false;
    m_column_configurations_isValid = false;

    m_analysis_defaults_isSet = false;
    m_analysis_defaults_isValid = false;
}

void OAITemplateVersionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateVersionDefinition::fromJsonObject(QJsonObject json) {

    m_data_set_configurations_isValid = ::OpenAPI::fromJsonValue(m_data_set_configurations, json[QString("DataSetConfigurations")]);
    m_data_set_configurations_isSet = !json[QString("DataSetConfigurations")].isNull() && m_data_set_configurations_isValid;

    m_sheets_isValid = ::OpenAPI::fromJsonValue(m_sheets, json[QString("Sheets")]);
    m_sheets_isSet = !json[QString("Sheets")].isNull() && m_sheets_isValid;

    m_calculated_fields_isValid = ::OpenAPI::fromJsonValue(m_calculated_fields, json[QString("CalculatedFields")]);
    m_calculated_fields_isSet = !json[QString("CalculatedFields")].isNull() && m_calculated_fields_isValid;

    m_parameter_declarations_isValid = ::OpenAPI::fromJsonValue(m_parameter_declarations, json[QString("ParameterDeclarations")]);
    m_parameter_declarations_isSet = !json[QString("ParameterDeclarations")].isNull() && m_parameter_declarations_isValid;

    m_filter_groups_isValid = ::OpenAPI::fromJsonValue(m_filter_groups, json[QString("FilterGroups")]);
    m_filter_groups_isSet = !json[QString("FilterGroups")].isNull() && m_filter_groups_isValid;

    m_column_configurations_isValid = ::OpenAPI::fromJsonValue(m_column_configurations, json[QString("ColumnConfigurations")]);
    m_column_configurations_isSet = !json[QString("ColumnConfigurations")].isNull() && m_column_configurations_isValid;

    m_analysis_defaults_isValid = ::OpenAPI::fromJsonValue(m_analysis_defaults, json[QString("AnalysisDefaults")]);
    m_analysis_defaults_isSet = !json[QString("AnalysisDefaults")].isNull() && m_analysis_defaults_isValid;
}

QString OAITemplateVersionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateVersionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_configurations.isSet()) {
        obj.insert(QString("DataSetConfigurations"), ::OpenAPI::toJsonValue(m_data_set_configurations));
    }
    if (m_sheets.isSet()) {
        obj.insert(QString("Sheets"), ::OpenAPI::toJsonValue(m_sheets));
    }
    if (m_calculated_fields.isSet()) {
        obj.insert(QString("CalculatedFields"), ::OpenAPI::toJsonValue(m_calculated_fields));
    }
    if (m_parameter_declarations.isSet()) {
        obj.insert(QString("ParameterDeclarations"), ::OpenAPI::toJsonValue(m_parameter_declarations));
    }
    if (m_filter_groups.isSet()) {
        obj.insert(QString("FilterGroups"), ::OpenAPI::toJsonValue(m_filter_groups));
    }
    if (m_column_configurations.isSet()) {
        obj.insert(QString("ColumnConfigurations"), ::OpenAPI::toJsonValue(m_column_configurations));
    }
    if (m_analysis_defaults.isSet()) {
        obj.insert(QString("AnalysisDefaults"), ::OpenAPI::toJsonValue(m_analysis_defaults));
    }
    return obj;
}

QList OAITemplateVersionDefinition::getDataSetConfigurations() const {
    return m_data_set_configurations;
}
void OAITemplateVersionDefinition::setDataSetConfigurations(const QList &data_set_configurations) {
    m_data_set_configurations = data_set_configurations;
    m_data_set_configurations_isSet = true;
}

bool OAITemplateVersionDefinition::is_data_set_configurations_Set() const{
    return m_data_set_configurations_isSet;
}

bool OAITemplateVersionDefinition::is_data_set_configurations_Valid() const{
    return m_data_set_configurations_isValid;
}

QList OAITemplateVersionDefinition::getSheets() const {
    return m_sheets;
}
void OAITemplateVersionDefinition::setSheets(const QList &sheets) {
    m_sheets = sheets;
    m_sheets_isSet = true;
}

bool OAITemplateVersionDefinition::is_sheets_Set() const{
    return m_sheets_isSet;
}

bool OAITemplateVersionDefinition::is_sheets_Valid() const{
    return m_sheets_isValid;
}

QList OAITemplateVersionDefinition::getCalculatedFields() const {
    return m_calculated_fields;
}
void OAITemplateVersionDefinition::setCalculatedFields(const QList &calculated_fields) {
    m_calculated_fields = calculated_fields;
    m_calculated_fields_isSet = true;
}

bool OAITemplateVersionDefinition::is_calculated_fields_Set() const{
    return m_calculated_fields_isSet;
}

bool OAITemplateVersionDefinition::is_calculated_fields_Valid() const{
    return m_calculated_fields_isValid;
}

QList OAITemplateVersionDefinition::getParameterDeclarations() const {
    return m_parameter_declarations;
}
void OAITemplateVersionDefinition::setParameterDeclarations(const QList &parameter_declarations) {
    m_parameter_declarations = parameter_declarations;
    m_parameter_declarations_isSet = true;
}

bool OAITemplateVersionDefinition::is_parameter_declarations_Set() const{
    return m_parameter_declarations_isSet;
}

bool OAITemplateVersionDefinition::is_parameter_declarations_Valid() const{
    return m_parameter_declarations_isValid;
}

QList OAITemplateVersionDefinition::getFilterGroups() const {
    return m_filter_groups;
}
void OAITemplateVersionDefinition::setFilterGroups(const QList &filter_groups) {
    m_filter_groups = filter_groups;
    m_filter_groups_isSet = true;
}

bool OAITemplateVersionDefinition::is_filter_groups_Set() const{
    return m_filter_groups_isSet;
}

bool OAITemplateVersionDefinition::is_filter_groups_Valid() const{
    return m_filter_groups_isValid;
}

QList OAITemplateVersionDefinition::getColumnConfigurations() const {
    return m_column_configurations;
}
void OAITemplateVersionDefinition::setColumnConfigurations(const QList &column_configurations) {
    m_column_configurations = column_configurations;
    m_column_configurations_isSet = true;
}

bool OAITemplateVersionDefinition::is_column_configurations_Set() const{
    return m_column_configurations_isSet;
}

bool OAITemplateVersionDefinition::is_column_configurations_Valid() const{
    return m_column_configurations_isValid;
}

OAIAnalysisDefaults OAITemplateVersionDefinition::getAnalysisDefaults() const {
    return m_analysis_defaults;
}
void OAITemplateVersionDefinition::setAnalysisDefaults(const OAIAnalysisDefaults &analysis_defaults) {
    m_analysis_defaults = analysis_defaults;
    m_analysis_defaults_isSet = true;
}

bool OAITemplateVersionDefinition::is_analysis_defaults_Set() const{
    return m_analysis_defaults_isSet;
}

bool OAITemplateVersionDefinition::is_analysis_defaults_Valid() const{
    return m_analysis_defaults_isValid;
}

bool OAITemplateVersionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_declarations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateVersionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_configurations_isValid && true;
}

} // namespace OpenAPI
