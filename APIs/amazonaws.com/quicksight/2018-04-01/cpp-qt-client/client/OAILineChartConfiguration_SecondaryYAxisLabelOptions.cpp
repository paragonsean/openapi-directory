/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineChartConfiguration_SecondaryYAxisLabelOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineChartConfiguration_SecondaryYAxisLabelOptions::OAILineChartConfiguration_SecondaryYAxisLabelOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineChartConfiguration_SecondaryYAxisLabelOptions::OAILineChartConfiguration_SecondaryYAxisLabelOptions() {
    this->initializeModel();
}

OAILineChartConfiguration_SecondaryYAxisLabelOptions::~OAILineChartConfiguration_SecondaryYAxisLabelOptions() {}

void OAILineChartConfiguration_SecondaryYAxisLabelOptions::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_sort_icon_visibility_isSet = false;
    m_sort_icon_visibility_isValid = false;

    m_axis_label_options_isSet = false;
    m_axis_label_options_isValid = false;
}

void OAILineChartConfiguration_SecondaryYAxisLabelOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineChartConfiguration_SecondaryYAxisLabelOptions::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_sort_icon_visibility_isValid = ::OpenAPI::fromJsonValue(m_sort_icon_visibility, json[QString("SortIconVisibility")]);
    m_sort_icon_visibility_isSet = !json[QString("SortIconVisibility")].isNull() && m_sort_icon_visibility_isValid;

    m_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_axis_label_options, json[QString("AxisLabelOptions")]);
    m_axis_label_options_isSet = !json[QString("AxisLabelOptions")].isNull() && m_axis_label_options_isValid;
}

QString OAILineChartConfiguration_SecondaryYAxisLabelOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineChartConfiguration_SecondaryYAxisLabelOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_sort_icon_visibility.isSet()) {
        obj.insert(QString("SortIconVisibility"), ::OpenAPI::toJsonValue(m_sort_icon_visibility));
    }
    if (m_axis_label_options.isSet()) {
        obj.insert(QString("AxisLabelOptions"), ::OpenAPI::toJsonValue(m_axis_label_options));
    }
    return obj;
}

OAIVisibility OAILineChartConfiguration_SecondaryYAxisLabelOptions::getVisibility() const {
    return m_visibility;
}
void OAILineChartConfiguration_SecondaryYAxisLabelOptions::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAILineChartConfiguration_SecondaryYAxisLabelOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAILineChartConfiguration_SecondaryYAxisLabelOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIVisibility OAILineChartConfiguration_SecondaryYAxisLabelOptions::getSortIconVisibility() const {
    return m_sort_icon_visibility;
}
void OAILineChartConfiguration_SecondaryYAxisLabelOptions::setSortIconVisibility(const OAIVisibility &sort_icon_visibility) {
    m_sort_icon_visibility = sort_icon_visibility;
    m_sort_icon_visibility_isSet = true;
}

bool OAILineChartConfiguration_SecondaryYAxisLabelOptions::is_sort_icon_visibility_Set() const{
    return m_sort_icon_visibility_isSet;
}

bool OAILineChartConfiguration_SecondaryYAxisLabelOptions::is_sort_icon_visibility_Valid() const{
    return m_sort_icon_visibility_isValid;
}

QList OAILineChartConfiguration_SecondaryYAxisLabelOptions::getAxisLabelOptions() const {
    return m_axis_label_options;
}
void OAILineChartConfiguration_SecondaryYAxisLabelOptions::setAxisLabelOptions(const QList &axis_label_options) {
    m_axis_label_options = axis_label_options;
    m_axis_label_options_isSet = true;
}

bool OAILineChartConfiguration_SecondaryYAxisLabelOptions::is_axis_label_options_Set() const{
    return m_axis_label_options_isSet;
}

bool OAILineChartConfiguration_SecondaryYAxisLabelOptions::is_axis_label_options_Valid() const{
    return m_axis_label_options_isValid;
}

bool OAILineChartConfiguration_SecondaryYAxisLabelOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_icon_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineChartConfiguration_SecondaryYAxisLabelOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
