/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimePickerControlDisplayOptions_TitleOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimePickerControlDisplayOptions_TitleOptions::OAIDateTimePickerControlDisplayOptions_TitleOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimePickerControlDisplayOptions_TitleOptions::OAIDateTimePickerControlDisplayOptions_TitleOptions() {
    this->initializeModel();
}

OAIDateTimePickerControlDisplayOptions_TitleOptions::~OAIDateTimePickerControlDisplayOptions_TitleOptions() {}

void OAIDateTimePickerControlDisplayOptions_TitleOptions::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_font_configuration_isSet = false;
    m_font_configuration_isValid = false;

    m_custom_label_isSet = false;
    m_custom_label_isValid = false;
}

void OAIDateTimePickerControlDisplayOptions_TitleOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimePickerControlDisplayOptions_TitleOptions::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_font_configuration, json[QString("FontConfiguration")]);
    m_font_configuration_isSet = !json[QString("FontConfiguration")].isNull() && m_font_configuration_isValid;

    m_custom_label_isValid = ::OpenAPI::fromJsonValue(m_custom_label, json[QString("CustomLabel")]);
    m_custom_label_isSet = !json[QString("CustomLabel")].isNull() && m_custom_label_isValid;
}

QString OAIDateTimePickerControlDisplayOptions_TitleOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimePickerControlDisplayOptions_TitleOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_font_configuration.isSet()) {
        obj.insert(QString("FontConfiguration"), ::OpenAPI::toJsonValue(m_font_configuration));
    }
    if (m_custom_label_isSet) {
        obj.insert(QString("CustomLabel"), ::OpenAPI::toJsonValue(m_custom_label));
    }
    return obj;
}

OAIVisibility OAIDateTimePickerControlDisplayOptions_TitleOptions::getVisibility() const {
    return m_visibility;
}
void OAIDateTimePickerControlDisplayOptions_TitleOptions::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIDateTimePickerControlDisplayOptions_TitleOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIDateTimePickerControlDisplayOptions_TitleOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAILabelOptions_FontConfiguration OAIDateTimePickerControlDisplayOptions_TitleOptions::getFontConfiguration() const {
    return m_font_configuration;
}
void OAIDateTimePickerControlDisplayOptions_TitleOptions::setFontConfiguration(const OAILabelOptions_FontConfiguration &font_configuration) {
    m_font_configuration = font_configuration;
    m_font_configuration_isSet = true;
}

bool OAIDateTimePickerControlDisplayOptions_TitleOptions::is_font_configuration_Set() const{
    return m_font_configuration_isSet;
}

bool OAIDateTimePickerControlDisplayOptions_TitleOptions::is_font_configuration_Valid() const{
    return m_font_configuration_isValid;
}

QString OAIDateTimePickerControlDisplayOptions_TitleOptions::getCustomLabel() const {
    return m_custom_label;
}
void OAIDateTimePickerControlDisplayOptions_TitleOptions::setCustomLabel(const QString &custom_label) {
    m_custom_label = custom_label;
    m_custom_label_isSet = true;
}

bool OAIDateTimePickerControlDisplayOptions_TitleOptions::is_custom_label_Set() const{
    return m_custom_label_isSet;
}

bool OAIDateTimePickerControlDisplayOptions_TitleOptions::is_custom_label_Valid() const{
    return m_custom_label_isValid;
}

bool OAIDateTimePickerControlDisplayOptions_TitleOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimePickerControlDisplayOptions_TitleOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
