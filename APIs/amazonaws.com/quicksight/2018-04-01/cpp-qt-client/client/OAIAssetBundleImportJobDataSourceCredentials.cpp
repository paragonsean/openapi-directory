/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobDataSourceCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobDataSourceCredentials::OAIAssetBundleImportJobDataSourceCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobDataSourceCredentials::OAIAssetBundleImportJobDataSourceCredentials() {
    this->initializeModel();
}

OAIAssetBundleImportJobDataSourceCredentials::~OAIAssetBundleImportJobDataSourceCredentials() {}

void OAIAssetBundleImportJobDataSourceCredentials::initializeModel() {

    m_credential_pair_isSet = false;
    m_credential_pair_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;
}

void OAIAssetBundleImportJobDataSourceCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportJobDataSourceCredentials::fromJsonObject(QJsonObject json) {

    m_credential_pair_isValid = ::OpenAPI::fromJsonValue(m_credential_pair, json[QString("CredentialPair")]);
    m_credential_pair_isSet = !json[QString("CredentialPair")].isNull() && m_credential_pair_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;
}

QString OAIAssetBundleImportJobDataSourceCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportJobDataSourceCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_credential_pair.isSet()) {
        obj.insert(QString("CredentialPair"), ::OpenAPI::toJsonValue(m_credential_pair));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    return obj;
}

OAIAssetBundleImportJobDataSourceCredentials_CredentialPair OAIAssetBundleImportJobDataSourceCredentials::getCredentialPair() const {
    return m_credential_pair;
}
void OAIAssetBundleImportJobDataSourceCredentials::setCredentialPair(const OAIAssetBundleImportJobDataSourceCredentials_CredentialPair &credential_pair) {
    m_credential_pair = credential_pair;
    m_credential_pair_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceCredentials::is_credential_pair_Set() const{
    return m_credential_pair_isSet;
}

bool OAIAssetBundleImportJobDataSourceCredentials::is_credential_pair_Valid() const{
    return m_credential_pair_isValid;
}

QString OAIAssetBundleImportJobDataSourceCredentials::getSecretArn() const {
    return m_secret_arn;
}
void OAIAssetBundleImportJobDataSourceCredentials::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIAssetBundleImportJobDataSourceCredentials::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIAssetBundleImportJobDataSourceCredentials::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIAssetBundleImportJobDataSourceCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credential_pair.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportJobDataSourceCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
