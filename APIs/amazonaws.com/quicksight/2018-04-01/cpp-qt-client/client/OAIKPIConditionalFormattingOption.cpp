/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKPIConditionalFormattingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKPIConditionalFormattingOption::OAIKPIConditionalFormattingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKPIConditionalFormattingOption::OAIKPIConditionalFormattingOption() {
    this->initializeModel();
}

OAIKPIConditionalFormattingOption::~OAIKPIConditionalFormattingOption() {}

void OAIKPIConditionalFormattingOption::initializeModel() {

    m_primary_value_isSet = false;
    m_primary_value_isValid = false;

    m_progress_bar_isSet = false;
    m_progress_bar_isValid = false;
}

void OAIKPIConditionalFormattingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKPIConditionalFormattingOption::fromJsonObject(QJsonObject json) {

    m_primary_value_isValid = ::OpenAPI::fromJsonValue(m_primary_value, json[QString("PrimaryValue")]);
    m_primary_value_isSet = !json[QString("PrimaryValue")].isNull() && m_primary_value_isValid;

    m_progress_bar_isValid = ::OpenAPI::fromJsonValue(m_progress_bar, json[QString("ProgressBar")]);
    m_progress_bar_isSet = !json[QString("ProgressBar")].isNull() && m_progress_bar_isValid;
}

QString OAIKPIConditionalFormattingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKPIConditionalFormattingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_value.isSet()) {
        obj.insert(QString("PrimaryValue"), ::OpenAPI::toJsonValue(m_primary_value));
    }
    if (m_progress_bar.isSet()) {
        obj.insert(QString("ProgressBar"), ::OpenAPI::toJsonValue(m_progress_bar));
    }
    return obj;
}

OAIKPIConditionalFormattingOption_PrimaryValue OAIKPIConditionalFormattingOption::getPrimaryValue() const {
    return m_primary_value;
}
void OAIKPIConditionalFormattingOption::setPrimaryValue(const OAIKPIConditionalFormattingOption_PrimaryValue &primary_value) {
    m_primary_value = primary_value;
    m_primary_value_isSet = true;
}

bool OAIKPIConditionalFormattingOption::is_primary_value_Set() const{
    return m_primary_value_isSet;
}

bool OAIKPIConditionalFormattingOption::is_primary_value_Valid() const{
    return m_primary_value_isValid;
}

OAIKPIConditionalFormattingOption_ProgressBar OAIKPIConditionalFormattingOption::getProgressBar() const {
    return m_progress_bar;
}
void OAIKPIConditionalFormattingOption::setProgressBar(const OAIKPIConditionalFormattingOption_ProgressBar &progress_bar) {
    m_progress_bar = progress_bar;
    m_progress_bar_isSet = true;
}

bool OAIKPIConditionalFormattingOption::is_progress_bar_Set() const{
    return m_progress_bar_isSet;
}

bool OAIKPIConditionalFormattingOption::is_progress_bar_Valid() const{
    return m_progress_bar_isValid;
}

bool OAIKPIConditionalFormattingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_bar.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKPIConditionalFormattingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
