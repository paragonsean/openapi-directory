/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAnalysisDefinitionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAnalysisDefinitionResponse::OAIDescribeAnalysisDefinitionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAnalysisDefinitionResponse::OAIDescribeAnalysisDefinitionResponse() {
    this->initializeModel();
}

OAIDescribeAnalysisDefinitionResponse::~OAIDescribeAnalysisDefinitionResponse() {}

void OAIDescribeAnalysisDefinitionResponse::initializeModel() {

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_resource_status_isSet = false;
    m_resource_status_isValid = false;

    m_theme_arn_isSet = false;
    m_theme_arn_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDescribeAnalysisDefinitionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAnalysisDefinitionResponse::fromJsonObject(QJsonObject json) {

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_resource_status_isValid = ::OpenAPI::fromJsonValue(m_resource_status, json[QString("ResourceStatus")]);
    m_resource_status_isSet = !json[QString("ResourceStatus")].isNull() && m_resource_status_isValid;

    m_theme_arn_isValid = ::OpenAPI::fromJsonValue(m_theme_arn, json[QString("ThemeArn")]);
    m_theme_arn_isSet = !json[QString("ThemeArn")].isNull() && m_theme_arn_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIDescribeAnalysisDefinitionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAnalysisDefinitionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_resource_status.isSet()) {
        obj.insert(QString("ResourceStatus"), ::OpenAPI::toJsonValue(m_resource_status));
    }
    if (m_theme_arn_isSet) {
        obj.insert(QString("ThemeArn"), ::OpenAPI::toJsonValue(m_theme_arn));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIDescribeAnalysisDefinitionResponse::getAnalysisId() const {
    return m_analysis_id;
}
void OAIDescribeAnalysisDefinitionResponse::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIDescribeAnalysisDefinitionResponse::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIDescribeAnalysisDefinitionResponse::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

QString OAIDescribeAnalysisDefinitionResponse::getName() const {
    return m_name;
}
void OAIDescribeAnalysisDefinitionResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeAnalysisDefinitionResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeAnalysisDefinitionResponse::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIDescribeAnalysisDefinitionResponse::getErrors() const {
    return m_errors;
}
void OAIDescribeAnalysisDefinitionResponse::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIDescribeAnalysisDefinitionResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIDescribeAnalysisDefinitionResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

OAIResourceStatus OAIDescribeAnalysisDefinitionResponse::getResourceStatus() const {
    return m_resource_status;
}
void OAIDescribeAnalysisDefinitionResponse::setResourceStatus(const OAIResourceStatus &resource_status) {
    m_resource_status = resource_status;
    m_resource_status_isSet = true;
}

bool OAIDescribeAnalysisDefinitionResponse::is_resource_status_Set() const{
    return m_resource_status_isSet;
}

bool OAIDescribeAnalysisDefinitionResponse::is_resource_status_Valid() const{
    return m_resource_status_isValid;
}

QString OAIDescribeAnalysisDefinitionResponse::getThemeArn() const {
    return m_theme_arn;
}
void OAIDescribeAnalysisDefinitionResponse::setThemeArn(const QString &theme_arn) {
    m_theme_arn = theme_arn;
    m_theme_arn_isSet = true;
}

bool OAIDescribeAnalysisDefinitionResponse::is_theme_arn_Set() const{
    return m_theme_arn_isSet;
}

bool OAIDescribeAnalysisDefinitionResponse::is_theme_arn_Valid() const{
    return m_theme_arn_isValid;
}

OAIDescribeAnalysisDefinitionResponse_Definition OAIDescribeAnalysisDefinitionResponse::getDefinition() const {
    return m_definition;
}
void OAIDescribeAnalysisDefinitionResponse::setDefinition(const OAIDescribeAnalysisDefinitionResponse_Definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIDescribeAnalysisDefinitionResponse::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIDescribeAnalysisDefinitionResponse::is_definition_Valid() const{
    return m_definition_isValid;
}

qint32 OAIDescribeAnalysisDefinitionResponse::getStatus() const {
    return m_status;
}
void OAIDescribeAnalysisDefinitionResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAnalysisDefinitionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAnalysisDefinitionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeAnalysisDefinitionResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeAnalysisDefinitionResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeAnalysisDefinitionResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeAnalysisDefinitionResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDescribeAnalysisDefinitionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAnalysisDefinitionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
