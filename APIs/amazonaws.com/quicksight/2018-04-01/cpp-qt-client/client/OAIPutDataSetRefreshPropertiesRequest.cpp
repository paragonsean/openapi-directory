/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutDataSetRefreshPropertiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutDataSetRefreshPropertiesRequest::OAIPutDataSetRefreshPropertiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutDataSetRefreshPropertiesRequest::OAIPutDataSetRefreshPropertiesRequest() {
    this->initializeModel();
}

OAIPutDataSetRefreshPropertiesRequest::~OAIPutDataSetRefreshPropertiesRequest() {}

void OAIPutDataSetRefreshPropertiesRequest::initializeModel() {

    m_data_set_refresh_properties_isSet = false;
    m_data_set_refresh_properties_isValid = false;
}

void OAIPutDataSetRefreshPropertiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutDataSetRefreshPropertiesRequest::fromJsonObject(QJsonObject json) {

    m_data_set_refresh_properties_isValid = ::OpenAPI::fromJsonValue(m_data_set_refresh_properties, json[QString("DataSetRefreshProperties")]);
    m_data_set_refresh_properties_isSet = !json[QString("DataSetRefreshProperties")].isNull() && m_data_set_refresh_properties_isValid;
}

QString OAIPutDataSetRefreshPropertiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutDataSetRefreshPropertiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_refresh_properties.isSet()) {
        obj.insert(QString("DataSetRefreshProperties"), ::OpenAPI::toJsonValue(m_data_set_refresh_properties));
    }
    return obj;
}

OAIDescribeDataSetRefreshPropertiesResponse_DataSetRefreshProperties OAIPutDataSetRefreshPropertiesRequest::getDataSetRefreshProperties() const {
    return m_data_set_refresh_properties;
}
void OAIPutDataSetRefreshPropertiesRequest::setDataSetRefreshProperties(const OAIDescribeDataSetRefreshPropertiesResponse_DataSetRefreshProperties &data_set_refresh_properties) {
    m_data_set_refresh_properties = data_set_refresh_properties;
    m_data_set_refresh_properties_isSet = true;
}

bool OAIPutDataSetRefreshPropertiesRequest::is_data_set_refresh_properties_Set() const{
    return m_data_set_refresh_properties_isSet;
}

bool OAIPutDataSetRefreshPropertiesRequest::is_data_set_refresh_properties_Valid() const{
    return m_data_set_refresh_properties_isValid;
}

bool OAIPutDataSetRefreshPropertiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_refresh_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutDataSetRefreshPropertiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_refresh_properties_isValid && true;
}

} // namespace OpenAPI
