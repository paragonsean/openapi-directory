/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVPCConnection_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVPCConnection_request::OAICreateVPCConnection_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVPCConnection_request::OAICreateVPCConnection_request() {
    this->initializeModel();
}

OAICreateVPCConnection_request::~OAICreateVPCConnection_request() {}

void OAICreateVPCConnection_request::initializeModel() {

    m_vpc_connection_id_isSet = false;
    m_vpc_connection_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_dns_resolvers_isSet = false;
    m_dns_resolvers_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateVPCConnection_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVPCConnection_request::fromJsonObject(QJsonObject json) {

    m_vpc_connection_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_id, json[QString("VPCConnectionId")]);
    m_vpc_connection_id_isSet = !json[QString("VPCConnectionId")].isNull() && m_vpc_connection_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_dns_resolvers_isValid = ::OpenAPI::fromJsonValue(m_dns_resolvers, json[QString("DnsResolvers")]);
    m_dns_resolvers_isSet = !json[QString("DnsResolvers")].isNull() && m_dns_resolvers_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateVPCConnection_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVPCConnection_request::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_connection_id_isSet) {
        obj.insert(QString("VPCConnectionId"), ::OpenAPI::toJsonValue(m_vpc_connection_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subnet_ids.size() > 0) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_security_group_ids.size() > 0) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_dns_resolvers.size() > 0) {
        obj.insert(QString("DnsResolvers"), ::OpenAPI::toJsonValue(m_dns_resolvers));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateVPCConnection_request::getVpcConnectionId() const {
    return m_vpc_connection_id;
}
void OAICreateVPCConnection_request::setVpcConnectionId(const QString &vpc_connection_id) {
    m_vpc_connection_id = vpc_connection_id;
    m_vpc_connection_id_isSet = true;
}

bool OAICreateVPCConnection_request::is_vpc_connection_id_Set() const{
    return m_vpc_connection_id_isSet;
}

bool OAICreateVPCConnection_request::is_vpc_connection_id_Valid() const{
    return m_vpc_connection_id_isValid;
}

QString OAICreateVPCConnection_request::getName() const {
    return m_name;
}
void OAICreateVPCConnection_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateVPCConnection_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateVPCConnection_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICreateVPCConnection_request::getSubnetIds() const {
    return m_subnet_ids;
}
void OAICreateVPCConnection_request::setSubnetIds(const QList<QString> &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAICreateVPCConnection_request::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAICreateVPCConnection_request::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList<QString> OAICreateVPCConnection_request::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAICreateVPCConnection_request::setSecurityGroupIds(const QList<QString> &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAICreateVPCConnection_request::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAICreateVPCConnection_request::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QList<QString> OAICreateVPCConnection_request::getDnsResolvers() const {
    return m_dns_resolvers;
}
void OAICreateVPCConnection_request::setDnsResolvers(const QList<QString> &dns_resolvers) {
    m_dns_resolvers = dns_resolvers;
    m_dns_resolvers_isSet = true;
}

bool OAICreateVPCConnection_request::is_dns_resolvers_Set() const{
    return m_dns_resolvers_isSet;
}

bool OAICreateVPCConnection_request::is_dns_resolvers_Valid() const{
    return m_dns_resolvers_isValid;
}

QString OAICreateVPCConnection_request::getRoleArn() const {
    return m_role_arn;
}
void OAICreateVPCConnection_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateVPCConnection_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateVPCConnection_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList<OAITag> OAICreateVPCConnection_request::getTags() const {
    return m_tags;
}
void OAICreateVPCConnection_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVPCConnection_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVPCConnection_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateVPCConnection_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_resolvers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVPCConnection_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vpc_connection_id_isValid && m_name_isValid && m_subnet_ids_isValid && m_security_group_ids_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
