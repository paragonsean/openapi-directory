/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScatterPlotVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScatterPlotVisual_ChartConfiguration::OAIScatterPlotVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScatterPlotVisual_ChartConfiguration::OAIScatterPlotVisual_ChartConfiguration() {
    this->initializeModel();
}

OAIScatterPlotVisual_ChartConfiguration::~OAIScatterPlotVisual_ChartConfiguration() {}

void OAIScatterPlotVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_x_axis_label_options_isSet = false;
    m_x_axis_label_options_isValid = false;

    m_x_axis_display_options_isSet = false;
    m_x_axis_display_options_isValid = false;

    m_y_axis_label_options_isSet = false;
    m_y_axis_label_options_isValid = false;

    m_y_axis_display_options_isSet = false;
    m_y_axis_display_options_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAIScatterPlotVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScatterPlotVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_x_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_x_axis_label_options, json[QString("XAxisLabelOptions")]);
    m_x_axis_label_options_isSet = !json[QString("XAxisLabelOptions")].isNull() && m_x_axis_label_options_isValid;

    m_x_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_x_axis_display_options, json[QString("XAxisDisplayOptions")]);
    m_x_axis_display_options_isSet = !json[QString("XAxisDisplayOptions")].isNull() && m_x_axis_display_options_isValid;

    m_y_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_y_axis_label_options, json[QString("YAxisLabelOptions")]);
    m_y_axis_label_options_isSet = !json[QString("YAxisLabelOptions")].isNull() && m_y_axis_label_options_isValid;

    m_y_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_y_axis_display_options, json[QString("YAxisDisplayOptions")]);
    m_y_axis_display_options_isSet = !json[QString("YAxisDisplayOptions")].isNull() && m_y_axis_display_options_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAIScatterPlotVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScatterPlotVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_x_axis_label_options.isSet()) {
        obj.insert(QString("XAxisLabelOptions"), ::OpenAPI::toJsonValue(m_x_axis_label_options));
    }
    if (m_x_axis_display_options.isSet()) {
        obj.insert(QString("XAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_x_axis_display_options));
    }
    if (m_y_axis_label_options.isSet()) {
        obj.insert(QString("YAxisLabelOptions"), ::OpenAPI::toJsonValue(m_y_axis_label_options));
    }
    if (m_y_axis_display_options.isSet()) {
        obj.insert(QString("YAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_y_axis_display_options));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAIScatterPlotConfiguration_FieldWells OAIScatterPlotVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIScatterPlotVisual_ChartConfiguration::setFieldWells(const OAIScatterPlotConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIScatterPlotConfiguration_XAxisLabelOptions OAIScatterPlotVisual_ChartConfiguration::getXAxisLabelOptions() const {
    return m_x_axis_label_options;
}
void OAIScatterPlotVisual_ChartConfiguration::setXAxisLabelOptions(const OAIScatterPlotConfiguration_XAxisLabelOptions &x_axis_label_options) {
    m_x_axis_label_options = x_axis_label_options;
    m_x_axis_label_options_isSet = true;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_x_axis_label_options_Set() const{
    return m_x_axis_label_options_isSet;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_x_axis_label_options_Valid() const{
    return m_x_axis_label_options_isValid;
}

OAIScatterPlotConfiguration_XAxisDisplayOptions OAIScatterPlotVisual_ChartConfiguration::getXAxisDisplayOptions() const {
    return m_x_axis_display_options;
}
void OAIScatterPlotVisual_ChartConfiguration::setXAxisDisplayOptions(const OAIScatterPlotConfiguration_XAxisDisplayOptions &x_axis_display_options) {
    m_x_axis_display_options = x_axis_display_options;
    m_x_axis_display_options_isSet = true;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_x_axis_display_options_Set() const{
    return m_x_axis_display_options_isSet;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_x_axis_display_options_Valid() const{
    return m_x_axis_display_options_isValid;
}

OAIScatterPlotConfiguration_YAxisLabelOptions OAIScatterPlotVisual_ChartConfiguration::getYAxisLabelOptions() const {
    return m_y_axis_label_options;
}
void OAIScatterPlotVisual_ChartConfiguration::setYAxisLabelOptions(const OAIScatterPlotConfiguration_YAxisLabelOptions &y_axis_label_options) {
    m_y_axis_label_options = y_axis_label_options;
    m_y_axis_label_options_isSet = true;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_y_axis_label_options_Set() const{
    return m_y_axis_label_options_isSet;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_y_axis_label_options_Valid() const{
    return m_y_axis_label_options_isValid;
}

OAIScatterPlotConfiguration_YAxisDisplayOptions OAIScatterPlotVisual_ChartConfiguration::getYAxisDisplayOptions() const {
    return m_y_axis_display_options;
}
void OAIScatterPlotVisual_ChartConfiguration::setYAxisDisplayOptions(const OAIScatterPlotConfiguration_YAxisDisplayOptions &y_axis_display_options) {
    m_y_axis_display_options = y_axis_display_options;
    m_y_axis_display_options_isSet = true;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_y_axis_display_options_Set() const{
    return m_y_axis_display_options_isSet;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_y_axis_display_options_Valid() const{
    return m_y_axis_display_options_isValid;
}

OAIBarChartConfiguration_Legend OAIScatterPlotVisual_ChartConfiguration::getLegend() const {
    return m_legend;
}
void OAIScatterPlotVisual_ChartConfiguration::setLegend(const OAIBarChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIBarChartConfiguration_DataLabels OAIScatterPlotVisual_ChartConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAIScatterPlotVisual_ChartConfiguration::setDataLabels(const OAIBarChartConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

OAIComboChartConfiguration_Tooltip OAIScatterPlotVisual_ChartConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIScatterPlotVisual_ChartConfiguration::setTooltip(const OAIComboChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

OAIBarChartConfiguration_VisualPalette OAIScatterPlotVisual_ChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIScatterPlotVisual_ChartConfiguration::setVisualPalette(const OAIBarChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIScatterPlotVisual_ChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAIScatterPlotVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScatterPlotVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
