/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLine::OAIReferenceLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLine::OAIReferenceLine() {
    this->initializeModel();
}

OAIReferenceLine::~OAIReferenceLine() {}

void OAIReferenceLine::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_data_configuration_isSet = false;
    m_data_configuration_isValid = false;

    m_style_configuration_isSet = false;
    m_style_configuration_isValid = false;

    m_label_configuration_isSet = false;
    m_label_configuration_isValid = false;
}

void OAIReferenceLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLine::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_data_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_configuration, json[QString("DataConfiguration")]);
    m_data_configuration_isSet = !json[QString("DataConfiguration")].isNull() && m_data_configuration_isValid;

    m_style_configuration_isValid = ::OpenAPI::fromJsonValue(m_style_configuration, json[QString("StyleConfiguration")]);
    m_style_configuration_isSet = !json[QString("StyleConfiguration")].isNull() && m_style_configuration_isValid;

    m_label_configuration_isValid = ::OpenAPI::fromJsonValue(m_label_configuration, json[QString("LabelConfiguration")]);
    m_label_configuration_isSet = !json[QString("LabelConfiguration")].isNull() && m_label_configuration_isValid;
}

QString OAIReferenceLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLine::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_data_configuration.isSet()) {
        obj.insert(QString("DataConfiguration"), ::OpenAPI::toJsonValue(m_data_configuration));
    }
    if (m_style_configuration.isSet()) {
        obj.insert(QString("StyleConfiguration"), ::OpenAPI::toJsonValue(m_style_configuration));
    }
    if (m_label_configuration.isSet()) {
        obj.insert(QString("LabelConfiguration"), ::OpenAPI::toJsonValue(m_label_configuration));
    }
    return obj;
}

OAIWidgetStatus OAIReferenceLine::getStatus() const {
    return m_status;
}
void OAIReferenceLine::setStatus(const OAIWidgetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReferenceLine::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReferenceLine::is_status_Valid() const{
    return m_status_isValid;
}

OAIReferenceLine_DataConfiguration OAIReferenceLine::getDataConfiguration() const {
    return m_data_configuration;
}
void OAIReferenceLine::setDataConfiguration(const OAIReferenceLine_DataConfiguration &data_configuration) {
    m_data_configuration = data_configuration;
    m_data_configuration_isSet = true;
}

bool OAIReferenceLine::is_data_configuration_Set() const{
    return m_data_configuration_isSet;
}

bool OAIReferenceLine::is_data_configuration_Valid() const{
    return m_data_configuration_isValid;
}

OAIReferenceLine_StyleConfiguration OAIReferenceLine::getStyleConfiguration() const {
    return m_style_configuration;
}
void OAIReferenceLine::setStyleConfiguration(const OAIReferenceLine_StyleConfiguration &style_configuration) {
    m_style_configuration = style_configuration;
    m_style_configuration_isSet = true;
}

bool OAIReferenceLine::is_style_configuration_Set() const{
    return m_style_configuration_isSet;
}

bool OAIReferenceLine::is_style_configuration_Valid() const{
    return m_style_configuration_isValid;
}

OAIReferenceLine_LabelConfiguration OAIReferenceLine::getLabelConfiguration() const {
    return m_label_configuration;
}
void OAIReferenceLine::setLabelConfiguration(const OAIReferenceLine_LabelConfiguration &label_configuration) {
    m_label_configuration = label_configuration;
    m_label_configuration_isSet = true;
}

bool OAIReferenceLine::is_label_configuration_Set() const{
    return m_label_configuration_isSet;
}

bool OAIReferenceLine::is_label_configuration_Valid() const{
    return m_label_configuration_isValid;
}

bool OAIReferenceLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_configuration_isValid && true;
}

} // namespace OpenAPI
