/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITileLayoutStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITileLayoutStyle::OAITileLayoutStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITileLayoutStyle::OAITileLayoutStyle() {
    this->initializeModel();
}

OAITileLayoutStyle::~OAITileLayoutStyle() {}

void OAITileLayoutStyle::initializeModel() {

    m_gutter_isSet = false;
    m_gutter_isValid = false;

    m_margin_isSet = false;
    m_margin_isValid = false;
}

void OAITileLayoutStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITileLayoutStyle::fromJsonObject(QJsonObject json) {

    m_gutter_isValid = ::OpenAPI::fromJsonValue(m_gutter, json[QString("Gutter")]);
    m_gutter_isSet = !json[QString("Gutter")].isNull() && m_gutter_isValid;

    m_margin_isValid = ::OpenAPI::fromJsonValue(m_margin, json[QString("Margin")]);
    m_margin_isSet = !json[QString("Margin")].isNull() && m_margin_isValid;
}

QString OAITileLayoutStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITileLayoutStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_gutter.isSet()) {
        obj.insert(QString("Gutter"), ::OpenAPI::toJsonValue(m_gutter));
    }
    if (m_margin.isSet()) {
        obj.insert(QString("Margin"), ::OpenAPI::toJsonValue(m_margin));
    }
    return obj;
}

OAITileLayoutStyle_Gutter OAITileLayoutStyle::getGutter() const {
    return m_gutter;
}
void OAITileLayoutStyle::setGutter(const OAITileLayoutStyle_Gutter &gutter) {
    m_gutter = gutter;
    m_gutter_isSet = true;
}

bool OAITileLayoutStyle::is_gutter_Set() const{
    return m_gutter_isSet;
}

bool OAITileLayoutStyle::is_gutter_Valid() const{
    return m_gutter_isValid;
}

OAITileLayoutStyle_Margin OAITileLayoutStyle::getMargin() const {
    return m_margin;
}
void OAITileLayoutStyle::setMargin(const OAITileLayoutStyle_Margin &margin) {
    m_margin = margin;
    m_margin_isSet = true;
}

bool OAITileLayoutStyle::is_margin_Set() const{
    return m_margin_isSet;
}

bool OAITileLayoutStyle::is_margin_Valid() const{
    return m_margin_isValid;
}

bool OAITileLayoutStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gutter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITileLayoutStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
