/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericalMeasureField_AggregationFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericalMeasureField_AggregationFunction::OAINumericalMeasureField_AggregationFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericalMeasureField_AggregationFunction::OAINumericalMeasureField_AggregationFunction() {
    this->initializeModel();
}

OAINumericalMeasureField_AggregationFunction::~OAINumericalMeasureField_AggregationFunction() {}

void OAINumericalMeasureField_AggregationFunction::initializeModel() {

    m_simple_numerical_aggregation_isSet = false;
    m_simple_numerical_aggregation_isValid = false;

    m_percentile_aggregation_isSet = false;
    m_percentile_aggregation_isValid = false;
}

void OAINumericalMeasureField_AggregationFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericalMeasureField_AggregationFunction::fromJsonObject(QJsonObject json) {

    m_simple_numerical_aggregation_isValid = ::OpenAPI::fromJsonValue(m_simple_numerical_aggregation, json[QString("SimpleNumericalAggregation")]);
    m_simple_numerical_aggregation_isSet = !json[QString("SimpleNumericalAggregation")].isNull() && m_simple_numerical_aggregation_isValid;

    m_percentile_aggregation_isValid = ::OpenAPI::fromJsonValue(m_percentile_aggregation, json[QString("PercentileAggregation")]);
    m_percentile_aggregation_isSet = !json[QString("PercentileAggregation")].isNull() && m_percentile_aggregation_isValid;
}

QString OAINumericalMeasureField_AggregationFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericalMeasureField_AggregationFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_simple_numerical_aggregation.isSet()) {
        obj.insert(QString("SimpleNumericalAggregation"), ::OpenAPI::toJsonValue(m_simple_numerical_aggregation));
    }
    if (m_percentile_aggregation.isSet()) {
        obj.insert(QString("PercentileAggregation"), ::OpenAPI::toJsonValue(m_percentile_aggregation));
    }
    return obj;
}

OAISimpleNumericalAggregationFunction OAINumericalMeasureField_AggregationFunction::getSimpleNumericalAggregation() const {
    return m_simple_numerical_aggregation;
}
void OAINumericalMeasureField_AggregationFunction::setSimpleNumericalAggregation(const OAISimpleNumericalAggregationFunction &simple_numerical_aggregation) {
    m_simple_numerical_aggregation = simple_numerical_aggregation;
    m_simple_numerical_aggregation_isSet = true;
}

bool OAINumericalMeasureField_AggregationFunction::is_simple_numerical_aggregation_Set() const{
    return m_simple_numerical_aggregation_isSet;
}

bool OAINumericalMeasureField_AggregationFunction::is_simple_numerical_aggregation_Valid() const{
    return m_simple_numerical_aggregation_isValid;
}

OAINumericalAggregationFunction_PercentileAggregation OAINumericalMeasureField_AggregationFunction::getPercentileAggregation() const {
    return m_percentile_aggregation;
}
void OAINumericalMeasureField_AggregationFunction::setPercentileAggregation(const OAINumericalAggregationFunction_PercentileAggregation &percentile_aggregation) {
    m_percentile_aggregation = percentile_aggregation;
    m_percentile_aggregation_isSet = true;
}

bool OAINumericalMeasureField_AggregationFunction::is_percentile_aggregation_Set() const{
    return m_percentile_aggregation_isSet;
}

bool OAINumericalMeasureField_AggregationFunction::is_percentile_aggregation_Valid() const{
    return m_percentile_aggregation_isValid;
}

bool OAINumericalMeasureField_AggregationFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_simple_numerical_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentile_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericalMeasureField_AggregationFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
