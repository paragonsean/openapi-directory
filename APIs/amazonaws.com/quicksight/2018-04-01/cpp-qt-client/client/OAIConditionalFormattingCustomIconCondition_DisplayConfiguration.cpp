/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingCustomIconCondition_DisplayConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::OAIConditionalFormattingCustomIconCondition_DisplayConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::OAIConditionalFormattingCustomIconCondition_DisplayConfiguration() {
    this->initializeModel();
}

OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::~OAIConditionalFormattingCustomIconCondition_DisplayConfiguration() {}

void OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::initializeModel() {

    m_icon_display_option_isSet = false;
    m_icon_display_option_isValid = false;
}

void OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::fromJsonObject(QJsonObject json) {

    m_icon_display_option_isValid = ::OpenAPI::fromJsonValue(m_icon_display_option, json[QString("IconDisplayOption")]);
    m_icon_display_option_isSet = !json[QString("IconDisplayOption")].isNull() && m_icon_display_option_isValid;
}

QString OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_icon_display_option.isSet()) {
        obj.insert(QString("IconDisplayOption"), ::OpenAPI::toJsonValue(m_icon_display_option));
    }
    return obj;
}

OAIConditionalFormattingIconDisplayOption OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::getIconDisplayOption() const {
    return m_icon_display_option;
}
void OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::setIconDisplayOption(const OAIConditionalFormattingIconDisplayOption &icon_display_option) {
    m_icon_display_option = icon_display_option;
    m_icon_display_option_isSet = true;
}

bool OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::is_icon_display_option_Set() const{
    return m_icon_display_option_isSet;
}

bool OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::is_icon_display_option_Valid() const{
    return m_icon_display_option_isValid;
}

bool OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon_display_option.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalFormattingCustomIconCondition_DisplayConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
