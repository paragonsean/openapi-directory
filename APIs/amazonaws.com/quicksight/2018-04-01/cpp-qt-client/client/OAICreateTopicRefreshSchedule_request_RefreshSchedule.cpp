/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTopicRefreshSchedule_request_RefreshSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTopicRefreshSchedule_request_RefreshSchedule::OAICreateTopicRefreshSchedule_request_RefreshSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTopicRefreshSchedule_request_RefreshSchedule::OAICreateTopicRefreshSchedule_request_RefreshSchedule() {
    this->initializeModel();
}

OAICreateTopicRefreshSchedule_request_RefreshSchedule::~OAICreateTopicRefreshSchedule_request_RefreshSchedule() {}

void OAICreateTopicRefreshSchedule_request_RefreshSchedule::initializeModel() {

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_based_on_spice_schedule_isSet = false;
    m_based_on_spice_schedule_isValid = false;

    m_starting_at_isSet = false;
    m_starting_at_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_repeat_at_isSet = false;
    m_repeat_at_isValid = false;

    m_topic_schedule_type_isSet = false;
    m_topic_schedule_type_isValid = false;
}

void OAICreateTopicRefreshSchedule_request_RefreshSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTopicRefreshSchedule_request_RefreshSchedule::fromJsonObject(QJsonObject json) {

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("IsEnabled")]);
    m_is_enabled_isSet = !json[QString("IsEnabled")].isNull() && m_is_enabled_isValid;

    m_based_on_spice_schedule_isValid = ::OpenAPI::fromJsonValue(m_based_on_spice_schedule, json[QString("BasedOnSpiceSchedule")]);
    m_based_on_spice_schedule_isSet = !json[QString("BasedOnSpiceSchedule")].isNull() && m_based_on_spice_schedule_isValid;

    m_starting_at_isValid = ::OpenAPI::fromJsonValue(m_starting_at, json[QString("StartingAt")]);
    m_starting_at_isSet = !json[QString("StartingAt")].isNull() && m_starting_at_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;

    m_repeat_at_isValid = ::OpenAPI::fromJsonValue(m_repeat_at, json[QString("RepeatAt")]);
    m_repeat_at_isSet = !json[QString("RepeatAt")].isNull() && m_repeat_at_isValid;

    m_topic_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_topic_schedule_type, json[QString("TopicScheduleType")]);
    m_topic_schedule_type_isSet = !json[QString("TopicScheduleType")].isNull() && m_topic_schedule_type_isValid;
}

QString OAICreateTopicRefreshSchedule_request_RefreshSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTopicRefreshSchedule_request_RefreshSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_is_enabled_isSet) {
        obj.insert(QString("IsEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_based_on_spice_schedule_isSet) {
        obj.insert(QString("BasedOnSpiceSchedule"), ::OpenAPI::toJsonValue(m_based_on_spice_schedule));
    }
    if (m_starting_at_isSet) {
        obj.insert(QString("StartingAt"), ::OpenAPI::toJsonValue(m_starting_at));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_repeat_at_isSet) {
        obj.insert(QString("RepeatAt"), ::OpenAPI::toJsonValue(m_repeat_at));
    }
    if (m_topic_schedule_type.isSet()) {
        obj.insert(QString("TopicScheduleType"), ::OpenAPI::toJsonValue(m_topic_schedule_type));
    }
    return obj;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::getIsEnabled() const {
    return m_is_enabled;
}
void OAICreateTopicRefreshSchedule_request_RefreshSchedule::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::getBasedOnSpiceSchedule() const {
    return m_based_on_spice_schedule;
}
void OAICreateTopicRefreshSchedule_request_RefreshSchedule::setBasedOnSpiceSchedule(const bool &based_on_spice_schedule) {
    m_based_on_spice_schedule = based_on_spice_schedule;
    m_based_on_spice_schedule_isSet = true;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_based_on_spice_schedule_Set() const{
    return m_based_on_spice_schedule_isSet;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_based_on_spice_schedule_Valid() const{
    return m_based_on_spice_schedule_isValid;
}

QDateTime OAICreateTopicRefreshSchedule_request_RefreshSchedule::getStartingAt() const {
    return m_starting_at;
}
void OAICreateTopicRefreshSchedule_request_RefreshSchedule::setStartingAt(const QDateTime &starting_at) {
    m_starting_at = starting_at;
    m_starting_at_isSet = true;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_starting_at_Set() const{
    return m_starting_at_isSet;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_starting_at_Valid() const{
    return m_starting_at_isValid;
}

QString OAICreateTopicRefreshSchedule_request_RefreshSchedule::getTimezone() const {
    return m_timezone;
}
void OAICreateTopicRefreshSchedule_request_RefreshSchedule::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAICreateTopicRefreshSchedule_request_RefreshSchedule::getRepeatAt() const {
    return m_repeat_at;
}
void OAICreateTopicRefreshSchedule_request_RefreshSchedule::setRepeatAt(const QString &repeat_at) {
    m_repeat_at = repeat_at;
    m_repeat_at_isSet = true;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_repeat_at_Set() const{
    return m_repeat_at_isSet;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_repeat_at_Valid() const{
    return m_repeat_at_isValid;
}

OAITopicScheduleType OAICreateTopicRefreshSchedule_request_RefreshSchedule::getTopicScheduleType() const {
    return m_topic_schedule_type;
}
void OAICreateTopicRefreshSchedule_request_RefreshSchedule::setTopicScheduleType(const OAITopicScheduleType &topic_schedule_type) {
    m_topic_schedule_type = topic_schedule_type;
    m_topic_schedule_type_isSet = true;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_topic_schedule_type_Set() const{
    return m_topic_schedule_type_isSet;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::is_topic_schedule_type_Valid() const{
    return m_topic_schedule_type_isValid;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_based_on_spice_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_schedule_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTopicRefreshSchedule_request_RefreshSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
