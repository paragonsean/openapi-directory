/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastConfiguration_ForecastProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastConfiguration_ForecastProperties::OAIForecastConfiguration_ForecastProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastConfiguration_ForecastProperties::OAIForecastConfiguration_ForecastProperties() {
    this->initializeModel();
}

OAIForecastConfiguration_ForecastProperties::~OAIForecastConfiguration_ForecastProperties() {}

void OAIForecastConfiguration_ForecastProperties::initializeModel() {

    m_periods_forward_isSet = false;
    m_periods_forward_isValid = false;

    m_periods_backward_isSet = false;
    m_periods_backward_isValid = false;

    m_upper_boundary_isSet = false;
    m_upper_boundary_isValid = false;

    m_lower_boundary_isSet = false;
    m_lower_boundary_isValid = false;

    m_prediction_interval_isSet = false;
    m_prediction_interval_isValid = false;

    m_seasonality_isSet = false;
    m_seasonality_isValid = false;
}

void OAIForecastConfiguration_ForecastProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastConfiguration_ForecastProperties::fromJsonObject(QJsonObject json) {

    m_periods_forward_isValid = ::OpenAPI::fromJsonValue(m_periods_forward, json[QString("PeriodsForward")]);
    m_periods_forward_isSet = !json[QString("PeriodsForward")].isNull() && m_periods_forward_isValid;

    m_periods_backward_isValid = ::OpenAPI::fromJsonValue(m_periods_backward, json[QString("PeriodsBackward")]);
    m_periods_backward_isSet = !json[QString("PeriodsBackward")].isNull() && m_periods_backward_isValid;

    m_upper_boundary_isValid = ::OpenAPI::fromJsonValue(m_upper_boundary, json[QString("UpperBoundary")]);
    m_upper_boundary_isSet = !json[QString("UpperBoundary")].isNull() && m_upper_boundary_isValid;

    m_lower_boundary_isValid = ::OpenAPI::fromJsonValue(m_lower_boundary, json[QString("LowerBoundary")]);
    m_lower_boundary_isSet = !json[QString("LowerBoundary")].isNull() && m_lower_boundary_isValid;

    m_prediction_interval_isValid = ::OpenAPI::fromJsonValue(m_prediction_interval, json[QString("PredictionInterval")]);
    m_prediction_interval_isSet = !json[QString("PredictionInterval")].isNull() && m_prediction_interval_isValid;

    m_seasonality_isValid = ::OpenAPI::fromJsonValue(m_seasonality, json[QString("Seasonality")]);
    m_seasonality_isSet = !json[QString("Seasonality")].isNull() && m_seasonality_isValid;
}

QString OAIForecastConfiguration_ForecastProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastConfiguration_ForecastProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_periods_forward_isSet) {
        obj.insert(QString("PeriodsForward"), ::OpenAPI::toJsonValue(m_periods_forward));
    }
    if (m_periods_backward_isSet) {
        obj.insert(QString("PeriodsBackward"), ::OpenAPI::toJsonValue(m_periods_backward));
    }
    if (m_upper_boundary_isSet) {
        obj.insert(QString("UpperBoundary"), ::OpenAPI::toJsonValue(m_upper_boundary));
    }
    if (m_lower_boundary_isSet) {
        obj.insert(QString("LowerBoundary"), ::OpenAPI::toJsonValue(m_lower_boundary));
    }
    if (m_prediction_interval_isSet) {
        obj.insert(QString("PredictionInterval"), ::OpenAPI::toJsonValue(m_prediction_interval));
    }
    if (m_seasonality_isSet) {
        obj.insert(QString("Seasonality"), ::OpenAPI::toJsonValue(m_seasonality));
    }
    return obj;
}

qint32 OAIForecastConfiguration_ForecastProperties::getPeriodsForward() const {
    return m_periods_forward;
}
void OAIForecastConfiguration_ForecastProperties::setPeriodsForward(const qint32 &periods_forward) {
    m_periods_forward = periods_forward;
    m_periods_forward_isSet = true;
}

bool OAIForecastConfiguration_ForecastProperties::is_periods_forward_Set() const{
    return m_periods_forward_isSet;
}

bool OAIForecastConfiguration_ForecastProperties::is_periods_forward_Valid() const{
    return m_periods_forward_isValid;
}

qint32 OAIForecastConfiguration_ForecastProperties::getPeriodsBackward() const {
    return m_periods_backward;
}
void OAIForecastConfiguration_ForecastProperties::setPeriodsBackward(const qint32 &periods_backward) {
    m_periods_backward = periods_backward;
    m_periods_backward_isSet = true;
}

bool OAIForecastConfiguration_ForecastProperties::is_periods_backward_Set() const{
    return m_periods_backward_isSet;
}

bool OAIForecastConfiguration_ForecastProperties::is_periods_backward_Valid() const{
    return m_periods_backward_isValid;
}

double OAIForecastConfiguration_ForecastProperties::getUpperBoundary() const {
    return m_upper_boundary;
}
void OAIForecastConfiguration_ForecastProperties::setUpperBoundary(const double &upper_boundary) {
    m_upper_boundary = upper_boundary;
    m_upper_boundary_isSet = true;
}

bool OAIForecastConfiguration_ForecastProperties::is_upper_boundary_Set() const{
    return m_upper_boundary_isSet;
}

bool OAIForecastConfiguration_ForecastProperties::is_upper_boundary_Valid() const{
    return m_upper_boundary_isValid;
}

double OAIForecastConfiguration_ForecastProperties::getLowerBoundary() const {
    return m_lower_boundary;
}
void OAIForecastConfiguration_ForecastProperties::setLowerBoundary(const double &lower_boundary) {
    m_lower_boundary = lower_boundary;
    m_lower_boundary_isSet = true;
}

bool OAIForecastConfiguration_ForecastProperties::is_lower_boundary_Set() const{
    return m_lower_boundary_isSet;
}

bool OAIForecastConfiguration_ForecastProperties::is_lower_boundary_Valid() const{
    return m_lower_boundary_isValid;
}

qint32 OAIForecastConfiguration_ForecastProperties::getPredictionInterval() const {
    return m_prediction_interval;
}
void OAIForecastConfiguration_ForecastProperties::setPredictionInterval(const qint32 &prediction_interval) {
    m_prediction_interval = prediction_interval;
    m_prediction_interval_isSet = true;
}

bool OAIForecastConfiguration_ForecastProperties::is_prediction_interval_Set() const{
    return m_prediction_interval_isSet;
}

bool OAIForecastConfiguration_ForecastProperties::is_prediction_interval_Valid() const{
    return m_prediction_interval_isValid;
}

qint32 OAIForecastConfiguration_ForecastProperties::getSeasonality() const {
    return m_seasonality;
}
void OAIForecastConfiguration_ForecastProperties::setSeasonality(const qint32 &seasonality) {
    m_seasonality = seasonality;
    m_seasonality_isSet = true;
}

bool OAIForecastConfiguration_ForecastProperties::is_seasonality_Set() const{
    return m_seasonality_isSet;
}

bool OAIForecastConfiguration_ForecastProperties::is_seasonality_Valid() const{
    return m_seasonality_isValid;
}

bool OAIForecastConfiguration_ForecastProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_periods_forward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods_backward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_boundary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_boundary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonality_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastConfiguration_ForecastProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
