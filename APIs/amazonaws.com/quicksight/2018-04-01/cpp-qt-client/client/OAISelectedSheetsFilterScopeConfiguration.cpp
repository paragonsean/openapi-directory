/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelectedSheetsFilterScopeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelectedSheetsFilterScopeConfiguration::OAISelectedSheetsFilterScopeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelectedSheetsFilterScopeConfiguration::OAISelectedSheetsFilterScopeConfiguration() {
    this->initializeModel();
}

OAISelectedSheetsFilterScopeConfiguration::~OAISelectedSheetsFilterScopeConfiguration() {}

void OAISelectedSheetsFilterScopeConfiguration::initializeModel() {

    m_sheet_visual_scoping_configurations_isSet = false;
    m_sheet_visual_scoping_configurations_isValid = false;
}

void OAISelectedSheetsFilterScopeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelectedSheetsFilterScopeConfiguration::fromJsonObject(QJsonObject json) {

    m_sheet_visual_scoping_configurations_isValid = ::OpenAPI::fromJsonValue(m_sheet_visual_scoping_configurations, json[QString("SheetVisualScopingConfigurations")]);
    m_sheet_visual_scoping_configurations_isSet = !json[QString("SheetVisualScopingConfigurations")].isNull() && m_sheet_visual_scoping_configurations_isValid;
}

QString OAISelectedSheetsFilterScopeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelectedSheetsFilterScopeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_sheet_visual_scoping_configurations.isSet()) {
        obj.insert(QString("SheetVisualScopingConfigurations"), ::OpenAPI::toJsonValue(m_sheet_visual_scoping_configurations));
    }
    return obj;
}

QList OAISelectedSheetsFilterScopeConfiguration::getSheetVisualScopingConfigurations() const {
    return m_sheet_visual_scoping_configurations;
}
void OAISelectedSheetsFilterScopeConfiguration::setSheetVisualScopingConfigurations(const QList &sheet_visual_scoping_configurations) {
    m_sheet_visual_scoping_configurations = sheet_visual_scoping_configurations;
    m_sheet_visual_scoping_configurations_isSet = true;
}

bool OAISelectedSheetsFilterScopeConfiguration::is_sheet_visual_scoping_configurations_Set() const{
    return m_sheet_visual_scoping_configurations_isSet;
}

bool OAISelectedSheetsFilterScopeConfiguration::is_sheet_visual_scoping_configurations_Valid() const{
    return m_sheet_visual_scoping_configurations_isValid;
}

bool OAISelectedSheetsFilterScopeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sheet_visual_scoping_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelectedSheetsFilterScopeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
