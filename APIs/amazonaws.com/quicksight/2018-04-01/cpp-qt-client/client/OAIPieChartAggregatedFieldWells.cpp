/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPieChartAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPieChartAggregatedFieldWells::OAIPieChartAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPieChartAggregatedFieldWells::OAIPieChartAggregatedFieldWells() {
    this->initializeModel();
}

OAIPieChartAggregatedFieldWells::~OAIPieChartAggregatedFieldWells() {}

void OAIPieChartAggregatedFieldWells::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_small_multiples_isSet = false;
    m_small_multiples_isValid = false;
}

void OAIPieChartAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPieChartAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_small_multiples_isValid = ::OpenAPI::fromJsonValue(m_small_multiples, json[QString("SmallMultiples")]);
    m_small_multiples_isSet = !json[QString("SmallMultiples")].isNull() && m_small_multiples_isValid;
}

QString OAIPieChartAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPieChartAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_small_multiples.isSet()) {
        obj.insert(QString("SmallMultiples"), ::OpenAPI::toJsonValue(m_small_multiples));
    }
    return obj;
}

QList OAIPieChartAggregatedFieldWells::getCategory() const {
    return m_category;
}
void OAIPieChartAggregatedFieldWells::setCategory(const QList &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPieChartAggregatedFieldWells::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPieChartAggregatedFieldWells::is_category_Valid() const{
    return m_category_isValid;
}

QList OAIPieChartAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIPieChartAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIPieChartAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIPieChartAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

QList OAIPieChartAggregatedFieldWells::getSmallMultiples() const {
    return m_small_multiples;
}
void OAIPieChartAggregatedFieldWells::setSmallMultiples(const QList &small_multiples) {
    m_small_multiples = small_multiples;
    m_small_multiples_isSet = true;
}

bool OAIPieChartAggregatedFieldWells::is_small_multiples_Set() const{
    return m_small_multiples_isSet;
}

bool OAIPieChartAggregatedFieldWells::is_small_multiples_Valid() const{
    return m_small_multiples_isValid;
}

bool OAIPieChartAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPieChartAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
