/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccountSubscriptionResponse_SignupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccountSubscriptionResponse_SignupResponse::OAICreateAccountSubscriptionResponse_SignupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccountSubscriptionResponse_SignupResponse::OAICreateAccountSubscriptionResponse_SignupResponse() {
    this->initializeModel();
}

OAICreateAccountSubscriptionResponse_SignupResponse::~OAICreateAccountSubscriptionResponse_SignupResponse() {}

void OAICreateAccountSubscriptionResponse_SignupResponse::initializeModel() {

    m_iam_user_isSet = false;
    m_iam_user_isValid = false;

    m_user_login_name_isSet = false;
    m_user_login_name_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_directory_type_isSet = false;
    m_directory_type_isValid = false;
}

void OAICreateAccountSubscriptionResponse_SignupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccountSubscriptionResponse_SignupResponse::fromJsonObject(QJsonObject json) {

    m_iam_user_isValid = ::OpenAPI::fromJsonValue(m_iam_user, json[QString("IAMUser")]);
    m_iam_user_isSet = !json[QString("IAMUser")].isNull() && m_iam_user_isValid;

    m_user_login_name_isValid = ::OpenAPI::fromJsonValue(m_user_login_name, json[QString("userLoginName")]);
    m_user_login_name_isSet = !json[QString("userLoginName")].isNull() && m_user_login_name_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_directory_type_isValid = ::OpenAPI::fromJsonValue(m_directory_type, json[QString("directoryType")]);
    m_directory_type_isSet = !json[QString("directoryType")].isNull() && m_directory_type_isValid;
}

QString OAICreateAccountSubscriptionResponse_SignupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccountSubscriptionResponse_SignupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_iam_user_isSet) {
        obj.insert(QString("IAMUser"), ::OpenAPI::toJsonValue(m_iam_user));
    }
    if (m_user_login_name_isSet) {
        obj.insert(QString("userLoginName"), ::OpenAPI::toJsonValue(m_user_login_name));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_directory_type_isSet) {
        obj.insert(QString("directoryType"), ::OpenAPI::toJsonValue(m_directory_type));
    }
    return obj;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::getIamUser() const {
    return m_iam_user;
}
void OAICreateAccountSubscriptionResponse_SignupResponse::setIamUser(const bool &iam_user) {
    m_iam_user = iam_user;
    m_iam_user_isSet = true;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::is_iam_user_Set() const{
    return m_iam_user_isSet;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::is_iam_user_Valid() const{
    return m_iam_user_isValid;
}

QString OAICreateAccountSubscriptionResponse_SignupResponse::getUserLoginName() const {
    return m_user_login_name;
}
void OAICreateAccountSubscriptionResponse_SignupResponse::setUserLoginName(const QString &user_login_name) {
    m_user_login_name = user_login_name;
    m_user_login_name_isSet = true;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::is_user_login_name_Set() const{
    return m_user_login_name_isSet;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::is_user_login_name_Valid() const{
    return m_user_login_name_isValid;
}

QString OAICreateAccountSubscriptionResponse_SignupResponse::getAccountName() const {
    return m_account_name;
}
void OAICreateAccountSubscriptionResponse_SignupResponse::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAICreateAccountSubscriptionResponse_SignupResponse::getDirectoryType() const {
    return m_directory_type;
}
void OAICreateAccountSubscriptionResponse_SignupResponse::setDirectoryType(const QString &directory_type) {
    m_directory_type = directory_type;
    m_directory_type_isSet = true;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::is_directory_type_Set() const{
    return m_directory_type_isSet;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::is_directory_type_Valid() const{
    return m_directory_type_isValid;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iam_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_login_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccountSubscriptionResponse_SignupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
