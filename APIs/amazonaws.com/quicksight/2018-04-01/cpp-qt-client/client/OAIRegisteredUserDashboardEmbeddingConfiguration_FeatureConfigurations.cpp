/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations() {
    this->initializeModel();
}

OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::~OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations() {}

void OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::initializeModel() {

    m_state_persistence_isSet = false;
    m_state_persistence_isValid = false;

    m_bookmarks_isSet = false;
    m_bookmarks_isValid = false;
}

void OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::fromJsonObject(QJsonObject json) {

    m_state_persistence_isValid = ::OpenAPI::fromJsonValue(m_state_persistence, json[QString("StatePersistence")]);
    m_state_persistence_isSet = !json[QString("StatePersistence")].isNull() && m_state_persistence_isValid;

    m_bookmarks_isValid = ::OpenAPI::fromJsonValue(m_bookmarks, json[QString("Bookmarks")]);
    m_bookmarks_isSet = !json[QString("Bookmarks")].isNull() && m_bookmarks_isValid;
}

QString OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::asJsonObject() const {
    QJsonObject obj;
    if (m_state_persistence.isSet()) {
        obj.insert(QString("StatePersistence"), ::OpenAPI::toJsonValue(m_state_persistence));
    }
    if (m_bookmarks.isSet()) {
        obj.insert(QString("Bookmarks"), ::OpenAPI::toJsonValue(m_bookmarks));
    }
    return obj;
}

OAIRegisteredUserDashboardFeatureConfigurations_StatePersistence OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::getStatePersistence() const {
    return m_state_persistence;
}
void OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::setStatePersistence(const OAIRegisteredUserDashboardFeatureConfigurations_StatePersistence &state_persistence) {
    m_state_persistence = state_persistence;
    m_state_persistence_isSet = true;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::is_state_persistence_Set() const{
    return m_state_persistence_isSet;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::is_state_persistence_Valid() const{
    return m_state_persistence_isValid;
}

OAIRegisteredUserDashboardFeatureConfigurations_Bookmarks OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::getBookmarks() const {
    return m_bookmarks;
}
void OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::setBookmarks(const OAIRegisteredUserDashboardFeatureConfigurations_Bookmarks &bookmarks) {
    m_bookmarks = bookmarks;
    m_bookmarks_isSet = true;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::is_bookmarks_Set() const{
    return m_bookmarks_isSet;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::is_bookmarks_Valid() const{
    return m_bookmarks_isValid;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_persistence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmarks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
