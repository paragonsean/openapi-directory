/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSource_request_Credentials_CredentialPair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSource_request_Credentials_CredentialPair::OAICreateDataSource_request_Credentials_CredentialPair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSource_request_Credentials_CredentialPair::OAICreateDataSource_request_Credentials_CredentialPair() {
    this->initializeModel();
}

OAICreateDataSource_request_Credentials_CredentialPair::~OAICreateDataSource_request_Credentials_CredentialPair() {}

void OAICreateDataSource_request_Credentials_CredentialPair::initializeModel() {

    m_username_isSet = false;
    m_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_alternate_data_source_parameters_isSet = false;
    m_alternate_data_source_parameters_isValid = false;
}

void OAICreateDataSource_request_Credentials_CredentialPair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSource_request_Credentials_CredentialPair::fromJsonObject(QJsonObject json) {

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_alternate_data_source_parameters_isValid = ::OpenAPI::fromJsonValue(m_alternate_data_source_parameters, json[QString("AlternateDataSourceParameters")]);
    m_alternate_data_source_parameters_isSet = !json[QString("AlternateDataSourceParameters")].isNull() && m_alternate_data_source_parameters_isValid;
}

QString OAICreateDataSource_request_Credentials_CredentialPair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSource_request_Credentials_CredentialPair::asJsonObject() const {
    QJsonObject obj;
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_alternate_data_source_parameters.isSet()) {
        obj.insert(QString("AlternateDataSourceParameters"), ::OpenAPI::toJsonValue(m_alternate_data_source_parameters));
    }
    return obj;
}

QString OAICreateDataSource_request_Credentials_CredentialPair::getUsername() const {
    return m_username;
}
void OAICreateDataSource_request_Credentials_CredentialPair::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAICreateDataSource_request_Credentials_CredentialPair::is_username_Set() const{
    return m_username_isSet;
}

bool OAICreateDataSource_request_Credentials_CredentialPair::is_username_Valid() const{
    return m_username_isValid;
}

QString OAICreateDataSource_request_Credentials_CredentialPair::getPassword() const {
    return m_password;
}
void OAICreateDataSource_request_Credentials_CredentialPair::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICreateDataSource_request_Credentials_CredentialPair::is_password_Set() const{
    return m_password_isSet;
}

bool OAICreateDataSource_request_Credentials_CredentialPair::is_password_Valid() const{
    return m_password_isValid;
}

QList OAICreateDataSource_request_Credentials_CredentialPair::getAlternateDataSourceParameters() const {
    return m_alternate_data_source_parameters;
}
void OAICreateDataSource_request_Credentials_CredentialPair::setAlternateDataSourceParameters(const QList &alternate_data_source_parameters) {
    m_alternate_data_source_parameters = alternate_data_source_parameters;
    m_alternate_data_source_parameters_isSet = true;
}

bool OAICreateDataSource_request_Credentials_CredentialPair::is_alternate_data_source_parameters_Set() const{
    return m_alternate_data_source_parameters_isSet;
}

bool OAICreateDataSource_request_Credentials_CredentialPair::is_alternate_data_source_parameters_Valid() const{
    return m_alternate_data_source_parameters_isValid;
}

bool OAICreateDataSource_request_Credentials_CredentialPair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_data_source_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSource_request_Credentials_CredentialPair::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_username_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
