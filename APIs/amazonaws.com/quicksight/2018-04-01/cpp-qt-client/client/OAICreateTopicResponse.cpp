/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTopicResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTopicResponse::OAICreateTopicResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTopicResponse::OAICreateTopicResponse() {
    this->initializeModel();
}

OAICreateTopicResponse::~OAICreateTopicResponse() {}

void OAICreateTopicResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_topic_id_isSet = false;
    m_topic_id_isValid = false;

    m_refresh_arn_isSet = false;
    m_refresh_arn_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICreateTopicResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTopicResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_topic_id_isValid = ::OpenAPI::fromJsonValue(m_topic_id, json[QString("TopicId")]);
    m_topic_id_isSet = !json[QString("TopicId")].isNull() && m_topic_id_isValid;

    m_refresh_arn_isValid = ::OpenAPI::fromJsonValue(m_refresh_arn, json[QString("RefreshArn")]);
    m_refresh_arn_isSet = !json[QString("RefreshArn")].isNull() && m_refresh_arn_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAICreateTopicResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTopicResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_topic_id_isSet) {
        obj.insert(QString("TopicId"), ::OpenAPI::toJsonValue(m_topic_id));
    }
    if (m_refresh_arn_isSet) {
        obj.insert(QString("RefreshArn"), ::OpenAPI::toJsonValue(m_refresh_arn));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICreateTopicResponse::getArn() const {
    return m_arn;
}
void OAICreateTopicResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateTopicResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateTopicResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateTopicResponse::getTopicId() const {
    return m_topic_id;
}
void OAICreateTopicResponse::setTopicId(const QString &topic_id) {
    m_topic_id = topic_id;
    m_topic_id_isSet = true;
}

bool OAICreateTopicResponse::is_topic_id_Set() const{
    return m_topic_id_isSet;
}

bool OAICreateTopicResponse::is_topic_id_Valid() const{
    return m_topic_id_isValid;
}

QString OAICreateTopicResponse::getRefreshArn() const {
    return m_refresh_arn;
}
void OAICreateTopicResponse::setRefreshArn(const QString &refresh_arn) {
    m_refresh_arn = refresh_arn;
    m_refresh_arn_isSet = true;
}

bool OAICreateTopicResponse::is_refresh_arn_Set() const{
    return m_refresh_arn_isSet;
}

bool OAICreateTopicResponse::is_refresh_arn_Valid() const{
    return m_refresh_arn_isValid;
}

QString OAICreateTopicResponse::getRequestId() const {
    return m_request_id;
}
void OAICreateTopicResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateTopicResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateTopicResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAICreateTopicResponse::getStatus() const {
    return m_status;
}
void OAICreateTopicResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateTopicResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateTopicResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateTopicResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTopicResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
