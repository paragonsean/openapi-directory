/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelativeDatesFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelativeDatesFilter::OAIRelativeDatesFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelativeDatesFilter::OAIRelativeDatesFilter() {
    this->initializeModel();
}

OAIRelativeDatesFilter::~OAIRelativeDatesFilter() {}

void OAIRelativeDatesFilter::initializeModel() {

    m_filter_id_isSet = false;
    m_filter_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_anchor_date_configuration_isSet = false;
    m_anchor_date_configuration_isValid = false;

    m_minimum_granularity_isSet = false;
    m_minimum_granularity_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;

    m_relative_date_type_isSet = false;
    m_relative_date_type_isValid = false;

    m_relative_date_value_isSet = false;
    m_relative_date_value_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_null_option_isSet = false;
    m_null_option_isValid = false;

    m_exclude_period_configuration_isSet = false;
    m_exclude_period_configuration_isValid = false;
}

void OAIRelativeDatesFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelativeDatesFilter::fromJsonObject(QJsonObject json) {

    m_filter_id_isValid = ::OpenAPI::fromJsonValue(m_filter_id, json[QString("FilterId")]);
    m_filter_id_isSet = !json[QString("FilterId")].isNull() && m_filter_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_anchor_date_configuration_isValid = ::OpenAPI::fromJsonValue(m_anchor_date_configuration, json[QString("AnchorDateConfiguration")]);
    m_anchor_date_configuration_isSet = !json[QString("AnchorDateConfiguration")].isNull() && m_anchor_date_configuration_isValid;

    m_minimum_granularity_isValid = ::OpenAPI::fromJsonValue(m_minimum_granularity, json[QString("MinimumGranularity")]);
    m_minimum_granularity_isSet = !json[QString("MinimumGranularity")].isNull() && m_minimum_granularity_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;

    m_relative_date_type_isValid = ::OpenAPI::fromJsonValue(m_relative_date_type, json[QString("RelativeDateType")]);
    m_relative_date_type_isSet = !json[QString("RelativeDateType")].isNull() && m_relative_date_type_isValid;

    m_relative_date_value_isValid = ::OpenAPI::fromJsonValue(m_relative_date_value, json[QString("RelativeDateValue")]);
    m_relative_date_value_isSet = !json[QString("RelativeDateValue")].isNull() && m_relative_date_value_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;

    m_null_option_isValid = ::OpenAPI::fromJsonValue(m_null_option, json[QString("NullOption")]);
    m_null_option_isSet = !json[QString("NullOption")].isNull() && m_null_option_isValid;

    m_exclude_period_configuration_isValid = ::OpenAPI::fromJsonValue(m_exclude_period_configuration, json[QString("ExcludePeriodConfiguration")]);
    m_exclude_period_configuration_isSet = !json[QString("ExcludePeriodConfiguration")].isNull() && m_exclude_period_configuration_isValid;
}

QString OAIRelativeDatesFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelativeDatesFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_id_isSet) {
        obj.insert(QString("FilterId"), ::OpenAPI::toJsonValue(m_filter_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_anchor_date_configuration.isSet()) {
        obj.insert(QString("AnchorDateConfiguration"), ::OpenAPI::toJsonValue(m_anchor_date_configuration));
    }
    if (m_minimum_granularity.isSet()) {
        obj.insert(QString("MinimumGranularity"), ::OpenAPI::toJsonValue(m_minimum_granularity));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    if (m_relative_date_type.isSet()) {
        obj.insert(QString("RelativeDateType"), ::OpenAPI::toJsonValue(m_relative_date_type));
    }
    if (m_relative_date_value_isSet) {
        obj.insert(QString("RelativeDateValue"), ::OpenAPI::toJsonValue(m_relative_date_value));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_null_option.isSet()) {
        obj.insert(QString("NullOption"), ::OpenAPI::toJsonValue(m_null_option));
    }
    if (m_exclude_period_configuration.isSet()) {
        obj.insert(QString("ExcludePeriodConfiguration"), ::OpenAPI::toJsonValue(m_exclude_period_configuration));
    }
    return obj;
}

QString OAIRelativeDatesFilter::getFilterId() const {
    return m_filter_id;
}
void OAIRelativeDatesFilter::setFilterId(const QString &filter_id) {
    m_filter_id = filter_id;
    m_filter_id_isSet = true;
}

bool OAIRelativeDatesFilter::is_filter_id_Set() const{
    return m_filter_id_isSet;
}

bool OAIRelativeDatesFilter::is_filter_id_Valid() const{
    return m_filter_id_isValid;
}

OAICategoryDrillDownFilter_Column OAIRelativeDatesFilter::getColumn() const {
    return m_column;
}
void OAIRelativeDatesFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIRelativeDatesFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAIRelativeDatesFilter::is_column_Valid() const{
    return m_column_isValid;
}

OAIRelativeDatesFilter_AnchorDateConfiguration OAIRelativeDatesFilter::getAnchorDateConfiguration() const {
    return m_anchor_date_configuration;
}
void OAIRelativeDatesFilter::setAnchorDateConfiguration(const OAIRelativeDatesFilter_AnchorDateConfiguration &anchor_date_configuration) {
    m_anchor_date_configuration = anchor_date_configuration;
    m_anchor_date_configuration_isSet = true;
}

bool OAIRelativeDatesFilter::is_anchor_date_configuration_Set() const{
    return m_anchor_date_configuration_isSet;
}

bool OAIRelativeDatesFilter::is_anchor_date_configuration_Valid() const{
    return m_anchor_date_configuration_isValid;
}

OAITimeGranularity OAIRelativeDatesFilter::getMinimumGranularity() const {
    return m_minimum_granularity;
}
void OAIRelativeDatesFilter::setMinimumGranularity(const OAITimeGranularity &minimum_granularity) {
    m_minimum_granularity = minimum_granularity;
    m_minimum_granularity_isSet = true;
}

bool OAIRelativeDatesFilter::is_minimum_granularity_Set() const{
    return m_minimum_granularity_isSet;
}

bool OAIRelativeDatesFilter::is_minimum_granularity_Valid() const{
    return m_minimum_granularity_isValid;
}

OAITimeGranularity OAIRelativeDatesFilter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAIRelativeDatesFilter::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAIRelativeDatesFilter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAIRelativeDatesFilter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

OAIRelativeDateType OAIRelativeDatesFilter::getRelativeDateType() const {
    return m_relative_date_type;
}
void OAIRelativeDatesFilter::setRelativeDateType(const OAIRelativeDateType &relative_date_type) {
    m_relative_date_type = relative_date_type;
    m_relative_date_type_isSet = true;
}

bool OAIRelativeDatesFilter::is_relative_date_type_Set() const{
    return m_relative_date_type_isSet;
}

bool OAIRelativeDatesFilter::is_relative_date_type_Valid() const{
    return m_relative_date_type_isValid;
}

qint32 OAIRelativeDatesFilter::getRelativeDateValue() const {
    return m_relative_date_value;
}
void OAIRelativeDatesFilter::setRelativeDateValue(const qint32 &relative_date_value) {
    m_relative_date_value = relative_date_value;
    m_relative_date_value_isSet = true;
}

bool OAIRelativeDatesFilter::is_relative_date_value_Set() const{
    return m_relative_date_value_isSet;
}

bool OAIRelativeDatesFilter::is_relative_date_value_Valid() const{
    return m_relative_date_value_isValid;
}

QString OAIRelativeDatesFilter::getParameterName() const {
    return m_parameter_name;
}
void OAIRelativeDatesFilter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIRelativeDatesFilter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIRelativeDatesFilter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

OAIFilterNullOption OAIRelativeDatesFilter::getNullOption() const {
    return m_null_option;
}
void OAIRelativeDatesFilter::setNullOption(const OAIFilterNullOption &null_option) {
    m_null_option = null_option;
    m_null_option_isSet = true;
}

bool OAIRelativeDatesFilter::is_null_option_Set() const{
    return m_null_option_isSet;
}

bool OAIRelativeDatesFilter::is_null_option_Valid() const{
    return m_null_option_isValid;
}

OAIRelativeDatesFilter_ExcludePeriodConfiguration OAIRelativeDatesFilter::getExcludePeriodConfiguration() const {
    return m_exclude_period_configuration;
}
void OAIRelativeDatesFilter::setExcludePeriodConfiguration(const OAIRelativeDatesFilter_ExcludePeriodConfiguration &exclude_period_configuration) {
    m_exclude_period_configuration = exclude_period_configuration;
    m_exclude_period_configuration_isSet = true;
}

bool OAIRelativeDatesFilter::is_exclude_period_configuration_Set() const{
    return m_exclude_period_configuration_isSet;
}

bool OAIRelativeDatesFilter::is_exclude_period_configuration_Valid() const{
    return m_exclude_period_configuration_isValid;
}

bool OAIRelativeDatesFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anchor_date_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_date_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_date_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_period_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelativeDatesFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_id_isValid && m_column_isValid && m_anchor_date_configuration_isValid && m_time_granularity_isValid && m_relative_date_type_isValid && m_null_option_isValid && true;
}

} // namespace OpenAPI
