/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetDefinition::OAISheetDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetDefinition::OAISheetDefinition() {
    this->initializeModel();
}

OAISheetDefinition::~OAISheetDefinition() {}

void OAISheetDefinition::initializeModel() {

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameter_controls_isSet = false;
    m_parameter_controls_isValid = false;

    m_filter_controls_isSet = false;
    m_filter_controls_isValid = false;

    m_visuals_isSet = false;
    m_visuals_isValid = false;

    m_text_boxes_isSet = false;
    m_text_boxes_isValid = false;

    m_layouts_isSet = false;
    m_layouts_isValid = false;

    m_sheet_control_layouts_isSet = false;
    m_sheet_control_layouts_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;
}

void OAISheetDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetDefinition::fromJsonObject(QJsonObject json) {

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("SheetId")]);
    m_sheet_id_isSet = !json[QString("SheetId")].isNull() && m_sheet_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parameter_controls_isValid = ::OpenAPI::fromJsonValue(m_parameter_controls, json[QString("ParameterControls")]);
    m_parameter_controls_isSet = !json[QString("ParameterControls")].isNull() && m_parameter_controls_isValid;

    m_filter_controls_isValid = ::OpenAPI::fromJsonValue(m_filter_controls, json[QString("FilterControls")]);
    m_filter_controls_isSet = !json[QString("FilterControls")].isNull() && m_filter_controls_isValid;

    m_visuals_isValid = ::OpenAPI::fromJsonValue(m_visuals, json[QString("Visuals")]);
    m_visuals_isSet = !json[QString("Visuals")].isNull() && m_visuals_isValid;

    m_text_boxes_isValid = ::OpenAPI::fromJsonValue(m_text_boxes, json[QString("TextBoxes")]);
    m_text_boxes_isSet = !json[QString("TextBoxes")].isNull() && m_text_boxes_isValid;

    m_layouts_isValid = ::OpenAPI::fromJsonValue(m_layouts, json[QString("Layouts")]);
    m_layouts_isSet = !json[QString("Layouts")].isNull() && m_layouts_isValid;

    m_sheet_control_layouts_isValid = ::OpenAPI::fromJsonValue(m_sheet_control_layouts, json[QString("SheetControlLayouts")]);
    m_sheet_control_layouts_isSet = !json[QString("SheetControlLayouts")].isNull() && m_sheet_control_layouts_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;
}

QString OAISheetDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_sheet_id_isSet) {
        obj.insert(QString("SheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameter_controls.isSet()) {
        obj.insert(QString("ParameterControls"), ::OpenAPI::toJsonValue(m_parameter_controls));
    }
    if (m_filter_controls.isSet()) {
        obj.insert(QString("FilterControls"), ::OpenAPI::toJsonValue(m_filter_controls));
    }
    if (m_visuals.isSet()) {
        obj.insert(QString("Visuals"), ::OpenAPI::toJsonValue(m_visuals));
    }
    if (m_text_boxes.isSet()) {
        obj.insert(QString("TextBoxes"), ::OpenAPI::toJsonValue(m_text_boxes));
    }
    if (m_layouts.isSet()) {
        obj.insert(QString("Layouts"), ::OpenAPI::toJsonValue(m_layouts));
    }
    if (m_sheet_control_layouts.isSet()) {
        obj.insert(QString("SheetControlLayouts"), ::OpenAPI::toJsonValue(m_sheet_control_layouts));
    }
    if (m_content_type.isSet()) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    return obj;
}

QString OAISheetDefinition::getSheetId() const {
    return m_sheet_id;
}
void OAISheetDefinition::setSheetId(const QString &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAISheetDefinition::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAISheetDefinition::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

QString OAISheetDefinition::getTitle() const {
    return m_title;
}
void OAISheetDefinition::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISheetDefinition::is_title_Set() const{
    return m_title_isSet;
}

bool OAISheetDefinition::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISheetDefinition::getDescription() const {
    return m_description;
}
void OAISheetDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISheetDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAISheetDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISheetDefinition::getName() const {
    return m_name;
}
void OAISheetDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISheetDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAISheetDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QList OAISheetDefinition::getParameterControls() const {
    return m_parameter_controls;
}
void OAISheetDefinition::setParameterControls(const QList &parameter_controls) {
    m_parameter_controls = parameter_controls;
    m_parameter_controls_isSet = true;
}

bool OAISheetDefinition::is_parameter_controls_Set() const{
    return m_parameter_controls_isSet;
}

bool OAISheetDefinition::is_parameter_controls_Valid() const{
    return m_parameter_controls_isValid;
}

QList OAISheetDefinition::getFilterControls() const {
    return m_filter_controls;
}
void OAISheetDefinition::setFilterControls(const QList &filter_controls) {
    m_filter_controls = filter_controls;
    m_filter_controls_isSet = true;
}

bool OAISheetDefinition::is_filter_controls_Set() const{
    return m_filter_controls_isSet;
}

bool OAISheetDefinition::is_filter_controls_Valid() const{
    return m_filter_controls_isValid;
}

QList OAISheetDefinition::getVisuals() const {
    return m_visuals;
}
void OAISheetDefinition::setVisuals(const QList &visuals) {
    m_visuals = visuals;
    m_visuals_isSet = true;
}

bool OAISheetDefinition::is_visuals_Set() const{
    return m_visuals_isSet;
}

bool OAISheetDefinition::is_visuals_Valid() const{
    return m_visuals_isValid;
}

QList OAISheetDefinition::getTextBoxes() const {
    return m_text_boxes;
}
void OAISheetDefinition::setTextBoxes(const QList &text_boxes) {
    m_text_boxes = text_boxes;
    m_text_boxes_isSet = true;
}

bool OAISheetDefinition::is_text_boxes_Set() const{
    return m_text_boxes_isSet;
}

bool OAISheetDefinition::is_text_boxes_Valid() const{
    return m_text_boxes_isValid;
}

QList OAISheetDefinition::getLayouts() const {
    return m_layouts;
}
void OAISheetDefinition::setLayouts(const QList &layouts) {
    m_layouts = layouts;
    m_layouts_isSet = true;
}

bool OAISheetDefinition::is_layouts_Set() const{
    return m_layouts_isSet;
}

bool OAISheetDefinition::is_layouts_Valid() const{
    return m_layouts_isValid;
}

QList OAISheetDefinition::getSheetControlLayouts() const {
    return m_sheet_control_layouts;
}
void OAISheetDefinition::setSheetControlLayouts(const QList &sheet_control_layouts) {
    m_sheet_control_layouts = sheet_control_layouts;
    m_sheet_control_layouts_isSet = true;
}

bool OAISheetDefinition::is_sheet_control_layouts_Set() const{
    return m_sheet_control_layouts_isSet;
}

bool OAISheetDefinition::is_sheet_control_layouts_Valid() const{
    return m_sheet_control_layouts_isValid;
}

OAISheetContentType OAISheetDefinition::getContentType() const {
    return m_content_type;
}
void OAISheetDefinition::setContentType(const OAISheetContentType &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAISheetDefinition::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAISheetDefinition::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAISheetDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_controls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_controls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visuals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_boxes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layouts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_control_layouts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sheet_id_isValid && true;
}

} // namespace OpenAPI
