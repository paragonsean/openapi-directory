/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKPIOptions_SecondaryValueFontConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKPIOptions_SecondaryValueFontConfiguration::OAIKPIOptions_SecondaryValueFontConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKPIOptions_SecondaryValueFontConfiguration::OAIKPIOptions_SecondaryValueFontConfiguration() {
    this->initializeModel();
}

OAIKPIOptions_SecondaryValueFontConfiguration::~OAIKPIOptions_SecondaryValueFontConfiguration() {}

void OAIKPIOptions_SecondaryValueFontConfiguration::initializeModel() {

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_font_decoration_isSet = false;
    m_font_decoration_isValid = false;

    m_font_color_isSet = false;
    m_font_color_isValid = false;

    m_font_weight_isSet = false;
    m_font_weight_isValid = false;

    m_font_style_isSet = false;
    m_font_style_isValid = false;
}

void OAIKPIOptions_SecondaryValueFontConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKPIOptions_SecondaryValueFontConfiguration::fromJsonObject(QJsonObject json) {

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("FontSize")]);
    m_font_size_isSet = !json[QString("FontSize")].isNull() && m_font_size_isValid;

    m_font_decoration_isValid = ::OpenAPI::fromJsonValue(m_font_decoration, json[QString("FontDecoration")]);
    m_font_decoration_isSet = !json[QString("FontDecoration")].isNull() && m_font_decoration_isValid;

    m_font_color_isValid = ::OpenAPI::fromJsonValue(m_font_color, json[QString("FontColor")]);
    m_font_color_isSet = !json[QString("FontColor")].isNull() && m_font_color_isValid;

    m_font_weight_isValid = ::OpenAPI::fromJsonValue(m_font_weight, json[QString("FontWeight")]);
    m_font_weight_isSet = !json[QString("FontWeight")].isNull() && m_font_weight_isValid;

    m_font_style_isValid = ::OpenAPI::fromJsonValue(m_font_style, json[QString("FontStyle")]);
    m_font_style_isSet = !json[QString("FontStyle")].isNull() && m_font_style_isValid;
}

QString OAIKPIOptions_SecondaryValueFontConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKPIOptions_SecondaryValueFontConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_font_size.isSet()) {
        obj.insert(QString("FontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_font_decoration.isSet()) {
        obj.insert(QString("FontDecoration"), ::OpenAPI::toJsonValue(m_font_decoration));
    }
    if (m_font_color_isSet) {
        obj.insert(QString("FontColor"), ::OpenAPI::toJsonValue(m_font_color));
    }
    if (m_font_weight.isSet()) {
        obj.insert(QString("FontWeight"), ::OpenAPI::toJsonValue(m_font_weight));
    }
    if (m_font_style.isSet()) {
        obj.insert(QString("FontStyle"), ::OpenAPI::toJsonValue(m_font_style));
    }
    return obj;
}

OAIFontConfiguration_FontSize OAIKPIOptions_SecondaryValueFontConfiguration::getFontSize() const {
    return m_font_size;
}
void OAIKPIOptions_SecondaryValueFontConfiguration::setFontSize(const OAIFontConfiguration_FontSize &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_size_Valid() const{
    return m_font_size_isValid;
}

OAIFontDecoration OAIKPIOptions_SecondaryValueFontConfiguration::getFontDecoration() const {
    return m_font_decoration;
}
void OAIKPIOptions_SecondaryValueFontConfiguration::setFontDecoration(const OAIFontDecoration &font_decoration) {
    m_font_decoration = font_decoration;
    m_font_decoration_isSet = true;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_decoration_Set() const{
    return m_font_decoration_isSet;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_decoration_Valid() const{
    return m_font_decoration_isValid;
}

QString OAIKPIOptions_SecondaryValueFontConfiguration::getFontColor() const {
    return m_font_color;
}
void OAIKPIOptions_SecondaryValueFontConfiguration::setFontColor(const QString &font_color) {
    m_font_color = font_color;
    m_font_color_isSet = true;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_color_Set() const{
    return m_font_color_isSet;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_color_Valid() const{
    return m_font_color_isValid;
}

OAIFontConfiguration_FontWeight OAIKPIOptions_SecondaryValueFontConfiguration::getFontWeight() const {
    return m_font_weight;
}
void OAIKPIOptions_SecondaryValueFontConfiguration::setFontWeight(const OAIFontConfiguration_FontWeight &font_weight) {
    m_font_weight = font_weight;
    m_font_weight_isSet = true;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_weight_Set() const{
    return m_font_weight_isSet;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_weight_Valid() const{
    return m_font_weight_isValid;
}

OAIFontStyle OAIKPIOptions_SecondaryValueFontConfiguration::getFontStyle() const {
    return m_font_style;
}
void OAIKPIOptions_SecondaryValueFontConfiguration::setFontStyle(const OAIFontStyle &font_style) {
    m_font_style = font_style;
    m_font_style_isSet = true;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_style_Set() const{
    return m_font_style_isSet;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::is_font_style_Valid() const{
    return m_font_style_isValid;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_font_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_decoration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKPIOptions_SecondaryValueFontConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
