/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDataSet_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDataSet_request::OAIUpdateDataSet_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDataSet_request::OAIUpdateDataSet_request() {
    this->initializeModel();
}

OAIUpdateDataSet_request::~OAIUpdateDataSet_request() {}

void OAIUpdateDataSet_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_physical_table_map_isSet = false;
    m_physical_table_map_isValid = false;

    m_logical_table_map_isSet = false;
    m_logical_table_map_isValid = false;

    m_import_mode_isSet = false;
    m_import_mode_isValid = false;

    m_column_groups_isSet = false;
    m_column_groups_isValid = false;

    m_field_folders_isSet = false;
    m_field_folders_isValid = false;

    m_row_level_permission_data_set_isSet = false;
    m_row_level_permission_data_set_isValid = false;

    m_row_level_permission_tag_configuration_isSet = false;
    m_row_level_permission_tag_configuration_isValid = false;

    m_column_level_permission_rules_isSet = false;
    m_column_level_permission_rules_isValid = false;

    m_data_set_usage_configuration_isSet = false;
    m_data_set_usage_configuration_isValid = false;

    m_dataset_parameters_isSet = false;
    m_dataset_parameters_isValid = false;
}

void OAIUpdateDataSet_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDataSet_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_physical_table_map_isValid = ::OpenAPI::fromJsonValue(m_physical_table_map, json[QString("PhysicalTableMap")]);
    m_physical_table_map_isSet = !json[QString("PhysicalTableMap")].isNull() && m_physical_table_map_isValid;

    m_logical_table_map_isValid = ::OpenAPI::fromJsonValue(m_logical_table_map, json[QString("LogicalTableMap")]);
    m_logical_table_map_isSet = !json[QString("LogicalTableMap")].isNull() && m_logical_table_map_isValid;

    m_import_mode_isValid = ::OpenAPI::fromJsonValue(m_import_mode, json[QString("ImportMode")]);
    m_import_mode_isSet = !json[QString("ImportMode")].isNull() && m_import_mode_isValid;

    m_column_groups_isValid = ::OpenAPI::fromJsonValue(m_column_groups, json[QString("ColumnGroups")]);
    m_column_groups_isSet = !json[QString("ColumnGroups")].isNull() && m_column_groups_isValid;

    m_field_folders_isValid = ::OpenAPI::fromJsonValue(m_field_folders, json[QString("FieldFolders")]);
    m_field_folders_isSet = !json[QString("FieldFolders")].isNull() && m_field_folders_isValid;

    m_row_level_permission_data_set_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_data_set, json[QString("RowLevelPermissionDataSet")]);
    m_row_level_permission_data_set_isSet = !json[QString("RowLevelPermissionDataSet")].isNull() && m_row_level_permission_data_set_isValid;

    m_row_level_permission_tag_configuration_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_tag_configuration, json[QString("RowLevelPermissionTagConfiguration")]);
    m_row_level_permission_tag_configuration_isSet = !json[QString("RowLevelPermissionTagConfiguration")].isNull() && m_row_level_permission_tag_configuration_isValid;

    m_column_level_permission_rules_isValid = ::OpenAPI::fromJsonValue(m_column_level_permission_rules, json[QString("ColumnLevelPermissionRules")]);
    m_column_level_permission_rules_isSet = !json[QString("ColumnLevelPermissionRules")].isNull() && m_column_level_permission_rules_isValid;

    m_data_set_usage_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_set_usage_configuration, json[QString("DataSetUsageConfiguration")]);
    m_data_set_usage_configuration_isSet = !json[QString("DataSetUsageConfiguration")].isNull() && m_data_set_usage_configuration_isValid;

    m_dataset_parameters_isValid = ::OpenAPI::fromJsonValue(m_dataset_parameters, json[QString("DatasetParameters")]);
    m_dataset_parameters_isSet = !json[QString("DatasetParameters")].isNull() && m_dataset_parameters_isValid;
}

QString OAIUpdateDataSet_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDataSet_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_physical_table_map.size() > 0) {
        obj.insert(QString("PhysicalTableMap"), ::OpenAPI::toJsonValue(m_physical_table_map));
    }
    if (m_logical_table_map.size() > 0) {
        obj.insert(QString("LogicalTableMap"), ::OpenAPI::toJsonValue(m_logical_table_map));
    }
    if (m_import_mode_isSet) {
        obj.insert(QString("ImportMode"), ::OpenAPI::toJsonValue(m_import_mode));
    }
    if (m_column_groups.size() > 0) {
        obj.insert(QString("ColumnGroups"), ::OpenAPI::toJsonValue(m_column_groups));
    }
    if (m_field_folders.size() > 0) {
        obj.insert(QString("FieldFolders"), ::OpenAPI::toJsonValue(m_field_folders));
    }
    if (m_row_level_permission_data_set.isSet()) {
        obj.insert(QString("RowLevelPermissionDataSet"), ::OpenAPI::toJsonValue(m_row_level_permission_data_set));
    }
    if (m_row_level_permission_tag_configuration.isSet()) {
        obj.insert(QString("RowLevelPermissionTagConfiguration"), ::OpenAPI::toJsonValue(m_row_level_permission_tag_configuration));
    }
    if (m_column_level_permission_rules.size() > 0) {
        obj.insert(QString("ColumnLevelPermissionRules"), ::OpenAPI::toJsonValue(m_column_level_permission_rules));
    }
    if (m_data_set_usage_configuration.isSet()) {
        obj.insert(QString("DataSetUsageConfiguration"), ::OpenAPI::toJsonValue(m_data_set_usage_configuration));
    }
    if (m_dataset_parameters.size() > 0) {
        obj.insert(QString("DatasetParameters"), ::OpenAPI::toJsonValue(m_dataset_parameters));
    }
    return obj;
}

QString OAIUpdateDataSet_request::getName() const {
    return m_name;
}
void OAIUpdateDataSet_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateDataSet_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateDataSet_request::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, OAIPhysicalTable> OAIUpdateDataSet_request::getPhysicalTableMap() const {
    return m_physical_table_map;
}
void OAIUpdateDataSet_request::setPhysicalTableMap(const QMap<QString, OAIPhysicalTable> &physical_table_map) {
    m_physical_table_map = physical_table_map;
    m_physical_table_map_isSet = true;
}

bool OAIUpdateDataSet_request::is_physical_table_map_Set() const{
    return m_physical_table_map_isSet;
}

bool OAIUpdateDataSet_request::is_physical_table_map_Valid() const{
    return m_physical_table_map_isValid;
}

QMap<QString, OAILogicalTable> OAIUpdateDataSet_request::getLogicalTableMap() const {
    return m_logical_table_map;
}
void OAIUpdateDataSet_request::setLogicalTableMap(const QMap<QString, OAILogicalTable> &logical_table_map) {
    m_logical_table_map = logical_table_map;
    m_logical_table_map_isSet = true;
}

bool OAIUpdateDataSet_request::is_logical_table_map_Set() const{
    return m_logical_table_map_isSet;
}

bool OAIUpdateDataSet_request::is_logical_table_map_Valid() const{
    return m_logical_table_map_isValid;
}

QString OAIUpdateDataSet_request::getImportMode() const {
    return m_import_mode;
}
void OAIUpdateDataSet_request::setImportMode(const QString &import_mode) {
    m_import_mode = import_mode;
    m_import_mode_isSet = true;
}

bool OAIUpdateDataSet_request::is_import_mode_Set() const{
    return m_import_mode_isSet;
}

bool OAIUpdateDataSet_request::is_import_mode_Valid() const{
    return m_import_mode_isValid;
}

QList<OAIColumnGroup> OAIUpdateDataSet_request::getColumnGroups() const {
    return m_column_groups;
}
void OAIUpdateDataSet_request::setColumnGroups(const QList<OAIColumnGroup> &column_groups) {
    m_column_groups = column_groups;
    m_column_groups_isSet = true;
}

bool OAIUpdateDataSet_request::is_column_groups_Set() const{
    return m_column_groups_isSet;
}

bool OAIUpdateDataSet_request::is_column_groups_Valid() const{
    return m_column_groups_isValid;
}

QMap<QString, OAIFieldFolder> OAIUpdateDataSet_request::getFieldFolders() const {
    return m_field_folders;
}
void OAIUpdateDataSet_request::setFieldFolders(const QMap<QString, OAIFieldFolder> &field_folders) {
    m_field_folders = field_folders;
    m_field_folders_isSet = true;
}

bool OAIUpdateDataSet_request::is_field_folders_Set() const{
    return m_field_folders_isSet;
}

bool OAIUpdateDataSet_request::is_field_folders_Valid() const{
    return m_field_folders_isValid;
}

OAICreateDataSet_request_RowLevelPermissionDataSet OAIUpdateDataSet_request::getRowLevelPermissionDataSet() const {
    return m_row_level_permission_data_set;
}
void OAIUpdateDataSet_request::setRowLevelPermissionDataSet(const OAICreateDataSet_request_RowLevelPermissionDataSet &row_level_permission_data_set) {
    m_row_level_permission_data_set = row_level_permission_data_set;
    m_row_level_permission_data_set_isSet = true;
}

bool OAIUpdateDataSet_request::is_row_level_permission_data_set_Set() const{
    return m_row_level_permission_data_set_isSet;
}

bool OAIUpdateDataSet_request::is_row_level_permission_data_set_Valid() const{
    return m_row_level_permission_data_set_isValid;
}

OAICreateDataSet_request_RowLevelPermissionTagConfiguration OAIUpdateDataSet_request::getRowLevelPermissionTagConfiguration() const {
    return m_row_level_permission_tag_configuration;
}
void OAIUpdateDataSet_request::setRowLevelPermissionTagConfiguration(const OAICreateDataSet_request_RowLevelPermissionTagConfiguration &row_level_permission_tag_configuration) {
    m_row_level_permission_tag_configuration = row_level_permission_tag_configuration;
    m_row_level_permission_tag_configuration_isSet = true;
}

bool OAIUpdateDataSet_request::is_row_level_permission_tag_configuration_Set() const{
    return m_row_level_permission_tag_configuration_isSet;
}

bool OAIUpdateDataSet_request::is_row_level_permission_tag_configuration_Valid() const{
    return m_row_level_permission_tag_configuration_isValid;
}

QList<OAIColumnLevelPermissionRule> OAIUpdateDataSet_request::getColumnLevelPermissionRules() const {
    return m_column_level_permission_rules;
}
void OAIUpdateDataSet_request::setColumnLevelPermissionRules(const QList<OAIColumnLevelPermissionRule> &column_level_permission_rules) {
    m_column_level_permission_rules = column_level_permission_rules;
    m_column_level_permission_rules_isSet = true;
}

bool OAIUpdateDataSet_request::is_column_level_permission_rules_Set() const{
    return m_column_level_permission_rules_isSet;
}

bool OAIUpdateDataSet_request::is_column_level_permission_rules_Valid() const{
    return m_column_level_permission_rules_isValid;
}

OAICreateDataSet_request_DataSetUsageConfiguration OAIUpdateDataSet_request::getDataSetUsageConfiguration() const {
    return m_data_set_usage_configuration;
}
void OAIUpdateDataSet_request::setDataSetUsageConfiguration(const OAICreateDataSet_request_DataSetUsageConfiguration &data_set_usage_configuration) {
    m_data_set_usage_configuration = data_set_usage_configuration;
    m_data_set_usage_configuration_isSet = true;
}

bool OAIUpdateDataSet_request::is_data_set_usage_configuration_Set() const{
    return m_data_set_usage_configuration_isSet;
}

bool OAIUpdateDataSet_request::is_data_set_usage_configuration_Valid() const{
    return m_data_set_usage_configuration_isValid;
}

QList<OAIDatasetParameter> OAIUpdateDataSet_request::getDatasetParameters() const {
    return m_dataset_parameters;
}
void OAIUpdateDataSet_request::setDatasetParameters(const QList<OAIDatasetParameter> &dataset_parameters) {
    m_dataset_parameters = dataset_parameters;
    m_dataset_parameters_isSet = true;
}

bool OAIUpdateDataSet_request::is_dataset_parameters_Set() const{
    return m_dataset_parameters_isSet;
}

bool OAIUpdateDataSet_request::is_dataset_parameters_Valid() const{
    return m_dataset_parameters_isValid;
}

bool OAIUpdateDataSet_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_table_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_table_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_data_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_tag_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_level_permission_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_usage_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDataSet_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_physical_table_map_isValid && m_import_mode_isValid && true;
}

} // namespace OpenAPI
