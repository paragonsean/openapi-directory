/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration() {
    this->initializeModel();
}

OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::~OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration() {}

void OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::initializeModel() {

    m_initial_path_isSet = false;
    m_initial_path_isValid = false;

    m_feature_configurations_isSet = false;
    m_feature_configurations_isValid = false;
}

void OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::fromJsonObject(QJsonObject json) {

    m_initial_path_isValid = ::OpenAPI::fromJsonValue(m_initial_path, json[QString("InitialPath")]);
    m_initial_path_isSet = !json[QString("InitialPath")].isNull() && m_initial_path_isValid;

    m_feature_configurations_isValid = ::OpenAPI::fromJsonValue(m_feature_configurations, json[QString("FeatureConfigurations")]);
    m_feature_configurations_isSet = !json[QString("FeatureConfigurations")].isNull() && m_feature_configurations_isValid;
}

QString OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_path_isSet) {
        obj.insert(QString("InitialPath"), ::OpenAPI::toJsonValue(m_initial_path));
    }
    if (m_feature_configurations.isSet()) {
        obj.insert(QString("FeatureConfigurations"), ::OpenAPI::toJsonValue(m_feature_configurations));
    }
    return obj;
}

QString OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::getInitialPath() const {
    return m_initial_path;
}
void OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::setInitialPath(const QString &initial_path) {
    m_initial_path = initial_path;
    m_initial_path_isSet = true;
}

bool OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::is_initial_path_Set() const{
    return m_initial_path_isSet;
}

bool OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::is_initial_path_Valid() const{
    return m_initial_path_isValid;
}

OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration_FeatureConfigurations OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::getFeatureConfigurations() const {
    return m_feature_configurations;
}
void OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::setFeatureConfigurations(const OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration_FeatureConfigurations &feature_configurations) {
    m_feature_configurations = feature_configurations;
    m_feature_configurations_isSet = true;
}

bool OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::is_feature_configurations_Set() const{
    return m_feature_configurations_isSet;
}

bool OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::is_feature_configurations_Valid() const{
    return m_feature_configurations_isValid;
}

bool OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredUserQuickSightConsoleEmbeddingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
