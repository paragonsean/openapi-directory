/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegativeValueDisplayMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegativeValueDisplayMode::OAINegativeValueDisplayMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegativeValueDisplayMode::OAINegativeValueDisplayMode() {
    this->initializeModel();
}

OAINegativeValueDisplayMode::~OAINegativeValueDisplayMode() {}

void OAINegativeValueDisplayMode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINegativeValueDisplayMode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINegativeValueDisplayMode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("POSITIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAINegativeValueDisplayMode::POSITIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEGATIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAINegativeValueDisplayMode::NEGATIVE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINegativeValueDisplayMode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINegativeValueDisplayMode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINegativeValueDisplayMode::POSITIVE:
            val = "POSITIVE";
            break;
        case eOAINegativeValueDisplayMode::NEGATIVE:
            val = "NEGATIVE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINegativeValueDisplayMode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINegativeValueDisplayMode::eOAINegativeValueDisplayMode OAINegativeValueDisplayMode::getValue() const {
    return m_value;
}

void OAINegativeValueDisplayMode::setValue(const OAINegativeValueDisplayMode::eOAINegativeValueDisplayMode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINegativeValueDisplayMode::isSet() const {
    
    return m_value_isSet;
}

bool OAINegativeValueDisplayMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
