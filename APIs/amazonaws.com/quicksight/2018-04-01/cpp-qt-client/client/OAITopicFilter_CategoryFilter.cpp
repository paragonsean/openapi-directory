/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicFilter_CategoryFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicFilter_CategoryFilter::OAITopicFilter_CategoryFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicFilter_CategoryFilter::OAITopicFilter_CategoryFilter() {
    this->initializeModel();
}

OAITopicFilter_CategoryFilter::~OAITopicFilter_CategoryFilter() {}

void OAITopicFilter_CategoryFilter::initializeModel() {

    m_category_filter_function_isSet = false;
    m_category_filter_function_isValid = false;

    m_category_filter_type_isSet = false;
    m_category_filter_type_isValid = false;

    m_constant_isSet = false;
    m_constant_isValid = false;

    m_inverse_isSet = false;
    m_inverse_isValid = false;
}

void OAITopicFilter_CategoryFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicFilter_CategoryFilter::fromJsonObject(QJsonObject json) {

    m_category_filter_function_isValid = ::OpenAPI::fromJsonValue(m_category_filter_function, json[QString("CategoryFilterFunction")]);
    m_category_filter_function_isSet = !json[QString("CategoryFilterFunction")].isNull() && m_category_filter_function_isValid;

    m_category_filter_type_isValid = ::OpenAPI::fromJsonValue(m_category_filter_type, json[QString("CategoryFilterType")]);
    m_category_filter_type_isSet = !json[QString("CategoryFilterType")].isNull() && m_category_filter_type_isValid;

    m_constant_isValid = ::OpenAPI::fromJsonValue(m_constant, json[QString("Constant")]);
    m_constant_isSet = !json[QString("Constant")].isNull() && m_constant_isValid;

    m_inverse_isValid = ::OpenAPI::fromJsonValue(m_inverse, json[QString("Inverse")]);
    m_inverse_isSet = !json[QString("Inverse")].isNull() && m_inverse_isValid;
}

QString OAITopicFilter_CategoryFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicFilter_CategoryFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_category_filter_function.isSet()) {
        obj.insert(QString("CategoryFilterFunction"), ::OpenAPI::toJsonValue(m_category_filter_function));
    }
    if (m_category_filter_type.isSet()) {
        obj.insert(QString("CategoryFilterType"), ::OpenAPI::toJsonValue(m_category_filter_type));
    }
    if (m_constant.isSet()) {
        obj.insert(QString("Constant"), ::OpenAPI::toJsonValue(m_constant));
    }
    if (m_inverse_isSet) {
        obj.insert(QString("Inverse"), ::OpenAPI::toJsonValue(m_inverse));
    }
    return obj;
}

OAICategoryFilterFunction OAITopicFilter_CategoryFilter::getCategoryFilterFunction() const {
    return m_category_filter_function;
}
void OAITopicFilter_CategoryFilter::setCategoryFilterFunction(const OAICategoryFilterFunction &category_filter_function) {
    m_category_filter_function = category_filter_function;
    m_category_filter_function_isSet = true;
}

bool OAITopicFilter_CategoryFilter::is_category_filter_function_Set() const{
    return m_category_filter_function_isSet;
}

bool OAITopicFilter_CategoryFilter::is_category_filter_function_Valid() const{
    return m_category_filter_function_isValid;
}

OAICategoryFilterType OAITopicFilter_CategoryFilter::getCategoryFilterType() const {
    return m_category_filter_type;
}
void OAITopicFilter_CategoryFilter::setCategoryFilterType(const OAICategoryFilterType &category_filter_type) {
    m_category_filter_type = category_filter_type;
    m_category_filter_type_isSet = true;
}

bool OAITopicFilter_CategoryFilter::is_category_filter_type_Set() const{
    return m_category_filter_type_isSet;
}

bool OAITopicFilter_CategoryFilter::is_category_filter_type_Valid() const{
    return m_category_filter_type_isValid;
}

OAITopicCategoryFilter_Constant OAITopicFilter_CategoryFilter::getConstant() const {
    return m_constant;
}
void OAITopicFilter_CategoryFilter::setConstant(const OAITopicCategoryFilter_Constant &constant) {
    m_constant = constant;
    m_constant_isSet = true;
}

bool OAITopicFilter_CategoryFilter::is_constant_Set() const{
    return m_constant_isSet;
}

bool OAITopicFilter_CategoryFilter::is_constant_Valid() const{
    return m_constant_isValid;
}

bool OAITopicFilter_CategoryFilter::getInverse() const {
    return m_inverse;
}
void OAITopicFilter_CategoryFilter::setInverse(const bool &inverse) {
    m_inverse = inverse;
    m_inverse_isSet = true;
}

bool OAITopicFilter_CategoryFilter::is_inverse_Set() const{
    return m_inverse_isSet;
}

bool OAITopicFilter_CategoryFilter::is_inverse_Valid() const{
    return m_inverse_isValid;
}

bool OAITopicFilter_CategoryFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_filter_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_filter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_constant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inverse_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicFilter_CategoryFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
