/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDefaultFormatting_DisplayFormatOptions.h
 *
 * 
 */

#ifndef OAIDefaultFormatting_DisplayFormatOptions_H
#define OAIDefaultFormatting_DisplayFormatOptions_H

#include <QJsonObject>

#include "OAIDisplayFormatOptions_NegativeFormat.h"
#include "OAINumberScale.h"
#include "OAITopicNumericSeparatorSymbol.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDisplayFormatOptions_NegativeFormat;

class OAIDefaultFormatting_DisplayFormatOptions : public OAIObject {
public:
    OAIDefaultFormatting_DisplayFormatOptions();
    OAIDefaultFormatting_DisplayFormatOptions(QString json);
    ~OAIDefaultFormatting_DisplayFormatOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getUseBlankCellFormat() const;
    void setUseBlankCellFormat(const bool &use_blank_cell_format);
    bool is_use_blank_cell_format_Set() const;
    bool is_use_blank_cell_format_Valid() const;

    QString getBlankCellFormat() const;
    void setBlankCellFormat(const QString &blank_cell_format);
    bool is_blank_cell_format_Set() const;
    bool is_blank_cell_format_Valid() const;

    QString getDateFormat() const;
    void setDateFormat(const QString &date_format);
    bool is_date_format_Set() const;
    bool is_date_format_Valid() const;

    OAITopicNumericSeparatorSymbol getDecimalSeparator() const;
    void setDecimalSeparator(const OAITopicNumericSeparatorSymbol &decimal_separator);
    bool is_decimal_separator_Set() const;
    bool is_decimal_separator_Valid() const;

    QString getGroupingSeparator() const;
    void setGroupingSeparator(const QString &grouping_separator);
    bool is_grouping_separator_Set() const;
    bool is_grouping_separator_Valid() const;

    bool getUseGrouping() const;
    void setUseGrouping(const bool &use_grouping);
    bool is_use_grouping_Set() const;
    bool is_use_grouping_Valid() const;

    qint32 getFractionDigits() const;
    void setFractionDigits(const qint32 &fraction_digits);
    bool is_fraction_digits_Set() const;
    bool is_fraction_digits_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    QString getSuffix() const;
    void setSuffix(const QString &suffix);
    bool is_suffix_Set() const;
    bool is_suffix_Valid() const;

    OAINumberScale getUnitScaler() const;
    void setUnitScaler(const OAINumberScale &unit_scaler);
    bool is_unit_scaler_Set() const;
    bool is_unit_scaler_Valid() const;

    OAIDisplayFormatOptions_NegativeFormat getNegativeFormat() const;
    void setNegativeFormat(const OAIDisplayFormatOptions_NegativeFormat &negative_format);
    bool is_negative_format_Set() const;
    bool is_negative_format_Valid() const;

    QString getCurrencySymbol() const;
    void setCurrencySymbol(const QString &currency_symbol);
    bool is_currency_symbol_Set() const;
    bool is_currency_symbol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_use_blank_cell_format;
    bool m_use_blank_cell_format_isSet;
    bool m_use_blank_cell_format_isValid;

    QString m_blank_cell_format;
    bool m_blank_cell_format_isSet;
    bool m_blank_cell_format_isValid;

    QString m_date_format;
    bool m_date_format_isSet;
    bool m_date_format_isValid;

    OAITopicNumericSeparatorSymbol m_decimal_separator;
    bool m_decimal_separator_isSet;
    bool m_decimal_separator_isValid;

    QString m_grouping_separator;
    bool m_grouping_separator_isSet;
    bool m_grouping_separator_isValid;

    bool m_use_grouping;
    bool m_use_grouping_isSet;
    bool m_use_grouping_isValid;

    qint32 m_fraction_digits;
    bool m_fraction_digits_isSet;
    bool m_fraction_digits_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    QString m_suffix;
    bool m_suffix_isSet;
    bool m_suffix_isValid;

    OAINumberScale m_unit_scaler;
    bool m_unit_scaler_isSet;
    bool m_unit_scaler_isValid;

    OAIDisplayFormatOptions_NegativeFormat m_negative_format;
    bool m_negative_format_isSet;
    bool m_negative_format_isValid;

    QString m_currency_symbol;
    bool m_currency_symbol_isSet;
    bool m_currency_symbol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDefaultFormatting_DisplayFormatOptions)

#endif // OAIDefaultFormatting_DisplayFormatOptions_H
