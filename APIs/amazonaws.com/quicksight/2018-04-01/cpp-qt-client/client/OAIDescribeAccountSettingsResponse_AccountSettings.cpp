/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAccountSettingsResponse_AccountSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAccountSettingsResponse_AccountSettings::OAIDescribeAccountSettingsResponse_AccountSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAccountSettingsResponse_AccountSettings::OAIDescribeAccountSettingsResponse_AccountSettings() {
    this->initializeModel();
}

OAIDescribeAccountSettingsResponse_AccountSettings::~OAIDescribeAccountSettingsResponse_AccountSettings() {}

void OAIDescribeAccountSettingsResponse_AccountSettings::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_default_namespace_isSet = false;
    m_default_namespace_isValid = false;

    m_notification_email_isSet = false;
    m_notification_email_isValid = false;

    m_public_sharing_enabled_isSet = false;
    m_public_sharing_enabled_isValid = false;

    m_termination_protection_enabled_isSet = false;
    m_termination_protection_enabled_isValid = false;
}

void OAIDescribeAccountSettingsResponse_AccountSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAccountSettingsResponse_AccountSettings::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("AccountName")]);
    m_account_name_isSet = !json[QString("AccountName")].isNull() && m_account_name_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("Edition")]);
    m_edition_isSet = !json[QString("Edition")].isNull() && m_edition_isValid;

    m_default_namespace_isValid = ::OpenAPI::fromJsonValue(m_default_namespace, json[QString("DefaultNamespace")]);
    m_default_namespace_isSet = !json[QString("DefaultNamespace")].isNull() && m_default_namespace_isValid;

    m_notification_email_isValid = ::OpenAPI::fromJsonValue(m_notification_email, json[QString("NotificationEmail")]);
    m_notification_email_isSet = !json[QString("NotificationEmail")].isNull() && m_notification_email_isValid;

    m_public_sharing_enabled_isValid = ::OpenAPI::fromJsonValue(m_public_sharing_enabled, json[QString("PublicSharingEnabled")]);
    m_public_sharing_enabled_isSet = !json[QString("PublicSharingEnabled")].isNull() && m_public_sharing_enabled_isValid;

    m_termination_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_termination_protection_enabled, json[QString("TerminationProtectionEnabled")]);
    m_termination_protection_enabled_isSet = !json[QString("TerminationProtectionEnabled")].isNull() && m_termination_protection_enabled_isValid;
}

QString OAIDescribeAccountSettingsResponse_AccountSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAccountSettingsResponse_AccountSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("AccountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_edition.isSet()) {
        obj.insert(QString("Edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_default_namespace_isSet) {
        obj.insert(QString("DefaultNamespace"), ::OpenAPI::toJsonValue(m_default_namespace));
    }
    if (m_notification_email_isSet) {
        obj.insert(QString("NotificationEmail"), ::OpenAPI::toJsonValue(m_notification_email));
    }
    if (m_public_sharing_enabled_isSet) {
        obj.insert(QString("PublicSharingEnabled"), ::OpenAPI::toJsonValue(m_public_sharing_enabled));
    }
    if (m_termination_protection_enabled_isSet) {
        obj.insert(QString("TerminationProtectionEnabled"), ::OpenAPI::toJsonValue(m_termination_protection_enabled));
    }
    return obj;
}

QString OAIDescribeAccountSettingsResponse_AccountSettings::getAccountName() const {
    return m_account_name;
}
void OAIDescribeAccountSettingsResponse_AccountSettings::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_account_name_Valid() const{
    return m_account_name_isValid;
}

OAIEdition OAIDescribeAccountSettingsResponse_AccountSettings::getEdition() const {
    return m_edition;
}
void OAIDescribeAccountSettingsResponse_AccountSettings::setEdition(const OAIEdition &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAIDescribeAccountSettingsResponse_AccountSettings::getDefaultNamespace() const {
    return m_default_namespace;
}
void OAIDescribeAccountSettingsResponse_AccountSettings::setDefaultNamespace(const QString &default_namespace) {
    m_default_namespace = default_namespace;
    m_default_namespace_isSet = true;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_default_namespace_Set() const{
    return m_default_namespace_isSet;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_default_namespace_Valid() const{
    return m_default_namespace_isValid;
}

QString OAIDescribeAccountSettingsResponse_AccountSettings::getNotificationEmail() const {
    return m_notification_email;
}
void OAIDescribeAccountSettingsResponse_AccountSettings::setNotificationEmail(const QString &notification_email) {
    m_notification_email = notification_email;
    m_notification_email_isSet = true;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_notification_email_Set() const{
    return m_notification_email_isSet;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_notification_email_Valid() const{
    return m_notification_email_isValid;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::getPublicSharingEnabled() const {
    return m_public_sharing_enabled;
}
void OAIDescribeAccountSettingsResponse_AccountSettings::setPublicSharingEnabled(const bool &public_sharing_enabled) {
    m_public_sharing_enabled = public_sharing_enabled;
    m_public_sharing_enabled_isSet = true;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_public_sharing_enabled_Set() const{
    return m_public_sharing_enabled_isSet;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_public_sharing_enabled_Valid() const{
    return m_public_sharing_enabled_isValid;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::getTerminationProtectionEnabled() const {
    return m_termination_protection_enabled;
}
void OAIDescribeAccountSettingsResponse_AccountSettings::setTerminationProtectionEnabled(const bool &termination_protection_enabled) {
    m_termination_protection_enabled = termination_protection_enabled;
    m_termination_protection_enabled_isSet = true;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_termination_protection_enabled_Set() const{
    return m_termination_protection_enabled_isSet;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::is_termination_protection_enabled_Valid() const{
    return m_termination_protection_enabled_isValid;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_sharing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAccountSettingsResponse_AccountSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
