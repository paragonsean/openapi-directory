/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverrideDatasetParameterOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverrideDatasetParameterOperation::OAIOverrideDatasetParameterOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverrideDatasetParameterOperation::OAIOverrideDatasetParameterOperation() {
    this->initializeModel();
}

OAIOverrideDatasetParameterOperation::~OAIOverrideDatasetParameterOperation() {}

void OAIOverrideDatasetParameterOperation::initializeModel() {

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_new_parameter_name_isSet = false;
    m_new_parameter_name_isValid = false;

    m_new_default_values_isSet = false;
    m_new_default_values_isValid = false;
}

void OAIOverrideDatasetParameterOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverrideDatasetParameterOperation::fromJsonObject(QJsonObject json) {

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;

    m_new_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_new_parameter_name, json[QString("NewParameterName")]);
    m_new_parameter_name_isSet = !json[QString("NewParameterName")].isNull() && m_new_parameter_name_isValid;

    m_new_default_values_isValid = ::OpenAPI::fromJsonValue(m_new_default_values, json[QString("NewDefaultValues")]);
    m_new_default_values_isSet = !json[QString("NewDefaultValues")].isNull() && m_new_default_values_isValid;
}

QString OAIOverrideDatasetParameterOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverrideDatasetParameterOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_new_parameter_name_isSet) {
        obj.insert(QString("NewParameterName"), ::OpenAPI::toJsonValue(m_new_parameter_name));
    }
    if (m_new_default_values.isSet()) {
        obj.insert(QString("NewDefaultValues"), ::OpenAPI::toJsonValue(m_new_default_values));
    }
    return obj;
}

QString OAIOverrideDatasetParameterOperation::getParameterName() const {
    return m_parameter_name;
}
void OAIOverrideDatasetParameterOperation::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIOverrideDatasetParameterOperation::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIOverrideDatasetParameterOperation::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

QString OAIOverrideDatasetParameterOperation::getNewParameterName() const {
    return m_new_parameter_name;
}
void OAIOverrideDatasetParameterOperation::setNewParameterName(const QString &new_parameter_name) {
    m_new_parameter_name = new_parameter_name;
    m_new_parameter_name_isSet = true;
}

bool OAIOverrideDatasetParameterOperation::is_new_parameter_name_Set() const{
    return m_new_parameter_name_isSet;
}

bool OAIOverrideDatasetParameterOperation::is_new_parameter_name_Valid() const{
    return m_new_parameter_name_isValid;
}

OAIOverrideDatasetParameterOperation_NewDefaultValues OAIOverrideDatasetParameterOperation::getNewDefaultValues() const {
    return m_new_default_values;
}
void OAIOverrideDatasetParameterOperation::setNewDefaultValues(const OAIOverrideDatasetParameterOperation_NewDefaultValues &new_default_values) {
    m_new_default_values = new_default_values;
    m_new_default_values_isSet = true;
}

bool OAIOverrideDatasetParameterOperation::is_new_default_values_Set() const{
    return m_new_default_values_isSet;
}

bool OAIOverrideDatasetParameterOperation::is_new_default_values_Valid() const{
    return m_new_default_values_isValid;
}

bool OAIOverrideDatasetParameterOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_default_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverrideDatasetParameterOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_name_isValid && true;
}

} // namespace OpenAPI
