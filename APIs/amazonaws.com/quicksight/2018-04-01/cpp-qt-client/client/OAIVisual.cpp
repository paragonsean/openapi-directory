/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisual.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisual::OAIVisual(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisual::OAIVisual() {
    this->initializeModel();
}

OAIVisual::~OAIVisual() {}

void OAIVisual::initializeModel() {

    m_table_visual_isSet = false;
    m_table_visual_isValid = false;

    m_pivot_table_visual_isSet = false;
    m_pivot_table_visual_isValid = false;

    m_bar_chart_visual_isSet = false;
    m_bar_chart_visual_isValid = false;

    m_kpi_visual_isSet = false;
    m_kpi_visual_isValid = false;

    m_pie_chart_visual_isSet = false;
    m_pie_chart_visual_isValid = false;

    m_gauge_chart_visual_isSet = false;
    m_gauge_chart_visual_isValid = false;

    m_line_chart_visual_isSet = false;
    m_line_chart_visual_isValid = false;

    m_heat_map_visual_isSet = false;
    m_heat_map_visual_isValid = false;

    m_tree_map_visual_isSet = false;
    m_tree_map_visual_isValid = false;

    m_geospatial_map_visual_isSet = false;
    m_geospatial_map_visual_isValid = false;

    m_filled_map_visual_isSet = false;
    m_filled_map_visual_isValid = false;

    m_funnel_chart_visual_isSet = false;
    m_funnel_chart_visual_isValid = false;

    m_scatter_plot_visual_isSet = false;
    m_scatter_plot_visual_isValid = false;

    m_combo_chart_visual_isSet = false;
    m_combo_chart_visual_isValid = false;

    m_box_plot_visual_isSet = false;
    m_box_plot_visual_isValid = false;

    m_waterfall_visual_isSet = false;
    m_waterfall_visual_isValid = false;

    m_histogram_visual_isSet = false;
    m_histogram_visual_isValid = false;

    m_word_cloud_visual_isSet = false;
    m_word_cloud_visual_isValid = false;

    m_insight_visual_isSet = false;
    m_insight_visual_isValid = false;

    m_sankey_diagram_visual_isSet = false;
    m_sankey_diagram_visual_isValid = false;

    m_custom_content_visual_isSet = false;
    m_custom_content_visual_isValid = false;

    m_empty_visual_isSet = false;
    m_empty_visual_isValid = false;

    m_radar_chart_visual_isSet = false;
    m_radar_chart_visual_isValid = false;
}

void OAIVisual::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisual::fromJsonObject(QJsonObject json) {

    m_table_visual_isValid = ::OpenAPI::fromJsonValue(m_table_visual, json[QString("TableVisual")]);
    m_table_visual_isSet = !json[QString("TableVisual")].isNull() && m_table_visual_isValid;

    m_pivot_table_visual_isValid = ::OpenAPI::fromJsonValue(m_pivot_table_visual, json[QString("PivotTableVisual")]);
    m_pivot_table_visual_isSet = !json[QString("PivotTableVisual")].isNull() && m_pivot_table_visual_isValid;

    m_bar_chart_visual_isValid = ::OpenAPI::fromJsonValue(m_bar_chart_visual, json[QString("BarChartVisual")]);
    m_bar_chart_visual_isSet = !json[QString("BarChartVisual")].isNull() && m_bar_chart_visual_isValid;

    m_kpi_visual_isValid = ::OpenAPI::fromJsonValue(m_kpi_visual, json[QString("KPIVisual")]);
    m_kpi_visual_isSet = !json[QString("KPIVisual")].isNull() && m_kpi_visual_isValid;

    m_pie_chart_visual_isValid = ::OpenAPI::fromJsonValue(m_pie_chart_visual, json[QString("PieChartVisual")]);
    m_pie_chart_visual_isSet = !json[QString("PieChartVisual")].isNull() && m_pie_chart_visual_isValid;

    m_gauge_chart_visual_isValid = ::OpenAPI::fromJsonValue(m_gauge_chart_visual, json[QString("GaugeChartVisual")]);
    m_gauge_chart_visual_isSet = !json[QString("GaugeChartVisual")].isNull() && m_gauge_chart_visual_isValid;

    m_line_chart_visual_isValid = ::OpenAPI::fromJsonValue(m_line_chart_visual, json[QString("LineChartVisual")]);
    m_line_chart_visual_isSet = !json[QString("LineChartVisual")].isNull() && m_line_chart_visual_isValid;

    m_heat_map_visual_isValid = ::OpenAPI::fromJsonValue(m_heat_map_visual, json[QString("HeatMapVisual")]);
    m_heat_map_visual_isSet = !json[QString("HeatMapVisual")].isNull() && m_heat_map_visual_isValid;

    m_tree_map_visual_isValid = ::OpenAPI::fromJsonValue(m_tree_map_visual, json[QString("TreeMapVisual")]);
    m_tree_map_visual_isSet = !json[QString("TreeMapVisual")].isNull() && m_tree_map_visual_isValid;

    m_geospatial_map_visual_isValid = ::OpenAPI::fromJsonValue(m_geospatial_map_visual, json[QString("GeospatialMapVisual")]);
    m_geospatial_map_visual_isSet = !json[QString("GeospatialMapVisual")].isNull() && m_geospatial_map_visual_isValid;

    m_filled_map_visual_isValid = ::OpenAPI::fromJsonValue(m_filled_map_visual, json[QString("FilledMapVisual")]);
    m_filled_map_visual_isSet = !json[QString("FilledMapVisual")].isNull() && m_filled_map_visual_isValid;

    m_funnel_chart_visual_isValid = ::OpenAPI::fromJsonValue(m_funnel_chart_visual, json[QString("FunnelChartVisual")]);
    m_funnel_chart_visual_isSet = !json[QString("FunnelChartVisual")].isNull() && m_funnel_chart_visual_isValid;

    m_scatter_plot_visual_isValid = ::OpenAPI::fromJsonValue(m_scatter_plot_visual, json[QString("ScatterPlotVisual")]);
    m_scatter_plot_visual_isSet = !json[QString("ScatterPlotVisual")].isNull() && m_scatter_plot_visual_isValid;

    m_combo_chart_visual_isValid = ::OpenAPI::fromJsonValue(m_combo_chart_visual, json[QString("ComboChartVisual")]);
    m_combo_chart_visual_isSet = !json[QString("ComboChartVisual")].isNull() && m_combo_chart_visual_isValid;

    m_box_plot_visual_isValid = ::OpenAPI::fromJsonValue(m_box_plot_visual, json[QString("BoxPlotVisual")]);
    m_box_plot_visual_isSet = !json[QString("BoxPlotVisual")].isNull() && m_box_plot_visual_isValid;

    m_waterfall_visual_isValid = ::OpenAPI::fromJsonValue(m_waterfall_visual, json[QString("WaterfallVisual")]);
    m_waterfall_visual_isSet = !json[QString("WaterfallVisual")].isNull() && m_waterfall_visual_isValid;

    m_histogram_visual_isValid = ::OpenAPI::fromJsonValue(m_histogram_visual, json[QString("HistogramVisual")]);
    m_histogram_visual_isSet = !json[QString("HistogramVisual")].isNull() && m_histogram_visual_isValid;

    m_word_cloud_visual_isValid = ::OpenAPI::fromJsonValue(m_word_cloud_visual, json[QString("WordCloudVisual")]);
    m_word_cloud_visual_isSet = !json[QString("WordCloudVisual")].isNull() && m_word_cloud_visual_isValid;

    m_insight_visual_isValid = ::OpenAPI::fromJsonValue(m_insight_visual, json[QString("InsightVisual")]);
    m_insight_visual_isSet = !json[QString("InsightVisual")].isNull() && m_insight_visual_isValid;

    m_sankey_diagram_visual_isValid = ::OpenAPI::fromJsonValue(m_sankey_diagram_visual, json[QString("SankeyDiagramVisual")]);
    m_sankey_diagram_visual_isSet = !json[QString("SankeyDiagramVisual")].isNull() && m_sankey_diagram_visual_isValid;

    m_custom_content_visual_isValid = ::OpenAPI::fromJsonValue(m_custom_content_visual, json[QString("CustomContentVisual")]);
    m_custom_content_visual_isSet = !json[QString("CustomContentVisual")].isNull() && m_custom_content_visual_isValid;

    m_empty_visual_isValid = ::OpenAPI::fromJsonValue(m_empty_visual, json[QString("EmptyVisual")]);
    m_empty_visual_isSet = !json[QString("EmptyVisual")].isNull() && m_empty_visual_isValid;

    m_radar_chart_visual_isValid = ::OpenAPI::fromJsonValue(m_radar_chart_visual, json[QString("RadarChartVisual")]);
    m_radar_chart_visual_isSet = !json[QString("RadarChartVisual")].isNull() && m_radar_chart_visual_isValid;
}

QString OAIVisual::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisual::asJsonObject() const {
    QJsonObject obj;
    if (m_table_visual.isSet()) {
        obj.insert(QString("TableVisual"), ::OpenAPI::toJsonValue(m_table_visual));
    }
    if (m_pivot_table_visual.isSet()) {
        obj.insert(QString("PivotTableVisual"), ::OpenAPI::toJsonValue(m_pivot_table_visual));
    }
    if (m_bar_chart_visual.isSet()) {
        obj.insert(QString("BarChartVisual"), ::OpenAPI::toJsonValue(m_bar_chart_visual));
    }
    if (m_kpi_visual.isSet()) {
        obj.insert(QString("KPIVisual"), ::OpenAPI::toJsonValue(m_kpi_visual));
    }
    if (m_pie_chart_visual.isSet()) {
        obj.insert(QString("PieChartVisual"), ::OpenAPI::toJsonValue(m_pie_chart_visual));
    }
    if (m_gauge_chart_visual.isSet()) {
        obj.insert(QString("GaugeChartVisual"), ::OpenAPI::toJsonValue(m_gauge_chart_visual));
    }
    if (m_line_chart_visual.isSet()) {
        obj.insert(QString("LineChartVisual"), ::OpenAPI::toJsonValue(m_line_chart_visual));
    }
    if (m_heat_map_visual.isSet()) {
        obj.insert(QString("HeatMapVisual"), ::OpenAPI::toJsonValue(m_heat_map_visual));
    }
    if (m_tree_map_visual.isSet()) {
        obj.insert(QString("TreeMapVisual"), ::OpenAPI::toJsonValue(m_tree_map_visual));
    }
    if (m_geospatial_map_visual.isSet()) {
        obj.insert(QString("GeospatialMapVisual"), ::OpenAPI::toJsonValue(m_geospatial_map_visual));
    }
    if (m_filled_map_visual.isSet()) {
        obj.insert(QString("FilledMapVisual"), ::OpenAPI::toJsonValue(m_filled_map_visual));
    }
    if (m_funnel_chart_visual.isSet()) {
        obj.insert(QString("FunnelChartVisual"), ::OpenAPI::toJsonValue(m_funnel_chart_visual));
    }
    if (m_scatter_plot_visual.isSet()) {
        obj.insert(QString("ScatterPlotVisual"), ::OpenAPI::toJsonValue(m_scatter_plot_visual));
    }
    if (m_combo_chart_visual.isSet()) {
        obj.insert(QString("ComboChartVisual"), ::OpenAPI::toJsonValue(m_combo_chart_visual));
    }
    if (m_box_plot_visual.isSet()) {
        obj.insert(QString("BoxPlotVisual"), ::OpenAPI::toJsonValue(m_box_plot_visual));
    }
    if (m_waterfall_visual.isSet()) {
        obj.insert(QString("WaterfallVisual"), ::OpenAPI::toJsonValue(m_waterfall_visual));
    }
    if (m_histogram_visual.isSet()) {
        obj.insert(QString("HistogramVisual"), ::OpenAPI::toJsonValue(m_histogram_visual));
    }
    if (m_word_cloud_visual.isSet()) {
        obj.insert(QString("WordCloudVisual"), ::OpenAPI::toJsonValue(m_word_cloud_visual));
    }
    if (m_insight_visual.isSet()) {
        obj.insert(QString("InsightVisual"), ::OpenAPI::toJsonValue(m_insight_visual));
    }
    if (m_sankey_diagram_visual.isSet()) {
        obj.insert(QString("SankeyDiagramVisual"), ::OpenAPI::toJsonValue(m_sankey_diagram_visual));
    }
    if (m_custom_content_visual.isSet()) {
        obj.insert(QString("CustomContentVisual"), ::OpenAPI::toJsonValue(m_custom_content_visual));
    }
    if (m_empty_visual.isSet()) {
        obj.insert(QString("EmptyVisual"), ::OpenAPI::toJsonValue(m_empty_visual));
    }
    if (m_radar_chart_visual.isSet()) {
        obj.insert(QString("RadarChartVisual"), ::OpenAPI::toJsonValue(m_radar_chart_visual));
    }
    return obj;
}

OAIVisual_TableVisual OAIVisual::getTableVisual() const {
    return m_table_visual;
}
void OAIVisual::setTableVisual(const OAIVisual_TableVisual &table_visual) {
    m_table_visual = table_visual;
    m_table_visual_isSet = true;
}

bool OAIVisual::is_table_visual_Set() const{
    return m_table_visual_isSet;
}

bool OAIVisual::is_table_visual_Valid() const{
    return m_table_visual_isValid;
}

OAIVisual_PivotTableVisual OAIVisual::getPivotTableVisual() const {
    return m_pivot_table_visual;
}
void OAIVisual::setPivotTableVisual(const OAIVisual_PivotTableVisual &pivot_table_visual) {
    m_pivot_table_visual = pivot_table_visual;
    m_pivot_table_visual_isSet = true;
}

bool OAIVisual::is_pivot_table_visual_Set() const{
    return m_pivot_table_visual_isSet;
}

bool OAIVisual::is_pivot_table_visual_Valid() const{
    return m_pivot_table_visual_isValid;
}

OAIVisual_BarChartVisual OAIVisual::getBarChartVisual() const {
    return m_bar_chart_visual;
}
void OAIVisual::setBarChartVisual(const OAIVisual_BarChartVisual &bar_chart_visual) {
    m_bar_chart_visual = bar_chart_visual;
    m_bar_chart_visual_isSet = true;
}

bool OAIVisual::is_bar_chart_visual_Set() const{
    return m_bar_chart_visual_isSet;
}

bool OAIVisual::is_bar_chart_visual_Valid() const{
    return m_bar_chart_visual_isValid;
}

OAIVisual_KPIVisual OAIVisual::getKpiVisual() const {
    return m_kpi_visual;
}
void OAIVisual::setKpiVisual(const OAIVisual_KPIVisual &kpi_visual) {
    m_kpi_visual = kpi_visual;
    m_kpi_visual_isSet = true;
}

bool OAIVisual::is_kpi_visual_Set() const{
    return m_kpi_visual_isSet;
}

bool OAIVisual::is_kpi_visual_Valid() const{
    return m_kpi_visual_isValid;
}

OAIVisual_PieChartVisual OAIVisual::getPieChartVisual() const {
    return m_pie_chart_visual;
}
void OAIVisual::setPieChartVisual(const OAIVisual_PieChartVisual &pie_chart_visual) {
    m_pie_chart_visual = pie_chart_visual;
    m_pie_chart_visual_isSet = true;
}

bool OAIVisual::is_pie_chart_visual_Set() const{
    return m_pie_chart_visual_isSet;
}

bool OAIVisual::is_pie_chart_visual_Valid() const{
    return m_pie_chart_visual_isValid;
}

OAIVisual_GaugeChartVisual OAIVisual::getGaugeChartVisual() const {
    return m_gauge_chart_visual;
}
void OAIVisual::setGaugeChartVisual(const OAIVisual_GaugeChartVisual &gauge_chart_visual) {
    m_gauge_chart_visual = gauge_chart_visual;
    m_gauge_chart_visual_isSet = true;
}

bool OAIVisual::is_gauge_chart_visual_Set() const{
    return m_gauge_chart_visual_isSet;
}

bool OAIVisual::is_gauge_chart_visual_Valid() const{
    return m_gauge_chart_visual_isValid;
}

OAIVisual_LineChartVisual OAIVisual::getLineChartVisual() const {
    return m_line_chart_visual;
}
void OAIVisual::setLineChartVisual(const OAIVisual_LineChartVisual &line_chart_visual) {
    m_line_chart_visual = line_chart_visual;
    m_line_chart_visual_isSet = true;
}

bool OAIVisual::is_line_chart_visual_Set() const{
    return m_line_chart_visual_isSet;
}

bool OAIVisual::is_line_chart_visual_Valid() const{
    return m_line_chart_visual_isValid;
}

OAIVisual_HeatMapVisual OAIVisual::getHeatMapVisual() const {
    return m_heat_map_visual;
}
void OAIVisual::setHeatMapVisual(const OAIVisual_HeatMapVisual &heat_map_visual) {
    m_heat_map_visual = heat_map_visual;
    m_heat_map_visual_isSet = true;
}

bool OAIVisual::is_heat_map_visual_Set() const{
    return m_heat_map_visual_isSet;
}

bool OAIVisual::is_heat_map_visual_Valid() const{
    return m_heat_map_visual_isValid;
}

OAIVisual_TreeMapVisual OAIVisual::getTreeMapVisual() const {
    return m_tree_map_visual;
}
void OAIVisual::setTreeMapVisual(const OAIVisual_TreeMapVisual &tree_map_visual) {
    m_tree_map_visual = tree_map_visual;
    m_tree_map_visual_isSet = true;
}

bool OAIVisual::is_tree_map_visual_Set() const{
    return m_tree_map_visual_isSet;
}

bool OAIVisual::is_tree_map_visual_Valid() const{
    return m_tree_map_visual_isValid;
}

OAIVisual_GeospatialMapVisual OAIVisual::getGeospatialMapVisual() const {
    return m_geospatial_map_visual;
}
void OAIVisual::setGeospatialMapVisual(const OAIVisual_GeospatialMapVisual &geospatial_map_visual) {
    m_geospatial_map_visual = geospatial_map_visual;
    m_geospatial_map_visual_isSet = true;
}

bool OAIVisual::is_geospatial_map_visual_Set() const{
    return m_geospatial_map_visual_isSet;
}

bool OAIVisual::is_geospatial_map_visual_Valid() const{
    return m_geospatial_map_visual_isValid;
}

OAIVisual_FilledMapVisual OAIVisual::getFilledMapVisual() const {
    return m_filled_map_visual;
}
void OAIVisual::setFilledMapVisual(const OAIVisual_FilledMapVisual &filled_map_visual) {
    m_filled_map_visual = filled_map_visual;
    m_filled_map_visual_isSet = true;
}

bool OAIVisual::is_filled_map_visual_Set() const{
    return m_filled_map_visual_isSet;
}

bool OAIVisual::is_filled_map_visual_Valid() const{
    return m_filled_map_visual_isValid;
}

OAIVisual_FunnelChartVisual OAIVisual::getFunnelChartVisual() const {
    return m_funnel_chart_visual;
}
void OAIVisual::setFunnelChartVisual(const OAIVisual_FunnelChartVisual &funnel_chart_visual) {
    m_funnel_chart_visual = funnel_chart_visual;
    m_funnel_chart_visual_isSet = true;
}

bool OAIVisual::is_funnel_chart_visual_Set() const{
    return m_funnel_chart_visual_isSet;
}

bool OAIVisual::is_funnel_chart_visual_Valid() const{
    return m_funnel_chart_visual_isValid;
}

OAIVisual_ScatterPlotVisual OAIVisual::getScatterPlotVisual() const {
    return m_scatter_plot_visual;
}
void OAIVisual::setScatterPlotVisual(const OAIVisual_ScatterPlotVisual &scatter_plot_visual) {
    m_scatter_plot_visual = scatter_plot_visual;
    m_scatter_plot_visual_isSet = true;
}

bool OAIVisual::is_scatter_plot_visual_Set() const{
    return m_scatter_plot_visual_isSet;
}

bool OAIVisual::is_scatter_plot_visual_Valid() const{
    return m_scatter_plot_visual_isValid;
}

OAIVisual_ComboChartVisual OAIVisual::getComboChartVisual() const {
    return m_combo_chart_visual;
}
void OAIVisual::setComboChartVisual(const OAIVisual_ComboChartVisual &combo_chart_visual) {
    m_combo_chart_visual = combo_chart_visual;
    m_combo_chart_visual_isSet = true;
}

bool OAIVisual::is_combo_chart_visual_Set() const{
    return m_combo_chart_visual_isSet;
}

bool OAIVisual::is_combo_chart_visual_Valid() const{
    return m_combo_chart_visual_isValid;
}

OAIVisual_BoxPlotVisual OAIVisual::getBoxPlotVisual() const {
    return m_box_plot_visual;
}
void OAIVisual::setBoxPlotVisual(const OAIVisual_BoxPlotVisual &box_plot_visual) {
    m_box_plot_visual = box_plot_visual;
    m_box_plot_visual_isSet = true;
}

bool OAIVisual::is_box_plot_visual_Set() const{
    return m_box_plot_visual_isSet;
}

bool OAIVisual::is_box_plot_visual_Valid() const{
    return m_box_plot_visual_isValid;
}

OAIVisual_WaterfallVisual OAIVisual::getWaterfallVisual() const {
    return m_waterfall_visual;
}
void OAIVisual::setWaterfallVisual(const OAIVisual_WaterfallVisual &waterfall_visual) {
    m_waterfall_visual = waterfall_visual;
    m_waterfall_visual_isSet = true;
}

bool OAIVisual::is_waterfall_visual_Set() const{
    return m_waterfall_visual_isSet;
}

bool OAIVisual::is_waterfall_visual_Valid() const{
    return m_waterfall_visual_isValid;
}

OAIVisual_HistogramVisual OAIVisual::getHistogramVisual() const {
    return m_histogram_visual;
}
void OAIVisual::setHistogramVisual(const OAIVisual_HistogramVisual &histogram_visual) {
    m_histogram_visual = histogram_visual;
    m_histogram_visual_isSet = true;
}

bool OAIVisual::is_histogram_visual_Set() const{
    return m_histogram_visual_isSet;
}

bool OAIVisual::is_histogram_visual_Valid() const{
    return m_histogram_visual_isValid;
}

OAIVisual_WordCloudVisual OAIVisual::getWordCloudVisual() const {
    return m_word_cloud_visual;
}
void OAIVisual::setWordCloudVisual(const OAIVisual_WordCloudVisual &word_cloud_visual) {
    m_word_cloud_visual = word_cloud_visual;
    m_word_cloud_visual_isSet = true;
}

bool OAIVisual::is_word_cloud_visual_Set() const{
    return m_word_cloud_visual_isSet;
}

bool OAIVisual::is_word_cloud_visual_Valid() const{
    return m_word_cloud_visual_isValid;
}

OAIVisual_InsightVisual OAIVisual::getInsightVisual() const {
    return m_insight_visual;
}
void OAIVisual::setInsightVisual(const OAIVisual_InsightVisual &insight_visual) {
    m_insight_visual = insight_visual;
    m_insight_visual_isSet = true;
}

bool OAIVisual::is_insight_visual_Set() const{
    return m_insight_visual_isSet;
}

bool OAIVisual::is_insight_visual_Valid() const{
    return m_insight_visual_isValid;
}

OAIVisual_SankeyDiagramVisual OAIVisual::getSankeyDiagramVisual() const {
    return m_sankey_diagram_visual;
}
void OAIVisual::setSankeyDiagramVisual(const OAIVisual_SankeyDiagramVisual &sankey_diagram_visual) {
    m_sankey_diagram_visual = sankey_diagram_visual;
    m_sankey_diagram_visual_isSet = true;
}

bool OAIVisual::is_sankey_diagram_visual_Set() const{
    return m_sankey_diagram_visual_isSet;
}

bool OAIVisual::is_sankey_diagram_visual_Valid() const{
    return m_sankey_diagram_visual_isValid;
}

OAIVisual_CustomContentVisual OAIVisual::getCustomContentVisual() const {
    return m_custom_content_visual;
}
void OAIVisual::setCustomContentVisual(const OAIVisual_CustomContentVisual &custom_content_visual) {
    m_custom_content_visual = custom_content_visual;
    m_custom_content_visual_isSet = true;
}

bool OAIVisual::is_custom_content_visual_Set() const{
    return m_custom_content_visual_isSet;
}

bool OAIVisual::is_custom_content_visual_Valid() const{
    return m_custom_content_visual_isValid;
}

OAIVisual_EmptyVisual OAIVisual::getEmptyVisual() const {
    return m_empty_visual;
}
void OAIVisual::setEmptyVisual(const OAIVisual_EmptyVisual &empty_visual) {
    m_empty_visual = empty_visual;
    m_empty_visual_isSet = true;
}

bool OAIVisual::is_empty_visual_Set() const{
    return m_empty_visual_isSet;
}

bool OAIVisual::is_empty_visual_Valid() const{
    return m_empty_visual_isValid;
}

OAIVisual_RadarChartVisual OAIVisual::getRadarChartVisual() const {
    return m_radar_chart_visual;
}
void OAIVisual::setRadarChartVisual(const OAIVisual_RadarChartVisual &radar_chart_visual) {
    m_radar_chart_visual = radar_chart_visual;
    m_radar_chart_visual_isSet = true;
}

bool OAIVisual::is_radar_chart_visual_Set() const{
    return m_radar_chart_visual_isSet;
}

bool OAIVisual::is_radar_chart_visual_Valid() const{
    return m_radar_chart_visual_isValid;
}

bool OAIVisual::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivot_table_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bar_chart_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kpi_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pie_chart_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gauge_chart_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_chart_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heat_map_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree_map_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geospatial_map_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filled_map_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_funnel_chart_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scatter_plot_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_combo_chart_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_plot_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_waterfall_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_cloud_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insight_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sankey_diagram_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_content_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_radar_chart_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisual::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
