/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterControl_Slider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterControl_Slider::OAIFilterControl_Slider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterControl_Slider::OAIFilterControl_Slider() {
    this->initializeModel();
}

OAIFilterControl_Slider::~OAIFilterControl_Slider() {}

void OAIFilterControl_Slider::initializeModel() {

    m_filter_control_id_isSet = false;
    m_filter_control_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_source_filter_id_isSet = false;
    m_source_filter_id_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_maximum_value_isSet = false;
    m_maximum_value_isValid = false;

    m_minimum_value_isSet = false;
    m_minimum_value_isValid = false;

    m_step_size_isSet = false;
    m_step_size_isValid = false;
}

void OAIFilterControl_Slider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterControl_Slider::fromJsonObject(QJsonObject json) {

    m_filter_control_id_isValid = ::OpenAPI::fromJsonValue(m_filter_control_id, json[QString("FilterControlId")]);
    m_filter_control_id_isSet = !json[QString("FilterControlId")].isNull() && m_filter_control_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_source_filter_id_isValid = ::OpenAPI::fromJsonValue(m_source_filter_id, json[QString("SourceFilterId")]);
    m_source_filter_id_isSet = !json[QString("SourceFilterId")].isNull() && m_source_filter_id_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("DisplayOptions")]);
    m_display_options_isSet = !json[QString("DisplayOptions")].isNull() && m_display_options_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_maximum_value_isValid = ::OpenAPI::fromJsonValue(m_maximum_value, json[QString("MaximumValue")]);
    m_maximum_value_isSet = !json[QString("MaximumValue")].isNull() && m_maximum_value_isValid;

    m_minimum_value_isValid = ::OpenAPI::fromJsonValue(m_minimum_value, json[QString("MinimumValue")]);
    m_minimum_value_isSet = !json[QString("MinimumValue")].isNull() && m_minimum_value_isValid;

    m_step_size_isValid = ::OpenAPI::fromJsonValue(m_step_size, json[QString("StepSize")]);
    m_step_size_isSet = !json[QString("StepSize")].isNull() && m_step_size_isValid;
}

QString OAIFilterControl_Slider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterControl_Slider::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_control_id_isSet) {
        obj.insert(QString("FilterControlId"), ::OpenAPI::toJsonValue(m_filter_control_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_source_filter_id_isSet) {
        obj.insert(QString("SourceFilterId"), ::OpenAPI::toJsonValue(m_source_filter_id));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("DisplayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_maximum_value_isSet) {
        obj.insert(QString("MaximumValue"), ::OpenAPI::toJsonValue(m_maximum_value));
    }
    if (m_minimum_value_isSet) {
        obj.insert(QString("MinimumValue"), ::OpenAPI::toJsonValue(m_minimum_value));
    }
    if (m_step_size_isSet) {
        obj.insert(QString("StepSize"), ::OpenAPI::toJsonValue(m_step_size));
    }
    return obj;
}

QString OAIFilterControl_Slider::getFilterControlId() const {
    return m_filter_control_id;
}
void OAIFilterControl_Slider::setFilterControlId(const QString &filter_control_id) {
    m_filter_control_id = filter_control_id;
    m_filter_control_id_isSet = true;
}

bool OAIFilterControl_Slider::is_filter_control_id_Set() const{
    return m_filter_control_id_isSet;
}

bool OAIFilterControl_Slider::is_filter_control_id_Valid() const{
    return m_filter_control_id_isValid;
}

QString OAIFilterControl_Slider::getTitle() const {
    return m_title;
}
void OAIFilterControl_Slider::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFilterControl_Slider::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFilterControl_Slider::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFilterControl_Slider::getSourceFilterId() const {
    return m_source_filter_id;
}
void OAIFilterControl_Slider::setSourceFilterId(const QString &source_filter_id) {
    m_source_filter_id = source_filter_id;
    m_source_filter_id_isSet = true;
}

bool OAIFilterControl_Slider::is_source_filter_id_Set() const{
    return m_source_filter_id_isSet;
}

bool OAIFilterControl_Slider::is_source_filter_id_Valid() const{
    return m_source_filter_id_isValid;
}

OAIFilterSliderControl_DisplayOptions OAIFilterControl_Slider::getDisplayOptions() const {
    return m_display_options;
}
void OAIFilterControl_Slider::setDisplayOptions(const OAIFilterSliderControl_DisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIFilterControl_Slider::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIFilterControl_Slider::is_display_options_Valid() const{
    return m_display_options_isValid;
}

OAISheetControlSliderType OAIFilterControl_Slider::getType() const {
    return m_type;
}
void OAIFilterControl_Slider::setType(const OAISheetControlSliderType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFilterControl_Slider::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFilterControl_Slider::is_type_Valid() const{
    return m_type_isValid;
}

double OAIFilterControl_Slider::getMaximumValue() const {
    return m_maximum_value;
}
void OAIFilterControl_Slider::setMaximumValue(const double &maximum_value) {
    m_maximum_value = maximum_value;
    m_maximum_value_isSet = true;
}

bool OAIFilterControl_Slider::is_maximum_value_Set() const{
    return m_maximum_value_isSet;
}

bool OAIFilterControl_Slider::is_maximum_value_Valid() const{
    return m_maximum_value_isValid;
}

double OAIFilterControl_Slider::getMinimumValue() const {
    return m_minimum_value;
}
void OAIFilterControl_Slider::setMinimumValue(const double &minimum_value) {
    m_minimum_value = minimum_value;
    m_minimum_value_isSet = true;
}

bool OAIFilterControl_Slider::is_minimum_value_Set() const{
    return m_minimum_value_isSet;
}

bool OAIFilterControl_Slider::is_minimum_value_Valid() const{
    return m_minimum_value_isValid;
}

double OAIFilterControl_Slider::getStepSize() const {
    return m_step_size;
}
void OAIFilterControl_Slider::setStepSize(const double &step_size) {
    m_step_size = step_size;
    m_step_size_isSet = true;
}

bool OAIFilterControl_Slider::is_step_size_Set() const{
    return m_step_size_isSet;
}

bool OAIFilterControl_Slider::is_step_size_Valid() const{
    return m_step_size_isValid;
}

bool OAIFilterControl_Slider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterControl_Slider::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_control_id_isValid && m_title_isValid && m_source_filter_id_isValid && m_maximum_value_isValid && m_minimum_value_isValid && m_step_size_isValid && true;
}

} // namespace OpenAPI
