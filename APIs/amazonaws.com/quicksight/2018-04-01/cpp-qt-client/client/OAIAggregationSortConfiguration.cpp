/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationSortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationSortConfiguration::OAIAggregationSortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationSortConfiguration::OAIAggregationSortConfiguration() {
    this->initializeModel();
}

OAIAggregationSortConfiguration::~OAIAggregationSortConfiguration() {}

void OAIAggregationSortConfiguration::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_sort_direction_isSet = false;
    m_sort_direction_isValid = false;

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;
}

void OAIAggregationSortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationSortConfiguration::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_sort_direction_isValid = ::OpenAPI::fromJsonValue(m_sort_direction, json[QString("SortDirection")]);
    m_sort_direction_isSet = !json[QString("SortDirection")].isNull() && m_sort_direction_isValid;

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("AggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("AggregationFunction")].isNull() && m_aggregation_function_isValid;
}

QString OAIAggregationSortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationSortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_sort_direction.isSet()) {
        obj.insert(QString("SortDirection"), ::OpenAPI::toJsonValue(m_sort_direction));
    }
    if (m_aggregation_function.isSet()) {
        obj.insert(QString("AggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    return obj;
}

OAIAggregationSortConfiguration_Column OAIAggregationSortConfiguration::getColumn() const {
    return m_column;
}
void OAIAggregationSortConfiguration::setColumn(const OAIAggregationSortConfiguration_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIAggregationSortConfiguration::is_column_Set() const{
    return m_column_isSet;
}

bool OAIAggregationSortConfiguration::is_column_Valid() const{
    return m_column_isValid;
}

OAISortDirection OAIAggregationSortConfiguration::getSortDirection() const {
    return m_sort_direction;
}
void OAIAggregationSortConfiguration::setSortDirection(const OAISortDirection &sort_direction) {
    m_sort_direction = sort_direction;
    m_sort_direction_isSet = true;
}

bool OAIAggregationSortConfiguration::is_sort_direction_Set() const{
    return m_sort_direction_isSet;
}

bool OAIAggregationSortConfiguration::is_sort_direction_Valid() const{
    return m_sort_direction_isValid;
}

OAIAggregationSortConfiguration_AggregationFunction OAIAggregationSortConfiguration::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAIAggregationSortConfiguration::setAggregationFunction(const OAIAggregationSortConfiguration_AggregationFunction &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAIAggregationSortConfiguration::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAIAggregationSortConfiguration::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

bool OAIAggregationSortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationSortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_isValid && m_sort_direction_isValid && true;
}

} // namespace OpenAPI
