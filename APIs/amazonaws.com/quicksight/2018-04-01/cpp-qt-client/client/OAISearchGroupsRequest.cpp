/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchGroupsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchGroupsRequest::OAISearchGroupsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchGroupsRequest::OAISearchGroupsRequest() {
    this->initializeModel();
}

OAISearchGroupsRequest::~OAISearchGroupsRequest() {}

void OAISearchGroupsRequest::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAISearchGroupsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchGroupsRequest::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;
}

QString OAISearchGroupsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchGroupsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QList OAISearchGroupsRequest::getFilters() const {
    return m_filters;
}
void OAISearchGroupsRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchGroupsRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchGroupsRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAISearchGroupsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchGroupsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filters_isValid && true;
}

} // namespace OpenAPI
