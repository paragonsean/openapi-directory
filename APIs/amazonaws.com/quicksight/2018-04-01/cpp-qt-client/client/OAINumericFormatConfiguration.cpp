/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericFormatConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericFormatConfiguration::OAINumericFormatConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericFormatConfiguration::OAINumericFormatConfiguration() {
    this->initializeModel();
}

OAINumericFormatConfiguration::~OAINumericFormatConfiguration() {}

void OAINumericFormatConfiguration::initializeModel() {

    m_number_display_format_configuration_isSet = false;
    m_number_display_format_configuration_isValid = false;

    m_currency_display_format_configuration_isSet = false;
    m_currency_display_format_configuration_isValid = false;

    m_percentage_display_format_configuration_isSet = false;
    m_percentage_display_format_configuration_isValid = false;
}

void OAINumericFormatConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericFormatConfiguration::fromJsonObject(QJsonObject json) {

    m_number_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_number_display_format_configuration, json[QString("NumberDisplayFormatConfiguration")]);
    m_number_display_format_configuration_isSet = !json[QString("NumberDisplayFormatConfiguration")].isNull() && m_number_display_format_configuration_isValid;

    m_currency_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_currency_display_format_configuration, json[QString("CurrencyDisplayFormatConfiguration")]);
    m_currency_display_format_configuration_isSet = !json[QString("CurrencyDisplayFormatConfiguration")].isNull() && m_currency_display_format_configuration_isValid;

    m_percentage_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_percentage_display_format_configuration, json[QString("PercentageDisplayFormatConfiguration")]);
    m_percentage_display_format_configuration_isSet = !json[QString("PercentageDisplayFormatConfiguration")].isNull() && m_percentage_display_format_configuration_isValid;
}

QString OAINumericFormatConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericFormatConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_number_display_format_configuration.isSet()) {
        obj.insert(QString("NumberDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_number_display_format_configuration));
    }
    if (m_currency_display_format_configuration.isSet()) {
        obj.insert(QString("CurrencyDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_currency_display_format_configuration));
    }
    if (m_percentage_display_format_configuration.isSet()) {
        obj.insert(QString("PercentageDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_percentage_display_format_configuration));
    }
    return obj;
}

OAINumericFormatConfiguration_NumberDisplayFormatConfiguration OAINumericFormatConfiguration::getNumberDisplayFormatConfiguration() const {
    return m_number_display_format_configuration;
}
void OAINumericFormatConfiguration::setNumberDisplayFormatConfiguration(const OAINumericFormatConfiguration_NumberDisplayFormatConfiguration &number_display_format_configuration) {
    m_number_display_format_configuration = number_display_format_configuration;
    m_number_display_format_configuration_isSet = true;
}

bool OAINumericFormatConfiguration::is_number_display_format_configuration_Set() const{
    return m_number_display_format_configuration_isSet;
}

bool OAINumericFormatConfiguration::is_number_display_format_configuration_Valid() const{
    return m_number_display_format_configuration_isValid;
}

OAINumericFormatConfiguration_CurrencyDisplayFormatConfiguration OAINumericFormatConfiguration::getCurrencyDisplayFormatConfiguration() const {
    return m_currency_display_format_configuration;
}
void OAINumericFormatConfiguration::setCurrencyDisplayFormatConfiguration(const OAINumericFormatConfiguration_CurrencyDisplayFormatConfiguration &currency_display_format_configuration) {
    m_currency_display_format_configuration = currency_display_format_configuration;
    m_currency_display_format_configuration_isSet = true;
}

bool OAINumericFormatConfiguration::is_currency_display_format_configuration_Set() const{
    return m_currency_display_format_configuration_isSet;
}

bool OAINumericFormatConfiguration::is_currency_display_format_configuration_Valid() const{
    return m_currency_display_format_configuration_isValid;
}

OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration OAINumericFormatConfiguration::getPercentageDisplayFormatConfiguration() const {
    return m_percentage_display_format_configuration;
}
void OAINumericFormatConfiguration::setPercentageDisplayFormatConfiguration(const OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration &percentage_display_format_configuration) {
    m_percentage_display_format_configuration = percentage_display_format_configuration;
    m_percentage_display_format_configuration_isSet = true;
}

bool OAINumericFormatConfiguration::is_percentage_display_format_configuration_Set() const{
    return m_percentage_display_format_configuration_isSet;
}

bool OAINumericFormatConfiguration::is_percentage_display_format_configuration_Valid() const{
    return m_percentage_display_format_configuration_isValid;
}

bool OAINumericFormatConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericFormatConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
