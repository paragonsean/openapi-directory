/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNamespaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNamespaceRequest::OAICreateNamespaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNamespaceRequest::OAICreateNamespaceRequest() {
    this->initializeModel();
}

OAICreateNamespaceRequest::~OAICreateNamespaceRequest() {}

void OAICreateNamespaceRequest::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_identity_store_isSet = false;
    m_identity_store_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateNamespaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNamespaceRequest::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_identity_store_isValid = ::OpenAPI::fromJsonValue(m_identity_store, json[QString("IdentityStore")]);
    m_identity_store_isSet = !json[QString("IdentityStore")].isNull() && m_identity_store_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateNamespaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNamespaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_identity_store.isSet()) {
        obj.insert(QString("IdentityStore"), ::OpenAPI::toJsonValue(m_identity_store));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateNamespaceRequest::getRNamespace() const {
    return m_r_namespace;
}
void OAICreateNamespaceRequest::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAICreateNamespaceRequest::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAICreateNamespaceRequest::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

OAIIdentityStore OAICreateNamespaceRequest::getIdentityStore() const {
    return m_identity_store;
}
void OAICreateNamespaceRequest::setIdentityStore(const OAIIdentityStore &identity_store) {
    m_identity_store = identity_store;
    m_identity_store_isSet = true;
}

bool OAICreateNamespaceRequest::is_identity_store_Set() const{
    return m_identity_store_isSet;
}

bool OAICreateNamespaceRequest::is_identity_store_Valid() const{
    return m_identity_store_isValid;
}

QList OAICreateNamespaceRequest::getTags() const {
    return m_tags;
}
void OAICreateNamespaceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateNamespaceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateNamespaceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateNamespaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_store.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNamespaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_namespace_isValid && m_identity_store_isValid && true;
}

} // namespace OpenAPI
