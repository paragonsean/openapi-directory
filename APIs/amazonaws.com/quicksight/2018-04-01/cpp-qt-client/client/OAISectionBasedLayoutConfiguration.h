/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISectionBasedLayoutConfiguration.h
 *
 * The configuration for a section-based layout.
 */

#ifndef OAISectionBasedLayoutConfiguration_H
#define OAISectionBasedLayoutConfiguration_H

#include <QJsonObject>

#include "OAISectionBasedLayoutConfiguration_CanvasSizeOptions.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISectionBasedLayoutConfiguration_CanvasSizeOptions;

class OAISectionBasedLayoutConfiguration : public OAIObject {
public:
    OAISectionBasedLayoutConfiguration();
    OAISectionBasedLayoutConfiguration(QString json);
    ~OAISectionBasedLayoutConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getHeaderSections() const;
    void setHeaderSections(const QList &header_sections);
    bool is_header_sections_Set() const;
    bool is_header_sections_Valid() const;

    QList getBodySections() const;
    void setBodySections(const QList &body_sections);
    bool is_body_sections_Set() const;
    bool is_body_sections_Valid() const;

    QList getFooterSections() const;
    void setFooterSections(const QList &footer_sections);
    bool is_footer_sections_Set() const;
    bool is_footer_sections_Valid() const;

    OAISectionBasedLayoutConfiguration_CanvasSizeOptions getCanvasSizeOptions() const;
    void setCanvasSizeOptions(const OAISectionBasedLayoutConfiguration_CanvasSizeOptions &canvas_size_options);
    bool is_canvas_size_options_Set() const;
    bool is_canvas_size_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_header_sections;
    bool m_header_sections_isSet;
    bool m_header_sections_isValid;

    QList m_body_sections;
    bool m_body_sections_isSet;
    bool m_body_sections_isValid;

    QList m_footer_sections;
    bool m_footer_sections_isSet;
    bool m_footer_sections_isValid;

    OAISectionBasedLayoutConfiguration_CanvasSizeOptions m_canvas_size_options;
    bool m_canvas_size_options_isSet;
    bool m_canvas_size_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISectionBasedLayoutConfiguration)

#endif // OAISectionBasedLayoutConfiguration_H
