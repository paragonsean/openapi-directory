/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAnalysisResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAnalysisResponse::OAIDeleteAnalysisResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAnalysisResponse::OAIDeleteAnalysisResponse() {
    this->initializeModel();
}

OAIDeleteAnalysisResponse::~OAIDeleteAnalysisResponse() {}

void OAIDeleteAnalysisResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_deletion_time_isSet = false;
    m_deletion_time_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDeleteAnalysisResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAnalysisResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_deletion_time_isValid = ::OpenAPI::fromJsonValue(m_deletion_time, json[QString("DeletionTime")]);
    m_deletion_time_isSet = !json[QString("DeletionTime")].isNull() && m_deletion_time_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIDeleteAnalysisResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAnalysisResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_deletion_time_isSet) {
        obj.insert(QString("DeletionTime"), ::OpenAPI::toJsonValue(m_deletion_time));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

qint32 OAIDeleteAnalysisResponse::getStatus() const {
    return m_status;
}
void OAIDeleteAnalysisResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteAnalysisResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteAnalysisResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeleteAnalysisResponse::getArn() const {
    return m_arn;
}
void OAIDeleteAnalysisResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeleteAnalysisResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeleteAnalysisResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDeleteAnalysisResponse::getAnalysisId() const {
    return m_analysis_id;
}
void OAIDeleteAnalysisResponse::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIDeleteAnalysisResponse::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIDeleteAnalysisResponse::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

QDateTime OAIDeleteAnalysisResponse::getDeletionTime() const {
    return m_deletion_time;
}
void OAIDeleteAnalysisResponse::setDeletionTime(const QDateTime &deletion_time) {
    m_deletion_time = deletion_time;
    m_deletion_time_isSet = true;
}

bool OAIDeleteAnalysisResponse::is_deletion_time_Set() const{
    return m_deletion_time_isSet;
}

bool OAIDeleteAnalysisResponse::is_deletion_time_Valid() const{
    return m_deletion_time_isValid;
}

QString OAIDeleteAnalysisResponse::getRequestId() const {
    return m_request_id;
}
void OAIDeleteAnalysisResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDeleteAnalysisResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDeleteAnalysisResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDeleteAnalysisResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAnalysisResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
