/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnonymousUserEmbeddingExperienceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnonymousUserEmbeddingExperienceConfiguration::OAIAnonymousUserEmbeddingExperienceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnonymousUserEmbeddingExperienceConfiguration::OAIAnonymousUserEmbeddingExperienceConfiguration() {
    this->initializeModel();
}

OAIAnonymousUserEmbeddingExperienceConfiguration::~OAIAnonymousUserEmbeddingExperienceConfiguration() {}

void OAIAnonymousUserEmbeddingExperienceConfiguration::initializeModel() {

    m_dashboard_isSet = false;
    m_dashboard_isValid = false;

    m_dashboard_visual_isSet = false;
    m_dashboard_visual_isValid = false;

    m_q_search_bar_isSet = false;
    m_q_search_bar_isValid = false;
}

void OAIAnonymousUserEmbeddingExperienceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnonymousUserEmbeddingExperienceConfiguration::fromJsonObject(QJsonObject json) {

    m_dashboard_isValid = ::OpenAPI::fromJsonValue(m_dashboard, json[QString("Dashboard")]);
    m_dashboard_isSet = !json[QString("Dashboard")].isNull() && m_dashboard_isValid;

    m_dashboard_visual_isValid = ::OpenAPI::fromJsonValue(m_dashboard_visual, json[QString("DashboardVisual")]);
    m_dashboard_visual_isSet = !json[QString("DashboardVisual")].isNull() && m_dashboard_visual_isValid;

    m_q_search_bar_isValid = ::OpenAPI::fromJsonValue(m_q_search_bar, json[QString("QSearchBar")]);
    m_q_search_bar_isSet = !json[QString("QSearchBar")].isNull() && m_q_search_bar_isValid;
}

QString OAIAnonymousUserEmbeddingExperienceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnonymousUserEmbeddingExperienceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard.isSet()) {
        obj.insert(QString("Dashboard"), ::OpenAPI::toJsonValue(m_dashboard));
    }
    if (m_dashboard_visual.isSet()) {
        obj.insert(QString("DashboardVisual"), ::OpenAPI::toJsonValue(m_dashboard_visual));
    }
    if (m_q_search_bar.isSet()) {
        obj.insert(QString("QSearchBar"), ::OpenAPI::toJsonValue(m_q_search_bar));
    }
    return obj;
}

OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_Dashboard OAIAnonymousUserEmbeddingExperienceConfiguration::getDashboard() const {
    return m_dashboard;
}
void OAIAnonymousUserEmbeddingExperienceConfiguration::setDashboard(const OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_Dashboard &dashboard) {
    m_dashboard = dashboard;
    m_dashboard_isSet = true;
}

bool OAIAnonymousUserEmbeddingExperienceConfiguration::is_dashboard_Set() const{
    return m_dashboard_isSet;
}

bool OAIAnonymousUserEmbeddingExperienceConfiguration::is_dashboard_Valid() const{
    return m_dashboard_isValid;
}

OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_DashboardVisual OAIAnonymousUserEmbeddingExperienceConfiguration::getDashboardVisual() const {
    return m_dashboard_visual;
}
void OAIAnonymousUserEmbeddingExperienceConfiguration::setDashboardVisual(const OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_DashboardVisual &dashboard_visual) {
    m_dashboard_visual = dashboard_visual;
    m_dashboard_visual_isSet = true;
}

bool OAIAnonymousUserEmbeddingExperienceConfiguration::is_dashboard_visual_Set() const{
    return m_dashboard_visual_isSet;
}

bool OAIAnonymousUserEmbeddingExperienceConfiguration::is_dashboard_visual_Valid() const{
    return m_dashboard_visual_isValid;
}

OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_QSearchBar OAIAnonymousUserEmbeddingExperienceConfiguration::getQSearchBar() const {
    return m_q_search_bar;
}
void OAIAnonymousUserEmbeddingExperienceConfiguration::setQSearchBar(const OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_QSearchBar &q_search_bar) {
    m_q_search_bar = q_search_bar;
    m_q_search_bar_isSet = true;
}

bool OAIAnonymousUserEmbeddingExperienceConfiguration::is_q_search_bar_Set() const{
    return m_q_search_bar_isSet;
}

bool OAIAnonymousUserEmbeddingExperienceConfiguration::is_q_search_bar_Valid() const{
    return m_q_search_bar_isValid;
}

bool OAIAnonymousUserEmbeddingExperienceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_q_search_bar.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnonymousUserEmbeddingExperienceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
