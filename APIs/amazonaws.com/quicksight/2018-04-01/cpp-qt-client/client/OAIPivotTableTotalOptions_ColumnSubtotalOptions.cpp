/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableTotalOptions_ColumnSubtotalOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableTotalOptions_ColumnSubtotalOptions::OAIPivotTableTotalOptions_ColumnSubtotalOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableTotalOptions_ColumnSubtotalOptions::OAIPivotTableTotalOptions_ColumnSubtotalOptions() {
    this->initializeModel();
}

OAIPivotTableTotalOptions_ColumnSubtotalOptions::~OAIPivotTableTotalOptions_ColumnSubtotalOptions() {}

void OAIPivotTableTotalOptions_ColumnSubtotalOptions::initializeModel() {

    m_totals_visibility_isSet = false;
    m_totals_visibility_isValid = false;

    m_custom_label_isSet = false;
    m_custom_label_isValid = false;

    m_field_level_isSet = false;
    m_field_level_isValid = false;

    m_field_level_options_isSet = false;
    m_field_level_options_isValid = false;

    m_total_cell_style_isSet = false;
    m_total_cell_style_isValid = false;

    m_value_cell_style_isSet = false;
    m_value_cell_style_isValid = false;

    m_metric_header_cell_style_isSet = false;
    m_metric_header_cell_style_isValid = false;
}

void OAIPivotTableTotalOptions_ColumnSubtotalOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableTotalOptions_ColumnSubtotalOptions::fromJsonObject(QJsonObject json) {

    m_totals_visibility_isValid = ::OpenAPI::fromJsonValue(m_totals_visibility, json[QString("TotalsVisibility")]);
    m_totals_visibility_isSet = !json[QString("TotalsVisibility")].isNull() && m_totals_visibility_isValid;

    m_custom_label_isValid = ::OpenAPI::fromJsonValue(m_custom_label, json[QString("CustomLabel")]);
    m_custom_label_isSet = !json[QString("CustomLabel")].isNull() && m_custom_label_isValid;

    m_field_level_isValid = ::OpenAPI::fromJsonValue(m_field_level, json[QString("FieldLevel")]);
    m_field_level_isSet = !json[QString("FieldLevel")].isNull() && m_field_level_isValid;

    m_field_level_options_isValid = ::OpenAPI::fromJsonValue(m_field_level_options, json[QString("FieldLevelOptions")]);
    m_field_level_options_isSet = !json[QString("FieldLevelOptions")].isNull() && m_field_level_options_isValid;

    m_total_cell_style_isValid = ::OpenAPI::fromJsonValue(m_total_cell_style, json[QString("TotalCellStyle")]);
    m_total_cell_style_isSet = !json[QString("TotalCellStyle")].isNull() && m_total_cell_style_isValid;

    m_value_cell_style_isValid = ::OpenAPI::fromJsonValue(m_value_cell_style, json[QString("ValueCellStyle")]);
    m_value_cell_style_isSet = !json[QString("ValueCellStyle")].isNull() && m_value_cell_style_isValid;

    m_metric_header_cell_style_isValid = ::OpenAPI::fromJsonValue(m_metric_header_cell_style, json[QString("MetricHeaderCellStyle")]);
    m_metric_header_cell_style_isSet = !json[QString("MetricHeaderCellStyle")].isNull() && m_metric_header_cell_style_isValid;
}

QString OAIPivotTableTotalOptions_ColumnSubtotalOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableTotalOptions_ColumnSubtotalOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_totals_visibility.isSet()) {
        obj.insert(QString("TotalsVisibility"), ::OpenAPI::toJsonValue(m_totals_visibility));
    }
    if (m_custom_label_isSet) {
        obj.insert(QString("CustomLabel"), ::OpenAPI::toJsonValue(m_custom_label));
    }
    if (m_field_level.isSet()) {
        obj.insert(QString("FieldLevel"), ::OpenAPI::toJsonValue(m_field_level));
    }
    if (m_field_level_options.isSet()) {
        obj.insert(QString("FieldLevelOptions"), ::OpenAPI::toJsonValue(m_field_level_options));
    }
    if (m_total_cell_style.isSet()) {
        obj.insert(QString("TotalCellStyle"), ::OpenAPI::toJsonValue(m_total_cell_style));
    }
    if (m_value_cell_style.isSet()) {
        obj.insert(QString("ValueCellStyle"), ::OpenAPI::toJsonValue(m_value_cell_style));
    }
    if (m_metric_header_cell_style.isSet()) {
        obj.insert(QString("MetricHeaderCellStyle"), ::OpenAPI::toJsonValue(m_metric_header_cell_style));
    }
    return obj;
}

OAIVisibility OAIPivotTableTotalOptions_ColumnSubtotalOptions::getTotalsVisibility() const {
    return m_totals_visibility;
}
void OAIPivotTableTotalOptions_ColumnSubtotalOptions::setTotalsVisibility(const OAIVisibility &totals_visibility) {
    m_totals_visibility = totals_visibility;
    m_totals_visibility_isSet = true;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_totals_visibility_Set() const{
    return m_totals_visibility_isSet;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_totals_visibility_Valid() const{
    return m_totals_visibility_isValid;
}

QString OAIPivotTableTotalOptions_ColumnSubtotalOptions::getCustomLabel() const {
    return m_custom_label;
}
void OAIPivotTableTotalOptions_ColumnSubtotalOptions::setCustomLabel(const QString &custom_label) {
    m_custom_label = custom_label;
    m_custom_label_isSet = true;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_custom_label_Set() const{
    return m_custom_label_isSet;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_custom_label_Valid() const{
    return m_custom_label_isValid;
}

OAIPivotTableSubtotalLevel OAIPivotTableTotalOptions_ColumnSubtotalOptions::getFieldLevel() const {
    return m_field_level;
}
void OAIPivotTableTotalOptions_ColumnSubtotalOptions::setFieldLevel(const OAIPivotTableSubtotalLevel &field_level) {
    m_field_level = field_level;
    m_field_level_isSet = true;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_field_level_Set() const{
    return m_field_level_isSet;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_field_level_Valid() const{
    return m_field_level_isValid;
}

QList OAIPivotTableTotalOptions_ColumnSubtotalOptions::getFieldLevelOptions() const {
    return m_field_level_options;
}
void OAIPivotTableTotalOptions_ColumnSubtotalOptions::setFieldLevelOptions(const QList &field_level_options) {
    m_field_level_options = field_level_options;
    m_field_level_options_isSet = true;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_field_level_options_Set() const{
    return m_field_level_options_isSet;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_field_level_options_Valid() const{
    return m_field_level_options_isValid;
}

OAISubtotalOptions_TotalCellStyle OAIPivotTableTotalOptions_ColumnSubtotalOptions::getTotalCellStyle() const {
    return m_total_cell_style;
}
void OAIPivotTableTotalOptions_ColumnSubtotalOptions::setTotalCellStyle(const OAISubtotalOptions_TotalCellStyle &total_cell_style) {
    m_total_cell_style = total_cell_style;
    m_total_cell_style_isSet = true;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_total_cell_style_Set() const{
    return m_total_cell_style_isSet;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_total_cell_style_Valid() const{
    return m_total_cell_style_isValid;
}

OAISubtotalOptions_ValueCellStyle OAIPivotTableTotalOptions_ColumnSubtotalOptions::getValueCellStyle() const {
    return m_value_cell_style;
}
void OAIPivotTableTotalOptions_ColumnSubtotalOptions::setValueCellStyle(const OAISubtotalOptions_ValueCellStyle &value_cell_style) {
    m_value_cell_style = value_cell_style;
    m_value_cell_style_isSet = true;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_value_cell_style_Set() const{
    return m_value_cell_style_isSet;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_value_cell_style_Valid() const{
    return m_value_cell_style_isValid;
}

OAISubtotalOptions_MetricHeaderCellStyle OAIPivotTableTotalOptions_ColumnSubtotalOptions::getMetricHeaderCellStyle() const {
    return m_metric_header_cell_style;
}
void OAIPivotTableTotalOptions_ColumnSubtotalOptions::setMetricHeaderCellStyle(const OAISubtotalOptions_MetricHeaderCellStyle &metric_header_cell_style) {
    m_metric_header_cell_style = metric_header_cell_style;
    m_metric_header_cell_style_isSet = true;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_metric_header_cell_style_Set() const{
    return m_metric_header_cell_style_isSet;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::is_metric_header_cell_style_Valid() const{
    return m_metric_header_cell_style_isValid;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_totals_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_level_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_header_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableTotalOptions_ColumnSubtotalOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
