/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICascadingControlConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICascadingControlConfiguration::OAICascadingControlConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICascadingControlConfiguration::OAICascadingControlConfiguration() {
    this->initializeModel();
}

OAICascadingControlConfiguration::~OAICascadingControlConfiguration() {}

void OAICascadingControlConfiguration::initializeModel() {

    m_source_controls_isSet = false;
    m_source_controls_isValid = false;
}

void OAICascadingControlConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICascadingControlConfiguration::fromJsonObject(QJsonObject json) {

    m_source_controls_isValid = ::OpenAPI::fromJsonValue(m_source_controls, json[QString("SourceControls")]);
    m_source_controls_isSet = !json[QString("SourceControls")].isNull() && m_source_controls_isValid;
}

QString OAICascadingControlConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICascadingControlConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_source_controls.isSet()) {
        obj.insert(QString("SourceControls"), ::OpenAPI::toJsonValue(m_source_controls));
    }
    return obj;
}

QList OAICascadingControlConfiguration::getSourceControls() const {
    return m_source_controls;
}
void OAICascadingControlConfiguration::setSourceControls(const QList &source_controls) {
    m_source_controls = source_controls;
    m_source_controls_isSet = true;
}

bool OAICascadingControlConfiguration::is_source_controls_Set() const{
    return m_source_controls_isSet;
}

bool OAICascadingControlConfiguration::is_source_controls_Valid() const{
    return m_source_controls_isValid;
}

bool OAICascadingControlConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_controls.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICascadingControlConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
