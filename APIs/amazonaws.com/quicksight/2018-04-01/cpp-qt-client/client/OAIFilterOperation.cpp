/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterOperation::OAIFilterOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterOperation::OAIFilterOperation() {
    this->initializeModel();
}

OAIFilterOperation::~OAIFilterOperation() {}

void OAIFilterOperation::initializeModel() {

    m_condition_expression_isSet = false;
    m_condition_expression_isValid = false;
}

void OAIFilterOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterOperation::fromJsonObject(QJsonObject json) {

    m_condition_expression_isValid = ::OpenAPI::fromJsonValue(m_condition_expression, json[QString("ConditionExpression")]);
    m_condition_expression_isSet = !json[QString("ConditionExpression")].isNull() && m_condition_expression_isValid;
}

QString OAIFilterOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_expression_isSet) {
        obj.insert(QString("ConditionExpression"), ::OpenAPI::toJsonValue(m_condition_expression));
    }
    return obj;
}

QString OAIFilterOperation::getConditionExpression() const {
    return m_condition_expression;
}
void OAIFilterOperation::setConditionExpression(const QString &condition_expression) {
    m_condition_expression = condition_expression;
    m_condition_expression_isSet = true;
}

bool OAIFilterOperation::is_condition_expression_Set() const{
    return m_condition_expression_isSet;
}

bool OAIFilterOperation::is_condition_expression_Valid() const{
    return m_condition_expression_isValid;
}

bool OAIFilterOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_condition_expression_isValid && true;
}

} // namespace OpenAPI
