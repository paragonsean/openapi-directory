/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeatMapSortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeatMapSortConfiguration::OAIHeatMapSortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeatMapSortConfiguration::OAIHeatMapSortConfiguration() {
    this->initializeModel();
}

OAIHeatMapSortConfiguration::~OAIHeatMapSortConfiguration() {}

void OAIHeatMapSortConfiguration::initializeModel() {

    m_heat_map_row_sort_isSet = false;
    m_heat_map_row_sort_isValid = false;

    m_heat_map_column_sort_isSet = false;
    m_heat_map_column_sort_isValid = false;

    m_heat_map_row_items_limit_configuration_isSet = false;
    m_heat_map_row_items_limit_configuration_isValid = false;

    m_heat_map_column_items_limit_configuration_isSet = false;
    m_heat_map_column_items_limit_configuration_isValid = false;
}

void OAIHeatMapSortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeatMapSortConfiguration::fromJsonObject(QJsonObject json) {

    m_heat_map_row_sort_isValid = ::OpenAPI::fromJsonValue(m_heat_map_row_sort, json[QString("HeatMapRowSort")]);
    m_heat_map_row_sort_isSet = !json[QString("HeatMapRowSort")].isNull() && m_heat_map_row_sort_isValid;

    m_heat_map_column_sort_isValid = ::OpenAPI::fromJsonValue(m_heat_map_column_sort, json[QString("HeatMapColumnSort")]);
    m_heat_map_column_sort_isSet = !json[QString("HeatMapColumnSort")].isNull() && m_heat_map_column_sort_isValid;

    m_heat_map_row_items_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_heat_map_row_items_limit_configuration, json[QString("HeatMapRowItemsLimitConfiguration")]);
    m_heat_map_row_items_limit_configuration_isSet = !json[QString("HeatMapRowItemsLimitConfiguration")].isNull() && m_heat_map_row_items_limit_configuration_isValid;

    m_heat_map_column_items_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_heat_map_column_items_limit_configuration, json[QString("HeatMapColumnItemsLimitConfiguration")]);
    m_heat_map_column_items_limit_configuration_isSet = !json[QString("HeatMapColumnItemsLimitConfiguration")].isNull() && m_heat_map_column_items_limit_configuration_isValid;
}

QString OAIHeatMapSortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeatMapSortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_heat_map_row_sort.isSet()) {
        obj.insert(QString("HeatMapRowSort"), ::OpenAPI::toJsonValue(m_heat_map_row_sort));
    }
    if (m_heat_map_column_sort.isSet()) {
        obj.insert(QString("HeatMapColumnSort"), ::OpenAPI::toJsonValue(m_heat_map_column_sort));
    }
    if (m_heat_map_row_items_limit_configuration.isSet()) {
        obj.insert(QString("HeatMapRowItemsLimitConfiguration"), ::OpenAPI::toJsonValue(m_heat_map_row_items_limit_configuration));
    }
    if (m_heat_map_column_items_limit_configuration.isSet()) {
        obj.insert(QString("HeatMapColumnItemsLimitConfiguration"), ::OpenAPI::toJsonValue(m_heat_map_column_items_limit_configuration));
    }
    return obj;
}

QList OAIHeatMapSortConfiguration::getHeatMapRowSort() const {
    return m_heat_map_row_sort;
}
void OAIHeatMapSortConfiguration::setHeatMapRowSort(const QList &heat_map_row_sort) {
    m_heat_map_row_sort = heat_map_row_sort;
    m_heat_map_row_sort_isSet = true;
}

bool OAIHeatMapSortConfiguration::is_heat_map_row_sort_Set() const{
    return m_heat_map_row_sort_isSet;
}

bool OAIHeatMapSortConfiguration::is_heat_map_row_sort_Valid() const{
    return m_heat_map_row_sort_isValid;
}

QList OAIHeatMapSortConfiguration::getHeatMapColumnSort() const {
    return m_heat_map_column_sort;
}
void OAIHeatMapSortConfiguration::setHeatMapColumnSort(const QList &heat_map_column_sort) {
    m_heat_map_column_sort = heat_map_column_sort;
    m_heat_map_column_sort_isSet = true;
}

bool OAIHeatMapSortConfiguration::is_heat_map_column_sort_Set() const{
    return m_heat_map_column_sort_isSet;
}

bool OAIHeatMapSortConfiguration::is_heat_map_column_sort_Valid() const{
    return m_heat_map_column_sort_isValid;
}

OAIHeatMapSortConfiguration_HeatMapRowItemsLimitConfiguration OAIHeatMapSortConfiguration::getHeatMapRowItemsLimitConfiguration() const {
    return m_heat_map_row_items_limit_configuration;
}
void OAIHeatMapSortConfiguration::setHeatMapRowItemsLimitConfiguration(const OAIHeatMapSortConfiguration_HeatMapRowItemsLimitConfiguration &heat_map_row_items_limit_configuration) {
    m_heat_map_row_items_limit_configuration = heat_map_row_items_limit_configuration;
    m_heat_map_row_items_limit_configuration_isSet = true;
}

bool OAIHeatMapSortConfiguration::is_heat_map_row_items_limit_configuration_Set() const{
    return m_heat_map_row_items_limit_configuration_isSet;
}

bool OAIHeatMapSortConfiguration::is_heat_map_row_items_limit_configuration_Valid() const{
    return m_heat_map_row_items_limit_configuration_isValid;
}

OAIHeatMapSortConfiguration_HeatMapColumnItemsLimitConfiguration OAIHeatMapSortConfiguration::getHeatMapColumnItemsLimitConfiguration() const {
    return m_heat_map_column_items_limit_configuration;
}
void OAIHeatMapSortConfiguration::setHeatMapColumnItemsLimitConfiguration(const OAIHeatMapSortConfiguration_HeatMapColumnItemsLimitConfiguration &heat_map_column_items_limit_configuration) {
    m_heat_map_column_items_limit_configuration = heat_map_column_items_limit_configuration;
    m_heat_map_column_items_limit_configuration_isSet = true;
}

bool OAIHeatMapSortConfiguration::is_heat_map_column_items_limit_configuration_Set() const{
    return m_heat_map_column_items_limit_configuration_isSet;
}

bool OAIHeatMapSortConfiguration::is_heat_map_column_items_limit_configuration_Valid() const{
    return m_heat_map_column_items_limit_configuration_isValid;
}

bool OAIHeatMapSortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_heat_map_row_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heat_map_column_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heat_map_row_items_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heat_map_column_items_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeatMapSortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
