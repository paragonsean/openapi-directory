/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftParameters::OAIRedshiftParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftParameters::OAIRedshiftParameters() {
    this->initializeModel();
}

OAIRedshiftParameters::~OAIRedshiftParameters() {}

void OAIRedshiftParameters::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;
}

void OAIRedshiftParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftParameters::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("Host")]);
    m_host_isSet = !json[QString("Host")].isNull() && m_host_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("ClusterId")]);
    m_cluster_id_isSet = !json[QString("ClusterId")].isNull() && m_cluster_id_isValid;
}

QString OAIRedshiftParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("Host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_cluster_id_isSet) {
        obj.insert(QString("ClusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    return obj;
}

QString OAIRedshiftParameters::getHost() const {
    return m_host;
}
void OAIRedshiftParameters::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIRedshiftParameters::is_host_Set() const{
    return m_host_isSet;
}

bool OAIRedshiftParameters::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAIRedshiftParameters::getPort() const {
    return m_port;
}
void OAIRedshiftParameters::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIRedshiftParameters::is_port_Set() const{
    return m_port_isSet;
}

bool OAIRedshiftParameters::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIRedshiftParameters::getDatabase() const {
    return m_database;
}
void OAIRedshiftParameters::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIRedshiftParameters::is_database_Set() const{
    return m_database_isSet;
}

bool OAIRedshiftParameters::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIRedshiftParameters::getClusterId() const {
    return m_cluster_id;
}
void OAIRedshiftParameters::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIRedshiftParameters::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIRedshiftParameters::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

bool OAIRedshiftParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_isValid && true;
}

} // namespace OpenAPI
