/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableCellConditionalFormatting_TextFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableCellConditionalFormatting_TextFormat::OAIPivotTableCellConditionalFormatting_TextFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableCellConditionalFormatting_TextFormat::OAIPivotTableCellConditionalFormatting_TextFormat() {
    this->initializeModel();
}

OAIPivotTableCellConditionalFormatting_TextFormat::~OAIPivotTableCellConditionalFormatting_TextFormat() {}

void OAIPivotTableCellConditionalFormatting_TextFormat::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;
}

void OAIPivotTableCellConditionalFormatting_TextFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableCellConditionalFormatting_TextFormat::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("TextColor")]);
    m_text_color_isSet = !json[QString("TextColor")].isNull() && m_text_color_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("Icon")]);
    m_icon_isSet = !json[QString("Icon")].isNull() && m_icon_isValid;
}

QString OAIPivotTableCellConditionalFormatting_TextFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableCellConditionalFormatting_TextFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_text_color.isSet()) {
        obj.insert(QString("TextColor"), ::OpenAPI::toJsonValue(m_text_color));
    }
    if (m_icon.isSet()) {
        obj.insert(QString("Icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    return obj;
}

OAITextConditionalFormat_BackgroundColor OAIPivotTableCellConditionalFormatting_TextFormat::getBackgroundColor() const {
    return m_background_color;
}
void OAIPivotTableCellConditionalFormatting_TextFormat::setBackgroundColor(const OAITextConditionalFormat_BackgroundColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIPivotTableCellConditionalFormatting_TextFormat::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIPivotTableCellConditionalFormatting_TextFormat::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAITextConditionalFormat_TextColor OAIPivotTableCellConditionalFormatting_TextFormat::getTextColor() const {
    return m_text_color;
}
void OAIPivotTableCellConditionalFormatting_TextFormat::setTextColor(const OAITextConditionalFormat_TextColor &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAIPivotTableCellConditionalFormatting_TextFormat::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAIPivotTableCellConditionalFormatting_TextFormat::is_text_color_Valid() const{
    return m_text_color_isValid;
}

OAITextConditionalFormat_Icon OAIPivotTableCellConditionalFormatting_TextFormat::getIcon() const {
    return m_icon;
}
void OAIPivotTableCellConditionalFormatting_TextFormat::setIcon(const OAITextConditionalFormat_Icon &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIPivotTableCellConditionalFormatting_TextFormat::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIPivotTableCellConditionalFormatting_TextFormat::is_icon_Valid() const{
    return m_icon_isValid;
}

bool OAIPivotTableCellConditionalFormatting_TextFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableCellConditionalFormatting_TextFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
