/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableFieldCollapseStateOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableFieldCollapseStateOption::OAIPivotTableFieldCollapseStateOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableFieldCollapseStateOption::OAIPivotTableFieldCollapseStateOption() {
    this->initializeModel();
}

OAIPivotTableFieldCollapseStateOption::~OAIPivotTableFieldCollapseStateOption() {}

void OAIPivotTableFieldCollapseStateOption::initializeModel() {

    m_target_isSet = false;
    m_target_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIPivotTableFieldCollapseStateOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableFieldCollapseStateOption::fromJsonObject(QJsonObject json) {

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIPivotTableFieldCollapseStateOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableFieldCollapseStateOption::asJsonObject() const {
    QJsonObject obj;
    if (m_target.isSet()) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIPivotTableFieldCollapseStateOption_Target OAIPivotTableFieldCollapseStateOption::getTarget() const {
    return m_target;
}
void OAIPivotTableFieldCollapseStateOption::setTarget(const OAIPivotTableFieldCollapseStateOption_Target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIPivotTableFieldCollapseStateOption::is_target_Set() const{
    return m_target_isSet;
}

bool OAIPivotTableFieldCollapseStateOption::is_target_Valid() const{
    return m_target_isValid;
}

OAIPivotTableFieldCollapseState OAIPivotTableFieldCollapseStateOption::getState() const {
    return m_state;
}
void OAIPivotTableFieldCollapseStateOption::setState(const OAIPivotTableFieldCollapseState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPivotTableFieldCollapseStateOption::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPivotTableFieldCollapseStateOption::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIPivotTableFieldCollapseStateOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableFieldCollapseStateOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_isValid && true;
}

} // namespace OpenAPI
