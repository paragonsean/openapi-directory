/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomNarrativeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomNarrativeOptions::OAICustomNarrativeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomNarrativeOptions::OAICustomNarrativeOptions() {
    this->initializeModel();
}

OAICustomNarrativeOptions::~OAICustomNarrativeOptions() {}

void OAICustomNarrativeOptions::initializeModel() {

    m_narrative_isSet = false;
    m_narrative_isValid = false;
}

void OAICustomNarrativeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomNarrativeOptions::fromJsonObject(QJsonObject json) {

    m_narrative_isValid = ::OpenAPI::fromJsonValue(m_narrative, json[QString("Narrative")]);
    m_narrative_isSet = !json[QString("Narrative")].isNull() && m_narrative_isValid;
}

QString OAICustomNarrativeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomNarrativeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_narrative_isSet) {
        obj.insert(QString("Narrative"), ::OpenAPI::toJsonValue(m_narrative));
    }
    return obj;
}

QString OAICustomNarrativeOptions::getNarrative() const {
    return m_narrative;
}
void OAICustomNarrativeOptions::setNarrative(const QString &narrative) {
    m_narrative = narrative;
    m_narrative_isSet = true;
}

bool OAICustomNarrativeOptions::is_narrative_Set() const{
    return m_narrative_isSet;
}

bool OAICustomNarrativeOptions::is_narrative_Valid() const{
    return m_narrative_isValid;
}

bool OAICustomNarrativeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_narrative_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomNarrativeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_narrative_isValid && true;
}

} // namespace OpenAPI
