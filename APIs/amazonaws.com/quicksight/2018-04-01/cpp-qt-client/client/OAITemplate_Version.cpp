/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplate_Version.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplate_Version::OAITemplate_Version(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplate_Version::OAITemplate_Version() {
    this->initializeModel();
}

OAITemplate_Version::~OAITemplate_Version() {}

void OAITemplate_Version::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_data_set_configurations_isSet = false;
    m_data_set_configurations_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_source_entity_arn_isSet = false;
    m_source_entity_arn_isValid = false;

    m_theme_arn_isSet = false;
    m_theme_arn_isValid = false;

    m_sheets_isSet = false;
    m_sheets_isValid = false;
}

void OAITemplate_Version::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplate_Version::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("VersionNumber")]);
    m_version_number_isSet = !json[QString("VersionNumber")].isNull() && m_version_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_data_set_configurations_isValid = ::OpenAPI::fromJsonValue(m_data_set_configurations, json[QString("DataSetConfigurations")]);
    m_data_set_configurations_isSet = !json[QString("DataSetConfigurations")].isNull() && m_data_set_configurations_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_source_entity_arn_isValid = ::OpenAPI::fromJsonValue(m_source_entity_arn, json[QString("SourceEntityArn")]);
    m_source_entity_arn_isSet = !json[QString("SourceEntityArn")].isNull() && m_source_entity_arn_isValid;

    m_theme_arn_isValid = ::OpenAPI::fromJsonValue(m_theme_arn, json[QString("ThemeArn")]);
    m_theme_arn_isSet = !json[QString("ThemeArn")].isNull() && m_theme_arn_isValid;

    m_sheets_isValid = ::OpenAPI::fromJsonValue(m_sheets, json[QString("Sheets")]);
    m_sheets_isSet = !json[QString("Sheets")].isNull() && m_sheets_isValid;
}

QString OAITemplate_Version::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplate_Version::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("VersionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_data_set_configurations.isSet()) {
        obj.insert(QString("DataSetConfigurations"), ::OpenAPI::toJsonValue(m_data_set_configurations));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_source_entity_arn_isSet) {
        obj.insert(QString("SourceEntityArn"), ::OpenAPI::toJsonValue(m_source_entity_arn));
    }
    if (m_theme_arn_isSet) {
        obj.insert(QString("ThemeArn"), ::OpenAPI::toJsonValue(m_theme_arn));
    }
    if (m_sheets.isSet()) {
        obj.insert(QString("Sheets"), ::OpenAPI::toJsonValue(m_sheets));
    }
    return obj;
}

QDateTime OAITemplate_Version::getCreatedTime() const {
    return m_created_time;
}
void OAITemplate_Version::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAITemplate_Version::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAITemplate_Version::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QList OAITemplate_Version::getErrors() const {
    return m_errors;
}
void OAITemplate_Version::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAITemplate_Version::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAITemplate_Version::is_errors_Valid() const{
    return m_errors_isValid;
}

qint32 OAITemplate_Version::getVersionNumber() const {
    return m_version_number;
}
void OAITemplate_Version::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAITemplate_Version::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAITemplate_Version::is_version_number_Valid() const{
    return m_version_number_isValid;
}

OAIResourceStatus OAITemplate_Version::getStatus() const {
    return m_status;
}
void OAITemplate_Version::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITemplate_Version::is_status_Set() const{
    return m_status_isSet;
}

bool OAITemplate_Version::is_status_Valid() const{
    return m_status_isValid;
}

QList OAITemplate_Version::getDataSetConfigurations() const {
    return m_data_set_configurations;
}
void OAITemplate_Version::setDataSetConfigurations(const QList &data_set_configurations) {
    m_data_set_configurations = data_set_configurations;
    m_data_set_configurations_isSet = true;
}

bool OAITemplate_Version::is_data_set_configurations_Set() const{
    return m_data_set_configurations_isSet;
}

bool OAITemplate_Version::is_data_set_configurations_Valid() const{
    return m_data_set_configurations_isValid;
}

QString OAITemplate_Version::getDescription() const {
    return m_description;
}
void OAITemplate_Version::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITemplate_Version::is_description_Set() const{
    return m_description_isSet;
}

bool OAITemplate_Version::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITemplate_Version::getSourceEntityArn() const {
    return m_source_entity_arn;
}
void OAITemplate_Version::setSourceEntityArn(const QString &source_entity_arn) {
    m_source_entity_arn = source_entity_arn;
    m_source_entity_arn_isSet = true;
}

bool OAITemplate_Version::is_source_entity_arn_Set() const{
    return m_source_entity_arn_isSet;
}

bool OAITemplate_Version::is_source_entity_arn_Valid() const{
    return m_source_entity_arn_isValid;
}

QString OAITemplate_Version::getThemeArn() const {
    return m_theme_arn;
}
void OAITemplate_Version::setThemeArn(const QString &theme_arn) {
    m_theme_arn = theme_arn;
    m_theme_arn_isSet = true;
}

bool OAITemplate_Version::is_theme_arn_Set() const{
    return m_theme_arn_isSet;
}

bool OAITemplate_Version::is_theme_arn_Valid() const{
    return m_theme_arn_isValid;
}

QList OAITemplate_Version::getSheets() const {
    return m_sheets;
}
void OAITemplate_Version::setSheets(const QList &sheets) {
    m_sheets = sheets;
    m_sheets_isSet = true;
}

bool OAITemplate_Version::is_sheets_Set() const{
    return m_sheets_isSet;
}

bool OAITemplate_Version::is_sheets_Valid() const{
    return m_sheets_isValid;
}

bool OAITemplate_Version::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entity_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplate_Version::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
