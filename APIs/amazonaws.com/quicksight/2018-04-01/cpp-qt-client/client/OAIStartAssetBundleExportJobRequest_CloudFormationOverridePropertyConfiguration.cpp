/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration() {
    this->initializeModel();
}

OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::~OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration() {}

void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::initializeModel() {

    m_resource_id_override_configuration_isSet = false;
    m_resource_id_override_configuration_isValid = false;

    m_vpc_connections_isSet = false;
    m_vpc_connections_isValid = false;

    m_refresh_schedules_isSet = false;
    m_refresh_schedules_isValid = false;

    m_data_sources_isSet = false;
    m_data_sources_isValid = false;

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_analyses_isSet = false;
    m_analyses_isValid = false;

    m_dashboards_isSet = false;
    m_dashboards_isValid = false;
}

void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::fromJsonObject(QJsonObject json) {

    m_resource_id_override_configuration_isValid = ::OpenAPI::fromJsonValue(m_resource_id_override_configuration, json[QString("ResourceIdOverrideConfiguration")]);
    m_resource_id_override_configuration_isSet = !json[QString("ResourceIdOverrideConfiguration")].isNull() && m_resource_id_override_configuration_isValid;

    m_vpc_connections_isValid = ::OpenAPI::fromJsonValue(m_vpc_connections, json[QString("VPCConnections")]);
    m_vpc_connections_isSet = !json[QString("VPCConnections")].isNull() && m_vpc_connections_isValid;

    m_refresh_schedules_isValid = ::OpenAPI::fromJsonValue(m_refresh_schedules, json[QString("RefreshSchedules")]);
    m_refresh_schedules_isSet = !json[QString("RefreshSchedules")].isNull() && m_refresh_schedules_isValid;

    m_data_sources_isValid = ::OpenAPI::fromJsonValue(m_data_sources, json[QString("DataSources")]);
    m_data_sources_isSet = !json[QString("DataSources")].isNull() && m_data_sources_isValid;

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("DataSets")]);
    m_data_sets_isSet = !json[QString("DataSets")].isNull() && m_data_sets_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("Themes")]);
    m_themes_isSet = !json[QString("Themes")].isNull() && m_themes_isValid;

    m_analyses_isValid = ::OpenAPI::fromJsonValue(m_analyses, json[QString("Analyses")]);
    m_analyses_isSet = !json[QString("Analyses")].isNull() && m_analyses_isValid;

    m_dashboards_isValid = ::OpenAPI::fromJsonValue(m_dashboards, json[QString("Dashboards")]);
    m_dashboards_isSet = !json[QString("Dashboards")].isNull() && m_dashboards_isValid;
}

QString OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_override_configuration.isSet()) {
        obj.insert(QString("ResourceIdOverrideConfiguration"), ::OpenAPI::toJsonValue(m_resource_id_override_configuration));
    }
    if (m_vpc_connections.isSet()) {
        obj.insert(QString("VPCConnections"), ::OpenAPI::toJsonValue(m_vpc_connections));
    }
    if (m_refresh_schedules.isSet()) {
        obj.insert(QString("RefreshSchedules"), ::OpenAPI::toJsonValue(m_refresh_schedules));
    }
    if (m_data_sources.isSet()) {
        obj.insert(QString("DataSources"), ::OpenAPI::toJsonValue(m_data_sources));
    }
    if (m_data_sets.isSet()) {
        obj.insert(QString("DataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    if (m_themes.isSet()) {
        obj.insert(QString("Themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_analyses.isSet()) {
        obj.insert(QString("Analyses"), ::OpenAPI::toJsonValue(m_analyses));
    }
    if (m_dashboards.isSet()) {
        obj.insert(QString("Dashboards"), ::OpenAPI::toJsonValue(m_dashboards));
    }
    return obj;
}

OAIStartAssetBundleExportJob_request_CloudFormationOverridePropertyConfiguration_ResourceIdOverrideConfiguration OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::getResourceIdOverrideConfiguration() const {
    return m_resource_id_override_configuration;
}
void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::setResourceIdOverrideConfiguration(const OAIStartAssetBundleExportJob_request_CloudFormationOverridePropertyConfiguration_ResourceIdOverrideConfiguration &resource_id_override_configuration) {
    m_resource_id_override_configuration = resource_id_override_configuration;
    m_resource_id_override_configuration_isSet = true;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_resource_id_override_configuration_Set() const{
    return m_resource_id_override_configuration_isSet;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_resource_id_override_configuration_Valid() const{
    return m_resource_id_override_configuration_isValid;
}

QList OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::getVpcConnections() const {
    return m_vpc_connections;
}
void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::setVpcConnections(const QList &vpc_connections) {
    m_vpc_connections = vpc_connections;
    m_vpc_connections_isSet = true;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_vpc_connections_Set() const{
    return m_vpc_connections_isSet;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_vpc_connections_Valid() const{
    return m_vpc_connections_isValid;
}

QList OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::getRefreshSchedules() const {
    return m_refresh_schedules;
}
void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::setRefreshSchedules(const QList &refresh_schedules) {
    m_refresh_schedules = refresh_schedules;
    m_refresh_schedules_isSet = true;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_refresh_schedules_Set() const{
    return m_refresh_schedules_isSet;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_refresh_schedules_Valid() const{
    return m_refresh_schedules_isValid;
}

QList OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::getDataSources() const {
    return m_data_sources;
}
void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::setDataSources(const QList &data_sources) {
    m_data_sources = data_sources;
    m_data_sources_isSet = true;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_data_sources_Set() const{
    return m_data_sources_isSet;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_data_sources_Valid() const{
    return m_data_sources_isValid;
}

QList OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::getDataSets() const {
    return m_data_sets;
}
void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::setDataSets(const QList &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

QList OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::getThemes() const {
    return m_themes;
}
void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::setThemes(const QList &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_themes_Valid() const{
    return m_themes_isValid;
}

QList OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::getAnalyses() const {
    return m_analyses;
}
void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::setAnalyses(const QList &analyses) {
    m_analyses = analyses;
    m_analyses_isSet = true;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_analyses_Set() const{
    return m_analyses_isSet;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_analyses_Valid() const{
    return m_analyses_isValid;
}

QList OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::getDashboards() const {
    return m_dashboards;
}
void OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::setDashboards(const QList &dashboards) {
    m_dashboards = dashboards;
    m_dashboards_isSet = true;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_dashboards_Set() const{
    return m_dashboards_isSet;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::is_dashboards_Valid() const{
    return m_dashboards_isValid;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_override_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_schedules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboards.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAssetBundleExportJobRequest_CloudFormationOverridePropertyConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
