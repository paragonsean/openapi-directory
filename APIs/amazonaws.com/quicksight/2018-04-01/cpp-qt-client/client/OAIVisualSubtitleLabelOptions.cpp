/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisualSubtitleLabelOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisualSubtitleLabelOptions::OAIVisualSubtitleLabelOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisualSubtitleLabelOptions::OAIVisualSubtitleLabelOptions() {
    this->initializeModel();
}

OAIVisualSubtitleLabelOptions::~OAIVisualSubtitleLabelOptions() {}

void OAIVisualSubtitleLabelOptions::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_format_text_isSet = false;
    m_format_text_isValid = false;
}

void OAIVisualSubtitleLabelOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisualSubtitleLabelOptions::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_format_text_isValid = ::OpenAPI::fromJsonValue(m_format_text, json[QString("FormatText")]);
    m_format_text_isSet = !json[QString("FormatText")].isNull() && m_format_text_isValid;
}

QString OAIVisualSubtitleLabelOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisualSubtitleLabelOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_format_text.isSet()) {
        obj.insert(QString("FormatText"), ::OpenAPI::toJsonValue(m_format_text));
    }
    return obj;
}

OAIVisibility OAIVisualSubtitleLabelOptions::getVisibility() const {
    return m_visibility;
}
void OAIVisualSubtitleLabelOptions::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIVisualSubtitleLabelOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIVisualSubtitleLabelOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIVisualSubtitleLabelOptions_FormatText OAIVisualSubtitleLabelOptions::getFormatText() const {
    return m_format_text;
}
void OAIVisualSubtitleLabelOptions::setFormatText(const OAIVisualSubtitleLabelOptions_FormatText &format_text) {
    m_format_text = format_text;
    m_format_text_isSet = true;
}

bool OAIVisualSubtitleLabelOptions::is_format_text_Set() const{
    return m_format_text_isSet;
}

bool OAIVisualSubtitleLabelOptions::is_format_text_Valid() const{
    return m_format_text_isValid;
}

bool OAIVisualSubtitleLabelOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_text.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisualSubtitleLabelOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
