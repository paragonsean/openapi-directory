/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterfallChartConfiguration_FieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterfallChartConfiguration_FieldWells::OAIWaterfallChartConfiguration_FieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterfallChartConfiguration_FieldWells::OAIWaterfallChartConfiguration_FieldWells() {
    this->initializeModel();
}

OAIWaterfallChartConfiguration_FieldWells::~OAIWaterfallChartConfiguration_FieldWells() {}

void OAIWaterfallChartConfiguration_FieldWells::initializeModel() {

    m_waterfall_chart_aggregated_field_wells_isSet = false;
    m_waterfall_chart_aggregated_field_wells_isValid = false;
}

void OAIWaterfallChartConfiguration_FieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterfallChartConfiguration_FieldWells::fromJsonObject(QJsonObject json) {

    m_waterfall_chart_aggregated_field_wells_isValid = ::OpenAPI::fromJsonValue(m_waterfall_chart_aggregated_field_wells, json[QString("WaterfallChartAggregatedFieldWells")]);
    m_waterfall_chart_aggregated_field_wells_isSet = !json[QString("WaterfallChartAggregatedFieldWells")].isNull() && m_waterfall_chart_aggregated_field_wells_isValid;
}

QString OAIWaterfallChartConfiguration_FieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterfallChartConfiguration_FieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_waterfall_chart_aggregated_field_wells.isSet()) {
        obj.insert(QString("WaterfallChartAggregatedFieldWells"), ::OpenAPI::toJsonValue(m_waterfall_chart_aggregated_field_wells));
    }
    return obj;
}

OAIWaterfallChartFieldWells_WaterfallChartAggregatedFieldWells OAIWaterfallChartConfiguration_FieldWells::getWaterfallChartAggregatedFieldWells() const {
    return m_waterfall_chart_aggregated_field_wells;
}
void OAIWaterfallChartConfiguration_FieldWells::setWaterfallChartAggregatedFieldWells(const OAIWaterfallChartFieldWells_WaterfallChartAggregatedFieldWells &waterfall_chart_aggregated_field_wells) {
    m_waterfall_chart_aggregated_field_wells = waterfall_chart_aggregated_field_wells;
    m_waterfall_chart_aggregated_field_wells_isSet = true;
}

bool OAIWaterfallChartConfiguration_FieldWells::is_waterfall_chart_aggregated_field_wells_Set() const{
    return m_waterfall_chart_aggregated_field_wells_isSet;
}

bool OAIWaterfallChartConfiguration_FieldWells::is_waterfall_chart_aggregated_field_wells_Valid() const{
    return m_waterfall_chart_aggregated_field_wells_isValid;
}

bool OAIWaterfallChartConfiguration_FieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_waterfall_chart_aggregated_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterfallChartConfiguration_FieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
