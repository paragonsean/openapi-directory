/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrillDownFilter_TimeRangeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDrillDownFilter_TimeRangeFilter::OAIDrillDownFilter_TimeRangeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDrillDownFilter_TimeRangeFilter::OAIDrillDownFilter_TimeRangeFilter() {
    this->initializeModel();
}

OAIDrillDownFilter_TimeRangeFilter::~OAIDrillDownFilter_TimeRangeFilter() {}

void OAIDrillDownFilter_TimeRangeFilter::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_range_minimum_isSet = false;
    m_range_minimum_isValid = false;

    m_range_maximum_isSet = false;
    m_range_maximum_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;
}

void OAIDrillDownFilter_TimeRangeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDrillDownFilter_TimeRangeFilter::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_range_minimum_isValid = ::OpenAPI::fromJsonValue(m_range_minimum, json[QString("RangeMinimum")]);
    m_range_minimum_isSet = !json[QString("RangeMinimum")].isNull() && m_range_minimum_isValid;

    m_range_maximum_isValid = ::OpenAPI::fromJsonValue(m_range_maximum, json[QString("RangeMaximum")]);
    m_range_maximum_isSet = !json[QString("RangeMaximum")].isNull() && m_range_maximum_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;
}

QString OAIDrillDownFilter_TimeRangeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDrillDownFilter_TimeRangeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_range_minimum_isSet) {
        obj.insert(QString("RangeMinimum"), ::OpenAPI::toJsonValue(m_range_minimum));
    }
    if (m_range_maximum_isSet) {
        obj.insert(QString("RangeMaximum"), ::OpenAPI::toJsonValue(m_range_maximum));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    return obj;
}

OAICategoryDrillDownFilter_Column OAIDrillDownFilter_TimeRangeFilter::getColumn() const {
    return m_column;
}
void OAIDrillDownFilter_TimeRangeFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIDrillDownFilter_TimeRangeFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAIDrillDownFilter_TimeRangeFilter::is_column_Valid() const{
    return m_column_isValid;
}

QDateTime OAIDrillDownFilter_TimeRangeFilter::getRangeMinimum() const {
    return m_range_minimum;
}
void OAIDrillDownFilter_TimeRangeFilter::setRangeMinimum(const QDateTime &range_minimum) {
    m_range_minimum = range_minimum;
    m_range_minimum_isSet = true;
}

bool OAIDrillDownFilter_TimeRangeFilter::is_range_minimum_Set() const{
    return m_range_minimum_isSet;
}

bool OAIDrillDownFilter_TimeRangeFilter::is_range_minimum_Valid() const{
    return m_range_minimum_isValid;
}

QDateTime OAIDrillDownFilter_TimeRangeFilter::getRangeMaximum() const {
    return m_range_maximum;
}
void OAIDrillDownFilter_TimeRangeFilter::setRangeMaximum(const QDateTime &range_maximum) {
    m_range_maximum = range_maximum;
    m_range_maximum_isSet = true;
}

bool OAIDrillDownFilter_TimeRangeFilter::is_range_maximum_Set() const{
    return m_range_maximum_isSet;
}

bool OAIDrillDownFilter_TimeRangeFilter::is_range_maximum_Valid() const{
    return m_range_maximum_isValid;
}

OAITimeGranularity OAIDrillDownFilter_TimeRangeFilter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAIDrillDownFilter_TimeRangeFilter::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAIDrillDownFilter_TimeRangeFilter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAIDrillDownFilter_TimeRangeFilter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

bool OAIDrillDownFilter_TimeRangeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDrillDownFilter_TimeRangeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_isValid && m_range_minimum_isValid && m_range_maximum_isValid && m_time_granularity_isValid && true;
}

} // namespace OpenAPI
