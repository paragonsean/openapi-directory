/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableFieldOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableFieldOptions::OAIPivotTableFieldOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableFieldOptions::OAIPivotTableFieldOptions() {
    this->initializeModel();
}

OAIPivotTableFieldOptions::~OAIPivotTableFieldOptions() {}

void OAIPivotTableFieldOptions::initializeModel() {

    m_selected_field_options_isSet = false;
    m_selected_field_options_isValid = false;

    m_data_path_options_isSet = false;
    m_data_path_options_isValid = false;

    m_collapse_state_options_isSet = false;
    m_collapse_state_options_isValid = false;
}

void OAIPivotTableFieldOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableFieldOptions::fromJsonObject(QJsonObject json) {

    m_selected_field_options_isValid = ::OpenAPI::fromJsonValue(m_selected_field_options, json[QString("SelectedFieldOptions")]);
    m_selected_field_options_isSet = !json[QString("SelectedFieldOptions")].isNull() && m_selected_field_options_isValid;

    m_data_path_options_isValid = ::OpenAPI::fromJsonValue(m_data_path_options, json[QString("DataPathOptions")]);
    m_data_path_options_isSet = !json[QString("DataPathOptions")].isNull() && m_data_path_options_isValid;

    m_collapse_state_options_isValid = ::OpenAPI::fromJsonValue(m_collapse_state_options, json[QString("CollapseStateOptions")]);
    m_collapse_state_options_isSet = !json[QString("CollapseStateOptions")].isNull() && m_collapse_state_options_isValid;
}

QString OAIPivotTableFieldOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableFieldOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_field_options.isSet()) {
        obj.insert(QString("SelectedFieldOptions"), ::OpenAPI::toJsonValue(m_selected_field_options));
    }
    if (m_data_path_options.isSet()) {
        obj.insert(QString("DataPathOptions"), ::OpenAPI::toJsonValue(m_data_path_options));
    }
    if (m_collapse_state_options.isSet()) {
        obj.insert(QString("CollapseStateOptions"), ::OpenAPI::toJsonValue(m_collapse_state_options));
    }
    return obj;
}

QList OAIPivotTableFieldOptions::getSelectedFieldOptions() const {
    return m_selected_field_options;
}
void OAIPivotTableFieldOptions::setSelectedFieldOptions(const QList &selected_field_options) {
    m_selected_field_options = selected_field_options;
    m_selected_field_options_isSet = true;
}

bool OAIPivotTableFieldOptions::is_selected_field_options_Set() const{
    return m_selected_field_options_isSet;
}

bool OAIPivotTableFieldOptions::is_selected_field_options_Valid() const{
    return m_selected_field_options_isValid;
}

QList OAIPivotTableFieldOptions::getDataPathOptions() const {
    return m_data_path_options;
}
void OAIPivotTableFieldOptions::setDataPathOptions(const QList &data_path_options) {
    m_data_path_options = data_path_options;
    m_data_path_options_isSet = true;
}

bool OAIPivotTableFieldOptions::is_data_path_options_Set() const{
    return m_data_path_options_isSet;
}

bool OAIPivotTableFieldOptions::is_data_path_options_Valid() const{
    return m_data_path_options_isValid;
}

QList OAIPivotTableFieldOptions::getCollapseStateOptions() const {
    return m_collapse_state_options;
}
void OAIPivotTableFieldOptions::setCollapseStateOptions(const QList &collapse_state_options) {
    m_collapse_state_options = collapse_state_options;
    m_collapse_state_options_isSet = true;
}

bool OAIPivotTableFieldOptions::is_collapse_state_options_Set() const{
    return m_collapse_state_options_isSet;
}

bool OAIPivotTableFieldOptions::is_collapse_state_options_Valid() const{
    return m_collapse_state_options_isValid;
}

bool OAIPivotTableFieldOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_field_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_path_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collapse_state_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableFieldOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
