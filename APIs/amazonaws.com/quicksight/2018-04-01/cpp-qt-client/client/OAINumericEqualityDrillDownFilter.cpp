/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericEqualityDrillDownFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericEqualityDrillDownFilter::OAINumericEqualityDrillDownFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericEqualityDrillDownFilter::OAINumericEqualityDrillDownFilter() {
    this->initializeModel();
}

OAINumericEqualityDrillDownFilter::~OAINumericEqualityDrillDownFilter() {}

void OAINumericEqualityDrillDownFilter::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAINumericEqualityDrillDownFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericEqualityDrillDownFilter::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAINumericEqualityDrillDownFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericEqualityDrillDownFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAICategoryDrillDownFilter_Column OAINumericEqualityDrillDownFilter::getColumn() const {
    return m_column;
}
void OAINumericEqualityDrillDownFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAINumericEqualityDrillDownFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAINumericEqualityDrillDownFilter::is_column_Valid() const{
    return m_column_isValid;
}

double OAINumericEqualityDrillDownFilter::getValue() const {
    return m_value;
}
void OAINumericEqualityDrillDownFilter::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAINumericEqualityDrillDownFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAINumericEqualityDrillDownFilter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAINumericEqualityDrillDownFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericEqualityDrillDownFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
