/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableFieldWells_PivotTableAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::OAIPivotTableFieldWells_PivotTableAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::OAIPivotTableFieldWells_PivotTableAggregatedFieldWells() {
    this->initializeModel();
}

OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::~OAIPivotTableFieldWells_PivotTableAggregatedFieldWells() {}

void OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::initializeModel() {

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("Rows")]);
    m_rows_isSet = !json[QString("Rows")].isNull() && m_rows_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("Columns")]);
    m_columns_isSet = !json[QString("Columns")].isNull() && m_columns_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_rows.isSet()) {
        obj.insert(QString("Rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_columns.isSet()) {
        obj.insert(QString("Columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::getRows() const {
    return m_rows;
}
void OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::setRows(const QList &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::is_rows_Valid() const{
    return m_rows_isValid;
}

QList OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::getColumns() const {
    return m_columns;
}
void OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::is_columns_Valid() const{
    return m_columns_isValid;
}

QList OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableFieldWells_PivotTableAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
