/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordCloudChartConfiguration_SortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordCloudChartConfiguration_SortConfiguration::OAIWordCloudChartConfiguration_SortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordCloudChartConfiguration_SortConfiguration::OAIWordCloudChartConfiguration_SortConfiguration() {
    this->initializeModel();
}

OAIWordCloudChartConfiguration_SortConfiguration::~OAIWordCloudChartConfiguration_SortConfiguration() {}

void OAIWordCloudChartConfiguration_SortConfiguration::initializeModel() {

    m_category_items_limit_isSet = false;
    m_category_items_limit_isValid = false;

    m_category_sort_isSet = false;
    m_category_sort_isValid = false;
}

void OAIWordCloudChartConfiguration_SortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordCloudChartConfiguration_SortConfiguration::fromJsonObject(QJsonObject json) {

    m_category_items_limit_isValid = ::OpenAPI::fromJsonValue(m_category_items_limit, json[QString("CategoryItemsLimit")]);
    m_category_items_limit_isSet = !json[QString("CategoryItemsLimit")].isNull() && m_category_items_limit_isValid;

    m_category_sort_isValid = ::OpenAPI::fromJsonValue(m_category_sort, json[QString("CategorySort")]);
    m_category_sort_isSet = !json[QString("CategorySort")].isNull() && m_category_sort_isValid;
}

QString OAIWordCloudChartConfiguration_SortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordCloudChartConfiguration_SortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_category_items_limit.isSet()) {
        obj.insert(QString("CategoryItemsLimit"), ::OpenAPI::toJsonValue(m_category_items_limit));
    }
    if (m_category_sort.isSet()) {
        obj.insert(QString("CategorySort"), ::OpenAPI::toJsonValue(m_category_sort));
    }
    return obj;
}

OAIWordCloudSortConfiguration_CategoryItemsLimit OAIWordCloudChartConfiguration_SortConfiguration::getCategoryItemsLimit() const {
    return m_category_items_limit;
}
void OAIWordCloudChartConfiguration_SortConfiguration::setCategoryItemsLimit(const OAIWordCloudSortConfiguration_CategoryItemsLimit &category_items_limit) {
    m_category_items_limit = category_items_limit;
    m_category_items_limit_isSet = true;
}

bool OAIWordCloudChartConfiguration_SortConfiguration::is_category_items_limit_Set() const{
    return m_category_items_limit_isSet;
}

bool OAIWordCloudChartConfiguration_SortConfiguration::is_category_items_limit_Valid() const{
    return m_category_items_limit_isValid;
}

QList OAIWordCloudChartConfiguration_SortConfiguration::getCategorySort() const {
    return m_category_sort;
}
void OAIWordCloudChartConfiguration_SortConfiguration::setCategorySort(const QList &category_sort) {
    m_category_sort = category_sort;
    m_category_sort_isSet = true;
}

bool OAIWordCloudChartConfiguration_SortConfiguration::is_category_sort_Set() const{
    return m_category_sort_isSet;
}

bool OAIWordCloudChartConfiguration_SortConfiguration::is_category_sort_Valid() const{
    return m_category_sort_isValid;
}

bool OAIWordCloudChartConfiguration_SortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_items_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordCloudChartConfiguration_SortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
