/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArcConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArcConfiguration::OAIArcConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArcConfiguration::OAIArcConfiguration() {
    this->initializeModel();
}

OAIArcConfiguration::~OAIArcConfiguration() {}

void OAIArcConfiguration::initializeModel() {

    m_arc_angle_isSet = false;
    m_arc_angle_isValid = false;

    m_arc_thickness_isSet = false;
    m_arc_thickness_isValid = false;
}

void OAIArcConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArcConfiguration::fromJsonObject(QJsonObject json) {

    m_arc_angle_isValid = ::OpenAPI::fromJsonValue(m_arc_angle, json[QString("ArcAngle")]);
    m_arc_angle_isSet = !json[QString("ArcAngle")].isNull() && m_arc_angle_isValid;

    m_arc_thickness_isValid = ::OpenAPI::fromJsonValue(m_arc_thickness, json[QString("ArcThickness")]);
    m_arc_thickness_isSet = !json[QString("ArcThickness")].isNull() && m_arc_thickness_isValid;
}

QString OAIArcConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArcConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_arc_angle_isSet) {
        obj.insert(QString("ArcAngle"), ::OpenAPI::toJsonValue(m_arc_angle));
    }
    if (m_arc_thickness.isSet()) {
        obj.insert(QString("ArcThickness"), ::OpenAPI::toJsonValue(m_arc_thickness));
    }
    return obj;
}

double OAIArcConfiguration::getArcAngle() const {
    return m_arc_angle;
}
void OAIArcConfiguration::setArcAngle(const double &arc_angle) {
    m_arc_angle = arc_angle;
    m_arc_angle_isSet = true;
}

bool OAIArcConfiguration::is_arc_angle_Set() const{
    return m_arc_angle_isSet;
}

bool OAIArcConfiguration::is_arc_angle_Valid() const{
    return m_arc_angle_isValid;
}

OAIArcThicknessOptions OAIArcConfiguration::getArcThickness() const {
    return m_arc_thickness;
}
void OAIArcConfiguration::setArcThickness(const OAIArcThicknessOptions &arc_thickness) {
    m_arc_thickness = arc_thickness;
    m_arc_thickness_isSet = true;
}

bool OAIArcConfiguration::is_arc_thickness_Set() const{
    return m_arc_thickness_isSet;
}

bool OAIArcConfiguration::is_arc_thickness_Valid() const{
    return m_arc_thickness_isValid;
}

bool OAIArcConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arc_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arc_thickness.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArcConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
