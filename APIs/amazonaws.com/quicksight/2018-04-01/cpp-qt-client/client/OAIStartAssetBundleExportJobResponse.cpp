/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAssetBundleExportJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAssetBundleExportJobResponse::OAIStartAssetBundleExportJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAssetBundleExportJobResponse::OAIStartAssetBundleExportJobResponse() {
    this->initializeModel();
}

OAIStartAssetBundleExportJobResponse::~OAIStartAssetBundleExportJobResponse() {}

void OAIStartAssetBundleExportJobResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_asset_bundle_export_job_id_isSet = false;
    m_asset_bundle_export_job_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIStartAssetBundleExportJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAssetBundleExportJobResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_asset_bundle_export_job_id_isValid = ::OpenAPI::fromJsonValue(m_asset_bundle_export_job_id, json[QString("AssetBundleExportJobId")]);
    m_asset_bundle_export_job_id_isSet = !json[QString("AssetBundleExportJobId")].isNull() && m_asset_bundle_export_job_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIStartAssetBundleExportJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAssetBundleExportJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_asset_bundle_export_job_id_isSet) {
        obj.insert(QString("AssetBundleExportJobId"), ::OpenAPI::toJsonValue(m_asset_bundle_export_job_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIStartAssetBundleExportJobResponse::getArn() const {
    return m_arn;
}
void OAIStartAssetBundleExportJobResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStartAssetBundleExportJobResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStartAssetBundleExportJobResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIStartAssetBundleExportJobResponse::getAssetBundleExportJobId() const {
    return m_asset_bundle_export_job_id;
}
void OAIStartAssetBundleExportJobResponse::setAssetBundleExportJobId(const QString &asset_bundle_export_job_id) {
    m_asset_bundle_export_job_id = asset_bundle_export_job_id;
    m_asset_bundle_export_job_id_isSet = true;
}

bool OAIStartAssetBundleExportJobResponse::is_asset_bundle_export_job_id_Set() const{
    return m_asset_bundle_export_job_id_isSet;
}

bool OAIStartAssetBundleExportJobResponse::is_asset_bundle_export_job_id_Valid() const{
    return m_asset_bundle_export_job_id_isValid;
}

QString OAIStartAssetBundleExportJobResponse::getRequestId() const {
    return m_request_id;
}
void OAIStartAssetBundleExportJobResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIStartAssetBundleExportJobResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIStartAssetBundleExportJobResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIStartAssetBundleExportJobResponse::getStatus() const {
    return m_status;
}
void OAIStartAssetBundleExportJobResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartAssetBundleExportJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartAssetBundleExportJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIStartAssetBundleExportJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_bundle_export_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAssetBundleExportJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
