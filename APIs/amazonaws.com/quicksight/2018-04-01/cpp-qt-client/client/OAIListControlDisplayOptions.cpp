/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListControlDisplayOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListControlDisplayOptions::OAIListControlDisplayOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListControlDisplayOptions::OAIListControlDisplayOptions() {
    this->initializeModel();
}

OAIListControlDisplayOptions::~OAIListControlDisplayOptions() {}

void OAIListControlDisplayOptions::initializeModel() {

    m_search_options_isSet = false;
    m_search_options_isValid = false;

    m_select_all_options_isSet = false;
    m_select_all_options_isValid = false;

    m_title_options_isSet = false;
    m_title_options_isValid = false;

    m_info_icon_label_options_isSet = false;
    m_info_icon_label_options_isValid = false;
}

void OAIListControlDisplayOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListControlDisplayOptions::fromJsonObject(QJsonObject json) {

    m_search_options_isValid = ::OpenAPI::fromJsonValue(m_search_options, json[QString("SearchOptions")]);
    m_search_options_isSet = !json[QString("SearchOptions")].isNull() && m_search_options_isValid;

    m_select_all_options_isValid = ::OpenAPI::fromJsonValue(m_select_all_options, json[QString("SelectAllOptions")]);
    m_select_all_options_isSet = !json[QString("SelectAllOptions")].isNull() && m_select_all_options_isValid;

    m_title_options_isValid = ::OpenAPI::fromJsonValue(m_title_options, json[QString("TitleOptions")]);
    m_title_options_isSet = !json[QString("TitleOptions")].isNull() && m_title_options_isValid;

    m_info_icon_label_options_isValid = ::OpenAPI::fromJsonValue(m_info_icon_label_options, json[QString("InfoIconLabelOptions")]);
    m_info_icon_label_options_isSet = !json[QString("InfoIconLabelOptions")].isNull() && m_info_icon_label_options_isValid;
}

QString OAIListControlDisplayOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListControlDisplayOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_search_options.isSet()) {
        obj.insert(QString("SearchOptions"), ::OpenAPI::toJsonValue(m_search_options));
    }
    if (m_select_all_options.isSet()) {
        obj.insert(QString("SelectAllOptions"), ::OpenAPI::toJsonValue(m_select_all_options));
    }
    if (m_title_options.isSet()) {
        obj.insert(QString("TitleOptions"), ::OpenAPI::toJsonValue(m_title_options));
    }
    if (m_info_icon_label_options.isSet()) {
        obj.insert(QString("InfoIconLabelOptions"), ::OpenAPI::toJsonValue(m_info_icon_label_options));
    }
    return obj;
}

OAIListControlDisplayOptions_SearchOptions OAIListControlDisplayOptions::getSearchOptions() const {
    return m_search_options;
}
void OAIListControlDisplayOptions::setSearchOptions(const OAIListControlDisplayOptions_SearchOptions &search_options) {
    m_search_options = search_options;
    m_search_options_isSet = true;
}

bool OAIListControlDisplayOptions::is_search_options_Set() const{
    return m_search_options_isSet;
}

bool OAIListControlDisplayOptions::is_search_options_Valid() const{
    return m_search_options_isValid;
}

OAIListControlDisplayOptions_SelectAllOptions OAIListControlDisplayOptions::getSelectAllOptions() const {
    return m_select_all_options;
}
void OAIListControlDisplayOptions::setSelectAllOptions(const OAIListControlDisplayOptions_SelectAllOptions &select_all_options) {
    m_select_all_options = select_all_options;
    m_select_all_options_isSet = true;
}

bool OAIListControlDisplayOptions::is_select_all_options_Set() const{
    return m_select_all_options_isSet;
}

bool OAIListControlDisplayOptions::is_select_all_options_Valid() const{
    return m_select_all_options_isValid;
}

OAIDateTimePickerControlDisplayOptions_TitleOptions OAIListControlDisplayOptions::getTitleOptions() const {
    return m_title_options;
}
void OAIListControlDisplayOptions::setTitleOptions(const OAIDateTimePickerControlDisplayOptions_TitleOptions &title_options) {
    m_title_options = title_options;
    m_title_options_isSet = true;
}

bool OAIListControlDisplayOptions::is_title_options_Set() const{
    return m_title_options_isSet;
}

bool OAIListControlDisplayOptions::is_title_options_Valid() const{
    return m_title_options_isValid;
}

OAIDateTimePickerControlDisplayOptions_InfoIconLabelOptions OAIListControlDisplayOptions::getInfoIconLabelOptions() const {
    return m_info_icon_label_options;
}
void OAIListControlDisplayOptions::setInfoIconLabelOptions(const OAIDateTimePickerControlDisplayOptions_InfoIconLabelOptions &info_icon_label_options) {
    m_info_icon_label_options = info_icon_label_options;
    m_info_icon_label_options_isSet = true;
}

bool OAIListControlDisplayOptions::is_info_icon_label_options_Set() const{
    return m_info_icon_label_options_isSet;
}

bool OAIListControlDisplayOptions::is_info_icon_label_options_Valid() const{
    return m_info_icon_label_options_isValid;
}

bool OAIListControlDisplayOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_all_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_icon_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListControlDisplayOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
