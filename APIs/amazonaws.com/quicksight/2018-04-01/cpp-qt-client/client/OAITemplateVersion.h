/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITemplateVersion.h
 *
 * A version of a template.
 */

#ifndef OAITemplateVersion_H
#define OAITemplateVersion_H

#include <QJsonObject>

#include "OAIResourceStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITemplateVersion : public OAIObject {
public:
    OAITemplateVersion();
    OAITemplateVersion(QString json);
    ~OAITemplateVersion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QList getErrors() const;
    void setErrors(const QList &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    qint32 getVersionNumber() const;
    void setVersionNumber(const qint32 &version_number);
    bool is_version_number_Set() const;
    bool is_version_number_Valid() const;

    OAIResourceStatus getStatus() const;
    void setStatus(const OAIResourceStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList getDataSetConfigurations() const;
    void setDataSetConfigurations(const QList &data_set_configurations);
    bool is_data_set_configurations_Set() const;
    bool is_data_set_configurations_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getSourceEntityArn() const;
    void setSourceEntityArn(const QString &source_entity_arn);
    bool is_source_entity_arn_Set() const;
    bool is_source_entity_arn_Valid() const;

    QString getThemeArn() const;
    void setThemeArn(const QString &theme_arn);
    bool is_theme_arn_Set() const;
    bool is_theme_arn_Valid() const;

    QList getSheets() const;
    void setSheets(const QList &sheets);
    bool is_sheets_Set() const;
    bool is_sheets_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QList m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    qint32 m_version_number;
    bool m_version_number_isSet;
    bool m_version_number_isValid;

    OAIResourceStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList m_data_set_configurations;
    bool m_data_set_configurations_isSet;
    bool m_data_set_configurations_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_source_entity_arn;
    bool m_source_entity_arn_isSet;
    bool m_source_entity_arn_isValid;

    QString m_theme_arn;
    bool m_theme_arn_isSet;
    bool m_theme_arn_isValid;

    QList m_sheets;
    bool m_sheets_isSet;
    bool m_sheets_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITemplateVersion)

#endif // OAITemplateVersion_H
