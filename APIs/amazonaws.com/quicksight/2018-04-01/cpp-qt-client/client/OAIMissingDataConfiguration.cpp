/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMissingDataConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMissingDataConfiguration::OAIMissingDataConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMissingDataConfiguration::OAIMissingDataConfiguration() {
    this->initializeModel();
}

OAIMissingDataConfiguration::~OAIMissingDataConfiguration() {}

void OAIMissingDataConfiguration::initializeModel() {

    m_treatment_option_isSet = false;
    m_treatment_option_isValid = false;
}

void OAIMissingDataConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMissingDataConfiguration::fromJsonObject(QJsonObject json) {

    m_treatment_option_isValid = ::OpenAPI::fromJsonValue(m_treatment_option, json[QString("TreatmentOption")]);
    m_treatment_option_isSet = !json[QString("TreatmentOption")].isNull() && m_treatment_option_isValid;
}

QString OAIMissingDataConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMissingDataConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_treatment_option.isSet()) {
        obj.insert(QString("TreatmentOption"), ::OpenAPI::toJsonValue(m_treatment_option));
    }
    return obj;
}

OAIMissingDataTreatmentOption OAIMissingDataConfiguration::getTreatmentOption() const {
    return m_treatment_option;
}
void OAIMissingDataConfiguration::setTreatmentOption(const OAIMissingDataTreatmentOption &treatment_option) {
    m_treatment_option = treatment_option;
    m_treatment_option_isSet = true;
}

bool OAIMissingDataConfiguration::is_treatment_option_Set() const{
    return m_treatment_option_isSet;
}

bool OAIMissingDataConfiguration::is_treatment_option_Valid() const{
    return m_treatment_option_isValid;
}

bool OAIMissingDataConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_treatment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMissingDataConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
