/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformOperation::OAITransformOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformOperation::OAITransformOperation() {
    this->initializeModel();
}

OAITransformOperation::~OAITransformOperation() {}

void OAITransformOperation::initializeModel() {

    m_project_operation_isSet = false;
    m_project_operation_isValid = false;

    m_filter_operation_isSet = false;
    m_filter_operation_isValid = false;

    m_create_columns_operation_isSet = false;
    m_create_columns_operation_isValid = false;

    m_rename_column_operation_isSet = false;
    m_rename_column_operation_isValid = false;

    m_cast_column_type_operation_isSet = false;
    m_cast_column_type_operation_isValid = false;

    m_tag_column_operation_isSet = false;
    m_tag_column_operation_isValid = false;

    m_untag_column_operation_isSet = false;
    m_untag_column_operation_isValid = false;

    m_override_dataset_parameter_operation_isSet = false;
    m_override_dataset_parameter_operation_isValid = false;
}

void OAITransformOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformOperation::fromJsonObject(QJsonObject json) {

    m_project_operation_isValid = ::OpenAPI::fromJsonValue(m_project_operation, json[QString("ProjectOperation")]);
    m_project_operation_isSet = !json[QString("ProjectOperation")].isNull() && m_project_operation_isValid;

    m_filter_operation_isValid = ::OpenAPI::fromJsonValue(m_filter_operation, json[QString("FilterOperation")]);
    m_filter_operation_isSet = !json[QString("FilterOperation")].isNull() && m_filter_operation_isValid;

    m_create_columns_operation_isValid = ::OpenAPI::fromJsonValue(m_create_columns_operation, json[QString("CreateColumnsOperation")]);
    m_create_columns_operation_isSet = !json[QString("CreateColumnsOperation")].isNull() && m_create_columns_operation_isValid;

    m_rename_column_operation_isValid = ::OpenAPI::fromJsonValue(m_rename_column_operation, json[QString("RenameColumnOperation")]);
    m_rename_column_operation_isSet = !json[QString("RenameColumnOperation")].isNull() && m_rename_column_operation_isValid;

    m_cast_column_type_operation_isValid = ::OpenAPI::fromJsonValue(m_cast_column_type_operation, json[QString("CastColumnTypeOperation")]);
    m_cast_column_type_operation_isSet = !json[QString("CastColumnTypeOperation")].isNull() && m_cast_column_type_operation_isValid;

    m_tag_column_operation_isValid = ::OpenAPI::fromJsonValue(m_tag_column_operation, json[QString("TagColumnOperation")]);
    m_tag_column_operation_isSet = !json[QString("TagColumnOperation")].isNull() && m_tag_column_operation_isValid;

    m_untag_column_operation_isValid = ::OpenAPI::fromJsonValue(m_untag_column_operation, json[QString("UntagColumnOperation")]);
    m_untag_column_operation_isSet = !json[QString("UntagColumnOperation")].isNull() && m_untag_column_operation_isValid;

    m_override_dataset_parameter_operation_isValid = ::OpenAPI::fromJsonValue(m_override_dataset_parameter_operation, json[QString("OverrideDatasetParameterOperation")]);
    m_override_dataset_parameter_operation_isSet = !json[QString("OverrideDatasetParameterOperation")].isNull() && m_override_dataset_parameter_operation_isValid;
}

QString OAITransformOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_project_operation.isSet()) {
        obj.insert(QString("ProjectOperation"), ::OpenAPI::toJsonValue(m_project_operation));
    }
    if (m_filter_operation.isSet()) {
        obj.insert(QString("FilterOperation"), ::OpenAPI::toJsonValue(m_filter_operation));
    }
    if (m_create_columns_operation.isSet()) {
        obj.insert(QString("CreateColumnsOperation"), ::OpenAPI::toJsonValue(m_create_columns_operation));
    }
    if (m_rename_column_operation.isSet()) {
        obj.insert(QString("RenameColumnOperation"), ::OpenAPI::toJsonValue(m_rename_column_operation));
    }
    if (m_cast_column_type_operation.isSet()) {
        obj.insert(QString("CastColumnTypeOperation"), ::OpenAPI::toJsonValue(m_cast_column_type_operation));
    }
    if (m_tag_column_operation.isSet()) {
        obj.insert(QString("TagColumnOperation"), ::OpenAPI::toJsonValue(m_tag_column_operation));
    }
    if (m_untag_column_operation.isSet()) {
        obj.insert(QString("UntagColumnOperation"), ::OpenAPI::toJsonValue(m_untag_column_operation));
    }
    if (m_override_dataset_parameter_operation.isSet()) {
        obj.insert(QString("OverrideDatasetParameterOperation"), ::OpenAPI::toJsonValue(m_override_dataset_parameter_operation));
    }
    return obj;
}

OAITransformOperation_ProjectOperation OAITransformOperation::getProjectOperation() const {
    return m_project_operation;
}
void OAITransformOperation::setProjectOperation(const OAITransformOperation_ProjectOperation &project_operation) {
    m_project_operation = project_operation;
    m_project_operation_isSet = true;
}

bool OAITransformOperation::is_project_operation_Set() const{
    return m_project_operation_isSet;
}

bool OAITransformOperation::is_project_operation_Valid() const{
    return m_project_operation_isValid;
}

OAITransformOperation_FilterOperation OAITransformOperation::getFilterOperation() const {
    return m_filter_operation;
}
void OAITransformOperation::setFilterOperation(const OAITransformOperation_FilterOperation &filter_operation) {
    m_filter_operation = filter_operation;
    m_filter_operation_isSet = true;
}

bool OAITransformOperation::is_filter_operation_Set() const{
    return m_filter_operation_isSet;
}

bool OAITransformOperation::is_filter_operation_Valid() const{
    return m_filter_operation_isValid;
}

OAITransformOperation_CreateColumnsOperation OAITransformOperation::getCreateColumnsOperation() const {
    return m_create_columns_operation;
}
void OAITransformOperation::setCreateColumnsOperation(const OAITransformOperation_CreateColumnsOperation &create_columns_operation) {
    m_create_columns_operation = create_columns_operation;
    m_create_columns_operation_isSet = true;
}

bool OAITransformOperation::is_create_columns_operation_Set() const{
    return m_create_columns_operation_isSet;
}

bool OAITransformOperation::is_create_columns_operation_Valid() const{
    return m_create_columns_operation_isValid;
}

OAITransformOperation_RenameColumnOperation OAITransformOperation::getRenameColumnOperation() const {
    return m_rename_column_operation;
}
void OAITransformOperation::setRenameColumnOperation(const OAITransformOperation_RenameColumnOperation &rename_column_operation) {
    m_rename_column_operation = rename_column_operation;
    m_rename_column_operation_isSet = true;
}

bool OAITransformOperation::is_rename_column_operation_Set() const{
    return m_rename_column_operation_isSet;
}

bool OAITransformOperation::is_rename_column_operation_Valid() const{
    return m_rename_column_operation_isValid;
}

OAITransformOperation_CastColumnTypeOperation OAITransformOperation::getCastColumnTypeOperation() const {
    return m_cast_column_type_operation;
}
void OAITransformOperation::setCastColumnTypeOperation(const OAITransformOperation_CastColumnTypeOperation &cast_column_type_operation) {
    m_cast_column_type_operation = cast_column_type_operation;
    m_cast_column_type_operation_isSet = true;
}

bool OAITransformOperation::is_cast_column_type_operation_Set() const{
    return m_cast_column_type_operation_isSet;
}

bool OAITransformOperation::is_cast_column_type_operation_Valid() const{
    return m_cast_column_type_operation_isValid;
}

OAITransformOperation_TagColumnOperation OAITransformOperation::getTagColumnOperation() const {
    return m_tag_column_operation;
}
void OAITransformOperation::setTagColumnOperation(const OAITransformOperation_TagColumnOperation &tag_column_operation) {
    m_tag_column_operation = tag_column_operation;
    m_tag_column_operation_isSet = true;
}

bool OAITransformOperation::is_tag_column_operation_Set() const{
    return m_tag_column_operation_isSet;
}

bool OAITransformOperation::is_tag_column_operation_Valid() const{
    return m_tag_column_operation_isValid;
}

OAIUntagColumnOperation OAITransformOperation::getUntagColumnOperation() const {
    return m_untag_column_operation;
}
void OAITransformOperation::setUntagColumnOperation(const OAIUntagColumnOperation &untag_column_operation) {
    m_untag_column_operation = untag_column_operation;
    m_untag_column_operation_isSet = true;
}

bool OAITransformOperation::is_untag_column_operation_Set() const{
    return m_untag_column_operation_isSet;
}

bool OAITransformOperation::is_untag_column_operation_Valid() const{
    return m_untag_column_operation_isValid;
}

OAIOverrideDatasetParameterOperation OAITransformOperation::getOverrideDatasetParameterOperation() const {
    return m_override_dataset_parameter_operation;
}
void OAITransformOperation::setOverrideDatasetParameterOperation(const OAIOverrideDatasetParameterOperation &override_dataset_parameter_operation) {
    m_override_dataset_parameter_operation = override_dataset_parameter_operation;
    m_override_dataset_parameter_operation_isSet = true;
}

bool OAITransformOperation::is_override_dataset_parameter_operation_Set() const{
    return m_override_dataset_parameter_operation_isSet;
}

bool OAITransformOperation::is_override_dataset_parameter_operation_Valid() const{
    return m_override_dataset_parameter_operation_isValid;
}

bool OAITransformOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_columns_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rename_column_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cast_column_type_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_column_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_untag_column_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_dataset_parameter_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
