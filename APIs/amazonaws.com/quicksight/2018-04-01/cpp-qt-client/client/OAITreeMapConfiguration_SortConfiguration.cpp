/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITreeMapConfiguration_SortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITreeMapConfiguration_SortConfiguration::OAITreeMapConfiguration_SortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITreeMapConfiguration_SortConfiguration::OAITreeMapConfiguration_SortConfiguration() {
    this->initializeModel();
}

OAITreeMapConfiguration_SortConfiguration::~OAITreeMapConfiguration_SortConfiguration() {}

void OAITreeMapConfiguration_SortConfiguration::initializeModel() {

    m_tree_map_sort_isSet = false;
    m_tree_map_sort_isValid = false;

    m_tree_map_group_items_limit_configuration_isSet = false;
    m_tree_map_group_items_limit_configuration_isValid = false;
}

void OAITreeMapConfiguration_SortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITreeMapConfiguration_SortConfiguration::fromJsonObject(QJsonObject json) {

    m_tree_map_sort_isValid = ::OpenAPI::fromJsonValue(m_tree_map_sort, json[QString("TreeMapSort")]);
    m_tree_map_sort_isSet = !json[QString("TreeMapSort")].isNull() && m_tree_map_sort_isValid;

    m_tree_map_group_items_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_tree_map_group_items_limit_configuration, json[QString("TreeMapGroupItemsLimitConfiguration")]);
    m_tree_map_group_items_limit_configuration_isSet = !json[QString("TreeMapGroupItemsLimitConfiguration")].isNull() && m_tree_map_group_items_limit_configuration_isValid;
}

QString OAITreeMapConfiguration_SortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITreeMapConfiguration_SortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_tree_map_sort.isSet()) {
        obj.insert(QString("TreeMapSort"), ::OpenAPI::toJsonValue(m_tree_map_sort));
    }
    if (m_tree_map_group_items_limit_configuration.isSet()) {
        obj.insert(QString("TreeMapGroupItemsLimitConfiguration"), ::OpenAPI::toJsonValue(m_tree_map_group_items_limit_configuration));
    }
    return obj;
}

QList OAITreeMapConfiguration_SortConfiguration::getTreeMapSort() const {
    return m_tree_map_sort;
}
void OAITreeMapConfiguration_SortConfiguration::setTreeMapSort(const QList &tree_map_sort) {
    m_tree_map_sort = tree_map_sort;
    m_tree_map_sort_isSet = true;
}

bool OAITreeMapConfiguration_SortConfiguration::is_tree_map_sort_Set() const{
    return m_tree_map_sort_isSet;
}

bool OAITreeMapConfiguration_SortConfiguration::is_tree_map_sort_Valid() const{
    return m_tree_map_sort_isValid;
}

OAITreeMapSortConfiguration_TreeMapGroupItemsLimitConfiguration OAITreeMapConfiguration_SortConfiguration::getTreeMapGroupItemsLimitConfiguration() const {
    return m_tree_map_group_items_limit_configuration;
}
void OAITreeMapConfiguration_SortConfiguration::setTreeMapGroupItemsLimitConfiguration(const OAITreeMapSortConfiguration_TreeMapGroupItemsLimitConfiguration &tree_map_group_items_limit_configuration) {
    m_tree_map_group_items_limit_configuration = tree_map_group_items_limit_configuration;
    m_tree_map_group_items_limit_configuration_isSet = true;
}

bool OAITreeMapConfiguration_SortConfiguration::is_tree_map_group_items_limit_configuration_Set() const{
    return m_tree_map_group_items_limit_configuration_isSet;
}

bool OAITreeMapConfiguration_SortConfiguration::is_tree_map_group_items_limit_configuration_Valid() const{
    return m_tree_map_group_items_limit_configuration_isValid;
}

bool OAITreeMapConfiguration_SortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tree_map_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree_map_group_items_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITreeMapConfiguration_SortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
