/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaperSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaperSize::OAIPaperSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaperSize::OAIPaperSize() {
    this->initializeModel();
}

OAIPaperSize::~OAIPaperSize() {}

void OAIPaperSize::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPaperSize::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPaperSize::fromJson(QString jsonString) {
    
    if ( jsonString.compare("US_LETTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::US_LETTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_LEGAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::US_LEGAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_TABLOID_LEDGER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::US_TABLOID_LEDGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("A0", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::A0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("A1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::A1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("A2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::A2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("A3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::A3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("A4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::A4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("A5", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::A5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JIS_B4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::JIS_B4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JIS_B5", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaperSize::JIS_B5;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPaperSize::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPaperSize::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPaperSize::US_LETTER:
            val = "US_LETTER";
            break;
        case eOAIPaperSize::US_LEGAL:
            val = "US_LEGAL";
            break;
        case eOAIPaperSize::US_TABLOID_LEDGER:
            val = "US_TABLOID_LEDGER";
            break;
        case eOAIPaperSize::A0:
            val = "A0";
            break;
        case eOAIPaperSize::A1:
            val = "A1";
            break;
        case eOAIPaperSize::A2:
            val = "A2";
            break;
        case eOAIPaperSize::A3:
            val = "A3";
            break;
        case eOAIPaperSize::A4:
            val = "A4";
            break;
        case eOAIPaperSize::A5:
            val = "A5";
            break;
        case eOAIPaperSize::JIS_B4:
            val = "JIS_B4";
            break;
        case eOAIPaperSize::JIS_B5:
            val = "JIS_B5";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPaperSize::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPaperSize::eOAIPaperSize OAIPaperSize::getValue() const {
    return m_value;
}

void OAIPaperSize::setValue(const OAIPaperSize::eOAIPaperSize& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPaperSize::isSet() const {
    
    return m_value_isSet;
}

bool OAIPaperSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
