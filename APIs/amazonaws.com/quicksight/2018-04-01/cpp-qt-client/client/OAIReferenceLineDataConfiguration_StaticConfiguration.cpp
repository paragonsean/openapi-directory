/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLineDataConfiguration_StaticConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLineDataConfiguration_StaticConfiguration::OAIReferenceLineDataConfiguration_StaticConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLineDataConfiguration_StaticConfiguration::OAIReferenceLineDataConfiguration_StaticConfiguration() {
    this->initializeModel();
}

OAIReferenceLineDataConfiguration_StaticConfiguration::~OAIReferenceLineDataConfiguration_StaticConfiguration() {}

void OAIReferenceLineDataConfiguration_StaticConfiguration::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIReferenceLineDataConfiguration_StaticConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLineDataConfiguration_StaticConfiguration::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIReferenceLineDataConfiguration_StaticConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLineDataConfiguration_StaticConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

double OAIReferenceLineDataConfiguration_StaticConfiguration::getValue() const {
    return m_value;
}
void OAIReferenceLineDataConfiguration_StaticConfiguration::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIReferenceLineDataConfiguration_StaticConfiguration::is_value_Set() const{
    return m_value_isSet;
}

bool OAIReferenceLineDataConfiguration_StaticConfiguration::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIReferenceLineDataConfiguration_StaticConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLineDataConfiguration_StaticConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && true;
}

} // namespace OpenAPI
