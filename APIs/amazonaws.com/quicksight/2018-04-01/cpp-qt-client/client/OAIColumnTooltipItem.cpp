/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnTooltipItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnTooltipItem::OAIColumnTooltipItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnTooltipItem::OAIColumnTooltipItem() {
    this->initializeModel();
}

OAIColumnTooltipItem::~OAIColumnTooltipItem() {}

void OAIColumnTooltipItem::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_aggregation_isSet = false;
    m_aggregation_isValid = false;
}

void OAIColumnTooltipItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnTooltipItem::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("Label")]);
    m_label_isSet = !json[QString("Label")].isNull() && m_label_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_aggregation_isValid = ::OpenAPI::fromJsonValue(m_aggregation, json[QString("Aggregation")]);
    m_aggregation_isSet = !json[QString("Aggregation")].isNull() && m_aggregation_isValid;
}

QString OAIColumnTooltipItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnTooltipItem::asJsonObject() const {
    QJsonObject obj;
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_label_isSet) {
        obj.insert(QString("Label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_aggregation.isSet()) {
        obj.insert(QString("Aggregation"), ::OpenAPI::toJsonValue(m_aggregation));
    }
    return obj;
}

OAIColumnTooltipItem_Column OAIColumnTooltipItem::getColumn() const {
    return m_column;
}
void OAIColumnTooltipItem::setColumn(const OAIColumnTooltipItem_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIColumnTooltipItem::is_column_Set() const{
    return m_column_isSet;
}

bool OAIColumnTooltipItem::is_column_Valid() const{
    return m_column_isValid;
}

QString OAIColumnTooltipItem::getLabel() const {
    return m_label;
}
void OAIColumnTooltipItem::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIColumnTooltipItem::is_label_Set() const{
    return m_label_isSet;
}

bool OAIColumnTooltipItem::is_label_Valid() const{
    return m_label_isValid;
}

OAIVisibility OAIColumnTooltipItem::getVisibility() const {
    return m_visibility;
}
void OAIColumnTooltipItem::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIColumnTooltipItem::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIColumnTooltipItem::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIColumnTooltipItem_Aggregation OAIColumnTooltipItem::getAggregation() const {
    return m_aggregation;
}
void OAIColumnTooltipItem::setAggregation(const OAIColumnTooltipItem_Aggregation &aggregation) {
    m_aggregation = aggregation;
    m_aggregation_isSet = true;
}

bool OAIColumnTooltipItem::is_aggregation_Set() const{
    return m_aggregation_isSet;
}

bool OAIColumnTooltipItem::is_aggregation_Valid() const{
    return m_aggregation_isValid;
}

bool OAIColumnTooltipItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnTooltipItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_isValid && true;
}

} // namespace OpenAPI
