/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformOperation_RenameColumnOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformOperation_RenameColumnOperation::OAITransformOperation_RenameColumnOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformOperation_RenameColumnOperation::OAITransformOperation_RenameColumnOperation() {
    this->initializeModel();
}

OAITransformOperation_RenameColumnOperation::~OAITransformOperation_RenameColumnOperation() {}

void OAITransformOperation_RenameColumnOperation::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_new_column_name_isSet = false;
    m_new_column_name_isValid = false;
}

void OAITransformOperation_RenameColumnOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformOperation_RenameColumnOperation::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_new_column_name_isValid = ::OpenAPI::fromJsonValue(m_new_column_name, json[QString("NewColumnName")]);
    m_new_column_name_isSet = !json[QString("NewColumnName")].isNull() && m_new_column_name_isValid;
}

QString OAITransformOperation_RenameColumnOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformOperation_RenameColumnOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_new_column_name_isSet) {
        obj.insert(QString("NewColumnName"), ::OpenAPI::toJsonValue(m_new_column_name));
    }
    return obj;
}

QString OAITransformOperation_RenameColumnOperation::getColumnName() const {
    return m_column_name;
}
void OAITransformOperation_RenameColumnOperation::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAITransformOperation_RenameColumnOperation::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAITransformOperation_RenameColumnOperation::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QString OAITransformOperation_RenameColumnOperation::getNewColumnName() const {
    return m_new_column_name;
}
void OAITransformOperation_RenameColumnOperation::setNewColumnName(const QString &new_column_name) {
    m_new_column_name = new_column_name;
    m_new_column_name_isSet = true;
}

bool OAITransformOperation_RenameColumnOperation::is_new_column_name_Set() const{
    return m_new_column_name_isSet;
}

bool OAITransformOperation_RenameColumnOperation::is_new_column_name_Valid() const{
    return m_new_column_name_isValid;
}

bool OAITransformOperation_RenameColumnOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformOperation_RenameColumnOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_new_column_name_isValid && true;
}

} // namespace OpenAPI
