/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxPlotChartConfiguration_BoxPlotOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxPlotChartConfiguration_BoxPlotOptions::OAIBoxPlotChartConfiguration_BoxPlotOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxPlotChartConfiguration_BoxPlotOptions::OAIBoxPlotChartConfiguration_BoxPlotOptions() {
    this->initializeModel();
}

OAIBoxPlotChartConfiguration_BoxPlotOptions::~OAIBoxPlotChartConfiguration_BoxPlotOptions() {}

void OAIBoxPlotChartConfiguration_BoxPlotOptions::initializeModel() {

    m_style_options_isSet = false;
    m_style_options_isValid = false;

    m_outlier_visibility_isSet = false;
    m_outlier_visibility_isValid = false;

    m_all_data_points_visibility_isSet = false;
    m_all_data_points_visibility_isValid = false;
}

void OAIBoxPlotChartConfiguration_BoxPlotOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxPlotChartConfiguration_BoxPlotOptions::fromJsonObject(QJsonObject json) {

    m_style_options_isValid = ::OpenAPI::fromJsonValue(m_style_options, json[QString("StyleOptions")]);
    m_style_options_isSet = !json[QString("StyleOptions")].isNull() && m_style_options_isValid;

    m_outlier_visibility_isValid = ::OpenAPI::fromJsonValue(m_outlier_visibility, json[QString("OutlierVisibility")]);
    m_outlier_visibility_isSet = !json[QString("OutlierVisibility")].isNull() && m_outlier_visibility_isValid;

    m_all_data_points_visibility_isValid = ::OpenAPI::fromJsonValue(m_all_data_points_visibility, json[QString("AllDataPointsVisibility")]);
    m_all_data_points_visibility_isSet = !json[QString("AllDataPointsVisibility")].isNull() && m_all_data_points_visibility_isValid;
}

QString OAIBoxPlotChartConfiguration_BoxPlotOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxPlotChartConfiguration_BoxPlotOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_style_options.isSet()) {
        obj.insert(QString("StyleOptions"), ::OpenAPI::toJsonValue(m_style_options));
    }
    if (m_outlier_visibility.isSet()) {
        obj.insert(QString("OutlierVisibility"), ::OpenAPI::toJsonValue(m_outlier_visibility));
    }
    if (m_all_data_points_visibility.isSet()) {
        obj.insert(QString("AllDataPointsVisibility"), ::OpenAPI::toJsonValue(m_all_data_points_visibility));
    }
    return obj;
}

OAIBoxPlotOptions_StyleOptions OAIBoxPlotChartConfiguration_BoxPlotOptions::getStyleOptions() const {
    return m_style_options;
}
void OAIBoxPlotChartConfiguration_BoxPlotOptions::setStyleOptions(const OAIBoxPlotOptions_StyleOptions &style_options) {
    m_style_options = style_options;
    m_style_options_isSet = true;
}

bool OAIBoxPlotChartConfiguration_BoxPlotOptions::is_style_options_Set() const{
    return m_style_options_isSet;
}

bool OAIBoxPlotChartConfiguration_BoxPlotOptions::is_style_options_Valid() const{
    return m_style_options_isValid;
}

OAIVisibility OAIBoxPlotChartConfiguration_BoxPlotOptions::getOutlierVisibility() const {
    return m_outlier_visibility;
}
void OAIBoxPlotChartConfiguration_BoxPlotOptions::setOutlierVisibility(const OAIVisibility &outlier_visibility) {
    m_outlier_visibility = outlier_visibility;
    m_outlier_visibility_isSet = true;
}

bool OAIBoxPlotChartConfiguration_BoxPlotOptions::is_outlier_visibility_Set() const{
    return m_outlier_visibility_isSet;
}

bool OAIBoxPlotChartConfiguration_BoxPlotOptions::is_outlier_visibility_Valid() const{
    return m_outlier_visibility_isValid;
}

OAIVisibility OAIBoxPlotChartConfiguration_BoxPlotOptions::getAllDataPointsVisibility() const {
    return m_all_data_points_visibility;
}
void OAIBoxPlotChartConfiguration_BoxPlotOptions::setAllDataPointsVisibility(const OAIVisibility &all_data_points_visibility) {
    m_all_data_points_visibility = all_data_points_visibility;
    m_all_data_points_visibility_isSet = true;
}

bool OAIBoxPlotChartConfiguration_BoxPlotOptions::is_all_data_points_visibility_Set() const{
    return m_all_data_points_visibility_isSet;
}

bool OAIBoxPlotChartConfiguration_BoxPlotOptions::is_all_data_points_visibility_Valid() const{
    return m_all_data_points_visibility_isValid;
}

bool OAIBoxPlotChartConfiguration_BoxPlotOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_style_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlier_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_data_points_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxPlotChartConfiguration_BoxPlotOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
