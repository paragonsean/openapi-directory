/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTemplateAliasResponse_TemplateAlias.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTemplateAliasResponse_TemplateAlias::OAICreateTemplateAliasResponse_TemplateAlias(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTemplateAliasResponse_TemplateAlias::OAICreateTemplateAliasResponse_TemplateAlias() {
    this->initializeModel();
}

OAICreateTemplateAliasResponse_TemplateAlias::~OAICreateTemplateAliasResponse_TemplateAlias() {}

void OAICreateTemplateAliasResponse_TemplateAlias::initializeModel() {

    m_alias_name_isSet = false;
    m_alias_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_template_version_number_isSet = false;
    m_template_version_number_isValid = false;
}

void OAICreateTemplateAliasResponse_TemplateAlias::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTemplateAliasResponse_TemplateAlias::fromJsonObject(QJsonObject json) {

    m_alias_name_isValid = ::OpenAPI::fromJsonValue(m_alias_name, json[QString("AliasName")]);
    m_alias_name_isSet = !json[QString("AliasName")].isNull() && m_alias_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_template_version_number_isValid = ::OpenAPI::fromJsonValue(m_template_version_number, json[QString("TemplateVersionNumber")]);
    m_template_version_number_isSet = !json[QString("TemplateVersionNumber")].isNull() && m_template_version_number_isValid;
}

QString OAICreateTemplateAliasResponse_TemplateAlias::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTemplateAliasResponse_TemplateAlias::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_name_isSet) {
        obj.insert(QString("AliasName"), ::OpenAPI::toJsonValue(m_alias_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_template_version_number_isSet) {
        obj.insert(QString("TemplateVersionNumber"), ::OpenAPI::toJsonValue(m_template_version_number));
    }
    return obj;
}

QString OAICreateTemplateAliasResponse_TemplateAlias::getAliasName() const {
    return m_alias_name;
}
void OAICreateTemplateAliasResponse_TemplateAlias::setAliasName(const QString &alias_name) {
    m_alias_name = alias_name;
    m_alias_name_isSet = true;
}

bool OAICreateTemplateAliasResponse_TemplateAlias::is_alias_name_Set() const{
    return m_alias_name_isSet;
}

bool OAICreateTemplateAliasResponse_TemplateAlias::is_alias_name_Valid() const{
    return m_alias_name_isValid;
}

QString OAICreateTemplateAliasResponse_TemplateAlias::getArn() const {
    return m_arn;
}
void OAICreateTemplateAliasResponse_TemplateAlias::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateTemplateAliasResponse_TemplateAlias::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateTemplateAliasResponse_TemplateAlias::is_arn_Valid() const{
    return m_arn_isValid;
}

qint32 OAICreateTemplateAliasResponse_TemplateAlias::getTemplateVersionNumber() const {
    return m_template_version_number;
}
void OAICreateTemplateAliasResponse_TemplateAlias::setTemplateVersionNumber(const qint32 &template_version_number) {
    m_template_version_number = template_version_number;
    m_template_version_number_isSet = true;
}

bool OAICreateTemplateAliasResponse_TemplateAlias::is_template_version_number_Set() const{
    return m_template_version_number_isSet;
}

bool OAICreateTemplateAliasResponse_TemplateAlias::is_template_version_number_Valid() const{
    return m_template_version_number_isValid;
}

bool OAICreateTemplateAliasResponse_TemplateAlias::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTemplateAliasResponse_TemplateAlias::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
