/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAxisScale_Linear.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAxisScale_Linear::OAIAxisScale_Linear(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAxisScale_Linear::OAIAxisScale_Linear() {
    this->initializeModel();
}

OAIAxisScale_Linear::~OAIAxisScale_Linear() {}

void OAIAxisScale_Linear::initializeModel() {

    m_step_count_isSet = false;
    m_step_count_isValid = false;

    m_step_size_isSet = false;
    m_step_size_isValid = false;
}

void OAIAxisScale_Linear::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAxisScale_Linear::fromJsonObject(QJsonObject json) {

    m_step_count_isValid = ::OpenAPI::fromJsonValue(m_step_count, json[QString("StepCount")]);
    m_step_count_isSet = !json[QString("StepCount")].isNull() && m_step_count_isValid;

    m_step_size_isValid = ::OpenAPI::fromJsonValue(m_step_size, json[QString("StepSize")]);
    m_step_size_isSet = !json[QString("StepSize")].isNull() && m_step_size_isValid;
}

QString OAIAxisScale_Linear::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAxisScale_Linear::asJsonObject() const {
    QJsonObject obj;
    if (m_step_count_isSet) {
        obj.insert(QString("StepCount"), ::OpenAPI::toJsonValue(m_step_count));
    }
    if (m_step_size_isSet) {
        obj.insert(QString("StepSize"), ::OpenAPI::toJsonValue(m_step_size));
    }
    return obj;
}

qint32 OAIAxisScale_Linear::getStepCount() const {
    return m_step_count;
}
void OAIAxisScale_Linear::setStepCount(const qint32 &step_count) {
    m_step_count = step_count;
    m_step_count_isSet = true;
}

bool OAIAxisScale_Linear::is_step_count_Set() const{
    return m_step_count_isSet;
}

bool OAIAxisScale_Linear::is_step_count_Valid() const{
    return m_step_count_isValid;
}

double OAIAxisScale_Linear::getStepSize() const {
    return m_step_size;
}
void OAIAxisScale_Linear::setStepSize(const double &step_size) {
    m_step_size = step_size;
    m_step_size_isSet = true;
}

bool OAIAxisScale_Linear::is_step_size_Set() const{
    return m_step_size_isSet;
}

bool OAIAxisScale_Linear::is_step_size_Valid() const{
    return m_step_size_isValid;
}

bool OAIAxisScale_Linear::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_step_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAxisScale_Linear::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
