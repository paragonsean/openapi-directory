/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLineLabelConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLineLabelConfiguration::OAIReferenceLineLabelConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLineLabelConfiguration::OAIReferenceLineLabelConfiguration() {
    this->initializeModel();
}

OAIReferenceLineLabelConfiguration::~OAIReferenceLineLabelConfiguration() {}

void OAIReferenceLineLabelConfiguration::initializeModel() {

    m_value_label_configuration_isSet = false;
    m_value_label_configuration_isValid = false;

    m_custom_label_configuration_isSet = false;
    m_custom_label_configuration_isValid = false;

    m_font_configuration_isSet = false;
    m_font_configuration_isValid = false;

    m_font_color_isSet = false;
    m_font_color_isValid = false;

    m_horizontal_position_isSet = false;
    m_horizontal_position_isValid = false;

    m_vertical_position_isSet = false;
    m_vertical_position_isValid = false;
}

void OAIReferenceLineLabelConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLineLabelConfiguration::fromJsonObject(QJsonObject json) {

    m_value_label_configuration_isValid = ::OpenAPI::fromJsonValue(m_value_label_configuration, json[QString("ValueLabelConfiguration")]);
    m_value_label_configuration_isSet = !json[QString("ValueLabelConfiguration")].isNull() && m_value_label_configuration_isValid;

    m_custom_label_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_label_configuration, json[QString("CustomLabelConfiguration")]);
    m_custom_label_configuration_isSet = !json[QString("CustomLabelConfiguration")].isNull() && m_custom_label_configuration_isValid;

    m_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_font_configuration, json[QString("FontConfiguration")]);
    m_font_configuration_isSet = !json[QString("FontConfiguration")].isNull() && m_font_configuration_isValid;

    m_font_color_isValid = ::OpenAPI::fromJsonValue(m_font_color, json[QString("FontColor")]);
    m_font_color_isSet = !json[QString("FontColor")].isNull() && m_font_color_isValid;

    m_horizontal_position_isValid = ::OpenAPI::fromJsonValue(m_horizontal_position, json[QString("HorizontalPosition")]);
    m_horizontal_position_isSet = !json[QString("HorizontalPosition")].isNull() && m_horizontal_position_isValid;

    m_vertical_position_isValid = ::OpenAPI::fromJsonValue(m_vertical_position, json[QString("VerticalPosition")]);
    m_vertical_position_isSet = !json[QString("VerticalPosition")].isNull() && m_vertical_position_isValid;
}

QString OAIReferenceLineLabelConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLineLabelConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_value_label_configuration.isSet()) {
        obj.insert(QString("ValueLabelConfiguration"), ::OpenAPI::toJsonValue(m_value_label_configuration));
    }
    if (m_custom_label_configuration.isSet()) {
        obj.insert(QString("CustomLabelConfiguration"), ::OpenAPI::toJsonValue(m_custom_label_configuration));
    }
    if (m_font_configuration.isSet()) {
        obj.insert(QString("FontConfiguration"), ::OpenAPI::toJsonValue(m_font_configuration));
    }
    if (m_font_color_isSet) {
        obj.insert(QString("FontColor"), ::OpenAPI::toJsonValue(m_font_color));
    }
    if (m_horizontal_position.isSet()) {
        obj.insert(QString("HorizontalPosition"), ::OpenAPI::toJsonValue(m_horizontal_position));
    }
    if (m_vertical_position.isSet()) {
        obj.insert(QString("VerticalPosition"), ::OpenAPI::toJsonValue(m_vertical_position));
    }
    return obj;
}

OAIReferenceLineLabelConfiguration_ValueLabelConfiguration OAIReferenceLineLabelConfiguration::getValueLabelConfiguration() const {
    return m_value_label_configuration;
}
void OAIReferenceLineLabelConfiguration::setValueLabelConfiguration(const OAIReferenceLineLabelConfiguration_ValueLabelConfiguration &value_label_configuration) {
    m_value_label_configuration = value_label_configuration;
    m_value_label_configuration_isSet = true;
}

bool OAIReferenceLineLabelConfiguration::is_value_label_configuration_Set() const{
    return m_value_label_configuration_isSet;
}

bool OAIReferenceLineLabelConfiguration::is_value_label_configuration_Valid() const{
    return m_value_label_configuration_isValid;
}

OAIReferenceLineLabelConfiguration_CustomLabelConfiguration OAIReferenceLineLabelConfiguration::getCustomLabelConfiguration() const {
    return m_custom_label_configuration;
}
void OAIReferenceLineLabelConfiguration::setCustomLabelConfiguration(const OAIReferenceLineLabelConfiguration_CustomLabelConfiguration &custom_label_configuration) {
    m_custom_label_configuration = custom_label_configuration;
    m_custom_label_configuration_isSet = true;
}

bool OAIReferenceLineLabelConfiguration::is_custom_label_configuration_Set() const{
    return m_custom_label_configuration_isSet;
}

bool OAIReferenceLineLabelConfiguration::is_custom_label_configuration_Valid() const{
    return m_custom_label_configuration_isValid;
}

OAIReferenceLineLabelConfiguration_FontConfiguration OAIReferenceLineLabelConfiguration::getFontConfiguration() const {
    return m_font_configuration;
}
void OAIReferenceLineLabelConfiguration::setFontConfiguration(const OAIReferenceLineLabelConfiguration_FontConfiguration &font_configuration) {
    m_font_configuration = font_configuration;
    m_font_configuration_isSet = true;
}

bool OAIReferenceLineLabelConfiguration::is_font_configuration_Set() const{
    return m_font_configuration_isSet;
}

bool OAIReferenceLineLabelConfiguration::is_font_configuration_Valid() const{
    return m_font_configuration_isValid;
}

QString OAIReferenceLineLabelConfiguration::getFontColor() const {
    return m_font_color;
}
void OAIReferenceLineLabelConfiguration::setFontColor(const QString &font_color) {
    m_font_color = font_color;
    m_font_color_isSet = true;
}

bool OAIReferenceLineLabelConfiguration::is_font_color_Set() const{
    return m_font_color_isSet;
}

bool OAIReferenceLineLabelConfiguration::is_font_color_Valid() const{
    return m_font_color_isValid;
}

OAIReferenceLineLabelHorizontalPosition OAIReferenceLineLabelConfiguration::getHorizontalPosition() const {
    return m_horizontal_position;
}
void OAIReferenceLineLabelConfiguration::setHorizontalPosition(const OAIReferenceLineLabelHorizontalPosition &horizontal_position) {
    m_horizontal_position = horizontal_position;
    m_horizontal_position_isSet = true;
}

bool OAIReferenceLineLabelConfiguration::is_horizontal_position_Set() const{
    return m_horizontal_position_isSet;
}

bool OAIReferenceLineLabelConfiguration::is_horizontal_position_Valid() const{
    return m_horizontal_position_isValid;
}

OAIReferenceLineLabelVerticalPosition OAIReferenceLineLabelConfiguration::getVerticalPosition() const {
    return m_vertical_position;
}
void OAIReferenceLineLabelConfiguration::setVerticalPosition(const OAIReferenceLineLabelVerticalPosition &vertical_position) {
    m_vertical_position = vertical_position;
    m_vertical_position_isSet = true;
}

bool OAIReferenceLineLabelConfiguration::is_vertical_position_Set() const{
    return m_vertical_position_isSet;
}

bool OAIReferenceLineLabelConfiguration::is_vertical_position_Valid() const{
    return m_vertical_position_isValid;
}

bool OAIReferenceLineLabelConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_label_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLineLabelConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
