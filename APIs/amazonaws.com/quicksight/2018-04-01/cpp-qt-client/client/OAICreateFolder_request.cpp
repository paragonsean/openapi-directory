/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFolder_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFolder_request::OAICreateFolder_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFolder_request::OAICreateFolder_request() {
    this->initializeModel();
}

OAICreateFolder_request::~OAICreateFolder_request() {}

void OAICreateFolder_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_folder_type_isSet = false;
    m_folder_type_isValid = false;

    m_parent_folder_arn_isSet = false;
    m_parent_folder_arn_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateFolder_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFolder_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_folder_type_isValid = ::OpenAPI::fromJsonValue(m_folder_type, json[QString("FolderType")]);
    m_folder_type_isSet = !json[QString("FolderType")].isNull() && m_folder_type_isValid;

    m_parent_folder_arn_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_arn, json[QString("ParentFolderArn")]);
    m_parent_folder_arn_isSet = !json[QString("ParentFolderArn")].isNull() && m_parent_folder_arn_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateFolder_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFolder_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_folder_type_isSet) {
        obj.insert(QString("FolderType"), ::OpenAPI::toJsonValue(m_folder_type));
    }
    if (m_parent_folder_arn_isSet) {
        obj.insert(QString("ParentFolderArn"), ::OpenAPI::toJsonValue(m_parent_folder_arn));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateFolder_request::getName() const {
    return m_name;
}
void OAICreateFolder_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFolder_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFolder_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateFolder_request::getFolderType() const {
    return m_folder_type;
}
void OAICreateFolder_request::setFolderType(const QString &folder_type) {
    m_folder_type = folder_type;
    m_folder_type_isSet = true;
}

bool OAICreateFolder_request::is_folder_type_Set() const{
    return m_folder_type_isSet;
}

bool OAICreateFolder_request::is_folder_type_Valid() const{
    return m_folder_type_isValid;
}

QString OAICreateFolder_request::getParentFolderArn() const {
    return m_parent_folder_arn;
}
void OAICreateFolder_request::setParentFolderArn(const QString &parent_folder_arn) {
    m_parent_folder_arn = parent_folder_arn;
    m_parent_folder_arn_isSet = true;
}

bool OAICreateFolder_request::is_parent_folder_arn_Set() const{
    return m_parent_folder_arn_isSet;
}

bool OAICreateFolder_request::is_parent_folder_arn_Valid() const{
    return m_parent_folder_arn_isValid;
}

QList<OAIResourcePermission> OAICreateFolder_request::getPermissions() const {
    return m_permissions;
}
void OAICreateFolder_request::setPermissions(const QList<OAIResourcePermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateFolder_request::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateFolder_request::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QList<OAITag> OAICreateFolder_request::getTags() const {
    return m_tags;
}
void OAICreateFolder_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFolder_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFolder_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateFolder_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFolder_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
