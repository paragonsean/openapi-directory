/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableCellConditionalFormatting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableCellConditionalFormatting::OAITableCellConditionalFormatting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableCellConditionalFormatting::OAITableCellConditionalFormatting() {
    this->initializeModel();
}

OAITableCellConditionalFormatting::~OAITableCellConditionalFormatting() {}

void OAITableCellConditionalFormatting::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_text_format_isSet = false;
    m_text_format_isValid = false;
}

void OAITableCellConditionalFormatting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableCellConditionalFormatting::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_text_format_isValid = ::OpenAPI::fromJsonValue(m_text_format, json[QString("TextFormat")]);
    m_text_format_isSet = !json[QString("TextFormat")].isNull() && m_text_format_isValid;
}

QString OAITableCellConditionalFormatting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableCellConditionalFormatting::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_text_format.isSet()) {
        obj.insert(QString("TextFormat"), ::OpenAPI::toJsonValue(m_text_format));
    }
    return obj;
}

QString OAITableCellConditionalFormatting::getFieldId() const {
    return m_field_id;
}
void OAITableCellConditionalFormatting::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAITableCellConditionalFormatting::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAITableCellConditionalFormatting::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIPivotTableCellConditionalFormatting_TextFormat OAITableCellConditionalFormatting::getTextFormat() const {
    return m_text_format;
}
void OAITableCellConditionalFormatting::setTextFormat(const OAIPivotTableCellConditionalFormatting_TextFormat &text_format) {
    m_text_format = text_format;
    m_text_format_isSet = true;
}

bool OAITableCellConditionalFormatting::is_text_format_Set() const{
    return m_text_format_isSet;
}

bool OAITableCellConditionalFormatting::is_text_format_Valid() const{
    return m_text_format_isValid;
}

bool OAITableCellConditionalFormatting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableCellConditionalFormatting::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && true;
}

} // namespace OpenAPI
