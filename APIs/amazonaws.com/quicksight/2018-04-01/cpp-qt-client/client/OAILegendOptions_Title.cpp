/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegendOptions_Title.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegendOptions_Title::OAILegendOptions_Title(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegendOptions_Title::OAILegendOptions_Title() {
    this->initializeModel();
}

OAILegendOptions_Title::~OAILegendOptions_Title() {}

void OAILegendOptions_Title::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_font_configuration_isSet = false;
    m_font_configuration_isValid = false;

    m_custom_label_isSet = false;
    m_custom_label_isValid = false;
}

void OAILegendOptions_Title::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegendOptions_Title::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_font_configuration, json[QString("FontConfiguration")]);
    m_font_configuration_isSet = !json[QString("FontConfiguration")].isNull() && m_font_configuration_isValid;

    m_custom_label_isValid = ::OpenAPI::fromJsonValue(m_custom_label, json[QString("CustomLabel")]);
    m_custom_label_isSet = !json[QString("CustomLabel")].isNull() && m_custom_label_isValid;
}

QString OAILegendOptions_Title::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegendOptions_Title::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_font_configuration.isSet()) {
        obj.insert(QString("FontConfiguration"), ::OpenAPI::toJsonValue(m_font_configuration));
    }
    if (m_custom_label_isSet) {
        obj.insert(QString("CustomLabel"), ::OpenAPI::toJsonValue(m_custom_label));
    }
    return obj;
}

OAIVisibility OAILegendOptions_Title::getVisibility() const {
    return m_visibility;
}
void OAILegendOptions_Title::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAILegendOptions_Title::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAILegendOptions_Title::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAILabelOptions_FontConfiguration OAILegendOptions_Title::getFontConfiguration() const {
    return m_font_configuration;
}
void OAILegendOptions_Title::setFontConfiguration(const OAILabelOptions_FontConfiguration &font_configuration) {
    m_font_configuration = font_configuration;
    m_font_configuration_isSet = true;
}

bool OAILegendOptions_Title::is_font_configuration_Set() const{
    return m_font_configuration_isSet;
}

bool OAILegendOptions_Title::is_font_configuration_Valid() const{
    return m_font_configuration_isValid;
}

QString OAILegendOptions_Title::getCustomLabel() const {
    return m_custom_label;
}
void OAILegendOptions_Title::setCustomLabel(const QString &custom_label) {
    m_custom_label = custom_label;
    m_custom_label_isSet = true;
}

bool OAILegendOptions_Title::is_custom_label_Set() const{
    return m_custom_label_isSet;
}

bool OAILegendOptions_Title::is_custom_label_Valid() const{
    return m_custom_label_isValid;
}

bool OAILegendOptions_Title::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegendOptions_Title::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
