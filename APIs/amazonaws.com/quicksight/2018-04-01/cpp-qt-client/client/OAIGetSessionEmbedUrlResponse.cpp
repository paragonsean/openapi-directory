/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSessionEmbedUrlResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSessionEmbedUrlResponse::OAIGetSessionEmbedUrlResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSessionEmbedUrlResponse::OAIGetSessionEmbedUrlResponse() {
    this->initializeModel();
}

OAIGetSessionEmbedUrlResponse::~OAIGetSessionEmbedUrlResponse() {}

void OAIGetSessionEmbedUrlResponse::initializeModel() {

    m_embed_url_isSet = false;
    m_embed_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIGetSessionEmbedUrlResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSessionEmbedUrlResponse::fromJsonObject(QJsonObject json) {

    m_embed_url_isValid = ::OpenAPI::fromJsonValue(m_embed_url, json[QString("EmbedUrl")]);
    m_embed_url_isSet = !json[QString("EmbedUrl")].isNull() && m_embed_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIGetSessionEmbedUrlResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSessionEmbedUrlResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_embed_url_isSet) {
        obj.insert(QString("EmbedUrl"), ::OpenAPI::toJsonValue(m_embed_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIGetSessionEmbedUrlResponse::getEmbedUrl() const {
    return m_embed_url;
}
void OAIGetSessionEmbedUrlResponse::setEmbedUrl(const QString &embed_url) {
    m_embed_url = embed_url;
    m_embed_url_isSet = true;
}

bool OAIGetSessionEmbedUrlResponse::is_embed_url_Set() const{
    return m_embed_url_isSet;
}

bool OAIGetSessionEmbedUrlResponse::is_embed_url_Valid() const{
    return m_embed_url_isValid;
}

qint32 OAIGetSessionEmbedUrlResponse::getStatus() const {
    return m_status;
}
void OAIGetSessionEmbedUrlResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetSessionEmbedUrlResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetSessionEmbedUrlResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetSessionEmbedUrlResponse::getRequestId() const {
    return m_request_id;
}
void OAIGetSessionEmbedUrlResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGetSessionEmbedUrlResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGetSessionEmbedUrlResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIGetSessionEmbedUrlResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embed_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSessionEmbedUrlResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
