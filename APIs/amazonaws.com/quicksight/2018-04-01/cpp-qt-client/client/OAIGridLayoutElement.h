/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGridLayoutElement.h
 *
 * An element within a grid layout.
 */

#ifndef OAIGridLayoutElement_H
#define OAIGridLayoutElement_H

#include <QJsonObject>

#include "OAILayoutElementType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGridLayoutElement : public OAIObject {
public:
    OAIGridLayoutElement();
    OAIGridLayoutElement(QString json);
    ~OAIGridLayoutElement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getElementId() const;
    void setElementId(const QString &element_id);
    bool is_element_id_Set() const;
    bool is_element_id_Valid() const;

    OAILayoutElementType getElementType() const;
    void setElementType(const OAILayoutElementType &element_type);
    bool is_element_type_Set() const;
    bool is_element_type_Valid() const;

    qint32 getColumnIndex() const;
    void setColumnIndex(const qint32 &column_index);
    bool is_column_index_Set() const;
    bool is_column_index_Valid() const;

    qint32 getColumnSpan() const;
    void setColumnSpan(const qint32 &column_span);
    bool is_column_span_Set() const;
    bool is_column_span_Valid() const;

    qint32 getRowIndex() const;
    void setRowIndex(const qint32 &row_index);
    bool is_row_index_Set() const;
    bool is_row_index_Valid() const;

    qint32 getRowSpan() const;
    void setRowSpan(const qint32 &row_span);
    bool is_row_span_Set() const;
    bool is_row_span_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_element_id;
    bool m_element_id_isSet;
    bool m_element_id_isValid;

    OAILayoutElementType m_element_type;
    bool m_element_type_isSet;
    bool m_element_type_isValid;

    qint32 m_column_index;
    bool m_column_index_isSet;
    bool m_column_index_isValid;

    qint32 m_column_span;
    bool m_column_span_isSet;
    bool m_column_span_isValid;

    qint32 m_row_index;
    bool m_row_index_isSet;
    bool m_row_index_isValid;

    qint32 m_row_span;
    bool m_row_span_isSet;
    bool m_row_span_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGridLayoutElement)

#endif // OAIGridLayoutElement_H
