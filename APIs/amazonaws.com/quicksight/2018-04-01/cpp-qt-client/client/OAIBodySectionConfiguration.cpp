/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBodySectionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBodySectionConfiguration::OAIBodySectionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBodySectionConfiguration::OAIBodySectionConfiguration() {
    this->initializeModel();
}

OAIBodySectionConfiguration::~OAIBodySectionConfiguration() {}

void OAIBodySectionConfiguration::initializeModel() {

    m_section_id_isSet = false;
    m_section_id_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_page_break_configuration_isSet = false;
    m_page_break_configuration_isValid = false;
}

void OAIBodySectionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBodySectionConfiguration::fromJsonObject(QJsonObject json) {

    m_section_id_isValid = ::OpenAPI::fromJsonValue(m_section_id, json[QString("SectionId")]);
    m_section_id_isSet = !json[QString("SectionId")].isNull() && m_section_id_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("Style")]);
    m_style_isSet = !json[QString("Style")].isNull() && m_style_isValid;

    m_page_break_configuration_isValid = ::OpenAPI::fromJsonValue(m_page_break_configuration, json[QString("PageBreakConfiguration")]);
    m_page_break_configuration_isSet = !json[QString("PageBreakConfiguration")].isNull() && m_page_break_configuration_isValid;
}

QString OAIBodySectionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBodySectionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_section_id_isSet) {
        obj.insert(QString("SectionId"), ::OpenAPI::toJsonValue(m_section_id));
    }
    if (m_content.isSet()) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_style.isSet()) {
        obj.insert(QString("Style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_page_break_configuration.isSet()) {
        obj.insert(QString("PageBreakConfiguration"), ::OpenAPI::toJsonValue(m_page_break_configuration));
    }
    return obj;
}

QString OAIBodySectionConfiguration::getSectionId() const {
    return m_section_id;
}
void OAIBodySectionConfiguration::setSectionId(const QString &section_id) {
    m_section_id = section_id;
    m_section_id_isSet = true;
}

bool OAIBodySectionConfiguration::is_section_id_Set() const{
    return m_section_id_isSet;
}

bool OAIBodySectionConfiguration::is_section_id_Valid() const{
    return m_section_id_isValid;
}

OAIBodySectionConfiguration_Content OAIBodySectionConfiguration::getContent() const {
    return m_content;
}
void OAIBodySectionConfiguration::setContent(const OAIBodySectionConfiguration_Content &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIBodySectionConfiguration::is_content_Set() const{
    return m_content_isSet;
}

bool OAIBodySectionConfiguration::is_content_Valid() const{
    return m_content_isValid;
}

OAIBodySectionConfiguration_Style OAIBodySectionConfiguration::getStyle() const {
    return m_style;
}
void OAIBodySectionConfiguration::setStyle(const OAIBodySectionConfiguration_Style &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIBodySectionConfiguration::is_style_Set() const{
    return m_style_isSet;
}

bool OAIBodySectionConfiguration::is_style_Valid() const{
    return m_style_isValid;
}

OAIBodySectionConfiguration_PageBreakConfiguration OAIBodySectionConfiguration::getPageBreakConfiguration() const {
    return m_page_break_configuration;
}
void OAIBodySectionConfiguration::setPageBreakConfiguration(const OAIBodySectionConfiguration_PageBreakConfiguration &page_break_configuration) {
    m_page_break_configuration = page_break_configuration;
    m_page_break_configuration_isSet = true;
}

bool OAIBodySectionConfiguration::is_page_break_configuration_Set() const{
    return m_page_break_configuration_isSet;
}

bool OAIBodySectionConfiguration::is_page_break_configuration_Valid() const{
    return m_page_break_configuration_isValid;
}

bool OAIBodySectionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_section_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_break_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBodySectionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_section_id_isValid && m_content_isValid && true;
}

} // namespace OpenAPI
