/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTemplate_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTemplate_request::OAICreateTemplate_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTemplate_request::OAICreateTemplate_request() {
    this->initializeModel();
}

OAICreateTemplate_request::~OAICreateTemplate_request() {}

void OAICreateTemplate_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_source_entity_isSet = false;
    m_source_entity_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_description_isSet = false;
    m_version_description_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;
}

void OAICreateTemplate_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTemplate_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_source_entity_isValid = ::OpenAPI::fromJsonValue(m_source_entity, json[QString("SourceEntity")]);
    m_source_entity_isSet = !json[QString("SourceEntity")].isNull() && m_source_entity_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_version_description_isValid = ::OpenAPI::fromJsonValue(m_version_description, json[QString("VersionDescription")]);
    m_version_description_isSet = !json[QString("VersionDescription")].isNull() && m_version_description_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;
}

QString OAICreateTemplate_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTemplate_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_source_entity.isSet()) {
        obj.insert(QString("SourceEntity"), ::OpenAPI::toJsonValue(m_source_entity));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_description_isSet) {
        obj.insert(QString("VersionDescription"), ::OpenAPI::toJsonValue(m_version_description));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    return obj;
}

QString OAICreateTemplate_request::getName() const {
    return m_name;
}
void OAICreateTemplate_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateTemplate_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateTemplate_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIResourcePermission> OAICreateTemplate_request::getPermissions() const {
    return m_permissions;
}
void OAICreateTemplate_request::setPermissions(const QList<OAIResourcePermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateTemplate_request::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateTemplate_request::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAIUpdateTemplate_request_SourceEntity OAICreateTemplate_request::getSourceEntity() const {
    return m_source_entity;
}
void OAICreateTemplate_request::setSourceEntity(const OAIUpdateTemplate_request_SourceEntity &source_entity) {
    m_source_entity = source_entity;
    m_source_entity_isSet = true;
}

bool OAICreateTemplate_request::is_source_entity_Set() const{
    return m_source_entity_isSet;
}

bool OAICreateTemplate_request::is_source_entity_Valid() const{
    return m_source_entity_isValid;
}

QList<OAITag> OAICreateTemplate_request::getTags() const {
    return m_tags;
}
void OAICreateTemplate_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTemplate_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTemplate_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateTemplate_request::getVersionDescription() const {
    return m_version_description;
}
void OAICreateTemplate_request::setVersionDescription(const QString &version_description) {
    m_version_description = version_description;
    m_version_description_isSet = true;
}

bool OAICreateTemplate_request::is_version_description_Set() const{
    return m_version_description_isSet;
}

bool OAICreateTemplate_request::is_version_description_Valid() const{
    return m_version_description_isValid;
}

OAIUpdateTemplate_request_Definition OAICreateTemplate_request::getDefinition() const {
    return m_definition;
}
void OAICreateTemplate_request::setDefinition(const OAIUpdateTemplate_request_Definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAICreateTemplate_request::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAICreateTemplate_request::is_definition_Valid() const{
    return m_definition_isValid;
}

bool OAICreateTemplate_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTemplate_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
