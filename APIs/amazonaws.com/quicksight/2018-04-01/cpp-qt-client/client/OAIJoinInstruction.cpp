/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJoinInstruction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJoinInstruction::OAIJoinInstruction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJoinInstruction::OAIJoinInstruction() {
    this->initializeModel();
}

OAIJoinInstruction::~OAIJoinInstruction() {}

void OAIJoinInstruction::initializeModel() {

    m_left_operand_isSet = false;
    m_left_operand_isValid = false;

    m_right_operand_isSet = false;
    m_right_operand_isValid = false;

    m_left_join_key_properties_isSet = false;
    m_left_join_key_properties_isValid = false;

    m_right_join_key_properties_isSet = false;
    m_right_join_key_properties_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_on_clause_isSet = false;
    m_on_clause_isValid = false;
}

void OAIJoinInstruction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJoinInstruction::fromJsonObject(QJsonObject json) {

    m_left_operand_isValid = ::OpenAPI::fromJsonValue(m_left_operand, json[QString("LeftOperand")]);
    m_left_operand_isSet = !json[QString("LeftOperand")].isNull() && m_left_operand_isValid;

    m_right_operand_isValid = ::OpenAPI::fromJsonValue(m_right_operand, json[QString("RightOperand")]);
    m_right_operand_isSet = !json[QString("RightOperand")].isNull() && m_right_operand_isValid;

    m_left_join_key_properties_isValid = ::OpenAPI::fromJsonValue(m_left_join_key_properties, json[QString("LeftJoinKeyProperties")]);
    m_left_join_key_properties_isSet = !json[QString("LeftJoinKeyProperties")].isNull() && m_left_join_key_properties_isValid;

    m_right_join_key_properties_isValid = ::OpenAPI::fromJsonValue(m_right_join_key_properties, json[QString("RightJoinKeyProperties")]);
    m_right_join_key_properties_isSet = !json[QString("RightJoinKeyProperties")].isNull() && m_right_join_key_properties_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_on_clause_isValid = ::OpenAPI::fromJsonValue(m_on_clause, json[QString("OnClause")]);
    m_on_clause_isSet = !json[QString("OnClause")].isNull() && m_on_clause_isValid;
}

QString OAIJoinInstruction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJoinInstruction::asJsonObject() const {
    QJsonObject obj;
    if (m_left_operand_isSet) {
        obj.insert(QString("LeftOperand"), ::OpenAPI::toJsonValue(m_left_operand));
    }
    if (m_right_operand_isSet) {
        obj.insert(QString("RightOperand"), ::OpenAPI::toJsonValue(m_right_operand));
    }
    if (m_left_join_key_properties.isSet()) {
        obj.insert(QString("LeftJoinKeyProperties"), ::OpenAPI::toJsonValue(m_left_join_key_properties));
    }
    if (m_right_join_key_properties.isSet()) {
        obj.insert(QString("RightJoinKeyProperties"), ::OpenAPI::toJsonValue(m_right_join_key_properties));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_on_clause_isSet) {
        obj.insert(QString("OnClause"), ::OpenAPI::toJsonValue(m_on_clause));
    }
    return obj;
}

QString OAIJoinInstruction::getLeftOperand() const {
    return m_left_operand;
}
void OAIJoinInstruction::setLeftOperand(const QString &left_operand) {
    m_left_operand = left_operand;
    m_left_operand_isSet = true;
}

bool OAIJoinInstruction::is_left_operand_Set() const{
    return m_left_operand_isSet;
}

bool OAIJoinInstruction::is_left_operand_Valid() const{
    return m_left_operand_isValid;
}

QString OAIJoinInstruction::getRightOperand() const {
    return m_right_operand;
}
void OAIJoinInstruction::setRightOperand(const QString &right_operand) {
    m_right_operand = right_operand;
    m_right_operand_isSet = true;
}

bool OAIJoinInstruction::is_right_operand_Set() const{
    return m_right_operand_isSet;
}

bool OAIJoinInstruction::is_right_operand_Valid() const{
    return m_right_operand_isValid;
}

OAIJoinInstruction_LeftJoinKeyProperties OAIJoinInstruction::getLeftJoinKeyProperties() const {
    return m_left_join_key_properties;
}
void OAIJoinInstruction::setLeftJoinKeyProperties(const OAIJoinInstruction_LeftJoinKeyProperties &left_join_key_properties) {
    m_left_join_key_properties = left_join_key_properties;
    m_left_join_key_properties_isSet = true;
}

bool OAIJoinInstruction::is_left_join_key_properties_Set() const{
    return m_left_join_key_properties_isSet;
}

bool OAIJoinInstruction::is_left_join_key_properties_Valid() const{
    return m_left_join_key_properties_isValid;
}

OAIJoinInstruction_RightJoinKeyProperties OAIJoinInstruction::getRightJoinKeyProperties() const {
    return m_right_join_key_properties;
}
void OAIJoinInstruction::setRightJoinKeyProperties(const OAIJoinInstruction_RightJoinKeyProperties &right_join_key_properties) {
    m_right_join_key_properties = right_join_key_properties;
    m_right_join_key_properties_isSet = true;
}

bool OAIJoinInstruction::is_right_join_key_properties_Set() const{
    return m_right_join_key_properties_isSet;
}

bool OAIJoinInstruction::is_right_join_key_properties_Valid() const{
    return m_right_join_key_properties_isValid;
}

OAIJoinType OAIJoinInstruction::getType() const {
    return m_type;
}
void OAIJoinInstruction::setType(const OAIJoinType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJoinInstruction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJoinInstruction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIJoinInstruction::getOnClause() const {
    return m_on_clause;
}
void OAIJoinInstruction::setOnClause(const QString &on_clause) {
    m_on_clause = on_clause;
    m_on_clause_isSet = true;
}

bool OAIJoinInstruction::is_on_clause_Set() const{
    return m_on_clause_isSet;
}

bool OAIJoinInstruction::is_on_clause_Valid() const{
    return m_on_clause_isValid;
}

bool OAIJoinInstruction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_left_operand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_operand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_join_key_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_join_key_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_clause_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJoinInstruction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_left_operand_isValid && m_right_operand_isValid && m_type_isValid && m_on_clause_isValid && true;
}

} // namespace OpenAPI
