/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFilterGroup.h
 *
 * &lt;p&gt;A grouping of individual filters. Filter groups are applied to the same group of visuals.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/quicksight/latest/user/add-a-compound-filter.html\&quot;&gt;Adding filter conditions (group filters) with AND and OR operators&lt;/a&gt; in the &lt;i&gt;Amazon QuickSight User Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIFilterGroup_H
#define OAIFilterGroup_H

#include <QJsonObject>

#include "OAICrossDatasetTypes.h"
#include "OAIFilterGroup_ScopeConfiguration.h"
#include "OAIWidgetStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFilterGroup_ScopeConfiguration;

class OAIFilterGroup : public OAIObject {
public:
    OAIFilterGroup();
    OAIFilterGroup(QString json);
    ~OAIFilterGroup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFilterGroupId() const;
    void setFilterGroupId(const QString &filter_group_id);
    bool is_filter_group_id_Set() const;
    bool is_filter_group_id_Valid() const;

    QList getFilters() const;
    void setFilters(const QList &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    OAIFilterGroup_ScopeConfiguration getScopeConfiguration() const;
    void setScopeConfiguration(const OAIFilterGroup_ScopeConfiguration &scope_configuration);
    bool is_scope_configuration_Set() const;
    bool is_scope_configuration_Valid() const;

    OAIWidgetStatus getStatus() const;
    void setStatus(const OAIWidgetStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAICrossDatasetTypes getCrossDataset() const;
    void setCrossDataset(const OAICrossDatasetTypes &cross_dataset);
    bool is_cross_dataset_Set() const;
    bool is_cross_dataset_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_filter_group_id;
    bool m_filter_group_id_isSet;
    bool m_filter_group_id_isValid;

    QList m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    OAIFilterGroup_ScopeConfiguration m_scope_configuration;
    bool m_scope_configuration_isSet;
    bool m_scope_configuration_isValid;

    OAIWidgetStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAICrossDatasetTypes m_cross_dataset;
    bool m_cross_dataset_isSet;
    bool m_cross_dataset_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFilterGroup)

#endif // OAIFilterGroup_H
