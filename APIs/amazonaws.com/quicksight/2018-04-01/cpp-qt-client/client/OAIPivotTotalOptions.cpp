/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTotalOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTotalOptions::OAIPivotTotalOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTotalOptions::OAIPivotTotalOptions() {
    this->initializeModel();
}

OAIPivotTotalOptions::~OAIPivotTotalOptions() {}

void OAIPivotTotalOptions::initializeModel() {

    m_totals_visibility_isSet = false;
    m_totals_visibility_isValid = false;

    m_placement_isSet = false;
    m_placement_isValid = false;

    m_scroll_status_isSet = false;
    m_scroll_status_isValid = false;

    m_custom_label_isSet = false;
    m_custom_label_isValid = false;

    m_total_cell_style_isSet = false;
    m_total_cell_style_isValid = false;

    m_value_cell_style_isSet = false;
    m_value_cell_style_isValid = false;

    m_metric_header_cell_style_isSet = false;
    m_metric_header_cell_style_isValid = false;
}

void OAIPivotTotalOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTotalOptions::fromJsonObject(QJsonObject json) {

    m_totals_visibility_isValid = ::OpenAPI::fromJsonValue(m_totals_visibility, json[QString("TotalsVisibility")]);
    m_totals_visibility_isSet = !json[QString("TotalsVisibility")].isNull() && m_totals_visibility_isValid;

    m_placement_isValid = ::OpenAPI::fromJsonValue(m_placement, json[QString("Placement")]);
    m_placement_isSet = !json[QString("Placement")].isNull() && m_placement_isValid;

    m_scroll_status_isValid = ::OpenAPI::fromJsonValue(m_scroll_status, json[QString("ScrollStatus")]);
    m_scroll_status_isSet = !json[QString("ScrollStatus")].isNull() && m_scroll_status_isValid;

    m_custom_label_isValid = ::OpenAPI::fromJsonValue(m_custom_label, json[QString("CustomLabel")]);
    m_custom_label_isSet = !json[QString("CustomLabel")].isNull() && m_custom_label_isValid;

    m_total_cell_style_isValid = ::OpenAPI::fromJsonValue(m_total_cell_style, json[QString("TotalCellStyle")]);
    m_total_cell_style_isSet = !json[QString("TotalCellStyle")].isNull() && m_total_cell_style_isValid;

    m_value_cell_style_isValid = ::OpenAPI::fromJsonValue(m_value_cell_style, json[QString("ValueCellStyle")]);
    m_value_cell_style_isSet = !json[QString("ValueCellStyle")].isNull() && m_value_cell_style_isValid;

    m_metric_header_cell_style_isValid = ::OpenAPI::fromJsonValue(m_metric_header_cell_style, json[QString("MetricHeaderCellStyle")]);
    m_metric_header_cell_style_isSet = !json[QString("MetricHeaderCellStyle")].isNull() && m_metric_header_cell_style_isValid;
}

QString OAIPivotTotalOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTotalOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_totals_visibility.isSet()) {
        obj.insert(QString("TotalsVisibility"), ::OpenAPI::toJsonValue(m_totals_visibility));
    }
    if (m_placement.isSet()) {
        obj.insert(QString("Placement"), ::OpenAPI::toJsonValue(m_placement));
    }
    if (m_scroll_status.isSet()) {
        obj.insert(QString("ScrollStatus"), ::OpenAPI::toJsonValue(m_scroll_status));
    }
    if (m_custom_label_isSet) {
        obj.insert(QString("CustomLabel"), ::OpenAPI::toJsonValue(m_custom_label));
    }
    if (m_total_cell_style.isSet()) {
        obj.insert(QString("TotalCellStyle"), ::OpenAPI::toJsonValue(m_total_cell_style));
    }
    if (m_value_cell_style.isSet()) {
        obj.insert(QString("ValueCellStyle"), ::OpenAPI::toJsonValue(m_value_cell_style));
    }
    if (m_metric_header_cell_style.isSet()) {
        obj.insert(QString("MetricHeaderCellStyle"), ::OpenAPI::toJsonValue(m_metric_header_cell_style));
    }
    return obj;
}

OAIVisibility OAIPivotTotalOptions::getTotalsVisibility() const {
    return m_totals_visibility;
}
void OAIPivotTotalOptions::setTotalsVisibility(const OAIVisibility &totals_visibility) {
    m_totals_visibility = totals_visibility;
    m_totals_visibility_isSet = true;
}

bool OAIPivotTotalOptions::is_totals_visibility_Set() const{
    return m_totals_visibility_isSet;
}

bool OAIPivotTotalOptions::is_totals_visibility_Valid() const{
    return m_totals_visibility_isValid;
}

OAITableTotalsPlacement OAIPivotTotalOptions::getPlacement() const {
    return m_placement;
}
void OAIPivotTotalOptions::setPlacement(const OAITableTotalsPlacement &placement) {
    m_placement = placement;
    m_placement_isSet = true;
}

bool OAIPivotTotalOptions::is_placement_Set() const{
    return m_placement_isSet;
}

bool OAIPivotTotalOptions::is_placement_Valid() const{
    return m_placement_isValid;
}

OAITableTotalsScrollStatus OAIPivotTotalOptions::getScrollStatus() const {
    return m_scroll_status;
}
void OAIPivotTotalOptions::setScrollStatus(const OAITableTotalsScrollStatus &scroll_status) {
    m_scroll_status = scroll_status;
    m_scroll_status_isSet = true;
}

bool OAIPivotTotalOptions::is_scroll_status_Set() const{
    return m_scroll_status_isSet;
}

bool OAIPivotTotalOptions::is_scroll_status_Valid() const{
    return m_scroll_status_isValid;
}

QString OAIPivotTotalOptions::getCustomLabel() const {
    return m_custom_label;
}
void OAIPivotTotalOptions::setCustomLabel(const QString &custom_label) {
    m_custom_label = custom_label;
    m_custom_label_isSet = true;
}

bool OAIPivotTotalOptions::is_custom_label_Set() const{
    return m_custom_label_isSet;
}

bool OAIPivotTotalOptions::is_custom_label_Valid() const{
    return m_custom_label_isValid;
}

OAIPivotTotalOptions_TotalCellStyle OAIPivotTotalOptions::getTotalCellStyle() const {
    return m_total_cell_style;
}
void OAIPivotTotalOptions::setTotalCellStyle(const OAIPivotTotalOptions_TotalCellStyle &total_cell_style) {
    m_total_cell_style = total_cell_style;
    m_total_cell_style_isSet = true;
}

bool OAIPivotTotalOptions::is_total_cell_style_Set() const{
    return m_total_cell_style_isSet;
}

bool OAIPivotTotalOptions::is_total_cell_style_Valid() const{
    return m_total_cell_style_isValid;
}

OAIPivotTotalOptions_ValueCellStyle OAIPivotTotalOptions::getValueCellStyle() const {
    return m_value_cell_style;
}
void OAIPivotTotalOptions::setValueCellStyle(const OAIPivotTotalOptions_ValueCellStyle &value_cell_style) {
    m_value_cell_style = value_cell_style;
    m_value_cell_style_isSet = true;
}

bool OAIPivotTotalOptions::is_value_cell_style_Set() const{
    return m_value_cell_style_isSet;
}

bool OAIPivotTotalOptions::is_value_cell_style_Valid() const{
    return m_value_cell_style_isValid;
}

OAIPivotTotalOptions_MetricHeaderCellStyle OAIPivotTotalOptions::getMetricHeaderCellStyle() const {
    return m_metric_header_cell_style;
}
void OAIPivotTotalOptions::setMetricHeaderCellStyle(const OAIPivotTotalOptions_MetricHeaderCellStyle &metric_header_cell_style) {
    m_metric_header_cell_style = metric_header_cell_style;
    m_metric_header_cell_style_isSet = true;
}

bool OAIPivotTotalOptions::is_metric_header_cell_style_Set() const{
    return m_metric_header_cell_style_isSet;
}

bool OAIPivotTotalOptions::is_metric_header_cell_style_Valid() const{
    return m_metric_header_cell_style_isValid;
}

bool OAIPivotTotalOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_totals_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scroll_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_header_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTotalOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
