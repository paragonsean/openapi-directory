/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputColumn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputColumn::OAIOutputColumn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputColumn::OAIOutputColumn() {
    this->initializeModel();
}

OAIOutputColumn::~OAIOutputColumn() {}

void OAIOutputColumn::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOutputColumn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputColumn::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIOutputColumn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputColumn::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIOutputColumn::getName() const {
    return m_name;
}
void OAIOutputColumn::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOutputColumn::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOutputColumn::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOutputColumn::getDescription() const {
    return m_description;
}
void OAIOutputColumn::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOutputColumn::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOutputColumn::is_description_Valid() const{
    return m_description_isValid;
}

OAIColumnDataType OAIOutputColumn::getType() const {
    return m_type;
}
void OAIOutputColumn::setType(const OAIColumnDataType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOutputColumn::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOutputColumn::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOutputColumn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputColumn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
