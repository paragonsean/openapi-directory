/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionField_NumericalDimensionField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionField_NumericalDimensionField::OAIDimensionField_NumericalDimensionField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionField_NumericalDimensionField::OAIDimensionField_NumericalDimensionField() {
    this->initializeModel();
}

OAIDimensionField_NumericalDimensionField::~OAIDimensionField_NumericalDimensionField() {}

void OAIDimensionField_NumericalDimensionField::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_hierarchy_id_isSet = false;
    m_hierarchy_id_isValid = false;

    m_format_configuration_isSet = false;
    m_format_configuration_isValid = false;
}

void OAIDimensionField_NumericalDimensionField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionField_NumericalDimensionField::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_hierarchy_id_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_id, json[QString("HierarchyId")]);
    m_hierarchy_id_isSet = !json[QString("HierarchyId")].isNull() && m_hierarchy_id_isValid;

    m_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_format_configuration, json[QString("FormatConfiguration")]);
    m_format_configuration_isSet = !json[QString("FormatConfiguration")].isNull() && m_format_configuration_isValid;
}

QString OAIDimensionField_NumericalDimensionField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionField_NumericalDimensionField::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_hierarchy_id_isSet) {
        obj.insert(QString("HierarchyId"), ::OpenAPI::toJsonValue(m_hierarchy_id));
    }
    if (m_format_configuration.isSet()) {
        obj.insert(QString("FormatConfiguration"), ::OpenAPI::toJsonValue(m_format_configuration));
    }
    return obj;
}

QString OAIDimensionField_NumericalDimensionField::getFieldId() const {
    return m_field_id;
}
void OAIDimensionField_NumericalDimensionField::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIDimensionField_NumericalDimensionField::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIDimensionField_NumericalDimensionField::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAINumericalDimensionField_Column OAIDimensionField_NumericalDimensionField::getColumn() const {
    return m_column;
}
void OAIDimensionField_NumericalDimensionField::setColumn(const OAINumericalDimensionField_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIDimensionField_NumericalDimensionField::is_column_Set() const{
    return m_column_isSet;
}

bool OAIDimensionField_NumericalDimensionField::is_column_Valid() const{
    return m_column_isValid;
}

QString OAIDimensionField_NumericalDimensionField::getHierarchyId() const {
    return m_hierarchy_id;
}
void OAIDimensionField_NumericalDimensionField::setHierarchyId(const QString &hierarchy_id) {
    m_hierarchy_id = hierarchy_id;
    m_hierarchy_id_isSet = true;
}

bool OAIDimensionField_NumericalDimensionField::is_hierarchy_id_Set() const{
    return m_hierarchy_id_isSet;
}

bool OAIDimensionField_NumericalDimensionField::is_hierarchy_id_Valid() const{
    return m_hierarchy_id_isValid;
}

OAINumericalDimensionField_FormatConfiguration OAIDimensionField_NumericalDimensionField::getFormatConfiguration() const {
    return m_format_configuration;
}
void OAIDimensionField_NumericalDimensionField::setFormatConfiguration(const OAINumericalDimensionField_FormatConfiguration &format_configuration) {
    m_format_configuration = format_configuration;
    m_format_configuration_isSet = true;
}

bool OAIDimensionField_NumericalDimensionField::is_format_configuration_Set() const{
    return m_format_configuration_isSet;
}

bool OAIDimensionField_NumericalDimensionField::is_format_configuration_Valid() const{
    return m_format_configuration_isValid;
}

bool OAIDimensionField_NumericalDimensionField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionField_NumericalDimensionField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_column_isValid && true;
}

} // namespace OpenAPI
