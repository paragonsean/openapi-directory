/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration() {
    this->initializeModel();
}

OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::~OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration() {}

void OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::initializeModel() {

    m_dashboard_isSet = false;
    m_dashboard_isValid = false;

    m_dashboard_visual_isSet = false;
    m_dashboard_visual_isValid = false;

    m_q_search_bar_isSet = false;
    m_q_search_bar_isValid = false;
}

void OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::fromJsonObject(QJsonObject json) {

    m_dashboard_isValid = ::OpenAPI::fromJsonValue(m_dashboard, json[QString("Dashboard")]);
    m_dashboard_isSet = !json[QString("Dashboard")].isNull() && m_dashboard_isValid;

    m_dashboard_visual_isValid = ::OpenAPI::fromJsonValue(m_dashboard_visual, json[QString("DashboardVisual")]);
    m_dashboard_visual_isSet = !json[QString("DashboardVisual")].isNull() && m_dashboard_visual_isValid;

    m_q_search_bar_isValid = ::OpenAPI::fromJsonValue(m_q_search_bar, json[QString("QSearchBar")]);
    m_q_search_bar_isSet = !json[QString("QSearchBar")].isNull() && m_q_search_bar_isValid;
}

QString OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard.isSet()) {
        obj.insert(QString("Dashboard"), ::OpenAPI::toJsonValue(m_dashboard));
    }
    if (m_dashboard_visual.isSet()) {
        obj.insert(QString("DashboardVisual"), ::OpenAPI::toJsonValue(m_dashboard_visual));
    }
    if (m_q_search_bar.isSet()) {
        obj.insert(QString("QSearchBar"), ::OpenAPI::toJsonValue(m_q_search_bar));
    }
    return obj;
}

OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_Dashboard OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::getDashboard() const {
    return m_dashboard;
}
void OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::setDashboard(const OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_Dashboard &dashboard) {
    m_dashboard = dashboard;
    m_dashboard_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::is_dashboard_Set() const{
    return m_dashboard_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::is_dashboard_Valid() const{
    return m_dashboard_isValid;
}

OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_DashboardVisual OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::getDashboardVisual() const {
    return m_dashboard_visual;
}
void OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::setDashboardVisual(const OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_DashboardVisual &dashboard_visual) {
    m_dashboard_visual = dashboard_visual;
    m_dashboard_visual_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::is_dashboard_visual_Set() const{
    return m_dashboard_visual_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::is_dashboard_visual_Valid() const{
    return m_dashboard_visual_isValid;
}

OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_QSearchBar OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::getQSearchBar() const {
    return m_q_search_bar;
}
void OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::setQSearchBar(const OAIGenerateEmbedUrlForAnonymousUser_request_ExperienceConfiguration_QSearchBar &q_search_bar) {
    m_q_search_bar = q_search_bar;
    m_q_search_bar_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::is_q_search_bar_Set() const{
    return m_q_search_bar_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::is_q_search_bar_Valid() const{
    return m_q_search_bar_isValid;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_visual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_q_search_bar.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
