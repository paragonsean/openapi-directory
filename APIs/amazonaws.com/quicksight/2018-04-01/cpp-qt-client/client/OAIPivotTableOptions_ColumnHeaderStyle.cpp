/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableOptions_ColumnHeaderStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableOptions_ColumnHeaderStyle::OAIPivotTableOptions_ColumnHeaderStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableOptions_ColumnHeaderStyle::OAIPivotTableOptions_ColumnHeaderStyle() {
    this->initializeModel();
}

OAIPivotTableOptions_ColumnHeaderStyle::~OAIPivotTableOptions_ColumnHeaderStyle() {}

void OAIPivotTableOptions_ColumnHeaderStyle::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_font_configuration_isSet = false;
    m_font_configuration_isValid = false;

    m_text_wrap_isSet = false;
    m_text_wrap_isValid = false;

    m_horizontal_text_alignment_isSet = false;
    m_horizontal_text_alignment_isValid = false;

    m_vertical_text_alignment_isSet = false;
    m_vertical_text_alignment_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_border_isSet = false;
    m_border_isValid = false;
}

void OAIPivotTableOptions_ColumnHeaderStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableOptions_ColumnHeaderStyle::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_font_configuration, json[QString("FontConfiguration")]);
    m_font_configuration_isSet = !json[QString("FontConfiguration")].isNull() && m_font_configuration_isValid;

    m_text_wrap_isValid = ::OpenAPI::fromJsonValue(m_text_wrap, json[QString("TextWrap")]);
    m_text_wrap_isSet = !json[QString("TextWrap")].isNull() && m_text_wrap_isValid;

    m_horizontal_text_alignment_isValid = ::OpenAPI::fromJsonValue(m_horizontal_text_alignment, json[QString("HorizontalTextAlignment")]);
    m_horizontal_text_alignment_isSet = !json[QString("HorizontalTextAlignment")].isNull() && m_horizontal_text_alignment_isValid;

    m_vertical_text_alignment_isValid = ::OpenAPI::fromJsonValue(m_vertical_text_alignment, json[QString("VerticalTextAlignment")]);
    m_vertical_text_alignment_isSet = !json[QString("VerticalTextAlignment")].isNull() && m_vertical_text_alignment_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_border_isValid = ::OpenAPI::fromJsonValue(m_border, json[QString("Border")]);
    m_border_isSet = !json[QString("Border")].isNull() && m_border_isValid;
}

QString OAIPivotTableOptions_ColumnHeaderStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableOptions_ColumnHeaderStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_font_configuration.isSet()) {
        obj.insert(QString("FontConfiguration"), ::OpenAPI::toJsonValue(m_font_configuration));
    }
    if (m_text_wrap.isSet()) {
        obj.insert(QString("TextWrap"), ::OpenAPI::toJsonValue(m_text_wrap));
    }
    if (m_horizontal_text_alignment.isSet()) {
        obj.insert(QString("HorizontalTextAlignment"), ::OpenAPI::toJsonValue(m_horizontal_text_alignment));
    }
    if (m_vertical_text_alignment.isSet()) {
        obj.insert(QString("VerticalTextAlignment"), ::OpenAPI::toJsonValue(m_vertical_text_alignment));
    }
    if (m_background_color_isSet) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_border.isSet()) {
        obj.insert(QString("Border"), ::OpenAPI::toJsonValue(m_border));
    }
    return obj;
}

OAIVisibility OAIPivotTableOptions_ColumnHeaderStyle::getVisibility() const {
    return m_visibility;
}
void OAIPivotTableOptions_ColumnHeaderStyle::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAITableCellStyle_FontConfiguration OAIPivotTableOptions_ColumnHeaderStyle::getFontConfiguration() const {
    return m_font_configuration;
}
void OAIPivotTableOptions_ColumnHeaderStyle::setFontConfiguration(const OAITableCellStyle_FontConfiguration &font_configuration) {
    m_font_configuration = font_configuration;
    m_font_configuration_isSet = true;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_font_configuration_Set() const{
    return m_font_configuration_isSet;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_font_configuration_Valid() const{
    return m_font_configuration_isValid;
}

OAITextWrap OAIPivotTableOptions_ColumnHeaderStyle::getTextWrap() const {
    return m_text_wrap;
}
void OAIPivotTableOptions_ColumnHeaderStyle::setTextWrap(const OAITextWrap &text_wrap) {
    m_text_wrap = text_wrap;
    m_text_wrap_isSet = true;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_text_wrap_Set() const{
    return m_text_wrap_isSet;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_text_wrap_Valid() const{
    return m_text_wrap_isValid;
}

OAIHorizontalTextAlignment OAIPivotTableOptions_ColumnHeaderStyle::getHorizontalTextAlignment() const {
    return m_horizontal_text_alignment;
}
void OAIPivotTableOptions_ColumnHeaderStyle::setHorizontalTextAlignment(const OAIHorizontalTextAlignment &horizontal_text_alignment) {
    m_horizontal_text_alignment = horizontal_text_alignment;
    m_horizontal_text_alignment_isSet = true;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_horizontal_text_alignment_Set() const{
    return m_horizontal_text_alignment_isSet;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_horizontal_text_alignment_Valid() const{
    return m_horizontal_text_alignment_isValid;
}

OAIVerticalTextAlignment OAIPivotTableOptions_ColumnHeaderStyle::getVerticalTextAlignment() const {
    return m_vertical_text_alignment;
}
void OAIPivotTableOptions_ColumnHeaderStyle::setVerticalTextAlignment(const OAIVerticalTextAlignment &vertical_text_alignment) {
    m_vertical_text_alignment = vertical_text_alignment;
    m_vertical_text_alignment_isSet = true;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_vertical_text_alignment_Set() const{
    return m_vertical_text_alignment_isSet;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_vertical_text_alignment_Valid() const{
    return m_vertical_text_alignment_isValid;
}

QString OAIPivotTableOptions_ColumnHeaderStyle::getBackgroundColor() const {
    return m_background_color;
}
void OAIPivotTableOptions_ColumnHeaderStyle::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_background_color_Valid() const{
    return m_background_color_isValid;
}

qint32 OAIPivotTableOptions_ColumnHeaderStyle::getHeight() const {
    return m_height;
}
void OAIPivotTableOptions_ColumnHeaderStyle::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_height_Valid() const{
    return m_height_isValid;
}

OAITableCellStyle_Border OAIPivotTableOptions_ColumnHeaderStyle::getBorder() const {
    return m_border;
}
void OAIPivotTableOptions_ColumnHeaderStyle::setBorder(const OAITableCellStyle_Border &border) {
    m_border = border;
    m_border_isSet = true;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_border_Set() const{
    return m_border_isSet;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::is_border_Valid() const{
    return m_border_isValid;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_wrap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_text_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_text_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableOptions_ColumnHeaderStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
