/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIntegerParameterDeclaration.h
 *
 * A parameter declaration for the &lt;code&gt;Integer&lt;/code&gt; data type.
 */

#ifndef OAIIntegerParameterDeclaration_H
#define OAIIntegerParameterDeclaration_H

#include <QJsonObject>

#include "OAIIntegerParameterDeclaration_DefaultValues.h"
#include "OAIIntegerParameterDeclaration_ValueWhenUnset.h"
#include "OAIMappedDataSetParameter.h"
#include "OAIParameterValueType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIntegerParameterDeclaration_DefaultValues;
class OAIIntegerParameterDeclaration_ValueWhenUnset;
class OAIMappedDataSetParameter;

class OAIIntegerParameterDeclaration : public OAIObject {
public:
    OAIIntegerParameterDeclaration();
    OAIIntegerParameterDeclaration(QString json);
    ~OAIIntegerParameterDeclaration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIParameterValueType getParameterValueType() const;
    void setParameterValueType(const OAIParameterValueType &parameter_value_type);
    bool is_parameter_value_type_Set() const;
    bool is_parameter_value_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIIntegerParameterDeclaration_DefaultValues getDefaultValues() const;
    void setDefaultValues(const OAIIntegerParameterDeclaration_DefaultValues &default_values);
    bool is_default_values_Set() const;
    bool is_default_values_Valid() const;

    OAIIntegerParameterDeclaration_ValueWhenUnset getValueWhenUnset() const;
    void setValueWhenUnset(const OAIIntegerParameterDeclaration_ValueWhenUnset &value_when_unset);
    bool is_value_when_unset_Set() const;
    bool is_value_when_unset_Valid() const;

    QList<OAIMappedDataSetParameter> getMappedDataSetParameters() const;
    void setMappedDataSetParameters(const QList<OAIMappedDataSetParameter> &mapped_data_set_parameters);
    bool is_mapped_data_set_parameters_Set() const;
    bool is_mapped_data_set_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIParameterValueType m_parameter_value_type;
    bool m_parameter_value_type_isSet;
    bool m_parameter_value_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIIntegerParameterDeclaration_DefaultValues m_default_values;
    bool m_default_values_isSet;
    bool m_default_values_isValid;

    OAIIntegerParameterDeclaration_ValueWhenUnset m_value_when_unset;
    bool m_value_when_unset_isSet;
    bool m_value_when_unset_isValid;

    QList<OAIMappedDataSetParameter> m_mapped_data_set_parameters;
    bool m_mapped_data_set_parameters_isSet;
    bool m_mapped_data_set_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIntegerParameterDeclaration)

#endif // OAIIntegerParameterDeclaration_H
