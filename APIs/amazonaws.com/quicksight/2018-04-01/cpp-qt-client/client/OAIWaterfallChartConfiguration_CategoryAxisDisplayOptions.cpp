/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions() {
    this->initializeModel();
}

OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::~OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions() {}

void OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::initializeModel() {

    m_tick_label_options_isSet = false;
    m_tick_label_options_isValid = false;

    m_axis_line_visibility_isSet = false;
    m_axis_line_visibility_isValid = false;

    m_grid_line_visibility_isSet = false;
    m_grid_line_visibility_isValid = false;

    m_data_options_isSet = false;
    m_data_options_isValid = false;

    m_scrollbar_options_isSet = false;
    m_scrollbar_options_isValid = false;

    m_axis_offset_isSet = false;
    m_axis_offset_isValid = false;
}

void OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::fromJsonObject(QJsonObject json) {

    m_tick_label_options_isValid = ::OpenAPI::fromJsonValue(m_tick_label_options, json[QString("TickLabelOptions")]);
    m_tick_label_options_isSet = !json[QString("TickLabelOptions")].isNull() && m_tick_label_options_isValid;

    m_axis_line_visibility_isValid = ::OpenAPI::fromJsonValue(m_axis_line_visibility, json[QString("AxisLineVisibility")]);
    m_axis_line_visibility_isSet = !json[QString("AxisLineVisibility")].isNull() && m_axis_line_visibility_isValid;

    m_grid_line_visibility_isValid = ::OpenAPI::fromJsonValue(m_grid_line_visibility, json[QString("GridLineVisibility")]);
    m_grid_line_visibility_isSet = !json[QString("GridLineVisibility")].isNull() && m_grid_line_visibility_isValid;

    m_data_options_isValid = ::OpenAPI::fromJsonValue(m_data_options, json[QString("DataOptions")]);
    m_data_options_isSet = !json[QString("DataOptions")].isNull() && m_data_options_isValid;

    m_scrollbar_options_isValid = ::OpenAPI::fromJsonValue(m_scrollbar_options, json[QString("ScrollbarOptions")]);
    m_scrollbar_options_isSet = !json[QString("ScrollbarOptions")].isNull() && m_scrollbar_options_isValid;

    m_axis_offset_isValid = ::OpenAPI::fromJsonValue(m_axis_offset, json[QString("AxisOffset")]);
    m_axis_offset_isSet = !json[QString("AxisOffset")].isNull() && m_axis_offset_isValid;
}

QString OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_tick_label_options.isSet()) {
        obj.insert(QString("TickLabelOptions"), ::OpenAPI::toJsonValue(m_tick_label_options));
    }
    if (m_axis_line_visibility.isSet()) {
        obj.insert(QString("AxisLineVisibility"), ::OpenAPI::toJsonValue(m_axis_line_visibility));
    }
    if (m_grid_line_visibility.isSet()) {
        obj.insert(QString("GridLineVisibility"), ::OpenAPI::toJsonValue(m_grid_line_visibility));
    }
    if (m_data_options.isSet()) {
        obj.insert(QString("DataOptions"), ::OpenAPI::toJsonValue(m_data_options));
    }
    if (m_scrollbar_options.isSet()) {
        obj.insert(QString("ScrollbarOptions"), ::OpenAPI::toJsonValue(m_scrollbar_options));
    }
    if (m_axis_offset_isSet) {
        obj.insert(QString("AxisOffset"), ::OpenAPI::toJsonValue(m_axis_offset));
    }
    return obj;
}

OAIAxisDisplayOptions_TickLabelOptions OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::getTickLabelOptions() const {
    return m_tick_label_options;
}
void OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::setTickLabelOptions(const OAIAxisDisplayOptions_TickLabelOptions &tick_label_options) {
    m_tick_label_options = tick_label_options;
    m_tick_label_options_isSet = true;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_tick_label_options_Set() const{
    return m_tick_label_options_isSet;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_tick_label_options_Valid() const{
    return m_tick_label_options_isValid;
}

OAIVisibility OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::getAxisLineVisibility() const {
    return m_axis_line_visibility;
}
void OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::setAxisLineVisibility(const OAIVisibility &axis_line_visibility) {
    m_axis_line_visibility = axis_line_visibility;
    m_axis_line_visibility_isSet = true;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_axis_line_visibility_Set() const{
    return m_axis_line_visibility_isSet;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_axis_line_visibility_Valid() const{
    return m_axis_line_visibility_isValid;
}

OAIVisibility OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::getGridLineVisibility() const {
    return m_grid_line_visibility;
}
void OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::setGridLineVisibility(const OAIVisibility &grid_line_visibility) {
    m_grid_line_visibility = grid_line_visibility;
    m_grid_line_visibility_isSet = true;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_grid_line_visibility_Set() const{
    return m_grid_line_visibility_isSet;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_grid_line_visibility_Valid() const{
    return m_grid_line_visibility_isValid;
}

OAIAxisDisplayOptions_DataOptions OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::getDataOptions() const {
    return m_data_options;
}
void OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::setDataOptions(const OAIAxisDisplayOptions_DataOptions &data_options) {
    m_data_options = data_options;
    m_data_options_isSet = true;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_data_options_Set() const{
    return m_data_options_isSet;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_data_options_Valid() const{
    return m_data_options_isValid;
}

OAIAxisDisplayOptions_ScrollbarOptions OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::getScrollbarOptions() const {
    return m_scrollbar_options;
}
void OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::setScrollbarOptions(const OAIAxisDisplayOptions_ScrollbarOptions &scrollbar_options) {
    m_scrollbar_options = scrollbar_options;
    m_scrollbar_options_isSet = true;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_scrollbar_options_Set() const{
    return m_scrollbar_options_isSet;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_scrollbar_options_Valid() const{
    return m_scrollbar_options_isValid;
}

QString OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::getAxisOffset() const {
    return m_axis_offset;
}
void OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::setAxisOffset(const QString &axis_offset) {
    m_axis_offset = axis_offset;
    m_axis_offset_isSet = true;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_axis_offset_Set() const{
    return m_axis_offset_isSet;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::is_axis_offset_Valid() const{
    return m_axis_offset_isValid;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tick_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_line_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_line_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scrollbar_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
