/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericSeparatorConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericSeparatorConfiguration::OAINumericSeparatorConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericSeparatorConfiguration::OAINumericSeparatorConfiguration() {
    this->initializeModel();
}

OAINumericSeparatorConfiguration::~OAINumericSeparatorConfiguration() {}

void OAINumericSeparatorConfiguration::initializeModel() {

    m_decimal_separator_isSet = false;
    m_decimal_separator_isValid = false;

    m_thousands_separator_isSet = false;
    m_thousands_separator_isValid = false;
}

void OAINumericSeparatorConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericSeparatorConfiguration::fromJsonObject(QJsonObject json) {

    m_decimal_separator_isValid = ::OpenAPI::fromJsonValue(m_decimal_separator, json[QString("DecimalSeparator")]);
    m_decimal_separator_isSet = !json[QString("DecimalSeparator")].isNull() && m_decimal_separator_isValid;

    m_thousands_separator_isValid = ::OpenAPI::fromJsonValue(m_thousands_separator, json[QString("ThousandsSeparator")]);
    m_thousands_separator_isSet = !json[QString("ThousandsSeparator")].isNull() && m_thousands_separator_isValid;
}

QString OAINumericSeparatorConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericSeparatorConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_decimal_separator.isSet()) {
        obj.insert(QString("DecimalSeparator"), ::OpenAPI::toJsonValue(m_decimal_separator));
    }
    if (m_thousands_separator.isSet()) {
        obj.insert(QString("ThousandsSeparator"), ::OpenAPI::toJsonValue(m_thousands_separator));
    }
    return obj;
}

OAINumericSeparatorSymbol OAINumericSeparatorConfiguration::getDecimalSeparator() const {
    return m_decimal_separator;
}
void OAINumericSeparatorConfiguration::setDecimalSeparator(const OAINumericSeparatorSymbol &decimal_separator) {
    m_decimal_separator = decimal_separator;
    m_decimal_separator_isSet = true;
}

bool OAINumericSeparatorConfiguration::is_decimal_separator_Set() const{
    return m_decimal_separator_isSet;
}

bool OAINumericSeparatorConfiguration::is_decimal_separator_Valid() const{
    return m_decimal_separator_isValid;
}

OAINumericSeparatorConfiguration_ThousandsSeparator OAINumericSeparatorConfiguration::getThousandsSeparator() const {
    return m_thousands_separator;
}
void OAINumericSeparatorConfiguration::setThousandsSeparator(const OAINumericSeparatorConfiguration_ThousandsSeparator &thousands_separator) {
    m_thousands_separator = thousands_separator;
    m_thousands_separator_isSet = true;
}

bool OAINumericSeparatorConfiguration::is_thousands_separator_Set() const{
    return m_thousands_separator_isSet;
}

bool OAINumericSeparatorConfiguration::is_thousands_separator_Valid() const{
    return m_thousands_separator_isValid;
}

bool OAINumericSeparatorConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decimal_separator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thousands_separator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericSeparatorConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
