/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineChartConfiguration_DefaultSeriesSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineChartConfiguration_DefaultSeriesSettings::OAILineChartConfiguration_DefaultSeriesSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineChartConfiguration_DefaultSeriesSettings::OAILineChartConfiguration_DefaultSeriesSettings() {
    this->initializeModel();
}

OAILineChartConfiguration_DefaultSeriesSettings::~OAILineChartConfiguration_DefaultSeriesSettings() {}

void OAILineChartConfiguration_DefaultSeriesSettings::initializeModel() {

    m_axis_binding_isSet = false;
    m_axis_binding_isValid = false;

    m_line_style_settings_isSet = false;
    m_line_style_settings_isValid = false;

    m_marker_style_settings_isSet = false;
    m_marker_style_settings_isValid = false;
}

void OAILineChartConfiguration_DefaultSeriesSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineChartConfiguration_DefaultSeriesSettings::fromJsonObject(QJsonObject json) {

    m_axis_binding_isValid = ::OpenAPI::fromJsonValue(m_axis_binding, json[QString("AxisBinding")]);
    m_axis_binding_isSet = !json[QString("AxisBinding")].isNull() && m_axis_binding_isValid;

    m_line_style_settings_isValid = ::OpenAPI::fromJsonValue(m_line_style_settings, json[QString("LineStyleSettings")]);
    m_line_style_settings_isSet = !json[QString("LineStyleSettings")].isNull() && m_line_style_settings_isValid;

    m_marker_style_settings_isValid = ::OpenAPI::fromJsonValue(m_marker_style_settings, json[QString("MarkerStyleSettings")]);
    m_marker_style_settings_isSet = !json[QString("MarkerStyleSettings")].isNull() && m_marker_style_settings_isValid;
}

QString OAILineChartConfiguration_DefaultSeriesSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineChartConfiguration_DefaultSeriesSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_axis_binding.isSet()) {
        obj.insert(QString("AxisBinding"), ::OpenAPI::toJsonValue(m_axis_binding));
    }
    if (m_line_style_settings.isSet()) {
        obj.insert(QString("LineStyleSettings"), ::OpenAPI::toJsonValue(m_line_style_settings));
    }
    if (m_marker_style_settings.isSet()) {
        obj.insert(QString("MarkerStyleSettings"), ::OpenAPI::toJsonValue(m_marker_style_settings));
    }
    return obj;
}

OAIAxisBinding OAILineChartConfiguration_DefaultSeriesSettings::getAxisBinding() const {
    return m_axis_binding;
}
void OAILineChartConfiguration_DefaultSeriesSettings::setAxisBinding(const OAIAxisBinding &axis_binding) {
    m_axis_binding = axis_binding;
    m_axis_binding_isSet = true;
}

bool OAILineChartConfiguration_DefaultSeriesSettings::is_axis_binding_Set() const{
    return m_axis_binding_isSet;
}

bool OAILineChartConfiguration_DefaultSeriesSettings::is_axis_binding_Valid() const{
    return m_axis_binding_isValid;
}

OAILineChartDefaultSeriesSettings_LineStyleSettings OAILineChartConfiguration_DefaultSeriesSettings::getLineStyleSettings() const {
    return m_line_style_settings;
}
void OAILineChartConfiguration_DefaultSeriesSettings::setLineStyleSettings(const OAILineChartDefaultSeriesSettings_LineStyleSettings &line_style_settings) {
    m_line_style_settings = line_style_settings;
    m_line_style_settings_isSet = true;
}

bool OAILineChartConfiguration_DefaultSeriesSettings::is_line_style_settings_Set() const{
    return m_line_style_settings_isSet;
}

bool OAILineChartConfiguration_DefaultSeriesSettings::is_line_style_settings_Valid() const{
    return m_line_style_settings_isValid;
}

OAILineChartDefaultSeriesSettings_MarkerStyleSettings OAILineChartConfiguration_DefaultSeriesSettings::getMarkerStyleSettings() const {
    return m_marker_style_settings;
}
void OAILineChartConfiguration_DefaultSeriesSettings::setMarkerStyleSettings(const OAILineChartDefaultSeriesSettings_MarkerStyleSettings &marker_style_settings) {
    m_marker_style_settings = marker_style_settings;
    m_marker_style_settings_isSet = true;
}

bool OAILineChartConfiguration_DefaultSeriesSettings::is_marker_style_settings_Set() const{
    return m_marker_style_settings_isSet;
}

bool OAILineChartConfiguration_DefaultSeriesSettings::is_marker_style_settings_Valid() const{
    return m_marker_style_settings_isValid;
}

bool OAILineChartConfiguration_DefaultSeriesSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_axis_binding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_style_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_style_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineChartConfiguration_DefaultSeriesSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
