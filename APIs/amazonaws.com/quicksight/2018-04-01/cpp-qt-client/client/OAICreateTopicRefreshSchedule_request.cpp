/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTopicRefreshSchedule_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTopicRefreshSchedule_request::OAICreateTopicRefreshSchedule_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTopicRefreshSchedule_request::OAICreateTopicRefreshSchedule_request() {
    this->initializeModel();
}

OAICreateTopicRefreshSchedule_request::~OAICreateTopicRefreshSchedule_request() {}

void OAICreateTopicRefreshSchedule_request::initializeModel() {

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_refresh_schedule_isSet = false;
    m_refresh_schedule_isValid = false;
}

void OAICreateTopicRefreshSchedule_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTopicRefreshSchedule_request::fromJsonObject(QJsonObject json) {

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("DatasetArn")]);
    m_dataset_arn_isSet = !json[QString("DatasetArn")].isNull() && m_dataset_arn_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_refresh_schedule_isValid = ::OpenAPI::fromJsonValue(m_refresh_schedule, json[QString("RefreshSchedule")]);
    m_refresh_schedule_isSet = !json[QString("RefreshSchedule")].isNull() && m_refresh_schedule_isValid;
}

QString OAICreateTopicRefreshSchedule_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTopicRefreshSchedule_request::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_arn_isSet) {
        obj.insert(QString("DatasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_refresh_schedule.isSet()) {
        obj.insert(QString("RefreshSchedule"), ::OpenAPI::toJsonValue(m_refresh_schedule));
    }
    return obj;
}

QString OAICreateTopicRefreshSchedule_request::getDatasetArn() const {
    return m_dataset_arn;
}
void OAICreateTopicRefreshSchedule_request::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAICreateTopicRefreshSchedule_request::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAICreateTopicRefreshSchedule_request::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

QString OAICreateTopicRefreshSchedule_request::getDatasetName() const {
    return m_dataset_name;
}
void OAICreateTopicRefreshSchedule_request::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAICreateTopicRefreshSchedule_request::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAICreateTopicRefreshSchedule_request::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

OAICreateTopicRefreshSchedule_request_RefreshSchedule OAICreateTopicRefreshSchedule_request::getRefreshSchedule() const {
    return m_refresh_schedule;
}
void OAICreateTopicRefreshSchedule_request::setRefreshSchedule(const OAICreateTopicRefreshSchedule_request_RefreshSchedule &refresh_schedule) {
    m_refresh_schedule = refresh_schedule;
    m_refresh_schedule_isSet = true;
}

bool OAICreateTopicRefreshSchedule_request::is_refresh_schedule_Set() const{
    return m_refresh_schedule_isSet;
}

bool OAICreateTopicRefreshSchedule_request::is_refresh_schedule_Valid() const{
    return m_refresh_schedule_isValid;
}

bool OAICreateTopicRefreshSchedule_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTopicRefreshSchedule_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_arn_isValid && m_refresh_schedule_isValid && true;
}

} // namespace OpenAPI
