/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDataSource_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDataSource_request::OAIUpdateDataSource_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDataSource_request::OAIUpdateDataSource_request() {
    this->initializeModel();
}

OAIUpdateDataSource_request::~OAIUpdateDataSource_request() {}

void OAIUpdateDataSource_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_data_source_parameters_isSet = false;
    m_data_source_parameters_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_vpc_connection_properties_isSet = false;
    m_vpc_connection_properties_isValid = false;

    m_ssl_properties_isSet = false;
    m_ssl_properties_isValid = false;
}

void OAIUpdateDataSource_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDataSource_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_data_source_parameters_isValid = ::OpenAPI::fromJsonValue(m_data_source_parameters, json[QString("DataSourceParameters")]);
    m_data_source_parameters_isSet = !json[QString("DataSourceParameters")].isNull() && m_data_source_parameters_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;

    m_vpc_connection_properties_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_properties, json[QString("VpcConnectionProperties")]);
    m_vpc_connection_properties_isSet = !json[QString("VpcConnectionProperties")].isNull() && m_vpc_connection_properties_isValid;

    m_ssl_properties_isValid = ::OpenAPI::fromJsonValue(m_ssl_properties, json[QString("SslProperties")]);
    m_ssl_properties_isSet = !json[QString("SslProperties")].isNull() && m_ssl_properties_isValid;
}

QString OAIUpdateDataSource_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDataSource_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_data_source_parameters.isSet()) {
        obj.insert(QString("DataSourceParameters"), ::OpenAPI::toJsonValue(m_data_source_parameters));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_vpc_connection_properties.isSet()) {
        obj.insert(QString("VpcConnectionProperties"), ::OpenAPI::toJsonValue(m_vpc_connection_properties));
    }
    if (m_ssl_properties.isSet()) {
        obj.insert(QString("SslProperties"), ::OpenAPI::toJsonValue(m_ssl_properties));
    }
    return obj;
}

QString OAIUpdateDataSource_request::getName() const {
    return m_name;
}
void OAIUpdateDataSource_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateDataSource_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateDataSource_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateDataSource_request_DataSourceParameters OAIUpdateDataSource_request::getDataSourceParameters() const {
    return m_data_source_parameters;
}
void OAIUpdateDataSource_request::setDataSourceParameters(const OAICreateDataSource_request_DataSourceParameters &data_source_parameters) {
    m_data_source_parameters = data_source_parameters;
    m_data_source_parameters_isSet = true;
}

bool OAIUpdateDataSource_request::is_data_source_parameters_Set() const{
    return m_data_source_parameters_isSet;
}

bool OAIUpdateDataSource_request::is_data_source_parameters_Valid() const{
    return m_data_source_parameters_isValid;
}

OAICreateDataSource_request_Credentials OAIUpdateDataSource_request::getCredentials() const {
    return m_credentials;
}
void OAIUpdateDataSource_request::setCredentials(const OAICreateDataSource_request_Credentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIUpdateDataSource_request::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIUpdateDataSource_request::is_credentials_Valid() const{
    return m_credentials_isValid;
}

OAICreateDataSource_request_VpcConnectionProperties OAIUpdateDataSource_request::getVpcConnectionProperties() const {
    return m_vpc_connection_properties;
}
void OAIUpdateDataSource_request::setVpcConnectionProperties(const OAICreateDataSource_request_VpcConnectionProperties &vpc_connection_properties) {
    m_vpc_connection_properties = vpc_connection_properties;
    m_vpc_connection_properties_isSet = true;
}

bool OAIUpdateDataSource_request::is_vpc_connection_properties_Set() const{
    return m_vpc_connection_properties_isSet;
}

bool OAIUpdateDataSource_request::is_vpc_connection_properties_Valid() const{
    return m_vpc_connection_properties_isValid;
}

OAICreateDataSource_request_SslProperties OAIUpdateDataSource_request::getSslProperties() const {
    return m_ssl_properties;
}
void OAIUpdateDataSource_request::setSslProperties(const OAICreateDataSource_request_SslProperties &ssl_properties) {
    m_ssl_properties = ssl_properties;
    m_ssl_properties_isSet = true;
}

bool OAIUpdateDataSource_request::is_ssl_properties_Set() const{
    return m_ssl_properties_isSet;
}

bool OAIUpdateDataSource_request::is_ssl_properties_Valid() const{
    return m_ssl_properties_isValid;
}

bool OAIUpdateDataSource_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connection_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDataSource_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
