/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBarChartConfiguration_SmallMultiplesOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBarChartConfiguration_SmallMultiplesOptions::OAIBarChartConfiguration_SmallMultiplesOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBarChartConfiguration_SmallMultiplesOptions::OAIBarChartConfiguration_SmallMultiplesOptions() {
    this->initializeModel();
}

OAIBarChartConfiguration_SmallMultiplesOptions::~OAIBarChartConfiguration_SmallMultiplesOptions() {}

void OAIBarChartConfiguration_SmallMultiplesOptions::initializeModel() {

    m_max_visible_rows_isSet = false;
    m_max_visible_rows_isValid = false;

    m_max_visible_columns_isSet = false;
    m_max_visible_columns_isValid = false;

    m_panel_configuration_isSet = false;
    m_panel_configuration_isValid = false;

    m_x_axis_isSet = false;
    m_x_axis_isValid = false;

    m_y_axis_isSet = false;
    m_y_axis_isValid = false;
}

void OAIBarChartConfiguration_SmallMultiplesOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBarChartConfiguration_SmallMultiplesOptions::fromJsonObject(QJsonObject json) {

    m_max_visible_rows_isValid = ::OpenAPI::fromJsonValue(m_max_visible_rows, json[QString("MaxVisibleRows")]);
    m_max_visible_rows_isSet = !json[QString("MaxVisibleRows")].isNull() && m_max_visible_rows_isValid;

    m_max_visible_columns_isValid = ::OpenAPI::fromJsonValue(m_max_visible_columns, json[QString("MaxVisibleColumns")]);
    m_max_visible_columns_isSet = !json[QString("MaxVisibleColumns")].isNull() && m_max_visible_columns_isValid;

    m_panel_configuration_isValid = ::OpenAPI::fromJsonValue(m_panel_configuration, json[QString("PanelConfiguration")]);
    m_panel_configuration_isSet = !json[QString("PanelConfiguration")].isNull() && m_panel_configuration_isValid;

    m_x_axis_isValid = ::OpenAPI::fromJsonValue(m_x_axis, json[QString("XAxis")]);
    m_x_axis_isSet = !json[QString("XAxis")].isNull() && m_x_axis_isValid;

    m_y_axis_isValid = ::OpenAPI::fromJsonValue(m_y_axis, json[QString("YAxis")]);
    m_y_axis_isSet = !json[QString("YAxis")].isNull() && m_y_axis_isValid;
}

QString OAIBarChartConfiguration_SmallMultiplesOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBarChartConfiguration_SmallMultiplesOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_max_visible_rows_isSet) {
        obj.insert(QString("MaxVisibleRows"), ::OpenAPI::toJsonValue(m_max_visible_rows));
    }
    if (m_max_visible_columns_isSet) {
        obj.insert(QString("MaxVisibleColumns"), ::OpenAPI::toJsonValue(m_max_visible_columns));
    }
    if (m_panel_configuration.isSet()) {
        obj.insert(QString("PanelConfiguration"), ::OpenAPI::toJsonValue(m_panel_configuration));
    }
    if (m_x_axis.isSet()) {
        obj.insert(QString("XAxis"), ::OpenAPI::toJsonValue(m_x_axis));
    }
    if (m_y_axis.isSet()) {
        obj.insert(QString("YAxis"), ::OpenAPI::toJsonValue(m_y_axis));
    }
    return obj;
}

qint32 OAIBarChartConfiguration_SmallMultiplesOptions::getMaxVisibleRows() const {
    return m_max_visible_rows;
}
void OAIBarChartConfiguration_SmallMultiplesOptions::setMaxVisibleRows(const qint32 &max_visible_rows) {
    m_max_visible_rows = max_visible_rows;
    m_max_visible_rows_isSet = true;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_max_visible_rows_Set() const{
    return m_max_visible_rows_isSet;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_max_visible_rows_Valid() const{
    return m_max_visible_rows_isValid;
}

qint32 OAIBarChartConfiguration_SmallMultiplesOptions::getMaxVisibleColumns() const {
    return m_max_visible_columns;
}
void OAIBarChartConfiguration_SmallMultiplesOptions::setMaxVisibleColumns(const qint32 &max_visible_columns) {
    m_max_visible_columns = max_visible_columns;
    m_max_visible_columns_isSet = true;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_max_visible_columns_Set() const{
    return m_max_visible_columns_isSet;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_max_visible_columns_Valid() const{
    return m_max_visible_columns_isValid;
}

OAISmallMultiplesOptions_PanelConfiguration OAIBarChartConfiguration_SmallMultiplesOptions::getPanelConfiguration() const {
    return m_panel_configuration;
}
void OAIBarChartConfiguration_SmallMultiplesOptions::setPanelConfiguration(const OAISmallMultiplesOptions_PanelConfiguration &panel_configuration) {
    m_panel_configuration = panel_configuration;
    m_panel_configuration_isSet = true;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_panel_configuration_Set() const{
    return m_panel_configuration_isSet;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_panel_configuration_Valid() const{
    return m_panel_configuration_isValid;
}

OAISmallMultiplesOptions_XAxis OAIBarChartConfiguration_SmallMultiplesOptions::getXAxis() const {
    return m_x_axis;
}
void OAIBarChartConfiguration_SmallMultiplesOptions::setXAxis(const OAISmallMultiplesOptions_XAxis &x_axis) {
    m_x_axis = x_axis;
    m_x_axis_isSet = true;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_x_axis_Set() const{
    return m_x_axis_isSet;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_x_axis_Valid() const{
    return m_x_axis_isValid;
}

OAISmallMultiplesOptions_YAxis OAIBarChartConfiguration_SmallMultiplesOptions::getYAxis() const {
    return m_y_axis;
}
void OAIBarChartConfiguration_SmallMultiplesOptions::setYAxis(const OAISmallMultiplesOptions_YAxis &y_axis) {
    m_y_axis = y_axis;
    m_y_axis_isSet = true;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_y_axis_Set() const{
    return m_y_axis_isSet;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::is_y_axis_Valid() const{
    return m_y_axis_isValid;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_visible_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_visible_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_panel_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBarChartConfiguration_SmallMultiplesOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
