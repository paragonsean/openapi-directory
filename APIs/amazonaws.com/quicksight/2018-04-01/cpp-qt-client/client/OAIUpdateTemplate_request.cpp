/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTemplate_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTemplate_request::OAIUpdateTemplate_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTemplate_request::OAIUpdateTemplate_request() {
    this->initializeModel();
}

OAIUpdateTemplate_request::~OAIUpdateTemplate_request() {}

void OAIUpdateTemplate_request::initializeModel() {

    m_source_entity_isSet = false;
    m_source_entity_isValid = false;

    m_version_description_isSet = false;
    m_version_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;
}

void OAIUpdateTemplate_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTemplate_request::fromJsonObject(QJsonObject json) {

    m_source_entity_isValid = ::OpenAPI::fromJsonValue(m_source_entity, json[QString("SourceEntity")]);
    m_source_entity_isSet = !json[QString("SourceEntity")].isNull() && m_source_entity_isValid;

    m_version_description_isValid = ::OpenAPI::fromJsonValue(m_version_description, json[QString("VersionDescription")]);
    m_version_description_isSet = !json[QString("VersionDescription")].isNull() && m_version_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;
}

QString OAIUpdateTemplate_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTemplate_request::asJsonObject() const {
    QJsonObject obj;
    if (m_source_entity.isSet()) {
        obj.insert(QString("SourceEntity"), ::OpenAPI::toJsonValue(m_source_entity));
    }
    if (m_version_description_isSet) {
        obj.insert(QString("VersionDescription"), ::OpenAPI::toJsonValue(m_version_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    return obj;
}

OAIUpdateTemplate_request_SourceEntity OAIUpdateTemplate_request::getSourceEntity() const {
    return m_source_entity;
}
void OAIUpdateTemplate_request::setSourceEntity(const OAIUpdateTemplate_request_SourceEntity &source_entity) {
    m_source_entity = source_entity;
    m_source_entity_isSet = true;
}

bool OAIUpdateTemplate_request::is_source_entity_Set() const{
    return m_source_entity_isSet;
}

bool OAIUpdateTemplate_request::is_source_entity_Valid() const{
    return m_source_entity_isValid;
}

QString OAIUpdateTemplate_request::getVersionDescription() const {
    return m_version_description;
}
void OAIUpdateTemplate_request::setVersionDescription(const QString &version_description) {
    m_version_description = version_description;
    m_version_description_isSet = true;
}

bool OAIUpdateTemplate_request::is_version_description_Set() const{
    return m_version_description_isSet;
}

bool OAIUpdateTemplate_request::is_version_description_Valid() const{
    return m_version_description_isValid;
}

QString OAIUpdateTemplate_request::getName() const {
    return m_name;
}
void OAIUpdateTemplate_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateTemplate_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateTemplate_request::is_name_Valid() const{
    return m_name_isValid;
}

OAIUpdateTemplate_request_Definition OAIUpdateTemplate_request::getDefinition() const {
    return m_definition;
}
void OAIUpdateTemplate_request::setDefinition(const OAIUpdateTemplate_request_Definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIUpdateTemplate_request::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIUpdateTemplate_request::is_definition_Valid() const{
    return m_definition_isValid;
}

bool OAIUpdateTemplate_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTemplate_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
