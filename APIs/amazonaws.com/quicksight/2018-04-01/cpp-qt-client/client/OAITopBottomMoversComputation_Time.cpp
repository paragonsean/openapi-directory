/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopBottomMoversComputation_Time.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopBottomMoversComputation_Time::OAITopBottomMoversComputation_Time(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopBottomMoversComputation_Time::OAITopBottomMoversComputation_Time() {
    this->initializeModel();
}

OAITopBottomMoversComputation_Time::~OAITopBottomMoversComputation_Time() {}

void OAITopBottomMoversComputation_Time::initializeModel() {

    m_numerical_dimension_field_isSet = false;
    m_numerical_dimension_field_isValid = false;

    m_categorical_dimension_field_isSet = false;
    m_categorical_dimension_field_isValid = false;

    m_date_dimension_field_isSet = false;
    m_date_dimension_field_isValid = false;
}

void OAITopBottomMoversComputation_Time::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopBottomMoversComputation_Time::fromJsonObject(QJsonObject json) {

    m_numerical_dimension_field_isValid = ::OpenAPI::fromJsonValue(m_numerical_dimension_field, json[QString("NumericalDimensionField")]);
    m_numerical_dimension_field_isSet = !json[QString("NumericalDimensionField")].isNull() && m_numerical_dimension_field_isValid;

    m_categorical_dimension_field_isValid = ::OpenAPI::fromJsonValue(m_categorical_dimension_field, json[QString("CategoricalDimensionField")]);
    m_categorical_dimension_field_isSet = !json[QString("CategoricalDimensionField")].isNull() && m_categorical_dimension_field_isValid;

    m_date_dimension_field_isValid = ::OpenAPI::fromJsonValue(m_date_dimension_field, json[QString("DateDimensionField")]);
    m_date_dimension_field_isSet = !json[QString("DateDimensionField")].isNull() && m_date_dimension_field_isValid;
}

QString OAITopBottomMoversComputation_Time::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopBottomMoversComputation_Time::asJsonObject() const {
    QJsonObject obj;
    if (m_numerical_dimension_field.isSet()) {
        obj.insert(QString("NumericalDimensionField"), ::OpenAPI::toJsonValue(m_numerical_dimension_field));
    }
    if (m_categorical_dimension_field.isSet()) {
        obj.insert(QString("CategoricalDimensionField"), ::OpenAPI::toJsonValue(m_categorical_dimension_field));
    }
    if (m_date_dimension_field.isSet()) {
        obj.insert(QString("DateDimensionField"), ::OpenAPI::toJsonValue(m_date_dimension_field));
    }
    return obj;
}

OAIDimensionField_NumericalDimensionField OAITopBottomMoversComputation_Time::getNumericalDimensionField() const {
    return m_numerical_dimension_field;
}
void OAITopBottomMoversComputation_Time::setNumericalDimensionField(const OAIDimensionField_NumericalDimensionField &numerical_dimension_field) {
    m_numerical_dimension_field = numerical_dimension_field;
    m_numerical_dimension_field_isSet = true;
}

bool OAITopBottomMoversComputation_Time::is_numerical_dimension_field_Set() const{
    return m_numerical_dimension_field_isSet;
}

bool OAITopBottomMoversComputation_Time::is_numerical_dimension_field_Valid() const{
    return m_numerical_dimension_field_isValid;
}

OAIDimensionField_CategoricalDimensionField OAITopBottomMoversComputation_Time::getCategoricalDimensionField() const {
    return m_categorical_dimension_field;
}
void OAITopBottomMoversComputation_Time::setCategoricalDimensionField(const OAIDimensionField_CategoricalDimensionField &categorical_dimension_field) {
    m_categorical_dimension_field = categorical_dimension_field;
    m_categorical_dimension_field_isSet = true;
}

bool OAITopBottomMoversComputation_Time::is_categorical_dimension_field_Set() const{
    return m_categorical_dimension_field_isSet;
}

bool OAITopBottomMoversComputation_Time::is_categorical_dimension_field_Valid() const{
    return m_categorical_dimension_field_isValid;
}

OAIDimensionField_DateDimensionField OAITopBottomMoversComputation_Time::getDateDimensionField() const {
    return m_date_dimension_field;
}
void OAITopBottomMoversComputation_Time::setDateDimensionField(const OAIDimensionField_DateDimensionField &date_dimension_field) {
    m_date_dimension_field = date_dimension_field;
    m_date_dimension_field_isSet = true;
}

bool OAITopBottomMoversComputation_Time::is_date_dimension_field_Set() const{
    return m_date_dimension_field_isSet;
}

bool OAITopBottomMoversComputation_Time::is_date_dimension_field_Valid() const{
    return m_date_dimension_field_isValid;
}

bool OAITopBottomMoversComputation_Time::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_numerical_dimension_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categorical_dimension_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_dimension_field.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopBottomMoversComputation_Time::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
