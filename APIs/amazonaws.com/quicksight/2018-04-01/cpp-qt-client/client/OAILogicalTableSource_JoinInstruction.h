/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILogicalTableSource_JoinInstruction.h
 *
 * 
 */

#ifndef OAILogicalTableSource_JoinInstruction_H
#define OAILogicalTableSource_JoinInstruction_H

#include <QJsonObject>

#include "OAIJoinInstruction_LeftJoinKeyProperties.h"
#include "OAIJoinInstruction_RightJoinKeyProperties.h"
#include "OAIJoinType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJoinInstruction_LeftJoinKeyProperties;
class OAIJoinInstruction_RightJoinKeyProperties;

class OAILogicalTableSource_JoinInstruction : public OAIObject {
public:
    OAILogicalTableSource_JoinInstruction();
    OAILogicalTableSource_JoinInstruction(QString json);
    ~OAILogicalTableSource_JoinInstruction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLeftOperand() const;
    void setLeftOperand(const QString &left_operand);
    bool is_left_operand_Set() const;
    bool is_left_operand_Valid() const;

    QString getRightOperand() const;
    void setRightOperand(const QString &right_operand);
    bool is_right_operand_Set() const;
    bool is_right_operand_Valid() const;

    OAIJoinInstruction_LeftJoinKeyProperties getLeftJoinKeyProperties() const;
    void setLeftJoinKeyProperties(const OAIJoinInstruction_LeftJoinKeyProperties &left_join_key_properties);
    bool is_left_join_key_properties_Set() const;
    bool is_left_join_key_properties_Valid() const;

    OAIJoinInstruction_RightJoinKeyProperties getRightJoinKeyProperties() const;
    void setRightJoinKeyProperties(const OAIJoinInstruction_RightJoinKeyProperties &right_join_key_properties);
    bool is_right_join_key_properties_Set() const;
    bool is_right_join_key_properties_Valid() const;

    OAIJoinType getType() const;
    void setType(const OAIJoinType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getOnClause() const;
    void setOnClause(const QString &on_clause);
    bool is_on_clause_Set() const;
    bool is_on_clause_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_left_operand;
    bool m_left_operand_isSet;
    bool m_left_operand_isValid;

    QString m_right_operand;
    bool m_right_operand_isSet;
    bool m_right_operand_isValid;

    OAIJoinInstruction_LeftJoinKeyProperties m_left_join_key_properties;
    bool m_left_join_key_properties_isSet;
    bool m_left_join_key_properties_isValid;

    OAIJoinInstruction_RightJoinKeyProperties m_right_join_key_properties;
    bool m_right_join_key_properties_isSet;
    bool m_right_join_key_properties_isValid;

    OAIJoinType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_on_clause;
    bool m_on_clause_isSet;
    bool m_on_clause_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILogicalTableSource_JoinInstruction)

#endif // OAILogicalTableSource_JoinInstruction_H
