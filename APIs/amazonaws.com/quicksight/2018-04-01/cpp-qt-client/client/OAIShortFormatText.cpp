/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShortFormatText.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShortFormatText::OAIShortFormatText(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShortFormatText::OAIShortFormatText() {
    this->initializeModel();
}

OAIShortFormatText::~OAIShortFormatText() {}

void OAIShortFormatText::initializeModel() {

    m_plain_text_isSet = false;
    m_plain_text_isValid = false;

    m_rich_text_isSet = false;
    m_rich_text_isValid = false;
}

void OAIShortFormatText::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShortFormatText::fromJsonObject(QJsonObject json) {

    m_plain_text_isValid = ::OpenAPI::fromJsonValue(m_plain_text, json[QString("PlainText")]);
    m_plain_text_isSet = !json[QString("PlainText")].isNull() && m_plain_text_isValid;

    m_rich_text_isValid = ::OpenAPI::fromJsonValue(m_rich_text, json[QString("RichText")]);
    m_rich_text_isSet = !json[QString("RichText")].isNull() && m_rich_text_isValid;
}

QString OAIShortFormatText::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShortFormatText::asJsonObject() const {
    QJsonObject obj;
    if (m_plain_text_isSet) {
        obj.insert(QString("PlainText"), ::OpenAPI::toJsonValue(m_plain_text));
    }
    if (m_rich_text_isSet) {
        obj.insert(QString("RichText"), ::OpenAPI::toJsonValue(m_rich_text));
    }
    return obj;
}

QString OAIShortFormatText::getPlainText() const {
    return m_plain_text;
}
void OAIShortFormatText::setPlainText(const QString &plain_text) {
    m_plain_text = plain_text;
    m_plain_text_isSet = true;
}

bool OAIShortFormatText::is_plain_text_Set() const{
    return m_plain_text_isSet;
}

bool OAIShortFormatText::is_plain_text_Valid() const{
    return m_plain_text_isValid;
}

QString OAIShortFormatText::getRichText() const {
    return m_rich_text;
}
void OAIShortFormatText::setRichText(const QString &rich_text) {
    m_rich_text = rich_text;
    m_rich_text_isSet = true;
}

bool OAIShortFormatText::is_rich_text_Set() const{
    return m_rich_text_isSet;
}

bool OAIShortFormatText::is_rich_text_Valid() const{
    return m_rich_text_isValid;
}

bool OAIShortFormatText::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plain_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rich_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShortFormatText::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
