/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateThemeAliasResponse_ThemeAlias.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateThemeAliasResponse_ThemeAlias::OAICreateThemeAliasResponse_ThemeAlias(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateThemeAliasResponse_ThemeAlias::OAICreateThemeAliasResponse_ThemeAlias() {
    this->initializeModel();
}

OAICreateThemeAliasResponse_ThemeAlias::~OAICreateThemeAliasResponse_ThemeAlias() {}

void OAICreateThemeAliasResponse_ThemeAlias::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_alias_name_isSet = false;
    m_alias_name_isValid = false;

    m_theme_version_number_isSet = false;
    m_theme_version_number_isValid = false;
}

void OAICreateThemeAliasResponse_ThemeAlias::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateThemeAliasResponse_ThemeAlias::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_alias_name_isValid = ::OpenAPI::fromJsonValue(m_alias_name, json[QString("AliasName")]);
    m_alias_name_isSet = !json[QString("AliasName")].isNull() && m_alias_name_isValid;

    m_theme_version_number_isValid = ::OpenAPI::fromJsonValue(m_theme_version_number, json[QString("ThemeVersionNumber")]);
    m_theme_version_number_isSet = !json[QString("ThemeVersionNumber")].isNull() && m_theme_version_number_isValid;
}

QString OAICreateThemeAliasResponse_ThemeAlias::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateThemeAliasResponse_ThemeAlias::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_alias_name_isSet) {
        obj.insert(QString("AliasName"), ::OpenAPI::toJsonValue(m_alias_name));
    }
    if (m_theme_version_number_isSet) {
        obj.insert(QString("ThemeVersionNumber"), ::OpenAPI::toJsonValue(m_theme_version_number));
    }
    return obj;
}

QString OAICreateThemeAliasResponse_ThemeAlias::getArn() const {
    return m_arn;
}
void OAICreateThemeAliasResponse_ThemeAlias::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateThemeAliasResponse_ThemeAlias::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateThemeAliasResponse_ThemeAlias::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateThemeAliasResponse_ThemeAlias::getAliasName() const {
    return m_alias_name;
}
void OAICreateThemeAliasResponse_ThemeAlias::setAliasName(const QString &alias_name) {
    m_alias_name = alias_name;
    m_alias_name_isSet = true;
}

bool OAICreateThemeAliasResponse_ThemeAlias::is_alias_name_Set() const{
    return m_alias_name_isSet;
}

bool OAICreateThemeAliasResponse_ThemeAlias::is_alias_name_Valid() const{
    return m_alias_name_isValid;
}

qint32 OAICreateThemeAliasResponse_ThemeAlias::getThemeVersionNumber() const {
    return m_theme_version_number;
}
void OAICreateThemeAliasResponse_ThemeAlias::setThemeVersionNumber(const qint32 &theme_version_number) {
    m_theme_version_number = theme_version_number;
    m_theme_version_number_isSet = true;
}

bool OAICreateThemeAliasResponse_ThemeAlias::is_theme_version_number_Set() const{
    return m_theme_version_number_isSet;
}

bool OAICreateThemeAliasResponse_ThemeAlias::is_theme_version_number_Valid() const{
    return m_theme_version_number_isValid;
}

bool OAICreateThemeAliasResponse_ThemeAlias::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateThemeAliasResponse_ThemeAlias::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
