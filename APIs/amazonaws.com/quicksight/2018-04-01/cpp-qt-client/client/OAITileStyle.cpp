/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITileStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITileStyle::OAITileStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITileStyle::OAITileStyle() {
    this->initializeModel();
}

OAITileStyle::~OAITileStyle() {}

void OAITileStyle::initializeModel() {

    m_border_isSet = false;
    m_border_isValid = false;
}

void OAITileStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITileStyle::fromJsonObject(QJsonObject json) {

    m_border_isValid = ::OpenAPI::fromJsonValue(m_border, json[QString("Border")]);
    m_border_isSet = !json[QString("Border")].isNull() && m_border_isValid;
}

QString OAITileStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITileStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_border.isSet()) {
        obj.insert(QString("Border"), ::OpenAPI::toJsonValue(m_border));
    }
    return obj;
}

OAITileStyle_Border OAITileStyle::getBorder() const {
    return m_border;
}
void OAITileStyle::setBorder(const OAITileStyle_Border &border) {
    m_border = border;
    m_border_isSet = true;
}

bool OAITileStyle::is_border_Set() const{
    return m_border_isSet;
}

bool OAITileStyle::is_border_Valid() const{
    return m_border_isValid;
}

bool OAITileStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_border.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITileStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
