/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopBottomRankedComputation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopBottomRankedComputation::OAITopBottomRankedComputation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopBottomRankedComputation::OAITopBottomRankedComputation() {
    this->initializeModel();
}

OAITopBottomRankedComputation::~OAITopBottomRankedComputation() {}

void OAITopBottomRankedComputation::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_result_size_isSet = false;
    m_result_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITopBottomRankedComputation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopBottomRankedComputation::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_result_size_isValid = ::OpenAPI::fromJsonValue(m_result_size, json[QString("ResultSize")]);
    m_result_size_isSet = !json[QString("ResultSize")].isNull() && m_result_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAITopBottomRankedComputation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopBottomRankedComputation::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_result_size_isSet) {
        obj.insert(QString("ResultSize"), ::OpenAPI::toJsonValue(m_result_size));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITopBottomRankedComputation::getComputationId() const {
    return m_computation_id;
}
void OAITopBottomRankedComputation::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAITopBottomRankedComputation::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAITopBottomRankedComputation::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAITopBottomRankedComputation::getName() const {
    return m_name;
}
void OAITopBottomRankedComputation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITopBottomRankedComputation::is_name_Set() const{
    return m_name_isSet;
}

bool OAITopBottomRankedComputation::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomRankedComputation_Category OAITopBottomRankedComputation::getCategory() const {
    return m_category;
}
void OAITopBottomRankedComputation::setCategory(const OAITopBottomRankedComputation_Category &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITopBottomRankedComputation::is_category_Set() const{
    return m_category_isSet;
}

bool OAITopBottomRankedComputation::is_category_Valid() const{
    return m_category_isValid;
}

OAITopBottomRankedComputation_Value OAITopBottomRankedComputation::getValue() const {
    return m_value;
}
void OAITopBottomRankedComputation::setValue(const OAITopBottomRankedComputation_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITopBottomRankedComputation::is_value_Set() const{
    return m_value_isSet;
}

bool OAITopBottomRankedComputation::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAITopBottomRankedComputation::getResultSize() const {
    return m_result_size;
}
void OAITopBottomRankedComputation::setResultSize(const qint32 &result_size) {
    m_result_size = result_size;
    m_result_size_isSet = true;
}

bool OAITopBottomRankedComputation::is_result_size_Set() const{
    return m_result_size_isSet;
}

bool OAITopBottomRankedComputation::is_result_size_Valid() const{
    return m_result_size_isValid;
}

OAITopBottomComputationType OAITopBottomRankedComputation::getType() const {
    return m_type;
}
void OAITopBottomRankedComputation::setType(const OAITopBottomComputationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITopBottomRankedComputation::is_type_Set() const{
    return m_type_isSet;
}

bool OAITopBottomRankedComputation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITopBottomRankedComputation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopBottomRankedComputation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_category_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
