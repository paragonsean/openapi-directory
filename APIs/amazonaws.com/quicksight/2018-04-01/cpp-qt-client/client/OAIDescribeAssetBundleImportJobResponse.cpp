/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAssetBundleImportJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAssetBundleImportJobResponse::OAIDescribeAssetBundleImportJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAssetBundleImportJobResponse::OAIDescribeAssetBundleImportJobResponse() {
    this->initializeModel();
}

OAIDescribeAssetBundleImportJobResponse::~OAIDescribeAssetBundleImportJobResponse() {}

void OAIDescribeAssetBundleImportJobResponse::initializeModel() {

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_rollback_errors_isSet = false;
    m_rollback_errors_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_asset_bundle_import_job_id_isSet = false;
    m_asset_bundle_import_job_id_isValid = false;

    m_aws_account_id_isSet = false;
    m_aws_account_id_isValid = false;

    m_asset_bundle_import_source_isSet = false;
    m_asset_bundle_import_source_isValid = false;

    m_override_parameters_isSet = false;
    m_override_parameters_isValid = false;

    m_failure_action_isSet = false;
    m_failure_action_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeAssetBundleImportJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAssetBundleImportJobResponse::fromJsonObject(QJsonObject json) {

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_rollback_errors_isValid = ::OpenAPI::fromJsonValue(m_rollback_errors, json[QString("RollbackErrors")]);
    m_rollback_errors_isSet = !json[QString("RollbackErrors")].isNull() && m_rollback_errors_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_asset_bundle_import_job_id_isValid = ::OpenAPI::fromJsonValue(m_asset_bundle_import_job_id, json[QString("AssetBundleImportJobId")]);
    m_asset_bundle_import_job_id_isSet = !json[QString("AssetBundleImportJobId")].isNull() && m_asset_bundle_import_job_id_isValid;

    m_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_aws_account_id, json[QString("AwsAccountId")]);
    m_aws_account_id_isSet = !json[QString("AwsAccountId")].isNull() && m_aws_account_id_isValid;

    m_asset_bundle_import_source_isValid = ::OpenAPI::fromJsonValue(m_asset_bundle_import_source, json[QString("AssetBundleImportSource")]);
    m_asset_bundle_import_source_isSet = !json[QString("AssetBundleImportSource")].isNull() && m_asset_bundle_import_source_isValid;

    m_override_parameters_isValid = ::OpenAPI::fromJsonValue(m_override_parameters, json[QString("OverrideParameters")]);
    m_override_parameters_isSet = !json[QString("OverrideParameters")].isNull() && m_override_parameters_isValid;

    m_failure_action_isValid = ::OpenAPI::fromJsonValue(m_failure_action, json[QString("FailureAction")]);
    m_failure_action_isSet = !json[QString("FailureAction")].isNull() && m_failure_action_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeAssetBundleImportJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAssetBundleImportJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_rollback_errors.isSet()) {
        obj.insert(QString("RollbackErrors"), ::OpenAPI::toJsonValue(m_rollback_errors));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_asset_bundle_import_job_id_isSet) {
        obj.insert(QString("AssetBundleImportJobId"), ::OpenAPI::toJsonValue(m_asset_bundle_import_job_id));
    }
    if (m_aws_account_id_isSet) {
        obj.insert(QString("AwsAccountId"), ::OpenAPI::toJsonValue(m_aws_account_id));
    }
    if (m_asset_bundle_import_source.isSet()) {
        obj.insert(QString("AssetBundleImportSource"), ::OpenAPI::toJsonValue(m_asset_bundle_import_source));
    }
    if (m_override_parameters.isSet()) {
        obj.insert(QString("OverrideParameters"), ::OpenAPI::toJsonValue(m_override_parameters));
    }
    if (m_failure_action.isSet()) {
        obj.insert(QString("FailureAction"), ::OpenAPI::toJsonValue(m_failure_action));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAssetBundleImportJobStatus OAIDescribeAssetBundleImportJobResponse::getJobStatus() const {
    return m_job_status;
}
void OAIDescribeAssetBundleImportJobResponse::setJobStatus(const OAIAssetBundleImportJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_job_status_Valid() const{
    return m_job_status_isValid;
}

QList OAIDescribeAssetBundleImportJobResponse::getErrors() const {
    return m_errors;
}
void OAIDescribeAssetBundleImportJobResponse::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QList OAIDescribeAssetBundleImportJobResponse::getRollbackErrors() const {
    return m_rollback_errors;
}
void OAIDescribeAssetBundleImportJobResponse::setRollbackErrors(const QList &rollback_errors) {
    m_rollback_errors = rollback_errors;
    m_rollback_errors_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_rollback_errors_Set() const{
    return m_rollback_errors_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_rollback_errors_Valid() const{
    return m_rollback_errors_isValid;
}

QString OAIDescribeAssetBundleImportJobResponse::getArn() const {
    return m_arn;
}
void OAIDescribeAssetBundleImportJobResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIDescribeAssetBundleImportJobResponse::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeAssetBundleImportJobResponse::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIDescribeAssetBundleImportJobResponse::getAssetBundleImportJobId() const {
    return m_asset_bundle_import_job_id;
}
void OAIDescribeAssetBundleImportJobResponse::setAssetBundleImportJobId(const QString &asset_bundle_import_job_id) {
    m_asset_bundle_import_job_id = asset_bundle_import_job_id;
    m_asset_bundle_import_job_id_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_asset_bundle_import_job_id_Set() const{
    return m_asset_bundle_import_job_id_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_asset_bundle_import_job_id_Valid() const{
    return m_asset_bundle_import_job_id_isValid;
}

QString OAIDescribeAssetBundleImportJobResponse::getAwsAccountId() const {
    return m_aws_account_id;
}
void OAIDescribeAssetBundleImportJobResponse::setAwsAccountId(const QString &aws_account_id) {
    m_aws_account_id = aws_account_id;
    m_aws_account_id_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_aws_account_id_Set() const{
    return m_aws_account_id_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_aws_account_id_Valid() const{
    return m_aws_account_id_isValid;
}

OAIDescribeAssetBundleImportJobResponse_AssetBundleImportSource OAIDescribeAssetBundleImportJobResponse::getAssetBundleImportSource() const {
    return m_asset_bundle_import_source;
}
void OAIDescribeAssetBundleImportJobResponse::setAssetBundleImportSource(const OAIDescribeAssetBundleImportJobResponse_AssetBundleImportSource &asset_bundle_import_source) {
    m_asset_bundle_import_source = asset_bundle_import_source;
    m_asset_bundle_import_source_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_asset_bundle_import_source_Set() const{
    return m_asset_bundle_import_source_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_asset_bundle_import_source_Valid() const{
    return m_asset_bundle_import_source_isValid;
}

OAIDescribeAssetBundleImportJobResponse_OverrideParameters OAIDescribeAssetBundleImportJobResponse::getOverrideParameters() const {
    return m_override_parameters;
}
void OAIDescribeAssetBundleImportJobResponse::setOverrideParameters(const OAIDescribeAssetBundleImportJobResponse_OverrideParameters &override_parameters) {
    m_override_parameters = override_parameters;
    m_override_parameters_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_override_parameters_Set() const{
    return m_override_parameters_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_override_parameters_Valid() const{
    return m_override_parameters_isValid;
}

OAIAssetBundleImportFailureAction OAIDescribeAssetBundleImportJobResponse::getFailureAction() const {
    return m_failure_action;
}
void OAIDescribeAssetBundleImportJobResponse::setFailureAction(const OAIAssetBundleImportFailureAction &failure_action) {
    m_failure_action = failure_action;
    m_failure_action_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_failure_action_Set() const{
    return m_failure_action_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_failure_action_Valid() const{
    return m_failure_action_isValid;
}

QString OAIDescribeAssetBundleImportJobResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeAssetBundleImportJobResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeAssetBundleImportJobResponse::getStatus() const {
    return m_status;
}
void OAIDescribeAssetBundleImportJobResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeAssetBundleImportJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_bundle_import_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_bundle_import_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAssetBundleImportJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
