/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterListConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterListConfiguration::OAIFilterListConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterListConfiguration::OAIFilterListConfiguration() {
    this->initializeModel();
}

OAIFilterListConfiguration::~OAIFilterListConfiguration() {}

void OAIFilterListConfiguration::initializeModel() {

    m_match_operator_isSet = false;
    m_match_operator_isValid = false;

    m_category_values_isSet = false;
    m_category_values_isValid = false;

    m_select_all_options_isSet = false;
    m_select_all_options_isValid = false;
}

void OAIFilterListConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterListConfiguration::fromJsonObject(QJsonObject json) {

    m_match_operator_isValid = ::OpenAPI::fromJsonValue(m_match_operator, json[QString("MatchOperator")]);
    m_match_operator_isSet = !json[QString("MatchOperator")].isNull() && m_match_operator_isValid;

    m_category_values_isValid = ::OpenAPI::fromJsonValue(m_category_values, json[QString("CategoryValues")]);
    m_category_values_isSet = !json[QString("CategoryValues")].isNull() && m_category_values_isValid;

    m_select_all_options_isValid = ::OpenAPI::fromJsonValue(m_select_all_options, json[QString("SelectAllOptions")]);
    m_select_all_options_isSet = !json[QString("SelectAllOptions")].isNull() && m_select_all_options_isValid;
}

QString OAIFilterListConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterListConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_match_operator.isSet()) {
        obj.insert(QString("MatchOperator"), ::OpenAPI::toJsonValue(m_match_operator));
    }
    if (m_category_values.isSet()) {
        obj.insert(QString("CategoryValues"), ::OpenAPI::toJsonValue(m_category_values));
    }
    if (m_select_all_options.isSet()) {
        obj.insert(QString("SelectAllOptions"), ::OpenAPI::toJsonValue(m_select_all_options));
    }
    return obj;
}

OAICategoryFilterMatchOperator OAIFilterListConfiguration::getMatchOperator() const {
    return m_match_operator;
}
void OAIFilterListConfiguration::setMatchOperator(const OAICategoryFilterMatchOperator &match_operator) {
    m_match_operator = match_operator;
    m_match_operator_isSet = true;
}

bool OAIFilterListConfiguration::is_match_operator_Set() const{
    return m_match_operator_isSet;
}

bool OAIFilterListConfiguration::is_match_operator_Valid() const{
    return m_match_operator_isValid;
}

QList OAIFilterListConfiguration::getCategoryValues() const {
    return m_category_values;
}
void OAIFilterListConfiguration::setCategoryValues(const QList &category_values) {
    m_category_values = category_values;
    m_category_values_isSet = true;
}

bool OAIFilterListConfiguration::is_category_values_Set() const{
    return m_category_values_isSet;
}

bool OAIFilterListConfiguration::is_category_values_Valid() const{
    return m_category_values_isValid;
}

OAICategoryFilterSelectAllOptions OAIFilterListConfiguration::getSelectAllOptions() const {
    return m_select_all_options;
}
void OAIFilterListConfiguration::setSelectAllOptions(const OAICategoryFilterSelectAllOptions &select_all_options) {
    m_select_all_options = select_all_options;
    m_select_all_options_isSet = true;
}

bool OAIFilterListConfiguration::is_select_all_options_Set() const{
    return m_select_all_options_isSet;
}

bool OAIFilterListConfiguration::is_select_all_options_Valid() const{
    return m_select_all_options_isValid;
}

bool OAIFilterListConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_all_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterListConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_match_operator_isValid && true;
}

} // namespace OpenAPI
