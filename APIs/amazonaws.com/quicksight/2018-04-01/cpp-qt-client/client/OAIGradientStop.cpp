/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGradientStop.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGradientStop::OAIGradientStop(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGradientStop::OAIGradientStop() {
    this->initializeModel();
}

OAIGradientStop::~OAIGradientStop() {}

void OAIGradientStop::initializeModel() {

    m_gradient_offset_isSet = false;
    m_gradient_offset_isValid = false;

    m_data_value_isSet = false;
    m_data_value_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;
}

void OAIGradientStop::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGradientStop::fromJsonObject(QJsonObject json) {

    m_gradient_offset_isValid = ::OpenAPI::fromJsonValue(m_gradient_offset, json[QString("GradientOffset")]);
    m_gradient_offset_isSet = !json[QString("GradientOffset")].isNull() && m_gradient_offset_isValid;

    m_data_value_isValid = ::OpenAPI::fromJsonValue(m_data_value, json[QString("DataValue")]);
    m_data_value_isSet = !json[QString("DataValue")].isNull() && m_data_value_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;
}

QString OAIGradientStop::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGradientStop::asJsonObject() const {
    QJsonObject obj;
    if (m_gradient_offset_isSet) {
        obj.insert(QString("GradientOffset"), ::OpenAPI::toJsonValue(m_gradient_offset));
    }
    if (m_data_value_isSet) {
        obj.insert(QString("DataValue"), ::OpenAPI::toJsonValue(m_data_value));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    return obj;
}

double OAIGradientStop::getGradientOffset() const {
    return m_gradient_offset;
}
void OAIGradientStop::setGradientOffset(const double &gradient_offset) {
    m_gradient_offset = gradient_offset;
    m_gradient_offset_isSet = true;
}

bool OAIGradientStop::is_gradient_offset_Set() const{
    return m_gradient_offset_isSet;
}

bool OAIGradientStop::is_gradient_offset_Valid() const{
    return m_gradient_offset_isValid;
}

double OAIGradientStop::getDataValue() const {
    return m_data_value;
}
void OAIGradientStop::setDataValue(const double &data_value) {
    m_data_value = data_value;
    m_data_value_isSet = true;
}

bool OAIGradientStop::is_data_value_Set() const{
    return m_data_value_isSet;
}

bool OAIGradientStop::is_data_value_Valid() const{
    return m_data_value_isValid;
}

QString OAIGradientStop::getColor() const {
    return m_color;
}
void OAIGradientStop::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIGradientStop::is_color_Set() const{
    return m_color_isSet;
}

bool OAIGradientStop::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIGradientStop::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gradient_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGradientStop::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gradient_offset_isValid && true;
}

} // namespace OpenAPI
