/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnalysisRequest_Parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnalysisRequest_Parameters::OAICreateAnalysisRequest_Parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnalysisRequest_Parameters::OAICreateAnalysisRequest_Parameters() {
    this->initializeModel();
}

OAICreateAnalysisRequest_Parameters::~OAICreateAnalysisRequest_Parameters() {}

void OAICreateAnalysisRequest_Parameters::initializeModel() {

    m_string_parameters_isSet = false;
    m_string_parameters_isValid = false;

    m_integer_parameters_isSet = false;
    m_integer_parameters_isValid = false;

    m_decimal_parameters_isSet = false;
    m_decimal_parameters_isValid = false;

    m_date_time_parameters_isSet = false;
    m_date_time_parameters_isValid = false;
}

void OAICreateAnalysisRequest_Parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnalysisRequest_Parameters::fromJsonObject(QJsonObject json) {

    m_string_parameters_isValid = ::OpenAPI::fromJsonValue(m_string_parameters, json[QString("StringParameters")]);
    m_string_parameters_isSet = !json[QString("StringParameters")].isNull() && m_string_parameters_isValid;

    m_integer_parameters_isValid = ::OpenAPI::fromJsonValue(m_integer_parameters, json[QString("IntegerParameters")]);
    m_integer_parameters_isSet = !json[QString("IntegerParameters")].isNull() && m_integer_parameters_isValid;

    m_decimal_parameters_isValid = ::OpenAPI::fromJsonValue(m_decimal_parameters, json[QString("DecimalParameters")]);
    m_decimal_parameters_isSet = !json[QString("DecimalParameters")].isNull() && m_decimal_parameters_isValid;

    m_date_time_parameters_isValid = ::OpenAPI::fromJsonValue(m_date_time_parameters, json[QString("DateTimeParameters")]);
    m_date_time_parameters_isSet = !json[QString("DateTimeParameters")].isNull() && m_date_time_parameters_isValid;
}

QString OAICreateAnalysisRequest_Parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnalysisRequest_Parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_string_parameters.isSet()) {
        obj.insert(QString("StringParameters"), ::OpenAPI::toJsonValue(m_string_parameters));
    }
    if (m_integer_parameters.isSet()) {
        obj.insert(QString("IntegerParameters"), ::OpenAPI::toJsonValue(m_integer_parameters));
    }
    if (m_decimal_parameters.isSet()) {
        obj.insert(QString("DecimalParameters"), ::OpenAPI::toJsonValue(m_decimal_parameters));
    }
    if (m_date_time_parameters.isSet()) {
        obj.insert(QString("DateTimeParameters"), ::OpenAPI::toJsonValue(m_date_time_parameters));
    }
    return obj;
}

QList OAICreateAnalysisRequest_Parameters::getStringParameters() const {
    return m_string_parameters;
}
void OAICreateAnalysisRequest_Parameters::setStringParameters(const QList &string_parameters) {
    m_string_parameters = string_parameters;
    m_string_parameters_isSet = true;
}

bool OAICreateAnalysisRequest_Parameters::is_string_parameters_Set() const{
    return m_string_parameters_isSet;
}

bool OAICreateAnalysisRequest_Parameters::is_string_parameters_Valid() const{
    return m_string_parameters_isValid;
}

QList OAICreateAnalysisRequest_Parameters::getIntegerParameters() const {
    return m_integer_parameters;
}
void OAICreateAnalysisRequest_Parameters::setIntegerParameters(const QList &integer_parameters) {
    m_integer_parameters = integer_parameters;
    m_integer_parameters_isSet = true;
}

bool OAICreateAnalysisRequest_Parameters::is_integer_parameters_Set() const{
    return m_integer_parameters_isSet;
}

bool OAICreateAnalysisRequest_Parameters::is_integer_parameters_Valid() const{
    return m_integer_parameters_isValid;
}

QList OAICreateAnalysisRequest_Parameters::getDecimalParameters() const {
    return m_decimal_parameters;
}
void OAICreateAnalysisRequest_Parameters::setDecimalParameters(const QList &decimal_parameters) {
    m_decimal_parameters = decimal_parameters;
    m_decimal_parameters_isSet = true;
}

bool OAICreateAnalysisRequest_Parameters::is_decimal_parameters_Set() const{
    return m_decimal_parameters_isSet;
}

bool OAICreateAnalysisRequest_Parameters::is_decimal_parameters_Valid() const{
    return m_decimal_parameters_isValid;
}

QList OAICreateAnalysisRequest_Parameters::getDateTimeParameters() const {
    return m_date_time_parameters;
}
void OAICreateAnalysisRequest_Parameters::setDateTimeParameters(const QList &date_time_parameters) {
    m_date_time_parameters = date_time_parameters;
    m_date_time_parameters_isSet = true;
}

bool OAICreateAnalysisRequest_Parameters::is_date_time_parameters_Set() const{
    return m_date_time_parameters_isSet;
}

bool OAICreateAnalysisRequest_Parameters::is_date_time_parameters_Valid() const{
    return m_date_time_parameters_isValid;
}

bool OAICreateAnalysisRequest_Parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnalysisRequest_Parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
