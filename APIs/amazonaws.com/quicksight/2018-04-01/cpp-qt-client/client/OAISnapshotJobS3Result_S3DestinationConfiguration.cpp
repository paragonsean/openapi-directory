/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotJobS3Result_S3DestinationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotJobS3Result_S3DestinationConfiguration::OAISnapshotJobS3Result_S3DestinationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotJobS3Result_S3DestinationConfiguration::OAISnapshotJobS3Result_S3DestinationConfiguration() {
    this->initializeModel();
}

OAISnapshotJobS3Result_S3DestinationConfiguration::~OAISnapshotJobS3Result_S3DestinationConfiguration() {}

void OAISnapshotJobS3Result_S3DestinationConfiguration::initializeModel() {

    m_bucket_configuration_isSet = false;
    m_bucket_configuration_isValid = false;
}

void OAISnapshotJobS3Result_S3DestinationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotJobS3Result_S3DestinationConfiguration::fromJsonObject(QJsonObject json) {

    m_bucket_configuration_isValid = ::OpenAPI::fromJsonValue(m_bucket_configuration, json[QString("BucketConfiguration")]);
    m_bucket_configuration_isSet = !json[QString("BucketConfiguration")].isNull() && m_bucket_configuration_isValid;
}

QString OAISnapshotJobS3Result_S3DestinationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotJobS3Result_S3DestinationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_configuration.isSet()) {
        obj.insert(QString("BucketConfiguration"), ::OpenAPI::toJsonValue(m_bucket_configuration));
    }
    return obj;
}

OAISnapshotS3DestinationConfiguration_BucketConfiguration OAISnapshotJobS3Result_S3DestinationConfiguration::getBucketConfiguration() const {
    return m_bucket_configuration;
}
void OAISnapshotJobS3Result_S3DestinationConfiguration::setBucketConfiguration(const OAISnapshotS3DestinationConfiguration_BucketConfiguration &bucket_configuration) {
    m_bucket_configuration = bucket_configuration;
    m_bucket_configuration_isSet = true;
}

bool OAISnapshotJobS3Result_S3DestinationConfiguration::is_bucket_configuration_Set() const{
    return m_bucket_configuration_isSet;
}

bool OAISnapshotJobS3Result_S3DestinationConfiguration::is_bucket_configuration_Valid() const{
    return m_bucket_configuration_isValid;
}

bool OAISnapshotJobS3Result_S3DestinationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotJobS3Result_S3DestinationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
