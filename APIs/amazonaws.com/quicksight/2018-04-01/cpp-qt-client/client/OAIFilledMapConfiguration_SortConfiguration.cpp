/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilledMapConfiguration_SortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilledMapConfiguration_SortConfiguration::OAIFilledMapConfiguration_SortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilledMapConfiguration_SortConfiguration::OAIFilledMapConfiguration_SortConfiguration() {
    this->initializeModel();
}

OAIFilledMapConfiguration_SortConfiguration::~OAIFilledMapConfiguration_SortConfiguration() {}

void OAIFilledMapConfiguration_SortConfiguration::initializeModel() {

    m_category_sort_isSet = false;
    m_category_sort_isValid = false;
}

void OAIFilledMapConfiguration_SortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilledMapConfiguration_SortConfiguration::fromJsonObject(QJsonObject json) {

    m_category_sort_isValid = ::OpenAPI::fromJsonValue(m_category_sort, json[QString("CategorySort")]);
    m_category_sort_isSet = !json[QString("CategorySort")].isNull() && m_category_sort_isValid;
}

QString OAIFilledMapConfiguration_SortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilledMapConfiguration_SortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_category_sort.isSet()) {
        obj.insert(QString("CategorySort"), ::OpenAPI::toJsonValue(m_category_sort));
    }
    return obj;
}

QList OAIFilledMapConfiguration_SortConfiguration::getCategorySort() const {
    return m_category_sort;
}
void OAIFilledMapConfiguration_SortConfiguration::setCategorySort(const QList &category_sort) {
    m_category_sort = category_sort;
    m_category_sort_isSet = true;
}

bool OAIFilledMapConfiguration_SortConfiguration::is_category_sort_Set() const{
    return m_category_sort_isSet;
}

bool OAIFilledMapConfiguration_SortConfiguration::is_category_sort_Valid() const{
    return m_category_sort_isValid;
}

bool OAIFilledMapConfiguration_SortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilledMapConfiguration_SortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
