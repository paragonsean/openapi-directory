/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableOptions_RowAlternateColorOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableOptions_RowAlternateColorOptions::OAIPivotTableOptions_RowAlternateColorOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableOptions_RowAlternateColorOptions::OAIPivotTableOptions_RowAlternateColorOptions() {
    this->initializeModel();
}

OAIPivotTableOptions_RowAlternateColorOptions::~OAIPivotTableOptions_RowAlternateColorOptions() {}

void OAIPivotTableOptions_RowAlternateColorOptions::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_row_alternate_colors_isSet = false;
    m_row_alternate_colors_isValid = false;
}

void OAIPivotTableOptions_RowAlternateColorOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableOptions_RowAlternateColorOptions::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_row_alternate_colors_isValid = ::OpenAPI::fromJsonValue(m_row_alternate_colors, json[QString("RowAlternateColors")]);
    m_row_alternate_colors_isSet = !json[QString("RowAlternateColors")].isNull() && m_row_alternate_colors_isValid;
}

QString OAIPivotTableOptions_RowAlternateColorOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableOptions_RowAlternateColorOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_row_alternate_colors.isSet()) {
        obj.insert(QString("RowAlternateColors"), ::OpenAPI::toJsonValue(m_row_alternate_colors));
    }
    return obj;
}

OAIWidgetStatus OAIPivotTableOptions_RowAlternateColorOptions::getStatus() const {
    return m_status;
}
void OAIPivotTableOptions_RowAlternateColorOptions::setStatus(const OAIWidgetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPivotTableOptions_RowAlternateColorOptions::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPivotTableOptions_RowAlternateColorOptions::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIPivotTableOptions_RowAlternateColorOptions::getRowAlternateColors() const {
    return m_row_alternate_colors;
}
void OAIPivotTableOptions_RowAlternateColorOptions::setRowAlternateColors(const QList &row_alternate_colors) {
    m_row_alternate_colors = row_alternate_colors;
    m_row_alternate_colors_isSet = true;
}

bool OAIPivotTableOptions_RowAlternateColorOptions::is_row_alternate_colors_Set() const{
    return m_row_alternate_colors_isSet;
}

bool OAIPivotTableOptions_RowAlternateColorOptions::is_row_alternate_colors_Valid() const{
    return m_row_alternate_colors_isValid;
}

bool OAIPivotTableOptions_RowAlternateColorOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_alternate_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableOptions_RowAlternateColorOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
