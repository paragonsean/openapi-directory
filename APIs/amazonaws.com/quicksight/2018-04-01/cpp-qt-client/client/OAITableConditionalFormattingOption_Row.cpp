/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableConditionalFormattingOption_Row.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableConditionalFormattingOption_Row::OAITableConditionalFormattingOption_Row(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableConditionalFormattingOption_Row::OAITableConditionalFormattingOption_Row() {
    this->initializeModel();
}

OAITableConditionalFormattingOption_Row::~OAITableConditionalFormattingOption_Row() {}

void OAITableConditionalFormattingOption_Row::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;
}

void OAITableConditionalFormattingOption_Row::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableConditionalFormattingOption_Row::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("TextColor")]);
    m_text_color_isSet = !json[QString("TextColor")].isNull() && m_text_color_isValid;
}

QString OAITableConditionalFormattingOption_Row::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableConditionalFormattingOption_Row::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_text_color.isSet()) {
        obj.insert(QString("TextColor"), ::OpenAPI::toJsonValue(m_text_color));
    }
    return obj;
}

OAITableRowConditionalFormatting_BackgroundColor OAITableConditionalFormattingOption_Row::getBackgroundColor() const {
    return m_background_color;
}
void OAITableConditionalFormattingOption_Row::setBackgroundColor(const OAITableRowConditionalFormatting_BackgroundColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAITableConditionalFormattingOption_Row::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAITableConditionalFormattingOption_Row::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAITableRowConditionalFormatting_TextColor OAITableConditionalFormattingOption_Row::getTextColor() const {
    return m_text_color;
}
void OAITableConditionalFormattingOption_Row::setTextColor(const OAITableRowConditionalFormatting_TextColor &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAITableConditionalFormattingOption_Row::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAITableConditionalFormattingOption_Row::is_text_color_Valid() const{
    return m_text_color_isValid;
}

bool OAITableConditionalFormattingOption_Row::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableConditionalFormattingOption_Row::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
