/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeAggregationFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeAggregationFunction::OAIAttributeAggregationFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeAggregationFunction::OAIAttributeAggregationFunction() {
    this->initializeModel();
}

OAIAttributeAggregationFunction::~OAIAttributeAggregationFunction() {}

void OAIAttributeAggregationFunction::initializeModel() {

    m_simple_attribute_aggregation_isSet = false;
    m_simple_attribute_aggregation_isValid = false;

    m_value_for_multiple_values_isSet = false;
    m_value_for_multiple_values_isValid = false;
}

void OAIAttributeAggregationFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeAggregationFunction::fromJsonObject(QJsonObject json) {

    m_simple_attribute_aggregation_isValid = ::OpenAPI::fromJsonValue(m_simple_attribute_aggregation, json[QString("SimpleAttributeAggregation")]);
    m_simple_attribute_aggregation_isSet = !json[QString("SimpleAttributeAggregation")].isNull() && m_simple_attribute_aggregation_isValid;

    m_value_for_multiple_values_isValid = ::OpenAPI::fromJsonValue(m_value_for_multiple_values, json[QString("ValueForMultipleValues")]);
    m_value_for_multiple_values_isSet = !json[QString("ValueForMultipleValues")].isNull() && m_value_for_multiple_values_isValid;
}

QString OAIAttributeAggregationFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeAggregationFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_simple_attribute_aggregation.isSet()) {
        obj.insert(QString("SimpleAttributeAggregation"), ::OpenAPI::toJsonValue(m_simple_attribute_aggregation));
    }
    if (m_value_for_multiple_values_isSet) {
        obj.insert(QString("ValueForMultipleValues"), ::OpenAPI::toJsonValue(m_value_for_multiple_values));
    }
    return obj;
}

OAISimpleAttributeAggregationFunction OAIAttributeAggregationFunction::getSimpleAttributeAggregation() const {
    return m_simple_attribute_aggregation;
}
void OAIAttributeAggregationFunction::setSimpleAttributeAggregation(const OAISimpleAttributeAggregationFunction &simple_attribute_aggregation) {
    m_simple_attribute_aggregation = simple_attribute_aggregation;
    m_simple_attribute_aggregation_isSet = true;
}

bool OAIAttributeAggregationFunction::is_simple_attribute_aggregation_Set() const{
    return m_simple_attribute_aggregation_isSet;
}

bool OAIAttributeAggregationFunction::is_simple_attribute_aggregation_Valid() const{
    return m_simple_attribute_aggregation_isValid;
}

QString OAIAttributeAggregationFunction::getValueForMultipleValues() const {
    return m_value_for_multiple_values;
}
void OAIAttributeAggregationFunction::setValueForMultipleValues(const QString &value_for_multiple_values) {
    m_value_for_multiple_values = value_for_multiple_values;
    m_value_for_multiple_values_isSet = true;
}

bool OAIAttributeAggregationFunction::is_value_for_multiple_values_Set() const{
    return m_value_for_multiple_values_isSet;
}

bool OAIAttributeAggregationFunction::is_value_for_multiple_values_Valid() const{
    return m_value_for_multiple_values_isValid;
}

bool OAIAttributeAggregationFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_simple_attribute_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_for_multiple_values_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeAggregationFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
