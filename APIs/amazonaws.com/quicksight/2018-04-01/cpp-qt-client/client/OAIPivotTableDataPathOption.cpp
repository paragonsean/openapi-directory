/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableDataPathOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableDataPathOption::OAIPivotTableDataPathOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableDataPathOption::OAIPivotTableDataPathOption() {
    this->initializeModel();
}

OAIPivotTableDataPathOption::~OAIPivotTableDataPathOption() {}

void OAIPivotTableDataPathOption::initializeModel() {

    m_data_path_list_isSet = false;
    m_data_path_list_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIPivotTableDataPathOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableDataPathOption::fromJsonObject(QJsonObject json) {

    m_data_path_list_isValid = ::OpenAPI::fromJsonValue(m_data_path_list, json[QString("DataPathList")]);
    m_data_path_list_isSet = !json[QString("DataPathList")].isNull() && m_data_path_list_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAIPivotTableDataPathOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableDataPathOption::asJsonObject() const {
    QJsonObject obj;
    if (m_data_path_list.isSet()) {
        obj.insert(QString("DataPathList"), ::OpenAPI::toJsonValue(m_data_path_list));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList OAIPivotTableDataPathOption::getDataPathList() const {
    return m_data_path_list;
}
void OAIPivotTableDataPathOption::setDataPathList(const QList &data_path_list) {
    m_data_path_list = data_path_list;
    m_data_path_list_isSet = true;
}

bool OAIPivotTableDataPathOption::is_data_path_list_Set() const{
    return m_data_path_list_isSet;
}

bool OAIPivotTableDataPathOption::is_data_path_list_Valid() const{
    return m_data_path_list_isValid;
}

QString OAIPivotTableDataPathOption::getWidth() const {
    return m_width;
}
void OAIPivotTableDataPathOption::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIPivotTableDataPathOption::is_width_Set() const{
    return m_width_isSet;
}

bool OAIPivotTableDataPathOption::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIPivotTableDataPathOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_path_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableDataPathOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_path_list_isValid && true;
}

} // namespace OpenAPI
