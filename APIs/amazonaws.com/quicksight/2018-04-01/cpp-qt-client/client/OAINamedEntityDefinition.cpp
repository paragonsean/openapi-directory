/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamedEntityDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamedEntityDefinition::OAINamedEntityDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamedEntityDefinition::OAINamedEntityDefinition() {
    this->initializeModel();
}

OAINamedEntityDefinition::~OAINamedEntityDefinition() {}

void OAINamedEntityDefinition::initializeModel() {

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_property_name_isSet = false;
    m_property_name_isValid = false;

    m_property_role_isSet = false;
    m_property_role_isValid = false;

    m_property_usage_isSet = false;
    m_property_usage_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;
}

void OAINamedEntityDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamedEntityDefinition::fromJsonObject(QJsonObject json) {

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("FieldName")]);
    m_field_name_isSet = !json[QString("FieldName")].isNull() && m_field_name_isValid;

    m_property_name_isValid = ::OpenAPI::fromJsonValue(m_property_name, json[QString("PropertyName")]);
    m_property_name_isSet = !json[QString("PropertyName")].isNull() && m_property_name_isValid;

    m_property_role_isValid = ::OpenAPI::fromJsonValue(m_property_role, json[QString("PropertyRole")]);
    m_property_role_isSet = !json[QString("PropertyRole")].isNull() && m_property_role_isValid;

    m_property_usage_isValid = ::OpenAPI::fromJsonValue(m_property_usage, json[QString("PropertyUsage")]);
    m_property_usage_isSet = !json[QString("PropertyUsage")].isNull() && m_property_usage_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("Metric")]);
    m_metric_isSet = !json[QString("Metric")].isNull() && m_metric_isValid;
}

QString OAINamedEntityDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamedEntityDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_field_name_isSet) {
        obj.insert(QString("FieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_property_name_isSet) {
        obj.insert(QString("PropertyName"), ::OpenAPI::toJsonValue(m_property_name));
    }
    if (m_property_role.isSet()) {
        obj.insert(QString("PropertyRole"), ::OpenAPI::toJsonValue(m_property_role));
    }
    if (m_property_usage.isSet()) {
        obj.insert(QString("PropertyUsage"), ::OpenAPI::toJsonValue(m_property_usage));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("Metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    return obj;
}

QString OAINamedEntityDefinition::getFieldName() const {
    return m_field_name;
}
void OAINamedEntityDefinition::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAINamedEntityDefinition::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAINamedEntityDefinition::is_field_name_Valid() const{
    return m_field_name_isValid;
}

QString OAINamedEntityDefinition::getPropertyName() const {
    return m_property_name;
}
void OAINamedEntityDefinition::setPropertyName(const QString &property_name) {
    m_property_name = property_name;
    m_property_name_isSet = true;
}

bool OAINamedEntityDefinition::is_property_name_Set() const{
    return m_property_name_isSet;
}

bool OAINamedEntityDefinition::is_property_name_Valid() const{
    return m_property_name_isValid;
}

OAIPropertyRole OAINamedEntityDefinition::getPropertyRole() const {
    return m_property_role;
}
void OAINamedEntityDefinition::setPropertyRole(const OAIPropertyRole &property_role) {
    m_property_role = property_role;
    m_property_role_isSet = true;
}

bool OAINamedEntityDefinition::is_property_role_Set() const{
    return m_property_role_isSet;
}

bool OAINamedEntityDefinition::is_property_role_Valid() const{
    return m_property_role_isValid;
}

OAIPropertyUsage OAINamedEntityDefinition::getPropertyUsage() const {
    return m_property_usage;
}
void OAINamedEntityDefinition::setPropertyUsage(const OAIPropertyUsage &property_usage) {
    m_property_usage = property_usage;
    m_property_usage_isSet = true;
}

bool OAINamedEntityDefinition::is_property_usage_Set() const{
    return m_property_usage_isSet;
}

bool OAINamedEntityDefinition::is_property_usage_Valid() const{
    return m_property_usage_isValid;
}

OAINamedEntityDefinition_Metric OAINamedEntityDefinition::getMetric() const {
    return m_metric;
}
void OAINamedEntityDefinition::setMetric(const OAINamedEntityDefinition_Metric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAINamedEntityDefinition::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAINamedEntityDefinition::is_metric_Valid() const{
    return m_metric_isValid;
}

bool OAINamedEntityDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamedEntityDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
