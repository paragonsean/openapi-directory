/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMariaDbParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMariaDbParameters::OAIMariaDbParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMariaDbParameters::OAIMariaDbParameters() {
    this->initializeModel();
}

OAIMariaDbParameters::~OAIMariaDbParameters() {}

void OAIMariaDbParameters::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;
}

void OAIMariaDbParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMariaDbParameters::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("Host")]);
    m_host_isSet = !json[QString("Host")].isNull() && m_host_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;
}

QString OAIMariaDbParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMariaDbParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("Host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    return obj;
}

QString OAIMariaDbParameters::getHost() const {
    return m_host;
}
void OAIMariaDbParameters::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIMariaDbParameters::is_host_Set() const{
    return m_host_isSet;
}

bool OAIMariaDbParameters::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAIMariaDbParameters::getPort() const {
    return m_port;
}
void OAIMariaDbParameters::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIMariaDbParameters::is_port_Set() const{
    return m_port_isSet;
}

bool OAIMariaDbParameters::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIMariaDbParameters::getDatabase() const {
    return m_database;
}
void OAIMariaDbParameters::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIMariaDbParameters::is_database_Set() const{
    return m_database_isSet;
}

bool OAIMariaDbParameters::is_database_Valid() const{
    return m_database_isValid;
}

bool OAIMariaDbParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMariaDbParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_isValid && m_port_isValid && m_database_isValid && true;
}

} // namespace OpenAPI
