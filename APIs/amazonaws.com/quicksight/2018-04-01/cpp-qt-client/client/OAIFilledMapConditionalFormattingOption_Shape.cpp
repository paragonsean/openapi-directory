/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilledMapConditionalFormattingOption_Shape.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilledMapConditionalFormattingOption_Shape::OAIFilledMapConditionalFormattingOption_Shape(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilledMapConditionalFormattingOption_Shape::OAIFilledMapConditionalFormattingOption_Shape() {
    this->initializeModel();
}

OAIFilledMapConditionalFormattingOption_Shape::~OAIFilledMapConditionalFormattingOption_Shape() {}

void OAIFilledMapConditionalFormattingOption_Shape::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAIFilledMapConditionalFormattingOption_Shape::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilledMapConditionalFormattingOption_Shape::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;
}

QString OAIFilledMapConditionalFormattingOption_Shape::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilledMapConditionalFormattingOption_Shape::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

QString OAIFilledMapConditionalFormattingOption_Shape::getFieldId() const {
    return m_field_id;
}
void OAIFilledMapConditionalFormattingOption_Shape::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIFilledMapConditionalFormattingOption_Shape::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIFilledMapConditionalFormattingOption_Shape::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIFilledMapShapeConditionalFormatting_Format OAIFilledMapConditionalFormattingOption_Shape::getFormat() const {
    return m_format;
}
void OAIFilledMapConditionalFormattingOption_Shape::setFormat(const OAIFilledMapShapeConditionalFormatting_Format &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIFilledMapConditionalFormattingOption_Shape::is_format_Set() const{
    return m_format_isSet;
}

bool OAIFilledMapConditionalFormattingOption_Shape::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIFilledMapConditionalFormattingOption_Shape::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilledMapConditionalFormattingOption_Shape::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && true;
}

} // namespace OpenAPI
