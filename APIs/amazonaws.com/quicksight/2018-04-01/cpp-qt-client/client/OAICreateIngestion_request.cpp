/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIngestion_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIngestion_request::OAICreateIngestion_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIngestion_request::OAICreateIngestion_request() {
    this->initializeModel();
}

OAICreateIngestion_request::~OAICreateIngestion_request() {}

void OAICreateIngestion_request::initializeModel() {

    m_ingestion_type_isSet = false;
    m_ingestion_type_isValid = false;
}

void OAICreateIngestion_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIngestion_request::fromJsonObject(QJsonObject json) {

    m_ingestion_type_isValid = ::OpenAPI::fromJsonValue(m_ingestion_type, json[QString("IngestionType")]);
    m_ingestion_type_isSet = !json[QString("IngestionType")].isNull() && m_ingestion_type_isValid;
}

QString OAICreateIngestion_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIngestion_request::asJsonObject() const {
    QJsonObject obj;
    if (m_ingestion_type_isSet) {
        obj.insert(QString("IngestionType"), ::OpenAPI::toJsonValue(m_ingestion_type));
    }
    return obj;
}

QString OAICreateIngestion_request::getIngestionType() const {
    return m_ingestion_type;
}
void OAICreateIngestion_request::setIngestionType(const QString &ingestion_type) {
    m_ingestion_type = ingestion_type;
    m_ingestion_type_isSet = true;
}

bool OAICreateIngestion_request::is_ingestion_type_Set() const{
    return m_ingestion_type_isSet;
}

bool OAICreateIngestion_request::is_ingestion_type_Valid() const{
    return m_ingestion_type_isValid;
}

bool OAICreateIngestion_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingestion_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIngestion_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
