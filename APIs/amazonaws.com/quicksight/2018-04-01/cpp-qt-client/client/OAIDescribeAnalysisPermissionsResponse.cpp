/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAnalysisPermissionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAnalysisPermissionsResponse::OAIDescribeAnalysisPermissionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAnalysisPermissionsResponse::OAIDescribeAnalysisPermissionsResponse() {
    this->initializeModel();
}

OAIDescribeAnalysisPermissionsResponse::~OAIDescribeAnalysisPermissionsResponse() {}

void OAIDescribeAnalysisPermissionsResponse::initializeModel() {

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_analysis_arn_isSet = false;
    m_analysis_arn_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDescribeAnalysisPermissionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAnalysisPermissionsResponse::fromJsonObject(QJsonObject json) {

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_analysis_arn_isValid = ::OpenAPI::fromJsonValue(m_analysis_arn, json[QString("AnalysisArn")]);
    m_analysis_arn_isSet = !json[QString("AnalysisArn")].isNull() && m_analysis_arn_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIDescribeAnalysisPermissionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAnalysisPermissionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_analysis_arn_isSet) {
        obj.insert(QString("AnalysisArn"), ::OpenAPI::toJsonValue(m_analysis_arn));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIDescribeAnalysisPermissionsResponse::getAnalysisId() const {
    return m_analysis_id;
}
void OAIDescribeAnalysisPermissionsResponse::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIDescribeAnalysisPermissionsResponse::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIDescribeAnalysisPermissionsResponse::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

QString OAIDescribeAnalysisPermissionsResponse::getAnalysisArn() const {
    return m_analysis_arn;
}
void OAIDescribeAnalysisPermissionsResponse::setAnalysisArn(const QString &analysis_arn) {
    m_analysis_arn = analysis_arn;
    m_analysis_arn_isSet = true;
}

bool OAIDescribeAnalysisPermissionsResponse::is_analysis_arn_Set() const{
    return m_analysis_arn_isSet;
}

bool OAIDescribeAnalysisPermissionsResponse::is_analysis_arn_Valid() const{
    return m_analysis_arn_isValid;
}

QList OAIDescribeAnalysisPermissionsResponse::getPermissions() const {
    return m_permissions;
}
void OAIDescribeAnalysisPermissionsResponse::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIDescribeAnalysisPermissionsResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIDescribeAnalysisPermissionsResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

qint32 OAIDescribeAnalysisPermissionsResponse::getStatus() const {
    return m_status;
}
void OAIDescribeAnalysisPermissionsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAnalysisPermissionsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAnalysisPermissionsResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeAnalysisPermissionsResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeAnalysisPermissionsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeAnalysisPermissionsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeAnalysisPermissionsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDescribeAnalysisPermissionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAnalysisPermissionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
