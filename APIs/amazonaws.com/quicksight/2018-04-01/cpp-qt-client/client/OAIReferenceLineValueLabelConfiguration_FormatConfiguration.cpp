/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLineValueLabelConfiguration_FormatConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLineValueLabelConfiguration_FormatConfiguration::OAIReferenceLineValueLabelConfiguration_FormatConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLineValueLabelConfiguration_FormatConfiguration::OAIReferenceLineValueLabelConfiguration_FormatConfiguration() {
    this->initializeModel();
}

OAIReferenceLineValueLabelConfiguration_FormatConfiguration::~OAIReferenceLineValueLabelConfiguration_FormatConfiguration() {}

void OAIReferenceLineValueLabelConfiguration_FormatConfiguration::initializeModel() {

    m_number_display_format_configuration_isSet = false;
    m_number_display_format_configuration_isValid = false;

    m_currency_display_format_configuration_isSet = false;
    m_currency_display_format_configuration_isValid = false;

    m_percentage_display_format_configuration_isSet = false;
    m_percentage_display_format_configuration_isValid = false;
}

void OAIReferenceLineValueLabelConfiguration_FormatConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLineValueLabelConfiguration_FormatConfiguration::fromJsonObject(QJsonObject json) {

    m_number_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_number_display_format_configuration, json[QString("NumberDisplayFormatConfiguration")]);
    m_number_display_format_configuration_isSet = !json[QString("NumberDisplayFormatConfiguration")].isNull() && m_number_display_format_configuration_isValid;

    m_currency_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_currency_display_format_configuration, json[QString("CurrencyDisplayFormatConfiguration")]);
    m_currency_display_format_configuration_isSet = !json[QString("CurrencyDisplayFormatConfiguration")].isNull() && m_currency_display_format_configuration_isValid;

    m_percentage_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_percentage_display_format_configuration, json[QString("PercentageDisplayFormatConfiguration")]);
    m_percentage_display_format_configuration_isSet = !json[QString("PercentageDisplayFormatConfiguration")].isNull() && m_percentage_display_format_configuration_isValid;
}

QString OAIReferenceLineValueLabelConfiguration_FormatConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLineValueLabelConfiguration_FormatConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_number_display_format_configuration.isSet()) {
        obj.insert(QString("NumberDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_number_display_format_configuration));
    }
    if (m_currency_display_format_configuration.isSet()) {
        obj.insert(QString("CurrencyDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_currency_display_format_configuration));
    }
    if (m_percentage_display_format_configuration.isSet()) {
        obj.insert(QString("PercentageDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_percentage_display_format_configuration));
    }
    return obj;
}

OAINumericFormatConfiguration_NumberDisplayFormatConfiguration OAIReferenceLineValueLabelConfiguration_FormatConfiguration::getNumberDisplayFormatConfiguration() const {
    return m_number_display_format_configuration;
}
void OAIReferenceLineValueLabelConfiguration_FormatConfiguration::setNumberDisplayFormatConfiguration(const OAINumericFormatConfiguration_NumberDisplayFormatConfiguration &number_display_format_configuration) {
    m_number_display_format_configuration = number_display_format_configuration;
    m_number_display_format_configuration_isSet = true;
}

bool OAIReferenceLineValueLabelConfiguration_FormatConfiguration::is_number_display_format_configuration_Set() const{
    return m_number_display_format_configuration_isSet;
}

bool OAIReferenceLineValueLabelConfiguration_FormatConfiguration::is_number_display_format_configuration_Valid() const{
    return m_number_display_format_configuration_isValid;
}

OAINumericFormatConfiguration_CurrencyDisplayFormatConfiguration OAIReferenceLineValueLabelConfiguration_FormatConfiguration::getCurrencyDisplayFormatConfiguration() const {
    return m_currency_display_format_configuration;
}
void OAIReferenceLineValueLabelConfiguration_FormatConfiguration::setCurrencyDisplayFormatConfiguration(const OAINumericFormatConfiguration_CurrencyDisplayFormatConfiguration &currency_display_format_configuration) {
    m_currency_display_format_configuration = currency_display_format_configuration;
    m_currency_display_format_configuration_isSet = true;
}

bool OAIReferenceLineValueLabelConfiguration_FormatConfiguration::is_currency_display_format_configuration_Set() const{
    return m_currency_display_format_configuration_isSet;
}

bool OAIReferenceLineValueLabelConfiguration_FormatConfiguration::is_currency_display_format_configuration_Valid() const{
    return m_currency_display_format_configuration_isValid;
}

OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration OAIReferenceLineValueLabelConfiguration_FormatConfiguration::getPercentageDisplayFormatConfiguration() const {
    return m_percentage_display_format_configuration;
}
void OAIReferenceLineValueLabelConfiguration_FormatConfiguration::setPercentageDisplayFormatConfiguration(const OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration &percentage_display_format_configuration) {
    m_percentage_display_format_configuration = percentage_display_format_configuration;
    m_percentage_display_format_configuration_isSet = true;
}

bool OAIReferenceLineValueLabelConfiguration_FormatConfiguration::is_percentage_display_format_configuration_Set() const{
    return m_percentage_display_format_configuration_isSet;
}

bool OAIReferenceLineValueLabelConfiguration_FormatConfiguration::is_percentage_display_format_configuration_Valid() const{
    return m_percentage_display_format_configuration_isValid;
}

bool OAIReferenceLineValueLabelConfiguration_FormatConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLineValueLabelConfiguration_FormatConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
