/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisSourceTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisSourceTemplate::OAIAnalysisSourceTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisSourceTemplate::OAIAnalysisSourceTemplate() {
    this->initializeModel();
}

OAIAnalysisSourceTemplate::~OAIAnalysisSourceTemplate() {}

void OAIAnalysisSourceTemplate::initializeModel() {

    m_data_set_references_isSet = false;
    m_data_set_references_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAIAnalysisSourceTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisSourceTemplate::fromJsonObject(QJsonObject json) {

    m_data_set_references_isValid = ::OpenAPI::fromJsonValue(m_data_set_references, json[QString("DataSetReferences")]);
    m_data_set_references_isSet = !json[QString("DataSetReferences")].isNull() && m_data_set_references_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;
}

QString OAIAnalysisSourceTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisSourceTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_references.isSet()) {
        obj.insert(QString("DataSetReferences"), ::OpenAPI::toJsonValue(m_data_set_references));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

QList OAIAnalysisSourceTemplate::getDataSetReferences() const {
    return m_data_set_references;
}
void OAIAnalysisSourceTemplate::setDataSetReferences(const QList &data_set_references) {
    m_data_set_references = data_set_references;
    m_data_set_references_isSet = true;
}

bool OAIAnalysisSourceTemplate::is_data_set_references_Set() const{
    return m_data_set_references_isSet;
}

bool OAIAnalysisSourceTemplate::is_data_set_references_Valid() const{
    return m_data_set_references_isValid;
}

QString OAIAnalysisSourceTemplate::getArn() const {
    return m_arn;
}
void OAIAnalysisSourceTemplate::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAnalysisSourceTemplate::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAnalysisSourceTemplate::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIAnalysisSourceTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_references.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisSourceTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_references_isValid && m_arn_isValid && true;
}

} // namespace OpenAPI
