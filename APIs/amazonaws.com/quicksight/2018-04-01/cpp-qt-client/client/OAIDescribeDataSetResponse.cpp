/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDataSetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDataSetResponse::OAIDescribeDataSetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDataSetResponse::OAIDescribeDataSetResponse() {
    this->initializeModel();
}

OAIDescribeDataSetResponse::~OAIDescribeDataSetResponse() {}

void OAIDescribeDataSetResponse::initializeModel() {

    m_data_set_isSet = false;
    m_data_set_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeDataSetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDataSetResponse::fromJsonObject(QJsonObject json) {

    m_data_set_isValid = ::OpenAPI::fromJsonValue(m_data_set, json[QString("DataSet")]);
    m_data_set_isSet = !json[QString("DataSet")].isNull() && m_data_set_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeDataSetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDataSetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set.isSet()) {
        obj.insert(QString("DataSet"), ::OpenAPI::toJsonValue(m_data_set));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIDescribeDataSetResponse_DataSet OAIDescribeDataSetResponse::getDataSet() const {
    return m_data_set;
}
void OAIDescribeDataSetResponse::setDataSet(const OAIDescribeDataSetResponse_DataSet &data_set) {
    m_data_set = data_set;
    m_data_set_isSet = true;
}

bool OAIDescribeDataSetResponse::is_data_set_Set() const{
    return m_data_set_isSet;
}

bool OAIDescribeDataSetResponse::is_data_set_Valid() const{
    return m_data_set_isValid;
}

QString OAIDescribeDataSetResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeDataSetResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeDataSetResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeDataSetResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeDataSetResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDataSetResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDataSetResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDataSetResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeDataSetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDataSetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
