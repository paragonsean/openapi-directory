/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILongFormatText.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILongFormatText::OAILongFormatText(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILongFormatText::OAILongFormatText() {
    this->initializeModel();
}

OAILongFormatText::~OAILongFormatText() {}

void OAILongFormatText::initializeModel() {

    m_plain_text_isSet = false;
    m_plain_text_isValid = false;

    m_rich_text_isSet = false;
    m_rich_text_isValid = false;
}

void OAILongFormatText::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILongFormatText::fromJsonObject(QJsonObject json) {

    m_plain_text_isValid = ::OpenAPI::fromJsonValue(m_plain_text, json[QString("PlainText")]);
    m_plain_text_isSet = !json[QString("PlainText")].isNull() && m_plain_text_isValid;

    m_rich_text_isValid = ::OpenAPI::fromJsonValue(m_rich_text, json[QString("RichText")]);
    m_rich_text_isSet = !json[QString("RichText")].isNull() && m_rich_text_isValid;
}

QString OAILongFormatText::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILongFormatText::asJsonObject() const {
    QJsonObject obj;
    if (m_plain_text_isSet) {
        obj.insert(QString("PlainText"), ::OpenAPI::toJsonValue(m_plain_text));
    }
    if (m_rich_text_isSet) {
        obj.insert(QString("RichText"), ::OpenAPI::toJsonValue(m_rich_text));
    }
    return obj;
}

QString OAILongFormatText::getPlainText() const {
    return m_plain_text;
}
void OAILongFormatText::setPlainText(const QString &plain_text) {
    m_plain_text = plain_text;
    m_plain_text_isSet = true;
}

bool OAILongFormatText::is_plain_text_Set() const{
    return m_plain_text_isSet;
}

bool OAILongFormatText::is_plain_text_Valid() const{
    return m_plain_text_isValid;
}

QString OAILongFormatText::getRichText() const {
    return m_rich_text;
}
void OAILongFormatText::setRichText(const QString &rich_text) {
    m_rich_text = rich_text;
    m_rich_text_isSet = true;
}

bool OAILongFormatText::is_rich_text_Set() const{
    return m_rich_text_isSet;
}

bool OAILongFormatText::is_rich_text_Valid() const{
    return m_rich_text_isValid;
}

bool OAILongFormatText::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plain_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rich_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILongFormatText::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
