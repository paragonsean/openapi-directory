/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters() {
    this->initializeModel();
}

OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::~OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters() {}

void OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::initializeModel() {

    m_site_base_url_isSet = false;
    m_site_base_url_isValid = false;
}

void OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::fromJsonObject(QJsonObject json) {

    m_site_base_url_isValid = ::OpenAPI::fromJsonValue(m_site_base_url, json[QString("SiteBaseUrl")]);
    m_site_base_url_isSet = !json[QString("SiteBaseUrl")].isNull() && m_site_base_url_isValid;
}

QString OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_site_base_url_isSet) {
        obj.insert(QString("SiteBaseUrl"), ::OpenAPI::toJsonValue(m_site_base_url));
    }
    return obj;
}

QString OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::getSiteBaseUrl() const {
    return m_site_base_url;
}
void OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::setSiteBaseUrl(const QString &site_base_url) {
    m_site_base_url = site_base_url;
    m_site_base_url_isSet = true;
}

bool OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::is_site_base_url_Set() const{
    return m_site_base_url_isSet;
}

bool OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::is_site_base_url_Valid() const{
    return m_site_base_url_isValid;
}

bool OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_site_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_site_base_url_isValid && true;
}

} // namespace OpenAPI
