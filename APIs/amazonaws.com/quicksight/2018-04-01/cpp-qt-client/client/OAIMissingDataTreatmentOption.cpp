/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMissingDataTreatmentOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMissingDataTreatmentOption::OAIMissingDataTreatmentOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMissingDataTreatmentOption::OAIMissingDataTreatmentOption() {
    this->initializeModel();
}

OAIMissingDataTreatmentOption::~OAIMissingDataTreatmentOption() {}

void OAIMissingDataTreatmentOption::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMissingDataTreatmentOption::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMissingDataTreatmentOption::fromJson(QString jsonString) {
    
    if ( jsonString.compare("INTERPOLATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMissingDataTreatmentOption::INTERPOLATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHOW_AS_ZERO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMissingDataTreatmentOption::SHOW_AS_ZERO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHOW_AS_BLANK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMissingDataTreatmentOption::SHOW_AS_BLANK;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMissingDataTreatmentOption::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMissingDataTreatmentOption::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMissingDataTreatmentOption::INTERPOLATE:
            val = "INTERPOLATE";
            break;
        case eOAIMissingDataTreatmentOption::SHOW_AS_ZERO:
            val = "SHOW_AS_ZERO";
            break;
        case eOAIMissingDataTreatmentOption::SHOW_AS_BLANK:
            val = "SHOW_AS_BLANK";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMissingDataTreatmentOption::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMissingDataTreatmentOption::eOAIMissingDataTreatmentOption OAIMissingDataTreatmentOption::getValue() const {
    return m_value;
}

void OAIMissingDataTreatmentOption::setValue(const OAIMissingDataTreatmentOption::eOAIMissingDataTreatmentOption& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMissingDataTreatmentOption::isSet() const {
    
    return m_value_isSet;
}

bool OAIMissingDataTreatmentOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
