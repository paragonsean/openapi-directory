/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterGroup::OAIFilterGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterGroup::OAIFilterGroup() {
    this->initializeModel();
}

OAIFilterGroup::~OAIFilterGroup() {}

void OAIFilterGroup::initializeModel() {

    m_filter_group_id_isSet = false;
    m_filter_group_id_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_scope_configuration_isSet = false;
    m_scope_configuration_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_cross_dataset_isSet = false;
    m_cross_dataset_isValid = false;
}

void OAIFilterGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterGroup::fromJsonObject(QJsonObject json) {

    m_filter_group_id_isValid = ::OpenAPI::fromJsonValue(m_filter_group_id, json[QString("FilterGroupId")]);
    m_filter_group_id_isSet = !json[QString("FilterGroupId")].isNull() && m_filter_group_id_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_scope_configuration_isValid = ::OpenAPI::fromJsonValue(m_scope_configuration, json[QString("ScopeConfiguration")]);
    m_scope_configuration_isSet = !json[QString("ScopeConfiguration")].isNull() && m_scope_configuration_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_cross_dataset_isValid = ::OpenAPI::fromJsonValue(m_cross_dataset, json[QString("CrossDataset")]);
    m_cross_dataset_isSet = !json[QString("CrossDataset")].isNull() && m_cross_dataset_isValid;
}

QString OAIFilterGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_group_id_isSet) {
        obj.insert(QString("FilterGroupId"), ::OpenAPI::toJsonValue(m_filter_group_id));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_scope_configuration.isSet()) {
        obj.insert(QString("ScopeConfiguration"), ::OpenAPI::toJsonValue(m_scope_configuration));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_cross_dataset.isSet()) {
        obj.insert(QString("CrossDataset"), ::OpenAPI::toJsonValue(m_cross_dataset));
    }
    return obj;
}

QString OAIFilterGroup::getFilterGroupId() const {
    return m_filter_group_id;
}
void OAIFilterGroup::setFilterGroupId(const QString &filter_group_id) {
    m_filter_group_id = filter_group_id;
    m_filter_group_id_isSet = true;
}

bool OAIFilterGroup::is_filter_group_id_Set() const{
    return m_filter_group_id_isSet;
}

bool OAIFilterGroup::is_filter_group_id_Valid() const{
    return m_filter_group_id_isValid;
}

QList OAIFilterGroup::getFilters() const {
    return m_filters;
}
void OAIFilterGroup::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIFilterGroup::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIFilterGroup::is_filters_Valid() const{
    return m_filters_isValid;
}

OAIFilterGroup_ScopeConfiguration OAIFilterGroup::getScopeConfiguration() const {
    return m_scope_configuration;
}
void OAIFilterGroup::setScopeConfiguration(const OAIFilterGroup_ScopeConfiguration &scope_configuration) {
    m_scope_configuration = scope_configuration;
    m_scope_configuration_isSet = true;
}

bool OAIFilterGroup::is_scope_configuration_Set() const{
    return m_scope_configuration_isSet;
}

bool OAIFilterGroup::is_scope_configuration_Valid() const{
    return m_scope_configuration_isValid;
}

OAIWidgetStatus OAIFilterGroup::getStatus() const {
    return m_status;
}
void OAIFilterGroup::setStatus(const OAIWidgetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFilterGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFilterGroup::is_status_Valid() const{
    return m_status_isValid;
}

OAICrossDatasetTypes OAIFilterGroup::getCrossDataset() const {
    return m_cross_dataset;
}
void OAIFilterGroup::setCrossDataset(const OAICrossDatasetTypes &cross_dataset) {
    m_cross_dataset = cross_dataset;
    m_cross_dataset_isSet = true;
}

bool OAIFilterGroup::is_cross_dataset_Set() const{
    return m_cross_dataset_isSet;
}

bool OAIFilterGroup::is_cross_dataset_Valid() const{
    return m_cross_dataset_isValid;
}

bool OAIFilterGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_group_id_isValid && m_filters_isValid && m_scope_configuration_isValid && m_cross_dataset_isValid && true;
}

} // namespace OpenAPI
