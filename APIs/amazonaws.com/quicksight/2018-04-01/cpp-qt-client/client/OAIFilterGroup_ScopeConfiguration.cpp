/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterGroup_ScopeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterGroup_ScopeConfiguration::OAIFilterGroup_ScopeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterGroup_ScopeConfiguration::OAIFilterGroup_ScopeConfiguration() {
    this->initializeModel();
}

OAIFilterGroup_ScopeConfiguration::~OAIFilterGroup_ScopeConfiguration() {}

void OAIFilterGroup_ScopeConfiguration::initializeModel() {

    m_selected_sheets_isSet = false;
    m_selected_sheets_isValid = false;
}

void OAIFilterGroup_ScopeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterGroup_ScopeConfiguration::fromJsonObject(QJsonObject json) {

    m_selected_sheets_isValid = ::OpenAPI::fromJsonValue(m_selected_sheets, json[QString("SelectedSheets")]);
    m_selected_sheets_isSet = !json[QString("SelectedSheets")].isNull() && m_selected_sheets_isValid;
}

QString OAIFilterGroup_ScopeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterGroup_ScopeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_sheets.isSet()) {
        obj.insert(QString("SelectedSheets"), ::OpenAPI::toJsonValue(m_selected_sheets));
    }
    return obj;
}

OAIFilterScopeConfiguration_SelectedSheets OAIFilterGroup_ScopeConfiguration::getSelectedSheets() const {
    return m_selected_sheets;
}
void OAIFilterGroup_ScopeConfiguration::setSelectedSheets(const OAIFilterScopeConfiguration_SelectedSheets &selected_sheets) {
    m_selected_sheets = selected_sheets;
    m_selected_sheets_isSet = true;
}

bool OAIFilterGroup_ScopeConfiguration::is_selected_sheets_Set() const{
    return m_selected_sheets_isSet;
}

bool OAIFilterGroup_ScopeConfiguration::is_selected_sheets_Valid() const{
    return m_selected_sheets_isValid;
}

bool OAIFilterGroup_ScopeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_sheets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterGroup_ScopeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
