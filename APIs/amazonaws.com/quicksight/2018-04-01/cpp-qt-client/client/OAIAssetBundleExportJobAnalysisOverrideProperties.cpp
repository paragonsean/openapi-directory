/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleExportJobAnalysisOverrideProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleExportJobAnalysisOverrideProperties::OAIAssetBundleExportJobAnalysisOverrideProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleExportJobAnalysisOverrideProperties::OAIAssetBundleExportJobAnalysisOverrideProperties() {
    this->initializeModel();
}

OAIAssetBundleExportJobAnalysisOverrideProperties::~OAIAssetBundleExportJobAnalysisOverrideProperties() {}

void OAIAssetBundleExportJobAnalysisOverrideProperties::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIAssetBundleExportJobAnalysisOverrideProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleExportJobAnalysisOverrideProperties::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;
}

QString OAIAssetBundleExportJobAnalysisOverrideProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleExportJobAnalysisOverrideProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAIAssetBundleExportJobAnalysisOverrideProperties::getArn() const {
    return m_arn;
}
void OAIAssetBundleExportJobAnalysisOverrideProperties::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAssetBundleExportJobAnalysisOverrideProperties::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAssetBundleExportJobAnalysisOverrideProperties::is_arn_Valid() const{
    return m_arn_isValid;
}

QList OAIAssetBundleExportJobAnalysisOverrideProperties::getProperties() const {
    return m_properties;
}
void OAIAssetBundleExportJobAnalysisOverrideProperties::setProperties(const QList &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIAssetBundleExportJobAnalysisOverrideProperties::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIAssetBundleExportJobAnalysisOverrideProperties::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIAssetBundleExportJobAnalysisOverrideProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleExportJobAnalysisOverrideProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_properties_isValid && true;
}

} // namespace OpenAPI
