/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFilter.h
 *
 * &lt;p&gt;With a &lt;code&gt;Filter&lt;/code&gt;, you can remove portions of data from a particular visual or view.&lt;/p&gt; &lt;p&gt;This is a union type structure. For this structure to be valid, only one of the attributes can be defined.&lt;/p&gt;
 */

#ifndef OAIFilter_H
#define OAIFilter_H

#include <QJsonObject>

#include "OAIFilter_CategoryFilter.h"
#include "OAIFilter_NumericEqualityFilter.h"
#include "OAIFilter_NumericRangeFilter.h"
#include "OAIFilter_RelativeDatesFilter.h"
#include "OAIFilter_TimeEqualityFilter.h"
#include "OAIFilter_TimeRangeFilter.h"
#include "OAIFilter_TopBottomFilter.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFilter_CategoryFilter;
class OAIFilter_NumericRangeFilter;
class OAIFilter_NumericEqualityFilter;
class OAIFilter_TimeEqualityFilter;
class OAIFilter_TimeRangeFilter;
class OAIFilter_RelativeDatesFilter;
class OAIFilter_TopBottomFilter;

class OAIFilter : public OAIObject {
public:
    OAIFilter();
    OAIFilter(QString json);
    ~OAIFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFilter_CategoryFilter getCategoryFilter() const;
    void setCategoryFilter(const OAIFilter_CategoryFilter &category_filter);
    bool is_category_filter_Set() const;
    bool is_category_filter_Valid() const;

    OAIFilter_NumericRangeFilter getNumericRangeFilter() const;
    void setNumericRangeFilter(const OAIFilter_NumericRangeFilter &numeric_range_filter);
    bool is_numeric_range_filter_Set() const;
    bool is_numeric_range_filter_Valid() const;

    OAIFilter_NumericEqualityFilter getNumericEqualityFilter() const;
    void setNumericEqualityFilter(const OAIFilter_NumericEqualityFilter &numeric_equality_filter);
    bool is_numeric_equality_filter_Set() const;
    bool is_numeric_equality_filter_Valid() const;

    OAIFilter_TimeEqualityFilter getTimeEqualityFilter() const;
    void setTimeEqualityFilter(const OAIFilter_TimeEqualityFilter &time_equality_filter);
    bool is_time_equality_filter_Set() const;
    bool is_time_equality_filter_Valid() const;

    OAIFilter_TimeRangeFilter getTimeRangeFilter() const;
    void setTimeRangeFilter(const OAIFilter_TimeRangeFilter &time_range_filter);
    bool is_time_range_filter_Set() const;
    bool is_time_range_filter_Valid() const;

    OAIFilter_RelativeDatesFilter getRelativeDatesFilter() const;
    void setRelativeDatesFilter(const OAIFilter_RelativeDatesFilter &relative_dates_filter);
    bool is_relative_dates_filter_Set() const;
    bool is_relative_dates_filter_Valid() const;

    OAIFilter_TopBottomFilter getTopBottomFilter() const;
    void setTopBottomFilter(const OAIFilter_TopBottomFilter &top_bottom_filter);
    bool is_top_bottom_filter_Set() const;
    bool is_top_bottom_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFilter_CategoryFilter m_category_filter;
    bool m_category_filter_isSet;
    bool m_category_filter_isValid;

    OAIFilter_NumericRangeFilter m_numeric_range_filter;
    bool m_numeric_range_filter_isSet;
    bool m_numeric_range_filter_isValid;

    OAIFilter_NumericEqualityFilter m_numeric_equality_filter;
    bool m_numeric_equality_filter_isSet;
    bool m_numeric_equality_filter_isValid;

    OAIFilter_TimeEqualityFilter m_time_equality_filter;
    bool m_time_equality_filter_isSet;
    bool m_time_equality_filter_isValid;

    OAIFilter_TimeRangeFilter m_time_range_filter;
    bool m_time_range_filter_isSet;
    bool m_time_range_filter_isValid;

    OAIFilter_RelativeDatesFilter m_relative_dates_filter;
    bool m_relative_dates_filter_isSet;
    bool m_relative_dates_filter_isValid;

    OAIFilter_TopBottomFilter m_top_bottom_filter;
    bool m_top_bottom_filter_isSet;
    bool m_top_bottom_filter_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFilter)

#endif // OAIFilter_H
