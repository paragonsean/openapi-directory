/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobStatus::OAIAssetBundleImportJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobStatus::OAIAssetBundleImportJobStatus() {
    this->initializeModel();
}

OAIAssetBundleImportJobStatus::~OAIAssetBundleImportJobStatus() {}

void OAIAssetBundleImportJobStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAssetBundleImportJobStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAssetBundleImportJobStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("QUEUED_FOR_IMMEDIATE_EXECUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssetBundleImportJobStatus::QUEUED_FOR_IMMEDIATE_EXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssetBundleImportJobStatus::IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCESSFUL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssetBundleImportJobStatus::SUCCESSFUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssetBundleImportJobStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_ROLLBACK_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssetBundleImportJobStatus::FAILED_ROLLBACK_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_ROLLBACK_COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssetBundleImportJobStatus::FAILED_ROLLBACK_COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_ROLLBACK_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssetBundleImportJobStatus::FAILED_ROLLBACK_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAssetBundleImportJobStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAssetBundleImportJobStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAssetBundleImportJobStatus::QUEUED_FOR_IMMEDIATE_EXECUTION:
            val = "QUEUED_FOR_IMMEDIATE_EXECUTION";
            break;
        case eOAIAssetBundleImportJobStatus::IN_PROGRESS:
            val = "IN_PROGRESS";
            break;
        case eOAIAssetBundleImportJobStatus::SUCCESSFUL:
            val = "SUCCESSFUL";
            break;
        case eOAIAssetBundleImportJobStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIAssetBundleImportJobStatus::FAILED_ROLLBACK_IN_PROGRESS:
            val = "FAILED_ROLLBACK_IN_PROGRESS";
            break;
        case eOAIAssetBundleImportJobStatus::FAILED_ROLLBACK_COMPLETED:
            val = "FAILED_ROLLBACK_COMPLETED";
            break;
        case eOAIAssetBundleImportJobStatus::FAILED_ROLLBACK_ERROR:
            val = "FAILED_ROLLBACK_ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAssetBundleImportJobStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAssetBundleImportJobStatus::eOAIAssetBundleImportJobStatus OAIAssetBundleImportJobStatus::getValue() const {
    return m_value;
}

void OAIAssetBundleImportJobStatus::setValue(const OAIAssetBundleImportJobStatus::eOAIAssetBundleImportJobStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAssetBundleImportJobStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIAssetBundleImportJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
