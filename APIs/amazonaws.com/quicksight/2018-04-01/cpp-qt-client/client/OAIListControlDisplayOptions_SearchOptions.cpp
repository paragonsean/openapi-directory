/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListControlDisplayOptions_SearchOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListControlDisplayOptions_SearchOptions::OAIListControlDisplayOptions_SearchOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListControlDisplayOptions_SearchOptions::OAIListControlDisplayOptions_SearchOptions() {
    this->initializeModel();
}

OAIListControlDisplayOptions_SearchOptions::~OAIListControlDisplayOptions_SearchOptions() {}

void OAIListControlDisplayOptions_SearchOptions::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIListControlDisplayOptions_SearchOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListControlDisplayOptions_SearchOptions::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;
}

QString OAIListControlDisplayOptions_SearchOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListControlDisplayOptions_SearchOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIVisibility OAIListControlDisplayOptions_SearchOptions::getVisibility() const {
    return m_visibility;
}
void OAIListControlDisplayOptions_SearchOptions::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIListControlDisplayOptions_SearchOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIListControlDisplayOptions_SearchOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIListControlDisplayOptions_SearchOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListControlDisplayOptions_SearchOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
