/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayout::OAILayout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayout::OAILayout() {
    this->initializeModel();
}

OAILayout::~OAILayout() {}

void OAILayout::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;
}

void OAILayout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILayout::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;
}

QString OAILayout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILayout::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    return obj;
}

OAILayout_Configuration OAILayout::getConfiguration() const {
    return m_configuration;
}
void OAILayout::setConfiguration(const OAILayout_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAILayout::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAILayout::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAILayout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILayout::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_isValid && true;
}

} // namespace OpenAPI
