/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPivotTableOptions.h
 *
 * The table options for a pivot table visual.
 */

#ifndef OAIPivotTableOptions_H
#define OAIPivotTableOptions_H

#include <QJsonObject>

#include "OAIPivotTableMetricPlacement.h"
#include "OAIPivotTableOptions_CellStyle.h"
#include "OAIPivotTableOptions_ColumnHeaderStyle.h"
#include "OAIPivotTableOptions_RowAlternateColorOptions.h"
#include "OAIPivotTableOptions_RowFieldNamesStyle.h"
#include "OAIPivotTableOptions_RowHeaderStyle.h"
#include "OAIVisibility.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPivotTableOptions_ColumnHeaderStyle;
class OAIPivotTableOptions_RowHeaderStyle;
class OAIPivotTableOptions_CellStyle;
class OAIPivotTableOptions_RowFieldNamesStyle;
class OAIPivotTableOptions_RowAlternateColorOptions;

class OAIPivotTableOptions : public OAIObject {
public:
    OAIPivotTableOptions();
    OAIPivotTableOptions(QString json);
    ~OAIPivotTableOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPivotTableMetricPlacement getMetricPlacement() const;
    void setMetricPlacement(const OAIPivotTableMetricPlacement &metric_placement);
    bool is_metric_placement_Set() const;
    bool is_metric_placement_Valid() const;

    OAIVisibility getSingleMetricVisibility() const;
    void setSingleMetricVisibility(const OAIVisibility &single_metric_visibility);
    bool is_single_metric_visibility_Set() const;
    bool is_single_metric_visibility_Valid() const;

    OAIVisibility getColumnNamesVisibility() const;
    void setColumnNamesVisibility(const OAIVisibility &column_names_visibility);
    bool is_column_names_visibility_Set() const;
    bool is_column_names_visibility_Valid() const;

    OAIVisibility getToggleButtonsVisibility() const;
    void setToggleButtonsVisibility(const OAIVisibility &toggle_buttons_visibility);
    bool is_toggle_buttons_visibility_Set() const;
    bool is_toggle_buttons_visibility_Valid() const;

    OAIPivotTableOptions_ColumnHeaderStyle getColumnHeaderStyle() const;
    void setColumnHeaderStyle(const OAIPivotTableOptions_ColumnHeaderStyle &column_header_style);
    bool is_column_header_style_Set() const;
    bool is_column_header_style_Valid() const;

    OAIPivotTableOptions_RowHeaderStyle getRowHeaderStyle() const;
    void setRowHeaderStyle(const OAIPivotTableOptions_RowHeaderStyle &row_header_style);
    bool is_row_header_style_Set() const;
    bool is_row_header_style_Valid() const;

    OAIPivotTableOptions_CellStyle getCellStyle() const;
    void setCellStyle(const OAIPivotTableOptions_CellStyle &cell_style);
    bool is_cell_style_Set() const;
    bool is_cell_style_Valid() const;

    OAIPivotTableOptions_RowFieldNamesStyle getRowFieldNamesStyle() const;
    void setRowFieldNamesStyle(const OAIPivotTableOptions_RowFieldNamesStyle &row_field_names_style);
    bool is_row_field_names_style_Set() const;
    bool is_row_field_names_style_Valid() const;

    OAIPivotTableOptions_RowAlternateColorOptions getRowAlternateColorOptions() const;
    void setRowAlternateColorOptions(const OAIPivotTableOptions_RowAlternateColorOptions &row_alternate_color_options);
    bool is_row_alternate_color_options_Set() const;
    bool is_row_alternate_color_options_Valid() const;

    OAIVisibility getCollapsedRowDimensionsVisibility() const;
    void setCollapsedRowDimensionsVisibility(const OAIVisibility &collapsed_row_dimensions_visibility);
    bool is_collapsed_row_dimensions_visibility_Set() const;
    bool is_collapsed_row_dimensions_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPivotTableMetricPlacement m_metric_placement;
    bool m_metric_placement_isSet;
    bool m_metric_placement_isValid;

    OAIVisibility m_single_metric_visibility;
    bool m_single_metric_visibility_isSet;
    bool m_single_metric_visibility_isValid;

    OAIVisibility m_column_names_visibility;
    bool m_column_names_visibility_isSet;
    bool m_column_names_visibility_isValid;

    OAIVisibility m_toggle_buttons_visibility;
    bool m_toggle_buttons_visibility_isSet;
    bool m_toggle_buttons_visibility_isValid;

    OAIPivotTableOptions_ColumnHeaderStyle m_column_header_style;
    bool m_column_header_style_isSet;
    bool m_column_header_style_isValid;

    OAIPivotTableOptions_RowHeaderStyle m_row_header_style;
    bool m_row_header_style_isSet;
    bool m_row_header_style_isValid;

    OAIPivotTableOptions_CellStyle m_cell_style;
    bool m_cell_style_isSet;
    bool m_cell_style_isValid;

    OAIPivotTableOptions_RowFieldNamesStyle m_row_field_names_style;
    bool m_row_field_names_style_isSet;
    bool m_row_field_names_style_isValid;

    OAIPivotTableOptions_RowAlternateColorOptions m_row_alternate_color_options;
    bool m_row_alternate_color_options_isSet;
    bool m_row_alternate_color_options_isValid;

    OAIVisibility m_collapsed_row_dimensions_visibility;
    bool m_collapsed_row_dimensions_visibility_isSet;
    bool m_collapsed_row_dimensions_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPivotTableOptions)

#endif // OAIPivotTableOptions_H
