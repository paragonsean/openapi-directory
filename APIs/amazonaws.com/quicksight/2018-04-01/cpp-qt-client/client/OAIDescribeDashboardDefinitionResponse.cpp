/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDashboardDefinitionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDashboardDefinitionResponse::OAIDescribeDashboardDefinitionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDashboardDefinitionResponse::OAIDescribeDashboardDefinitionResponse() {
    this->initializeModel();
}

OAIDescribeDashboardDefinitionResponse::~OAIDescribeDashboardDefinitionResponse() {}

void OAIDescribeDashboardDefinitionResponse::initializeModel() {

    m_dashboard_id_isSet = false;
    m_dashboard_id_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_status_isSet = false;
    m_resource_status_isValid = false;

    m_theme_arn_isSet = false;
    m_theme_arn_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_dashboard_publish_options_isSet = false;
    m_dashboard_publish_options_isValid = false;
}

void OAIDescribeDashboardDefinitionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDashboardDefinitionResponse::fromJsonObject(QJsonObject json) {

    m_dashboard_id_isValid = ::OpenAPI::fromJsonValue(m_dashboard_id, json[QString("DashboardId")]);
    m_dashboard_id_isSet = !json[QString("DashboardId")].isNull() && m_dashboard_id_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_resource_status_isValid = ::OpenAPI::fromJsonValue(m_resource_status, json[QString("ResourceStatus")]);
    m_resource_status_isSet = !json[QString("ResourceStatus")].isNull() && m_resource_status_isValid;

    m_theme_arn_isValid = ::OpenAPI::fromJsonValue(m_theme_arn, json[QString("ThemeArn")]);
    m_theme_arn_isSet = !json[QString("ThemeArn")].isNull() && m_theme_arn_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_dashboard_publish_options_isValid = ::OpenAPI::fromJsonValue(m_dashboard_publish_options, json[QString("DashboardPublishOptions")]);
    m_dashboard_publish_options_isSet = !json[QString("DashboardPublishOptions")].isNull() && m_dashboard_publish_options_isValid;
}

QString OAIDescribeDashboardDefinitionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDashboardDefinitionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard_id_isSet) {
        obj.insert(QString("DashboardId"), ::OpenAPI::toJsonValue(m_dashboard_id));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_status.isSet()) {
        obj.insert(QString("ResourceStatus"), ::OpenAPI::toJsonValue(m_resource_status));
    }
    if (m_theme_arn_isSet) {
        obj.insert(QString("ThemeArn"), ::OpenAPI::toJsonValue(m_theme_arn));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_dashboard_publish_options.isSet()) {
        obj.insert(QString("DashboardPublishOptions"), ::OpenAPI::toJsonValue(m_dashboard_publish_options));
    }
    return obj;
}

QString OAIDescribeDashboardDefinitionResponse::getDashboardId() const {
    return m_dashboard_id;
}
void OAIDescribeDashboardDefinitionResponse::setDashboardId(const QString &dashboard_id) {
    m_dashboard_id = dashboard_id;
    m_dashboard_id_isSet = true;
}

bool OAIDescribeDashboardDefinitionResponse::is_dashboard_id_Set() const{
    return m_dashboard_id_isSet;
}

bool OAIDescribeDashboardDefinitionResponse::is_dashboard_id_Valid() const{
    return m_dashboard_id_isValid;
}

QList OAIDescribeDashboardDefinitionResponse::getErrors() const {
    return m_errors;
}
void OAIDescribeDashboardDefinitionResponse::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIDescribeDashboardDefinitionResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIDescribeDashboardDefinitionResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIDescribeDashboardDefinitionResponse::getName() const {
    return m_name;
}
void OAIDescribeDashboardDefinitionResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeDashboardDefinitionResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeDashboardDefinitionResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIResourceStatus OAIDescribeDashboardDefinitionResponse::getResourceStatus() const {
    return m_resource_status;
}
void OAIDescribeDashboardDefinitionResponse::setResourceStatus(const OAIResourceStatus &resource_status) {
    m_resource_status = resource_status;
    m_resource_status_isSet = true;
}

bool OAIDescribeDashboardDefinitionResponse::is_resource_status_Set() const{
    return m_resource_status_isSet;
}

bool OAIDescribeDashboardDefinitionResponse::is_resource_status_Valid() const{
    return m_resource_status_isValid;
}

QString OAIDescribeDashboardDefinitionResponse::getThemeArn() const {
    return m_theme_arn;
}
void OAIDescribeDashboardDefinitionResponse::setThemeArn(const QString &theme_arn) {
    m_theme_arn = theme_arn;
    m_theme_arn_isSet = true;
}

bool OAIDescribeDashboardDefinitionResponse::is_theme_arn_Set() const{
    return m_theme_arn_isSet;
}

bool OAIDescribeDashboardDefinitionResponse::is_theme_arn_Valid() const{
    return m_theme_arn_isValid;
}

OAIDescribeDashboardDefinitionResponse_Definition OAIDescribeDashboardDefinitionResponse::getDefinition() const {
    return m_definition;
}
void OAIDescribeDashboardDefinitionResponse::setDefinition(const OAIDescribeDashboardDefinitionResponse_Definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIDescribeDashboardDefinitionResponse::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIDescribeDashboardDefinitionResponse::is_definition_Valid() const{
    return m_definition_isValid;
}

qint32 OAIDescribeDashboardDefinitionResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDashboardDefinitionResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDashboardDefinitionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDashboardDefinitionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeDashboardDefinitionResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeDashboardDefinitionResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeDashboardDefinitionResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeDashboardDefinitionResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIDescribeDashboardDefinitionResponse_DashboardPublishOptions OAIDescribeDashboardDefinitionResponse::getDashboardPublishOptions() const {
    return m_dashboard_publish_options;
}
void OAIDescribeDashboardDefinitionResponse::setDashboardPublishOptions(const OAIDescribeDashboardDefinitionResponse_DashboardPublishOptions &dashboard_publish_options) {
    m_dashboard_publish_options = dashboard_publish_options;
    m_dashboard_publish_options_isSet = true;
}

bool OAIDescribeDashboardDefinitionResponse::is_dashboard_publish_options_Set() const{
    return m_dashboard_publish_options_isSet;
}

bool OAIDescribeDashboardDefinitionResponse::is_dashboard_publish_options_Valid() const{
    return m_dashboard_publish_options_isValid;
}

bool OAIDescribeDashboardDefinitionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_publish_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDashboardDefinitionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
