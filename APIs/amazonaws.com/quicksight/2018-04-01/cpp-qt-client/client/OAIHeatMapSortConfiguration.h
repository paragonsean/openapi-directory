/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHeatMapSortConfiguration.h
 *
 * The sort configuration of a heat map.
 */

#ifndef OAIHeatMapSortConfiguration_H
#define OAIHeatMapSortConfiguration_H

#include <QJsonObject>

#include "OAIHeatMapSortConfiguration_HeatMapColumnItemsLimitConfiguration.h"
#include "OAIHeatMapSortConfiguration_HeatMapRowItemsLimitConfiguration.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHeatMapSortConfiguration_HeatMapRowItemsLimitConfiguration;
class OAIHeatMapSortConfiguration_HeatMapColumnItemsLimitConfiguration;

class OAIHeatMapSortConfiguration : public OAIObject {
public:
    OAIHeatMapSortConfiguration();
    OAIHeatMapSortConfiguration(QString json);
    ~OAIHeatMapSortConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getHeatMapRowSort() const;
    void setHeatMapRowSort(const QList &heat_map_row_sort);
    bool is_heat_map_row_sort_Set() const;
    bool is_heat_map_row_sort_Valid() const;

    QList getHeatMapColumnSort() const;
    void setHeatMapColumnSort(const QList &heat_map_column_sort);
    bool is_heat_map_column_sort_Set() const;
    bool is_heat_map_column_sort_Valid() const;

    OAIHeatMapSortConfiguration_HeatMapRowItemsLimitConfiguration getHeatMapRowItemsLimitConfiguration() const;
    void setHeatMapRowItemsLimitConfiguration(const OAIHeatMapSortConfiguration_HeatMapRowItemsLimitConfiguration &heat_map_row_items_limit_configuration);
    bool is_heat_map_row_items_limit_configuration_Set() const;
    bool is_heat_map_row_items_limit_configuration_Valid() const;

    OAIHeatMapSortConfiguration_HeatMapColumnItemsLimitConfiguration getHeatMapColumnItemsLimitConfiguration() const;
    void setHeatMapColumnItemsLimitConfiguration(const OAIHeatMapSortConfiguration_HeatMapColumnItemsLimitConfiguration &heat_map_column_items_limit_configuration);
    bool is_heat_map_column_items_limit_configuration_Set() const;
    bool is_heat_map_column_items_limit_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_heat_map_row_sort;
    bool m_heat_map_row_sort_isSet;
    bool m_heat_map_row_sort_isValid;

    QList m_heat_map_column_sort;
    bool m_heat_map_column_sort_isSet;
    bool m_heat_map_column_sort_isValid;

    OAIHeatMapSortConfiguration_HeatMapRowItemsLimitConfiguration m_heat_map_row_items_limit_configuration;
    bool m_heat_map_row_items_limit_configuration_isSet;
    bool m_heat_map_row_items_limit_configuration_isValid;

    OAIHeatMapSortConfiguration_HeatMapColumnItemsLimitConfiguration m_heat_map_column_items_limit_configuration;
    bool m_heat_map_column_items_limit_configuration_isSet;
    bool m_heat_map_column_items_limit_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHeatMapSortConfiguration)

#endif // OAIHeatMapSortConfiguration_H
