/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTopicRefreshScheduleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTopicRefreshScheduleResponse::OAIUpdateTopicRefreshScheduleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTopicRefreshScheduleResponse::OAIUpdateTopicRefreshScheduleResponse() {
    this->initializeModel();
}

OAIUpdateTopicRefreshScheduleResponse::~OAIUpdateTopicRefreshScheduleResponse() {}

void OAIUpdateTopicRefreshScheduleResponse::initializeModel() {

    m_topic_id_isSet = false;
    m_topic_id_isValid = false;

    m_topic_arn_isSet = false;
    m_topic_arn_isValid = false;

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIUpdateTopicRefreshScheduleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTopicRefreshScheduleResponse::fromJsonObject(QJsonObject json) {

    m_topic_id_isValid = ::OpenAPI::fromJsonValue(m_topic_id, json[QString("TopicId")]);
    m_topic_id_isSet = !json[QString("TopicId")].isNull() && m_topic_id_isValid;

    m_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_topic_arn, json[QString("TopicArn")]);
    m_topic_arn_isSet = !json[QString("TopicArn")].isNull() && m_topic_arn_isValid;

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("DatasetArn")]);
    m_dataset_arn_isSet = !json[QString("DatasetArn")].isNull() && m_dataset_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIUpdateTopicRefreshScheduleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTopicRefreshScheduleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_topic_id_isSet) {
        obj.insert(QString("TopicId"), ::OpenAPI::toJsonValue(m_topic_id));
    }
    if (m_topic_arn_isSet) {
        obj.insert(QString("TopicArn"), ::OpenAPI::toJsonValue(m_topic_arn));
    }
    if (m_dataset_arn_isSet) {
        obj.insert(QString("DatasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIUpdateTopicRefreshScheduleResponse::getTopicId() const {
    return m_topic_id;
}
void OAIUpdateTopicRefreshScheduleResponse::setTopicId(const QString &topic_id) {
    m_topic_id = topic_id;
    m_topic_id_isSet = true;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_topic_id_Set() const{
    return m_topic_id_isSet;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_topic_id_Valid() const{
    return m_topic_id_isValid;
}

QString OAIUpdateTopicRefreshScheduleResponse::getTopicArn() const {
    return m_topic_arn;
}
void OAIUpdateTopicRefreshScheduleResponse::setTopicArn(const QString &topic_arn) {
    m_topic_arn = topic_arn;
    m_topic_arn_isSet = true;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_topic_arn_Set() const{
    return m_topic_arn_isSet;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_topic_arn_Valid() const{
    return m_topic_arn_isValid;
}

QString OAIUpdateTopicRefreshScheduleResponse::getDatasetArn() const {
    return m_dataset_arn;
}
void OAIUpdateTopicRefreshScheduleResponse::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

qint32 OAIUpdateTopicRefreshScheduleResponse::getStatus() const {
    return m_status;
}
void OAIUpdateTopicRefreshScheduleResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateTopicRefreshScheduleResponse::getRequestId() const {
    return m_request_id;
}
void OAIUpdateTopicRefreshScheduleResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIUpdateTopicRefreshScheduleResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIUpdateTopicRefreshScheduleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTopicRefreshScheduleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
