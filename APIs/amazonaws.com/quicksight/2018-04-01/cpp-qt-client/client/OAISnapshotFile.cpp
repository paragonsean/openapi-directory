/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotFile::OAISnapshotFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotFile::OAISnapshotFile() {
    this->initializeModel();
}

OAISnapshotFile::~OAISnapshotFile() {}

void OAISnapshotFile::initializeModel() {

    m_sheet_selections_isSet = false;
    m_sheet_selections_isValid = false;

    m_format_type_isSet = false;
    m_format_type_isValid = false;
}

void OAISnapshotFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotFile::fromJsonObject(QJsonObject json) {

    m_sheet_selections_isValid = ::OpenAPI::fromJsonValue(m_sheet_selections, json[QString("SheetSelections")]);
    m_sheet_selections_isSet = !json[QString("SheetSelections")].isNull() && m_sheet_selections_isValid;

    m_format_type_isValid = ::OpenAPI::fromJsonValue(m_format_type, json[QString("FormatType")]);
    m_format_type_isSet = !json[QString("FormatType")].isNull() && m_format_type_isValid;
}

QString OAISnapshotFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotFile::asJsonObject() const {
    QJsonObject obj;
    if (m_sheet_selections.isSet()) {
        obj.insert(QString("SheetSelections"), ::OpenAPI::toJsonValue(m_sheet_selections));
    }
    if (m_format_type.isSet()) {
        obj.insert(QString("FormatType"), ::OpenAPI::toJsonValue(m_format_type));
    }
    return obj;
}

QList OAISnapshotFile::getSheetSelections() const {
    return m_sheet_selections;
}
void OAISnapshotFile::setSheetSelections(const QList &sheet_selections) {
    m_sheet_selections = sheet_selections;
    m_sheet_selections_isSet = true;
}

bool OAISnapshotFile::is_sheet_selections_Set() const{
    return m_sheet_selections_isSet;
}

bool OAISnapshotFile::is_sheet_selections_Valid() const{
    return m_sheet_selections_isValid;
}

OAISnapshotFileFormatType OAISnapshotFile::getFormatType() const {
    return m_format_type;
}
void OAISnapshotFile::setFormatType(const OAISnapshotFileFormatType &format_type) {
    m_format_type = format_type;
    m_format_type_isSet = true;
}

bool OAISnapshotFile::is_format_type_Set() const{
    return m_format_type_isSet;
}

bool OAISnapshotFile::is_format_type_Valid() const{
    return m_format_type_isValid;
}

bool OAISnapshotFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sheet_selections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sheet_selections_isValid && m_format_type_isValid && true;
}

} // namespace OpenAPI
