/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableFieldCollapseStateOption_Target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableFieldCollapseStateOption_Target::OAIPivotTableFieldCollapseStateOption_Target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableFieldCollapseStateOption_Target::OAIPivotTableFieldCollapseStateOption_Target() {
    this->initializeModel();
}

OAIPivotTableFieldCollapseStateOption_Target::~OAIPivotTableFieldCollapseStateOption_Target() {}

void OAIPivotTableFieldCollapseStateOption_Target::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_field_data_path_values_isSet = false;
    m_field_data_path_values_isValid = false;
}

void OAIPivotTableFieldCollapseStateOption_Target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableFieldCollapseStateOption_Target::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_field_data_path_values_isValid = ::OpenAPI::fromJsonValue(m_field_data_path_values, json[QString("FieldDataPathValues")]);
    m_field_data_path_values_isSet = !json[QString("FieldDataPathValues")].isNull() && m_field_data_path_values_isValid;
}

QString OAIPivotTableFieldCollapseStateOption_Target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableFieldCollapseStateOption_Target::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_field_data_path_values.isSet()) {
        obj.insert(QString("FieldDataPathValues"), ::OpenAPI::toJsonValue(m_field_data_path_values));
    }
    return obj;
}

QString OAIPivotTableFieldCollapseStateOption_Target::getFieldId() const {
    return m_field_id;
}
void OAIPivotTableFieldCollapseStateOption_Target::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIPivotTableFieldCollapseStateOption_Target::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIPivotTableFieldCollapseStateOption_Target::is_field_id_Valid() const{
    return m_field_id_isValid;
}

QList OAIPivotTableFieldCollapseStateOption_Target::getFieldDataPathValues() const {
    return m_field_data_path_values;
}
void OAIPivotTableFieldCollapseStateOption_Target::setFieldDataPathValues(const QList &field_data_path_values) {
    m_field_data_path_values = field_data_path_values;
    m_field_data_path_values_isSet = true;
}

bool OAIPivotTableFieldCollapseStateOption_Target::is_field_data_path_values_Set() const{
    return m_field_data_path_values_isSet;
}

bool OAIPivotTableFieldCollapseStateOption_Target::is_field_data_path_values_Valid() const{
    return m_field_data_path_values_isValid;
}

bool OAIPivotTableFieldCollapseStateOption_Target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_data_path_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableFieldCollapseStateOption_Target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
