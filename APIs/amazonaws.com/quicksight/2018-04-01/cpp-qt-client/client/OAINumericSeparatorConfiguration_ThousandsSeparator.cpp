/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericSeparatorConfiguration_ThousandsSeparator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericSeparatorConfiguration_ThousandsSeparator::OAINumericSeparatorConfiguration_ThousandsSeparator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericSeparatorConfiguration_ThousandsSeparator::OAINumericSeparatorConfiguration_ThousandsSeparator() {
    this->initializeModel();
}

OAINumericSeparatorConfiguration_ThousandsSeparator::~OAINumericSeparatorConfiguration_ThousandsSeparator() {}

void OAINumericSeparatorConfiguration_ThousandsSeparator::initializeModel() {

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAINumericSeparatorConfiguration_ThousandsSeparator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericSeparatorConfiguration_ThousandsSeparator::fromJsonObject(QJsonObject json) {

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("Symbol")]);
    m_symbol_isSet = !json[QString("Symbol")].isNull() && m_symbol_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;
}

QString OAINumericSeparatorConfiguration_ThousandsSeparator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericSeparatorConfiguration_ThousandsSeparator::asJsonObject() const {
    QJsonObject obj;
    if (m_symbol.isSet()) {
        obj.insert(QString("Symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAINumericSeparatorSymbol OAINumericSeparatorConfiguration_ThousandsSeparator::getSymbol() const {
    return m_symbol;
}
void OAINumericSeparatorConfiguration_ThousandsSeparator::setSymbol(const OAINumericSeparatorSymbol &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAINumericSeparatorConfiguration_ThousandsSeparator::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAINumericSeparatorConfiguration_ThousandsSeparator::is_symbol_Valid() const{
    return m_symbol_isValid;
}

OAIVisibility OAINumericSeparatorConfiguration_ThousandsSeparator::getVisibility() const {
    return m_visibility;
}
void OAINumericSeparatorConfiguration_ThousandsSeparator::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAINumericSeparatorConfiguration_ThousandsSeparator::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAINumericSeparatorConfiguration_ThousandsSeparator::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAINumericSeparatorConfiguration_ThousandsSeparator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_symbol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericSeparatorConfiguration_ThousandsSeparator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
