/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastScenario_WhatIfRangeScenario.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastScenario_WhatIfRangeScenario::OAIForecastScenario_WhatIfRangeScenario(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastScenario_WhatIfRangeScenario::OAIForecastScenario_WhatIfRangeScenario() {
    this->initializeModel();
}

OAIForecastScenario_WhatIfRangeScenario::~OAIForecastScenario_WhatIfRangeScenario() {}

void OAIForecastScenario_WhatIfRangeScenario::initializeModel() {

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIForecastScenario_WhatIfRangeScenario::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastScenario_WhatIfRangeScenario::fromJsonObject(QJsonObject json) {

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIForecastScenario_WhatIfRangeScenario::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastScenario_WhatIfRangeScenario::asJsonObject() const {
    QJsonObject obj;
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QDateTime OAIForecastScenario_WhatIfRangeScenario::getStartDate() const {
    return m_start_date;
}
void OAIForecastScenario_WhatIfRangeScenario::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIForecastScenario_WhatIfRangeScenario::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIForecastScenario_WhatIfRangeScenario::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIForecastScenario_WhatIfRangeScenario::getEndDate() const {
    return m_end_date;
}
void OAIForecastScenario_WhatIfRangeScenario::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIForecastScenario_WhatIfRangeScenario::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIForecastScenario_WhatIfRangeScenario::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAIForecastScenario_WhatIfRangeScenario::getValue() const {
    return m_value;
}
void OAIForecastScenario_WhatIfRangeScenario::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIForecastScenario_WhatIfRangeScenario::is_value_Set() const{
    return m_value_isSet;
}

bool OAIForecastScenario_WhatIfRangeScenario::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIForecastScenario_WhatIfRangeScenario::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastScenario_WhatIfRangeScenario::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_date_isValid && m_end_date_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
