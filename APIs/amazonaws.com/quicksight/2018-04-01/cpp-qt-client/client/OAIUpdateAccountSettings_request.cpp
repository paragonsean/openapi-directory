/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAccountSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAccountSettings_request::OAIUpdateAccountSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAccountSettings_request::OAIUpdateAccountSettings_request() {
    this->initializeModel();
}

OAIUpdateAccountSettings_request::~OAIUpdateAccountSettings_request() {}

void OAIUpdateAccountSettings_request::initializeModel() {

    m_default_namespace_isSet = false;
    m_default_namespace_isValid = false;

    m_notification_email_isSet = false;
    m_notification_email_isValid = false;

    m_termination_protection_enabled_isSet = false;
    m_termination_protection_enabled_isValid = false;
}

void OAIUpdateAccountSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAccountSettings_request::fromJsonObject(QJsonObject json) {

    m_default_namespace_isValid = ::OpenAPI::fromJsonValue(m_default_namespace, json[QString("DefaultNamespace")]);
    m_default_namespace_isSet = !json[QString("DefaultNamespace")].isNull() && m_default_namespace_isValid;

    m_notification_email_isValid = ::OpenAPI::fromJsonValue(m_notification_email, json[QString("NotificationEmail")]);
    m_notification_email_isSet = !json[QString("NotificationEmail")].isNull() && m_notification_email_isValid;

    m_termination_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_termination_protection_enabled, json[QString("TerminationProtectionEnabled")]);
    m_termination_protection_enabled_isSet = !json[QString("TerminationProtectionEnabled")].isNull() && m_termination_protection_enabled_isValid;
}

QString OAIUpdateAccountSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAccountSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_default_namespace_isSet) {
        obj.insert(QString("DefaultNamespace"), ::OpenAPI::toJsonValue(m_default_namespace));
    }
    if (m_notification_email_isSet) {
        obj.insert(QString("NotificationEmail"), ::OpenAPI::toJsonValue(m_notification_email));
    }
    if (m_termination_protection_enabled_isSet) {
        obj.insert(QString("TerminationProtectionEnabled"), ::OpenAPI::toJsonValue(m_termination_protection_enabled));
    }
    return obj;
}

QString OAIUpdateAccountSettings_request::getDefaultNamespace() const {
    return m_default_namespace;
}
void OAIUpdateAccountSettings_request::setDefaultNamespace(const QString &default_namespace) {
    m_default_namespace = default_namespace;
    m_default_namespace_isSet = true;
}

bool OAIUpdateAccountSettings_request::is_default_namespace_Set() const{
    return m_default_namespace_isSet;
}

bool OAIUpdateAccountSettings_request::is_default_namespace_Valid() const{
    return m_default_namespace_isValid;
}

QString OAIUpdateAccountSettings_request::getNotificationEmail() const {
    return m_notification_email;
}
void OAIUpdateAccountSettings_request::setNotificationEmail(const QString &notification_email) {
    m_notification_email = notification_email;
    m_notification_email_isSet = true;
}

bool OAIUpdateAccountSettings_request::is_notification_email_Set() const{
    return m_notification_email_isSet;
}

bool OAIUpdateAccountSettings_request::is_notification_email_Valid() const{
    return m_notification_email_isValid;
}

bool OAIUpdateAccountSettings_request::isTerminationProtectionEnabled() const {
    return m_termination_protection_enabled;
}
void OAIUpdateAccountSettings_request::setTerminationProtectionEnabled(const bool &termination_protection_enabled) {
    m_termination_protection_enabled = termination_protection_enabled;
    m_termination_protection_enabled_isSet = true;
}

bool OAIUpdateAccountSettings_request::is_termination_protection_enabled_Set() const{
    return m_termination_protection_enabled_isSet;
}

bool OAIUpdateAccountSettings_request::is_termination_protection_enabled_Valid() const{
    return m_termination_protection_enabled_isValid;
}

bool OAIUpdateAccountSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAccountSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_namespace_isValid && true;
}

} // namespace OpenAPI
