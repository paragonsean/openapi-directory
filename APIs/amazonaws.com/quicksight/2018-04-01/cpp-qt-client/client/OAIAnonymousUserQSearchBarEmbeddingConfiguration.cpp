/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnonymousUserQSearchBarEmbeddingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnonymousUserQSearchBarEmbeddingConfiguration::OAIAnonymousUserQSearchBarEmbeddingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnonymousUserQSearchBarEmbeddingConfiguration::OAIAnonymousUserQSearchBarEmbeddingConfiguration() {
    this->initializeModel();
}

OAIAnonymousUserQSearchBarEmbeddingConfiguration::~OAIAnonymousUserQSearchBarEmbeddingConfiguration() {}

void OAIAnonymousUserQSearchBarEmbeddingConfiguration::initializeModel() {

    m_initial_topic_id_isSet = false;
    m_initial_topic_id_isValid = false;
}

void OAIAnonymousUserQSearchBarEmbeddingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnonymousUserQSearchBarEmbeddingConfiguration::fromJsonObject(QJsonObject json) {

    m_initial_topic_id_isValid = ::OpenAPI::fromJsonValue(m_initial_topic_id, json[QString("InitialTopicId")]);
    m_initial_topic_id_isSet = !json[QString("InitialTopicId")].isNull() && m_initial_topic_id_isValid;
}

QString OAIAnonymousUserQSearchBarEmbeddingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnonymousUserQSearchBarEmbeddingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_topic_id_isSet) {
        obj.insert(QString("InitialTopicId"), ::OpenAPI::toJsonValue(m_initial_topic_id));
    }
    return obj;
}

QString OAIAnonymousUserQSearchBarEmbeddingConfiguration::getInitialTopicId() const {
    return m_initial_topic_id;
}
void OAIAnonymousUserQSearchBarEmbeddingConfiguration::setInitialTopicId(const QString &initial_topic_id) {
    m_initial_topic_id = initial_topic_id;
    m_initial_topic_id_isSet = true;
}

bool OAIAnonymousUserQSearchBarEmbeddingConfiguration::is_initial_topic_id_Set() const{
    return m_initial_topic_id_isSet;
}

bool OAIAnonymousUserQSearchBarEmbeddingConfiguration::is_initial_topic_id_Valid() const{
    return m_initial_topic_id_isValid;
}

bool OAIAnonymousUserQSearchBarEmbeddingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnonymousUserQSearchBarEmbeddingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_initial_topic_id_isValid && true;
}

} // namespace OpenAPI
