/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridLayoutScreenCanvasSizeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridLayoutScreenCanvasSizeOptions::OAIGridLayoutScreenCanvasSizeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridLayoutScreenCanvasSizeOptions::OAIGridLayoutScreenCanvasSizeOptions() {
    this->initializeModel();
}

OAIGridLayoutScreenCanvasSizeOptions::~OAIGridLayoutScreenCanvasSizeOptions() {}

void OAIGridLayoutScreenCanvasSizeOptions::initializeModel() {

    m_resize_option_isSet = false;
    m_resize_option_isValid = false;

    m_optimized_view_port_width_isSet = false;
    m_optimized_view_port_width_isValid = false;
}

void OAIGridLayoutScreenCanvasSizeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridLayoutScreenCanvasSizeOptions::fromJsonObject(QJsonObject json) {

    m_resize_option_isValid = ::OpenAPI::fromJsonValue(m_resize_option, json[QString("ResizeOption")]);
    m_resize_option_isSet = !json[QString("ResizeOption")].isNull() && m_resize_option_isValid;

    m_optimized_view_port_width_isValid = ::OpenAPI::fromJsonValue(m_optimized_view_port_width, json[QString("OptimizedViewPortWidth")]);
    m_optimized_view_port_width_isSet = !json[QString("OptimizedViewPortWidth")].isNull() && m_optimized_view_port_width_isValid;
}

QString OAIGridLayoutScreenCanvasSizeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridLayoutScreenCanvasSizeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_resize_option.isSet()) {
        obj.insert(QString("ResizeOption"), ::OpenAPI::toJsonValue(m_resize_option));
    }
    if (m_optimized_view_port_width_isSet) {
        obj.insert(QString("OptimizedViewPortWidth"), ::OpenAPI::toJsonValue(m_optimized_view_port_width));
    }
    return obj;
}

OAIResizeOption OAIGridLayoutScreenCanvasSizeOptions::getResizeOption() const {
    return m_resize_option;
}
void OAIGridLayoutScreenCanvasSizeOptions::setResizeOption(const OAIResizeOption &resize_option) {
    m_resize_option = resize_option;
    m_resize_option_isSet = true;
}

bool OAIGridLayoutScreenCanvasSizeOptions::is_resize_option_Set() const{
    return m_resize_option_isSet;
}

bool OAIGridLayoutScreenCanvasSizeOptions::is_resize_option_Valid() const{
    return m_resize_option_isValid;
}

QString OAIGridLayoutScreenCanvasSizeOptions::getOptimizedViewPortWidth() const {
    return m_optimized_view_port_width;
}
void OAIGridLayoutScreenCanvasSizeOptions::setOptimizedViewPortWidth(const QString &optimized_view_port_width) {
    m_optimized_view_port_width = optimized_view_port_width;
    m_optimized_view_port_width_isSet = true;
}

bool OAIGridLayoutScreenCanvasSizeOptions::is_optimized_view_port_width_Set() const{
    return m_optimized_view_port_width_isSet;
}

bool OAIGridLayoutScreenCanvasSizeOptions::is_optimized_view_port_width_Valid() const{
    return m_optimized_view_port_width_isValid;
}

bool OAIGridLayoutScreenCanvasSizeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resize_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimized_view_port_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridLayoutScreenCanvasSizeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resize_option_isValid && true;
}

} // namespace OpenAPI
