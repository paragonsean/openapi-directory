/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPanelConfiguration_Title.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPanelConfiguration_Title::OAIPanelConfiguration_Title(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPanelConfiguration_Title::OAIPanelConfiguration_Title() {
    this->initializeModel();
}

OAIPanelConfiguration_Title::~OAIPanelConfiguration_Title() {}

void OAIPanelConfiguration_Title::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_font_configuration_isSet = false;
    m_font_configuration_isValid = false;

    m_horizontal_text_alignment_isSet = false;
    m_horizontal_text_alignment_isValid = false;
}

void OAIPanelConfiguration_Title::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPanelConfiguration_Title::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_font_configuration, json[QString("FontConfiguration")]);
    m_font_configuration_isSet = !json[QString("FontConfiguration")].isNull() && m_font_configuration_isValid;

    m_horizontal_text_alignment_isValid = ::OpenAPI::fromJsonValue(m_horizontal_text_alignment, json[QString("HorizontalTextAlignment")]);
    m_horizontal_text_alignment_isSet = !json[QString("HorizontalTextAlignment")].isNull() && m_horizontal_text_alignment_isValid;
}

QString OAIPanelConfiguration_Title::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPanelConfiguration_Title::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_font_configuration.isSet()) {
        obj.insert(QString("FontConfiguration"), ::OpenAPI::toJsonValue(m_font_configuration));
    }
    if (m_horizontal_text_alignment.isSet()) {
        obj.insert(QString("HorizontalTextAlignment"), ::OpenAPI::toJsonValue(m_horizontal_text_alignment));
    }
    return obj;
}

OAIVisibility OAIPanelConfiguration_Title::getVisibility() const {
    return m_visibility;
}
void OAIPanelConfiguration_Title::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIPanelConfiguration_Title::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIPanelConfiguration_Title::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIFontConfiguration OAIPanelConfiguration_Title::getFontConfiguration() const {
    return m_font_configuration;
}
void OAIPanelConfiguration_Title::setFontConfiguration(const OAIFontConfiguration &font_configuration) {
    m_font_configuration = font_configuration;
    m_font_configuration_isSet = true;
}

bool OAIPanelConfiguration_Title::is_font_configuration_Set() const{
    return m_font_configuration_isSet;
}

bool OAIPanelConfiguration_Title::is_font_configuration_Valid() const{
    return m_font_configuration_isValid;
}

OAIHorizontalTextAlignment OAIPanelConfiguration_Title::getHorizontalTextAlignment() const {
    return m_horizontal_text_alignment;
}
void OAIPanelConfiguration_Title::setHorizontalTextAlignment(const OAIHorizontalTextAlignment &horizontal_text_alignment) {
    m_horizontal_text_alignment = horizontal_text_alignment;
    m_horizontal_text_alignment_isSet = true;
}

bool OAIPanelConfiguration_Title::is_horizontal_text_alignment_Set() const{
    return m_horizontal_text_alignment_isSet;
}

bool OAIPanelConfiguration_Title::is_horizontal_text_alignment_Valid() const{
    return m_horizontal_text_alignment_isValid;
}

bool OAIPanelConfiguration_Title::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_text_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPanelConfiguration_Title::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
