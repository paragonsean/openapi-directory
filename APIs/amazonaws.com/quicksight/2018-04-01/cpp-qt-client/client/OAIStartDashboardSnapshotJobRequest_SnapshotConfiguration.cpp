/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration() {
    this->initializeModel();
}

OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::~OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration() {}

void OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::initializeModel() {

    m_file_groups_isSet = false;
    m_file_groups_isValid = false;

    m_destination_configuration_isSet = false;
    m_destination_configuration_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::fromJsonObject(QJsonObject json) {

    m_file_groups_isValid = ::OpenAPI::fromJsonValue(m_file_groups, json[QString("FileGroups")]);
    m_file_groups_isSet = !json[QString("FileGroups")].isNull() && m_file_groups_isValid;

    m_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_destination_configuration, json[QString("DestinationConfiguration")]);
    m_destination_configuration_isSet = !json[QString("DestinationConfiguration")].isNull() && m_destination_configuration_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;
}

QString OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_file_groups.isSet()) {
        obj.insert(QString("FileGroups"), ::OpenAPI::toJsonValue(m_file_groups));
    }
    if (m_destination_configuration.isSet()) {
        obj.insert(QString("DestinationConfiguration"), ::OpenAPI::toJsonValue(m_destination_configuration));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QList OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::getFileGroups() const {
    return m_file_groups;
}
void OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::setFileGroups(const QList &file_groups) {
    m_file_groups = file_groups;
    m_file_groups_isSet = true;
}

bool OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::is_file_groups_Set() const{
    return m_file_groups_isSet;
}

bool OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::is_file_groups_Valid() const{
    return m_file_groups_isValid;
}

OAIStartDashboardSnapshotJob_request_SnapshotConfiguration_DestinationConfiguration OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::getDestinationConfiguration() const {
    return m_destination_configuration;
}
void OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::setDestinationConfiguration(const OAIStartDashboardSnapshotJob_request_SnapshotConfiguration_DestinationConfiguration &destination_configuration) {
    m_destination_configuration = destination_configuration;
    m_destination_configuration_isSet = true;
}

bool OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::is_destination_configuration_Set() const{
    return m_destination_configuration_isSet;
}

bool OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::is_destination_configuration_Valid() const{
    return m_destination_configuration_isValid;
}

OAIParameters OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::getParameters() const {
    return m_parameters;
}
void OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::setParameters(const OAIParameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartDashboardSnapshotJobRequest_SnapshotConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_groups_isValid && true;
}

} // namespace OpenAPI
