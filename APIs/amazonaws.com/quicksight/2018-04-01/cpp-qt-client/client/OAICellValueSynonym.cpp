/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICellValueSynonym.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICellValueSynonym::OAICellValueSynonym(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICellValueSynonym::OAICellValueSynonym() {
    this->initializeModel();
}

OAICellValueSynonym::~OAICellValueSynonym() {}

void OAICellValueSynonym::initializeModel() {

    m_cell_value_isSet = false;
    m_cell_value_isValid = false;

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;
}

void OAICellValueSynonym::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICellValueSynonym::fromJsonObject(QJsonObject json) {

    m_cell_value_isValid = ::OpenAPI::fromJsonValue(m_cell_value, json[QString("CellValue")]);
    m_cell_value_isSet = !json[QString("CellValue")].isNull() && m_cell_value_isValid;

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("Synonyms")]);
    m_synonyms_isSet = !json[QString("Synonyms")].isNull() && m_synonyms_isValid;
}

QString OAICellValueSynonym::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICellValueSynonym::asJsonObject() const {
    QJsonObject obj;
    if (m_cell_value_isSet) {
        obj.insert(QString("CellValue"), ::OpenAPI::toJsonValue(m_cell_value));
    }
    if (m_synonyms.isSet()) {
        obj.insert(QString("Synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    return obj;
}

QString OAICellValueSynonym::getCellValue() const {
    return m_cell_value;
}
void OAICellValueSynonym::setCellValue(const QString &cell_value) {
    m_cell_value = cell_value;
    m_cell_value_isSet = true;
}

bool OAICellValueSynonym::is_cell_value_Set() const{
    return m_cell_value_isSet;
}

bool OAICellValueSynonym::is_cell_value_Valid() const{
    return m_cell_value_isValid;
}

QList OAICellValueSynonym::getSynonyms() const {
    return m_synonyms;
}
void OAICellValueSynonym::setSynonyms(const QList &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAICellValueSynonym::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAICellValueSynonym::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

bool OAICellValueSynonym::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cell_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonyms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICellValueSynonym::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
