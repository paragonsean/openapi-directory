/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegativeValueConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegativeValueConfiguration::OAINegativeValueConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegativeValueConfiguration::OAINegativeValueConfiguration() {
    this->initializeModel();
}

OAINegativeValueConfiguration::~OAINegativeValueConfiguration() {}

void OAINegativeValueConfiguration::initializeModel() {

    m_display_mode_isSet = false;
    m_display_mode_isValid = false;
}

void OAINegativeValueConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINegativeValueConfiguration::fromJsonObject(QJsonObject json) {

    m_display_mode_isValid = ::OpenAPI::fromJsonValue(m_display_mode, json[QString("DisplayMode")]);
    m_display_mode_isSet = !json[QString("DisplayMode")].isNull() && m_display_mode_isValid;
}

QString OAINegativeValueConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINegativeValueConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_display_mode.isSet()) {
        obj.insert(QString("DisplayMode"), ::OpenAPI::toJsonValue(m_display_mode));
    }
    return obj;
}

OAINegativeValueDisplayMode OAINegativeValueConfiguration::getDisplayMode() const {
    return m_display_mode;
}
void OAINegativeValueConfiguration::setDisplayMode(const OAINegativeValueDisplayMode &display_mode) {
    m_display_mode = display_mode;
    m_display_mode_isSet = true;
}

bool OAINegativeValueConfiguration::is_display_mode_Set() const{
    return m_display_mode_isSet;
}

bool OAINegativeValueConfiguration::is_display_mode_Valid() const{
    return m_display_mode_isValid;
}

bool OAINegativeValueConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINegativeValueConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_mode_isValid && true;
}

} // namespace OpenAPI
