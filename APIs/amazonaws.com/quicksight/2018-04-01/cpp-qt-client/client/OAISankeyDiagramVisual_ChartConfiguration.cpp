/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISankeyDiagramVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISankeyDiagramVisual_ChartConfiguration::OAISankeyDiagramVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISankeyDiagramVisual_ChartConfiguration::OAISankeyDiagramVisual_ChartConfiguration() {
    this->initializeModel();
}

OAISankeyDiagramVisual_ChartConfiguration::~OAISankeyDiagramVisual_ChartConfiguration() {}

void OAISankeyDiagramVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;
}

void OAISankeyDiagramVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISankeyDiagramVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;
}

QString OAISankeyDiagramVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISankeyDiagramVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    return obj;
}

OAISankeyDiagramChartConfiguration_FieldWells OAISankeyDiagramVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAISankeyDiagramVisual_ChartConfiguration::setFieldWells(const OAISankeyDiagramChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAISankeyDiagramVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAISankeyDiagramVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAISankeyDiagramChartConfiguration_SortConfiguration OAISankeyDiagramVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAISankeyDiagramVisual_ChartConfiguration::setSortConfiguration(const OAISankeyDiagramChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAISankeyDiagramVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAISankeyDiagramVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAISankeyDiagramChartConfiguration_DataLabels OAISankeyDiagramVisual_ChartConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAISankeyDiagramVisual_ChartConfiguration::setDataLabels(const OAISankeyDiagramChartConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAISankeyDiagramVisual_ChartConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAISankeyDiagramVisual_ChartConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

bool OAISankeyDiagramVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISankeyDiagramVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
