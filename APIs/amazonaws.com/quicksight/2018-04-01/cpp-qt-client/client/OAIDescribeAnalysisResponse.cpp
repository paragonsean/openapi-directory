/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAnalysisResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAnalysisResponse::OAIDescribeAnalysisResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAnalysisResponse::OAIDescribeAnalysisResponse() {
    this->initializeModel();
}

OAIDescribeAnalysisResponse::~OAIDescribeAnalysisResponse() {}

void OAIDescribeAnalysisResponse::initializeModel() {

    m_analysis_isSet = false;
    m_analysis_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDescribeAnalysisResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAnalysisResponse::fromJsonObject(QJsonObject json) {

    m_analysis_isValid = ::OpenAPI::fromJsonValue(m_analysis, json[QString("Analysis")]);
    m_analysis_isSet = !json[QString("Analysis")].isNull() && m_analysis_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIDescribeAnalysisResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAnalysisResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis.isSet()) {
        obj.insert(QString("Analysis"), ::OpenAPI::toJsonValue(m_analysis));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIDescribeAnalysisResponse_Analysis OAIDescribeAnalysisResponse::getAnalysis() const {
    return m_analysis;
}
void OAIDescribeAnalysisResponse::setAnalysis(const OAIDescribeAnalysisResponse_Analysis &analysis) {
    m_analysis = analysis;
    m_analysis_isSet = true;
}

bool OAIDescribeAnalysisResponse::is_analysis_Set() const{
    return m_analysis_isSet;
}

bool OAIDescribeAnalysisResponse::is_analysis_Valid() const{
    return m_analysis_isValid;
}

qint32 OAIDescribeAnalysisResponse::getStatus() const {
    return m_status;
}
void OAIDescribeAnalysisResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAnalysisResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAnalysisResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeAnalysisResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeAnalysisResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeAnalysisResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeAnalysisResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDescribeAnalysisResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAnalysisResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
