/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefreshFrequency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefreshFrequency::OAIRefreshFrequency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefreshFrequency::OAIRefreshFrequency() {
    this->initializeModel();
}

OAIRefreshFrequency::~OAIRefreshFrequency() {}

void OAIRefreshFrequency::initializeModel() {

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_refresh_on_day_isSet = false;
    m_refresh_on_day_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_time_of_the_day_isSet = false;
    m_time_of_the_day_isValid = false;
}

void OAIRefreshFrequency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefreshFrequency::fromJsonObject(QJsonObject json) {

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("Interval")]);
    m_interval_isSet = !json[QString("Interval")].isNull() && m_interval_isValid;

    m_refresh_on_day_isValid = ::OpenAPI::fromJsonValue(m_refresh_on_day, json[QString("RefreshOnDay")]);
    m_refresh_on_day_isSet = !json[QString("RefreshOnDay")].isNull() && m_refresh_on_day_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;

    m_time_of_the_day_isValid = ::OpenAPI::fromJsonValue(m_time_of_the_day, json[QString("TimeOfTheDay")]);
    m_time_of_the_day_isSet = !json[QString("TimeOfTheDay")].isNull() && m_time_of_the_day_isValid;
}

QString OAIRefreshFrequency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefreshFrequency::asJsonObject() const {
    QJsonObject obj;
    if (m_interval.isSet()) {
        obj.insert(QString("Interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_refresh_on_day.isSet()) {
        obj.insert(QString("RefreshOnDay"), ::OpenAPI::toJsonValue(m_refresh_on_day));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_time_of_the_day_isSet) {
        obj.insert(QString("TimeOfTheDay"), ::OpenAPI::toJsonValue(m_time_of_the_day));
    }
    return obj;
}

OAIRefreshInterval OAIRefreshFrequency::getInterval() const {
    return m_interval;
}
void OAIRefreshFrequency::setInterval(const OAIRefreshInterval &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIRefreshFrequency::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIRefreshFrequency::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIRefreshFrequency_RefreshOnDay OAIRefreshFrequency::getRefreshOnDay() const {
    return m_refresh_on_day;
}
void OAIRefreshFrequency::setRefreshOnDay(const OAIRefreshFrequency_RefreshOnDay &refresh_on_day) {
    m_refresh_on_day = refresh_on_day;
    m_refresh_on_day_isSet = true;
}

bool OAIRefreshFrequency::is_refresh_on_day_Set() const{
    return m_refresh_on_day_isSet;
}

bool OAIRefreshFrequency::is_refresh_on_day_Valid() const{
    return m_refresh_on_day_isValid;
}

QString OAIRefreshFrequency::getTimezone() const {
    return m_timezone;
}
void OAIRefreshFrequency::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIRefreshFrequency::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIRefreshFrequency::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIRefreshFrequency::getTimeOfTheDay() const {
    return m_time_of_the_day;
}
void OAIRefreshFrequency::setTimeOfTheDay(const QString &time_of_the_day) {
    m_time_of_the_day = time_of_the_day;
    m_time_of_the_day_isSet = true;
}

bool OAIRefreshFrequency::is_time_of_the_day_Set() const{
    return m_time_of_the_day_isSet;
}

bool OAIRefreshFrequency::is_time_of_the_day_Valid() const{
    return m_time_of_the_day_isValid;
}

bool OAIRefreshFrequency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_on_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_the_day_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefreshFrequency::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interval_isValid && true;
}

} // namespace OpenAPI
