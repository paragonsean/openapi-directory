/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilledMapVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilledMapVisual_ChartConfiguration::OAIFilledMapVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilledMapVisual_ChartConfiguration::OAIFilledMapVisual_ChartConfiguration() {
    this->initializeModel();
}

OAIFilledMapVisual_ChartConfiguration::~OAIFilledMapVisual_ChartConfiguration() {}

void OAIFilledMapVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_window_options_isSet = false;
    m_window_options_isValid = false;

    m_map_style_options_isSet = false;
    m_map_style_options_isValid = false;
}

void OAIFilledMapVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilledMapVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_window_options_isValid = ::OpenAPI::fromJsonValue(m_window_options, json[QString("WindowOptions")]);
    m_window_options_isSet = !json[QString("WindowOptions")].isNull() && m_window_options_isValid;

    m_map_style_options_isValid = ::OpenAPI::fromJsonValue(m_map_style_options, json[QString("MapStyleOptions")]);
    m_map_style_options_isSet = !json[QString("MapStyleOptions")].isNull() && m_map_style_options_isValid;
}

QString OAIFilledMapVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilledMapVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_window_options.isSet()) {
        obj.insert(QString("WindowOptions"), ::OpenAPI::toJsonValue(m_window_options));
    }
    if (m_map_style_options.isSet()) {
        obj.insert(QString("MapStyleOptions"), ::OpenAPI::toJsonValue(m_map_style_options));
    }
    return obj;
}

OAIFilledMapConfiguration_FieldWells OAIFilledMapVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIFilledMapVisual_ChartConfiguration::setFieldWells(const OAIFilledMapConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIFilledMapVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIFilledMapVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIFilledMapConfiguration_SortConfiguration OAIFilledMapVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIFilledMapVisual_ChartConfiguration::setSortConfiguration(const OAIFilledMapConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIFilledMapVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIFilledMapVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIBarChartConfiguration_Legend OAIFilledMapVisual_ChartConfiguration::getLegend() const {
    return m_legend;
}
void OAIFilledMapVisual_ChartConfiguration::setLegend(const OAIBarChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIFilledMapVisual_ChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIFilledMapVisual_ChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIBarChartConfiguration_Tooltip OAIFilledMapVisual_ChartConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIFilledMapVisual_ChartConfiguration::setTooltip(const OAIBarChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIFilledMapVisual_ChartConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIFilledMapVisual_ChartConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

OAIFilledMapConfiguration_WindowOptions OAIFilledMapVisual_ChartConfiguration::getWindowOptions() const {
    return m_window_options;
}
void OAIFilledMapVisual_ChartConfiguration::setWindowOptions(const OAIFilledMapConfiguration_WindowOptions &window_options) {
    m_window_options = window_options;
    m_window_options_isSet = true;
}

bool OAIFilledMapVisual_ChartConfiguration::is_window_options_Set() const{
    return m_window_options_isSet;
}

bool OAIFilledMapVisual_ChartConfiguration::is_window_options_Valid() const{
    return m_window_options_isValid;
}

OAIFilledMapConfiguration_MapStyleOptions OAIFilledMapVisual_ChartConfiguration::getMapStyleOptions() const {
    return m_map_style_options;
}
void OAIFilledMapVisual_ChartConfiguration::setMapStyleOptions(const OAIFilledMapConfiguration_MapStyleOptions &map_style_options) {
    m_map_style_options = map_style_options;
    m_map_style_options_isSet = true;
}

bool OAIFilledMapVisual_ChartConfiguration::is_map_style_options_Set() const{
    return m_map_style_options_isSet;
}

bool OAIFilledMapVisual_ChartConfiguration::is_map_style_options_Valid() const{
    return m_map_style_options_isValid;
}

bool OAIFilledMapVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_style_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilledMapVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
