/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateTemplate_request.h
 *
 * 
 */

#ifndef OAICreateTemplate_request_H
#define OAICreateTemplate_request_H

#include <QJsonObject>

#include "OAIResourcePermission.h"
#include "OAITag.h"
#include "OAIUpdateTemplate_request_Definition.h"
#include "OAIUpdateTemplate_request_SourceEntity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIResourcePermission;
class OAIUpdateTemplate_request_SourceEntity;
class OAITag;
class OAIUpdateTemplate_request_Definition;

class OAICreateTemplate_request : public OAIObject {
public:
    OAICreateTemplate_request();
    OAICreateTemplate_request(QString json);
    ~OAICreateTemplate_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIResourcePermission> getPermissions() const;
    void setPermissions(const QList<OAIResourcePermission> &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    OAIUpdateTemplate_request_SourceEntity getSourceEntity() const;
    void setSourceEntity(const OAIUpdateTemplate_request_SourceEntity &source_entity);
    bool is_source_entity_Set() const;
    bool is_source_entity_Valid() const;

    QList<OAITag> getTags() const;
    void setTags(const QList<OAITag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getVersionDescription() const;
    void setVersionDescription(const QString &version_description);
    bool is_version_description_Set() const;
    bool is_version_description_Valid() const;

    OAIUpdateTemplate_request_Definition getDefinition() const;
    void setDefinition(const OAIUpdateTemplate_request_Definition &definition);
    bool is_definition_Set() const;
    bool is_definition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIResourcePermission> m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    OAIUpdateTemplate_request_SourceEntity m_source_entity;
    bool m_source_entity_isSet;
    bool m_source_entity_isValid;

    QList<OAITag> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_version_description;
    bool m_version_description_isSet;
    bool m_version_description_isValid;

    OAIUpdateTemplate_request_Definition m_definition;
    bool m_definition_isSet;
    bool m_definition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateTemplate_request)

#endif // OAICreateTemplate_request_H
