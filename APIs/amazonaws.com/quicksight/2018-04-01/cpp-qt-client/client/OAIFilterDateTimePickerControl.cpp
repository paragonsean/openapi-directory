/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterDateTimePickerControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterDateTimePickerControl::OAIFilterDateTimePickerControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterDateTimePickerControl::OAIFilterDateTimePickerControl() {
    this->initializeModel();
}

OAIFilterDateTimePickerControl::~OAIFilterDateTimePickerControl() {}

void OAIFilterDateTimePickerControl::initializeModel() {

    m_filter_control_id_isSet = false;
    m_filter_control_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_source_filter_id_isSet = false;
    m_source_filter_id_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFilterDateTimePickerControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterDateTimePickerControl::fromJsonObject(QJsonObject json) {

    m_filter_control_id_isValid = ::OpenAPI::fromJsonValue(m_filter_control_id, json[QString("FilterControlId")]);
    m_filter_control_id_isSet = !json[QString("FilterControlId")].isNull() && m_filter_control_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_source_filter_id_isValid = ::OpenAPI::fromJsonValue(m_source_filter_id, json[QString("SourceFilterId")]);
    m_source_filter_id_isSet = !json[QString("SourceFilterId")].isNull() && m_source_filter_id_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("DisplayOptions")]);
    m_display_options_isSet = !json[QString("DisplayOptions")].isNull() && m_display_options_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIFilterDateTimePickerControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterDateTimePickerControl::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_control_id_isSet) {
        obj.insert(QString("FilterControlId"), ::OpenAPI::toJsonValue(m_filter_control_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_source_filter_id_isSet) {
        obj.insert(QString("SourceFilterId"), ::OpenAPI::toJsonValue(m_source_filter_id));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("DisplayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFilterDateTimePickerControl::getFilterControlId() const {
    return m_filter_control_id;
}
void OAIFilterDateTimePickerControl::setFilterControlId(const QString &filter_control_id) {
    m_filter_control_id = filter_control_id;
    m_filter_control_id_isSet = true;
}

bool OAIFilterDateTimePickerControl::is_filter_control_id_Set() const{
    return m_filter_control_id_isSet;
}

bool OAIFilterDateTimePickerControl::is_filter_control_id_Valid() const{
    return m_filter_control_id_isValid;
}

QString OAIFilterDateTimePickerControl::getTitle() const {
    return m_title;
}
void OAIFilterDateTimePickerControl::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFilterDateTimePickerControl::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFilterDateTimePickerControl::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFilterDateTimePickerControl::getSourceFilterId() const {
    return m_source_filter_id;
}
void OAIFilterDateTimePickerControl::setSourceFilterId(const QString &source_filter_id) {
    m_source_filter_id = source_filter_id;
    m_source_filter_id_isSet = true;
}

bool OAIFilterDateTimePickerControl::is_source_filter_id_Set() const{
    return m_source_filter_id_isSet;
}

bool OAIFilterDateTimePickerControl::is_source_filter_id_Valid() const{
    return m_source_filter_id_isValid;
}

OAIFilterDateTimePickerControl_DisplayOptions OAIFilterDateTimePickerControl::getDisplayOptions() const {
    return m_display_options;
}
void OAIFilterDateTimePickerControl::setDisplayOptions(const OAIFilterDateTimePickerControl_DisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIFilterDateTimePickerControl::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIFilterDateTimePickerControl::is_display_options_Valid() const{
    return m_display_options_isValid;
}

OAISheetControlDateTimePickerType OAIFilterDateTimePickerControl::getType() const {
    return m_type;
}
void OAIFilterDateTimePickerControl::setType(const OAISheetControlDateTimePickerType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFilterDateTimePickerControl::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFilterDateTimePickerControl::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFilterDateTimePickerControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterDateTimePickerControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_control_id_isValid && m_title_isValid && m_source_filter_id_isValid && true;
}

} // namespace OpenAPI
