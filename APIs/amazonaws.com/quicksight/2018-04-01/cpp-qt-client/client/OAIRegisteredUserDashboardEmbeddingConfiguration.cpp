/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredUserDashboardEmbeddingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredUserDashboardEmbeddingConfiguration::OAIRegisteredUserDashboardEmbeddingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredUserDashboardEmbeddingConfiguration::OAIRegisteredUserDashboardEmbeddingConfiguration() {
    this->initializeModel();
}

OAIRegisteredUserDashboardEmbeddingConfiguration::~OAIRegisteredUserDashboardEmbeddingConfiguration() {}

void OAIRegisteredUserDashboardEmbeddingConfiguration::initializeModel() {

    m_initial_dashboard_id_isSet = false;
    m_initial_dashboard_id_isValid = false;

    m_feature_configurations_isSet = false;
    m_feature_configurations_isValid = false;
}

void OAIRegisteredUserDashboardEmbeddingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredUserDashboardEmbeddingConfiguration::fromJsonObject(QJsonObject json) {

    m_initial_dashboard_id_isValid = ::OpenAPI::fromJsonValue(m_initial_dashboard_id, json[QString("InitialDashboardId")]);
    m_initial_dashboard_id_isSet = !json[QString("InitialDashboardId")].isNull() && m_initial_dashboard_id_isValid;

    m_feature_configurations_isValid = ::OpenAPI::fromJsonValue(m_feature_configurations, json[QString("FeatureConfigurations")]);
    m_feature_configurations_isSet = !json[QString("FeatureConfigurations")].isNull() && m_feature_configurations_isValid;
}

QString OAIRegisteredUserDashboardEmbeddingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredUserDashboardEmbeddingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_dashboard_id_isSet) {
        obj.insert(QString("InitialDashboardId"), ::OpenAPI::toJsonValue(m_initial_dashboard_id));
    }
    if (m_feature_configurations.isSet()) {
        obj.insert(QString("FeatureConfigurations"), ::OpenAPI::toJsonValue(m_feature_configurations));
    }
    return obj;
}

QString OAIRegisteredUserDashboardEmbeddingConfiguration::getInitialDashboardId() const {
    return m_initial_dashboard_id;
}
void OAIRegisteredUserDashboardEmbeddingConfiguration::setInitialDashboardId(const QString &initial_dashboard_id) {
    m_initial_dashboard_id = initial_dashboard_id;
    m_initial_dashboard_id_isSet = true;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration::is_initial_dashboard_id_Set() const{
    return m_initial_dashboard_id_isSet;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration::is_initial_dashboard_id_Valid() const{
    return m_initial_dashboard_id_isValid;
}

OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations OAIRegisteredUserDashboardEmbeddingConfiguration::getFeatureConfigurations() const {
    return m_feature_configurations;
}
void OAIRegisteredUserDashboardEmbeddingConfiguration::setFeatureConfigurations(const OAIRegisteredUserDashboardEmbeddingConfiguration_FeatureConfigurations &feature_configurations) {
    m_feature_configurations = feature_configurations;
    m_feature_configurations_isSet = true;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration::is_feature_configurations_Set() const{
    return m_feature_configurations_isSet;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration::is_feature_configurations_Valid() const{
    return m_feature_configurations_isValid;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_dashboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredUserDashboardEmbeddingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_initial_dashboard_id_isValid && true;
}

} // namespace OpenAPI
