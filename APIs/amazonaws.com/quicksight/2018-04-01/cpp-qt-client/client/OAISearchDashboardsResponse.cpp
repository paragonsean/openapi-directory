/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchDashboardsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchDashboardsResponse::OAISearchDashboardsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchDashboardsResponse::OAISearchDashboardsResponse() {
    this->initializeModel();
}

OAISearchDashboardsResponse::~OAISearchDashboardsResponse() {}

void OAISearchDashboardsResponse::initializeModel() {

    m_dashboard_summary_list_isSet = false;
    m_dashboard_summary_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAISearchDashboardsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchDashboardsResponse::fromJsonObject(QJsonObject json) {

    m_dashboard_summary_list_isValid = ::OpenAPI::fromJsonValue(m_dashboard_summary_list, json[QString("DashboardSummaryList")]);
    m_dashboard_summary_list_isSet = !json[QString("DashboardSummaryList")].isNull() && m_dashboard_summary_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAISearchDashboardsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchDashboardsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard_summary_list.isSet()) {
        obj.insert(QString("DashboardSummaryList"), ::OpenAPI::toJsonValue(m_dashboard_summary_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QList OAISearchDashboardsResponse::getDashboardSummaryList() const {
    return m_dashboard_summary_list;
}
void OAISearchDashboardsResponse::setDashboardSummaryList(const QList &dashboard_summary_list) {
    m_dashboard_summary_list = dashboard_summary_list;
    m_dashboard_summary_list_isSet = true;
}

bool OAISearchDashboardsResponse::is_dashboard_summary_list_Set() const{
    return m_dashboard_summary_list_isSet;
}

bool OAISearchDashboardsResponse::is_dashboard_summary_list_Valid() const{
    return m_dashboard_summary_list_isValid;
}

QString OAISearchDashboardsResponse::getNextToken() const {
    return m_next_token;
}
void OAISearchDashboardsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchDashboardsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchDashboardsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAISearchDashboardsResponse::getStatus() const {
    return m_status;
}
void OAISearchDashboardsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISearchDashboardsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISearchDashboardsResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISearchDashboardsResponse::getRequestId() const {
    return m_request_id;
}
void OAISearchDashboardsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAISearchDashboardsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAISearchDashboardsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAISearchDashboardsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard_summary_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchDashboardsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
