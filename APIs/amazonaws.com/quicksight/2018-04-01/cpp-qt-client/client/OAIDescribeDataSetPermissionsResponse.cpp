/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDataSetPermissionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDataSetPermissionsResponse::OAIDescribeDataSetPermissionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDataSetPermissionsResponse::OAIDescribeDataSetPermissionsResponse() {
    this->initializeModel();
}

OAIDescribeDataSetPermissionsResponse::~OAIDescribeDataSetPermissionsResponse() {}

void OAIDescribeDataSetPermissionsResponse::initializeModel() {

    m_data_set_arn_isSet = false;
    m_data_set_arn_isValid = false;

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeDataSetPermissionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDataSetPermissionsResponse::fromJsonObject(QJsonObject json) {

    m_data_set_arn_isValid = ::OpenAPI::fromJsonValue(m_data_set_arn, json[QString("DataSetArn")]);
    m_data_set_arn_isSet = !json[QString("DataSetArn")].isNull() && m_data_set_arn_isValid;

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("DataSetId")]);
    m_data_set_id_isSet = !json[QString("DataSetId")].isNull() && m_data_set_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeDataSetPermissionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDataSetPermissionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_arn_isSet) {
        obj.insert(QString("DataSetArn"), ::OpenAPI::toJsonValue(m_data_set_arn));
    }
    if (m_data_set_id_isSet) {
        obj.insert(QString("DataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDescribeDataSetPermissionsResponse::getDataSetArn() const {
    return m_data_set_arn;
}
void OAIDescribeDataSetPermissionsResponse::setDataSetArn(const QString &data_set_arn) {
    m_data_set_arn = data_set_arn;
    m_data_set_arn_isSet = true;
}

bool OAIDescribeDataSetPermissionsResponse::is_data_set_arn_Set() const{
    return m_data_set_arn_isSet;
}

bool OAIDescribeDataSetPermissionsResponse::is_data_set_arn_Valid() const{
    return m_data_set_arn_isValid;
}

QString OAIDescribeDataSetPermissionsResponse::getDataSetId() const {
    return m_data_set_id;
}
void OAIDescribeDataSetPermissionsResponse::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIDescribeDataSetPermissionsResponse::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIDescribeDataSetPermissionsResponse::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QList OAIDescribeDataSetPermissionsResponse::getPermissions() const {
    return m_permissions;
}
void OAIDescribeDataSetPermissionsResponse::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIDescribeDataSetPermissionsResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIDescribeDataSetPermissionsResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIDescribeDataSetPermissionsResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeDataSetPermissionsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeDataSetPermissionsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeDataSetPermissionsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeDataSetPermissionsResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDataSetPermissionsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDataSetPermissionsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDataSetPermissionsResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeDataSetPermissionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDataSetPermissionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
