/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDashboardPermissionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDashboardPermissionsResponse::OAIDescribeDashboardPermissionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDashboardPermissionsResponse::OAIDescribeDashboardPermissionsResponse() {
    this->initializeModel();
}

OAIDescribeDashboardPermissionsResponse::~OAIDescribeDashboardPermissionsResponse() {}

void OAIDescribeDashboardPermissionsResponse::initializeModel() {

    m_dashboard_id_isSet = false;
    m_dashboard_id_isValid = false;

    m_dashboard_arn_isSet = false;
    m_dashboard_arn_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_link_sharing_configuration_isSet = false;
    m_link_sharing_configuration_isValid = false;
}

void OAIDescribeDashboardPermissionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDashboardPermissionsResponse::fromJsonObject(QJsonObject json) {

    m_dashboard_id_isValid = ::OpenAPI::fromJsonValue(m_dashboard_id, json[QString("DashboardId")]);
    m_dashboard_id_isSet = !json[QString("DashboardId")].isNull() && m_dashboard_id_isValid;

    m_dashboard_arn_isValid = ::OpenAPI::fromJsonValue(m_dashboard_arn, json[QString("DashboardArn")]);
    m_dashboard_arn_isSet = !json[QString("DashboardArn")].isNull() && m_dashboard_arn_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_link_sharing_configuration_isValid = ::OpenAPI::fromJsonValue(m_link_sharing_configuration, json[QString("LinkSharingConfiguration")]);
    m_link_sharing_configuration_isSet = !json[QString("LinkSharingConfiguration")].isNull() && m_link_sharing_configuration_isValid;
}

QString OAIDescribeDashboardPermissionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDashboardPermissionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard_id_isSet) {
        obj.insert(QString("DashboardId"), ::OpenAPI::toJsonValue(m_dashboard_id));
    }
    if (m_dashboard_arn_isSet) {
        obj.insert(QString("DashboardArn"), ::OpenAPI::toJsonValue(m_dashboard_arn));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_link_sharing_configuration.isSet()) {
        obj.insert(QString("LinkSharingConfiguration"), ::OpenAPI::toJsonValue(m_link_sharing_configuration));
    }
    return obj;
}

QString OAIDescribeDashboardPermissionsResponse::getDashboardId() const {
    return m_dashboard_id;
}
void OAIDescribeDashboardPermissionsResponse::setDashboardId(const QString &dashboard_id) {
    m_dashboard_id = dashboard_id;
    m_dashboard_id_isSet = true;
}

bool OAIDescribeDashboardPermissionsResponse::is_dashboard_id_Set() const{
    return m_dashboard_id_isSet;
}

bool OAIDescribeDashboardPermissionsResponse::is_dashboard_id_Valid() const{
    return m_dashboard_id_isValid;
}

QString OAIDescribeDashboardPermissionsResponse::getDashboardArn() const {
    return m_dashboard_arn;
}
void OAIDescribeDashboardPermissionsResponse::setDashboardArn(const QString &dashboard_arn) {
    m_dashboard_arn = dashboard_arn;
    m_dashboard_arn_isSet = true;
}

bool OAIDescribeDashboardPermissionsResponse::is_dashboard_arn_Set() const{
    return m_dashboard_arn_isSet;
}

bool OAIDescribeDashboardPermissionsResponse::is_dashboard_arn_Valid() const{
    return m_dashboard_arn_isValid;
}

QList OAIDescribeDashboardPermissionsResponse::getPermissions() const {
    return m_permissions;
}
void OAIDescribeDashboardPermissionsResponse::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIDescribeDashboardPermissionsResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIDescribeDashboardPermissionsResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

qint32 OAIDescribeDashboardPermissionsResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDashboardPermissionsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDashboardPermissionsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDashboardPermissionsResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeDashboardPermissionsResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeDashboardPermissionsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeDashboardPermissionsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeDashboardPermissionsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration OAIDescribeDashboardPermissionsResponse::getLinkSharingConfiguration() const {
    return m_link_sharing_configuration;
}
void OAIDescribeDashboardPermissionsResponse::setLinkSharingConfiguration(const OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration &link_sharing_configuration) {
    m_link_sharing_configuration = link_sharing_configuration;
    m_link_sharing_configuration_isSet = true;
}

bool OAIDescribeDashboardPermissionsResponse::is_link_sharing_configuration_Set() const{
    return m_link_sharing_configuration_isSet;
}

bool OAIDescribeDashboardPermissionsResponse::is_link_sharing_configuration_Valid() const{
    return m_link_sharing_configuration_isValid;
}

bool OAIDescribeDashboardPermissionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_sharing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDashboardPermissionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
