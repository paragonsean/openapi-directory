/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions() {
    this->initializeModel();
}

OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::~OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions() {}

void OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::initializeModel() {

    m_optimized_view_port_width_isSet = false;
    m_optimized_view_port_width_isValid = false;
}

void OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::fromJsonObject(QJsonObject json) {

    m_optimized_view_port_width_isValid = ::OpenAPI::fromJsonValue(m_optimized_view_port_width, json[QString("OptimizedViewPortWidth")]);
    m_optimized_view_port_width_isSet = !json[QString("OptimizedViewPortWidth")].isNull() && m_optimized_view_port_width_isValid;
}

QString OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_optimized_view_port_width_isSet) {
        obj.insert(QString("OptimizedViewPortWidth"), ::OpenAPI::toJsonValue(m_optimized_view_port_width));
    }
    return obj;
}

QString OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::getOptimizedViewPortWidth() const {
    return m_optimized_view_port_width;
}
void OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::setOptimizedViewPortWidth(const QString &optimized_view_port_width) {
    m_optimized_view_port_width = optimized_view_port_width;
    m_optimized_view_port_width_isSet = true;
}

bool OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::is_optimized_view_port_width_Set() const{
    return m_optimized_view_port_width_isSet;
}

bool OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::is_optimized_view_port_width_Valid() const{
    return m_optimized_view_port_width_isValid;
}

bool OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_optimized_view_port_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFreeFormLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_optimized_view_port_width_isValid && true;
}

} // namespace OpenAPI
