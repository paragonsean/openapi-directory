/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3BucketConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3BucketConfiguration::OAIS3BucketConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3BucketConfiguration::OAIS3BucketConfiguration() {
    this->initializeModel();
}

OAIS3BucketConfiguration::~OAIS3BucketConfiguration() {}

void OAIS3BucketConfiguration::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_prefix_isSet = false;
    m_bucket_prefix_isValid = false;

    m_bucket_region_isSet = false;
    m_bucket_region_isValid = false;
}

void OAIS3BucketConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3BucketConfiguration::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_prefix_isValid = ::OpenAPI::fromJsonValue(m_bucket_prefix, json[QString("BucketPrefix")]);
    m_bucket_prefix_isSet = !json[QString("BucketPrefix")].isNull() && m_bucket_prefix_isValid;

    m_bucket_region_isValid = ::OpenAPI::fromJsonValue(m_bucket_region, json[QString("BucketRegion")]);
    m_bucket_region_isSet = !json[QString("BucketRegion")].isNull() && m_bucket_region_isValid;
}

QString OAIS3BucketConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3BucketConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_prefix_isSet) {
        obj.insert(QString("BucketPrefix"), ::OpenAPI::toJsonValue(m_bucket_prefix));
    }
    if (m_bucket_region_isSet) {
        obj.insert(QString("BucketRegion"), ::OpenAPI::toJsonValue(m_bucket_region));
    }
    return obj;
}

QString OAIS3BucketConfiguration::getBucketName() const {
    return m_bucket_name;
}
void OAIS3BucketConfiguration::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIS3BucketConfiguration::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIS3BucketConfiguration::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIS3BucketConfiguration::getBucketPrefix() const {
    return m_bucket_prefix;
}
void OAIS3BucketConfiguration::setBucketPrefix(const QString &bucket_prefix) {
    m_bucket_prefix = bucket_prefix;
    m_bucket_prefix_isSet = true;
}

bool OAIS3BucketConfiguration::is_bucket_prefix_Set() const{
    return m_bucket_prefix_isSet;
}

bool OAIS3BucketConfiguration::is_bucket_prefix_Valid() const{
    return m_bucket_prefix_isValid;
}

QString OAIS3BucketConfiguration::getBucketRegion() const {
    return m_bucket_region;
}
void OAIS3BucketConfiguration::setBucketRegion(const QString &bucket_region) {
    m_bucket_region = bucket_region;
    m_bucket_region_isSet = true;
}

bool OAIS3BucketConfiguration::is_bucket_region_Set() const{
    return m_bucket_region_isSet;
}

bool OAIS3BucketConfiguration::is_bucket_region_Valid() const{
    return m_bucket_region_isValid;
}

bool OAIS3BucketConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3BucketConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_name_isValid && m_bucket_prefix_isValid && m_bucket_region_isValid && true;
}

} // namespace OpenAPI
