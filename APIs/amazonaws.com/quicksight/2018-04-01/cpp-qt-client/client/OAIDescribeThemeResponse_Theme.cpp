/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeThemeResponse_Theme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeThemeResponse_Theme::OAIDescribeThemeResponse_Theme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeThemeResponse_Theme::OAIDescribeThemeResponse_Theme() {
    this->initializeModel();
}

OAIDescribeThemeResponse_Theme::~OAIDescribeThemeResponse_Theme() {}

void OAIDescribeThemeResponse_Theme::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDescribeThemeResponse_Theme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeThemeResponse_Theme::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("ThemeId")]);
    m_theme_id_isSet = !json[QString("ThemeId")].isNull() && m_theme_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIDescribeThemeResponse_Theme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeThemeResponse_Theme::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("ThemeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    if (m_version.isSet()) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDescribeThemeResponse_Theme::getArn() const {
    return m_arn;
}
void OAIDescribeThemeResponse_Theme::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeThemeResponse_Theme::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeThemeResponse_Theme::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeThemeResponse_Theme::getName() const {
    return m_name;
}
void OAIDescribeThemeResponse_Theme::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeThemeResponse_Theme::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeThemeResponse_Theme::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeThemeResponse_Theme::getThemeId() const {
    return m_theme_id;
}
void OAIDescribeThemeResponse_Theme::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAIDescribeThemeResponse_Theme::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAIDescribeThemeResponse_Theme::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

OAIThemeVersion OAIDescribeThemeResponse_Theme::getVersion() const {
    return m_version;
}
void OAIDescribeThemeResponse_Theme::setVersion(const OAIThemeVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDescribeThemeResponse_Theme::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDescribeThemeResponse_Theme::is_version_Valid() const{
    return m_version_isValid;
}

QDateTime OAIDescribeThemeResponse_Theme::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeThemeResponse_Theme::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeThemeResponse_Theme::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeThemeResponse_Theme::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDescribeThemeResponse_Theme::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDescribeThemeResponse_Theme::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDescribeThemeResponse_Theme::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDescribeThemeResponse_Theme::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

OAIThemeType OAIDescribeThemeResponse_Theme::getType() const {
    return m_type;
}
void OAIDescribeThemeResponse_Theme::setType(const OAIThemeType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeThemeResponse_Theme::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeThemeResponse_Theme::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDescribeThemeResponse_Theme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeThemeResponse_Theme::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
