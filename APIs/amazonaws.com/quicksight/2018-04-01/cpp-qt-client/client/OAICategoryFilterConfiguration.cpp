/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryFilterConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryFilterConfiguration::OAICategoryFilterConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryFilterConfiguration::OAICategoryFilterConfiguration() {
    this->initializeModel();
}

OAICategoryFilterConfiguration::~OAICategoryFilterConfiguration() {}

void OAICategoryFilterConfiguration::initializeModel() {

    m_filter_list_configuration_isSet = false;
    m_filter_list_configuration_isValid = false;

    m_custom_filter_list_configuration_isSet = false;
    m_custom_filter_list_configuration_isValid = false;

    m_custom_filter_configuration_isSet = false;
    m_custom_filter_configuration_isValid = false;
}

void OAICategoryFilterConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryFilterConfiguration::fromJsonObject(QJsonObject json) {

    m_filter_list_configuration_isValid = ::OpenAPI::fromJsonValue(m_filter_list_configuration, json[QString("FilterListConfiguration")]);
    m_filter_list_configuration_isSet = !json[QString("FilterListConfiguration")].isNull() && m_filter_list_configuration_isValid;

    m_custom_filter_list_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_filter_list_configuration, json[QString("CustomFilterListConfiguration")]);
    m_custom_filter_list_configuration_isSet = !json[QString("CustomFilterListConfiguration")].isNull() && m_custom_filter_list_configuration_isValid;

    m_custom_filter_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_filter_configuration, json[QString("CustomFilterConfiguration")]);
    m_custom_filter_configuration_isSet = !json[QString("CustomFilterConfiguration")].isNull() && m_custom_filter_configuration_isValid;
}

QString OAICategoryFilterConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryFilterConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_list_configuration.isSet()) {
        obj.insert(QString("FilterListConfiguration"), ::OpenAPI::toJsonValue(m_filter_list_configuration));
    }
    if (m_custom_filter_list_configuration.isSet()) {
        obj.insert(QString("CustomFilterListConfiguration"), ::OpenAPI::toJsonValue(m_custom_filter_list_configuration));
    }
    if (m_custom_filter_configuration.isSet()) {
        obj.insert(QString("CustomFilterConfiguration"), ::OpenAPI::toJsonValue(m_custom_filter_configuration));
    }
    return obj;
}

OAICategoryFilterConfiguration_FilterListConfiguration OAICategoryFilterConfiguration::getFilterListConfiguration() const {
    return m_filter_list_configuration;
}
void OAICategoryFilterConfiguration::setFilterListConfiguration(const OAICategoryFilterConfiguration_FilterListConfiguration &filter_list_configuration) {
    m_filter_list_configuration = filter_list_configuration;
    m_filter_list_configuration_isSet = true;
}

bool OAICategoryFilterConfiguration::is_filter_list_configuration_Set() const{
    return m_filter_list_configuration_isSet;
}

bool OAICategoryFilterConfiguration::is_filter_list_configuration_Valid() const{
    return m_filter_list_configuration_isValid;
}

OAICategoryFilterConfiguration_CustomFilterListConfiguration OAICategoryFilterConfiguration::getCustomFilterListConfiguration() const {
    return m_custom_filter_list_configuration;
}
void OAICategoryFilterConfiguration::setCustomFilterListConfiguration(const OAICategoryFilterConfiguration_CustomFilterListConfiguration &custom_filter_list_configuration) {
    m_custom_filter_list_configuration = custom_filter_list_configuration;
    m_custom_filter_list_configuration_isSet = true;
}

bool OAICategoryFilterConfiguration::is_custom_filter_list_configuration_Set() const{
    return m_custom_filter_list_configuration_isSet;
}

bool OAICategoryFilterConfiguration::is_custom_filter_list_configuration_Valid() const{
    return m_custom_filter_list_configuration_isValid;
}

OAICategoryFilterConfiguration_CustomFilterConfiguration OAICategoryFilterConfiguration::getCustomFilterConfiguration() const {
    return m_custom_filter_configuration;
}
void OAICategoryFilterConfiguration::setCustomFilterConfiguration(const OAICategoryFilterConfiguration_CustomFilterConfiguration &custom_filter_configuration) {
    m_custom_filter_configuration = custom_filter_configuration;
    m_custom_filter_configuration_isSet = true;
}

bool OAICategoryFilterConfiguration::is_custom_filter_configuration_Set() const{
    return m_custom_filter_configuration_isSet;
}

bool OAICategoryFilterConfiguration::is_custom_filter_configuration_Valid() const{
    return m_custom_filter_configuration_isValid;
}

bool OAICategoryFilterConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_list_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_filter_list_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_filter_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryFilterConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
