/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions() {
    this->initializeModel();
}

OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::~OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions() {}

void OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::initializeModel() {

    m_resize_option_isSet = false;
    m_resize_option_isValid = false;

    m_optimized_view_port_width_isSet = false;
    m_optimized_view_port_width_isValid = false;
}

void OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::fromJsonObject(QJsonObject json) {

    m_resize_option_isValid = ::OpenAPI::fromJsonValue(m_resize_option, json[QString("ResizeOption")]);
    m_resize_option_isSet = !json[QString("ResizeOption")].isNull() && m_resize_option_isValid;

    m_optimized_view_port_width_isValid = ::OpenAPI::fromJsonValue(m_optimized_view_port_width, json[QString("OptimizedViewPortWidth")]);
    m_optimized_view_port_width_isSet = !json[QString("OptimizedViewPortWidth")].isNull() && m_optimized_view_port_width_isValid;
}

QString OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_resize_option.isSet()) {
        obj.insert(QString("ResizeOption"), ::OpenAPI::toJsonValue(m_resize_option));
    }
    if (m_optimized_view_port_width_isSet) {
        obj.insert(QString("OptimizedViewPortWidth"), ::OpenAPI::toJsonValue(m_optimized_view_port_width));
    }
    return obj;
}

OAIResizeOption OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::getResizeOption() const {
    return m_resize_option;
}
void OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::setResizeOption(const OAIResizeOption &resize_option) {
    m_resize_option = resize_option;
    m_resize_option_isSet = true;
}

bool OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::is_resize_option_Set() const{
    return m_resize_option_isSet;
}

bool OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::is_resize_option_Valid() const{
    return m_resize_option_isValid;
}

QString OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::getOptimizedViewPortWidth() const {
    return m_optimized_view_port_width;
}
void OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::setOptimizedViewPortWidth(const QString &optimized_view_port_width) {
    m_optimized_view_port_width = optimized_view_port_width;
    m_optimized_view_port_width_isSet = true;
}

bool OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::is_optimized_view_port_width_Set() const{
    return m_optimized_view_port_width_isSet;
}

bool OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::is_optimized_view_port_width_Valid() const{
    return m_optimized_view_port_width_isValid;
}

bool OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resize_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimized_view_port_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resize_option_isValid && true;
}

} // namespace OpenAPI
