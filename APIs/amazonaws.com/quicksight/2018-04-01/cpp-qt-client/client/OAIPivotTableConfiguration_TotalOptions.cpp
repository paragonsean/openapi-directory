/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableConfiguration_TotalOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableConfiguration_TotalOptions::OAIPivotTableConfiguration_TotalOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableConfiguration_TotalOptions::OAIPivotTableConfiguration_TotalOptions() {
    this->initializeModel();
}

OAIPivotTableConfiguration_TotalOptions::~OAIPivotTableConfiguration_TotalOptions() {}

void OAIPivotTableConfiguration_TotalOptions::initializeModel() {

    m_row_subtotal_options_isSet = false;
    m_row_subtotal_options_isValid = false;

    m_column_subtotal_options_isSet = false;
    m_column_subtotal_options_isValid = false;

    m_row_total_options_isSet = false;
    m_row_total_options_isValid = false;

    m_column_total_options_isSet = false;
    m_column_total_options_isValid = false;
}

void OAIPivotTableConfiguration_TotalOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableConfiguration_TotalOptions::fromJsonObject(QJsonObject json) {

    m_row_subtotal_options_isValid = ::OpenAPI::fromJsonValue(m_row_subtotal_options, json[QString("RowSubtotalOptions")]);
    m_row_subtotal_options_isSet = !json[QString("RowSubtotalOptions")].isNull() && m_row_subtotal_options_isValid;

    m_column_subtotal_options_isValid = ::OpenAPI::fromJsonValue(m_column_subtotal_options, json[QString("ColumnSubtotalOptions")]);
    m_column_subtotal_options_isSet = !json[QString("ColumnSubtotalOptions")].isNull() && m_column_subtotal_options_isValid;

    m_row_total_options_isValid = ::OpenAPI::fromJsonValue(m_row_total_options, json[QString("RowTotalOptions")]);
    m_row_total_options_isSet = !json[QString("RowTotalOptions")].isNull() && m_row_total_options_isValid;

    m_column_total_options_isValid = ::OpenAPI::fromJsonValue(m_column_total_options, json[QString("ColumnTotalOptions")]);
    m_column_total_options_isSet = !json[QString("ColumnTotalOptions")].isNull() && m_column_total_options_isValid;
}

QString OAIPivotTableConfiguration_TotalOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableConfiguration_TotalOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_row_subtotal_options.isSet()) {
        obj.insert(QString("RowSubtotalOptions"), ::OpenAPI::toJsonValue(m_row_subtotal_options));
    }
    if (m_column_subtotal_options.isSet()) {
        obj.insert(QString("ColumnSubtotalOptions"), ::OpenAPI::toJsonValue(m_column_subtotal_options));
    }
    if (m_row_total_options.isSet()) {
        obj.insert(QString("RowTotalOptions"), ::OpenAPI::toJsonValue(m_row_total_options));
    }
    if (m_column_total_options.isSet()) {
        obj.insert(QString("ColumnTotalOptions"), ::OpenAPI::toJsonValue(m_column_total_options));
    }
    return obj;
}

OAIPivotTableTotalOptions_RowSubtotalOptions OAIPivotTableConfiguration_TotalOptions::getRowSubtotalOptions() const {
    return m_row_subtotal_options;
}
void OAIPivotTableConfiguration_TotalOptions::setRowSubtotalOptions(const OAIPivotTableTotalOptions_RowSubtotalOptions &row_subtotal_options) {
    m_row_subtotal_options = row_subtotal_options;
    m_row_subtotal_options_isSet = true;
}

bool OAIPivotTableConfiguration_TotalOptions::is_row_subtotal_options_Set() const{
    return m_row_subtotal_options_isSet;
}

bool OAIPivotTableConfiguration_TotalOptions::is_row_subtotal_options_Valid() const{
    return m_row_subtotal_options_isValid;
}

OAIPivotTableTotalOptions_ColumnSubtotalOptions OAIPivotTableConfiguration_TotalOptions::getColumnSubtotalOptions() const {
    return m_column_subtotal_options;
}
void OAIPivotTableConfiguration_TotalOptions::setColumnSubtotalOptions(const OAIPivotTableTotalOptions_ColumnSubtotalOptions &column_subtotal_options) {
    m_column_subtotal_options = column_subtotal_options;
    m_column_subtotal_options_isSet = true;
}

bool OAIPivotTableConfiguration_TotalOptions::is_column_subtotal_options_Set() const{
    return m_column_subtotal_options_isSet;
}

bool OAIPivotTableConfiguration_TotalOptions::is_column_subtotal_options_Valid() const{
    return m_column_subtotal_options_isValid;
}

OAIPivotTableTotalOptions_RowTotalOptions OAIPivotTableConfiguration_TotalOptions::getRowTotalOptions() const {
    return m_row_total_options;
}
void OAIPivotTableConfiguration_TotalOptions::setRowTotalOptions(const OAIPivotTableTotalOptions_RowTotalOptions &row_total_options) {
    m_row_total_options = row_total_options;
    m_row_total_options_isSet = true;
}

bool OAIPivotTableConfiguration_TotalOptions::is_row_total_options_Set() const{
    return m_row_total_options_isSet;
}

bool OAIPivotTableConfiguration_TotalOptions::is_row_total_options_Valid() const{
    return m_row_total_options_isValid;
}

OAIPivotTableTotalOptions_ColumnTotalOptions OAIPivotTableConfiguration_TotalOptions::getColumnTotalOptions() const {
    return m_column_total_options;
}
void OAIPivotTableConfiguration_TotalOptions::setColumnTotalOptions(const OAIPivotTableTotalOptions_ColumnTotalOptions &column_total_options) {
    m_column_total_options = column_total_options;
    m_column_total_options_isSet = true;
}

bool OAIPivotTableConfiguration_TotalOptions::is_column_total_options_Set() const{
    return m_column_total_options_isSet;
}

bool OAIPivotTableConfiguration_TotalOptions::is_column_total_options_Valid() const{
    return m_column_total_options_isValid;
}

bool OAIPivotTableConfiguration_TotalOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_row_subtotal_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_subtotal_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_total_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_total_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableConfiguration_TotalOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
