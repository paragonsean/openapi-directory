/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSource_request_Credentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSource_request_Credentials::OAICreateDataSource_request_Credentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSource_request_Credentials::OAICreateDataSource_request_Credentials() {
    this->initializeModel();
}

OAICreateDataSource_request_Credentials::~OAICreateDataSource_request_Credentials() {}

void OAICreateDataSource_request_Credentials::initializeModel() {

    m_credential_pair_isSet = false;
    m_credential_pair_isValid = false;

    m_copy_source_arn_isSet = false;
    m_copy_source_arn_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;
}

void OAICreateDataSource_request_Credentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSource_request_Credentials::fromJsonObject(QJsonObject json) {

    m_credential_pair_isValid = ::OpenAPI::fromJsonValue(m_credential_pair, json[QString("CredentialPair")]);
    m_credential_pair_isSet = !json[QString("CredentialPair")].isNull() && m_credential_pair_isValid;

    m_copy_source_arn_isValid = ::OpenAPI::fromJsonValue(m_copy_source_arn, json[QString("CopySourceArn")]);
    m_copy_source_arn_isSet = !json[QString("CopySourceArn")].isNull() && m_copy_source_arn_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;
}

QString OAICreateDataSource_request_Credentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSource_request_Credentials::asJsonObject() const {
    QJsonObject obj;
    if (m_credential_pair.isSet()) {
        obj.insert(QString("CredentialPair"), ::OpenAPI::toJsonValue(m_credential_pair));
    }
    if (m_copy_source_arn_isSet) {
        obj.insert(QString("CopySourceArn"), ::OpenAPI::toJsonValue(m_copy_source_arn));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    return obj;
}

OAICreateDataSource_request_Credentials_CredentialPair OAICreateDataSource_request_Credentials::getCredentialPair() const {
    return m_credential_pair;
}
void OAICreateDataSource_request_Credentials::setCredentialPair(const OAICreateDataSource_request_Credentials_CredentialPair &credential_pair) {
    m_credential_pair = credential_pair;
    m_credential_pair_isSet = true;
}

bool OAICreateDataSource_request_Credentials::is_credential_pair_Set() const{
    return m_credential_pair_isSet;
}

bool OAICreateDataSource_request_Credentials::is_credential_pair_Valid() const{
    return m_credential_pair_isValid;
}

QString OAICreateDataSource_request_Credentials::getCopySourceArn() const {
    return m_copy_source_arn;
}
void OAICreateDataSource_request_Credentials::setCopySourceArn(const QString &copy_source_arn) {
    m_copy_source_arn = copy_source_arn;
    m_copy_source_arn_isSet = true;
}

bool OAICreateDataSource_request_Credentials::is_copy_source_arn_Set() const{
    return m_copy_source_arn_isSet;
}

bool OAICreateDataSource_request_Credentials::is_copy_source_arn_Valid() const{
    return m_copy_source_arn_isValid;
}

QString OAICreateDataSource_request_Credentials::getSecretArn() const {
    return m_secret_arn;
}
void OAICreateDataSource_request_Credentials::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAICreateDataSource_request_Credentials::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAICreateDataSource_request_Credentials::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAICreateDataSource_request_Credentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credential_pair.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSource_request_Credentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
