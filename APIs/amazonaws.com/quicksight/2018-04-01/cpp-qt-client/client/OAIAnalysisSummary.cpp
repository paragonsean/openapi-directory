/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisSummary::OAIAnalysisSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisSummary::OAIAnalysisSummary() {
    this->initializeModel();
}

OAIAnalysisSummary::~OAIAnalysisSummary() {}

void OAIAnalysisSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIAnalysisSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIAnalysisSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAIAnalysisSummary::getArn() const {
    return m_arn;
}
void OAIAnalysisSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAnalysisSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAnalysisSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIAnalysisSummary::getAnalysisId() const {
    return m_analysis_id;
}
void OAIAnalysisSummary::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIAnalysisSummary::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIAnalysisSummary::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

QString OAIAnalysisSummary::getName() const {
    return m_name;
}
void OAIAnalysisSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnalysisSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnalysisSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIResourceStatus OAIAnalysisSummary::getStatus() const {
    return m_status;
}
void OAIAnalysisSummary::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAnalysisSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAnalysisSummary::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIAnalysisSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIAnalysisSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIAnalysisSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAnalysisSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIAnalysisSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIAnalysisSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIAnalysisSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIAnalysisSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIAnalysisSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
