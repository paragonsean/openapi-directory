/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArcAxisDisplayRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArcAxisDisplayRange::OAIArcAxisDisplayRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArcAxisDisplayRange::OAIArcAxisDisplayRange() {
    this->initializeModel();
}

OAIArcAxisDisplayRange::~OAIArcAxisDisplayRange() {}

void OAIArcAxisDisplayRange::initializeModel() {

    m_min_isSet = false;
    m_min_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;
}

void OAIArcAxisDisplayRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArcAxisDisplayRange::fromJsonObject(QJsonObject json) {

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("Min")]);
    m_min_isSet = !json[QString("Min")].isNull() && m_min_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("Max")]);
    m_max_isSet = !json[QString("Max")].isNull() && m_max_isValid;
}

QString OAIArcAxisDisplayRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArcAxisDisplayRange::asJsonObject() const {
    QJsonObject obj;
    if (m_min_isSet) {
        obj.insert(QString("Min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_max_isSet) {
        obj.insert(QString("Max"), ::OpenAPI::toJsonValue(m_max));
    }
    return obj;
}

double OAIArcAxisDisplayRange::getMin() const {
    return m_min;
}
void OAIArcAxisDisplayRange::setMin(const double &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIArcAxisDisplayRange::is_min_Set() const{
    return m_min_isSet;
}

bool OAIArcAxisDisplayRange::is_min_Valid() const{
    return m_min_isValid;
}

double OAIArcAxisDisplayRange::getMax() const {
    return m_max;
}
void OAIArcAxisDisplayRange::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIArcAxisDisplayRange::is_max_Set() const{
    return m_max_isSet;
}

bool OAIArcAxisDisplayRange::is_max_Valid() const{
    return m_max_isValid;
}

bool OAIArcAxisDisplayRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArcAxisDisplayRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
