/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardVersionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardVersionSummary::OAIDashboardVersionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardVersionSummary::OAIDashboardVersionSummary() {
    this->initializeModel();
}

OAIDashboardVersionSummary::~OAIDashboardVersionSummary() {}

void OAIDashboardVersionSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_source_entity_arn_isSet = false;
    m_source_entity_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIDashboardVersionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardVersionSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("VersionNumber")]);
    m_version_number_isSet = !json[QString("VersionNumber")].isNull() && m_version_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_source_entity_arn_isValid = ::OpenAPI::fromJsonValue(m_source_entity_arn, json[QString("SourceEntityArn")]);
    m_source_entity_arn_isSet = !json[QString("SourceEntityArn")].isNull() && m_source_entity_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIDashboardVersionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardVersionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("VersionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_source_entity_arn_isSet) {
        obj.insert(QString("SourceEntityArn"), ::OpenAPI::toJsonValue(m_source_entity_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIDashboardVersionSummary::getArn() const {
    return m_arn;
}
void OAIDashboardVersionSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDashboardVersionSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDashboardVersionSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIDashboardVersionSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIDashboardVersionSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDashboardVersionSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDashboardVersionSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

qint32 OAIDashboardVersionSummary::getVersionNumber() const {
    return m_version_number;
}
void OAIDashboardVersionSummary::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIDashboardVersionSummary::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIDashboardVersionSummary::is_version_number_Valid() const{
    return m_version_number_isValid;
}

OAIResourceStatus OAIDashboardVersionSummary::getStatus() const {
    return m_status;
}
void OAIDashboardVersionSummary::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDashboardVersionSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDashboardVersionSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDashboardVersionSummary::getSourceEntityArn() const {
    return m_source_entity_arn;
}
void OAIDashboardVersionSummary::setSourceEntityArn(const QString &source_entity_arn) {
    m_source_entity_arn = source_entity_arn;
    m_source_entity_arn_isSet = true;
}

bool OAIDashboardVersionSummary::is_source_entity_arn_Set() const{
    return m_source_entity_arn_isSet;
}

bool OAIDashboardVersionSummary::is_source_entity_arn_Valid() const{
    return m_source_entity_arn_isValid;
}

QString OAIDashboardVersionSummary::getDescription() const {
    return m_description;
}
void OAIDashboardVersionSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDashboardVersionSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDashboardVersionSummary::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIDashboardVersionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entity_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardVersionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
