/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueInfo::OAIQueueInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueInfo::OAIQueueInfo() {
    this->initializeModel();
}

OAIQueueInfo::~OAIQueueInfo() {}

void OAIQueueInfo::initializeModel() {

    m_waiting_on_ingestion_isSet = false;
    m_waiting_on_ingestion_isValid = false;

    m_queued_ingestion_isSet = false;
    m_queued_ingestion_isValid = false;
}

void OAIQueueInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueueInfo::fromJsonObject(QJsonObject json) {

    m_waiting_on_ingestion_isValid = ::OpenAPI::fromJsonValue(m_waiting_on_ingestion, json[QString("WaitingOnIngestion")]);
    m_waiting_on_ingestion_isSet = !json[QString("WaitingOnIngestion")].isNull() && m_waiting_on_ingestion_isValid;

    m_queued_ingestion_isValid = ::OpenAPI::fromJsonValue(m_queued_ingestion, json[QString("QueuedIngestion")]);
    m_queued_ingestion_isSet = !json[QString("QueuedIngestion")].isNull() && m_queued_ingestion_isValid;
}

QString OAIQueueInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueueInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_waiting_on_ingestion_isSet) {
        obj.insert(QString("WaitingOnIngestion"), ::OpenAPI::toJsonValue(m_waiting_on_ingestion));
    }
    if (m_queued_ingestion_isSet) {
        obj.insert(QString("QueuedIngestion"), ::OpenAPI::toJsonValue(m_queued_ingestion));
    }
    return obj;
}

QString OAIQueueInfo::getWaitingOnIngestion() const {
    return m_waiting_on_ingestion;
}
void OAIQueueInfo::setWaitingOnIngestion(const QString &waiting_on_ingestion) {
    m_waiting_on_ingestion = waiting_on_ingestion;
    m_waiting_on_ingestion_isSet = true;
}

bool OAIQueueInfo::is_waiting_on_ingestion_Set() const{
    return m_waiting_on_ingestion_isSet;
}

bool OAIQueueInfo::is_waiting_on_ingestion_Valid() const{
    return m_waiting_on_ingestion_isValid;
}

QString OAIQueueInfo::getQueuedIngestion() const {
    return m_queued_ingestion;
}
void OAIQueueInfo::setQueuedIngestion(const QString &queued_ingestion) {
    m_queued_ingestion = queued_ingestion;
    m_queued_ingestion_isSet = true;
}

bool OAIQueueInfo::is_queued_ingestion_Set() const{
    return m_queued_ingestion_isSet;
}

bool OAIQueueInfo::is_queued_ingestion_Valid() const{
    return m_queued_ingestion_isValid;
}

bool OAIQueueInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_waiting_on_ingestion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_ingestion_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueueInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_waiting_on_ingestion_isValid && m_queued_ingestion_isValid && true;
}

} // namespace OpenAPI
