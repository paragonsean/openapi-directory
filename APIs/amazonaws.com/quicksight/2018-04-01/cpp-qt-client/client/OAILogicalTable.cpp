/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogicalTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogicalTable::OAILogicalTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogicalTable::OAILogicalTable() {
    this->initializeModel();
}

OAILogicalTable::~OAILogicalTable() {}

void OAILogicalTable::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_data_transforms_isSet = false;
    m_data_transforms_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAILogicalTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogicalTable::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_data_transforms_isValid = ::OpenAPI::fromJsonValue(m_data_transforms, json[QString("DataTransforms")]);
    m_data_transforms_isSet = !json[QString("DataTransforms")].isNull() && m_data_transforms_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;
}

QString OAILogicalTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogicalTable::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_data_transforms.isSet()) {
        obj.insert(QString("DataTransforms"), ::OpenAPI::toJsonValue(m_data_transforms));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAILogicalTable::getAlias() const {
    return m_alias;
}
void OAILogicalTable::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAILogicalTable::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAILogicalTable::is_alias_Valid() const{
    return m_alias_isValid;
}

QList OAILogicalTable::getDataTransforms() const {
    return m_data_transforms;
}
void OAILogicalTable::setDataTransforms(const QList &data_transforms) {
    m_data_transforms = data_transforms;
    m_data_transforms_isSet = true;
}

bool OAILogicalTable::is_data_transforms_Set() const{
    return m_data_transforms_isSet;
}

bool OAILogicalTable::is_data_transforms_Valid() const{
    return m_data_transforms_isValid;
}

OAILogicalTable_Source OAILogicalTable::getSource() const {
    return m_source;
}
void OAILogicalTable::setSource(const OAILogicalTable_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAILogicalTable::is_source_Set() const{
    return m_source_isSet;
}

bool OAILogicalTable::is_source_Valid() const{
    return m_source_isValid;
}

bool OAILogicalTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_transforms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogicalTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alias_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
