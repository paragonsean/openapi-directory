/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBarChartConfiguration_SortConfiguration.h
 *
 * 
 */

#ifndef OAIBarChartConfiguration_SortConfiguration_H
#define OAIBarChartConfiguration_SortConfiguration_H

#include <QJsonObject>

#include "OAIBarChartSortConfiguration_CategoryItemsLimit.h"
#include "OAIBarChartSortConfiguration_ColorItemsLimit.h"
#include "OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBarChartSortConfiguration_CategoryItemsLimit;
class OAIBarChartSortConfiguration_ColorItemsLimit;
class OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration;

class OAIBarChartConfiguration_SortConfiguration : public OAIObject {
public:
    OAIBarChartConfiguration_SortConfiguration();
    OAIBarChartConfiguration_SortConfiguration(QString json);
    ~OAIBarChartConfiguration_SortConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCategorySort() const;
    void setCategorySort(const QList &category_sort);
    bool is_category_sort_Set() const;
    bool is_category_sort_Valid() const;

    OAIBarChartSortConfiguration_CategoryItemsLimit getCategoryItemsLimit() const;
    void setCategoryItemsLimit(const OAIBarChartSortConfiguration_CategoryItemsLimit &category_items_limit);
    bool is_category_items_limit_Set() const;
    bool is_category_items_limit_Valid() const;

    QList getColorSort() const;
    void setColorSort(const QList &color_sort);
    bool is_color_sort_Set() const;
    bool is_color_sort_Valid() const;

    OAIBarChartSortConfiguration_ColorItemsLimit getColorItemsLimit() const;
    void setColorItemsLimit(const OAIBarChartSortConfiguration_ColorItemsLimit &color_items_limit);
    bool is_color_items_limit_Set() const;
    bool is_color_items_limit_Valid() const;

    QList getSmallMultiplesSort() const;
    void setSmallMultiplesSort(const QList &small_multiples_sort);
    bool is_small_multiples_sort_Set() const;
    bool is_small_multiples_sort_Valid() const;

    OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration getSmallMultiplesLimitConfiguration() const;
    void setSmallMultiplesLimitConfiguration(const OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration &small_multiples_limit_configuration);
    bool is_small_multiples_limit_configuration_Set() const;
    bool is_small_multiples_limit_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_category_sort;
    bool m_category_sort_isSet;
    bool m_category_sort_isValid;

    OAIBarChartSortConfiguration_CategoryItemsLimit m_category_items_limit;
    bool m_category_items_limit_isSet;
    bool m_category_items_limit_isValid;

    QList m_color_sort;
    bool m_color_sort_isSet;
    bool m_color_sort_isValid;

    OAIBarChartSortConfiguration_ColorItemsLimit m_color_items_limit;
    bool m_color_items_limit_isSet;
    bool m_color_items_limit_isValid;

    QList m_small_multiples_sort;
    bool m_small_multiples_sort_isSet;
    bool m_small_multiples_sort_isValid;

    OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration m_small_multiples_limit_configuration;
    bool m_small_multiples_limit_configuration_isSet;
    bool m_small_multiples_limit_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBarChartConfiguration_SortConfiguration)

#endif // OAIBarChartConfiguration_SortConfiguration_H
