/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldSort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldSort::OAIFieldSort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldSort::OAIFieldSort() {
    this->initializeModel();
}

OAIFieldSort::~OAIFieldSort() {}

void OAIFieldSort::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;
}

void OAIFieldSort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldSort::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("Direction")]);
    m_direction_isSet = !json[QString("Direction")].isNull() && m_direction_isValid;
}

QString OAIFieldSort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldSort::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("Direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    return obj;
}

QString OAIFieldSort::getFieldId() const {
    return m_field_id;
}
void OAIFieldSort::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIFieldSort::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIFieldSort::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAISortDirection OAIFieldSort::getDirection() const {
    return m_direction;
}
void OAIFieldSort::setDirection(const OAISortDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIFieldSort::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIFieldSort::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAIFieldSort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldSort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_direction_isValid && true;
}

} // namespace OpenAPI
