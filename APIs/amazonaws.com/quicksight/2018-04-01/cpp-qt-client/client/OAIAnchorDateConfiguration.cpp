/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnchorDateConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnchorDateConfiguration::OAIAnchorDateConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnchorDateConfiguration::OAIAnchorDateConfiguration() {
    this->initializeModel();
}

OAIAnchorDateConfiguration::~OAIAnchorDateConfiguration() {}

void OAIAnchorDateConfiguration::initializeModel() {

    m_anchor_option_isSet = false;
    m_anchor_option_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;
}

void OAIAnchorDateConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnchorDateConfiguration::fromJsonObject(QJsonObject json) {

    m_anchor_option_isValid = ::OpenAPI::fromJsonValue(m_anchor_option, json[QString("AnchorOption")]);
    m_anchor_option_isSet = !json[QString("AnchorOption")].isNull() && m_anchor_option_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;
}

QString OAIAnchorDateConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnchorDateConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_anchor_option.isSet()) {
        obj.insert(QString("AnchorOption"), ::OpenAPI::toJsonValue(m_anchor_option));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    return obj;
}

OAIAnchorOption OAIAnchorDateConfiguration::getAnchorOption() const {
    return m_anchor_option;
}
void OAIAnchorDateConfiguration::setAnchorOption(const OAIAnchorOption &anchor_option) {
    m_anchor_option = anchor_option;
    m_anchor_option_isSet = true;
}

bool OAIAnchorDateConfiguration::is_anchor_option_Set() const{
    return m_anchor_option_isSet;
}

bool OAIAnchorDateConfiguration::is_anchor_option_Valid() const{
    return m_anchor_option_isValid;
}

QString OAIAnchorDateConfiguration::getParameterName() const {
    return m_parameter_name;
}
void OAIAnchorDateConfiguration::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIAnchorDateConfiguration::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIAnchorDateConfiguration::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

bool OAIAnchorDateConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anchor_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnchorDateConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
