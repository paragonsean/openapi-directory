/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterTextAreaControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterTextAreaControl::OAIParameterTextAreaControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterTextAreaControl::OAIParameterTextAreaControl() {
    this->initializeModel();
}

OAIParameterTextAreaControl::~OAIParameterTextAreaControl() {}

void OAIParameterTextAreaControl::initializeModel() {

    m_parameter_control_id_isSet = false;
    m_parameter_control_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_source_parameter_name_isSet = false;
    m_source_parameter_name_isValid = false;

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;
}

void OAIParameterTextAreaControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterTextAreaControl::fromJsonObject(QJsonObject json) {

    m_parameter_control_id_isValid = ::OpenAPI::fromJsonValue(m_parameter_control_id, json[QString("ParameterControlId")]);
    m_parameter_control_id_isSet = !json[QString("ParameterControlId")].isNull() && m_parameter_control_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_source_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_source_parameter_name, json[QString("SourceParameterName")]);
    m_source_parameter_name_isSet = !json[QString("SourceParameterName")].isNull() && m_source_parameter_name_isValid;

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("Delimiter")]);
    m_delimiter_isSet = !json[QString("Delimiter")].isNull() && m_delimiter_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("DisplayOptions")]);
    m_display_options_isSet = !json[QString("DisplayOptions")].isNull() && m_display_options_isValid;
}

QString OAIParameterTextAreaControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterTextAreaControl::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_control_id_isSet) {
        obj.insert(QString("ParameterControlId"), ::OpenAPI::toJsonValue(m_parameter_control_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_source_parameter_name_isSet) {
        obj.insert(QString("SourceParameterName"), ::OpenAPI::toJsonValue(m_source_parameter_name));
    }
    if (m_delimiter_isSet) {
        obj.insert(QString("Delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("DisplayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    return obj;
}

QString OAIParameterTextAreaControl::getParameterControlId() const {
    return m_parameter_control_id;
}
void OAIParameterTextAreaControl::setParameterControlId(const QString &parameter_control_id) {
    m_parameter_control_id = parameter_control_id;
    m_parameter_control_id_isSet = true;
}

bool OAIParameterTextAreaControl::is_parameter_control_id_Set() const{
    return m_parameter_control_id_isSet;
}

bool OAIParameterTextAreaControl::is_parameter_control_id_Valid() const{
    return m_parameter_control_id_isValid;
}

QString OAIParameterTextAreaControl::getTitle() const {
    return m_title;
}
void OAIParameterTextAreaControl::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIParameterTextAreaControl::is_title_Set() const{
    return m_title_isSet;
}

bool OAIParameterTextAreaControl::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIParameterTextAreaControl::getSourceParameterName() const {
    return m_source_parameter_name;
}
void OAIParameterTextAreaControl::setSourceParameterName(const QString &source_parameter_name) {
    m_source_parameter_name = source_parameter_name;
    m_source_parameter_name_isSet = true;
}

bool OAIParameterTextAreaControl::is_source_parameter_name_Set() const{
    return m_source_parameter_name_isSet;
}

bool OAIParameterTextAreaControl::is_source_parameter_name_Valid() const{
    return m_source_parameter_name_isValid;
}

QString OAIParameterTextAreaControl::getDelimiter() const {
    return m_delimiter;
}
void OAIParameterTextAreaControl::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAIParameterTextAreaControl::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAIParameterTextAreaControl::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

OAIFilterTextAreaControl_DisplayOptions OAIParameterTextAreaControl::getDisplayOptions() const {
    return m_display_options;
}
void OAIParameterTextAreaControl::setDisplayOptions(const OAIFilterTextAreaControl_DisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIParameterTextAreaControl::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIParameterTextAreaControl::is_display_options_Valid() const{
    return m_display_options_isValid;
}

bool OAIParameterTextAreaControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterTextAreaControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_control_id_isValid && m_title_isValid && m_source_parameter_name_isValid && true;
}

} // namespace OpenAPI
