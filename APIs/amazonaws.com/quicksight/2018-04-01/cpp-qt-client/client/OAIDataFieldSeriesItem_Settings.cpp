/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataFieldSeriesItem_Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataFieldSeriesItem_Settings::OAIDataFieldSeriesItem_Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataFieldSeriesItem_Settings::OAIDataFieldSeriesItem_Settings() {
    this->initializeModel();
}

OAIDataFieldSeriesItem_Settings::~OAIDataFieldSeriesItem_Settings() {}

void OAIDataFieldSeriesItem_Settings::initializeModel() {

    m_line_style_settings_isSet = false;
    m_line_style_settings_isValid = false;

    m_marker_style_settings_isSet = false;
    m_marker_style_settings_isValid = false;
}

void OAIDataFieldSeriesItem_Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataFieldSeriesItem_Settings::fromJsonObject(QJsonObject json) {

    m_line_style_settings_isValid = ::OpenAPI::fromJsonValue(m_line_style_settings, json[QString("LineStyleSettings")]);
    m_line_style_settings_isSet = !json[QString("LineStyleSettings")].isNull() && m_line_style_settings_isValid;

    m_marker_style_settings_isValid = ::OpenAPI::fromJsonValue(m_marker_style_settings, json[QString("MarkerStyleSettings")]);
    m_marker_style_settings_isSet = !json[QString("MarkerStyleSettings")].isNull() && m_marker_style_settings_isValid;
}

QString OAIDataFieldSeriesItem_Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataFieldSeriesItem_Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_line_style_settings.isSet()) {
        obj.insert(QString("LineStyleSettings"), ::OpenAPI::toJsonValue(m_line_style_settings));
    }
    if (m_marker_style_settings.isSet()) {
        obj.insert(QString("MarkerStyleSettings"), ::OpenAPI::toJsonValue(m_marker_style_settings));
    }
    return obj;
}

OAILineChartSeriesSettings_LineStyleSettings OAIDataFieldSeriesItem_Settings::getLineStyleSettings() const {
    return m_line_style_settings;
}
void OAIDataFieldSeriesItem_Settings::setLineStyleSettings(const OAILineChartSeriesSettings_LineStyleSettings &line_style_settings) {
    m_line_style_settings = line_style_settings;
    m_line_style_settings_isSet = true;
}

bool OAIDataFieldSeriesItem_Settings::is_line_style_settings_Set() const{
    return m_line_style_settings_isSet;
}

bool OAIDataFieldSeriesItem_Settings::is_line_style_settings_Valid() const{
    return m_line_style_settings_isValid;
}

OAILineChartSeriesSettings_MarkerStyleSettings OAIDataFieldSeriesItem_Settings::getMarkerStyleSettings() const {
    return m_marker_style_settings;
}
void OAIDataFieldSeriesItem_Settings::setMarkerStyleSettings(const OAILineChartSeriesSettings_MarkerStyleSettings &marker_style_settings) {
    m_marker_style_settings = marker_style_settings;
    m_marker_style_settings_isSet = true;
}

bool OAIDataFieldSeriesItem_Settings::is_marker_style_settings_Set() const{
    return m_marker_style_settings_isSet;
}

bool OAIDataFieldSeriesItem_Settings::is_marker_style_settings_Valid() const{
    return m_marker_style_settings_isValid;
}

bool OAIDataFieldSeriesItem_Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_style_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_style_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataFieldSeriesItem_Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
