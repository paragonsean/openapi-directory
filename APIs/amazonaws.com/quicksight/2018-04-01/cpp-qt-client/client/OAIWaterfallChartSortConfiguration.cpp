/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterfallChartSortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterfallChartSortConfiguration::OAIWaterfallChartSortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterfallChartSortConfiguration::OAIWaterfallChartSortConfiguration() {
    this->initializeModel();
}

OAIWaterfallChartSortConfiguration::~OAIWaterfallChartSortConfiguration() {}

void OAIWaterfallChartSortConfiguration::initializeModel() {

    m_category_sort_isSet = false;
    m_category_sort_isValid = false;

    m_breakdown_items_limit_isSet = false;
    m_breakdown_items_limit_isValid = false;
}

void OAIWaterfallChartSortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterfallChartSortConfiguration::fromJsonObject(QJsonObject json) {

    m_category_sort_isValid = ::OpenAPI::fromJsonValue(m_category_sort, json[QString("CategorySort")]);
    m_category_sort_isSet = !json[QString("CategorySort")].isNull() && m_category_sort_isValid;

    m_breakdown_items_limit_isValid = ::OpenAPI::fromJsonValue(m_breakdown_items_limit, json[QString("BreakdownItemsLimit")]);
    m_breakdown_items_limit_isSet = !json[QString("BreakdownItemsLimit")].isNull() && m_breakdown_items_limit_isValid;
}

QString OAIWaterfallChartSortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterfallChartSortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_category_sort.isSet()) {
        obj.insert(QString("CategorySort"), ::OpenAPI::toJsonValue(m_category_sort));
    }
    if (m_breakdown_items_limit.isSet()) {
        obj.insert(QString("BreakdownItemsLimit"), ::OpenAPI::toJsonValue(m_breakdown_items_limit));
    }
    return obj;
}

QList OAIWaterfallChartSortConfiguration::getCategorySort() const {
    return m_category_sort;
}
void OAIWaterfallChartSortConfiguration::setCategorySort(const QList &category_sort) {
    m_category_sort = category_sort;
    m_category_sort_isSet = true;
}

bool OAIWaterfallChartSortConfiguration::is_category_sort_Set() const{
    return m_category_sort_isSet;
}

bool OAIWaterfallChartSortConfiguration::is_category_sort_Valid() const{
    return m_category_sort_isValid;
}

OAIWaterfallChartSortConfiguration_BreakdownItemsLimit OAIWaterfallChartSortConfiguration::getBreakdownItemsLimit() const {
    return m_breakdown_items_limit;
}
void OAIWaterfallChartSortConfiguration::setBreakdownItemsLimit(const OAIWaterfallChartSortConfiguration_BreakdownItemsLimit &breakdown_items_limit) {
    m_breakdown_items_limit = breakdown_items_limit;
    m_breakdown_items_limit_isSet = true;
}

bool OAIWaterfallChartSortConfiguration::is_breakdown_items_limit_Set() const{
    return m_breakdown_items_limit_isSet;
}

bool OAIWaterfallChartSortConfiguration::is_breakdown_items_limit_Valid() const{
    return m_breakdown_items_limit_isValid;
}

bool OAIWaterfallChartSortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakdown_items_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterfallChartSortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
