/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJoinKeyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJoinKeyProperties::OAIJoinKeyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJoinKeyProperties::OAIJoinKeyProperties() {
    this->initializeModel();
}

OAIJoinKeyProperties::~OAIJoinKeyProperties() {}

void OAIJoinKeyProperties::initializeModel() {

    m_unique_key_isSet = false;
    m_unique_key_isValid = false;
}

void OAIJoinKeyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJoinKeyProperties::fromJsonObject(QJsonObject json) {

    m_unique_key_isValid = ::OpenAPI::fromJsonValue(m_unique_key, json[QString("UniqueKey")]);
    m_unique_key_isSet = !json[QString("UniqueKey")].isNull() && m_unique_key_isValid;
}

QString OAIJoinKeyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJoinKeyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_unique_key_isSet) {
        obj.insert(QString("UniqueKey"), ::OpenAPI::toJsonValue(m_unique_key));
    }
    return obj;
}

bool OAIJoinKeyProperties::getUniqueKey() const {
    return m_unique_key;
}
void OAIJoinKeyProperties::setUniqueKey(const bool &unique_key) {
    m_unique_key = unique_key;
    m_unique_key_isSet = true;
}

bool OAIJoinKeyProperties::is_unique_key_Set() const{
    return m_unique_key_isSet;
}

bool OAIJoinKeyProperties::is_unique_key_Valid() const{
    return m_unique_key_isValid;
}

bool OAIJoinKeyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unique_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJoinKeyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
