/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnowflakeParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnowflakeParameters::OAISnowflakeParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnowflakeParameters::OAISnowflakeParameters() {
    this->initializeModel();
}

OAISnowflakeParameters::~OAISnowflakeParameters() {}

void OAISnowflakeParameters::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAISnowflakeParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnowflakeParameters::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("Host")]);
    m_host_isSet = !json[QString("Host")].isNull() && m_host_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("Warehouse")]);
    m_warehouse_isSet = !json[QString("Warehouse")].isNull() && m_warehouse_isValid;
}

QString OAISnowflakeParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnowflakeParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("Host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_warehouse_isSet) {
        obj.insert(QString("Warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

QString OAISnowflakeParameters::getHost() const {
    return m_host;
}
void OAISnowflakeParameters::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAISnowflakeParameters::is_host_Set() const{
    return m_host_isSet;
}

bool OAISnowflakeParameters::is_host_Valid() const{
    return m_host_isValid;
}

QString OAISnowflakeParameters::getDatabase() const {
    return m_database;
}
void OAISnowflakeParameters::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAISnowflakeParameters::is_database_Set() const{
    return m_database_isSet;
}

bool OAISnowflakeParameters::is_database_Valid() const{
    return m_database_isValid;
}

QString OAISnowflakeParameters::getWarehouse() const {
    return m_warehouse;
}
void OAISnowflakeParameters::setWarehouse(const QString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAISnowflakeParameters::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAISnowflakeParameters::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAISnowflakeParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnowflakeParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_isValid && m_database_isValid && m_warehouse_isValid && true;
}

} // namespace OpenAPI
