/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialHeatmapConfiguration_HeatmapColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialHeatmapConfiguration_HeatmapColor::OAIGeospatialHeatmapConfiguration_HeatmapColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialHeatmapConfiguration_HeatmapColor::OAIGeospatialHeatmapConfiguration_HeatmapColor() {
    this->initializeModel();
}

OAIGeospatialHeatmapConfiguration_HeatmapColor::~OAIGeospatialHeatmapConfiguration_HeatmapColor() {}

void OAIGeospatialHeatmapConfiguration_HeatmapColor::initializeModel() {

    m_colors_isSet = false;
    m_colors_isValid = false;
}

void OAIGeospatialHeatmapConfiguration_HeatmapColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialHeatmapConfiguration_HeatmapColor::fromJsonObject(QJsonObject json) {

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("Colors")]);
    m_colors_isSet = !json[QString("Colors")].isNull() && m_colors_isValid;
}

QString OAIGeospatialHeatmapConfiguration_HeatmapColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialHeatmapConfiguration_HeatmapColor::asJsonObject() const {
    QJsonObject obj;
    if (m_colors.isSet()) {
        obj.insert(QString("Colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    return obj;
}

QList OAIGeospatialHeatmapConfiguration_HeatmapColor::getColors() const {
    return m_colors;
}
void OAIGeospatialHeatmapConfiguration_HeatmapColor::setColors(const QList &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIGeospatialHeatmapConfiguration_HeatmapColor::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIGeospatialHeatmapConfiguration_HeatmapColor::is_colors_Valid() const{
    return m_colors_isValid;
}

bool OAIGeospatialHeatmapConfiguration_HeatmapColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialHeatmapConfiguration_HeatmapColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
