/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITreeMapVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITreeMapVisual_ChartConfiguration::OAITreeMapVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITreeMapVisual_ChartConfiguration::OAITreeMapVisual_ChartConfiguration() {
    this->initializeModel();
}

OAITreeMapVisual_ChartConfiguration::~OAITreeMapVisual_ChartConfiguration() {}

void OAITreeMapVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_group_label_options_isSet = false;
    m_group_label_options_isValid = false;

    m_size_label_options_isSet = false;
    m_size_label_options_isValid = false;

    m_color_label_options_isSet = false;
    m_color_label_options_isValid = false;

    m_color_scale_isSet = false;
    m_color_scale_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;
}

void OAITreeMapVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITreeMapVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_group_label_options_isValid = ::OpenAPI::fromJsonValue(m_group_label_options, json[QString("GroupLabelOptions")]);
    m_group_label_options_isSet = !json[QString("GroupLabelOptions")].isNull() && m_group_label_options_isValid;

    m_size_label_options_isValid = ::OpenAPI::fromJsonValue(m_size_label_options, json[QString("SizeLabelOptions")]);
    m_size_label_options_isSet = !json[QString("SizeLabelOptions")].isNull() && m_size_label_options_isValid;

    m_color_label_options_isValid = ::OpenAPI::fromJsonValue(m_color_label_options, json[QString("ColorLabelOptions")]);
    m_color_label_options_isSet = !json[QString("ColorLabelOptions")].isNull() && m_color_label_options_isValid;

    m_color_scale_isValid = ::OpenAPI::fromJsonValue(m_color_scale, json[QString("ColorScale")]);
    m_color_scale_isSet = !json[QString("ColorScale")].isNull() && m_color_scale_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;
}

QString OAITreeMapVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITreeMapVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_group_label_options.isSet()) {
        obj.insert(QString("GroupLabelOptions"), ::OpenAPI::toJsonValue(m_group_label_options));
    }
    if (m_size_label_options.isSet()) {
        obj.insert(QString("SizeLabelOptions"), ::OpenAPI::toJsonValue(m_size_label_options));
    }
    if (m_color_label_options.isSet()) {
        obj.insert(QString("ColorLabelOptions"), ::OpenAPI::toJsonValue(m_color_label_options));
    }
    if (m_color_scale.isSet()) {
        obj.insert(QString("ColorScale"), ::OpenAPI::toJsonValue(m_color_scale));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    return obj;
}

OAITreeMapConfiguration_FieldWells OAITreeMapVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAITreeMapVisual_ChartConfiguration::setFieldWells(const OAITreeMapConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAITreeMapVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAITreeMapVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAITreeMapConfiguration_SortConfiguration OAITreeMapVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAITreeMapVisual_ChartConfiguration::setSortConfiguration(const OAITreeMapConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAITreeMapVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAITreeMapVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAITreeMapConfiguration_GroupLabelOptions OAITreeMapVisual_ChartConfiguration::getGroupLabelOptions() const {
    return m_group_label_options;
}
void OAITreeMapVisual_ChartConfiguration::setGroupLabelOptions(const OAITreeMapConfiguration_GroupLabelOptions &group_label_options) {
    m_group_label_options = group_label_options;
    m_group_label_options_isSet = true;
}

bool OAITreeMapVisual_ChartConfiguration::is_group_label_options_Set() const{
    return m_group_label_options_isSet;
}

bool OAITreeMapVisual_ChartConfiguration::is_group_label_options_Valid() const{
    return m_group_label_options_isValid;
}

OAITreeMapConfiguration_SizeLabelOptions OAITreeMapVisual_ChartConfiguration::getSizeLabelOptions() const {
    return m_size_label_options;
}
void OAITreeMapVisual_ChartConfiguration::setSizeLabelOptions(const OAITreeMapConfiguration_SizeLabelOptions &size_label_options) {
    m_size_label_options = size_label_options;
    m_size_label_options_isSet = true;
}

bool OAITreeMapVisual_ChartConfiguration::is_size_label_options_Set() const{
    return m_size_label_options_isSet;
}

bool OAITreeMapVisual_ChartConfiguration::is_size_label_options_Valid() const{
    return m_size_label_options_isValid;
}

OAITreeMapConfiguration_ColorLabelOptions OAITreeMapVisual_ChartConfiguration::getColorLabelOptions() const {
    return m_color_label_options;
}
void OAITreeMapVisual_ChartConfiguration::setColorLabelOptions(const OAITreeMapConfiguration_ColorLabelOptions &color_label_options) {
    m_color_label_options = color_label_options;
    m_color_label_options_isSet = true;
}

bool OAITreeMapVisual_ChartConfiguration::is_color_label_options_Set() const{
    return m_color_label_options_isSet;
}

bool OAITreeMapVisual_ChartConfiguration::is_color_label_options_Valid() const{
    return m_color_label_options_isValid;
}

OAITreeMapConfiguration_ColorScale OAITreeMapVisual_ChartConfiguration::getColorScale() const {
    return m_color_scale;
}
void OAITreeMapVisual_ChartConfiguration::setColorScale(const OAITreeMapConfiguration_ColorScale &color_scale) {
    m_color_scale = color_scale;
    m_color_scale_isSet = true;
}

bool OAITreeMapVisual_ChartConfiguration::is_color_scale_Set() const{
    return m_color_scale_isSet;
}

bool OAITreeMapVisual_ChartConfiguration::is_color_scale_Valid() const{
    return m_color_scale_isValid;
}

OAIBarChartConfiguration_Legend OAITreeMapVisual_ChartConfiguration::getLegend() const {
    return m_legend;
}
void OAITreeMapVisual_ChartConfiguration::setLegend(const OAIBarChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAITreeMapVisual_ChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAITreeMapVisual_ChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIBarChartConfiguration_DataLabels OAITreeMapVisual_ChartConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAITreeMapVisual_ChartConfiguration::setDataLabels(const OAIBarChartConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAITreeMapVisual_ChartConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAITreeMapVisual_ChartConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

OAIBarChartConfiguration_Tooltip OAITreeMapVisual_ChartConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAITreeMapVisual_ChartConfiguration::setTooltip(const OAIBarChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAITreeMapVisual_ChartConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAITreeMapVisual_ChartConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

bool OAITreeMapVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_scale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITreeMapVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
