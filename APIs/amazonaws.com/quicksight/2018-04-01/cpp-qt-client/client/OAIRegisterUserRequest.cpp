/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterUserRequest::OAIRegisterUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterUserRequest::OAIRegisterUserRequest() {
    this->initializeModel();
}

OAIRegisterUserRequest::~OAIRegisterUserRequest() {}

void OAIRegisterUserRequest::initializeModel() {

    m_identity_type_isSet = false;
    m_identity_type_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_user_role_isSet = false;
    m_user_role_isValid = false;

    m_iam_arn_isSet = false;
    m_iam_arn_isValid = false;

    m_session_name_isSet = false;
    m_session_name_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_custom_permissions_name_isSet = false;
    m_custom_permissions_name_isValid = false;

    m_external_login_federation_provider_type_isSet = false;
    m_external_login_federation_provider_type_isValid = false;

    m_custom_federation_provider_url_isSet = false;
    m_custom_federation_provider_url_isValid = false;

    m_external_login_id_isSet = false;
    m_external_login_id_isValid = false;
}

void OAIRegisterUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterUserRequest::fromJsonObject(QJsonObject json) {

    m_identity_type_isValid = ::OpenAPI::fromJsonValue(m_identity_type, json[QString("IdentityType")]);
    m_identity_type_isSet = !json[QString("IdentityType")].isNull() && m_identity_type_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_user_role_isValid = ::OpenAPI::fromJsonValue(m_user_role, json[QString("UserRole")]);
    m_user_role_isSet = !json[QString("UserRole")].isNull() && m_user_role_isValid;

    m_iam_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_arn, json[QString("IamArn")]);
    m_iam_arn_isSet = !json[QString("IamArn")].isNull() && m_iam_arn_isValid;

    m_session_name_isValid = ::OpenAPI::fromJsonValue(m_session_name, json[QString("SessionName")]);
    m_session_name_isSet = !json[QString("SessionName")].isNull() && m_session_name_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_custom_permissions_name_isValid = ::OpenAPI::fromJsonValue(m_custom_permissions_name, json[QString("CustomPermissionsName")]);
    m_custom_permissions_name_isSet = !json[QString("CustomPermissionsName")].isNull() && m_custom_permissions_name_isValid;

    m_external_login_federation_provider_type_isValid = ::OpenAPI::fromJsonValue(m_external_login_federation_provider_type, json[QString("ExternalLoginFederationProviderType")]);
    m_external_login_federation_provider_type_isSet = !json[QString("ExternalLoginFederationProviderType")].isNull() && m_external_login_federation_provider_type_isValid;

    m_custom_federation_provider_url_isValid = ::OpenAPI::fromJsonValue(m_custom_federation_provider_url, json[QString("CustomFederationProviderUrl")]);
    m_custom_federation_provider_url_isSet = !json[QString("CustomFederationProviderUrl")].isNull() && m_custom_federation_provider_url_isValid;

    m_external_login_id_isValid = ::OpenAPI::fromJsonValue(m_external_login_id, json[QString("ExternalLoginId")]);
    m_external_login_id_isSet = !json[QString("ExternalLoginId")].isNull() && m_external_login_id_isValid;
}

QString OAIRegisterUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_type.isSet()) {
        obj.insert(QString("IdentityType"), ::OpenAPI::toJsonValue(m_identity_type));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_user_role.isSet()) {
        obj.insert(QString("UserRole"), ::OpenAPI::toJsonValue(m_user_role));
    }
    if (m_iam_arn_isSet) {
        obj.insert(QString("IamArn"), ::OpenAPI::toJsonValue(m_iam_arn));
    }
    if (m_session_name_isSet) {
        obj.insert(QString("SessionName"), ::OpenAPI::toJsonValue(m_session_name));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_custom_permissions_name_isSet) {
        obj.insert(QString("CustomPermissionsName"), ::OpenAPI::toJsonValue(m_custom_permissions_name));
    }
    if (m_external_login_federation_provider_type_isSet) {
        obj.insert(QString("ExternalLoginFederationProviderType"), ::OpenAPI::toJsonValue(m_external_login_federation_provider_type));
    }
    if (m_custom_federation_provider_url_isSet) {
        obj.insert(QString("CustomFederationProviderUrl"), ::OpenAPI::toJsonValue(m_custom_federation_provider_url));
    }
    if (m_external_login_id_isSet) {
        obj.insert(QString("ExternalLoginId"), ::OpenAPI::toJsonValue(m_external_login_id));
    }
    return obj;
}

OAIIdentityType OAIRegisterUserRequest::getIdentityType() const {
    return m_identity_type;
}
void OAIRegisterUserRequest::setIdentityType(const OAIIdentityType &identity_type) {
    m_identity_type = identity_type;
    m_identity_type_isSet = true;
}

bool OAIRegisterUserRequest::is_identity_type_Set() const{
    return m_identity_type_isSet;
}

bool OAIRegisterUserRequest::is_identity_type_Valid() const{
    return m_identity_type_isValid;
}

QString OAIRegisterUserRequest::getEmail() const {
    return m_email;
}
void OAIRegisterUserRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRegisterUserRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRegisterUserRequest::is_email_Valid() const{
    return m_email_isValid;
}

OAIUserRole OAIRegisterUserRequest::getUserRole() const {
    return m_user_role;
}
void OAIRegisterUserRequest::setUserRole(const OAIUserRole &user_role) {
    m_user_role = user_role;
    m_user_role_isSet = true;
}

bool OAIRegisterUserRequest::is_user_role_Set() const{
    return m_user_role_isSet;
}

bool OAIRegisterUserRequest::is_user_role_Valid() const{
    return m_user_role_isValid;
}

QString OAIRegisterUserRequest::getIamArn() const {
    return m_iam_arn;
}
void OAIRegisterUserRequest::setIamArn(const QString &iam_arn) {
    m_iam_arn = iam_arn;
    m_iam_arn_isSet = true;
}

bool OAIRegisterUserRequest::is_iam_arn_Set() const{
    return m_iam_arn_isSet;
}

bool OAIRegisterUserRequest::is_iam_arn_Valid() const{
    return m_iam_arn_isValid;
}

QString OAIRegisterUserRequest::getSessionName() const {
    return m_session_name;
}
void OAIRegisterUserRequest::setSessionName(const QString &session_name) {
    m_session_name = session_name;
    m_session_name_isSet = true;
}

bool OAIRegisterUserRequest::is_session_name_Set() const{
    return m_session_name_isSet;
}

bool OAIRegisterUserRequest::is_session_name_Valid() const{
    return m_session_name_isValid;
}

QString OAIRegisterUserRequest::getUserName() const {
    return m_user_name;
}
void OAIRegisterUserRequest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIRegisterUserRequest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIRegisterUserRequest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIRegisterUserRequest::getCustomPermissionsName() const {
    return m_custom_permissions_name;
}
void OAIRegisterUserRequest::setCustomPermissionsName(const QString &custom_permissions_name) {
    m_custom_permissions_name = custom_permissions_name;
    m_custom_permissions_name_isSet = true;
}

bool OAIRegisterUserRequest::is_custom_permissions_name_Set() const{
    return m_custom_permissions_name_isSet;
}

bool OAIRegisterUserRequest::is_custom_permissions_name_Valid() const{
    return m_custom_permissions_name_isValid;
}

QString OAIRegisterUserRequest::getExternalLoginFederationProviderType() const {
    return m_external_login_federation_provider_type;
}
void OAIRegisterUserRequest::setExternalLoginFederationProviderType(const QString &external_login_federation_provider_type) {
    m_external_login_federation_provider_type = external_login_federation_provider_type;
    m_external_login_federation_provider_type_isSet = true;
}

bool OAIRegisterUserRequest::is_external_login_federation_provider_type_Set() const{
    return m_external_login_federation_provider_type_isSet;
}

bool OAIRegisterUserRequest::is_external_login_federation_provider_type_Valid() const{
    return m_external_login_federation_provider_type_isValid;
}

QString OAIRegisterUserRequest::getCustomFederationProviderUrl() const {
    return m_custom_federation_provider_url;
}
void OAIRegisterUserRequest::setCustomFederationProviderUrl(const QString &custom_federation_provider_url) {
    m_custom_federation_provider_url = custom_federation_provider_url;
    m_custom_federation_provider_url_isSet = true;
}

bool OAIRegisterUserRequest::is_custom_federation_provider_url_Set() const{
    return m_custom_federation_provider_url_isSet;
}

bool OAIRegisterUserRequest::is_custom_federation_provider_url_Valid() const{
    return m_custom_federation_provider_url_isValid;
}

QString OAIRegisterUserRequest::getExternalLoginId() const {
    return m_external_login_id;
}
void OAIRegisterUserRequest::setExternalLoginId(const QString &external_login_id) {
    m_external_login_id = external_login_id;
    m_external_login_id_isSet = true;
}

bool OAIRegisterUserRequest::is_external_login_id_Set() const{
    return m_external_login_id_isSet;
}

bool OAIRegisterUserRequest::is_external_login_id_Valid() const{
    return m_external_login_id_isValid;
}

bool OAIRegisterUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_permissions_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_login_federation_provider_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_federation_provider_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_login_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_type_isValid && m_email_isValid && m_user_role_isValid && true;
}

} // namespace OpenAPI
