/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableFieldURLConfiguration_ImageConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableFieldURLConfiguration_ImageConfiguration::OAITableFieldURLConfiguration_ImageConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableFieldURLConfiguration_ImageConfiguration::OAITableFieldURLConfiguration_ImageConfiguration() {
    this->initializeModel();
}

OAITableFieldURLConfiguration_ImageConfiguration::~OAITableFieldURLConfiguration_ImageConfiguration() {}

void OAITableFieldURLConfiguration_ImageConfiguration::initializeModel() {

    m_sizing_options_isSet = false;
    m_sizing_options_isValid = false;
}

void OAITableFieldURLConfiguration_ImageConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableFieldURLConfiguration_ImageConfiguration::fromJsonObject(QJsonObject json) {

    m_sizing_options_isValid = ::OpenAPI::fromJsonValue(m_sizing_options, json[QString("SizingOptions")]);
    m_sizing_options_isSet = !json[QString("SizingOptions")].isNull() && m_sizing_options_isValid;
}

QString OAITableFieldURLConfiguration_ImageConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableFieldURLConfiguration_ImageConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_sizing_options.isSet()) {
        obj.insert(QString("SizingOptions"), ::OpenAPI::toJsonValue(m_sizing_options));
    }
    return obj;
}

OAITableFieldImageConfiguration_SizingOptions OAITableFieldURLConfiguration_ImageConfiguration::getSizingOptions() const {
    return m_sizing_options;
}
void OAITableFieldURLConfiguration_ImageConfiguration::setSizingOptions(const OAITableFieldImageConfiguration_SizingOptions &sizing_options) {
    m_sizing_options = sizing_options;
    m_sizing_options_isSet = true;
}

bool OAITableFieldURLConfiguration_ImageConfiguration::is_sizing_options_Set() const{
    return m_sizing_options_isSet;
}

bool OAITableFieldURLConfiguration_ImageConfiguration::is_sizing_options_Valid() const{
    return m_sizing_options_isValid;
}

bool OAITableFieldURLConfiguration_ImageConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sizing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableFieldURLConfiguration_ImageConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
