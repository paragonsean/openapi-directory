/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBodySectionConfiguration_Content.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBodySectionConfiguration_Content::OAIBodySectionConfiguration_Content(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBodySectionConfiguration_Content::OAIBodySectionConfiguration_Content() {
    this->initializeModel();
}

OAIBodySectionConfiguration_Content::~OAIBodySectionConfiguration_Content() {}

void OAIBodySectionConfiguration_Content::initializeModel() {

    m_layout_isSet = false;
    m_layout_isValid = false;
}

void OAIBodySectionConfiguration_Content::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBodySectionConfiguration_Content::fromJsonObject(QJsonObject json) {

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("Layout")]);
    m_layout_isSet = !json[QString("Layout")].isNull() && m_layout_isValid;
}

QString OAIBodySectionConfiguration_Content::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBodySectionConfiguration_Content::asJsonObject() const {
    QJsonObject obj;
    if (m_layout.isSet()) {
        obj.insert(QString("Layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    return obj;
}

OAIBodySectionContent_Layout OAIBodySectionConfiguration_Content::getLayout() const {
    return m_layout;
}
void OAIBodySectionConfiguration_Content::setLayout(const OAIBodySectionContent_Layout &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIBodySectionConfiguration_Content::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIBodySectionConfiguration_Content::is_layout_Valid() const{
    return m_layout_isValid;
}

bool OAIBodySectionConfiguration_Content::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBodySectionConfiguration_Content::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
