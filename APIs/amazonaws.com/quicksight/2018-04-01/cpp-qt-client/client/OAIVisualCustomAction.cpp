/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisualCustomAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisualCustomAction::OAIVisualCustomAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisualCustomAction::OAIVisualCustomAction() {
    this->initializeModel();
}

OAIVisualCustomAction::~OAIVisualCustomAction() {}

void OAIVisualCustomAction::initializeModel() {

    m_custom_action_id_isSet = false;
    m_custom_action_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_action_operations_isSet = false;
    m_action_operations_isValid = false;
}

void OAIVisualCustomAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisualCustomAction::fromJsonObject(QJsonObject json) {

    m_custom_action_id_isValid = ::OpenAPI::fromJsonValue(m_custom_action_id, json[QString("CustomActionId")]);
    m_custom_action_id_isSet = !json[QString("CustomActionId")].isNull() && m_custom_action_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("Trigger")]);
    m_trigger_isSet = !json[QString("Trigger")].isNull() && m_trigger_isValid;

    m_action_operations_isValid = ::OpenAPI::fromJsonValue(m_action_operations, json[QString("ActionOperations")]);
    m_action_operations_isSet = !json[QString("ActionOperations")].isNull() && m_action_operations_isValid;
}

QString OAIVisualCustomAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisualCustomAction::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_action_id_isSet) {
        obj.insert(QString("CustomActionId"), ::OpenAPI::toJsonValue(m_custom_action_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_trigger.isSet()) {
        obj.insert(QString("Trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_action_operations.isSet()) {
        obj.insert(QString("ActionOperations"), ::OpenAPI::toJsonValue(m_action_operations));
    }
    return obj;
}

QString OAIVisualCustomAction::getCustomActionId() const {
    return m_custom_action_id;
}
void OAIVisualCustomAction::setCustomActionId(const QString &custom_action_id) {
    m_custom_action_id = custom_action_id;
    m_custom_action_id_isSet = true;
}

bool OAIVisualCustomAction::is_custom_action_id_Set() const{
    return m_custom_action_id_isSet;
}

bool OAIVisualCustomAction::is_custom_action_id_Valid() const{
    return m_custom_action_id_isValid;
}

QString OAIVisualCustomAction::getName() const {
    return m_name;
}
void OAIVisualCustomAction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVisualCustomAction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVisualCustomAction::is_name_Valid() const{
    return m_name_isValid;
}

OAIWidgetStatus OAIVisualCustomAction::getStatus() const {
    return m_status;
}
void OAIVisualCustomAction::setStatus(const OAIWidgetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVisualCustomAction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVisualCustomAction::is_status_Valid() const{
    return m_status_isValid;
}

OAIVisualCustomActionTrigger OAIVisualCustomAction::getTrigger() const {
    return m_trigger;
}
void OAIVisualCustomAction::setTrigger(const OAIVisualCustomActionTrigger &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIVisualCustomAction::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIVisualCustomAction::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QList OAIVisualCustomAction::getActionOperations() const {
    return m_action_operations;
}
void OAIVisualCustomAction::setActionOperations(const QList &action_operations) {
    m_action_operations = action_operations;
    m_action_operations_isSet = true;
}

bool OAIVisualCustomAction::is_action_operations_Set() const{
    return m_action_operations_isSet;
}

bool OAIVisualCustomAction::is_action_operations_Valid() const{
    return m_action_operations_isValid;
}

bool OAIVisualCustomAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisualCustomAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_custom_action_id_isValid && m_name_isValid && m_trigger_isValid && m_action_operations_isValid && true;
}

} // namespace OpenAPI
