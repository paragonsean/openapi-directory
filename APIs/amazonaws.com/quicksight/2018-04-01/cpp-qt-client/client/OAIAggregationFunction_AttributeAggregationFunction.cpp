/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationFunction_AttributeAggregationFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationFunction_AttributeAggregationFunction::OAIAggregationFunction_AttributeAggregationFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationFunction_AttributeAggregationFunction::OAIAggregationFunction_AttributeAggregationFunction() {
    this->initializeModel();
}

OAIAggregationFunction_AttributeAggregationFunction::~OAIAggregationFunction_AttributeAggregationFunction() {}

void OAIAggregationFunction_AttributeAggregationFunction::initializeModel() {

    m_simple_attribute_aggregation_isSet = false;
    m_simple_attribute_aggregation_isValid = false;

    m_value_for_multiple_values_isSet = false;
    m_value_for_multiple_values_isValid = false;
}

void OAIAggregationFunction_AttributeAggregationFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationFunction_AttributeAggregationFunction::fromJsonObject(QJsonObject json) {

    m_simple_attribute_aggregation_isValid = ::OpenAPI::fromJsonValue(m_simple_attribute_aggregation, json[QString("SimpleAttributeAggregation")]);
    m_simple_attribute_aggregation_isSet = !json[QString("SimpleAttributeAggregation")].isNull() && m_simple_attribute_aggregation_isValid;

    m_value_for_multiple_values_isValid = ::OpenAPI::fromJsonValue(m_value_for_multiple_values, json[QString("ValueForMultipleValues")]);
    m_value_for_multiple_values_isSet = !json[QString("ValueForMultipleValues")].isNull() && m_value_for_multiple_values_isValid;
}

QString OAIAggregationFunction_AttributeAggregationFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationFunction_AttributeAggregationFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_simple_attribute_aggregation.isSet()) {
        obj.insert(QString("SimpleAttributeAggregation"), ::OpenAPI::toJsonValue(m_simple_attribute_aggregation));
    }
    if (m_value_for_multiple_values_isSet) {
        obj.insert(QString("ValueForMultipleValues"), ::OpenAPI::toJsonValue(m_value_for_multiple_values));
    }
    return obj;
}

OAISimpleAttributeAggregationFunction OAIAggregationFunction_AttributeAggregationFunction::getSimpleAttributeAggregation() const {
    return m_simple_attribute_aggregation;
}
void OAIAggregationFunction_AttributeAggregationFunction::setSimpleAttributeAggregation(const OAISimpleAttributeAggregationFunction &simple_attribute_aggregation) {
    m_simple_attribute_aggregation = simple_attribute_aggregation;
    m_simple_attribute_aggregation_isSet = true;
}

bool OAIAggregationFunction_AttributeAggregationFunction::is_simple_attribute_aggregation_Set() const{
    return m_simple_attribute_aggregation_isSet;
}

bool OAIAggregationFunction_AttributeAggregationFunction::is_simple_attribute_aggregation_Valid() const{
    return m_simple_attribute_aggregation_isValid;
}

QString OAIAggregationFunction_AttributeAggregationFunction::getValueForMultipleValues() const {
    return m_value_for_multiple_values;
}
void OAIAggregationFunction_AttributeAggregationFunction::setValueForMultipleValues(const QString &value_for_multiple_values) {
    m_value_for_multiple_values = value_for_multiple_values;
    m_value_for_multiple_values_isSet = true;
}

bool OAIAggregationFunction_AttributeAggregationFunction::is_value_for_multiple_values_Set() const{
    return m_value_for_multiple_values_isSet;
}

bool OAIAggregationFunction_AttributeAggregationFunction::is_value_for_multiple_values_Valid() const{
    return m_value_for_multiple_values_isValid;
}

bool OAIAggregationFunction_AttributeAggregationFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_simple_attribute_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_for_multiple_values_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationFunction_AttributeAggregationFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
