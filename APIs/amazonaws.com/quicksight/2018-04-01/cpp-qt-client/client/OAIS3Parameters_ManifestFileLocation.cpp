/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Parameters_ManifestFileLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Parameters_ManifestFileLocation::OAIS3Parameters_ManifestFileLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Parameters_ManifestFileLocation::OAIS3Parameters_ManifestFileLocation() {
    this->initializeModel();
}

OAIS3Parameters_ManifestFileLocation::~OAIS3Parameters_ManifestFileLocation() {}

void OAIS3Parameters_ManifestFileLocation::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIS3Parameters_ManifestFileLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Parameters_ManifestFileLocation::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;
}

QString OAIS3Parameters_ManifestFileLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Parameters_ManifestFileLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QString OAIS3Parameters_ManifestFileLocation::getBucket() const {
    return m_bucket;
}
void OAIS3Parameters_ManifestFileLocation::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIS3Parameters_ManifestFileLocation::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIS3Parameters_ManifestFileLocation::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIS3Parameters_ManifestFileLocation::getKey() const {
    return m_key;
}
void OAIS3Parameters_ManifestFileLocation::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIS3Parameters_ManifestFileLocation::is_key_Set() const{
    return m_key_isSet;
}

bool OAIS3Parameters_ManifestFileLocation::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIS3Parameters_ManifestFileLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Parameters_ManifestFileLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
