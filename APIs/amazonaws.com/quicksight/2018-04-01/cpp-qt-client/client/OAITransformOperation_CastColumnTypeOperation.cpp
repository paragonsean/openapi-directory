/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformOperation_CastColumnTypeOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformOperation_CastColumnTypeOperation::OAITransformOperation_CastColumnTypeOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformOperation_CastColumnTypeOperation::OAITransformOperation_CastColumnTypeOperation() {
    this->initializeModel();
}

OAITransformOperation_CastColumnTypeOperation::~OAITransformOperation_CastColumnTypeOperation() {}

void OAITransformOperation_CastColumnTypeOperation::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_new_column_type_isSet = false;
    m_new_column_type_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAITransformOperation_CastColumnTypeOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformOperation_CastColumnTypeOperation::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_new_column_type_isValid = ::OpenAPI::fromJsonValue(m_new_column_type, json[QString("NewColumnType")]);
    m_new_column_type_isSet = !json[QString("NewColumnType")].isNull() && m_new_column_type_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;
}

QString OAITransformOperation_CastColumnTypeOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformOperation_CastColumnTypeOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_new_column_type.isSet()) {
        obj.insert(QString("NewColumnType"), ::OpenAPI::toJsonValue(m_new_column_type));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

QString OAITransformOperation_CastColumnTypeOperation::getColumnName() const {
    return m_column_name;
}
void OAITransformOperation_CastColumnTypeOperation::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAITransformOperation_CastColumnTypeOperation::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAITransformOperation_CastColumnTypeOperation::is_column_name_Valid() const{
    return m_column_name_isValid;
}

OAIColumnDataType OAITransformOperation_CastColumnTypeOperation::getNewColumnType() const {
    return m_new_column_type;
}
void OAITransformOperation_CastColumnTypeOperation::setNewColumnType(const OAIColumnDataType &new_column_type) {
    m_new_column_type = new_column_type;
    m_new_column_type_isSet = true;
}

bool OAITransformOperation_CastColumnTypeOperation::is_new_column_type_Set() const{
    return m_new_column_type_isSet;
}

bool OAITransformOperation_CastColumnTypeOperation::is_new_column_type_Valid() const{
    return m_new_column_type_isValid;
}

QString OAITransformOperation_CastColumnTypeOperation::getFormat() const {
    return m_format;
}
void OAITransformOperation_CastColumnTypeOperation::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAITransformOperation_CastColumnTypeOperation::is_format_Set() const{
    return m_format_isSet;
}

bool OAITransformOperation_CastColumnTypeOperation::is_format_Valid() const{
    return m_format_isValid;
}

bool OAITransformOperation_CastColumnTypeOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_column_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformOperation_CastColumnTypeOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_new_column_type_isValid && true;
}

} // namespace OpenAPI
