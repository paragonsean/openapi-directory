/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScatterPlotConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScatterPlotConfiguration::OAIScatterPlotConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScatterPlotConfiguration::OAIScatterPlotConfiguration() {
    this->initializeModel();
}

OAIScatterPlotConfiguration::~OAIScatterPlotConfiguration() {}

void OAIScatterPlotConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_x_axis_label_options_isSet = false;
    m_x_axis_label_options_isValid = false;

    m_x_axis_display_options_isSet = false;
    m_x_axis_display_options_isValid = false;

    m_y_axis_label_options_isSet = false;
    m_y_axis_label_options_isValid = false;

    m_y_axis_display_options_isSet = false;
    m_y_axis_display_options_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAIScatterPlotConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScatterPlotConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_x_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_x_axis_label_options, json[QString("XAxisLabelOptions")]);
    m_x_axis_label_options_isSet = !json[QString("XAxisLabelOptions")].isNull() && m_x_axis_label_options_isValid;

    m_x_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_x_axis_display_options, json[QString("XAxisDisplayOptions")]);
    m_x_axis_display_options_isSet = !json[QString("XAxisDisplayOptions")].isNull() && m_x_axis_display_options_isValid;

    m_y_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_y_axis_label_options, json[QString("YAxisLabelOptions")]);
    m_y_axis_label_options_isSet = !json[QString("YAxisLabelOptions")].isNull() && m_y_axis_label_options_isValid;

    m_y_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_y_axis_display_options, json[QString("YAxisDisplayOptions")]);
    m_y_axis_display_options_isSet = !json[QString("YAxisDisplayOptions")].isNull() && m_y_axis_display_options_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAIScatterPlotConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScatterPlotConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_x_axis_label_options.isSet()) {
        obj.insert(QString("XAxisLabelOptions"), ::OpenAPI::toJsonValue(m_x_axis_label_options));
    }
    if (m_x_axis_display_options.isSet()) {
        obj.insert(QString("XAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_x_axis_display_options));
    }
    if (m_y_axis_label_options.isSet()) {
        obj.insert(QString("YAxisLabelOptions"), ::OpenAPI::toJsonValue(m_y_axis_label_options));
    }
    if (m_y_axis_display_options.isSet()) {
        obj.insert(QString("YAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_y_axis_display_options));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAIScatterPlotConfiguration_FieldWells OAIScatterPlotConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIScatterPlotConfiguration::setFieldWells(const OAIScatterPlotConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIScatterPlotConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIScatterPlotConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIScatterPlotConfiguration_XAxisLabelOptions OAIScatterPlotConfiguration::getXAxisLabelOptions() const {
    return m_x_axis_label_options;
}
void OAIScatterPlotConfiguration::setXAxisLabelOptions(const OAIScatterPlotConfiguration_XAxisLabelOptions &x_axis_label_options) {
    m_x_axis_label_options = x_axis_label_options;
    m_x_axis_label_options_isSet = true;
}

bool OAIScatterPlotConfiguration::is_x_axis_label_options_Set() const{
    return m_x_axis_label_options_isSet;
}

bool OAIScatterPlotConfiguration::is_x_axis_label_options_Valid() const{
    return m_x_axis_label_options_isValid;
}

OAIScatterPlotConfiguration_XAxisDisplayOptions OAIScatterPlotConfiguration::getXAxisDisplayOptions() const {
    return m_x_axis_display_options;
}
void OAIScatterPlotConfiguration::setXAxisDisplayOptions(const OAIScatterPlotConfiguration_XAxisDisplayOptions &x_axis_display_options) {
    m_x_axis_display_options = x_axis_display_options;
    m_x_axis_display_options_isSet = true;
}

bool OAIScatterPlotConfiguration::is_x_axis_display_options_Set() const{
    return m_x_axis_display_options_isSet;
}

bool OAIScatterPlotConfiguration::is_x_axis_display_options_Valid() const{
    return m_x_axis_display_options_isValid;
}

OAIScatterPlotConfiguration_YAxisLabelOptions OAIScatterPlotConfiguration::getYAxisLabelOptions() const {
    return m_y_axis_label_options;
}
void OAIScatterPlotConfiguration::setYAxisLabelOptions(const OAIScatterPlotConfiguration_YAxisLabelOptions &y_axis_label_options) {
    m_y_axis_label_options = y_axis_label_options;
    m_y_axis_label_options_isSet = true;
}

bool OAIScatterPlotConfiguration::is_y_axis_label_options_Set() const{
    return m_y_axis_label_options_isSet;
}

bool OAIScatterPlotConfiguration::is_y_axis_label_options_Valid() const{
    return m_y_axis_label_options_isValid;
}

OAIScatterPlotConfiguration_YAxisDisplayOptions OAIScatterPlotConfiguration::getYAxisDisplayOptions() const {
    return m_y_axis_display_options;
}
void OAIScatterPlotConfiguration::setYAxisDisplayOptions(const OAIScatterPlotConfiguration_YAxisDisplayOptions &y_axis_display_options) {
    m_y_axis_display_options = y_axis_display_options;
    m_y_axis_display_options_isSet = true;
}

bool OAIScatterPlotConfiguration::is_y_axis_display_options_Set() const{
    return m_y_axis_display_options_isSet;
}

bool OAIScatterPlotConfiguration::is_y_axis_display_options_Valid() const{
    return m_y_axis_display_options_isValid;
}

OAIBarChartConfiguration_Legend OAIScatterPlotConfiguration::getLegend() const {
    return m_legend;
}
void OAIScatterPlotConfiguration::setLegend(const OAIBarChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIScatterPlotConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIScatterPlotConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIBarChartConfiguration_DataLabels OAIScatterPlotConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAIScatterPlotConfiguration::setDataLabels(const OAIBarChartConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAIScatterPlotConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAIScatterPlotConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

OAIComboChartConfiguration_Tooltip OAIScatterPlotConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIScatterPlotConfiguration::setTooltip(const OAIComboChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIScatterPlotConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIScatterPlotConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

OAIBarChartConfiguration_VisualPalette OAIScatterPlotConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIScatterPlotConfiguration::setVisualPalette(const OAIBarChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIScatterPlotConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIScatterPlotConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAIScatterPlotConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScatterPlotConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
