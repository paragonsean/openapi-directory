/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnConfiguration::OAIColumnConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnConfiguration::OAIColumnConfiguration() {
    this->initializeModel();
}

OAIColumnConfiguration::~OAIColumnConfiguration() {}

void OAIColumnConfiguration::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_format_configuration_isSet = false;
    m_format_configuration_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_colors_configuration_isSet = false;
    m_colors_configuration_isValid = false;
}

void OAIColumnConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnConfiguration::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_format_configuration, json[QString("FormatConfiguration")]);
    m_format_configuration_isSet = !json[QString("FormatConfiguration")].isNull() && m_format_configuration_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_colors_configuration_isValid = ::OpenAPI::fromJsonValue(m_colors_configuration, json[QString("ColorsConfiguration")]);
    m_colors_configuration_isSet = !json[QString("ColorsConfiguration")].isNull() && m_colors_configuration_isValid;
}

QString OAIColumnConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_format_configuration.isSet()) {
        obj.insert(QString("FormatConfiguration"), ::OpenAPI::toJsonValue(m_format_configuration));
    }
    if (m_role.isSet()) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_colors_configuration.isSet()) {
        obj.insert(QString("ColorsConfiguration"), ::OpenAPI::toJsonValue(m_colors_configuration));
    }
    return obj;
}

OAIColumnConfiguration_Column OAIColumnConfiguration::getColumn() const {
    return m_column;
}
void OAIColumnConfiguration::setColumn(const OAIColumnConfiguration_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIColumnConfiguration::is_column_Set() const{
    return m_column_isSet;
}

bool OAIColumnConfiguration::is_column_Valid() const{
    return m_column_isValid;
}

OAIColumnConfiguration_FormatConfiguration OAIColumnConfiguration::getFormatConfiguration() const {
    return m_format_configuration;
}
void OAIColumnConfiguration::setFormatConfiguration(const OAIColumnConfiguration_FormatConfiguration &format_configuration) {
    m_format_configuration = format_configuration;
    m_format_configuration_isSet = true;
}

bool OAIColumnConfiguration::is_format_configuration_Set() const{
    return m_format_configuration_isSet;
}

bool OAIColumnConfiguration::is_format_configuration_Valid() const{
    return m_format_configuration_isValid;
}

OAIColumnRole OAIColumnConfiguration::getRole() const {
    return m_role;
}
void OAIColumnConfiguration::setRole(const OAIColumnRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIColumnConfiguration::is_role_Set() const{
    return m_role_isSet;
}

bool OAIColumnConfiguration::is_role_Valid() const{
    return m_role_isValid;
}

OAIColumnConfiguration_ColorsConfiguration OAIColumnConfiguration::getColorsConfiguration() const {
    return m_colors_configuration;
}
void OAIColumnConfiguration::setColorsConfiguration(const OAIColumnConfiguration_ColorsConfiguration &colors_configuration) {
    m_colors_configuration = colors_configuration;
    m_colors_configuration_isSet = true;
}

bool OAIColumnConfiguration::is_colors_configuration_Set() const{
    return m_colors_configuration_isSet;
}

bool OAIColumnConfiguration::is_colors_configuration_Valid() const{
    return m_colors_configuration_isValid;
}

bool OAIColumnConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_isValid && true;
}

} // namespace OpenAPI
