/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogicalTableSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogicalTableSource::OAILogicalTableSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogicalTableSource::OAILogicalTableSource() {
    this->initializeModel();
}

OAILogicalTableSource::~OAILogicalTableSource() {}

void OAILogicalTableSource::initializeModel() {

    m_join_instruction_isSet = false;
    m_join_instruction_isValid = false;

    m_physical_table_id_isSet = false;
    m_physical_table_id_isValid = false;

    m_data_set_arn_isSet = false;
    m_data_set_arn_isValid = false;
}

void OAILogicalTableSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogicalTableSource::fromJsonObject(QJsonObject json) {

    m_join_instruction_isValid = ::OpenAPI::fromJsonValue(m_join_instruction, json[QString("JoinInstruction")]);
    m_join_instruction_isSet = !json[QString("JoinInstruction")].isNull() && m_join_instruction_isValid;

    m_physical_table_id_isValid = ::OpenAPI::fromJsonValue(m_physical_table_id, json[QString("PhysicalTableId")]);
    m_physical_table_id_isSet = !json[QString("PhysicalTableId")].isNull() && m_physical_table_id_isValid;

    m_data_set_arn_isValid = ::OpenAPI::fromJsonValue(m_data_set_arn, json[QString("DataSetArn")]);
    m_data_set_arn_isSet = !json[QString("DataSetArn")].isNull() && m_data_set_arn_isValid;
}

QString OAILogicalTableSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogicalTableSource::asJsonObject() const {
    QJsonObject obj;
    if (m_join_instruction.isSet()) {
        obj.insert(QString("JoinInstruction"), ::OpenAPI::toJsonValue(m_join_instruction));
    }
    if (m_physical_table_id_isSet) {
        obj.insert(QString("PhysicalTableId"), ::OpenAPI::toJsonValue(m_physical_table_id));
    }
    if (m_data_set_arn_isSet) {
        obj.insert(QString("DataSetArn"), ::OpenAPI::toJsonValue(m_data_set_arn));
    }
    return obj;
}

OAILogicalTableSource_JoinInstruction OAILogicalTableSource::getJoinInstruction() const {
    return m_join_instruction;
}
void OAILogicalTableSource::setJoinInstruction(const OAILogicalTableSource_JoinInstruction &join_instruction) {
    m_join_instruction = join_instruction;
    m_join_instruction_isSet = true;
}

bool OAILogicalTableSource::is_join_instruction_Set() const{
    return m_join_instruction_isSet;
}

bool OAILogicalTableSource::is_join_instruction_Valid() const{
    return m_join_instruction_isValid;
}

QString OAILogicalTableSource::getPhysicalTableId() const {
    return m_physical_table_id;
}
void OAILogicalTableSource::setPhysicalTableId(const QString &physical_table_id) {
    m_physical_table_id = physical_table_id;
    m_physical_table_id_isSet = true;
}

bool OAILogicalTableSource::is_physical_table_id_Set() const{
    return m_physical_table_id_isSet;
}

bool OAILogicalTableSource::is_physical_table_id_Valid() const{
    return m_physical_table_id_isValid;
}

QString OAILogicalTableSource::getDataSetArn() const {
    return m_data_set_arn;
}
void OAILogicalTableSource::setDataSetArn(const QString &data_set_arn) {
    m_data_set_arn = data_set_arn;
    m_data_set_arn_isSet = true;
}

bool OAILogicalTableSource::is_data_set_arn_Set() const{
    return m_data_set_arn_isSet;
}

bool OAILogicalTableSource::is_data_set_arn_Valid() const{
    return m_data_set_arn_isValid;
}

bool OAILogicalTableSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_join_instruction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogicalTableSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
