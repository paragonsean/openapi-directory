/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeThemePermissionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeThemePermissionsResponse::OAIDescribeThemePermissionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeThemePermissionsResponse::OAIDescribeThemePermissionsResponse() {
    this->initializeModel();
}

OAIDescribeThemePermissionsResponse::~OAIDescribeThemePermissionsResponse() {}

void OAIDescribeThemePermissionsResponse::initializeModel() {

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;

    m_theme_arn_isSet = false;
    m_theme_arn_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeThemePermissionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeThemePermissionsResponse::fromJsonObject(QJsonObject json) {

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("ThemeId")]);
    m_theme_id_isSet = !json[QString("ThemeId")].isNull() && m_theme_id_isValid;

    m_theme_arn_isValid = ::OpenAPI::fromJsonValue(m_theme_arn, json[QString("ThemeArn")]);
    m_theme_arn_isSet = !json[QString("ThemeArn")].isNull() && m_theme_arn_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeThemePermissionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeThemePermissionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_theme_id_isSet) {
        obj.insert(QString("ThemeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    if (m_theme_arn_isSet) {
        obj.insert(QString("ThemeArn"), ::OpenAPI::toJsonValue(m_theme_arn));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDescribeThemePermissionsResponse::getThemeId() const {
    return m_theme_id;
}
void OAIDescribeThemePermissionsResponse::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAIDescribeThemePermissionsResponse::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAIDescribeThemePermissionsResponse::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

QString OAIDescribeThemePermissionsResponse::getThemeArn() const {
    return m_theme_arn;
}
void OAIDescribeThemePermissionsResponse::setThemeArn(const QString &theme_arn) {
    m_theme_arn = theme_arn;
    m_theme_arn_isSet = true;
}

bool OAIDescribeThemePermissionsResponse::is_theme_arn_Set() const{
    return m_theme_arn_isSet;
}

bool OAIDescribeThemePermissionsResponse::is_theme_arn_Valid() const{
    return m_theme_arn_isValid;
}

QList OAIDescribeThemePermissionsResponse::getPermissions() const {
    return m_permissions;
}
void OAIDescribeThemePermissionsResponse::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIDescribeThemePermissionsResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIDescribeThemePermissionsResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIDescribeThemePermissionsResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeThemePermissionsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeThemePermissionsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeThemePermissionsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeThemePermissionsResponse::getStatus() const {
    return m_status;
}
void OAIDescribeThemePermissionsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeThemePermissionsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeThemePermissionsResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeThemePermissionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeThemePermissionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
