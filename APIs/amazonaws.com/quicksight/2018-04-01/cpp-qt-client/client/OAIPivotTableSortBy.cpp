/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableSortBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableSortBy::OAIPivotTableSortBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableSortBy::OAIPivotTableSortBy() {
    this->initializeModel();
}

OAIPivotTableSortBy::~OAIPivotTableSortBy() {}

void OAIPivotTableSortBy::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_data_path_isSet = false;
    m_data_path_isValid = false;
}

void OAIPivotTableSortBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableSortBy::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("Field")]);
    m_field_isSet = !json[QString("Field")].isNull() && m_field_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_data_path_isValid = ::OpenAPI::fromJsonValue(m_data_path, json[QString("DataPath")]);
    m_data_path_isSet = !json[QString("DataPath")].isNull() && m_data_path_isValid;
}

QString OAIPivotTableSortBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableSortBy::asJsonObject() const {
    QJsonObject obj;
    if (m_field.isSet()) {
        obj.insert(QString("Field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_data_path.isSet()) {
        obj.insert(QString("DataPath"), ::OpenAPI::toJsonValue(m_data_path));
    }
    return obj;
}

OAIPivotTableSortBy_Field OAIPivotTableSortBy::getField() const {
    return m_field;
}
void OAIPivotTableSortBy::setField(const OAIPivotTableSortBy_Field &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIPivotTableSortBy::is_field_Set() const{
    return m_field_isSet;
}

bool OAIPivotTableSortBy::is_field_Valid() const{
    return m_field_isValid;
}

OAIPivotTableSortBy_Column OAIPivotTableSortBy::getColumn() const {
    return m_column;
}
void OAIPivotTableSortBy::setColumn(const OAIPivotTableSortBy_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIPivotTableSortBy::is_column_Set() const{
    return m_column_isSet;
}

bool OAIPivotTableSortBy::is_column_Valid() const{
    return m_column_isValid;
}

OAIPivotTableSortBy_DataPath OAIPivotTableSortBy::getDataPath() const {
    return m_data_path;
}
void OAIPivotTableSortBy::setDataPath(const OAIPivotTableSortBy_DataPath &data_path) {
    m_data_path = data_path;
    m_data_path_isSet = true;
}

bool OAIPivotTableSortBy::is_data_path_Set() const{
    return m_data_path_isSet;
}

bool OAIPivotTableSortBy::is_data_path_Valid() const{
    return m_data_path_isValid;
}

bool OAIPivotTableSortBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_path.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableSortBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
