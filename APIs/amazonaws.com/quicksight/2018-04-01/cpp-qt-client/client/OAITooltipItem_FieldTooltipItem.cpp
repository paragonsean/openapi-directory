/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITooltipItem_FieldTooltipItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITooltipItem_FieldTooltipItem::OAITooltipItem_FieldTooltipItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITooltipItem_FieldTooltipItem::OAITooltipItem_FieldTooltipItem() {
    this->initializeModel();
}

OAITooltipItem_FieldTooltipItem::~OAITooltipItem_FieldTooltipItem() {}

void OAITooltipItem_FieldTooltipItem::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAITooltipItem_FieldTooltipItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITooltipItem_FieldTooltipItem::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("Label")]);
    m_label_isSet = !json[QString("Label")].isNull() && m_label_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;
}

QString OAITooltipItem_FieldTooltipItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITooltipItem_FieldTooltipItem::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("Label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAITooltipItem_FieldTooltipItem::getFieldId() const {
    return m_field_id;
}
void OAITooltipItem_FieldTooltipItem::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAITooltipItem_FieldTooltipItem::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAITooltipItem_FieldTooltipItem::is_field_id_Valid() const{
    return m_field_id_isValid;
}

QString OAITooltipItem_FieldTooltipItem::getLabel() const {
    return m_label;
}
void OAITooltipItem_FieldTooltipItem::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAITooltipItem_FieldTooltipItem::is_label_Set() const{
    return m_label_isSet;
}

bool OAITooltipItem_FieldTooltipItem::is_label_Valid() const{
    return m_label_isValid;
}

OAIVisibility OAITooltipItem_FieldTooltipItem::getVisibility() const {
    return m_visibility;
}
void OAITooltipItem_FieldTooltipItem::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAITooltipItem_FieldTooltipItem::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAITooltipItem_FieldTooltipItem::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAITooltipItem_FieldTooltipItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITooltipItem_FieldTooltipItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && true;
}

} // namespace OpenAPI
