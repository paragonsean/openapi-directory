/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramBinOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramBinOptions::OAIHistogramBinOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramBinOptions::OAIHistogramBinOptions() {
    this->initializeModel();
}

OAIHistogramBinOptions::~OAIHistogramBinOptions() {}

void OAIHistogramBinOptions::initializeModel() {

    m_selected_bin_type_isSet = false;
    m_selected_bin_type_isValid = false;

    m_bin_count_isSet = false;
    m_bin_count_isValid = false;

    m_bin_width_isSet = false;
    m_bin_width_isValid = false;

    m_start_value_isSet = false;
    m_start_value_isValid = false;
}

void OAIHistogramBinOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramBinOptions::fromJsonObject(QJsonObject json) {

    m_selected_bin_type_isValid = ::OpenAPI::fromJsonValue(m_selected_bin_type, json[QString("SelectedBinType")]);
    m_selected_bin_type_isSet = !json[QString("SelectedBinType")].isNull() && m_selected_bin_type_isValid;

    m_bin_count_isValid = ::OpenAPI::fromJsonValue(m_bin_count, json[QString("BinCount")]);
    m_bin_count_isSet = !json[QString("BinCount")].isNull() && m_bin_count_isValid;

    m_bin_width_isValid = ::OpenAPI::fromJsonValue(m_bin_width, json[QString("BinWidth")]);
    m_bin_width_isSet = !json[QString("BinWidth")].isNull() && m_bin_width_isValid;

    m_start_value_isValid = ::OpenAPI::fromJsonValue(m_start_value, json[QString("StartValue")]);
    m_start_value_isSet = !json[QString("StartValue")].isNull() && m_start_value_isValid;
}

QString OAIHistogramBinOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramBinOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_bin_type.isSet()) {
        obj.insert(QString("SelectedBinType"), ::OpenAPI::toJsonValue(m_selected_bin_type));
    }
    if (m_bin_count.isSet()) {
        obj.insert(QString("BinCount"), ::OpenAPI::toJsonValue(m_bin_count));
    }
    if (m_bin_width.isSet()) {
        obj.insert(QString("BinWidth"), ::OpenAPI::toJsonValue(m_bin_width));
    }
    if (m_start_value_isSet) {
        obj.insert(QString("StartValue"), ::OpenAPI::toJsonValue(m_start_value));
    }
    return obj;
}

OAIHistogramBinType OAIHistogramBinOptions::getSelectedBinType() const {
    return m_selected_bin_type;
}
void OAIHistogramBinOptions::setSelectedBinType(const OAIHistogramBinType &selected_bin_type) {
    m_selected_bin_type = selected_bin_type;
    m_selected_bin_type_isSet = true;
}

bool OAIHistogramBinOptions::is_selected_bin_type_Set() const{
    return m_selected_bin_type_isSet;
}

bool OAIHistogramBinOptions::is_selected_bin_type_Valid() const{
    return m_selected_bin_type_isValid;
}

OAIHistogramBinOptions_BinCount OAIHistogramBinOptions::getBinCount() const {
    return m_bin_count;
}
void OAIHistogramBinOptions::setBinCount(const OAIHistogramBinOptions_BinCount &bin_count) {
    m_bin_count = bin_count;
    m_bin_count_isSet = true;
}

bool OAIHistogramBinOptions::is_bin_count_Set() const{
    return m_bin_count_isSet;
}

bool OAIHistogramBinOptions::is_bin_count_Valid() const{
    return m_bin_count_isValid;
}

OAIHistogramBinOptions_BinWidth OAIHistogramBinOptions::getBinWidth() const {
    return m_bin_width;
}
void OAIHistogramBinOptions::setBinWidth(const OAIHistogramBinOptions_BinWidth &bin_width) {
    m_bin_width = bin_width;
    m_bin_width_isSet = true;
}

bool OAIHistogramBinOptions::is_bin_width_Set() const{
    return m_bin_width_isSet;
}

bool OAIHistogramBinOptions::is_bin_width_Valid() const{
    return m_bin_width_isValid;
}

double OAIHistogramBinOptions::getStartValue() const {
    return m_start_value;
}
void OAIHistogramBinOptions::setStartValue(const double &start_value) {
    m_start_value = start_value;
    m_start_value_isSet = true;
}

bool OAIHistogramBinOptions::is_start_value_Set() const{
    return m_start_value_isSet;
}

bool OAIHistogramBinOptions::is_start_value_Valid() const{
    return m_start_value_isValid;
}

bool OAIHistogramBinOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_bin_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_width.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramBinOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
