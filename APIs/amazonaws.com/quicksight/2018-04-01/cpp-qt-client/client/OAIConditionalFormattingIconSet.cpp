/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingIconSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingIconSet::OAIConditionalFormattingIconSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingIconSet::OAIConditionalFormattingIconSet() {
    this->initializeModel();
}

OAIConditionalFormattingIconSet::~OAIConditionalFormattingIconSet() {}

void OAIConditionalFormattingIconSet::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_icon_set_type_isSet = false;
    m_icon_set_type_isValid = false;
}

void OAIConditionalFormattingIconSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalFormattingIconSet::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_icon_set_type_isValid = ::OpenAPI::fromJsonValue(m_icon_set_type, json[QString("IconSetType")]);
    m_icon_set_type_isSet = !json[QString("IconSetType")].isNull() && m_icon_set_type_isValid;
}

QString OAIConditionalFormattingIconSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalFormattingIconSet::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_icon_set_type.isSet()) {
        obj.insert(QString("IconSetType"), ::OpenAPI::toJsonValue(m_icon_set_type));
    }
    return obj;
}

QString OAIConditionalFormattingIconSet::getExpression() const {
    return m_expression;
}
void OAIConditionalFormattingIconSet::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIConditionalFormattingIconSet::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIConditionalFormattingIconSet::is_expression_Valid() const{
    return m_expression_isValid;
}

OAIConditionalFormattingIconSetType OAIConditionalFormattingIconSet::getIconSetType() const {
    return m_icon_set_type;
}
void OAIConditionalFormattingIconSet::setIconSetType(const OAIConditionalFormattingIconSetType &icon_set_type) {
    m_icon_set_type = icon_set_type;
    m_icon_set_type_isSet = true;
}

bool OAIConditionalFormattingIconSet::is_icon_set_type_Set() const{
    return m_icon_set_type_isSet;
}

bool OAIConditionalFormattingIconSet::is_icon_set_type_Valid() const{
    return m_icon_set_type_isValid;
}

bool OAIConditionalFormattingIconSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_set_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalFormattingIconSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && true;
}

} // namespace OpenAPI
