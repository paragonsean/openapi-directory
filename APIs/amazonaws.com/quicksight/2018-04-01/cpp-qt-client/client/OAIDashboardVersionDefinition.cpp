/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardVersionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardVersionDefinition::OAIDashboardVersionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardVersionDefinition::OAIDashboardVersionDefinition() {
    this->initializeModel();
}

OAIDashboardVersionDefinition::~OAIDashboardVersionDefinition() {}

void OAIDashboardVersionDefinition::initializeModel() {

    m_data_set_identifier_declarations_isSet = false;
    m_data_set_identifier_declarations_isValid = false;

    m_sheets_isSet = false;
    m_sheets_isValid = false;

    m_calculated_fields_isSet = false;
    m_calculated_fields_isValid = false;

    m_parameter_declarations_isSet = false;
    m_parameter_declarations_isValid = false;

    m_filter_groups_isSet = false;
    m_filter_groups_isValid = false;

    m_column_configurations_isSet = false;
    m_column_configurations_isValid = false;

    m_analysis_defaults_isSet = false;
    m_analysis_defaults_isValid = false;
}

void OAIDashboardVersionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardVersionDefinition::fromJsonObject(QJsonObject json) {

    m_data_set_identifier_declarations_isValid = ::OpenAPI::fromJsonValue(m_data_set_identifier_declarations, json[QString("DataSetIdentifierDeclarations")]);
    m_data_set_identifier_declarations_isSet = !json[QString("DataSetIdentifierDeclarations")].isNull() && m_data_set_identifier_declarations_isValid;

    m_sheets_isValid = ::OpenAPI::fromJsonValue(m_sheets, json[QString("Sheets")]);
    m_sheets_isSet = !json[QString("Sheets")].isNull() && m_sheets_isValid;

    m_calculated_fields_isValid = ::OpenAPI::fromJsonValue(m_calculated_fields, json[QString("CalculatedFields")]);
    m_calculated_fields_isSet = !json[QString("CalculatedFields")].isNull() && m_calculated_fields_isValid;

    m_parameter_declarations_isValid = ::OpenAPI::fromJsonValue(m_parameter_declarations, json[QString("ParameterDeclarations")]);
    m_parameter_declarations_isSet = !json[QString("ParameterDeclarations")].isNull() && m_parameter_declarations_isValid;

    m_filter_groups_isValid = ::OpenAPI::fromJsonValue(m_filter_groups, json[QString("FilterGroups")]);
    m_filter_groups_isSet = !json[QString("FilterGroups")].isNull() && m_filter_groups_isValid;

    m_column_configurations_isValid = ::OpenAPI::fromJsonValue(m_column_configurations, json[QString("ColumnConfigurations")]);
    m_column_configurations_isSet = !json[QString("ColumnConfigurations")].isNull() && m_column_configurations_isValid;

    m_analysis_defaults_isValid = ::OpenAPI::fromJsonValue(m_analysis_defaults, json[QString("AnalysisDefaults")]);
    m_analysis_defaults_isSet = !json[QString("AnalysisDefaults")].isNull() && m_analysis_defaults_isValid;
}

QString OAIDashboardVersionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardVersionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_identifier_declarations.isSet()) {
        obj.insert(QString("DataSetIdentifierDeclarations"), ::OpenAPI::toJsonValue(m_data_set_identifier_declarations));
    }
    if (m_sheets.isSet()) {
        obj.insert(QString("Sheets"), ::OpenAPI::toJsonValue(m_sheets));
    }
    if (m_calculated_fields.isSet()) {
        obj.insert(QString("CalculatedFields"), ::OpenAPI::toJsonValue(m_calculated_fields));
    }
    if (m_parameter_declarations.isSet()) {
        obj.insert(QString("ParameterDeclarations"), ::OpenAPI::toJsonValue(m_parameter_declarations));
    }
    if (m_filter_groups.isSet()) {
        obj.insert(QString("FilterGroups"), ::OpenAPI::toJsonValue(m_filter_groups));
    }
    if (m_column_configurations.isSet()) {
        obj.insert(QString("ColumnConfigurations"), ::OpenAPI::toJsonValue(m_column_configurations));
    }
    if (m_analysis_defaults.isSet()) {
        obj.insert(QString("AnalysisDefaults"), ::OpenAPI::toJsonValue(m_analysis_defaults));
    }
    return obj;
}

QList OAIDashboardVersionDefinition::getDataSetIdentifierDeclarations() const {
    return m_data_set_identifier_declarations;
}
void OAIDashboardVersionDefinition::setDataSetIdentifierDeclarations(const QList &data_set_identifier_declarations) {
    m_data_set_identifier_declarations = data_set_identifier_declarations;
    m_data_set_identifier_declarations_isSet = true;
}

bool OAIDashboardVersionDefinition::is_data_set_identifier_declarations_Set() const{
    return m_data_set_identifier_declarations_isSet;
}

bool OAIDashboardVersionDefinition::is_data_set_identifier_declarations_Valid() const{
    return m_data_set_identifier_declarations_isValid;
}

QList OAIDashboardVersionDefinition::getSheets() const {
    return m_sheets;
}
void OAIDashboardVersionDefinition::setSheets(const QList &sheets) {
    m_sheets = sheets;
    m_sheets_isSet = true;
}

bool OAIDashboardVersionDefinition::is_sheets_Set() const{
    return m_sheets_isSet;
}

bool OAIDashboardVersionDefinition::is_sheets_Valid() const{
    return m_sheets_isValid;
}

QList OAIDashboardVersionDefinition::getCalculatedFields() const {
    return m_calculated_fields;
}
void OAIDashboardVersionDefinition::setCalculatedFields(const QList &calculated_fields) {
    m_calculated_fields = calculated_fields;
    m_calculated_fields_isSet = true;
}

bool OAIDashboardVersionDefinition::is_calculated_fields_Set() const{
    return m_calculated_fields_isSet;
}

bool OAIDashboardVersionDefinition::is_calculated_fields_Valid() const{
    return m_calculated_fields_isValid;
}

QList OAIDashboardVersionDefinition::getParameterDeclarations() const {
    return m_parameter_declarations;
}
void OAIDashboardVersionDefinition::setParameterDeclarations(const QList &parameter_declarations) {
    m_parameter_declarations = parameter_declarations;
    m_parameter_declarations_isSet = true;
}

bool OAIDashboardVersionDefinition::is_parameter_declarations_Set() const{
    return m_parameter_declarations_isSet;
}

bool OAIDashboardVersionDefinition::is_parameter_declarations_Valid() const{
    return m_parameter_declarations_isValid;
}

QList OAIDashboardVersionDefinition::getFilterGroups() const {
    return m_filter_groups;
}
void OAIDashboardVersionDefinition::setFilterGroups(const QList &filter_groups) {
    m_filter_groups = filter_groups;
    m_filter_groups_isSet = true;
}

bool OAIDashboardVersionDefinition::is_filter_groups_Set() const{
    return m_filter_groups_isSet;
}

bool OAIDashboardVersionDefinition::is_filter_groups_Valid() const{
    return m_filter_groups_isValid;
}

QList OAIDashboardVersionDefinition::getColumnConfigurations() const {
    return m_column_configurations;
}
void OAIDashboardVersionDefinition::setColumnConfigurations(const QList &column_configurations) {
    m_column_configurations = column_configurations;
    m_column_configurations_isSet = true;
}

bool OAIDashboardVersionDefinition::is_column_configurations_Set() const{
    return m_column_configurations_isSet;
}

bool OAIDashboardVersionDefinition::is_column_configurations_Valid() const{
    return m_column_configurations_isValid;
}

OAIAnalysisDefaults OAIDashboardVersionDefinition::getAnalysisDefaults() const {
    return m_analysis_defaults;
}
void OAIDashboardVersionDefinition::setAnalysisDefaults(const OAIAnalysisDefaults &analysis_defaults) {
    m_analysis_defaults = analysis_defaults;
    m_analysis_defaults_isSet = true;
}

bool OAIDashboardVersionDefinition::is_analysis_defaults_Set() const{
    return m_analysis_defaults_isSet;
}

bool OAIDashboardVersionDefinition::is_analysis_defaults_Valid() const{
    return m_analysis_defaults_isValid;
}

bool OAIDashboardVersionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_identifier_declarations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_declarations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardVersionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_identifier_declarations_isValid && true;
}

} // namespace OpenAPI
