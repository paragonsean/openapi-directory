/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUserRequest::OAIUpdateUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUserRequest::OAIUpdateUserRequest() {
    this->initializeModel();
}

OAIUpdateUserRequest::~OAIUpdateUserRequest() {}

void OAIUpdateUserRequest::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_custom_permissions_name_isSet = false;
    m_custom_permissions_name_isValid = false;

    m_unapply_custom_permissions_isSet = false;
    m_unapply_custom_permissions_isValid = false;

    m_external_login_federation_provider_type_isSet = false;
    m_external_login_federation_provider_type_isValid = false;

    m_custom_federation_provider_url_isSet = false;
    m_custom_federation_provider_url_isValid = false;

    m_external_login_id_isSet = false;
    m_external_login_id_isValid = false;
}

void OAIUpdateUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUserRequest::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_custom_permissions_name_isValid = ::OpenAPI::fromJsonValue(m_custom_permissions_name, json[QString("CustomPermissionsName")]);
    m_custom_permissions_name_isSet = !json[QString("CustomPermissionsName")].isNull() && m_custom_permissions_name_isValid;

    m_unapply_custom_permissions_isValid = ::OpenAPI::fromJsonValue(m_unapply_custom_permissions, json[QString("UnapplyCustomPermissions")]);
    m_unapply_custom_permissions_isSet = !json[QString("UnapplyCustomPermissions")].isNull() && m_unapply_custom_permissions_isValid;

    m_external_login_federation_provider_type_isValid = ::OpenAPI::fromJsonValue(m_external_login_federation_provider_type, json[QString("ExternalLoginFederationProviderType")]);
    m_external_login_federation_provider_type_isSet = !json[QString("ExternalLoginFederationProviderType")].isNull() && m_external_login_federation_provider_type_isValid;

    m_custom_federation_provider_url_isValid = ::OpenAPI::fromJsonValue(m_custom_federation_provider_url, json[QString("CustomFederationProviderUrl")]);
    m_custom_federation_provider_url_isSet = !json[QString("CustomFederationProviderUrl")].isNull() && m_custom_federation_provider_url_isValid;

    m_external_login_id_isValid = ::OpenAPI::fromJsonValue(m_external_login_id, json[QString("ExternalLoginId")]);
    m_external_login_id_isSet = !json[QString("ExternalLoginId")].isNull() && m_external_login_id_isValid;
}

QString OAIUpdateUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_role.isSet()) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_custom_permissions_name_isSet) {
        obj.insert(QString("CustomPermissionsName"), ::OpenAPI::toJsonValue(m_custom_permissions_name));
    }
    if (m_unapply_custom_permissions_isSet) {
        obj.insert(QString("UnapplyCustomPermissions"), ::OpenAPI::toJsonValue(m_unapply_custom_permissions));
    }
    if (m_external_login_federation_provider_type_isSet) {
        obj.insert(QString("ExternalLoginFederationProviderType"), ::OpenAPI::toJsonValue(m_external_login_federation_provider_type));
    }
    if (m_custom_federation_provider_url_isSet) {
        obj.insert(QString("CustomFederationProviderUrl"), ::OpenAPI::toJsonValue(m_custom_federation_provider_url));
    }
    if (m_external_login_id_isSet) {
        obj.insert(QString("ExternalLoginId"), ::OpenAPI::toJsonValue(m_external_login_id));
    }
    return obj;
}

QString OAIUpdateUserRequest::getEmail() const {
    return m_email;
}
void OAIUpdateUserRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUpdateUserRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUpdateUserRequest::is_email_Valid() const{
    return m_email_isValid;
}

OAIUserRole OAIUpdateUserRequest::getRole() const {
    return m_role;
}
void OAIUpdateUserRequest::setRole(const OAIUserRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIUpdateUserRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAIUpdateUserRequest::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIUpdateUserRequest::getCustomPermissionsName() const {
    return m_custom_permissions_name;
}
void OAIUpdateUserRequest::setCustomPermissionsName(const QString &custom_permissions_name) {
    m_custom_permissions_name = custom_permissions_name;
    m_custom_permissions_name_isSet = true;
}

bool OAIUpdateUserRequest::is_custom_permissions_name_Set() const{
    return m_custom_permissions_name_isSet;
}

bool OAIUpdateUserRequest::is_custom_permissions_name_Valid() const{
    return m_custom_permissions_name_isValid;
}

bool OAIUpdateUserRequest::getUnapplyCustomPermissions() const {
    return m_unapply_custom_permissions;
}
void OAIUpdateUserRequest::setUnapplyCustomPermissions(const bool &unapply_custom_permissions) {
    m_unapply_custom_permissions = unapply_custom_permissions;
    m_unapply_custom_permissions_isSet = true;
}

bool OAIUpdateUserRequest::is_unapply_custom_permissions_Set() const{
    return m_unapply_custom_permissions_isSet;
}

bool OAIUpdateUserRequest::is_unapply_custom_permissions_Valid() const{
    return m_unapply_custom_permissions_isValid;
}

QString OAIUpdateUserRequest::getExternalLoginFederationProviderType() const {
    return m_external_login_federation_provider_type;
}
void OAIUpdateUserRequest::setExternalLoginFederationProviderType(const QString &external_login_federation_provider_type) {
    m_external_login_federation_provider_type = external_login_federation_provider_type;
    m_external_login_federation_provider_type_isSet = true;
}

bool OAIUpdateUserRequest::is_external_login_federation_provider_type_Set() const{
    return m_external_login_federation_provider_type_isSet;
}

bool OAIUpdateUserRequest::is_external_login_federation_provider_type_Valid() const{
    return m_external_login_federation_provider_type_isValid;
}

QString OAIUpdateUserRequest::getCustomFederationProviderUrl() const {
    return m_custom_federation_provider_url;
}
void OAIUpdateUserRequest::setCustomFederationProviderUrl(const QString &custom_federation_provider_url) {
    m_custom_federation_provider_url = custom_federation_provider_url;
    m_custom_federation_provider_url_isSet = true;
}

bool OAIUpdateUserRequest::is_custom_federation_provider_url_Set() const{
    return m_custom_federation_provider_url_isSet;
}

bool OAIUpdateUserRequest::is_custom_federation_provider_url_Valid() const{
    return m_custom_federation_provider_url_isValid;
}

QString OAIUpdateUserRequest::getExternalLoginId() const {
    return m_external_login_id;
}
void OAIUpdateUserRequest::setExternalLoginId(const QString &external_login_id) {
    m_external_login_id = external_login_id;
    m_external_login_id_isSet = true;
}

bool OAIUpdateUserRequest::is_external_login_id_Set() const{
    return m_external_login_id_isSet;
}

bool OAIUpdateUserRequest::is_external_login_id_Valid() const{
    return m_external_login_id_isValid;
}

bool OAIUpdateUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_permissions_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unapply_custom_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_login_federation_provider_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_federation_provider_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_login_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
