/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableConfiguration_TotalOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableConfiguration_TotalOptions::OAITableConfiguration_TotalOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableConfiguration_TotalOptions::OAITableConfiguration_TotalOptions() {
    this->initializeModel();
}

OAITableConfiguration_TotalOptions::~OAITableConfiguration_TotalOptions() {}

void OAITableConfiguration_TotalOptions::initializeModel() {

    m_totals_visibility_isSet = false;
    m_totals_visibility_isValid = false;

    m_placement_isSet = false;
    m_placement_isValid = false;

    m_scroll_status_isSet = false;
    m_scroll_status_isValid = false;

    m_custom_label_isSet = false;
    m_custom_label_isValid = false;

    m_total_cell_style_isSet = false;
    m_total_cell_style_isValid = false;
}

void OAITableConfiguration_TotalOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableConfiguration_TotalOptions::fromJsonObject(QJsonObject json) {

    m_totals_visibility_isValid = ::OpenAPI::fromJsonValue(m_totals_visibility, json[QString("TotalsVisibility")]);
    m_totals_visibility_isSet = !json[QString("TotalsVisibility")].isNull() && m_totals_visibility_isValid;

    m_placement_isValid = ::OpenAPI::fromJsonValue(m_placement, json[QString("Placement")]);
    m_placement_isSet = !json[QString("Placement")].isNull() && m_placement_isValid;

    m_scroll_status_isValid = ::OpenAPI::fromJsonValue(m_scroll_status, json[QString("ScrollStatus")]);
    m_scroll_status_isSet = !json[QString("ScrollStatus")].isNull() && m_scroll_status_isValid;

    m_custom_label_isValid = ::OpenAPI::fromJsonValue(m_custom_label, json[QString("CustomLabel")]);
    m_custom_label_isSet = !json[QString("CustomLabel")].isNull() && m_custom_label_isValid;

    m_total_cell_style_isValid = ::OpenAPI::fromJsonValue(m_total_cell_style, json[QString("TotalCellStyle")]);
    m_total_cell_style_isSet = !json[QString("TotalCellStyle")].isNull() && m_total_cell_style_isValid;
}

QString OAITableConfiguration_TotalOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableConfiguration_TotalOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_totals_visibility.isSet()) {
        obj.insert(QString("TotalsVisibility"), ::OpenAPI::toJsonValue(m_totals_visibility));
    }
    if (m_placement.isSet()) {
        obj.insert(QString("Placement"), ::OpenAPI::toJsonValue(m_placement));
    }
    if (m_scroll_status.isSet()) {
        obj.insert(QString("ScrollStatus"), ::OpenAPI::toJsonValue(m_scroll_status));
    }
    if (m_custom_label_isSet) {
        obj.insert(QString("CustomLabel"), ::OpenAPI::toJsonValue(m_custom_label));
    }
    if (m_total_cell_style.isSet()) {
        obj.insert(QString("TotalCellStyle"), ::OpenAPI::toJsonValue(m_total_cell_style));
    }
    return obj;
}

OAIVisibility OAITableConfiguration_TotalOptions::getTotalsVisibility() const {
    return m_totals_visibility;
}
void OAITableConfiguration_TotalOptions::setTotalsVisibility(const OAIVisibility &totals_visibility) {
    m_totals_visibility = totals_visibility;
    m_totals_visibility_isSet = true;
}

bool OAITableConfiguration_TotalOptions::is_totals_visibility_Set() const{
    return m_totals_visibility_isSet;
}

bool OAITableConfiguration_TotalOptions::is_totals_visibility_Valid() const{
    return m_totals_visibility_isValid;
}

OAITableTotalsPlacement OAITableConfiguration_TotalOptions::getPlacement() const {
    return m_placement;
}
void OAITableConfiguration_TotalOptions::setPlacement(const OAITableTotalsPlacement &placement) {
    m_placement = placement;
    m_placement_isSet = true;
}

bool OAITableConfiguration_TotalOptions::is_placement_Set() const{
    return m_placement_isSet;
}

bool OAITableConfiguration_TotalOptions::is_placement_Valid() const{
    return m_placement_isValid;
}

OAITableTotalsScrollStatus OAITableConfiguration_TotalOptions::getScrollStatus() const {
    return m_scroll_status;
}
void OAITableConfiguration_TotalOptions::setScrollStatus(const OAITableTotalsScrollStatus &scroll_status) {
    m_scroll_status = scroll_status;
    m_scroll_status_isSet = true;
}

bool OAITableConfiguration_TotalOptions::is_scroll_status_Set() const{
    return m_scroll_status_isSet;
}

bool OAITableConfiguration_TotalOptions::is_scroll_status_Valid() const{
    return m_scroll_status_isValid;
}

QString OAITableConfiguration_TotalOptions::getCustomLabel() const {
    return m_custom_label;
}
void OAITableConfiguration_TotalOptions::setCustomLabel(const QString &custom_label) {
    m_custom_label = custom_label;
    m_custom_label_isSet = true;
}

bool OAITableConfiguration_TotalOptions::is_custom_label_Set() const{
    return m_custom_label_isSet;
}

bool OAITableConfiguration_TotalOptions::is_custom_label_Valid() const{
    return m_custom_label_isValid;
}

OAITotalOptions_TotalCellStyle OAITableConfiguration_TotalOptions::getTotalCellStyle() const {
    return m_total_cell_style;
}
void OAITableConfiguration_TotalOptions::setTotalCellStyle(const OAITotalOptions_TotalCellStyle &total_cell_style) {
    m_total_cell_style = total_cell_style;
    m_total_cell_style_isSet = true;
}

bool OAITableConfiguration_TotalOptions::is_total_cell_style_Set() const{
    return m_total_cell_style_isSet;
}

bool OAITableConfiguration_TotalOptions::is_total_cell_style_Valid() const{
    return m_total_cell_style_isValid;
}

bool OAITableConfiguration_TotalOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_totals_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scroll_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableConfiguration_TotalOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
