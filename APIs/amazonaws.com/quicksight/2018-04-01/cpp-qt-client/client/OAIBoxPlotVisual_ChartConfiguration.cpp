/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxPlotVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxPlotVisual_ChartConfiguration::OAIBoxPlotVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxPlotVisual_ChartConfiguration::OAIBoxPlotVisual_ChartConfiguration() {
    this->initializeModel();
}

OAIBoxPlotVisual_ChartConfiguration::~OAIBoxPlotVisual_ChartConfiguration() {}

void OAIBoxPlotVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_box_plot_options_isSet = false;
    m_box_plot_options_isValid = false;

    m_category_axis_isSet = false;
    m_category_axis_isValid = false;

    m_category_label_options_isSet = false;
    m_category_label_options_isValid = false;

    m_primary_y_axis_display_options_isSet = false;
    m_primary_y_axis_display_options_isValid = false;

    m_primary_y_axis_label_options_isSet = false;
    m_primary_y_axis_label_options_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_reference_lines_isSet = false;
    m_reference_lines_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAIBoxPlotVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxPlotVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_box_plot_options_isValid = ::OpenAPI::fromJsonValue(m_box_plot_options, json[QString("BoxPlotOptions")]);
    m_box_plot_options_isSet = !json[QString("BoxPlotOptions")].isNull() && m_box_plot_options_isValid;

    m_category_axis_isValid = ::OpenAPI::fromJsonValue(m_category_axis, json[QString("CategoryAxis")]);
    m_category_axis_isSet = !json[QString("CategoryAxis")].isNull() && m_category_axis_isValid;

    m_category_label_options_isValid = ::OpenAPI::fromJsonValue(m_category_label_options, json[QString("CategoryLabelOptions")]);
    m_category_label_options_isSet = !json[QString("CategoryLabelOptions")].isNull() && m_category_label_options_isValid;

    m_primary_y_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_primary_y_axis_display_options, json[QString("PrimaryYAxisDisplayOptions")]);
    m_primary_y_axis_display_options_isSet = !json[QString("PrimaryYAxisDisplayOptions")].isNull() && m_primary_y_axis_display_options_isValid;

    m_primary_y_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_primary_y_axis_label_options, json[QString("PrimaryYAxisLabelOptions")]);
    m_primary_y_axis_label_options_isSet = !json[QString("PrimaryYAxisLabelOptions")].isNull() && m_primary_y_axis_label_options_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_reference_lines_isValid = ::OpenAPI::fromJsonValue(m_reference_lines, json[QString("ReferenceLines")]);
    m_reference_lines_isSet = !json[QString("ReferenceLines")].isNull() && m_reference_lines_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAIBoxPlotVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxPlotVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_box_plot_options.isSet()) {
        obj.insert(QString("BoxPlotOptions"), ::OpenAPI::toJsonValue(m_box_plot_options));
    }
    if (m_category_axis.isSet()) {
        obj.insert(QString("CategoryAxis"), ::OpenAPI::toJsonValue(m_category_axis));
    }
    if (m_category_label_options.isSet()) {
        obj.insert(QString("CategoryLabelOptions"), ::OpenAPI::toJsonValue(m_category_label_options));
    }
    if (m_primary_y_axis_display_options.isSet()) {
        obj.insert(QString("PrimaryYAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_primary_y_axis_display_options));
    }
    if (m_primary_y_axis_label_options.isSet()) {
        obj.insert(QString("PrimaryYAxisLabelOptions"), ::OpenAPI::toJsonValue(m_primary_y_axis_label_options));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_reference_lines.isSet()) {
        obj.insert(QString("ReferenceLines"), ::OpenAPI::toJsonValue(m_reference_lines));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAIBoxPlotChartConfiguration_FieldWells OAIBoxPlotVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIBoxPlotVisual_ChartConfiguration::setFieldWells(const OAIBoxPlotChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIBoxPlotChartConfiguration_SortConfiguration OAIBoxPlotVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIBoxPlotVisual_ChartConfiguration::setSortConfiguration(const OAIBoxPlotChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIBoxPlotChartConfiguration_BoxPlotOptions OAIBoxPlotVisual_ChartConfiguration::getBoxPlotOptions() const {
    return m_box_plot_options;
}
void OAIBoxPlotVisual_ChartConfiguration::setBoxPlotOptions(const OAIBoxPlotChartConfiguration_BoxPlotOptions &box_plot_options) {
    m_box_plot_options = box_plot_options;
    m_box_plot_options_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_box_plot_options_Set() const{
    return m_box_plot_options_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_box_plot_options_Valid() const{
    return m_box_plot_options_isValid;
}

OAIBoxPlotChartConfiguration_CategoryAxis OAIBoxPlotVisual_ChartConfiguration::getCategoryAxis() const {
    return m_category_axis;
}
void OAIBoxPlotVisual_ChartConfiguration::setCategoryAxis(const OAIBoxPlotChartConfiguration_CategoryAxis &category_axis) {
    m_category_axis = category_axis;
    m_category_axis_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_category_axis_Set() const{
    return m_category_axis_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_category_axis_Valid() const{
    return m_category_axis_isValid;
}

OAIBoxPlotChartConfiguration_CategoryLabelOptions OAIBoxPlotVisual_ChartConfiguration::getCategoryLabelOptions() const {
    return m_category_label_options;
}
void OAIBoxPlotVisual_ChartConfiguration::setCategoryLabelOptions(const OAIBoxPlotChartConfiguration_CategoryLabelOptions &category_label_options) {
    m_category_label_options = category_label_options;
    m_category_label_options_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_category_label_options_Set() const{
    return m_category_label_options_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_category_label_options_Valid() const{
    return m_category_label_options_isValid;
}

OAIBoxPlotChartConfiguration_CategoryAxis OAIBoxPlotVisual_ChartConfiguration::getPrimaryYAxisDisplayOptions() const {
    return m_primary_y_axis_display_options;
}
void OAIBoxPlotVisual_ChartConfiguration::setPrimaryYAxisDisplayOptions(const OAIBoxPlotChartConfiguration_CategoryAxis &primary_y_axis_display_options) {
    m_primary_y_axis_display_options = primary_y_axis_display_options;
    m_primary_y_axis_display_options_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_primary_y_axis_display_options_Set() const{
    return m_primary_y_axis_display_options_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_primary_y_axis_display_options_Valid() const{
    return m_primary_y_axis_display_options_isValid;
}

OAIBoxPlotChartConfiguration_PrimaryYAxisLabelOptions OAIBoxPlotVisual_ChartConfiguration::getPrimaryYAxisLabelOptions() const {
    return m_primary_y_axis_label_options;
}
void OAIBoxPlotVisual_ChartConfiguration::setPrimaryYAxisLabelOptions(const OAIBoxPlotChartConfiguration_PrimaryYAxisLabelOptions &primary_y_axis_label_options) {
    m_primary_y_axis_label_options = primary_y_axis_label_options;
    m_primary_y_axis_label_options_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_primary_y_axis_label_options_Set() const{
    return m_primary_y_axis_label_options_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_primary_y_axis_label_options_Valid() const{
    return m_primary_y_axis_label_options_isValid;
}

OAILegendOptions OAIBoxPlotVisual_ChartConfiguration::getLegend() const {
    return m_legend;
}
void OAIBoxPlotVisual_ChartConfiguration::setLegend(const OAILegendOptions &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIBarChartConfiguration_Tooltip OAIBoxPlotVisual_ChartConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIBoxPlotVisual_ChartConfiguration::setTooltip(const OAIBarChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

QList OAIBoxPlotVisual_ChartConfiguration::getReferenceLines() const {
    return m_reference_lines;
}
void OAIBoxPlotVisual_ChartConfiguration::setReferenceLines(const QList &reference_lines) {
    m_reference_lines = reference_lines;
    m_reference_lines_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_reference_lines_Set() const{
    return m_reference_lines_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_reference_lines_Valid() const{
    return m_reference_lines_isValid;
}

OAIBarChartConfiguration_VisualPalette OAIBoxPlotVisual_ChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIBoxPlotVisual_ChartConfiguration::setVisualPalette(const OAIBarChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIBoxPlotVisual_ChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAIBoxPlotVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_plot_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_y_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_y_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_lines.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxPlotVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
