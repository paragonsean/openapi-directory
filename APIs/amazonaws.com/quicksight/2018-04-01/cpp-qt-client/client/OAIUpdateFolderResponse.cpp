/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFolderResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFolderResponse::OAIUpdateFolderResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFolderResponse::OAIUpdateFolderResponse() {
    this->initializeModel();
}

OAIUpdateFolderResponse::~OAIUpdateFolderResponse() {}

void OAIUpdateFolderResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_folder_id_isSet = false;
    m_folder_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIUpdateFolderResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFolderResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_folder_id_isValid = ::OpenAPI::fromJsonValue(m_folder_id, json[QString("FolderId")]);
    m_folder_id_isSet = !json[QString("FolderId")].isNull() && m_folder_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIUpdateFolderResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFolderResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_folder_id_isSet) {
        obj.insert(QString("FolderId"), ::OpenAPI::toJsonValue(m_folder_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

qint32 OAIUpdateFolderResponse::getStatus() const {
    return m_status;
}
void OAIUpdateFolderResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateFolderResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateFolderResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateFolderResponse::getArn() const {
    return m_arn;
}
void OAIUpdateFolderResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateFolderResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateFolderResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUpdateFolderResponse::getFolderId() const {
    return m_folder_id;
}
void OAIUpdateFolderResponse::setFolderId(const QString &folder_id) {
    m_folder_id = folder_id;
    m_folder_id_isSet = true;
}

bool OAIUpdateFolderResponse::is_folder_id_Set() const{
    return m_folder_id_isSet;
}

bool OAIUpdateFolderResponse::is_folder_id_Valid() const{
    return m_folder_id_isValid;
}

QString OAIUpdateFolderResponse::getRequestId() const {
    return m_request_id;
}
void OAIUpdateFolderResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIUpdateFolderResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIUpdateFolderResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIUpdateFolderResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFolderResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
