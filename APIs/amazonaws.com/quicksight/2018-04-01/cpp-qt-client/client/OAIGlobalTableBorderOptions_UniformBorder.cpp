/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalTableBorderOptions_UniformBorder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalTableBorderOptions_UniformBorder::OAIGlobalTableBorderOptions_UniformBorder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalTableBorderOptions_UniformBorder::OAIGlobalTableBorderOptions_UniformBorder() {
    this->initializeModel();
}

OAIGlobalTableBorderOptions_UniformBorder::~OAIGlobalTableBorderOptions_UniformBorder() {}

void OAIGlobalTableBorderOptions_UniformBorder::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_thickness_isSet = false;
    m_thickness_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;
}

void OAIGlobalTableBorderOptions_UniformBorder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalTableBorderOptions_UniformBorder::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_thickness_isValid = ::OpenAPI::fromJsonValue(m_thickness, json[QString("Thickness")]);
    m_thickness_isSet = !json[QString("Thickness")].isNull() && m_thickness_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("Style")]);
    m_style_isSet = !json[QString("Style")].isNull() && m_style_isValid;
}

QString OAIGlobalTableBorderOptions_UniformBorder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalTableBorderOptions_UniformBorder::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_thickness_isSet) {
        obj.insert(QString("Thickness"), ::OpenAPI::toJsonValue(m_thickness));
    }
    if (m_style.isSet()) {
        obj.insert(QString("Style"), ::OpenAPI::toJsonValue(m_style));
    }
    return obj;
}

QString OAIGlobalTableBorderOptions_UniformBorder::getColor() const {
    return m_color;
}
void OAIGlobalTableBorderOptions_UniformBorder::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIGlobalTableBorderOptions_UniformBorder::is_color_Set() const{
    return m_color_isSet;
}

bool OAIGlobalTableBorderOptions_UniformBorder::is_color_Valid() const{
    return m_color_isValid;
}

qint32 OAIGlobalTableBorderOptions_UniformBorder::getThickness() const {
    return m_thickness;
}
void OAIGlobalTableBorderOptions_UniformBorder::setThickness(const qint32 &thickness) {
    m_thickness = thickness;
    m_thickness_isSet = true;
}

bool OAIGlobalTableBorderOptions_UniformBorder::is_thickness_Set() const{
    return m_thickness_isSet;
}

bool OAIGlobalTableBorderOptions_UniformBorder::is_thickness_Valid() const{
    return m_thickness_isValid;
}

OAITableBorderStyle OAIGlobalTableBorderOptions_UniformBorder::getStyle() const {
    return m_style;
}
void OAIGlobalTableBorderOptions_UniformBorder::setStyle(const OAITableBorderStyle &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIGlobalTableBorderOptions_UniformBorder::is_style_Set() const{
    return m_style_isSet;
}

bool OAIGlobalTableBorderOptions_UniformBorder::is_style_Valid() const{
    return m_style_isValid;
}

bool OAIGlobalTableBorderOptions_UniformBorder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thickness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalTableBorderOptions_UniformBorder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
