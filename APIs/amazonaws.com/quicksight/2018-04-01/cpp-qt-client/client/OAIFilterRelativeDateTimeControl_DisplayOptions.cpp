/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterRelativeDateTimeControl_DisplayOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterRelativeDateTimeControl_DisplayOptions::OAIFilterRelativeDateTimeControl_DisplayOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterRelativeDateTimeControl_DisplayOptions::OAIFilterRelativeDateTimeControl_DisplayOptions() {
    this->initializeModel();
}

OAIFilterRelativeDateTimeControl_DisplayOptions::~OAIFilterRelativeDateTimeControl_DisplayOptions() {}

void OAIFilterRelativeDateTimeControl_DisplayOptions::initializeModel() {

    m_title_options_isSet = false;
    m_title_options_isValid = false;

    m_date_time_format_isSet = false;
    m_date_time_format_isValid = false;

    m_info_icon_label_options_isSet = false;
    m_info_icon_label_options_isValid = false;
}

void OAIFilterRelativeDateTimeControl_DisplayOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterRelativeDateTimeControl_DisplayOptions::fromJsonObject(QJsonObject json) {

    m_title_options_isValid = ::OpenAPI::fromJsonValue(m_title_options, json[QString("TitleOptions")]);
    m_title_options_isSet = !json[QString("TitleOptions")].isNull() && m_title_options_isValid;

    m_date_time_format_isValid = ::OpenAPI::fromJsonValue(m_date_time_format, json[QString("DateTimeFormat")]);
    m_date_time_format_isSet = !json[QString("DateTimeFormat")].isNull() && m_date_time_format_isValid;

    m_info_icon_label_options_isValid = ::OpenAPI::fromJsonValue(m_info_icon_label_options, json[QString("InfoIconLabelOptions")]);
    m_info_icon_label_options_isSet = !json[QString("InfoIconLabelOptions")].isNull() && m_info_icon_label_options_isValid;
}

QString OAIFilterRelativeDateTimeControl_DisplayOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterRelativeDateTimeControl_DisplayOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_title_options.isSet()) {
        obj.insert(QString("TitleOptions"), ::OpenAPI::toJsonValue(m_title_options));
    }
    if (m_date_time_format_isSet) {
        obj.insert(QString("DateTimeFormat"), ::OpenAPI::toJsonValue(m_date_time_format));
    }
    if (m_info_icon_label_options.isSet()) {
        obj.insert(QString("InfoIconLabelOptions"), ::OpenAPI::toJsonValue(m_info_icon_label_options));
    }
    return obj;
}

OAIDateTimePickerControlDisplayOptions_TitleOptions OAIFilterRelativeDateTimeControl_DisplayOptions::getTitleOptions() const {
    return m_title_options;
}
void OAIFilterRelativeDateTimeControl_DisplayOptions::setTitleOptions(const OAIDateTimePickerControlDisplayOptions_TitleOptions &title_options) {
    m_title_options = title_options;
    m_title_options_isSet = true;
}

bool OAIFilterRelativeDateTimeControl_DisplayOptions::is_title_options_Set() const{
    return m_title_options_isSet;
}

bool OAIFilterRelativeDateTimeControl_DisplayOptions::is_title_options_Valid() const{
    return m_title_options_isValid;
}

QString OAIFilterRelativeDateTimeControl_DisplayOptions::getDateTimeFormat() const {
    return m_date_time_format;
}
void OAIFilterRelativeDateTimeControl_DisplayOptions::setDateTimeFormat(const QString &date_time_format) {
    m_date_time_format = date_time_format;
    m_date_time_format_isSet = true;
}

bool OAIFilterRelativeDateTimeControl_DisplayOptions::is_date_time_format_Set() const{
    return m_date_time_format_isSet;
}

bool OAIFilterRelativeDateTimeControl_DisplayOptions::is_date_time_format_Valid() const{
    return m_date_time_format_isValid;
}

OAIDateTimePickerControlDisplayOptions_InfoIconLabelOptions OAIFilterRelativeDateTimeControl_DisplayOptions::getInfoIconLabelOptions() const {
    return m_info_icon_label_options;
}
void OAIFilterRelativeDateTimeControl_DisplayOptions::setInfoIconLabelOptions(const OAIDateTimePickerControlDisplayOptions_InfoIconLabelOptions &info_icon_label_options) {
    m_info_icon_label_options = info_icon_label_options;
    m_info_icon_label_options_isSet = true;
}

bool OAIFilterRelativeDateTimeControl_DisplayOptions::is_info_icon_label_options_Set() const{
    return m_info_icon_label_options_isSet;
}

bool OAIFilterRelativeDateTimeControl_DisplayOptions::is_info_icon_label_options_Valid() const{
    return m_info_icon_label_options_isValid;
}

bool OAIFilterRelativeDateTimeControl_DisplayOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_icon_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterRelativeDateTimeControl_DisplayOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
