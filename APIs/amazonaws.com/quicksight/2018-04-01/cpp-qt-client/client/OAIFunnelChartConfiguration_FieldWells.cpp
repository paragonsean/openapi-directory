/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunnelChartConfiguration_FieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunnelChartConfiguration_FieldWells::OAIFunnelChartConfiguration_FieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunnelChartConfiguration_FieldWells::OAIFunnelChartConfiguration_FieldWells() {
    this->initializeModel();
}

OAIFunnelChartConfiguration_FieldWells::~OAIFunnelChartConfiguration_FieldWells() {}

void OAIFunnelChartConfiguration_FieldWells::initializeModel() {

    m_funnel_chart_aggregated_field_wells_isSet = false;
    m_funnel_chart_aggregated_field_wells_isValid = false;
}

void OAIFunnelChartConfiguration_FieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunnelChartConfiguration_FieldWells::fromJsonObject(QJsonObject json) {

    m_funnel_chart_aggregated_field_wells_isValid = ::OpenAPI::fromJsonValue(m_funnel_chart_aggregated_field_wells, json[QString("FunnelChartAggregatedFieldWells")]);
    m_funnel_chart_aggregated_field_wells_isSet = !json[QString("FunnelChartAggregatedFieldWells")].isNull() && m_funnel_chart_aggregated_field_wells_isValid;
}

QString OAIFunnelChartConfiguration_FieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunnelChartConfiguration_FieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_funnel_chart_aggregated_field_wells.isSet()) {
        obj.insert(QString("FunnelChartAggregatedFieldWells"), ::OpenAPI::toJsonValue(m_funnel_chart_aggregated_field_wells));
    }
    return obj;
}

OAIFunnelChartFieldWells_FunnelChartAggregatedFieldWells OAIFunnelChartConfiguration_FieldWells::getFunnelChartAggregatedFieldWells() const {
    return m_funnel_chart_aggregated_field_wells;
}
void OAIFunnelChartConfiguration_FieldWells::setFunnelChartAggregatedFieldWells(const OAIFunnelChartFieldWells_FunnelChartAggregatedFieldWells &funnel_chart_aggregated_field_wells) {
    m_funnel_chart_aggregated_field_wells = funnel_chart_aggregated_field_wells;
    m_funnel_chart_aggregated_field_wells_isSet = true;
}

bool OAIFunnelChartConfiguration_FieldWells::is_funnel_chart_aggregated_field_wells_Set() const{
    return m_funnel_chart_aggregated_field_wells_isSet;
}

bool OAIFunnelChartConfiguration_FieldWells::is_funnel_chart_aggregated_field_wells_Valid() const{
    return m_funnel_chart_aggregated_field_wells_isValid;
}

bool OAIFunnelChartConfiguration_FieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_funnel_chart_aggregated_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunnelChartConfiguration_FieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
