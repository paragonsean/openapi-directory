/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicFilter::OAITopicFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicFilter::OAITopicFilter() {
    this->initializeModel();
}

OAITopicFilter::~OAITopicFilter() {}

void OAITopicFilter::initializeModel() {

    m_filter_description_isSet = false;
    m_filter_description_isValid = false;

    m_filter_class_isSet = false;
    m_filter_class_isValid = false;

    m_filter_name_isSet = false;
    m_filter_name_isValid = false;

    m_filter_synonyms_isSet = false;
    m_filter_synonyms_isValid = false;

    m_operand_field_name_isSet = false;
    m_operand_field_name_isValid = false;

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;

    m_category_filter_isSet = false;
    m_category_filter_isValid = false;

    m_numeric_equality_filter_isSet = false;
    m_numeric_equality_filter_isValid = false;

    m_numeric_range_filter_isSet = false;
    m_numeric_range_filter_isValid = false;

    m_date_range_filter_isSet = false;
    m_date_range_filter_isValid = false;

    m_relative_date_filter_isSet = false;
    m_relative_date_filter_isValid = false;
}

void OAITopicFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicFilter::fromJsonObject(QJsonObject json) {

    m_filter_description_isValid = ::OpenAPI::fromJsonValue(m_filter_description, json[QString("FilterDescription")]);
    m_filter_description_isSet = !json[QString("FilterDescription")].isNull() && m_filter_description_isValid;

    m_filter_class_isValid = ::OpenAPI::fromJsonValue(m_filter_class, json[QString("FilterClass")]);
    m_filter_class_isSet = !json[QString("FilterClass")].isNull() && m_filter_class_isValid;

    m_filter_name_isValid = ::OpenAPI::fromJsonValue(m_filter_name, json[QString("FilterName")]);
    m_filter_name_isSet = !json[QString("FilterName")].isNull() && m_filter_name_isValid;

    m_filter_synonyms_isValid = ::OpenAPI::fromJsonValue(m_filter_synonyms, json[QString("FilterSynonyms")]);
    m_filter_synonyms_isSet = !json[QString("FilterSynonyms")].isNull() && m_filter_synonyms_isValid;

    m_operand_field_name_isValid = ::OpenAPI::fromJsonValue(m_operand_field_name, json[QString("OperandFieldName")]);
    m_operand_field_name_isSet = !json[QString("OperandFieldName")].isNull() && m_operand_field_name_isValid;

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("FilterType")]);
    m_filter_type_isSet = !json[QString("FilterType")].isNull() && m_filter_type_isValid;

    m_category_filter_isValid = ::OpenAPI::fromJsonValue(m_category_filter, json[QString("CategoryFilter")]);
    m_category_filter_isSet = !json[QString("CategoryFilter")].isNull() && m_category_filter_isValid;

    m_numeric_equality_filter_isValid = ::OpenAPI::fromJsonValue(m_numeric_equality_filter, json[QString("NumericEqualityFilter")]);
    m_numeric_equality_filter_isSet = !json[QString("NumericEqualityFilter")].isNull() && m_numeric_equality_filter_isValid;

    m_numeric_range_filter_isValid = ::OpenAPI::fromJsonValue(m_numeric_range_filter, json[QString("NumericRangeFilter")]);
    m_numeric_range_filter_isSet = !json[QString("NumericRangeFilter")].isNull() && m_numeric_range_filter_isValid;

    m_date_range_filter_isValid = ::OpenAPI::fromJsonValue(m_date_range_filter, json[QString("DateRangeFilter")]);
    m_date_range_filter_isSet = !json[QString("DateRangeFilter")].isNull() && m_date_range_filter_isValid;

    m_relative_date_filter_isValid = ::OpenAPI::fromJsonValue(m_relative_date_filter, json[QString("RelativeDateFilter")]);
    m_relative_date_filter_isSet = !json[QString("RelativeDateFilter")].isNull() && m_relative_date_filter_isValid;
}

QString OAITopicFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_description_isSet) {
        obj.insert(QString("FilterDescription"), ::OpenAPI::toJsonValue(m_filter_description));
    }
    if (m_filter_class.isSet()) {
        obj.insert(QString("FilterClass"), ::OpenAPI::toJsonValue(m_filter_class));
    }
    if (m_filter_name_isSet) {
        obj.insert(QString("FilterName"), ::OpenAPI::toJsonValue(m_filter_name));
    }
    if (m_filter_synonyms.isSet()) {
        obj.insert(QString("FilterSynonyms"), ::OpenAPI::toJsonValue(m_filter_synonyms));
    }
    if (m_operand_field_name_isSet) {
        obj.insert(QString("OperandFieldName"), ::OpenAPI::toJsonValue(m_operand_field_name));
    }
    if (m_filter_type.isSet()) {
        obj.insert(QString("FilterType"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    if (m_category_filter.isSet()) {
        obj.insert(QString("CategoryFilter"), ::OpenAPI::toJsonValue(m_category_filter));
    }
    if (m_numeric_equality_filter.isSet()) {
        obj.insert(QString("NumericEqualityFilter"), ::OpenAPI::toJsonValue(m_numeric_equality_filter));
    }
    if (m_numeric_range_filter.isSet()) {
        obj.insert(QString("NumericRangeFilter"), ::OpenAPI::toJsonValue(m_numeric_range_filter));
    }
    if (m_date_range_filter.isSet()) {
        obj.insert(QString("DateRangeFilter"), ::OpenAPI::toJsonValue(m_date_range_filter));
    }
    if (m_relative_date_filter.isSet()) {
        obj.insert(QString("RelativeDateFilter"), ::OpenAPI::toJsonValue(m_relative_date_filter));
    }
    return obj;
}

QString OAITopicFilter::getFilterDescription() const {
    return m_filter_description;
}
void OAITopicFilter::setFilterDescription(const QString &filter_description) {
    m_filter_description = filter_description;
    m_filter_description_isSet = true;
}

bool OAITopicFilter::is_filter_description_Set() const{
    return m_filter_description_isSet;
}

bool OAITopicFilter::is_filter_description_Valid() const{
    return m_filter_description_isValid;
}

OAIFilterClass OAITopicFilter::getFilterClass() const {
    return m_filter_class;
}
void OAITopicFilter::setFilterClass(const OAIFilterClass &filter_class) {
    m_filter_class = filter_class;
    m_filter_class_isSet = true;
}

bool OAITopicFilter::is_filter_class_Set() const{
    return m_filter_class_isSet;
}

bool OAITopicFilter::is_filter_class_Valid() const{
    return m_filter_class_isValid;
}

QString OAITopicFilter::getFilterName() const {
    return m_filter_name;
}
void OAITopicFilter::setFilterName(const QString &filter_name) {
    m_filter_name = filter_name;
    m_filter_name_isSet = true;
}

bool OAITopicFilter::is_filter_name_Set() const{
    return m_filter_name_isSet;
}

bool OAITopicFilter::is_filter_name_Valid() const{
    return m_filter_name_isValid;
}

QList OAITopicFilter::getFilterSynonyms() const {
    return m_filter_synonyms;
}
void OAITopicFilter::setFilterSynonyms(const QList &filter_synonyms) {
    m_filter_synonyms = filter_synonyms;
    m_filter_synonyms_isSet = true;
}

bool OAITopicFilter::is_filter_synonyms_Set() const{
    return m_filter_synonyms_isSet;
}

bool OAITopicFilter::is_filter_synonyms_Valid() const{
    return m_filter_synonyms_isValid;
}

QString OAITopicFilter::getOperandFieldName() const {
    return m_operand_field_name;
}
void OAITopicFilter::setOperandFieldName(const QString &operand_field_name) {
    m_operand_field_name = operand_field_name;
    m_operand_field_name_isSet = true;
}

bool OAITopicFilter::is_operand_field_name_Set() const{
    return m_operand_field_name_isSet;
}

bool OAITopicFilter::is_operand_field_name_Valid() const{
    return m_operand_field_name_isValid;
}

OAINamedFilterType OAITopicFilter::getFilterType() const {
    return m_filter_type;
}
void OAITopicFilter::setFilterType(const OAINamedFilterType &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAITopicFilter::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAITopicFilter::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

OAITopicFilter_CategoryFilter OAITopicFilter::getCategoryFilter() const {
    return m_category_filter;
}
void OAITopicFilter::setCategoryFilter(const OAITopicFilter_CategoryFilter &category_filter) {
    m_category_filter = category_filter;
    m_category_filter_isSet = true;
}

bool OAITopicFilter::is_category_filter_Set() const{
    return m_category_filter_isSet;
}

bool OAITopicFilter::is_category_filter_Valid() const{
    return m_category_filter_isValid;
}

OAITopicFilter_NumericEqualityFilter OAITopicFilter::getNumericEqualityFilter() const {
    return m_numeric_equality_filter;
}
void OAITopicFilter::setNumericEqualityFilter(const OAITopicFilter_NumericEqualityFilter &numeric_equality_filter) {
    m_numeric_equality_filter = numeric_equality_filter;
    m_numeric_equality_filter_isSet = true;
}

bool OAITopicFilter::is_numeric_equality_filter_Set() const{
    return m_numeric_equality_filter_isSet;
}

bool OAITopicFilter::is_numeric_equality_filter_Valid() const{
    return m_numeric_equality_filter_isValid;
}

OAITopicFilter_NumericRangeFilter OAITopicFilter::getNumericRangeFilter() const {
    return m_numeric_range_filter;
}
void OAITopicFilter::setNumericRangeFilter(const OAITopicFilter_NumericRangeFilter &numeric_range_filter) {
    m_numeric_range_filter = numeric_range_filter;
    m_numeric_range_filter_isSet = true;
}

bool OAITopicFilter::is_numeric_range_filter_Set() const{
    return m_numeric_range_filter_isSet;
}

bool OAITopicFilter::is_numeric_range_filter_Valid() const{
    return m_numeric_range_filter_isValid;
}

OAITopicFilter_DateRangeFilter OAITopicFilter::getDateRangeFilter() const {
    return m_date_range_filter;
}
void OAITopicFilter::setDateRangeFilter(const OAITopicFilter_DateRangeFilter &date_range_filter) {
    m_date_range_filter = date_range_filter;
    m_date_range_filter_isSet = true;
}

bool OAITopicFilter::is_date_range_filter_Set() const{
    return m_date_range_filter_isSet;
}

bool OAITopicFilter::is_date_range_filter_Valid() const{
    return m_date_range_filter_isValid;
}

OAITopicFilter_RelativeDateFilter OAITopicFilter::getRelativeDateFilter() const {
    return m_relative_date_filter;
}
void OAITopicFilter::setRelativeDateFilter(const OAITopicFilter_RelativeDateFilter &relative_date_filter) {
    m_relative_date_filter = relative_date_filter;
    m_relative_date_filter_isSet = true;
}

bool OAITopicFilter::is_relative_date_filter_Set() const{
    return m_relative_date_filter_isSet;
}

bool OAITopicFilter::is_relative_date_filter_Valid() const{
    return m_relative_date_filter_isValid;
}

bool OAITopicFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_synonyms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operand_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_equality_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_range_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_date_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_name_isValid && m_operand_field_name_isValid && true;
}

} // namespace OpenAPI
