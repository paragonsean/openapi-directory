/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialMapConfiguration_MapStyleOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialMapConfiguration_MapStyleOptions::OAIGeospatialMapConfiguration_MapStyleOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialMapConfiguration_MapStyleOptions::OAIGeospatialMapConfiguration_MapStyleOptions() {
    this->initializeModel();
}

OAIGeospatialMapConfiguration_MapStyleOptions::~OAIGeospatialMapConfiguration_MapStyleOptions() {}

void OAIGeospatialMapConfiguration_MapStyleOptions::initializeModel() {

    m_base_map_style_isSet = false;
    m_base_map_style_isValid = false;
}

void OAIGeospatialMapConfiguration_MapStyleOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialMapConfiguration_MapStyleOptions::fromJsonObject(QJsonObject json) {

    m_base_map_style_isValid = ::OpenAPI::fromJsonValue(m_base_map_style, json[QString("BaseMapStyle")]);
    m_base_map_style_isSet = !json[QString("BaseMapStyle")].isNull() && m_base_map_style_isValid;
}

QString OAIGeospatialMapConfiguration_MapStyleOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialMapConfiguration_MapStyleOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_base_map_style.isSet()) {
        obj.insert(QString("BaseMapStyle"), ::OpenAPI::toJsonValue(m_base_map_style));
    }
    return obj;
}

OAIBaseMapStyleType OAIGeospatialMapConfiguration_MapStyleOptions::getBaseMapStyle() const {
    return m_base_map_style;
}
void OAIGeospatialMapConfiguration_MapStyleOptions::setBaseMapStyle(const OAIBaseMapStyleType &base_map_style) {
    m_base_map_style = base_map_style;
    m_base_map_style_isSet = true;
}

bool OAIGeospatialMapConfiguration_MapStyleOptions::is_base_map_style_Set() const{
    return m_base_map_style_isSet;
}

bool OAIGeospatialMapConfiguration_MapStyleOptions::is_base_map_style_Valid() const{
    return m_base_map_style_isValid;
}

bool OAIGeospatialMapConfiguration_MapStyleOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_map_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialMapConfiguration_MapStyleOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
