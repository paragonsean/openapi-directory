/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineChartLineStyleSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineChartLineStyleSettings::OAILineChartLineStyleSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineChartLineStyleSettings::OAILineChartLineStyleSettings() {
    this->initializeModel();
}

OAILineChartLineStyleSettings::~OAILineChartLineStyleSettings() {}

void OAILineChartLineStyleSettings::initializeModel() {

    m_line_visibility_isSet = false;
    m_line_visibility_isValid = false;

    m_line_interpolation_isSet = false;
    m_line_interpolation_isValid = false;

    m_line_style_isSet = false;
    m_line_style_isValid = false;

    m_line_width_isSet = false;
    m_line_width_isValid = false;
}

void OAILineChartLineStyleSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineChartLineStyleSettings::fromJsonObject(QJsonObject json) {

    m_line_visibility_isValid = ::OpenAPI::fromJsonValue(m_line_visibility, json[QString("LineVisibility")]);
    m_line_visibility_isSet = !json[QString("LineVisibility")].isNull() && m_line_visibility_isValid;

    m_line_interpolation_isValid = ::OpenAPI::fromJsonValue(m_line_interpolation, json[QString("LineInterpolation")]);
    m_line_interpolation_isSet = !json[QString("LineInterpolation")].isNull() && m_line_interpolation_isValid;

    m_line_style_isValid = ::OpenAPI::fromJsonValue(m_line_style, json[QString("LineStyle")]);
    m_line_style_isSet = !json[QString("LineStyle")].isNull() && m_line_style_isValid;

    m_line_width_isValid = ::OpenAPI::fromJsonValue(m_line_width, json[QString("LineWidth")]);
    m_line_width_isSet = !json[QString("LineWidth")].isNull() && m_line_width_isValid;
}

QString OAILineChartLineStyleSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineChartLineStyleSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_line_visibility.isSet()) {
        obj.insert(QString("LineVisibility"), ::OpenAPI::toJsonValue(m_line_visibility));
    }
    if (m_line_interpolation.isSet()) {
        obj.insert(QString("LineInterpolation"), ::OpenAPI::toJsonValue(m_line_interpolation));
    }
    if (m_line_style.isSet()) {
        obj.insert(QString("LineStyle"), ::OpenAPI::toJsonValue(m_line_style));
    }
    if (m_line_width_isSet) {
        obj.insert(QString("LineWidth"), ::OpenAPI::toJsonValue(m_line_width));
    }
    return obj;
}

OAIVisibility OAILineChartLineStyleSettings::getLineVisibility() const {
    return m_line_visibility;
}
void OAILineChartLineStyleSettings::setLineVisibility(const OAIVisibility &line_visibility) {
    m_line_visibility = line_visibility;
    m_line_visibility_isSet = true;
}

bool OAILineChartLineStyleSettings::is_line_visibility_Set() const{
    return m_line_visibility_isSet;
}

bool OAILineChartLineStyleSettings::is_line_visibility_Valid() const{
    return m_line_visibility_isValid;
}

OAILineInterpolation OAILineChartLineStyleSettings::getLineInterpolation() const {
    return m_line_interpolation;
}
void OAILineChartLineStyleSettings::setLineInterpolation(const OAILineInterpolation &line_interpolation) {
    m_line_interpolation = line_interpolation;
    m_line_interpolation_isSet = true;
}

bool OAILineChartLineStyleSettings::is_line_interpolation_Set() const{
    return m_line_interpolation_isSet;
}

bool OAILineChartLineStyleSettings::is_line_interpolation_Valid() const{
    return m_line_interpolation_isValid;
}

OAILineChartLineStyle OAILineChartLineStyleSettings::getLineStyle() const {
    return m_line_style;
}
void OAILineChartLineStyleSettings::setLineStyle(const OAILineChartLineStyle &line_style) {
    m_line_style = line_style;
    m_line_style_isSet = true;
}

bool OAILineChartLineStyleSettings::is_line_style_Set() const{
    return m_line_style_isSet;
}

bool OAILineChartLineStyleSettings::is_line_style_Valid() const{
    return m_line_style_isValid;
}

QString OAILineChartLineStyleSettings::getLineWidth() const {
    return m_line_width;
}
void OAILineChartLineStyleSettings::setLineWidth(const QString &line_width) {
    m_line_width = line_width;
    m_line_width_isSet = true;
}

bool OAILineChartLineStyleSettings::is_line_width_Set() const{
    return m_line_width_isSet;
}

bool OAILineChartLineStyleSettings::is_line_width_Valid() const{
    return m_line_width_isValid;
}

bool OAILineChartLineStyleSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_interpolation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineChartLineStyleSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
