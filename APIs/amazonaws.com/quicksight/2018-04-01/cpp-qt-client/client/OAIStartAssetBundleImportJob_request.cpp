/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAssetBundleImportJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAssetBundleImportJob_request::OAIStartAssetBundleImportJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAssetBundleImportJob_request::OAIStartAssetBundleImportJob_request() {
    this->initializeModel();
}

OAIStartAssetBundleImportJob_request::~OAIStartAssetBundleImportJob_request() {}

void OAIStartAssetBundleImportJob_request::initializeModel() {

    m_asset_bundle_import_job_id_isSet = false;
    m_asset_bundle_import_job_id_isValid = false;

    m_asset_bundle_import_source_isSet = false;
    m_asset_bundle_import_source_isValid = false;

    m_override_parameters_isSet = false;
    m_override_parameters_isValid = false;

    m_failure_action_isSet = false;
    m_failure_action_isValid = false;
}

void OAIStartAssetBundleImportJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAssetBundleImportJob_request::fromJsonObject(QJsonObject json) {

    m_asset_bundle_import_job_id_isValid = ::OpenAPI::fromJsonValue(m_asset_bundle_import_job_id, json[QString("AssetBundleImportJobId")]);
    m_asset_bundle_import_job_id_isSet = !json[QString("AssetBundleImportJobId")].isNull() && m_asset_bundle_import_job_id_isValid;

    m_asset_bundle_import_source_isValid = ::OpenAPI::fromJsonValue(m_asset_bundle_import_source, json[QString("AssetBundleImportSource")]);
    m_asset_bundle_import_source_isSet = !json[QString("AssetBundleImportSource")].isNull() && m_asset_bundle_import_source_isValid;

    m_override_parameters_isValid = ::OpenAPI::fromJsonValue(m_override_parameters, json[QString("OverrideParameters")]);
    m_override_parameters_isSet = !json[QString("OverrideParameters")].isNull() && m_override_parameters_isValid;

    m_failure_action_isValid = ::OpenAPI::fromJsonValue(m_failure_action, json[QString("FailureAction")]);
    m_failure_action_isSet = !json[QString("FailureAction")].isNull() && m_failure_action_isValid;
}

QString OAIStartAssetBundleImportJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAssetBundleImportJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_bundle_import_job_id_isSet) {
        obj.insert(QString("AssetBundleImportJobId"), ::OpenAPI::toJsonValue(m_asset_bundle_import_job_id));
    }
    if (m_asset_bundle_import_source.isSet()) {
        obj.insert(QString("AssetBundleImportSource"), ::OpenAPI::toJsonValue(m_asset_bundle_import_source));
    }
    if (m_override_parameters.isSet()) {
        obj.insert(QString("OverrideParameters"), ::OpenAPI::toJsonValue(m_override_parameters));
    }
    if (m_failure_action_isSet) {
        obj.insert(QString("FailureAction"), ::OpenAPI::toJsonValue(m_failure_action));
    }
    return obj;
}

QString OAIStartAssetBundleImportJob_request::getAssetBundleImportJobId() const {
    return m_asset_bundle_import_job_id;
}
void OAIStartAssetBundleImportJob_request::setAssetBundleImportJobId(const QString &asset_bundle_import_job_id) {
    m_asset_bundle_import_job_id = asset_bundle_import_job_id;
    m_asset_bundle_import_job_id_isSet = true;
}

bool OAIStartAssetBundleImportJob_request::is_asset_bundle_import_job_id_Set() const{
    return m_asset_bundle_import_job_id_isSet;
}

bool OAIStartAssetBundleImportJob_request::is_asset_bundle_import_job_id_Valid() const{
    return m_asset_bundle_import_job_id_isValid;
}

OAIStartAssetBundleImportJob_request_AssetBundleImportSource OAIStartAssetBundleImportJob_request::getAssetBundleImportSource() const {
    return m_asset_bundle_import_source;
}
void OAIStartAssetBundleImportJob_request::setAssetBundleImportSource(const OAIStartAssetBundleImportJob_request_AssetBundleImportSource &asset_bundle_import_source) {
    m_asset_bundle_import_source = asset_bundle_import_source;
    m_asset_bundle_import_source_isSet = true;
}

bool OAIStartAssetBundleImportJob_request::is_asset_bundle_import_source_Set() const{
    return m_asset_bundle_import_source_isSet;
}

bool OAIStartAssetBundleImportJob_request::is_asset_bundle_import_source_Valid() const{
    return m_asset_bundle_import_source_isValid;
}

OAIStartAssetBundleImportJob_request_OverrideParameters OAIStartAssetBundleImportJob_request::getOverrideParameters() const {
    return m_override_parameters;
}
void OAIStartAssetBundleImportJob_request::setOverrideParameters(const OAIStartAssetBundleImportJob_request_OverrideParameters &override_parameters) {
    m_override_parameters = override_parameters;
    m_override_parameters_isSet = true;
}

bool OAIStartAssetBundleImportJob_request::is_override_parameters_Set() const{
    return m_override_parameters_isSet;
}

bool OAIStartAssetBundleImportJob_request::is_override_parameters_Valid() const{
    return m_override_parameters_isValid;
}

QString OAIStartAssetBundleImportJob_request::getFailureAction() const {
    return m_failure_action;
}
void OAIStartAssetBundleImportJob_request::setFailureAction(const QString &failure_action) {
    m_failure_action = failure_action;
    m_failure_action_isSet = true;
}

bool OAIStartAssetBundleImportJob_request::is_failure_action_Set() const{
    return m_failure_action_isSet;
}

bool OAIStartAssetBundleImportJob_request::is_failure_action_Valid() const{
    return m_failure_action_isValid;
}

bool OAIStartAssetBundleImportJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_bundle_import_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_bundle_import_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_action_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAssetBundleImportJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_bundle_import_job_id_isValid && m_asset_bundle_import_source_isValid && true;
}

} // namespace OpenAPI
