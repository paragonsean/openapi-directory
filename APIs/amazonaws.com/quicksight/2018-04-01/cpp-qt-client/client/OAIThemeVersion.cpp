/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThemeVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThemeVersion::OAIThemeVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThemeVersion::OAIThemeVersion() {
    this->initializeModel();
}

OAIThemeVersion::~OAIThemeVersion() {}

void OAIThemeVersion::initializeModel() {

    m_version_number_isSet = false;
    m_version_number_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_base_theme_id_isSet = false;
    m_base_theme_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIThemeVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThemeVersion::fromJsonObject(QJsonObject json) {

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("VersionNumber")]);
    m_version_number_isSet = !json[QString("VersionNumber")].isNull() && m_version_number_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_base_theme_id_isValid = ::OpenAPI::fromJsonValue(m_base_theme_id, json[QString("BaseThemeId")]);
    m_base_theme_id_isSet = !json[QString("BaseThemeId")].isNull() && m_base_theme_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIThemeVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThemeVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_version_number_isSet) {
        obj.insert(QString("VersionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_base_theme_id_isSet) {
        obj.insert(QString("BaseThemeId"), ::OpenAPI::toJsonValue(m_base_theme_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIThemeVersion::getVersionNumber() const {
    return m_version_number;
}
void OAIThemeVersion::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIThemeVersion::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIThemeVersion::is_version_number_Valid() const{
    return m_version_number_isValid;
}

QString OAIThemeVersion::getArn() const {
    return m_arn;
}
void OAIThemeVersion::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIThemeVersion::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIThemeVersion::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIThemeVersion::getDescription() const {
    return m_description;
}
void OAIThemeVersion::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIThemeVersion::is_description_Set() const{
    return m_description_isSet;
}

bool OAIThemeVersion::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIThemeVersion::getBaseThemeId() const {
    return m_base_theme_id;
}
void OAIThemeVersion::setBaseThemeId(const QString &base_theme_id) {
    m_base_theme_id = base_theme_id;
    m_base_theme_id_isSet = true;
}

bool OAIThemeVersion::is_base_theme_id_Set() const{
    return m_base_theme_id_isSet;
}

bool OAIThemeVersion::is_base_theme_id_Valid() const{
    return m_base_theme_id_isValid;
}

QDateTime OAIThemeVersion::getCreatedTime() const {
    return m_created_time;
}
void OAIThemeVersion::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIThemeVersion::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIThemeVersion::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIThemeVersion_Configuration OAIThemeVersion::getConfiguration() const {
    return m_configuration;
}
void OAIThemeVersion::setConfiguration(const OAIThemeVersion_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIThemeVersion::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIThemeVersion::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QList OAIThemeVersion::getErrors() const {
    return m_errors;
}
void OAIThemeVersion::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIThemeVersion::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIThemeVersion::is_errors_Valid() const{
    return m_errors_isValid;
}

OAIResourceStatus OAIThemeVersion::getStatus() const {
    return m_status;
}
void OAIThemeVersion::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIThemeVersion::is_status_Set() const{
    return m_status_isSet;
}

bool OAIThemeVersion::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIThemeVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThemeVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
