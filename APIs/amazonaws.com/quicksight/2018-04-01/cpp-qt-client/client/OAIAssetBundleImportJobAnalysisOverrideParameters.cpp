/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportJobAnalysisOverrideParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportJobAnalysisOverrideParameters::OAIAssetBundleImportJobAnalysisOverrideParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportJobAnalysisOverrideParameters::OAIAssetBundleImportJobAnalysisOverrideParameters() {
    this->initializeModel();
}

OAIAssetBundleImportJobAnalysisOverrideParameters::~OAIAssetBundleImportJobAnalysisOverrideParameters() {}

void OAIAssetBundleImportJobAnalysisOverrideParameters::initializeModel() {

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAssetBundleImportJobAnalysisOverrideParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportJobAnalysisOverrideParameters::fromJsonObject(QJsonObject json) {

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIAssetBundleImportJobAnalysisOverrideParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportJobAnalysisOverrideParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIAssetBundleImportJobAnalysisOverrideParameters::getAnalysisId() const {
    return m_analysis_id;
}
void OAIAssetBundleImportJobAnalysisOverrideParameters::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIAssetBundleImportJobAnalysisOverrideParameters::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIAssetBundleImportJobAnalysisOverrideParameters::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

QString OAIAssetBundleImportJobAnalysisOverrideParameters::getName() const {
    return m_name;
}
void OAIAssetBundleImportJobAnalysisOverrideParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssetBundleImportJobAnalysisOverrideParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssetBundleImportJobAnalysisOverrideParameters::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAssetBundleImportJobAnalysisOverrideParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportJobAnalysisOverrideParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_id_isValid && true;
}

} // namespace OpenAPI
