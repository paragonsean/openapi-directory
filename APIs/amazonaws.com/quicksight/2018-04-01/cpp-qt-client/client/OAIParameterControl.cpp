/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterControl::OAIParameterControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterControl::OAIParameterControl() {
    this->initializeModel();
}

OAIParameterControl::~OAIParameterControl() {}

void OAIParameterControl::initializeModel() {

    m_date_time_picker_isSet = false;
    m_date_time_picker_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_dropdown_isSet = false;
    m_dropdown_isValid = false;

    m_text_field_isSet = false;
    m_text_field_isValid = false;

    m_text_area_isSet = false;
    m_text_area_isValid = false;

    m_slider_isSet = false;
    m_slider_isValid = false;
}

void OAIParameterControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterControl::fromJsonObject(QJsonObject json) {

    m_date_time_picker_isValid = ::OpenAPI::fromJsonValue(m_date_time_picker, json[QString("DateTimePicker")]);
    m_date_time_picker_isSet = !json[QString("DateTimePicker")].isNull() && m_date_time_picker_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("List")]);
    m_list_isSet = !json[QString("List")].isNull() && m_list_isValid;

    m_dropdown_isValid = ::OpenAPI::fromJsonValue(m_dropdown, json[QString("Dropdown")]);
    m_dropdown_isSet = !json[QString("Dropdown")].isNull() && m_dropdown_isValid;

    m_text_field_isValid = ::OpenAPI::fromJsonValue(m_text_field, json[QString("TextField")]);
    m_text_field_isSet = !json[QString("TextField")].isNull() && m_text_field_isValid;

    m_text_area_isValid = ::OpenAPI::fromJsonValue(m_text_area, json[QString("TextArea")]);
    m_text_area_isSet = !json[QString("TextArea")].isNull() && m_text_area_isValid;

    m_slider_isValid = ::OpenAPI::fromJsonValue(m_slider, json[QString("Slider")]);
    m_slider_isSet = !json[QString("Slider")].isNull() && m_slider_isValid;
}

QString OAIParameterControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterControl::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_picker.isSet()) {
        obj.insert(QString("DateTimePicker"), ::OpenAPI::toJsonValue(m_date_time_picker));
    }
    if (m_list.isSet()) {
        obj.insert(QString("List"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_dropdown.isSet()) {
        obj.insert(QString("Dropdown"), ::OpenAPI::toJsonValue(m_dropdown));
    }
    if (m_text_field.isSet()) {
        obj.insert(QString("TextField"), ::OpenAPI::toJsonValue(m_text_field));
    }
    if (m_text_area.isSet()) {
        obj.insert(QString("TextArea"), ::OpenAPI::toJsonValue(m_text_area));
    }
    if (m_slider.isSet()) {
        obj.insert(QString("Slider"), ::OpenAPI::toJsonValue(m_slider));
    }
    return obj;
}

OAIParameterControl_DateTimePicker OAIParameterControl::getDateTimePicker() const {
    return m_date_time_picker;
}
void OAIParameterControl::setDateTimePicker(const OAIParameterControl_DateTimePicker &date_time_picker) {
    m_date_time_picker = date_time_picker;
    m_date_time_picker_isSet = true;
}

bool OAIParameterControl::is_date_time_picker_Set() const{
    return m_date_time_picker_isSet;
}

bool OAIParameterControl::is_date_time_picker_Valid() const{
    return m_date_time_picker_isValid;
}

OAIParameterControl_List OAIParameterControl::getList() const {
    return m_list;
}
void OAIParameterControl::setList(const OAIParameterControl_List &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIParameterControl::is_list_Set() const{
    return m_list_isSet;
}

bool OAIParameterControl::is_list_Valid() const{
    return m_list_isValid;
}

OAIParameterControl_Dropdown OAIParameterControl::getDropdown() const {
    return m_dropdown;
}
void OAIParameterControl::setDropdown(const OAIParameterControl_Dropdown &dropdown) {
    m_dropdown = dropdown;
    m_dropdown_isSet = true;
}

bool OAIParameterControl::is_dropdown_Set() const{
    return m_dropdown_isSet;
}

bool OAIParameterControl::is_dropdown_Valid() const{
    return m_dropdown_isValid;
}

OAIParameterControl_TextField OAIParameterControl::getTextField() const {
    return m_text_field;
}
void OAIParameterControl::setTextField(const OAIParameterControl_TextField &text_field) {
    m_text_field = text_field;
    m_text_field_isSet = true;
}

bool OAIParameterControl::is_text_field_Set() const{
    return m_text_field_isSet;
}

bool OAIParameterControl::is_text_field_Valid() const{
    return m_text_field_isValid;
}

OAIParameterControl_TextArea OAIParameterControl::getTextArea() const {
    return m_text_area;
}
void OAIParameterControl::setTextArea(const OAIParameterControl_TextArea &text_area) {
    m_text_area = text_area;
    m_text_area_isSet = true;
}

bool OAIParameterControl::is_text_area_Set() const{
    return m_text_area_isSet;
}

bool OAIParameterControl::is_text_area_Valid() const{
    return m_text_area_isValid;
}

OAIParameterControl_Slider OAIParameterControl::getSlider() const {
    return m_slider;
}
void OAIParameterControl::setSlider(const OAIParameterControl_Slider &slider) {
    m_slider = slider;
    m_slider_isSet = true;
}

bool OAIParameterControl::is_slider_Set() const{
    return m_slider_isSet;
}

bool OAIParameterControl::is_slider_Valid() const{
    return m_slider_isValid;
}

bool OAIParameterControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_picker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropdown.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slider.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
