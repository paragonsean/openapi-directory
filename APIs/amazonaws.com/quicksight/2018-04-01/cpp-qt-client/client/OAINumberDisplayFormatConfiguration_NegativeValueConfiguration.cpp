/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberDisplayFormatConfiguration_NegativeValueConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::OAINumberDisplayFormatConfiguration_NegativeValueConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::OAINumberDisplayFormatConfiguration_NegativeValueConfiguration() {
    this->initializeModel();
}

OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::~OAINumberDisplayFormatConfiguration_NegativeValueConfiguration() {}

void OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::initializeModel() {

    m_display_mode_isSet = false;
    m_display_mode_isValid = false;
}

void OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::fromJsonObject(QJsonObject json) {

    m_display_mode_isValid = ::OpenAPI::fromJsonValue(m_display_mode, json[QString("DisplayMode")]);
    m_display_mode_isSet = !json[QString("DisplayMode")].isNull() && m_display_mode_isValid;
}

QString OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_display_mode.isSet()) {
        obj.insert(QString("DisplayMode"), ::OpenAPI::toJsonValue(m_display_mode));
    }
    return obj;
}

OAINegativeValueDisplayMode OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::getDisplayMode() const {
    return m_display_mode;
}
void OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::setDisplayMode(const OAINegativeValueDisplayMode &display_mode) {
    m_display_mode = display_mode;
    m_display_mode_isSet = true;
}

bool OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::is_display_mode_Set() const{
    return m_display_mode_isSet;
}

bool OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::is_display_mode_Valid() const{
    return m_display_mode_isValid;
}

bool OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumberDisplayFormatConfiguration_NegativeValueConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_mode_isValid && true;
}

} // namespace OpenAPI
