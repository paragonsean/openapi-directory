/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotJobS3Result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotJobS3Result::OAISnapshotJobS3Result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotJobS3Result::OAISnapshotJobS3Result() {
    this->initializeModel();
}

OAISnapshotJobS3Result::~OAISnapshotJobS3Result() {}

void OAISnapshotJobS3Result::initializeModel() {

    m_s3_destination_configuration_isSet = false;
    m_s3_destination_configuration_isValid = false;

    m_s3_uri_isSet = false;
    m_s3_uri_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;
}

void OAISnapshotJobS3Result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotJobS3Result::fromJsonObject(QJsonObject json) {

    m_s3_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_destination_configuration, json[QString("S3DestinationConfiguration")]);
    m_s3_destination_configuration_isSet = !json[QString("S3DestinationConfiguration")].isNull() && m_s3_destination_configuration_isValid;

    m_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_s3_uri, json[QString("S3Uri")]);
    m_s3_uri_isSet = !json[QString("S3Uri")].isNull() && m_s3_uri_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("ErrorInfo")]);
    m_error_info_isSet = !json[QString("ErrorInfo")].isNull() && m_error_info_isValid;
}

QString OAISnapshotJobS3Result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotJobS3Result::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_destination_configuration.isSet()) {
        obj.insert(QString("S3DestinationConfiguration"), ::OpenAPI::toJsonValue(m_s3_destination_configuration));
    }
    if (m_s3_uri_isSet) {
        obj.insert(QString("S3Uri"), ::OpenAPI::toJsonValue(m_s3_uri));
    }
    if (m_error_info.isSet()) {
        obj.insert(QString("ErrorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    return obj;
}

OAISnapshotJobS3Result_S3DestinationConfiguration OAISnapshotJobS3Result::getS3DestinationConfiguration() const {
    return m_s3_destination_configuration;
}
void OAISnapshotJobS3Result::setS3DestinationConfiguration(const OAISnapshotJobS3Result_S3DestinationConfiguration &s3_destination_configuration) {
    m_s3_destination_configuration = s3_destination_configuration;
    m_s3_destination_configuration_isSet = true;
}

bool OAISnapshotJobS3Result::is_s3_destination_configuration_Set() const{
    return m_s3_destination_configuration_isSet;
}

bool OAISnapshotJobS3Result::is_s3_destination_configuration_Valid() const{
    return m_s3_destination_configuration_isValid;
}

QString OAISnapshotJobS3Result::getS3Uri() const {
    return m_s3_uri;
}
void OAISnapshotJobS3Result::setS3Uri(const QString &s3_uri) {
    m_s3_uri = s3_uri;
    m_s3_uri_isSet = true;
}

bool OAISnapshotJobS3Result::is_s3_uri_Set() const{
    return m_s3_uri_isSet;
}

bool OAISnapshotJobS3Result::is_s3_uri_Valid() const{
    return m_s3_uri_isValid;
}

QList OAISnapshotJobS3Result::getErrorInfo() const {
    return m_error_info;
}
void OAISnapshotJobS3Result::setErrorInfo(const QList &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAISnapshotJobS3Result::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAISnapshotJobS3Result::is_error_info_Valid() const{
    return m_error_info_isValid;
}

bool OAISnapshotJobS3Result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotJobS3Result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
