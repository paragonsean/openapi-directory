/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDashboardResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDashboardResponse::OAIDescribeDashboardResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDashboardResponse::OAIDescribeDashboardResponse() {
    this->initializeModel();
}

OAIDescribeDashboardResponse::~OAIDescribeDashboardResponse() {}

void OAIDescribeDashboardResponse::initializeModel() {

    m_dashboard_isSet = false;
    m_dashboard_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDescribeDashboardResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDashboardResponse::fromJsonObject(QJsonObject json) {

    m_dashboard_isValid = ::OpenAPI::fromJsonValue(m_dashboard, json[QString("Dashboard")]);
    m_dashboard_isSet = !json[QString("Dashboard")].isNull() && m_dashboard_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIDescribeDashboardResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDashboardResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard.isSet()) {
        obj.insert(QString("Dashboard"), ::OpenAPI::toJsonValue(m_dashboard));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIDescribeDashboardResponse_Dashboard OAIDescribeDashboardResponse::getDashboard() const {
    return m_dashboard;
}
void OAIDescribeDashboardResponse::setDashboard(const OAIDescribeDashboardResponse_Dashboard &dashboard) {
    m_dashboard = dashboard;
    m_dashboard_isSet = true;
}

bool OAIDescribeDashboardResponse::is_dashboard_Set() const{
    return m_dashboard_isSet;
}

bool OAIDescribeDashboardResponse::is_dashboard_Valid() const{
    return m_dashboard_isValid;
}

qint32 OAIDescribeDashboardResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDashboardResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDashboardResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDashboardResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeDashboardResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeDashboardResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeDashboardResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeDashboardResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDescribeDashboardResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDashboardResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
