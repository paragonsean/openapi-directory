/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterfallChartConfiguration_SortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterfallChartConfiguration_SortConfiguration::OAIWaterfallChartConfiguration_SortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterfallChartConfiguration_SortConfiguration::OAIWaterfallChartConfiguration_SortConfiguration() {
    this->initializeModel();
}

OAIWaterfallChartConfiguration_SortConfiguration::~OAIWaterfallChartConfiguration_SortConfiguration() {}

void OAIWaterfallChartConfiguration_SortConfiguration::initializeModel() {

    m_category_sort_isSet = false;
    m_category_sort_isValid = false;

    m_breakdown_items_limit_isSet = false;
    m_breakdown_items_limit_isValid = false;
}

void OAIWaterfallChartConfiguration_SortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterfallChartConfiguration_SortConfiguration::fromJsonObject(QJsonObject json) {

    m_category_sort_isValid = ::OpenAPI::fromJsonValue(m_category_sort, json[QString("CategorySort")]);
    m_category_sort_isSet = !json[QString("CategorySort")].isNull() && m_category_sort_isValid;

    m_breakdown_items_limit_isValid = ::OpenAPI::fromJsonValue(m_breakdown_items_limit, json[QString("BreakdownItemsLimit")]);
    m_breakdown_items_limit_isSet = !json[QString("BreakdownItemsLimit")].isNull() && m_breakdown_items_limit_isValid;
}

QString OAIWaterfallChartConfiguration_SortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterfallChartConfiguration_SortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_category_sort.isSet()) {
        obj.insert(QString("CategorySort"), ::OpenAPI::toJsonValue(m_category_sort));
    }
    if (m_breakdown_items_limit.isSet()) {
        obj.insert(QString("BreakdownItemsLimit"), ::OpenAPI::toJsonValue(m_breakdown_items_limit));
    }
    return obj;
}

QList OAIWaterfallChartConfiguration_SortConfiguration::getCategorySort() const {
    return m_category_sort;
}
void OAIWaterfallChartConfiguration_SortConfiguration::setCategorySort(const QList &category_sort) {
    m_category_sort = category_sort;
    m_category_sort_isSet = true;
}

bool OAIWaterfallChartConfiguration_SortConfiguration::is_category_sort_Set() const{
    return m_category_sort_isSet;
}

bool OAIWaterfallChartConfiguration_SortConfiguration::is_category_sort_Valid() const{
    return m_category_sort_isValid;
}

OAIWaterfallChartSortConfiguration_BreakdownItemsLimit OAIWaterfallChartConfiguration_SortConfiguration::getBreakdownItemsLimit() const {
    return m_breakdown_items_limit;
}
void OAIWaterfallChartConfiguration_SortConfiguration::setBreakdownItemsLimit(const OAIWaterfallChartSortConfiguration_BreakdownItemsLimit &breakdown_items_limit) {
    m_breakdown_items_limit = breakdown_items_limit;
    m_breakdown_items_limit_isSet = true;
}

bool OAIWaterfallChartConfiguration_SortConfiguration::is_breakdown_items_limit_Set() const{
    return m_breakdown_items_limit_isSet;
}

bool OAIWaterfallChartConfiguration_SortConfiguration::is_breakdown_items_limit_Valid() const{
    return m_breakdown_items_limit_isValid;
}

bool OAIWaterfallChartConfiguration_SortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakdown_items_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterfallChartConfiguration_SortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
