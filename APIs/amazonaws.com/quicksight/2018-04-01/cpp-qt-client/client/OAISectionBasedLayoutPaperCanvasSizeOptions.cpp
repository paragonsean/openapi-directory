/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISectionBasedLayoutPaperCanvasSizeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISectionBasedLayoutPaperCanvasSizeOptions::OAISectionBasedLayoutPaperCanvasSizeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISectionBasedLayoutPaperCanvasSizeOptions::OAISectionBasedLayoutPaperCanvasSizeOptions() {
    this->initializeModel();
}

OAISectionBasedLayoutPaperCanvasSizeOptions::~OAISectionBasedLayoutPaperCanvasSizeOptions() {}

void OAISectionBasedLayoutPaperCanvasSizeOptions::initializeModel() {

    m_paper_size_isSet = false;
    m_paper_size_isValid = false;

    m_paper_orientation_isSet = false;
    m_paper_orientation_isValid = false;

    m_paper_margin_isSet = false;
    m_paper_margin_isValid = false;
}

void OAISectionBasedLayoutPaperCanvasSizeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISectionBasedLayoutPaperCanvasSizeOptions::fromJsonObject(QJsonObject json) {

    m_paper_size_isValid = ::OpenAPI::fromJsonValue(m_paper_size, json[QString("PaperSize")]);
    m_paper_size_isSet = !json[QString("PaperSize")].isNull() && m_paper_size_isValid;

    m_paper_orientation_isValid = ::OpenAPI::fromJsonValue(m_paper_orientation, json[QString("PaperOrientation")]);
    m_paper_orientation_isSet = !json[QString("PaperOrientation")].isNull() && m_paper_orientation_isValid;

    m_paper_margin_isValid = ::OpenAPI::fromJsonValue(m_paper_margin, json[QString("PaperMargin")]);
    m_paper_margin_isSet = !json[QString("PaperMargin")].isNull() && m_paper_margin_isValid;
}

QString OAISectionBasedLayoutPaperCanvasSizeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISectionBasedLayoutPaperCanvasSizeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_paper_size.isSet()) {
        obj.insert(QString("PaperSize"), ::OpenAPI::toJsonValue(m_paper_size));
    }
    if (m_paper_orientation.isSet()) {
        obj.insert(QString("PaperOrientation"), ::OpenAPI::toJsonValue(m_paper_orientation));
    }
    if (m_paper_margin.isSet()) {
        obj.insert(QString("PaperMargin"), ::OpenAPI::toJsonValue(m_paper_margin));
    }
    return obj;
}

OAIPaperSize OAISectionBasedLayoutPaperCanvasSizeOptions::getPaperSize() const {
    return m_paper_size;
}
void OAISectionBasedLayoutPaperCanvasSizeOptions::setPaperSize(const OAIPaperSize &paper_size) {
    m_paper_size = paper_size;
    m_paper_size_isSet = true;
}

bool OAISectionBasedLayoutPaperCanvasSizeOptions::is_paper_size_Set() const{
    return m_paper_size_isSet;
}

bool OAISectionBasedLayoutPaperCanvasSizeOptions::is_paper_size_Valid() const{
    return m_paper_size_isValid;
}

OAIPaperOrientation OAISectionBasedLayoutPaperCanvasSizeOptions::getPaperOrientation() const {
    return m_paper_orientation;
}
void OAISectionBasedLayoutPaperCanvasSizeOptions::setPaperOrientation(const OAIPaperOrientation &paper_orientation) {
    m_paper_orientation = paper_orientation;
    m_paper_orientation_isSet = true;
}

bool OAISectionBasedLayoutPaperCanvasSizeOptions::is_paper_orientation_Set() const{
    return m_paper_orientation_isSet;
}

bool OAISectionBasedLayoutPaperCanvasSizeOptions::is_paper_orientation_Valid() const{
    return m_paper_orientation_isValid;
}

OAISectionBasedLayoutPaperCanvasSizeOptions_PaperMargin OAISectionBasedLayoutPaperCanvasSizeOptions::getPaperMargin() const {
    return m_paper_margin;
}
void OAISectionBasedLayoutPaperCanvasSizeOptions::setPaperMargin(const OAISectionBasedLayoutPaperCanvasSizeOptions_PaperMargin &paper_margin) {
    m_paper_margin = paper_margin;
    m_paper_margin_isSet = true;
}

bool OAISectionBasedLayoutPaperCanvasSizeOptions::is_paper_margin_Set() const{
    return m_paper_margin_isSet;
}

bool OAISectionBasedLayoutPaperCanvasSizeOptions::is_paper_margin_Valid() const{
    return m_paper_margin_isValid;
}

bool OAISectionBasedLayoutPaperCanvasSizeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_paper_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paper_orientation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paper_margin.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISectionBasedLayoutPaperCanvasSizeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
