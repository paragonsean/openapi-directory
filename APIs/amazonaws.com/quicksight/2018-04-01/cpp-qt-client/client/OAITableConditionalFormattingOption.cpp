/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableConditionalFormattingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableConditionalFormattingOption::OAITableConditionalFormattingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableConditionalFormattingOption::OAITableConditionalFormattingOption() {
    this->initializeModel();
}

OAITableConditionalFormattingOption::~OAITableConditionalFormattingOption() {}

void OAITableConditionalFormattingOption::initializeModel() {

    m_cell_isSet = false;
    m_cell_isValid = false;

    m_row_isSet = false;
    m_row_isValid = false;
}

void OAITableConditionalFormattingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableConditionalFormattingOption::fromJsonObject(QJsonObject json) {

    m_cell_isValid = ::OpenAPI::fromJsonValue(m_cell, json[QString("Cell")]);
    m_cell_isSet = !json[QString("Cell")].isNull() && m_cell_isValid;

    m_row_isValid = ::OpenAPI::fromJsonValue(m_row, json[QString("Row")]);
    m_row_isSet = !json[QString("Row")].isNull() && m_row_isValid;
}

QString OAITableConditionalFormattingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableConditionalFormattingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_cell.isSet()) {
        obj.insert(QString("Cell"), ::OpenAPI::toJsonValue(m_cell));
    }
    if (m_row.isSet()) {
        obj.insert(QString("Row"), ::OpenAPI::toJsonValue(m_row));
    }
    return obj;
}

OAITableConditionalFormattingOption_Cell OAITableConditionalFormattingOption::getCell() const {
    return m_cell;
}
void OAITableConditionalFormattingOption::setCell(const OAITableConditionalFormattingOption_Cell &cell) {
    m_cell = cell;
    m_cell_isSet = true;
}

bool OAITableConditionalFormattingOption::is_cell_Set() const{
    return m_cell_isSet;
}

bool OAITableConditionalFormattingOption::is_cell_Valid() const{
    return m_cell_isValid;
}

OAITableConditionalFormattingOption_Row OAITableConditionalFormattingOption::getRow() const {
    return m_row;
}
void OAITableConditionalFormattingOption::setRow(const OAITableConditionalFormattingOption_Row &row) {
    m_row = row;
    m_row_isSet = true;
}

bool OAITableConditionalFormattingOption::is_row_Set() const{
    return m_row_isSet;
}

bool OAITableConditionalFormattingOption::is_row_Valid() const{
    return m_row_isValid;
}

bool OAITableConditionalFormattingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableConditionalFormattingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
