/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterListControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterListControl::OAIParameterListControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterListControl::OAIParameterListControl() {
    this->initializeModel();
}

OAIParameterListControl::~OAIParameterListControl() {}

void OAIParameterListControl::initializeModel() {

    m_parameter_control_id_isSet = false;
    m_parameter_control_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_source_parameter_name_isSet = false;
    m_source_parameter_name_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_selectable_values_isSet = false;
    m_selectable_values_isValid = false;

    m_cascading_control_configuration_isSet = false;
    m_cascading_control_configuration_isValid = false;
}

void OAIParameterListControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterListControl::fromJsonObject(QJsonObject json) {

    m_parameter_control_id_isValid = ::OpenAPI::fromJsonValue(m_parameter_control_id, json[QString("ParameterControlId")]);
    m_parameter_control_id_isSet = !json[QString("ParameterControlId")].isNull() && m_parameter_control_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_source_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_source_parameter_name, json[QString("SourceParameterName")]);
    m_source_parameter_name_isSet = !json[QString("SourceParameterName")].isNull() && m_source_parameter_name_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("DisplayOptions")]);
    m_display_options_isSet = !json[QString("DisplayOptions")].isNull() && m_display_options_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_selectable_values_isValid = ::OpenAPI::fromJsonValue(m_selectable_values, json[QString("SelectableValues")]);
    m_selectable_values_isSet = !json[QString("SelectableValues")].isNull() && m_selectable_values_isValid;

    m_cascading_control_configuration_isValid = ::OpenAPI::fromJsonValue(m_cascading_control_configuration, json[QString("CascadingControlConfiguration")]);
    m_cascading_control_configuration_isSet = !json[QString("CascadingControlConfiguration")].isNull() && m_cascading_control_configuration_isValid;
}

QString OAIParameterListControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterListControl::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_control_id_isSet) {
        obj.insert(QString("ParameterControlId"), ::OpenAPI::toJsonValue(m_parameter_control_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_source_parameter_name_isSet) {
        obj.insert(QString("SourceParameterName"), ::OpenAPI::toJsonValue(m_source_parameter_name));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("DisplayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_selectable_values.isSet()) {
        obj.insert(QString("SelectableValues"), ::OpenAPI::toJsonValue(m_selectable_values));
    }
    if (m_cascading_control_configuration.isSet()) {
        obj.insert(QString("CascadingControlConfiguration"), ::OpenAPI::toJsonValue(m_cascading_control_configuration));
    }
    return obj;
}

QString OAIParameterListControl::getParameterControlId() const {
    return m_parameter_control_id;
}
void OAIParameterListControl::setParameterControlId(const QString &parameter_control_id) {
    m_parameter_control_id = parameter_control_id;
    m_parameter_control_id_isSet = true;
}

bool OAIParameterListControl::is_parameter_control_id_Set() const{
    return m_parameter_control_id_isSet;
}

bool OAIParameterListControl::is_parameter_control_id_Valid() const{
    return m_parameter_control_id_isValid;
}

QString OAIParameterListControl::getTitle() const {
    return m_title;
}
void OAIParameterListControl::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIParameterListControl::is_title_Set() const{
    return m_title_isSet;
}

bool OAIParameterListControl::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIParameterListControl::getSourceParameterName() const {
    return m_source_parameter_name;
}
void OAIParameterListControl::setSourceParameterName(const QString &source_parameter_name) {
    m_source_parameter_name = source_parameter_name;
    m_source_parameter_name_isSet = true;
}

bool OAIParameterListControl::is_source_parameter_name_Set() const{
    return m_source_parameter_name_isSet;
}

bool OAIParameterListControl::is_source_parameter_name_Valid() const{
    return m_source_parameter_name_isValid;
}

OAIFilterListControl_DisplayOptions OAIParameterListControl::getDisplayOptions() const {
    return m_display_options;
}
void OAIParameterListControl::setDisplayOptions(const OAIFilterListControl_DisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIParameterListControl::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIParameterListControl::is_display_options_Valid() const{
    return m_display_options_isValid;
}

OAISheetControlListType OAIParameterListControl::getType() const {
    return m_type;
}
void OAIParameterListControl::setType(const OAISheetControlListType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIParameterListControl::is_type_Set() const{
    return m_type_isSet;
}

bool OAIParameterListControl::is_type_Valid() const{
    return m_type_isValid;
}

OAIParameterListControl_SelectableValues OAIParameterListControl::getSelectableValues() const {
    return m_selectable_values;
}
void OAIParameterListControl::setSelectableValues(const OAIParameterListControl_SelectableValues &selectable_values) {
    m_selectable_values = selectable_values;
    m_selectable_values_isSet = true;
}

bool OAIParameterListControl::is_selectable_values_Set() const{
    return m_selectable_values_isSet;
}

bool OAIParameterListControl::is_selectable_values_Valid() const{
    return m_selectable_values_isValid;
}

OAIFilterListControl_CascadingControlConfiguration OAIParameterListControl::getCascadingControlConfiguration() const {
    return m_cascading_control_configuration;
}
void OAIParameterListControl::setCascadingControlConfiguration(const OAIFilterListControl_CascadingControlConfiguration &cascading_control_configuration) {
    m_cascading_control_configuration = cascading_control_configuration;
    m_cascading_control_configuration_isSet = true;
}

bool OAIParameterListControl::is_cascading_control_configuration_Set() const{
    return m_cascading_control_configuration_isSet;
}

bool OAIParameterListControl::is_cascading_control_configuration_Valid() const{
    return m_cascading_control_configuration_isValid;
}

bool OAIParameterListControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selectable_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cascading_control_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterListControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_control_id_isValid && m_title_isValid && m_source_parameter_name_isValid && true;
}

} // namespace OpenAPI
