/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldFolder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldFolder::OAIFieldFolder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldFolder::OAIFieldFolder() {
    this->initializeModel();
}

OAIFieldFolder::~OAIFieldFolder() {}

void OAIFieldFolder::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;
}

void OAIFieldFolder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldFolder::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;
}

QString OAIFieldFolder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldFolder::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_columns.isSet()) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    return obj;
}

QString OAIFieldFolder::getDescription() const {
    return m_description;
}
void OAIFieldFolder::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFieldFolder::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFieldFolder::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIFieldFolder::getColumns() const {
    return m_columns;
}
void OAIFieldFolder::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIFieldFolder::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIFieldFolder::is_columns_Valid() const{
    return m_columns_isValid;
}

bool OAIFieldFolder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldFolder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
