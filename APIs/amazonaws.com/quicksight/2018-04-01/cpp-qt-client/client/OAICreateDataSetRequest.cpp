/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSetRequest::OAICreateDataSetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSetRequest::OAICreateDataSetRequest() {
    this->initializeModel();
}

OAICreateDataSetRequest::~OAICreateDataSetRequest() {}

void OAICreateDataSetRequest::initializeModel() {

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_physical_table_map_isSet = false;
    m_physical_table_map_isValid = false;

    m_logical_table_map_isSet = false;
    m_logical_table_map_isValid = false;

    m_import_mode_isSet = false;
    m_import_mode_isValid = false;

    m_column_groups_isSet = false;
    m_column_groups_isValid = false;

    m_field_folders_isSet = false;
    m_field_folders_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_row_level_permission_data_set_isSet = false;
    m_row_level_permission_data_set_isValid = false;

    m_row_level_permission_tag_configuration_isSet = false;
    m_row_level_permission_tag_configuration_isValid = false;

    m_column_level_permission_rules_isSet = false;
    m_column_level_permission_rules_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_data_set_usage_configuration_isSet = false;
    m_data_set_usage_configuration_isValid = false;

    m_dataset_parameters_isSet = false;
    m_dataset_parameters_isValid = false;
}

void OAICreateDataSetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSetRequest::fromJsonObject(QJsonObject json) {

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("DataSetId")]);
    m_data_set_id_isSet = !json[QString("DataSetId")].isNull() && m_data_set_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_physical_table_map_isValid = ::OpenAPI::fromJsonValue(m_physical_table_map, json[QString("PhysicalTableMap")]);
    m_physical_table_map_isSet = !json[QString("PhysicalTableMap")].isNull() && m_physical_table_map_isValid;

    m_logical_table_map_isValid = ::OpenAPI::fromJsonValue(m_logical_table_map, json[QString("LogicalTableMap")]);
    m_logical_table_map_isSet = !json[QString("LogicalTableMap")].isNull() && m_logical_table_map_isValid;

    m_import_mode_isValid = ::OpenAPI::fromJsonValue(m_import_mode, json[QString("ImportMode")]);
    m_import_mode_isSet = !json[QString("ImportMode")].isNull() && m_import_mode_isValid;

    m_column_groups_isValid = ::OpenAPI::fromJsonValue(m_column_groups, json[QString("ColumnGroups")]);
    m_column_groups_isSet = !json[QString("ColumnGroups")].isNull() && m_column_groups_isValid;

    m_field_folders_isValid = ::OpenAPI::fromJsonValue(m_field_folders, json[QString("FieldFolders")]);
    m_field_folders_isSet = !json[QString("FieldFolders")].isNull() && m_field_folders_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_row_level_permission_data_set_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_data_set, json[QString("RowLevelPermissionDataSet")]);
    m_row_level_permission_data_set_isSet = !json[QString("RowLevelPermissionDataSet")].isNull() && m_row_level_permission_data_set_isValid;

    m_row_level_permission_tag_configuration_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_tag_configuration, json[QString("RowLevelPermissionTagConfiguration")]);
    m_row_level_permission_tag_configuration_isSet = !json[QString("RowLevelPermissionTagConfiguration")].isNull() && m_row_level_permission_tag_configuration_isValid;

    m_column_level_permission_rules_isValid = ::OpenAPI::fromJsonValue(m_column_level_permission_rules, json[QString("ColumnLevelPermissionRules")]);
    m_column_level_permission_rules_isSet = !json[QString("ColumnLevelPermissionRules")].isNull() && m_column_level_permission_rules_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_data_set_usage_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_set_usage_configuration, json[QString("DataSetUsageConfiguration")]);
    m_data_set_usage_configuration_isSet = !json[QString("DataSetUsageConfiguration")].isNull() && m_data_set_usage_configuration_isValid;

    m_dataset_parameters_isValid = ::OpenAPI::fromJsonValue(m_dataset_parameters, json[QString("DatasetParameters")]);
    m_dataset_parameters_isSet = !json[QString("DatasetParameters")].isNull() && m_dataset_parameters_isValid;
}

QString OAICreateDataSetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_id_isSet) {
        obj.insert(QString("DataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_physical_table_map.isSet()) {
        obj.insert(QString("PhysicalTableMap"), ::OpenAPI::toJsonValue(m_physical_table_map));
    }
    if (m_logical_table_map.isSet()) {
        obj.insert(QString("LogicalTableMap"), ::OpenAPI::toJsonValue(m_logical_table_map));
    }
    if (m_import_mode.isSet()) {
        obj.insert(QString("ImportMode"), ::OpenAPI::toJsonValue(m_import_mode));
    }
    if (m_column_groups.isSet()) {
        obj.insert(QString("ColumnGroups"), ::OpenAPI::toJsonValue(m_column_groups));
    }
    if (m_field_folders.isSet()) {
        obj.insert(QString("FieldFolders"), ::OpenAPI::toJsonValue(m_field_folders));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_row_level_permission_data_set.isSet()) {
        obj.insert(QString("RowLevelPermissionDataSet"), ::OpenAPI::toJsonValue(m_row_level_permission_data_set));
    }
    if (m_row_level_permission_tag_configuration.isSet()) {
        obj.insert(QString("RowLevelPermissionTagConfiguration"), ::OpenAPI::toJsonValue(m_row_level_permission_tag_configuration));
    }
    if (m_column_level_permission_rules.isSet()) {
        obj.insert(QString("ColumnLevelPermissionRules"), ::OpenAPI::toJsonValue(m_column_level_permission_rules));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_data_set_usage_configuration.isSet()) {
        obj.insert(QString("DataSetUsageConfiguration"), ::OpenAPI::toJsonValue(m_data_set_usage_configuration));
    }
    if (m_dataset_parameters.isSet()) {
        obj.insert(QString("DatasetParameters"), ::OpenAPI::toJsonValue(m_dataset_parameters));
    }
    return obj;
}

QString OAICreateDataSetRequest::getDataSetId() const {
    return m_data_set_id;
}
void OAICreateDataSetRequest::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAICreateDataSetRequest::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAICreateDataSetRequest::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAICreateDataSetRequest::getName() const {
    return m_name;
}
void OAICreateDataSetRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDataSetRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDataSetRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAICreateDataSetRequest::getPhysicalTableMap() const {
    return m_physical_table_map;
}
void OAICreateDataSetRequest::setPhysicalTableMap(const QMap &physical_table_map) {
    m_physical_table_map = physical_table_map;
    m_physical_table_map_isSet = true;
}

bool OAICreateDataSetRequest::is_physical_table_map_Set() const{
    return m_physical_table_map_isSet;
}

bool OAICreateDataSetRequest::is_physical_table_map_Valid() const{
    return m_physical_table_map_isValid;
}

QMap OAICreateDataSetRequest::getLogicalTableMap() const {
    return m_logical_table_map;
}
void OAICreateDataSetRequest::setLogicalTableMap(const QMap &logical_table_map) {
    m_logical_table_map = logical_table_map;
    m_logical_table_map_isSet = true;
}

bool OAICreateDataSetRequest::is_logical_table_map_Set() const{
    return m_logical_table_map_isSet;
}

bool OAICreateDataSetRequest::is_logical_table_map_Valid() const{
    return m_logical_table_map_isValid;
}

OAIDataSetImportMode OAICreateDataSetRequest::getImportMode() const {
    return m_import_mode;
}
void OAICreateDataSetRequest::setImportMode(const OAIDataSetImportMode &import_mode) {
    m_import_mode = import_mode;
    m_import_mode_isSet = true;
}

bool OAICreateDataSetRequest::is_import_mode_Set() const{
    return m_import_mode_isSet;
}

bool OAICreateDataSetRequest::is_import_mode_Valid() const{
    return m_import_mode_isValid;
}

QList OAICreateDataSetRequest::getColumnGroups() const {
    return m_column_groups;
}
void OAICreateDataSetRequest::setColumnGroups(const QList &column_groups) {
    m_column_groups = column_groups;
    m_column_groups_isSet = true;
}

bool OAICreateDataSetRequest::is_column_groups_Set() const{
    return m_column_groups_isSet;
}

bool OAICreateDataSetRequest::is_column_groups_Valid() const{
    return m_column_groups_isValid;
}

QMap OAICreateDataSetRequest::getFieldFolders() const {
    return m_field_folders;
}
void OAICreateDataSetRequest::setFieldFolders(const QMap &field_folders) {
    m_field_folders = field_folders;
    m_field_folders_isSet = true;
}

bool OAICreateDataSetRequest::is_field_folders_Set() const{
    return m_field_folders_isSet;
}

bool OAICreateDataSetRequest::is_field_folders_Valid() const{
    return m_field_folders_isValid;
}

QList OAICreateDataSetRequest::getPermissions() const {
    return m_permissions;
}
void OAICreateDataSetRequest::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateDataSetRequest::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateDataSetRequest::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAICreateDataSetRequest_RowLevelPermissionDataSet OAICreateDataSetRequest::getRowLevelPermissionDataSet() const {
    return m_row_level_permission_data_set;
}
void OAICreateDataSetRequest::setRowLevelPermissionDataSet(const OAICreateDataSetRequest_RowLevelPermissionDataSet &row_level_permission_data_set) {
    m_row_level_permission_data_set = row_level_permission_data_set;
    m_row_level_permission_data_set_isSet = true;
}

bool OAICreateDataSetRequest::is_row_level_permission_data_set_Set() const{
    return m_row_level_permission_data_set_isSet;
}

bool OAICreateDataSetRequest::is_row_level_permission_data_set_Valid() const{
    return m_row_level_permission_data_set_isValid;
}

OAICreateDataSetRequest_RowLevelPermissionTagConfiguration OAICreateDataSetRequest::getRowLevelPermissionTagConfiguration() const {
    return m_row_level_permission_tag_configuration;
}
void OAICreateDataSetRequest::setRowLevelPermissionTagConfiguration(const OAICreateDataSetRequest_RowLevelPermissionTagConfiguration &row_level_permission_tag_configuration) {
    m_row_level_permission_tag_configuration = row_level_permission_tag_configuration;
    m_row_level_permission_tag_configuration_isSet = true;
}

bool OAICreateDataSetRequest::is_row_level_permission_tag_configuration_Set() const{
    return m_row_level_permission_tag_configuration_isSet;
}

bool OAICreateDataSetRequest::is_row_level_permission_tag_configuration_Valid() const{
    return m_row_level_permission_tag_configuration_isValid;
}

QList OAICreateDataSetRequest::getColumnLevelPermissionRules() const {
    return m_column_level_permission_rules;
}
void OAICreateDataSetRequest::setColumnLevelPermissionRules(const QList &column_level_permission_rules) {
    m_column_level_permission_rules = column_level_permission_rules;
    m_column_level_permission_rules_isSet = true;
}

bool OAICreateDataSetRequest::is_column_level_permission_rules_Set() const{
    return m_column_level_permission_rules_isSet;
}

bool OAICreateDataSetRequest::is_column_level_permission_rules_Valid() const{
    return m_column_level_permission_rules_isValid;
}

QList OAICreateDataSetRequest::getTags() const {
    return m_tags;
}
void OAICreateDataSetRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDataSetRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDataSetRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDataSetUsageConfiguration OAICreateDataSetRequest::getDataSetUsageConfiguration() const {
    return m_data_set_usage_configuration;
}
void OAICreateDataSetRequest::setDataSetUsageConfiguration(const OAIDataSetUsageConfiguration &data_set_usage_configuration) {
    m_data_set_usage_configuration = data_set_usage_configuration;
    m_data_set_usage_configuration_isSet = true;
}

bool OAICreateDataSetRequest::is_data_set_usage_configuration_Set() const{
    return m_data_set_usage_configuration_isSet;
}

bool OAICreateDataSetRequest::is_data_set_usage_configuration_Valid() const{
    return m_data_set_usage_configuration_isValid;
}

QList OAICreateDataSetRequest::getDatasetParameters() const {
    return m_dataset_parameters;
}
void OAICreateDataSetRequest::setDatasetParameters(const QList &dataset_parameters) {
    m_dataset_parameters = dataset_parameters;
    m_dataset_parameters_isSet = true;
}

bool OAICreateDataSetRequest::is_dataset_parameters_Set() const{
    return m_dataset_parameters_isSet;
}

bool OAICreateDataSetRequest::is_dataset_parameters_Valid() const{
    return m_dataset_parameters_isValid;
}

bool OAICreateDataSetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_table_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_table_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_folders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_data_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_tag_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_level_permission_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_usage_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_id_isValid && m_name_isValid && m_physical_table_map_isValid && m_import_mode_isValid && true;
}

} // namespace OpenAPI
