/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableVisual_ChartConfiguration::OAIPivotTableVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableVisual_ChartConfiguration::OAIPivotTableVisual_ChartConfiguration() {
    this->initializeModel();
}

OAIPivotTableVisual_ChartConfiguration::~OAIPivotTableVisual_ChartConfiguration() {}

void OAIPivotTableVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_table_options_isSet = false;
    m_table_options_isValid = false;

    m_total_options_isSet = false;
    m_total_options_isValid = false;

    m_field_options_isSet = false;
    m_field_options_isValid = false;

    m_paginated_report_options_isSet = false;
    m_paginated_report_options_isValid = false;
}

void OAIPivotTableVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_table_options_isValid = ::OpenAPI::fromJsonValue(m_table_options, json[QString("TableOptions")]);
    m_table_options_isSet = !json[QString("TableOptions")].isNull() && m_table_options_isValid;

    m_total_options_isValid = ::OpenAPI::fromJsonValue(m_total_options, json[QString("TotalOptions")]);
    m_total_options_isSet = !json[QString("TotalOptions")].isNull() && m_total_options_isValid;

    m_field_options_isValid = ::OpenAPI::fromJsonValue(m_field_options, json[QString("FieldOptions")]);
    m_field_options_isSet = !json[QString("FieldOptions")].isNull() && m_field_options_isValid;

    m_paginated_report_options_isValid = ::OpenAPI::fromJsonValue(m_paginated_report_options, json[QString("PaginatedReportOptions")]);
    m_paginated_report_options_isSet = !json[QString("PaginatedReportOptions")].isNull() && m_paginated_report_options_isValid;
}

QString OAIPivotTableVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_table_options.isSet()) {
        obj.insert(QString("TableOptions"), ::OpenAPI::toJsonValue(m_table_options));
    }
    if (m_total_options.isSet()) {
        obj.insert(QString("TotalOptions"), ::OpenAPI::toJsonValue(m_total_options));
    }
    if (m_field_options.isSet()) {
        obj.insert(QString("FieldOptions"), ::OpenAPI::toJsonValue(m_field_options));
    }
    if (m_paginated_report_options.isSet()) {
        obj.insert(QString("PaginatedReportOptions"), ::OpenAPI::toJsonValue(m_paginated_report_options));
    }
    return obj;
}

OAIPivotTableConfiguration_FieldWells OAIPivotTableVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIPivotTableVisual_ChartConfiguration::setFieldWells(const OAIPivotTableConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIPivotTableVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIPivotTableVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIPivotTableConfiguration_SortConfiguration OAIPivotTableVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIPivotTableVisual_ChartConfiguration::setSortConfiguration(const OAIPivotTableConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIPivotTableVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIPivotTableVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIPivotTableConfiguration_TableOptions OAIPivotTableVisual_ChartConfiguration::getTableOptions() const {
    return m_table_options;
}
void OAIPivotTableVisual_ChartConfiguration::setTableOptions(const OAIPivotTableConfiguration_TableOptions &table_options) {
    m_table_options = table_options;
    m_table_options_isSet = true;
}

bool OAIPivotTableVisual_ChartConfiguration::is_table_options_Set() const{
    return m_table_options_isSet;
}

bool OAIPivotTableVisual_ChartConfiguration::is_table_options_Valid() const{
    return m_table_options_isValid;
}

OAIPivotTableConfiguration_TotalOptions OAIPivotTableVisual_ChartConfiguration::getTotalOptions() const {
    return m_total_options;
}
void OAIPivotTableVisual_ChartConfiguration::setTotalOptions(const OAIPivotTableConfiguration_TotalOptions &total_options) {
    m_total_options = total_options;
    m_total_options_isSet = true;
}

bool OAIPivotTableVisual_ChartConfiguration::is_total_options_Set() const{
    return m_total_options_isSet;
}

bool OAIPivotTableVisual_ChartConfiguration::is_total_options_Valid() const{
    return m_total_options_isValid;
}

OAIPivotTableConfiguration_FieldOptions OAIPivotTableVisual_ChartConfiguration::getFieldOptions() const {
    return m_field_options;
}
void OAIPivotTableVisual_ChartConfiguration::setFieldOptions(const OAIPivotTableConfiguration_FieldOptions &field_options) {
    m_field_options = field_options;
    m_field_options_isSet = true;
}

bool OAIPivotTableVisual_ChartConfiguration::is_field_options_Set() const{
    return m_field_options_isSet;
}

bool OAIPivotTableVisual_ChartConfiguration::is_field_options_Valid() const{
    return m_field_options_isValid;
}

OAIPivotTableConfiguration_PaginatedReportOptions OAIPivotTableVisual_ChartConfiguration::getPaginatedReportOptions() const {
    return m_paginated_report_options;
}
void OAIPivotTableVisual_ChartConfiguration::setPaginatedReportOptions(const OAIPivotTableConfiguration_PaginatedReportOptions &paginated_report_options) {
    m_paginated_report_options = paginated_report_options;
    m_paginated_report_options_isSet = true;
}

bool OAIPivotTableVisual_ChartConfiguration::is_paginated_report_options_Set() const{
    return m_paginated_report_options_isSet;
}

bool OAIPivotTableVisual_ChartConfiguration::is_paginated_report_options_Valid() const{
    return m_paginated_report_options_isValid;
}

bool OAIPivotTableVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paginated_report_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
