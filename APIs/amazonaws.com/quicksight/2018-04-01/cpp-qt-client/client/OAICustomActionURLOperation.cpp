/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomActionURLOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomActionURLOperation::OAICustomActionURLOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomActionURLOperation::OAICustomActionURLOperation() {
    this->initializeModel();
}

OAICustomActionURLOperation::~OAICustomActionURLOperation() {}

void OAICustomActionURLOperation::initializeModel() {

    m_url_template_isSet = false;
    m_url_template_isValid = false;

    m_url_target_isSet = false;
    m_url_target_isValid = false;
}

void OAICustomActionURLOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomActionURLOperation::fromJsonObject(QJsonObject json) {

    m_url_template_isValid = ::OpenAPI::fromJsonValue(m_url_template, json[QString("URLTemplate")]);
    m_url_template_isSet = !json[QString("URLTemplate")].isNull() && m_url_template_isValid;

    m_url_target_isValid = ::OpenAPI::fromJsonValue(m_url_target, json[QString("URLTarget")]);
    m_url_target_isSet = !json[QString("URLTarget")].isNull() && m_url_target_isValid;
}

QString OAICustomActionURLOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomActionURLOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_url_template_isSet) {
        obj.insert(QString("URLTemplate"), ::OpenAPI::toJsonValue(m_url_template));
    }
    if (m_url_target.isSet()) {
        obj.insert(QString("URLTarget"), ::OpenAPI::toJsonValue(m_url_target));
    }
    return obj;
}

QString OAICustomActionURLOperation::getUrlTemplate() const {
    return m_url_template;
}
void OAICustomActionURLOperation::setUrlTemplate(const QString &url_template) {
    m_url_template = url_template;
    m_url_template_isSet = true;
}

bool OAICustomActionURLOperation::is_url_template_Set() const{
    return m_url_template_isSet;
}

bool OAICustomActionURLOperation::is_url_template_Valid() const{
    return m_url_template_isValid;
}

OAIURLTargetConfiguration OAICustomActionURLOperation::getUrlTarget() const {
    return m_url_target;
}
void OAICustomActionURLOperation::setUrlTarget(const OAIURLTargetConfiguration &url_target) {
    m_url_target = url_target;
    m_url_target_isSet = true;
}

bool OAICustomActionURLOperation::is_url_target_Set() const{
    return m_url_target_isSet;
}

bool OAICustomActionURLOperation::is_url_target_Valid() const{
    return m_url_target_isValid;
}

bool OAICustomActionURLOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomActionURLOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_template_isValid && m_url_target_isValid && true;
}

} // namespace OpenAPI
