/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColorScale_NullValueColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorScale_NullValueColor::OAIColorScale_NullValueColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorScale_NullValueColor::OAIColorScale_NullValueColor() {
    this->initializeModel();
}

OAIColorScale_NullValueColor::~OAIColorScale_NullValueColor() {}

void OAIColorScale_NullValueColor::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_data_value_isSet = false;
    m_data_value_isValid = false;
}

void OAIColorScale_NullValueColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColorScale_NullValueColor::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_data_value_isValid = ::OpenAPI::fromJsonValue(m_data_value, json[QString("DataValue")]);
    m_data_value_isSet = !json[QString("DataValue")].isNull() && m_data_value_isValid;
}

QString OAIColorScale_NullValueColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColorScale_NullValueColor::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_data_value_isSet) {
        obj.insert(QString("DataValue"), ::OpenAPI::toJsonValue(m_data_value));
    }
    return obj;
}

QString OAIColorScale_NullValueColor::getColor() const {
    return m_color;
}
void OAIColorScale_NullValueColor::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIColorScale_NullValueColor::is_color_Set() const{
    return m_color_isSet;
}

bool OAIColorScale_NullValueColor::is_color_Valid() const{
    return m_color_isValid;
}

double OAIColorScale_NullValueColor::getDataValue() const {
    return m_data_value;
}
void OAIColorScale_NullValueColor::setDataValue(const double &data_value) {
    m_data_value = data_value;
    m_data_value_isSet = true;
}

bool OAIColorScale_NullValueColor::is_data_value_Set() const{
    return m_data_value_isSet;
}

bool OAIColorScale_NullValueColor::is_data_value_Valid() const{
    return m_data_value_isValid;
}

bool OAIColorScale_NullValueColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColorScale_NullValueColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
