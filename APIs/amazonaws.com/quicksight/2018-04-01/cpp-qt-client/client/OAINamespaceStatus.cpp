/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespaceStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespaceStatus::OAINamespaceStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespaceStatus::OAINamespaceStatus() {
    this->initializeModel();
}

OAINamespaceStatus::~OAINamespaceStatus() {}

void OAINamespaceStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINamespaceStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINamespaceStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamespaceStatus::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamespaceStatus::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamespaceStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETRYABLE_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamespaceStatus::RETRYABLE_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NON_RETRYABLE_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamespaceStatus::NON_RETRYABLE_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINamespaceStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINamespaceStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINamespaceStatus::CREATED:
            val = "CREATED";
            break;
        case eOAINamespaceStatus::CREATING:
            val = "CREATING";
            break;
        case eOAINamespaceStatus::DELETING:
            val = "DELETING";
            break;
        case eOAINamespaceStatus::RETRYABLE_FAILURE:
            val = "RETRYABLE_FAILURE";
            break;
        case eOAINamespaceStatus::NON_RETRYABLE_FAILURE:
            val = "NON_RETRYABLE_FAILURE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINamespaceStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINamespaceStatus::eOAINamespaceStatus OAINamespaceStatus::getValue() const {
    return m_value;
}

void OAINamespaceStatus::setValue(const OAINamespaceStatus::eOAINamespaceStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINamespaceStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAINamespaceStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
