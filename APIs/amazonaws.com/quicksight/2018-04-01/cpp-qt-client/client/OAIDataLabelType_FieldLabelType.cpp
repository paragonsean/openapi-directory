/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataLabelType_FieldLabelType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataLabelType_FieldLabelType::OAIDataLabelType_FieldLabelType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataLabelType_FieldLabelType::OAIDataLabelType_FieldLabelType() {
    this->initializeModel();
}

OAIDataLabelType_FieldLabelType::~OAIDataLabelType_FieldLabelType() {}

void OAIDataLabelType_FieldLabelType::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIDataLabelType_FieldLabelType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataLabelType_FieldLabelType::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;
}

QString OAIDataLabelType_FieldLabelType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataLabelType_FieldLabelType::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIDataLabelType_FieldLabelType::getFieldId() const {
    return m_field_id;
}
void OAIDataLabelType_FieldLabelType::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIDataLabelType_FieldLabelType::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIDataLabelType_FieldLabelType::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIVisibility OAIDataLabelType_FieldLabelType::getVisibility() const {
    return m_visibility;
}
void OAIDataLabelType_FieldLabelType::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIDataLabelType_FieldLabelType::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIDataLabelType_FieldLabelType::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIDataLabelType_FieldLabelType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataLabelType_FieldLabelType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
