/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRowLevelPermissionTagRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRowLevelPermissionTagRule::OAIRowLevelPermissionTagRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRowLevelPermissionTagRule::OAIRowLevelPermissionTagRule() {
    this->initializeModel();
}

OAIRowLevelPermissionTagRule::~OAIRowLevelPermissionTagRule() {}

void OAIRowLevelPermissionTagRule::initializeModel() {

    m_tag_key_isSet = false;
    m_tag_key_isValid = false;

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_tag_multi_value_delimiter_isSet = false;
    m_tag_multi_value_delimiter_isValid = false;

    m_match_all_value_isSet = false;
    m_match_all_value_isValid = false;
}

void OAIRowLevelPermissionTagRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRowLevelPermissionTagRule::fromJsonObject(QJsonObject json) {

    m_tag_key_isValid = ::OpenAPI::fromJsonValue(m_tag_key, json[QString("TagKey")]);
    m_tag_key_isSet = !json[QString("TagKey")].isNull() && m_tag_key_isValid;

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_tag_multi_value_delimiter_isValid = ::OpenAPI::fromJsonValue(m_tag_multi_value_delimiter, json[QString("TagMultiValueDelimiter")]);
    m_tag_multi_value_delimiter_isSet = !json[QString("TagMultiValueDelimiter")].isNull() && m_tag_multi_value_delimiter_isValid;

    m_match_all_value_isValid = ::OpenAPI::fromJsonValue(m_match_all_value, json[QString("MatchAllValue")]);
    m_match_all_value_isSet = !json[QString("MatchAllValue")].isNull() && m_match_all_value_isValid;
}

QString OAIRowLevelPermissionTagRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRowLevelPermissionTagRule::asJsonObject() const {
    QJsonObject obj;
    if (m_tag_key_isSet) {
        obj.insert(QString("TagKey"), ::OpenAPI::toJsonValue(m_tag_key));
    }
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_tag_multi_value_delimiter_isSet) {
        obj.insert(QString("TagMultiValueDelimiter"), ::OpenAPI::toJsonValue(m_tag_multi_value_delimiter));
    }
    if (m_match_all_value_isSet) {
        obj.insert(QString("MatchAllValue"), ::OpenAPI::toJsonValue(m_match_all_value));
    }
    return obj;
}

QString OAIRowLevelPermissionTagRule::getTagKey() const {
    return m_tag_key;
}
void OAIRowLevelPermissionTagRule::setTagKey(const QString &tag_key) {
    m_tag_key = tag_key;
    m_tag_key_isSet = true;
}

bool OAIRowLevelPermissionTagRule::is_tag_key_Set() const{
    return m_tag_key_isSet;
}

bool OAIRowLevelPermissionTagRule::is_tag_key_Valid() const{
    return m_tag_key_isValid;
}

QString OAIRowLevelPermissionTagRule::getColumnName() const {
    return m_column_name;
}
void OAIRowLevelPermissionTagRule::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIRowLevelPermissionTagRule::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIRowLevelPermissionTagRule::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QString OAIRowLevelPermissionTagRule::getTagMultiValueDelimiter() const {
    return m_tag_multi_value_delimiter;
}
void OAIRowLevelPermissionTagRule::setTagMultiValueDelimiter(const QString &tag_multi_value_delimiter) {
    m_tag_multi_value_delimiter = tag_multi_value_delimiter;
    m_tag_multi_value_delimiter_isSet = true;
}

bool OAIRowLevelPermissionTagRule::is_tag_multi_value_delimiter_Set() const{
    return m_tag_multi_value_delimiter_isSet;
}

bool OAIRowLevelPermissionTagRule::is_tag_multi_value_delimiter_Valid() const{
    return m_tag_multi_value_delimiter_isValid;
}

QString OAIRowLevelPermissionTagRule::getMatchAllValue() const {
    return m_match_all_value;
}
void OAIRowLevelPermissionTagRule::setMatchAllValue(const QString &match_all_value) {
    m_match_all_value = match_all_value;
    m_match_all_value_isSet = true;
}

bool OAIRowLevelPermissionTagRule::is_match_all_value_Set() const{
    return m_match_all_value_isSet;
}

bool OAIRowLevelPermissionTagRule::is_match_all_value_Valid() const{
    return m_match_all_value_isValid;
}

bool OAIRowLevelPermissionTagRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tag_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_multi_value_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_all_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRowLevelPermissionTagRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tag_key_isValid && m_column_name_isValid && true;
}

} // namespace OpenAPI
