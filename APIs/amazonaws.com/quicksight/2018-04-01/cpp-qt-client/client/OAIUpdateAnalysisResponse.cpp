/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAnalysisResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAnalysisResponse::OAIUpdateAnalysisResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAnalysisResponse::OAIUpdateAnalysisResponse() {
    this->initializeModel();
}

OAIUpdateAnalysisResponse::~OAIUpdateAnalysisResponse() {}

void OAIUpdateAnalysisResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_update_status_isSet = false;
    m_update_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIUpdateAnalysisResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAnalysisResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_update_status_isValid = ::OpenAPI::fromJsonValue(m_update_status, json[QString("UpdateStatus")]);
    m_update_status_isSet = !json[QString("UpdateStatus")].isNull() && m_update_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIUpdateAnalysisResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAnalysisResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_update_status.isSet()) {
        obj.insert(QString("UpdateStatus"), ::OpenAPI::toJsonValue(m_update_status));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIUpdateAnalysisResponse::getArn() const {
    return m_arn;
}
void OAIUpdateAnalysisResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateAnalysisResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateAnalysisResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUpdateAnalysisResponse::getAnalysisId() const {
    return m_analysis_id;
}
void OAIUpdateAnalysisResponse::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIUpdateAnalysisResponse::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIUpdateAnalysisResponse::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

OAIResourceStatus OAIUpdateAnalysisResponse::getUpdateStatus() const {
    return m_update_status;
}
void OAIUpdateAnalysisResponse::setUpdateStatus(const OAIResourceStatus &update_status) {
    m_update_status = update_status;
    m_update_status_isSet = true;
}

bool OAIUpdateAnalysisResponse::is_update_status_Set() const{
    return m_update_status_isSet;
}

bool OAIUpdateAnalysisResponse::is_update_status_Valid() const{
    return m_update_status_isValid;
}

qint32 OAIUpdateAnalysisResponse::getStatus() const {
    return m_status;
}
void OAIUpdateAnalysisResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateAnalysisResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateAnalysisResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateAnalysisResponse::getRequestId() const {
    return m_request_id;
}
void OAIUpdateAnalysisResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIUpdateAnalysisResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIUpdateAnalysisResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIUpdateAnalysisResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAnalysisResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
