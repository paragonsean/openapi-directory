/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeEqualityFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeEqualityFilter::OAITimeEqualityFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeEqualityFilter::OAITimeEqualityFilter() {
    this->initializeModel();
}

OAITimeEqualityFilter::~OAITimeEqualityFilter() {}

void OAITimeEqualityFilter::initializeModel() {

    m_filter_id_isSet = false;
    m_filter_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;
}

void OAITimeEqualityFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeEqualityFilter::fromJsonObject(QJsonObject json) {

    m_filter_id_isValid = ::OpenAPI::fromJsonValue(m_filter_id, json[QString("FilterId")]);
    m_filter_id_isSet = !json[QString("FilterId")].isNull() && m_filter_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;
}

QString OAITimeEqualityFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeEqualityFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_id_isSet) {
        obj.insert(QString("FilterId"), ::OpenAPI::toJsonValue(m_filter_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    return obj;
}

QString OAITimeEqualityFilter::getFilterId() const {
    return m_filter_id;
}
void OAITimeEqualityFilter::setFilterId(const QString &filter_id) {
    m_filter_id = filter_id;
    m_filter_id_isSet = true;
}

bool OAITimeEqualityFilter::is_filter_id_Set() const{
    return m_filter_id_isSet;
}

bool OAITimeEqualityFilter::is_filter_id_Valid() const{
    return m_filter_id_isValid;
}

OAICategoryDrillDownFilter_Column OAITimeEqualityFilter::getColumn() const {
    return m_column;
}
void OAITimeEqualityFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAITimeEqualityFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAITimeEqualityFilter::is_column_Valid() const{
    return m_column_isValid;
}

QDateTime OAITimeEqualityFilter::getValue() const {
    return m_value;
}
void OAITimeEqualityFilter::setValue(const QDateTime &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITimeEqualityFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAITimeEqualityFilter::is_value_Valid() const{
    return m_value_isValid;
}

QString OAITimeEqualityFilter::getParameterName() const {
    return m_parameter_name;
}
void OAITimeEqualityFilter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAITimeEqualityFilter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAITimeEqualityFilter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

OAITimeGranularity OAITimeEqualityFilter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAITimeEqualityFilter::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAITimeEqualityFilter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAITimeEqualityFilter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

bool OAITimeEqualityFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeEqualityFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_id_isValid && m_column_isValid && true;
}

} // namespace OpenAPI
