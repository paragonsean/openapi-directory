/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateEmbedUrlForAnonymousUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateEmbedUrlForAnonymousUserResponse::OAIGenerateEmbedUrlForAnonymousUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateEmbedUrlForAnonymousUserResponse::OAIGenerateEmbedUrlForAnonymousUserResponse() {
    this->initializeModel();
}

OAIGenerateEmbedUrlForAnonymousUserResponse::~OAIGenerateEmbedUrlForAnonymousUserResponse() {}

void OAIGenerateEmbedUrlForAnonymousUserResponse::initializeModel() {

    m_embed_url_isSet = false;
    m_embed_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_anonymous_user_arn_isSet = false;
    m_anonymous_user_arn_isValid = false;
}

void OAIGenerateEmbedUrlForAnonymousUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateEmbedUrlForAnonymousUserResponse::fromJsonObject(QJsonObject json) {

    m_embed_url_isValid = ::OpenAPI::fromJsonValue(m_embed_url, json[QString("EmbedUrl")]);
    m_embed_url_isSet = !json[QString("EmbedUrl")].isNull() && m_embed_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_anonymous_user_arn_isValid = ::OpenAPI::fromJsonValue(m_anonymous_user_arn, json[QString("AnonymousUserArn")]);
    m_anonymous_user_arn_isSet = !json[QString("AnonymousUserArn")].isNull() && m_anonymous_user_arn_isValid;
}

QString OAIGenerateEmbedUrlForAnonymousUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateEmbedUrlForAnonymousUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_embed_url_isSet) {
        obj.insert(QString("EmbedUrl"), ::OpenAPI::toJsonValue(m_embed_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_anonymous_user_arn_isSet) {
        obj.insert(QString("AnonymousUserArn"), ::OpenAPI::toJsonValue(m_anonymous_user_arn));
    }
    return obj;
}

QString OAIGenerateEmbedUrlForAnonymousUserResponse::getEmbedUrl() const {
    return m_embed_url;
}
void OAIGenerateEmbedUrlForAnonymousUserResponse::setEmbedUrl(const QString &embed_url) {
    m_embed_url = embed_url;
    m_embed_url_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::is_embed_url_Set() const{
    return m_embed_url_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::is_embed_url_Valid() const{
    return m_embed_url_isValid;
}

qint32 OAIGenerateEmbedUrlForAnonymousUserResponse::getStatus() const {
    return m_status;
}
void OAIGenerateEmbedUrlForAnonymousUserResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGenerateEmbedUrlForAnonymousUserResponse::getRequestId() const {
    return m_request_id;
}
void OAIGenerateEmbedUrlForAnonymousUserResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIGenerateEmbedUrlForAnonymousUserResponse::getAnonymousUserArn() const {
    return m_anonymous_user_arn;
}
void OAIGenerateEmbedUrlForAnonymousUserResponse::setAnonymousUserArn(const QString &anonymous_user_arn) {
    m_anonymous_user_arn = anonymous_user_arn;
    m_anonymous_user_arn_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::is_anonymous_user_arn_Set() const{
    return m_anonymous_user_arn_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::is_anonymous_user_arn_Valid() const{
    return m_anonymous_user_arn_isValid;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embed_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anonymous_user_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateEmbedUrlForAnonymousUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_embed_url_isValid && m_status_isValid && m_request_id_isValid && m_anonymous_user_arn_isValid && true;
}

} // namespace OpenAPI
