/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetBundleImportSourceDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetBundleImportSourceDescription::OAIAssetBundleImportSourceDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetBundleImportSourceDescription::OAIAssetBundleImportSourceDescription() {
    this->initializeModel();
}

OAIAssetBundleImportSourceDescription::~OAIAssetBundleImportSourceDescription() {}

void OAIAssetBundleImportSourceDescription::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_s3_uri_isSet = false;
    m_s3_uri_isValid = false;
}

void OAIAssetBundleImportSourceDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetBundleImportSourceDescription::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("Body")]);
    m_body_isSet = !json[QString("Body")].isNull() && m_body_isValid;

    m_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_s3_uri, json[QString("S3Uri")]);
    m_s3_uri_isSet = !json[QString("S3Uri")].isNull() && m_s3_uri_isValid;
}

QString OAIAssetBundleImportSourceDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetBundleImportSourceDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("Body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_s3_uri_isSet) {
        obj.insert(QString("S3Uri"), ::OpenAPI::toJsonValue(m_s3_uri));
    }
    return obj;
}

QString OAIAssetBundleImportSourceDescription::getBody() const {
    return m_body;
}
void OAIAssetBundleImportSourceDescription::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIAssetBundleImportSourceDescription::is_body_Set() const{
    return m_body_isSet;
}

bool OAIAssetBundleImportSourceDescription::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIAssetBundleImportSourceDescription::getS3Uri() const {
    return m_s3_uri;
}
void OAIAssetBundleImportSourceDescription::setS3Uri(const QString &s3_uri) {
    m_s3_uri = s3_uri;
    m_s3_uri_isSet = true;
}

bool OAIAssetBundleImportSourceDescription::is_s3_uri_Set() const{
    return m_s3_uri_isSet;
}

bool OAIAssetBundleImportSourceDescription::is_s3_uri_Valid() const{
    return m_s3_uri_isValid;
}

bool OAIAssetBundleImportSourceDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetBundleImportSourceDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
