/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialCoordinateBounds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialCoordinateBounds::OAIGeospatialCoordinateBounds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialCoordinateBounds::OAIGeospatialCoordinateBounds() {
    this->initializeModel();
}

OAIGeospatialCoordinateBounds::~OAIGeospatialCoordinateBounds() {}

void OAIGeospatialCoordinateBounds::initializeModel() {

    m_north_isSet = false;
    m_north_isValid = false;

    m_south_isSet = false;
    m_south_isValid = false;

    m_west_isSet = false;
    m_west_isValid = false;

    m_east_isSet = false;
    m_east_isValid = false;
}

void OAIGeospatialCoordinateBounds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialCoordinateBounds::fromJsonObject(QJsonObject json) {

    m_north_isValid = ::OpenAPI::fromJsonValue(m_north, json[QString("North")]);
    m_north_isSet = !json[QString("North")].isNull() && m_north_isValid;

    m_south_isValid = ::OpenAPI::fromJsonValue(m_south, json[QString("South")]);
    m_south_isSet = !json[QString("South")].isNull() && m_south_isValid;

    m_west_isValid = ::OpenAPI::fromJsonValue(m_west, json[QString("West")]);
    m_west_isSet = !json[QString("West")].isNull() && m_west_isValid;

    m_east_isValid = ::OpenAPI::fromJsonValue(m_east, json[QString("East")]);
    m_east_isSet = !json[QString("East")].isNull() && m_east_isValid;
}

QString OAIGeospatialCoordinateBounds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialCoordinateBounds::asJsonObject() const {
    QJsonObject obj;
    if (m_north_isSet) {
        obj.insert(QString("North"), ::OpenAPI::toJsonValue(m_north));
    }
    if (m_south_isSet) {
        obj.insert(QString("South"), ::OpenAPI::toJsonValue(m_south));
    }
    if (m_west_isSet) {
        obj.insert(QString("West"), ::OpenAPI::toJsonValue(m_west));
    }
    if (m_east_isSet) {
        obj.insert(QString("East"), ::OpenAPI::toJsonValue(m_east));
    }
    return obj;
}

double OAIGeospatialCoordinateBounds::getNorth() const {
    return m_north;
}
void OAIGeospatialCoordinateBounds::setNorth(const double &north) {
    m_north = north;
    m_north_isSet = true;
}

bool OAIGeospatialCoordinateBounds::is_north_Set() const{
    return m_north_isSet;
}

bool OAIGeospatialCoordinateBounds::is_north_Valid() const{
    return m_north_isValid;
}

double OAIGeospatialCoordinateBounds::getSouth() const {
    return m_south;
}
void OAIGeospatialCoordinateBounds::setSouth(const double &south) {
    m_south = south;
    m_south_isSet = true;
}

bool OAIGeospatialCoordinateBounds::is_south_Set() const{
    return m_south_isSet;
}

bool OAIGeospatialCoordinateBounds::is_south_Valid() const{
    return m_south_isValid;
}

double OAIGeospatialCoordinateBounds::getWest() const {
    return m_west;
}
void OAIGeospatialCoordinateBounds::setWest(const double &west) {
    m_west = west;
    m_west_isSet = true;
}

bool OAIGeospatialCoordinateBounds::is_west_Set() const{
    return m_west_isSet;
}

bool OAIGeospatialCoordinateBounds::is_west_Valid() const{
    return m_west_isValid;
}

double OAIGeospatialCoordinateBounds::getEast() const {
    return m_east;
}
void OAIGeospatialCoordinateBounds::setEast(const double &east) {
    m_east = east;
    m_east_isSet = true;
}

bool OAIGeospatialCoordinateBounds::is_east_Set() const{
    return m_east_isSet;
}

bool OAIGeospatialCoordinateBounds::is_east_Valid() const{
    return m_east_isValid;
}

bool OAIGeospatialCoordinateBounds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_north_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_south_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_west_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_east_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialCoordinateBounds::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_north_isValid && m_south_isValid && m_west_isValid && m_east_isValid && true;
}

} // namespace OpenAPI
