/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRadarChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRadarChartConfiguration::OAIRadarChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRadarChartConfiguration::OAIRadarChartConfiguration() {
    this->initializeModel();
}

OAIRadarChartConfiguration::~OAIRadarChartConfiguration() {}

void OAIRadarChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_base_series_settings_isSet = false;
    m_base_series_settings_isValid = false;

    m_start_angle_isSet = false;
    m_start_angle_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;

    m_alternate_band_colors_visibility_isSet = false;
    m_alternate_band_colors_visibility_isValid = false;

    m_alternate_band_even_color_isSet = false;
    m_alternate_band_even_color_isValid = false;

    m_alternate_band_odd_color_isSet = false;
    m_alternate_band_odd_color_isValid = false;

    m_category_axis_isSet = false;
    m_category_axis_isValid = false;

    m_category_label_options_isSet = false;
    m_category_label_options_isValid = false;

    m_color_axis_isSet = false;
    m_color_axis_isValid = false;

    m_color_label_options_isSet = false;
    m_color_label_options_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_axes_range_scale_isSet = false;
    m_axes_range_scale_isValid = false;
}

void OAIRadarChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRadarChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("Shape")]);
    m_shape_isSet = !json[QString("Shape")].isNull() && m_shape_isValid;

    m_base_series_settings_isValid = ::OpenAPI::fromJsonValue(m_base_series_settings, json[QString("BaseSeriesSettings")]);
    m_base_series_settings_isSet = !json[QString("BaseSeriesSettings")].isNull() && m_base_series_settings_isValid;

    m_start_angle_isValid = ::OpenAPI::fromJsonValue(m_start_angle, json[QString("StartAngle")]);
    m_start_angle_isSet = !json[QString("StartAngle")].isNull() && m_start_angle_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;

    m_alternate_band_colors_visibility_isValid = ::OpenAPI::fromJsonValue(m_alternate_band_colors_visibility, json[QString("AlternateBandColorsVisibility")]);
    m_alternate_band_colors_visibility_isSet = !json[QString("AlternateBandColorsVisibility")].isNull() && m_alternate_band_colors_visibility_isValid;

    m_alternate_band_even_color_isValid = ::OpenAPI::fromJsonValue(m_alternate_band_even_color, json[QString("AlternateBandEvenColor")]);
    m_alternate_band_even_color_isSet = !json[QString("AlternateBandEvenColor")].isNull() && m_alternate_band_even_color_isValid;

    m_alternate_band_odd_color_isValid = ::OpenAPI::fromJsonValue(m_alternate_band_odd_color, json[QString("AlternateBandOddColor")]);
    m_alternate_band_odd_color_isSet = !json[QString("AlternateBandOddColor")].isNull() && m_alternate_band_odd_color_isValid;

    m_category_axis_isValid = ::OpenAPI::fromJsonValue(m_category_axis, json[QString("CategoryAxis")]);
    m_category_axis_isSet = !json[QString("CategoryAxis")].isNull() && m_category_axis_isValid;

    m_category_label_options_isValid = ::OpenAPI::fromJsonValue(m_category_label_options, json[QString("CategoryLabelOptions")]);
    m_category_label_options_isSet = !json[QString("CategoryLabelOptions")].isNull() && m_category_label_options_isValid;

    m_color_axis_isValid = ::OpenAPI::fromJsonValue(m_color_axis, json[QString("ColorAxis")]);
    m_color_axis_isSet = !json[QString("ColorAxis")].isNull() && m_color_axis_isValid;

    m_color_label_options_isValid = ::OpenAPI::fromJsonValue(m_color_label_options, json[QString("ColorLabelOptions")]);
    m_color_label_options_isSet = !json[QString("ColorLabelOptions")].isNull() && m_color_label_options_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_axes_range_scale_isValid = ::OpenAPI::fromJsonValue(m_axes_range_scale, json[QString("AxesRangeScale")]);
    m_axes_range_scale_isSet = !json[QString("AxesRangeScale")].isNull() && m_axes_range_scale_isValid;
}

QString OAIRadarChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRadarChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_shape.isSet()) {
        obj.insert(QString("Shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_base_series_settings.isSet()) {
        obj.insert(QString("BaseSeriesSettings"), ::OpenAPI::toJsonValue(m_base_series_settings));
    }
    if (m_start_angle_isSet) {
        obj.insert(QString("StartAngle"), ::OpenAPI::toJsonValue(m_start_angle));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    if (m_alternate_band_colors_visibility.isSet()) {
        obj.insert(QString("AlternateBandColorsVisibility"), ::OpenAPI::toJsonValue(m_alternate_band_colors_visibility));
    }
    if (m_alternate_band_even_color_isSet) {
        obj.insert(QString("AlternateBandEvenColor"), ::OpenAPI::toJsonValue(m_alternate_band_even_color));
    }
    if (m_alternate_band_odd_color_isSet) {
        obj.insert(QString("AlternateBandOddColor"), ::OpenAPI::toJsonValue(m_alternate_band_odd_color));
    }
    if (m_category_axis.isSet()) {
        obj.insert(QString("CategoryAxis"), ::OpenAPI::toJsonValue(m_category_axis));
    }
    if (m_category_label_options.isSet()) {
        obj.insert(QString("CategoryLabelOptions"), ::OpenAPI::toJsonValue(m_category_label_options));
    }
    if (m_color_axis.isSet()) {
        obj.insert(QString("ColorAxis"), ::OpenAPI::toJsonValue(m_color_axis));
    }
    if (m_color_label_options.isSet()) {
        obj.insert(QString("ColorLabelOptions"), ::OpenAPI::toJsonValue(m_color_label_options));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_axes_range_scale.isSet()) {
        obj.insert(QString("AxesRangeScale"), ::OpenAPI::toJsonValue(m_axes_range_scale));
    }
    return obj;
}

OAIRadarChartConfiguration_FieldWells OAIRadarChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIRadarChartConfiguration::setFieldWells(const OAIRadarChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIRadarChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIRadarChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIRadarChartConfiguration_SortConfiguration OAIRadarChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIRadarChartConfiguration::setSortConfiguration(const OAIRadarChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIRadarChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIRadarChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIRadarChartShape OAIRadarChartConfiguration::getShape() const {
    return m_shape;
}
void OAIRadarChartConfiguration::setShape(const OAIRadarChartShape &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIRadarChartConfiguration::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIRadarChartConfiguration::is_shape_Valid() const{
    return m_shape_isValid;
}

OAIRadarChartConfiguration_BaseSeriesSettings OAIRadarChartConfiguration::getBaseSeriesSettings() const {
    return m_base_series_settings;
}
void OAIRadarChartConfiguration::setBaseSeriesSettings(const OAIRadarChartConfiguration_BaseSeriesSettings &base_series_settings) {
    m_base_series_settings = base_series_settings;
    m_base_series_settings_isSet = true;
}

bool OAIRadarChartConfiguration::is_base_series_settings_Set() const{
    return m_base_series_settings_isSet;
}

bool OAIRadarChartConfiguration::is_base_series_settings_Valid() const{
    return m_base_series_settings_isValid;
}

double OAIRadarChartConfiguration::getStartAngle() const {
    return m_start_angle;
}
void OAIRadarChartConfiguration::setStartAngle(const double &start_angle) {
    m_start_angle = start_angle;
    m_start_angle_isSet = true;
}

bool OAIRadarChartConfiguration::is_start_angle_Set() const{
    return m_start_angle_isSet;
}

bool OAIRadarChartConfiguration::is_start_angle_Valid() const{
    return m_start_angle_isValid;
}

OAIBarChartConfiguration_VisualPalette OAIRadarChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIRadarChartConfiguration::setVisualPalette(const OAIBarChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIRadarChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIRadarChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

OAIVisibility OAIRadarChartConfiguration::getAlternateBandColorsVisibility() const {
    return m_alternate_band_colors_visibility;
}
void OAIRadarChartConfiguration::setAlternateBandColorsVisibility(const OAIVisibility &alternate_band_colors_visibility) {
    m_alternate_band_colors_visibility = alternate_band_colors_visibility;
    m_alternate_band_colors_visibility_isSet = true;
}

bool OAIRadarChartConfiguration::is_alternate_band_colors_visibility_Set() const{
    return m_alternate_band_colors_visibility_isSet;
}

bool OAIRadarChartConfiguration::is_alternate_band_colors_visibility_Valid() const{
    return m_alternate_band_colors_visibility_isValid;
}

QString OAIRadarChartConfiguration::getAlternateBandEvenColor() const {
    return m_alternate_band_even_color;
}
void OAIRadarChartConfiguration::setAlternateBandEvenColor(const QString &alternate_band_even_color) {
    m_alternate_band_even_color = alternate_band_even_color;
    m_alternate_band_even_color_isSet = true;
}

bool OAIRadarChartConfiguration::is_alternate_band_even_color_Set() const{
    return m_alternate_band_even_color_isSet;
}

bool OAIRadarChartConfiguration::is_alternate_band_even_color_Valid() const{
    return m_alternate_band_even_color_isValid;
}

QString OAIRadarChartConfiguration::getAlternateBandOddColor() const {
    return m_alternate_band_odd_color;
}
void OAIRadarChartConfiguration::setAlternateBandOddColor(const QString &alternate_band_odd_color) {
    m_alternate_band_odd_color = alternate_band_odd_color;
    m_alternate_band_odd_color_isSet = true;
}

bool OAIRadarChartConfiguration::is_alternate_band_odd_color_Set() const{
    return m_alternate_band_odd_color_isSet;
}

bool OAIRadarChartConfiguration::is_alternate_band_odd_color_Valid() const{
    return m_alternate_band_odd_color_isValid;
}

OAIRadarChartConfiguration_CategoryAxis OAIRadarChartConfiguration::getCategoryAxis() const {
    return m_category_axis;
}
void OAIRadarChartConfiguration::setCategoryAxis(const OAIRadarChartConfiguration_CategoryAxis &category_axis) {
    m_category_axis = category_axis;
    m_category_axis_isSet = true;
}

bool OAIRadarChartConfiguration::is_category_axis_Set() const{
    return m_category_axis_isSet;
}

bool OAIRadarChartConfiguration::is_category_axis_Valid() const{
    return m_category_axis_isValid;
}

OAIRadarChartConfiguration_CategoryLabelOptions OAIRadarChartConfiguration::getCategoryLabelOptions() const {
    return m_category_label_options;
}
void OAIRadarChartConfiguration::setCategoryLabelOptions(const OAIRadarChartConfiguration_CategoryLabelOptions &category_label_options) {
    m_category_label_options = category_label_options;
    m_category_label_options_isSet = true;
}

bool OAIRadarChartConfiguration::is_category_label_options_Set() const{
    return m_category_label_options_isSet;
}

bool OAIRadarChartConfiguration::is_category_label_options_Valid() const{
    return m_category_label_options_isValid;
}

OAIRadarChartConfiguration_ColorAxis OAIRadarChartConfiguration::getColorAxis() const {
    return m_color_axis;
}
void OAIRadarChartConfiguration::setColorAxis(const OAIRadarChartConfiguration_ColorAxis &color_axis) {
    m_color_axis = color_axis;
    m_color_axis_isSet = true;
}

bool OAIRadarChartConfiguration::is_color_axis_Set() const{
    return m_color_axis_isSet;
}

bool OAIRadarChartConfiguration::is_color_axis_Valid() const{
    return m_color_axis_isValid;
}

OAIRadarChartConfiguration_ColorLabelOptions OAIRadarChartConfiguration::getColorLabelOptions() const {
    return m_color_label_options;
}
void OAIRadarChartConfiguration::setColorLabelOptions(const OAIRadarChartConfiguration_ColorLabelOptions &color_label_options) {
    m_color_label_options = color_label_options;
    m_color_label_options_isSet = true;
}

bool OAIRadarChartConfiguration::is_color_label_options_Set() const{
    return m_color_label_options_isSet;
}

bool OAIRadarChartConfiguration::is_color_label_options_Valid() const{
    return m_color_label_options_isValid;
}

OAIBarChartConfiguration_Legend OAIRadarChartConfiguration::getLegend() const {
    return m_legend;
}
void OAIRadarChartConfiguration::setLegend(const OAIBarChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIRadarChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIRadarChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIRadarChartAxesRangeScale OAIRadarChartConfiguration::getAxesRangeScale() const {
    return m_axes_range_scale;
}
void OAIRadarChartConfiguration::setAxesRangeScale(const OAIRadarChartAxesRangeScale &axes_range_scale) {
    m_axes_range_scale = axes_range_scale;
    m_axes_range_scale_isSet = true;
}

bool OAIRadarChartConfiguration::is_axes_range_scale_Set() const{
    return m_axes_range_scale_isSet;
}

bool OAIRadarChartConfiguration::is_axes_range_scale_Valid() const{
    return m_axes_range_scale_isValid;
}

bool OAIRadarChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_series_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_band_colors_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_band_even_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_band_odd_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axes_range_scale.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRadarChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
