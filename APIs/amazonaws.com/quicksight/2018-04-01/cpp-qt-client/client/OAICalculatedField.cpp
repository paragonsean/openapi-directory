/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculatedField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculatedField::OAICalculatedField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculatedField::OAICalculatedField() {
    this->initializeModel();
}

OAICalculatedField::~OAICalculatedField() {}

void OAICalculatedField::initializeModel() {

    m_data_set_identifier_isSet = false;
    m_data_set_identifier_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;
}

void OAICalculatedField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculatedField::fromJsonObject(QJsonObject json) {

    m_data_set_identifier_isValid = ::OpenAPI::fromJsonValue(m_data_set_identifier, json[QString("DataSetIdentifier")]);
    m_data_set_identifier_isSet = !json[QString("DataSetIdentifier")].isNull() && m_data_set_identifier_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;
}

QString OAICalculatedField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculatedField::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_identifier_isSet) {
        obj.insert(QString("DataSetIdentifier"), ::OpenAPI::toJsonValue(m_data_set_identifier));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    return obj;
}

QString OAICalculatedField::getDataSetIdentifier() const {
    return m_data_set_identifier;
}
void OAICalculatedField::setDataSetIdentifier(const QString &data_set_identifier) {
    m_data_set_identifier = data_set_identifier;
    m_data_set_identifier_isSet = true;
}

bool OAICalculatedField::is_data_set_identifier_Set() const{
    return m_data_set_identifier_isSet;
}

bool OAICalculatedField::is_data_set_identifier_Valid() const{
    return m_data_set_identifier_isValid;
}

QString OAICalculatedField::getName() const {
    return m_name;
}
void OAICalculatedField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICalculatedField::is_name_Set() const{
    return m_name_isSet;
}

bool OAICalculatedField::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICalculatedField::getExpression() const {
    return m_expression;
}
void OAICalculatedField::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAICalculatedField::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAICalculatedField::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAICalculatedField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculatedField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_identifier_isValid && m_name_isValid && m_expression_isValid && true;
}

} // namespace OpenAPI
