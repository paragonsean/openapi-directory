/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISankeyDiagramSortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISankeyDiagramSortConfiguration::OAISankeyDiagramSortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISankeyDiagramSortConfiguration::OAISankeyDiagramSortConfiguration() {
    this->initializeModel();
}

OAISankeyDiagramSortConfiguration::~OAISankeyDiagramSortConfiguration() {}

void OAISankeyDiagramSortConfiguration::initializeModel() {

    m_weight_sort_isSet = false;
    m_weight_sort_isValid = false;

    m_source_items_limit_isSet = false;
    m_source_items_limit_isValid = false;

    m_destination_items_limit_isSet = false;
    m_destination_items_limit_isValid = false;
}

void OAISankeyDiagramSortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISankeyDiagramSortConfiguration::fromJsonObject(QJsonObject json) {

    m_weight_sort_isValid = ::OpenAPI::fromJsonValue(m_weight_sort, json[QString("WeightSort")]);
    m_weight_sort_isSet = !json[QString("WeightSort")].isNull() && m_weight_sort_isValid;

    m_source_items_limit_isValid = ::OpenAPI::fromJsonValue(m_source_items_limit, json[QString("SourceItemsLimit")]);
    m_source_items_limit_isSet = !json[QString("SourceItemsLimit")].isNull() && m_source_items_limit_isValid;

    m_destination_items_limit_isValid = ::OpenAPI::fromJsonValue(m_destination_items_limit, json[QString("DestinationItemsLimit")]);
    m_destination_items_limit_isSet = !json[QString("DestinationItemsLimit")].isNull() && m_destination_items_limit_isValid;
}

QString OAISankeyDiagramSortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISankeyDiagramSortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_weight_sort.isSet()) {
        obj.insert(QString("WeightSort"), ::OpenAPI::toJsonValue(m_weight_sort));
    }
    if (m_source_items_limit.isSet()) {
        obj.insert(QString("SourceItemsLimit"), ::OpenAPI::toJsonValue(m_source_items_limit));
    }
    if (m_destination_items_limit.isSet()) {
        obj.insert(QString("DestinationItemsLimit"), ::OpenAPI::toJsonValue(m_destination_items_limit));
    }
    return obj;
}

QList OAISankeyDiagramSortConfiguration::getWeightSort() const {
    return m_weight_sort;
}
void OAISankeyDiagramSortConfiguration::setWeightSort(const QList &weight_sort) {
    m_weight_sort = weight_sort;
    m_weight_sort_isSet = true;
}

bool OAISankeyDiagramSortConfiguration::is_weight_sort_Set() const{
    return m_weight_sort_isSet;
}

bool OAISankeyDiagramSortConfiguration::is_weight_sort_Valid() const{
    return m_weight_sort_isValid;
}

OAISankeyDiagramSortConfiguration_SourceItemsLimit OAISankeyDiagramSortConfiguration::getSourceItemsLimit() const {
    return m_source_items_limit;
}
void OAISankeyDiagramSortConfiguration::setSourceItemsLimit(const OAISankeyDiagramSortConfiguration_SourceItemsLimit &source_items_limit) {
    m_source_items_limit = source_items_limit;
    m_source_items_limit_isSet = true;
}

bool OAISankeyDiagramSortConfiguration::is_source_items_limit_Set() const{
    return m_source_items_limit_isSet;
}

bool OAISankeyDiagramSortConfiguration::is_source_items_limit_Valid() const{
    return m_source_items_limit_isValid;
}

OAISankeyDiagramSortConfiguration_DestinationItemsLimit OAISankeyDiagramSortConfiguration::getDestinationItemsLimit() const {
    return m_destination_items_limit;
}
void OAISankeyDiagramSortConfiguration::setDestinationItemsLimit(const OAISankeyDiagramSortConfiguration_DestinationItemsLimit &destination_items_limit) {
    m_destination_items_limit = destination_items_limit;
    m_destination_items_limit_isSet = true;
}

bool OAISankeyDiagramSortConfiguration::is_destination_items_limit_Set() const{
    return m_destination_items_limit_isSet;
}

bool OAISankeyDiagramSortConfiguration::is_destination_items_limit_Valid() const{
    return m_destination_items_limit_isValid;
}

bool OAISankeyDiagramSortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_weight_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_items_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_items_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISankeyDiagramSortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
