/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITotalAggregationComputation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITotalAggregationComputation::OAITotalAggregationComputation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITotalAggregationComputation::OAITotalAggregationComputation() {
    this->initializeModel();
}

OAITotalAggregationComputation::~OAITotalAggregationComputation() {}

void OAITotalAggregationComputation::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITotalAggregationComputation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITotalAggregationComputation::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAITotalAggregationComputation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITotalAggregationComputation::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAITotalAggregationComputation::getComputationId() const {
    return m_computation_id;
}
void OAITotalAggregationComputation::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAITotalAggregationComputation::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAITotalAggregationComputation::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAITotalAggregationComputation::getName() const {
    return m_name;
}
void OAITotalAggregationComputation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITotalAggregationComputation::is_name_Set() const{
    return m_name_isSet;
}

bool OAITotalAggregationComputation::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomRankedComputation_Value OAITotalAggregationComputation::getValue() const {
    return m_value;
}
void OAITotalAggregationComputation::setValue(const OAITopBottomRankedComputation_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITotalAggregationComputation::is_value_Set() const{
    return m_value_isSet;
}

bool OAITotalAggregationComputation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITotalAggregationComputation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITotalAggregationComputation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
