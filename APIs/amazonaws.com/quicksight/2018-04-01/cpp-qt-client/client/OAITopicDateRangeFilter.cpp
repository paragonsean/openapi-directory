/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicDateRangeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicDateRangeFilter::OAITopicDateRangeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicDateRangeFilter::OAITopicDateRangeFilter() {
    this->initializeModel();
}

OAITopicDateRangeFilter::~OAITopicDateRangeFilter() {}

void OAITopicDateRangeFilter::initializeModel() {

    m_inclusive_isSet = false;
    m_inclusive_isValid = false;

    m_constant_isSet = false;
    m_constant_isValid = false;
}

void OAITopicDateRangeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicDateRangeFilter::fromJsonObject(QJsonObject json) {

    m_inclusive_isValid = ::OpenAPI::fromJsonValue(m_inclusive, json[QString("Inclusive")]);
    m_inclusive_isSet = !json[QString("Inclusive")].isNull() && m_inclusive_isValid;

    m_constant_isValid = ::OpenAPI::fromJsonValue(m_constant, json[QString("Constant")]);
    m_constant_isSet = !json[QString("Constant")].isNull() && m_constant_isValid;
}

QString OAITopicDateRangeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicDateRangeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_inclusive_isSet) {
        obj.insert(QString("Inclusive"), ::OpenAPI::toJsonValue(m_inclusive));
    }
    if (m_constant.isSet()) {
        obj.insert(QString("Constant"), ::OpenAPI::toJsonValue(m_constant));
    }
    return obj;
}

bool OAITopicDateRangeFilter::getInclusive() const {
    return m_inclusive;
}
void OAITopicDateRangeFilter::setInclusive(const bool &inclusive) {
    m_inclusive = inclusive;
    m_inclusive_isSet = true;
}

bool OAITopicDateRangeFilter::is_inclusive_Set() const{
    return m_inclusive_isSet;
}

bool OAITopicDateRangeFilter::is_inclusive_Valid() const{
    return m_inclusive_isValid;
}

OAITopicDateRangeFilter_Constant OAITopicDateRangeFilter::getConstant() const {
    return m_constant;
}
void OAITopicDateRangeFilter::setConstant(const OAITopicDateRangeFilter_Constant &constant) {
    m_constant = constant;
    m_constant_isSet = true;
}

bool OAITopicDateRangeFilter::is_constant_Set() const{
    return m_constant_isSet;
}

bool OAITopicDateRangeFilter::is_constant_Valid() const{
    return m_constant_isValid;
}

bool OAITopicDateRangeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constant.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicDateRangeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
