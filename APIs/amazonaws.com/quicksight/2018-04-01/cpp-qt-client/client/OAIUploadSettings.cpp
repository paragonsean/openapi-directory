/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadSettings::OAIUploadSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadSettings::OAIUploadSettings() {
    this->initializeModel();
}

OAIUploadSettings::~OAIUploadSettings() {}

void OAIUploadSettings::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_start_from_row_isSet = false;
    m_start_from_row_isValid = false;

    m_contains_header_isSet = false;
    m_contains_header_isValid = false;

    m_text_qualifier_isSet = false;
    m_text_qualifier_isValid = false;

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;
}

void OAIUploadSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadSettings::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_start_from_row_isValid = ::OpenAPI::fromJsonValue(m_start_from_row, json[QString("StartFromRow")]);
    m_start_from_row_isSet = !json[QString("StartFromRow")].isNull() && m_start_from_row_isValid;

    m_contains_header_isValid = ::OpenAPI::fromJsonValue(m_contains_header, json[QString("ContainsHeader")]);
    m_contains_header_isSet = !json[QString("ContainsHeader")].isNull() && m_contains_header_isValid;

    m_text_qualifier_isValid = ::OpenAPI::fromJsonValue(m_text_qualifier, json[QString("TextQualifier")]);
    m_text_qualifier_isSet = !json[QString("TextQualifier")].isNull() && m_text_qualifier_isValid;

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("Delimiter")]);
    m_delimiter_isSet = !json[QString("Delimiter")].isNull() && m_delimiter_isValid;
}

QString OAIUploadSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_start_from_row_isSet) {
        obj.insert(QString("StartFromRow"), ::OpenAPI::toJsonValue(m_start_from_row));
    }
    if (m_contains_header_isSet) {
        obj.insert(QString("ContainsHeader"), ::OpenAPI::toJsonValue(m_contains_header));
    }
    if (m_text_qualifier.isSet()) {
        obj.insert(QString("TextQualifier"), ::OpenAPI::toJsonValue(m_text_qualifier));
    }
    if (m_delimiter_isSet) {
        obj.insert(QString("Delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    return obj;
}

OAIFileFormat OAIUploadSettings::getFormat() const {
    return m_format;
}
void OAIUploadSettings::setFormat(const OAIFileFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIUploadSettings::is_format_Set() const{
    return m_format_isSet;
}

bool OAIUploadSettings::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAIUploadSettings::getStartFromRow() const {
    return m_start_from_row;
}
void OAIUploadSettings::setStartFromRow(const qint32 &start_from_row) {
    m_start_from_row = start_from_row;
    m_start_from_row_isSet = true;
}

bool OAIUploadSettings::is_start_from_row_Set() const{
    return m_start_from_row_isSet;
}

bool OAIUploadSettings::is_start_from_row_Valid() const{
    return m_start_from_row_isValid;
}

bool OAIUploadSettings::getContainsHeader() const {
    return m_contains_header;
}
void OAIUploadSettings::setContainsHeader(const bool &contains_header) {
    m_contains_header = contains_header;
    m_contains_header_isSet = true;
}

bool OAIUploadSettings::is_contains_header_Set() const{
    return m_contains_header_isSet;
}

bool OAIUploadSettings::is_contains_header_Valid() const{
    return m_contains_header_isValid;
}

OAITextQualifier OAIUploadSettings::getTextQualifier() const {
    return m_text_qualifier;
}
void OAIUploadSettings::setTextQualifier(const OAITextQualifier &text_qualifier) {
    m_text_qualifier = text_qualifier;
    m_text_qualifier_isSet = true;
}

bool OAIUploadSettings::is_text_qualifier_Set() const{
    return m_text_qualifier_isSet;
}

bool OAIUploadSettings::is_text_qualifier_Valid() const{
    return m_text_qualifier_isValid;
}

QString OAIUploadSettings::getDelimiter() const {
    return m_delimiter;
}
void OAIUploadSettings::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAIUploadSettings::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAIUploadSettings::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

bool OAIUploadSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_from_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_qualifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
