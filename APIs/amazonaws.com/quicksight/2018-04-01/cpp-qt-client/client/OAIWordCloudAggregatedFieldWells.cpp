/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordCloudAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordCloudAggregatedFieldWells::OAIWordCloudAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordCloudAggregatedFieldWells::OAIWordCloudAggregatedFieldWells() {
    this->initializeModel();
}

OAIWordCloudAggregatedFieldWells::~OAIWordCloudAggregatedFieldWells() {}

void OAIWordCloudAggregatedFieldWells::initializeModel() {

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIWordCloudAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordCloudAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("GroupBy")]);
    m_group_by_isSet = !json[QString("GroupBy")].isNull() && m_group_by_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;
}

QString OAIWordCloudAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordCloudAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_group_by.isSet()) {
        obj.insert(QString("GroupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_size.isSet()) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QList OAIWordCloudAggregatedFieldWells::getGroupBy() const {
    return m_group_by;
}
void OAIWordCloudAggregatedFieldWells::setGroupBy(const QList &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIWordCloudAggregatedFieldWells::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIWordCloudAggregatedFieldWells::is_group_by_Valid() const{
    return m_group_by_isValid;
}

QList OAIWordCloudAggregatedFieldWells::getSize() const {
    return m_size;
}
void OAIWordCloudAggregatedFieldWells::setSize(const QList &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIWordCloudAggregatedFieldWells::is_size_Set() const{
    return m_size_isSet;
}

bool OAIWordCloudAggregatedFieldWells::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIWordCloudAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordCloudAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
