/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIAMPolicyAssignment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIAMPolicyAssignment_request::OAICreateIAMPolicyAssignment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIAMPolicyAssignment_request::OAICreateIAMPolicyAssignment_request() {
    this->initializeModel();
}

OAICreateIAMPolicyAssignment_request::~OAICreateIAMPolicyAssignment_request() {}

void OAICreateIAMPolicyAssignment_request::initializeModel() {

    m_assignment_name_isSet = false;
    m_assignment_name_isValid = false;

    m_assignment_status_isSet = false;
    m_assignment_status_isValid = false;

    m_policy_arn_isSet = false;
    m_policy_arn_isValid = false;

    m_identities_isSet = false;
    m_identities_isValid = false;
}

void OAICreateIAMPolicyAssignment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIAMPolicyAssignment_request::fromJsonObject(QJsonObject json) {

    m_assignment_name_isValid = ::OpenAPI::fromJsonValue(m_assignment_name, json[QString("AssignmentName")]);
    m_assignment_name_isSet = !json[QString("AssignmentName")].isNull() && m_assignment_name_isValid;

    m_assignment_status_isValid = ::OpenAPI::fromJsonValue(m_assignment_status, json[QString("AssignmentStatus")]);
    m_assignment_status_isSet = !json[QString("AssignmentStatus")].isNull() && m_assignment_status_isValid;

    m_policy_arn_isValid = ::OpenAPI::fromJsonValue(m_policy_arn, json[QString("PolicyArn")]);
    m_policy_arn_isSet = !json[QString("PolicyArn")].isNull() && m_policy_arn_isValid;

    if(json["Identities"].isObject()){
        auto varmap = json["Identities"].toObject().toVariantMap();
        m_identities_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_identities_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_identities_isSet &= !jval.isNull() && m_identities_isValid;
                m_identities.insert(m_identities.end(), val, item);
            }
        }
    }
}

QString OAICreateIAMPolicyAssignment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIAMPolicyAssignment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_name_isSet) {
        obj.insert(QString("AssignmentName"), ::OpenAPI::toJsonValue(m_assignment_name));
    }
    if (m_assignment_status_isSet) {
        obj.insert(QString("AssignmentStatus"), ::OpenAPI::toJsonValue(m_assignment_status));
    }
    if (m_policy_arn_isSet) {
        obj.insert(QString("PolicyArn"), ::OpenAPI::toJsonValue(m_policy_arn));
    }
    if (m_identities.size() > 0) {
        
        obj.insert(QString("Identities"), toJsonValue(m_identities));
    }
    return obj;
}

QString OAICreateIAMPolicyAssignment_request::getAssignmentName() const {
    return m_assignment_name;
}
void OAICreateIAMPolicyAssignment_request::setAssignmentName(const QString &assignment_name) {
    m_assignment_name = assignment_name;
    m_assignment_name_isSet = true;
}

bool OAICreateIAMPolicyAssignment_request::is_assignment_name_Set() const{
    return m_assignment_name_isSet;
}

bool OAICreateIAMPolicyAssignment_request::is_assignment_name_Valid() const{
    return m_assignment_name_isValid;
}

QString OAICreateIAMPolicyAssignment_request::getAssignmentStatus() const {
    return m_assignment_status;
}
void OAICreateIAMPolicyAssignment_request::setAssignmentStatus(const QString &assignment_status) {
    m_assignment_status = assignment_status;
    m_assignment_status_isSet = true;
}

bool OAICreateIAMPolicyAssignment_request::is_assignment_status_Set() const{
    return m_assignment_status_isSet;
}

bool OAICreateIAMPolicyAssignment_request::is_assignment_status_Valid() const{
    return m_assignment_status_isValid;
}

QString OAICreateIAMPolicyAssignment_request::getPolicyArn() const {
    return m_policy_arn;
}
void OAICreateIAMPolicyAssignment_request::setPolicyArn(const QString &policy_arn) {
    m_policy_arn = policy_arn;
    m_policy_arn_isSet = true;
}

bool OAICreateIAMPolicyAssignment_request::is_policy_arn_Set() const{
    return m_policy_arn_isSet;
}

bool OAICreateIAMPolicyAssignment_request::is_policy_arn_Valid() const{
    return m_policy_arn_isValid;
}

QMap<QString, QList> OAICreateIAMPolicyAssignment_request::getIdentities() const {
    return m_identities;
}
void OAICreateIAMPolicyAssignment_request::setIdentities(const QMap<QString, QList> &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAICreateIAMPolicyAssignment_request::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAICreateIAMPolicyAssignment_request::is_identities_Valid() const{
    return m_identities_isValid;
}

bool OAICreateIAMPolicyAssignment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIAMPolicyAssignment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assignment_name_isValid && m_assignment_status_isValid && true;
}

} // namespace OpenAPI
