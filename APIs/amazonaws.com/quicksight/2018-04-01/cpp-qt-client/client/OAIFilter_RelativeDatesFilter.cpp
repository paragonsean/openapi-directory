/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter_RelativeDatesFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter_RelativeDatesFilter::OAIFilter_RelativeDatesFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter_RelativeDatesFilter::OAIFilter_RelativeDatesFilter() {
    this->initializeModel();
}

OAIFilter_RelativeDatesFilter::~OAIFilter_RelativeDatesFilter() {}

void OAIFilter_RelativeDatesFilter::initializeModel() {

    m_filter_id_isSet = false;
    m_filter_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_anchor_date_configuration_isSet = false;
    m_anchor_date_configuration_isValid = false;

    m_minimum_granularity_isSet = false;
    m_minimum_granularity_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;

    m_relative_date_type_isSet = false;
    m_relative_date_type_isValid = false;

    m_relative_date_value_isSet = false;
    m_relative_date_value_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_null_option_isSet = false;
    m_null_option_isValid = false;

    m_exclude_period_configuration_isSet = false;
    m_exclude_period_configuration_isValid = false;
}

void OAIFilter_RelativeDatesFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter_RelativeDatesFilter::fromJsonObject(QJsonObject json) {

    m_filter_id_isValid = ::OpenAPI::fromJsonValue(m_filter_id, json[QString("FilterId")]);
    m_filter_id_isSet = !json[QString("FilterId")].isNull() && m_filter_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_anchor_date_configuration_isValid = ::OpenAPI::fromJsonValue(m_anchor_date_configuration, json[QString("AnchorDateConfiguration")]);
    m_anchor_date_configuration_isSet = !json[QString("AnchorDateConfiguration")].isNull() && m_anchor_date_configuration_isValid;

    m_minimum_granularity_isValid = ::OpenAPI::fromJsonValue(m_minimum_granularity, json[QString("MinimumGranularity")]);
    m_minimum_granularity_isSet = !json[QString("MinimumGranularity")].isNull() && m_minimum_granularity_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;

    m_relative_date_type_isValid = ::OpenAPI::fromJsonValue(m_relative_date_type, json[QString("RelativeDateType")]);
    m_relative_date_type_isSet = !json[QString("RelativeDateType")].isNull() && m_relative_date_type_isValid;

    m_relative_date_value_isValid = ::OpenAPI::fromJsonValue(m_relative_date_value, json[QString("RelativeDateValue")]);
    m_relative_date_value_isSet = !json[QString("RelativeDateValue")].isNull() && m_relative_date_value_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;

    m_null_option_isValid = ::OpenAPI::fromJsonValue(m_null_option, json[QString("NullOption")]);
    m_null_option_isSet = !json[QString("NullOption")].isNull() && m_null_option_isValid;

    m_exclude_period_configuration_isValid = ::OpenAPI::fromJsonValue(m_exclude_period_configuration, json[QString("ExcludePeriodConfiguration")]);
    m_exclude_period_configuration_isSet = !json[QString("ExcludePeriodConfiguration")].isNull() && m_exclude_period_configuration_isValid;
}

QString OAIFilter_RelativeDatesFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter_RelativeDatesFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_id_isSet) {
        obj.insert(QString("FilterId"), ::OpenAPI::toJsonValue(m_filter_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_anchor_date_configuration.isSet()) {
        obj.insert(QString("AnchorDateConfiguration"), ::OpenAPI::toJsonValue(m_anchor_date_configuration));
    }
    if (m_minimum_granularity.isSet()) {
        obj.insert(QString("MinimumGranularity"), ::OpenAPI::toJsonValue(m_minimum_granularity));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    if (m_relative_date_type.isSet()) {
        obj.insert(QString("RelativeDateType"), ::OpenAPI::toJsonValue(m_relative_date_type));
    }
    if (m_relative_date_value_isSet) {
        obj.insert(QString("RelativeDateValue"), ::OpenAPI::toJsonValue(m_relative_date_value));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_null_option.isSet()) {
        obj.insert(QString("NullOption"), ::OpenAPI::toJsonValue(m_null_option));
    }
    if (m_exclude_period_configuration.isSet()) {
        obj.insert(QString("ExcludePeriodConfiguration"), ::OpenAPI::toJsonValue(m_exclude_period_configuration));
    }
    return obj;
}

QString OAIFilter_RelativeDatesFilter::getFilterId() const {
    return m_filter_id;
}
void OAIFilter_RelativeDatesFilter::setFilterId(const QString &filter_id) {
    m_filter_id = filter_id;
    m_filter_id_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_filter_id_Set() const{
    return m_filter_id_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_filter_id_Valid() const{
    return m_filter_id_isValid;
}

OAICategoryDrillDownFilter_Column OAIFilter_RelativeDatesFilter::getColumn() const {
    return m_column;
}
void OAIFilter_RelativeDatesFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_column_Valid() const{
    return m_column_isValid;
}

OAIRelativeDatesFilter_AnchorDateConfiguration OAIFilter_RelativeDatesFilter::getAnchorDateConfiguration() const {
    return m_anchor_date_configuration;
}
void OAIFilter_RelativeDatesFilter::setAnchorDateConfiguration(const OAIRelativeDatesFilter_AnchorDateConfiguration &anchor_date_configuration) {
    m_anchor_date_configuration = anchor_date_configuration;
    m_anchor_date_configuration_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_anchor_date_configuration_Set() const{
    return m_anchor_date_configuration_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_anchor_date_configuration_Valid() const{
    return m_anchor_date_configuration_isValid;
}

OAITimeGranularity OAIFilter_RelativeDatesFilter::getMinimumGranularity() const {
    return m_minimum_granularity;
}
void OAIFilter_RelativeDatesFilter::setMinimumGranularity(const OAITimeGranularity &minimum_granularity) {
    m_minimum_granularity = minimum_granularity;
    m_minimum_granularity_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_minimum_granularity_Set() const{
    return m_minimum_granularity_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_minimum_granularity_Valid() const{
    return m_minimum_granularity_isValid;
}

OAITimeGranularity OAIFilter_RelativeDatesFilter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAIFilter_RelativeDatesFilter::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

OAIRelativeDateType OAIFilter_RelativeDatesFilter::getRelativeDateType() const {
    return m_relative_date_type;
}
void OAIFilter_RelativeDatesFilter::setRelativeDateType(const OAIRelativeDateType &relative_date_type) {
    m_relative_date_type = relative_date_type;
    m_relative_date_type_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_relative_date_type_Set() const{
    return m_relative_date_type_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_relative_date_type_Valid() const{
    return m_relative_date_type_isValid;
}

qint32 OAIFilter_RelativeDatesFilter::getRelativeDateValue() const {
    return m_relative_date_value;
}
void OAIFilter_RelativeDatesFilter::setRelativeDateValue(const qint32 &relative_date_value) {
    m_relative_date_value = relative_date_value;
    m_relative_date_value_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_relative_date_value_Set() const{
    return m_relative_date_value_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_relative_date_value_Valid() const{
    return m_relative_date_value_isValid;
}

QString OAIFilter_RelativeDatesFilter::getParameterName() const {
    return m_parameter_name;
}
void OAIFilter_RelativeDatesFilter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

OAIFilterNullOption OAIFilter_RelativeDatesFilter::getNullOption() const {
    return m_null_option;
}
void OAIFilter_RelativeDatesFilter::setNullOption(const OAIFilterNullOption &null_option) {
    m_null_option = null_option;
    m_null_option_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_null_option_Set() const{
    return m_null_option_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_null_option_Valid() const{
    return m_null_option_isValid;
}

OAIRelativeDatesFilter_ExcludePeriodConfiguration OAIFilter_RelativeDatesFilter::getExcludePeriodConfiguration() const {
    return m_exclude_period_configuration;
}
void OAIFilter_RelativeDatesFilter::setExcludePeriodConfiguration(const OAIRelativeDatesFilter_ExcludePeriodConfiguration &exclude_period_configuration) {
    m_exclude_period_configuration = exclude_period_configuration;
    m_exclude_period_configuration_isSet = true;
}

bool OAIFilter_RelativeDatesFilter::is_exclude_period_configuration_Set() const{
    return m_exclude_period_configuration_isSet;
}

bool OAIFilter_RelativeDatesFilter::is_exclude_period_configuration_Valid() const{
    return m_exclude_period_configuration_isValid;
}

bool OAIFilter_RelativeDatesFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anchor_date_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_date_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_date_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_period_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter_RelativeDatesFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_id_isValid && m_column_isValid && m_anchor_date_configuration_isValid && m_time_granularity_isValid && m_relative_date_type_isValid && m_null_option_isValid && true;
}

} // namespace OpenAPI
