/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterScopeConfiguration_SelectedSheets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterScopeConfiguration_SelectedSheets::OAIFilterScopeConfiguration_SelectedSheets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterScopeConfiguration_SelectedSheets::OAIFilterScopeConfiguration_SelectedSheets() {
    this->initializeModel();
}

OAIFilterScopeConfiguration_SelectedSheets::~OAIFilterScopeConfiguration_SelectedSheets() {}

void OAIFilterScopeConfiguration_SelectedSheets::initializeModel() {

    m_sheet_visual_scoping_configurations_isSet = false;
    m_sheet_visual_scoping_configurations_isValid = false;
}

void OAIFilterScopeConfiguration_SelectedSheets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterScopeConfiguration_SelectedSheets::fromJsonObject(QJsonObject json) {

    m_sheet_visual_scoping_configurations_isValid = ::OpenAPI::fromJsonValue(m_sheet_visual_scoping_configurations, json[QString("SheetVisualScopingConfigurations")]);
    m_sheet_visual_scoping_configurations_isSet = !json[QString("SheetVisualScopingConfigurations")].isNull() && m_sheet_visual_scoping_configurations_isValid;
}

QString OAIFilterScopeConfiguration_SelectedSheets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterScopeConfiguration_SelectedSheets::asJsonObject() const {
    QJsonObject obj;
    if (m_sheet_visual_scoping_configurations.isSet()) {
        obj.insert(QString("SheetVisualScopingConfigurations"), ::OpenAPI::toJsonValue(m_sheet_visual_scoping_configurations));
    }
    return obj;
}

QList OAIFilterScopeConfiguration_SelectedSheets::getSheetVisualScopingConfigurations() const {
    return m_sheet_visual_scoping_configurations;
}
void OAIFilterScopeConfiguration_SelectedSheets::setSheetVisualScopingConfigurations(const QList &sheet_visual_scoping_configurations) {
    m_sheet_visual_scoping_configurations = sheet_visual_scoping_configurations;
    m_sheet_visual_scoping_configurations_isSet = true;
}

bool OAIFilterScopeConfiguration_SelectedSheets::is_sheet_visual_scoping_configurations_Set() const{
    return m_sheet_visual_scoping_configurations_isSet;
}

bool OAIFilterScopeConfiguration_SelectedSheets::is_sheet_visual_scoping_configurations_Valid() const{
    return m_sheet_visual_scoping_configurations_isValid;
}

bool OAIFilterScopeConfiguration_SelectedSheets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sheet_visual_scoping_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterScopeConfiguration_SelectedSheets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
