/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeRangeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeRangeFilter::OAITimeRangeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeRangeFilter::OAITimeRangeFilter() {
    this->initializeModel();
}

OAITimeRangeFilter::~OAITimeRangeFilter() {}

void OAITimeRangeFilter::initializeModel() {

    m_filter_id_isSet = false;
    m_filter_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_include_minimum_isSet = false;
    m_include_minimum_isValid = false;

    m_include_maximum_isSet = false;
    m_include_maximum_isValid = false;

    m_range_minimum_value_isSet = false;
    m_range_minimum_value_isValid = false;

    m_range_maximum_value_isSet = false;
    m_range_maximum_value_isValid = false;

    m_null_option_isSet = false;
    m_null_option_isValid = false;

    m_exclude_period_configuration_isSet = false;
    m_exclude_period_configuration_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;
}

void OAITimeRangeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeRangeFilter::fromJsonObject(QJsonObject json) {

    m_filter_id_isValid = ::OpenAPI::fromJsonValue(m_filter_id, json[QString("FilterId")]);
    m_filter_id_isSet = !json[QString("FilterId")].isNull() && m_filter_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_include_minimum_isValid = ::OpenAPI::fromJsonValue(m_include_minimum, json[QString("IncludeMinimum")]);
    m_include_minimum_isSet = !json[QString("IncludeMinimum")].isNull() && m_include_minimum_isValid;

    m_include_maximum_isValid = ::OpenAPI::fromJsonValue(m_include_maximum, json[QString("IncludeMaximum")]);
    m_include_maximum_isSet = !json[QString("IncludeMaximum")].isNull() && m_include_maximum_isValid;

    m_range_minimum_value_isValid = ::OpenAPI::fromJsonValue(m_range_minimum_value, json[QString("RangeMinimumValue")]);
    m_range_minimum_value_isSet = !json[QString("RangeMinimumValue")].isNull() && m_range_minimum_value_isValid;

    m_range_maximum_value_isValid = ::OpenAPI::fromJsonValue(m_range_maximum_value, json[QString("RangeMaximumValue")]);
    m_range_maximum_value_isSet = !json[QString("RangeMaximumValue")].isNull() && m_range_maximum_value_isValid;

    m_null_option_isValid = ::OpenAPI::fromJsonValue(m_null_option, json[QString("NullOption")]);
    m_null_option_isSet = !json[QString("NullOption")].isNull() && m_null_option_isValid;

    m_exclude_period_configuration_isValid = ::OpenAPI::fromJsonValue(m_exclude_period_configuration, json[QString("ExcludePeriodConfiguration")]);
    m_exclude_period_configuration_isSet = !json[QString("ExcludePeriodConfiguration")].isNull() && m_exclude_period_configuration_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;
}

QString OAITimeRangeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeRangeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_id_isSet) {
        obj.insert(QString("FilterId"), ::OpenAPI::toJsonValue(m_filter_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_include_minimum_isSet) {
        obj.insert(QString("IncludeMinimum"), ::OpenAPI::toJsonValue(m_include_minimum));
    }
    if (m_include_maximum_isSet) {
        obj.insert(QString("IncludeMaximum"), ::OpenAPI::toJsonValue(m_include_maximum));
    }
    if (m_range_minimum_value.isSet()) {
        obj.insert(QString("RangeMinimumValue"), ::OpenAPI::toJsonValue(m_range_minimum_value));
    }
    if (m_range_maximum_value.isSet()) {
        obj.insert(QString("RangeMaximumValue"), ::OpenAPI::toJsonValue(m_range_maximum_value));
    }
    if (m_null_option.isSet()) {
        obj.insert(QString("NullOption"), ::OpenAPI::toJsonValue(m_null_option));
    }
    if (m_exclude_period_configuration.isSet()) {
        obj.insert(QString("ExcludePeriodConfiguration"), ::OpenAPI::toJsonValue(m_exclude_period_configuration));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    return obj;
}

QString OAITimeRangeFilter::getFilterId() const {
    return m_filter_id;
}
void OAITimeRangeFilter::setFilterId(const QString &filter_id) {
    m_filter_id = filter_id;
    m_filter_id_isSet = true;
}

bool OAITimeRangeFilter::is_filter_id_Set() const{
    return m_filter_id_isSet;
}

bool OAITimeRangeFilter::is_filter_id_Valid() const{
    return m_filter_id_isValid;
}

OAICategoryDrillDownFilter_Column OAITimeRangeFilter::getColumn() const {
    return m_column;
}
void OAITimeRangeFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAITimeRangeFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAITimeRangeFilter::is_column_Valid() const{
    return m_column_isValid;
}

bool OAITimeRangeFilter::getIncludeMinimum() const {
    return m_include_minimum;
}
void OAITimeRangeFilter::setIncludeMinimum(const bool &include_minimum) {
    m_include_minimum = include_minimum;
    m_include_minimum_isSet = true;
}

bool OAITimeRangeFilter::is_include_minimum_Set() const{
    return m_include_minimum_isSet;
}

bool OAITimeRangeFilter::is_include_minimum_Valid() const{
    return m_include_minimum_isValid;
}

bool OAITimeRangeFilter::getIncludeMaximum() const {
    return m_include_maximum;
}
void OAITimeRangeFilter::setIncludeMaximum(const bool &include_maximum) {
    m_include_maximum = include_maximum;
    m_include_maximum_isSet = true;
}

bool OAITimeRangeFilter::is_include_maximum_Set() const{
    return m_include_maximum_isSet;
}

bool OAITimeRangeFilter::is_include_maximum_Valid() const{
    return m_include_maximum_isValid;
}

OAITimeRangeFilter_RangeMinimumValue OAITimeRangeFilter::getRangeMinimumValue() const {
    return m_range_minimum_value;
}
void OAITimeRangeFilter::setRangeMinimumValue(const OAITimeRangeFilter_RangeMinimumValue &range_minimum_value) {
    m_range_minimum_value = range_minimum_value;
    m_range_minimum_value_isSet = true;
}

bool OAITimeRangeFilter::is_range_minimum_value_Set() const{
    return m_range_minimum_value_isSet;
}

bool OAITimeRangeFilter::is_range_minimum_value_Valid() const{
    return m_range_minimum_value_isValid;
}

OAITimeRangeFilter_RangeMaximumValue OAITimeRangeFilter::getRangeMaximumValue() const {
    return m_range_maximum_value;
}
void OAITimeRangeFilter::setRangeMaximumValue(const OAITimeRangeFilter_RangeMaximumValue &range_maximum_value) {
    m_range_maximum_value = range_maximum_value;
    m_range_maximum_value_isSet = true;
}

bool OAITimeRangeFilter::is_range_maximum_value_Set() const{
    return m_range_maximum_value_isSet;
}

bool OAITimeRangeFilter::is_range_maximum_value_Valid() const{
    return m_range_maximum_value_isValid;
}

OAIFilterNullOption OAITimeRangeFilter::getNullOption() const {
    return m_null_option;
}
void OAITimeRangeFilter::setNullOption(const OAIFilterNullOption &null_option) {
    m_null_option = null_option;
    m_null_option_isSet = true;
}

bool OAITimeRangeFilter::is_null_option_Set() const{
    return m_null_option_isSet;
}

bool OAITimeRangeFilter::is_null_option_Valid() const{
    return m_null_option_isValid;
}

OAITimeRangeFilter_ExcludePeriodConfiguration OAITimeRangeFilter::getExcludePeriodConfiguration() const {
    return m_exclude_period_configuration;
}
void OAITimeRangeFilter::setExcludePeriodConfiguration(const OAITimeRangeFilter_ExcludePeriodConfiguration &exclude_period_configuration) {
    m_exclude_period_configuration = exclude_period_configuration;
    m_exclude_period_configuration_isSet = true;
}

bool OAITimeRangeFilter::is_exclude_period_configuration_Set() const{
    return m_exclude_period_configuration_isSet;
}

bool OAITimeRangeFilter::is_exclude_period_configuration_Valid() const{
    return m_exclude_period_configuration_isValid;
}

OAITimeGranularity OAITimeRangeFilter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAITimeRangeFilter::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAITimeRangeFilter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAITimeRangeFilter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

bool OAITimeRangeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_minimum_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_maximum_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_period_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeRangeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_id_isValid && m_column_isValid && m_null_option_isValid && true;
}

} // namespace OpenAPI
