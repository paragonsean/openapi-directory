/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunnelChartConfiguration_VisualPalette.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunnelChartConfiguration_VisualPalette::OAIFunnelChartConfiguration_VisualPalette(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunnelChartConfiguration_VisualPalette::OAIFunnelChartConfiguration_VisualPalette() {
    this->initializeModel();
}

OAIFunnelChartConfiguration_VisualPalette::~OAIFunnelChartConfiguration_VisualPalette() {}

void OAIFunnelChartConfiguration_VisualPalette::initializeModel() {

    m_chart_color_isSet = false;
    m_chart_color_isValid = false;

    m_color_map_isSet = false;
    m_color_map_isValid = false;
}

void OAIFunnelChartConfiguration_VisualPalette::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunnelChartConfiguration_VisualPalette::fromJsonObject(QJsonObject json) {

    m_chart_color_isValid = ::OpenAPI::fromJsonValue(m_chart_color, json[QString("ChartColor")]);
    m_chart_color_isSet = !json[QString("ChartColor")].isNull() && m_chart_color_isValid;

    m_color_map_isValid = ::OpenAPI::fromJsonValue(m_color_map, json[QString("ColorMap")]);
    m_color_map_isSet = !json[QString("ColorMap")].isNull() && m_color_map_isValid;
}

QString OAIFunnelChartConfiguration_VisualPalette::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunnelChartConfiguration_VisualPalette::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_color_isSet) {
        obj.insert(QString("ChartColor"), ::OpenAPI::toJsonValue(m_chart_color));
    }
    if (m_color_map.isSet()) {
        obj.insert(QString("ColorMap"), ::OpenAPI::toJsonValue(m_color_map));
    }
    return obj;
}

QString OAIFunnelChartConfiguration_VisualPalette::getChartColor() const {
    return m_chart_color;
}
void OAIFunnelChartConfiguration_VisualPalette::setChartColor(const QString &chart_color) {
    m_chart_color = chart_color;
    m_chart_color_isSet = true;
}

bool OAIFunnelChartConfiguration_VisualPalette::is_chart_color_Set() const{
    return m_chart_color_isSet;
}

bool OAIFunnelChartConfiguration_VisualPalette::is_chart_color_Valid() const{
    return m_chart_color_isValid;
}

QList OAIFunnelChartConfiguration_VisualPalette::getColorMap() const {
    return m_color_map;
}
void OAIFunnelChartConfiguration_VisualPalette::setColorMap(const QList &color_map) {
    m_color_map = color_map;
    m_color_map_isSet = true;
}

bool OAIFunnelChartConfiguration_VisualPalette::is_color_map_Set() const{
    return m_color_map_isSet;
}

bool OAIFunnelChartConfiguration_VisualPalette::is_color_map_Valid() const{
    return m_color_map_isValid;
}

bool OAIFunnelChartConfiguration_VisualPalette::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_map.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunnelChartConfiguration_VisualPalette::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
