/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryFilter_Configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryFilter_Configuration::OAICategoryFilter_Configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryFilter_Configuration::OAICategoryFilter_Configuration() {
    this->initializeModel();
}

OAICategoryFilter_Configuration::~OAICategoryFilter_Configuration() {}

void OAICategoryFilter_Configuration::initializeModel() {

    m_filter_list_configuration_isSet = false;
    m_filter_list_configuration_isValid = false;

    m_custom_filter_list_configuration_isSet = false;
    m_custom_filter_list_configuration_isValid = false;

    m_custom_filter_configuration_isSet = false;
    m_custom_filter_configuration_isValid = false;
}

void OAICategoryFilter_Configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryFilter_Configuration::fromJsonObject(QJsonObject json) {

    m_filter_list_configuration_isValid = ::OpenAPI::fromJsonValue(m_filter_list_configuration, json[QString("FilterListConfiguration")]);
    m_filter_list_configuration_isSet = !json[QString("FilterListConfiguration")].isNull() && m_filter_list_configuration_isValid;

    m_custom_filter_list_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_filter_list_configuration, json[QString("CustomFilterListConfiguration")]);
    m_custom_filter_list_configuration_isSet = !json[QString("CustomFilterListConfiguration")].isNull() && m_custom_filter_list_configuration_isValid;

    m_custom_filter_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_filter_configuration, json[QString("CustomFilterConfiguration")]);
    m_custom_filter_configuration_isSet = !json[QString("CustomFilterConfiguration")].isNull() && m_custom_filter_configuration_isValid;
}

QString OAICategoryFilter_Configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryFilter_Configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_list_configuration.isSet()) {
        obj.insert(QString("FilterListConfiguration"), ::OpenAPI::toJsonValue(m_filter_list_configuration));
    }
    if (m_custom_filter_list_configuration.isSet()) {
        obj.insert(QString("CustomFilterListConfiguration"), ::OpenAPI::toJsonValue(m_custom_filter_list_configuration));
    }
    if (m_custom_filter_configuration.isSet()) {
        obj.insert(QString("CustomFilterConfiguration"), ::OpenAPI::toJsonValue(m_custom_filter_configuration));
    }
    return obj;
}

OAICategoryFilterConfiguration_FilterListConfiguration OAICategoryFilter_Configuration::getFilterListConfiguration() const {
    return m_filter_list_configuration;
}
void OAICategoryFilter_Configuration::setFilterListConfiguration(const OAICategoryFilterConfiguration_FilterListConfiguration &filter_list_configuration) {
    m_filter_list_configuration = filter_list_configuration;
    m_filter_list_configuration_isSet = true;
}

bool OAICategoryFilter_Configuration::is_filter_list_configuration_Set() const{
    return m_filter_list_configuration_isSet;
}

bool OAICategoryFilter_Configuration::is_filter_list_configuration_Valid() const{
    return m_filter_list_configuration_isValid;
}

OAICategoryFilterConfiguration_CustomFilterListConfiguration OAICategoryFilter_Configuration::getCustomFilterListConfiguration() const {
    return m_custom_filter_list_configuration;
}
void OAICategoryFilter_Configuration::setCustomFilterListConfiguration(const OAICategoryFilterConfiguration_CustomFilterListConfiguration &custom_filter_list_configuration) {
    m_custom_filter_list_configuration = custom_filter_list_configuration;
    m_custom_filter_list_configuration_isSet = true;
}

bool OAICategoryFilter_Configuration::is_custom_filter_list_configuration_Set() const{
    return m_custom_filter_list_configuration_isSet;
}

bool OAICategoryFilter_Configuration::is_custom_filter_list_configuration_Valid() const{
    return m_custom_filter_list_configuration_isValid;
}

OAICategoryFilterConfiguration_CustomFilterConfiguration OAICategoryFilter_Configuration::getCustomFilterConfiguration() const {
    return m_custom_filter_configuration;
}
void OAICategoryFilter_Configuration::setCustomFilterConfiguration(const OAICategoryFilterConfiguration_CustomFilterConfiguration &custom_filter_configuration) {
    m_custom_filter_configuration = custom_filter_configuration;
    m_custom_filter_configuration_isSet = true;
}

bool OAICategoryFilter_Configuration::is_custom_filter_configuration_Set() const{
    return m_custom_filter_configuration_isSet;
}

bool OAICategoryFilter_Configuration::is_custom_filter_configuration_Valid() const{
    return m_custom_filter_configuration_isValid;
}

bool OAICategoryFilter_Configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_list_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_filter_list_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_filter_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryFilter_Configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
