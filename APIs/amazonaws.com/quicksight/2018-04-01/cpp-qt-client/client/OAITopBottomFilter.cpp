/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopBottomFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopBottomFilter::OAITopBottomFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopBottomFilter::OAITopBottomFilter() {
    this->initializeModel();
}

OAITopBottomFilter::~OAITopBottomFilter() {}

void OAITopBottomFilter::initializeModel() {

    m_filter_id_isSet = false;
    m_filter_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_aggregation_sort_configurations_isSet = false;
    m_aggregation_sort_configurations_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;
}

void OAITopBottomFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopBottomFilter::fromJsonObject(QJsonObject json) {

    m_filter_id_isValid = ::OpenAPI::fromJsonValue(m_filter_id, json[QString("FilterId")]);
    m_filter_id_isSet = !json[QString("FilterId")].isNull() && m_filter_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_aggregation_sort_configurations_isValid = ::OpenAPI::fromJsonValue(m_aggregation_sort_configurations, json[QString("AggregationSortConfigurations")]);
    m_aggregation_sort_configurations_isSet = !json[QString("AggregationSortConfigurations")].isNull() && m_aggregation_sort_configurations_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;
}

QString OAITopBottomFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopBottomFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_id_isSet) {
        obj.insert(QString("FilterId"), ::OpenAPI::toJsonValue(m_filter_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_aggregation_sort_configurations.isSet()) {
        obj.insert(QString("AggregationSortConfigurations"), ::OpenAPI::toJsonValue(m_aggregation_sort_configurations));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    return obj;
}

QString OAITopBottomFilter::getFilterId() const {
    return m_filter_id;
}
void OAITopBottomFilter::setFilterId(const QString &filter_id) {
    m_filter_id = filter_id;
    m_filter_id_isSet = true;
}

bool OAITopBottomFilter::is_filter_id_Set() const{
    return m_filter_id_isSet;
}

bool OAITopBottomFilter::is_filter_id_Valid() const{
    return m_filter_id_isValid;
}

OAICategoryDrillDownFilter_Column OAITopBottomFilter::getColumn() const {
    return m_column;
}
void OAITopBottomFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAITopBottomFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAITopBottomFilter::is_column_Valid() const{
    return m_column_isValid;
}

qint32 OAITopBottomFilter::getLimit() const {
    return m_limit;
}
void OAITopBottomFilter::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAITopBottomFilter::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAITopBottomFilter::is_limit_Valid() const{
    return m_limit_isValid;
}

QList OAITopBottomFilter::getAggregationSortConfigurations() const {
    return m_aggregation_sort_configurations;
}
void OAITopBottomFilter::setAggregationSortConfigurations(const QList &aggregation_sort_configurations) {
    m_aggregation_sort_configurations = aggregation_sort_configurations;
    m_aggregation_sort_configurations_isSet = true;
}

bool OAITopBottomFilter::is_aggregation_sort_configurations_Set() const{
    return m_aggregation_sort_configurations_isSet;
}

bool OAITopBottomFilter::is_aggregation_sort_configurations_Valid() const{
    return m_aggregation_sort_configurations_isValid;
}

OAITimeGranularity OAITopBottomFilter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAITopBottomFilter::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAITopBottomFilter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAITopBottomFilter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

QString OAITopBottomFilter::getParameterName() const {
    return m_parameter_name;
}
void OAITopBottomFilter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAITopBottomFilter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAITopBottomFilter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

bool OAITopBottomFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_sort_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopBottomFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_id_isValid && m_column_isValid && m_aggregation_sort_configurations_isValid && true;
}

} // namespace OpenAPI
