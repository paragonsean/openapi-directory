/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListIngestionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListIngestionsResponse::OAIListIngestionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListIngestionsResponse::OAIListIngestionsResponse() {
    this->initializeModel();
}

OAIListIngestionsResponse::~OAIListIngestionsResponse() {}

void OAIListIngestionsResponse::initializeModel() {

    m_ingestions_isSet = false;
    m_ingestions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIListIngestionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListIngestionsResponse::fromJsonObject(QJsonObject json) {

    m_ingestions_isValid = ::OpenAPI::fromJsonValue(m_ingestions, json[QString("Ingestions")]);
    m_ingestions_isSet = !json[QString("Ingestions")].isNull() && m_ingestions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIListIngestionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListIngestionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ingestions.isSet()) {
        obj.insert(QString("Ingestions"), ::OpenAPI::toJsonValue(m_ingestions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList OAIListIngestionsResponse::getIngestions() const {
    return m_ingestions;
}
void OAIListIngestionsResponse::setIngestions(const QList &ingestions) {
    m_ingestions = ingestions;
    m_ingestions_isSet = true;
}

bool OAIListIngestionsResponse::is_ingestions_Set() const{
    return m_ingestions_isSet;
}

bool OAIListIngestionsResponse::is_ingestions_Valid() const{
    return m_ingestions_isValid;
}

QString OAIListIngestionsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListIngestionsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListIngestionsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListIngestionsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIListIngestionsResponse::getRequestId() const {
    return m_request_id;
}
void OAIListIngestionsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIListIngestionsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIListIngestionsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIListIngestionsResponse::getStatus() const {
    return m_status;
}
void OAIListIngestionsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListIngestionsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListIngestionsResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIListIngestionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingestions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListIngestionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
