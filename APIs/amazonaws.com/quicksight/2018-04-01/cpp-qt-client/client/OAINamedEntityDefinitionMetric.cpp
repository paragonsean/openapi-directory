/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamedEntityDefinitionMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamedEntityDefinitionMetric::OAINamedEntityDefinitionMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamedEntityDefinitionMetric::OAINamedEntityDefinitionMetric() {
    this->initializeModel();
}

OAINamedEntityDefinitionMetric::~OAINamedEntityDefinitionMetric() {}

void OAINamedEntityDefinitionMetric::initializeModel() {

    m_aggregation_isSet = false;
    m_aggregation_isValid = false;

    m_aggregation_function_parameters_isSet = false;
    m_aggregation_function_parameters_isValid = false;
}

void OAINamedEntityDefinitionMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamedEntityDefinitionMetric::fromJsonObject(QJsonObject json) {

    m_aggregation_isValid = ::OpenAPI::fromJsonValue(m_aggregation, json[QString("Aggregation")]);
    m_aggregation_isSet = !json[QString("Aggregation")].isNull() && m_aggregation_isValid;

    m_aggregation_function_parameters_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function_parameters, json[QString("AggregationFunctionParameters")]);
    m_aggregation_function_parameters_isSet = !json[QString("AggregationFunctionParameters")].isNull() && m_aggregation_function_parameters_isValid;
}

QString OAINamedEntityDefinitionMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamedEntityDefinitionMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation.isSet()) {
        obj.insert(QString("Aggregation"), ::OpenAPI::toJsonValue(m_aggregation));
    }
    if (m_aggregation_function_parameters.isSet()) {
        obj.insert(QString("AggregationFunctionParameters"), ::OpenAPI::toJsonValue(m_aggregation_function_parameters));
    }
    return obj;
}

OAINamedEntityAggType OAINamedEntityDefinitionMetric::getAggregation() const {
    return m_aggregation;
}
void OAINamedEntityDefinitionMetric::setAggregation(const OAINamedEntityAggType &aggregation) {
    m_aggregation = aggregation;
    m_aggregation_isSet = true;
}

bool OAINamedEntityDefinitionMetric::is_aggregation_Set() const{
    return m_aggregation_isSet;
}

bool OAINamedEntityDefinitionMetric::is_aggregation_Valid() const{
    return m_aggregation_isValid;
}

QMap OAINamedEntityDefinitionMetric::getAggregationFunctionParameters() const {
    return m_aggregation_function_parameters;
}
void OAINamedEntityDefinitionMetric::setAggregationFunctionParameters(const QMap &aggregation_function_parameters) {
    m_aggregation_function_parameters = aggregation_function_parameters;
    m_aggregation_function_parameters_isSet = true;
}

bool OAINamedEntityDefinitionMetric::is_aggregation_function_parameters_Set() const{
    return m_aggregation_function_parameters_isSet;
}

bool OAINamedEntityDefinitionMetric::is_aggregation_function_parameters_Valid() const{
    return m_aggregation_function_parameters_isValid;
}

bool OAINamedEntityDefinitionMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_function_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamedEntityDefinitionMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
