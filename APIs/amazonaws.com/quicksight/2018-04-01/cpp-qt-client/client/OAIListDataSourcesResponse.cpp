/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDataSourcesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDataSourcesResponse::OAIListDataSourcesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDataSourcesResponse::OAIListDataSourcesResponse() {
    this->initializeModel();
}

OAIListDataSourcesResponse::~OAIListDataSourcesResponse() {}

void OAIListDataSourcesResponse::initializeModel() {

    m_data_sources_isSet = false;
    m_data_sources_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIListDataSourcesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDataSourcesResponse::fromJsonObject(QJsonObject json) {

    m_data_sources_isValid = ::OpenAPI::fromJsonValue(m_data_sources, json[QString("DataSources")]);
    m_data_sources_isSet = !json[QString("DataSources")].isNull() && m_data_sources_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIListDataSourcesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDataSourcesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_sources.isSet()) {
        obj.insert(QString("DataSources"), ::OpenAPI::toJsonValue(m_data_sources));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList OAIListDataSourcesResponse::getDataSources() const {
    return m_data_sources;
}
void OAIListDataSourcesResponse::setDataSources(const QList &data_sources) {
    m_data_sources = data_sources;
    m_data_sources_isSet = true;
}

bool OAIListDataSourcesResponse::is_data_sources_Set() const{
    return m_data_sources_isSet;
}

bool OAIListDataSourcesResponse::is_data_sources_Valid() const{
    return m_data_sources_isValid;
}

QString OAIListDataSourcesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListDataSourcesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDataSourcesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDataSourcesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIListDataSourcesResponse::getRequestId() const {
    return m_request_id;
}
void OAIListDataSourcesResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIListDataSourcesResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIListDataSourcesResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIListDataSourcesResponse::getStatus() const {
    return m_status;
}
void OAIListDataSourcesResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListDataSourcesResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListDataSourcesResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIListDataSourcesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDataSourcesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
