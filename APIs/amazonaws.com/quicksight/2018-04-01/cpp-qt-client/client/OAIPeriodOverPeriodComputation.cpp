/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeriodOverPeriodComputation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeriodOverPeriodComputation::OAIPeriodOverPeriodComputation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeriodOverPeriodComputation::OAIPeriodOverPeriodComputation() {
    this->initializeModel();
}

OAIPeriodOverPeriodComputation::~OAIPeriodOverPeriodComputation() {}

void OAIPeriodOverPeriodComputation::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPeriodOverPeriodComputation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeriodOverPeriodComputation::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIPeriodOverPeriodComputation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeriodOverPeriodComputation::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time.isSet()) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPeriodOverPeriodComputation::getComputationId() const {
    return m_computation_id;
}
void OAIPeriodOverPeriodComputation::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIPeriodOverPeriodComputation::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIPeriodOverPeriodComputation::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIPeriodOverPeriodComputation::getName() const {
    return m_name;
}
void OAIPeriodOverPeriodComputation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPeriodOverPeriodComputation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPeriodOverPeriodComputation::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomMoversComputation_Time OAIPeriodOverPeriodComputation::getTime() const {
    return m_time;
}
void OAIPeriodOverPeriodComputation::setTime(const OAITopBottomMoversComputation_Time &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIPeriodOverPeriodComputation::is_time_Set() const{
    return m_time_isSet;
}

bool OAIPeriodOverPeriodComputation::is_time_Valid() const{
    return m_time_isValid;
}

OAITopBottomRankedComputation_Value OAIPeriodOverPeriodComputation::getValue() const {
    return m_value;
}
void OAIPeriodOverPeriodComputation::setValue(const OAITopBottomRankedComputation_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPeriodOverPeriodComputation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPeriodOverPeriodComputation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPeriodOverPeriodComputation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeriodOverPeriodComputation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_time_isValid && true;
}

} // namespace OpenAPI
