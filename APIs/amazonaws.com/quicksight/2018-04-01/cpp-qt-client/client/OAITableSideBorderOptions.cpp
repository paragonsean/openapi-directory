/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableSideBorderOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableSideBorderOptions::OAITableSideBorderOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableSideBorderOptions::OAITableSideBorderOptions() {
    this->initializeModel();
}

OAITableSideBorderOptions::~OAITableSideBorderOptions() {}

void OAITableSideBorderOptions::initializeModel() {

    m_inner_vertical_isSet = false;
    m_inner_vertical_isValid = false;

    m_inner_horizontal_isSet = false;
    m_inner_horizontal_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;

    m_right_isSet = false;
    m_right_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_bottom_isSet = false;
    m_bottom_isValid = false;
}

void OAITableSideBorderOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableSideBorderOptions::fromJsonObject(QJsonObject json) {

    m_inner_vertical_isValid = ::OpenAPI::fromJsonValue(m_inner_vertical, json[QString("InnerVertical")]);
    m_inner_vertical_isSet = !json[QString("InnerVertical")].isNull() && m_inner_vertical_isValid;

    m_inner_horizontal_isValid = ::OpenAPI::fromJsonValue(m_inner_horizontal, json[QString("InnerHorizontal")]);
    m_inner_horizontal_isSet = !json[QString("InnerHorizontal")].isNull() && m_inner_horizontal_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("Left")]);
    m_left_isSet = !json[QString("Left")].isNull() && m_left_isValid;

    m_right_isValid = ::OpenAPI::fromJsonValue(m_right, json[QString("Right")]);
    m_right_isSet = !json[QString("Right")].isNull() && m_right_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("Top")]);
    m_top_isSet = !json[QString("Top")].isNull() && m_top_isValid;

    m_bottom_isValid = ::OpenAPI::fromJsonValue(m_bottom, json[QString("Bottom")]);
    m_bottom_isSet = !json[QString("Bottom")].isNull() && m_bottom_isValid;
}

QString OAITableSideBorderOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableSideBorderOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_inner_vertical.isSet()) {
        obj.insert(QString("InnerVertical"), ::OpenAPI::toJsonValue(m_inner_vertical));
    }
    if (m_inner_horizontal.isSet()) {
        obj.insert(QString("InnerHorizontal"), ::OpenAPI::toJsonValue(m_inner_horizontal));
    }
    if (m_left.isSet()) {
        obj.insert(QString("Left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_right.isSet()) {
        obj.insert(QString("Right"), ::OpenAPI::toJsonValue(m_right));
    }
    if (m_top.isSet()) {
        obj.insert(QString("Top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_bottom.isSet()) {
        obj.insert(QString("Bottom"), ::OpenAPI::toJsonValue(m_bottom));
    }
    return obj;
}

OAITableSideBorderOptions_InnerVertical OAITableSideBorderOptions::getInnerVertical() const {
    return m_inner_vertical;
}
void OAITableSideBorderOptions::setInnerVertical(const OAITableSideBorderOptions_InnerVertical &inner_vertical) {
    m_inner_vertical = inner_vertical;
    m_inner_vertical_isSet = true;
}

bool OAITableSideBorderOptions::is_inner_vertical_Set() const{
    return m_inner_vertical_isSet;
}

bool OAITableSideBorderOptions::is_inner_vertical_Valid() const{
    return m_inner_vertical_isValid;
}

OAITableSideBorderOptions_InnerHorizontal OAITableSideBorderOptions::getInnerHorizontal() const {
    return m_inner_horizontal;
}
void OAITableSideBorderOptions::setInnerHorizontal(const OAITableSideBorderOptions_InnerHorizontal &inner_horizontal) {
    m_inner_horizontal = inner_horizontal;
    m_inner_horizontal_isSet = true;
}

bool OAITableSideBorderOptions::is_inner_horizontal_Set() const{
    return m_inner_horizontal_isSet;
}

bool OAITableSideBorderOptions::is_inner_horizontal_Valid() const{
    return m_inner_horizontal_isValid;
}

OAITableSideBorderOptions_Left OAITableSideBorderOptions::getLeft() const {
    return m_left;
}
void OAITableSideBorderOptions::setLeft(const OAITableSideBorderOptions_Left &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAITableSideBorderOptions::is_left_Set() const{
    return m_left_isSet;
}

bool OAITableSideBorderOptions::is_left_Valid() const{
    return m_left_isValid;
}

OAITableSideBorderOptions_Right OAITableSideBorderOptions::getRight() const {
    return m_right;
}
void OAITableSideBorderOptions::setRight(const OAITableSideBorderOptions_Right &right) {
    m_right = right;
    m_right_isSet = true;
}

bool OAITableSideBorderOptions::is_right_Set() const{
    return m_right_isSet;
}

bool OAITableSideBorderOptions::is_right_Valid() const{
    return m_right_isValid;
}

OAITableSideBorderOptions_Top OAITableSideBorderOptions::getTop() const {
    return m_top;
}
void OAITableSideBorderOptions::setTop(const OAITableSideBorderOptions_Top &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAITableSideBorderOptions::is_top_Set() const{
    return m_top_isSet;
}

bool OAITableSideBorderOptions::is_top_Valid() const{
    return m_top_isValid;
}

OAITableSideBorderOptions_Bottom OAITableSideBorderOptions::getBottom() const {
    return m_bottom;
}
void OAITableSideBorderOptions::setBottom(const OAITableSideBorderOptions_Bottom &bottom) {
    m_bottom = bottom;
    m_bottom_isSet = true;
}

bool OAITableSideBorderOptions::is_bottom_Set() const{
    return m_bottom_isSet;
}

bool OAITableSideBorderOptions::is_bottom_Valid() const{
    return m_bottom_isValid;
}

bool OAITableSideBorderOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inner_vertical.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inner_horizontal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableSideBorderOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
