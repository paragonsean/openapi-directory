/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnSchema::OAIColumnSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnSchema::OAIColumnSchema() {
    this->initializeModel();
}

OAIColumnSchema::~OAIColumnSchema() {}

void OAIColumnSchema::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_geographic_role_isSet = false;
    m_geographic_role_isValid = false;
}

void OAIColumnSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnSchema::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("DataType")]);
    m_data_type_isSet = !json[QString("DataType")].isNull() && m_data_type_isValid;

    m_geographic_role_isValid = ::OpenAPI::fromJsonValue(m_geographic_role, json[QString("GeographicRole")]);
    m_geographic_role_isSet = !json[QString("GeographicRole")].isNull() && m_geographic_role_isValid;
}

QString OAIColumnSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("DataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_geographic_role_isSet) {
        obj.insert(QString("GeographicRole"), ::OpenAPI::toJsonValue(m_geographic_role));
    }
    return obj;
}

QString OAIColumnSchema::getName() const {
    return m_name;
}
void OAIColumnSchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIColumnSchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAIColumnSchema::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIColumnSchema::getDataType() const {
    return m_data_type;
}
void OAIColumnSchema::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIColumnSchema::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIColumnSchema::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIColumnSchema::getGeographicRole() const {
    return m_geographic_role;
}
void OAIColumnSchema::setGeographicRole(const QString &geographic_role) {
    m_geographic_role = geographic_role;
    m_geographic_role_isSet = true;
}

bool OAIColumnSchema::is_geographic_role_Set() const{
    return m_geographic_role_isSet;
}

bool OAIColumnSchema::is_geographic_role_Valid() const{
    return m_geographic_role_isValid;
}

bool OAIColumnSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geographic_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
