/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardFilterAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardFilterAttribute::OAIDashboardFilterAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardFilterAttribute::OAIDashboardFilterAttribute() {
    this->initializeModel();
}

OAIDashboardFilterAttribute::~OAIDashboardFilterAttribute() {}

void OAIDashboardFilterAttribute::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDashboardFilterAttribute::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDashboardFilterAttribute::fromJson(QString jsonString) {
    
    if ( jsonString.compare("QUICKSIGHT_USER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDashboardFilterAttribute::QUICKSIGHT_USER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUICKSIGHT_VIEWER_OR_OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDashboardFilterAttribute::QUICKSIGHT_VIEWER_OR_OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECT_QUICKSIGHT_VIEWER_OR_OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDashboardFilterAttribute::DIRECT_QUICKSIGHT_VIEWER_OR_OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUICKSIGHT_OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDashboardFilterAttribute::QUICKSIGHT_OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECT_QUICKSIGHT_OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDashboardFilterAttribute::DIRECT_QUICKSIGHT_OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECT_QUICKSIGHT_SOLE_OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDashboardFilterAttribute::DIRECT_QUICKSIGHT_SOLE_OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DASHBOARD_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDashboardFilterAttribute::DASHBOARD_NAME;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDashboardFilterAttribute::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDashboardFilterAttribute::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDashboardFilterAttribute::QUICKSIGHT_USER:
            val = "QUICKSIGHT_USER";
            break;
        case eOAIDashboardFilterAttribute::QUICKSIGHT_VIEWER_OR_OWNER:
            val = "QUICKSIGHT_VIEWER_OR_OWNER";
            break;
        case eOAIDashboardFilterAttribute::DIRECT_QUICKSIGHT_VIEWER_OR_OWNER:
            val = "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER";
            break;
        case eOAIDashboardFilterAttribute::QUICKSIGHT_OWNER:
            val = "QUICKSIGHT_OWNER";
            break;
        case eOAIDashboardFilterAttribute::DIRECT_QUICKSIGHT_OWNER:
            val = "DIRECT_QUICKSIGHT_OWNER";
            break;
        case eOAIDashboardFilterAttribute::DIRECT_QUICKSIGHT_SOLE_OWNER:
            val = "DIRECT_QUICKSIGHT_SOLE_OWNER";
            break;
        case eOAIDashboardFilterAttribute::DASHBOARD_NAME:
            val = "DASHBOARD_NAME";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDashboardFilterAttribute::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDashboardFilterAttribute::eOAIDashboardFilterAttribute OAIDashboardFilterAttribute::getValue() const {
    return m_value;
}

void OAIDashboardFilterAttribute::setValue(const OAIDashboardFilterAttribute::eOAIDashboardFilterAttribute& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDashboardFilterAttribute::isSet() const {
    
    return m_value_isSet;
}

bool OAIDashboardFilterAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
