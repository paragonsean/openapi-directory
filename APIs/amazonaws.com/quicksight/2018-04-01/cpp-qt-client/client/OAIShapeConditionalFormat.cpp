/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShapeConditionalFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShapeConditionalFormat::OAIShapeConditionalFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShapeConditionalFormat::OAIShapeConditionalFormat() {
    this->initializeModel();
}

OAIShapeConditionalFormat::~OAIShapeConditionalFormat() {}

void OAIShapeConditionalFormat::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;
}

void OAIShapeConditionalFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShapeConditionalFormat::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;
}

QString OAIShapeConditionalFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShapeConditionalFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    return obj;
}

OAIShapeConditionalFormat_BackgroundColor OAIShapeConditionalFormat::getBackgroundColor() const {
    return m_background_color;
}
void OAIShapeConditionalFormat::setBackgroundColor(const OAIShapeConditionalFormat_BackgroundColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIShapeConditionalFormat::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIShapeConditionalFormat::is_background_color_Valid() const{
    return m_background_color_isValid;
}

bool OAIShapeConditionalFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShapeConditionalFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_background_color_isValid && true;
}

} // namespace OpenAPI
