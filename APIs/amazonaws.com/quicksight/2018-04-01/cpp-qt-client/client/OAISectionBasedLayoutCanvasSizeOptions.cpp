/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISectionBasedLayoutCanvasSizeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISectionBasedLayoutCanvasSizeOptions::OAISectionBasedLayoutCanvasSizeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISectionBasedLayoutCanvasSizeOptions::OAISectionBasedLayoutCanvasSizeOptions() {
    this->initializeModel();
}

OAISectionBasedLayoutCanvasSizeOptions::~OAISectionBasedLayoutCanvasSizeOptions() {}

void OAISectionBasedLayoutCanvasSizeOptions::initializeModel() {

    m_paper_canvas_size_options_isSet = false;
    m_paper_canvas_size_options_isValid = false;
}

void OAISectionBasedLayoutCanvasSizeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISectionBasedLayoutCanvasSizeOptions::fromJsonObject(QJsonObject json) {

    m_paper_canvas_size_options_isValid = ::OpenAPI::fromJsonValue(m_paper_canvas_size_options, json[QString("PaperCanvasSizeOptions")]);
    m_paper_canvas_size_options_isSet = !json[QString("PaperCanvasSizeOptions")].isNull() && m_paper_canvas_size_options_isValid;
}

QString OAISectionBasedLayoutCanvasSizeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISectionBasedLayoutCanvasSizeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_paper_canvas_size_options.isSet()) {
        obj.insert(QString("PaperCanvasSizeOptions"), ::OpenAPI::toJsonValue(m_paper_canvas_size_options));
    }
    return obj;
}

OAISectionBasedLayoutCanvasSizeOptions_PaperCanvasSizeOptions OAISectionBasedLayoutCanvasSizeOptions::getPaperCanvasSizeOptions() const {
    return m_paper_canvas_size_options;
}
void OAISectionBasedLayoutCanvasSizeOptions::setPaperCanvasSizeOptions(const OAISectionBasedLayoutCanvasSizeOptions_PaperCanvasSizeOptions &paper_canvas_size_options) {
    m_paper_canvas_size_options = paper_canvas_size_options;
    m_paper_canvas_size_options_isSet = true;
}

bool OAISectionBasedLayoutCanvasSizeOptions::is_paper_canvas_size_options_Set() const{
    return m_paper_canvas_size_options_isSet;
}

bool OAISectionBasedLayoutCanvasSizeOptions::is_paper_canvas_size_options_Valid() const{
    return m_paper_canvas_size_options_isValid;
}

bool OAISectionBasedLayoutCanvasSizeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_paper_canvas_size_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISectionBasedLayoutCanvasSizeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
