/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnConfiguration_FormatConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnConfiguration_FormatConfiguration::OAIColumnConfiguration_FormatConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnConfiguration_FormatConfiguration::OAIColumnConfiguration_FormatConfiguration() {
    this->initializeModel();
}

OAIColumnConfiguration_FormatConfiguration::~OAIColumnConfiguration_FormatConfiguration() {}

void OAIColumnConfiguration_FormatConfiguration::initializeModel() {

    m_string_format_configuration_isSet = false;
    m_string_format_configuration_isValid = false;

    m_number_format_configuration_isSet = false;
    m_number_format_configuration_isValid = false;

    m_date_time_format_configuration_isSet = false;
    m_date_time_format_configuration_isValid = false;
}

void OAIColumnConfiguration_FormatConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnConfiguration_FormatConfiguration::fromJsonObject(QJsonObject json) {

    m_string_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_string_format_configuration, json[QString("StringFormatConfiguration")]);
    m_string_format_configuration_isSet = !json[QString("StringFormatConfiguration")].isNull() && m_string_format_configuration_isValid;

    m_number_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_number_format_configuration, json[QString("NumberFormatConfiguration")]);
    m_number_format_configuration_isSet = !json[QString("NumberFormatConfiguration")].isNull() && m_number_format_configuration_isValid;

    m_date_time_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_date_time_format_configuration, json[QString("DateTimeFormatConfiguration")]);
    m_date_time_format_configuration_isSet = !json[QString("DateTimeFormatConfiguration")].isNull() && m_date_time_format_configuration_isValid;
}

QString OAIColumnConfiguration_FormatConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnConfiguration_FormatConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_string_format_configuration.isSet()) {
        obj.insert(QString("StringFormatConfiguration"), ::OpenAPI::toJsonValue(m_string_format_configuration));
    }
    if (m_number_format_configuration.isSet()) {
        obj.insert(QString("NumberFormatConfiguration"), ::OpenAPI::toJsonValue(m_number_format_configuration));
    }
    if (m_date_time_format_configuration.isSet()) {
        obj.insert(QString("DateTimeFormatConfiguration"), ::OpenAPI::toJsonValue(m_date_time_format_configuration));
    }
    return obj;
}

OAIFormatConfiguration_StringFormatConfiguration OAIColumnConfiguration_FormatConfiguration::getStringFormatConfiguration() const {
    return m_string_format_configuration;
}
void OAIColumnConfiguration_FormatConfiguration::setStringFormatConfiguration(const OAIFormatConfiguration_StringFormatConfiguration &string_format_configuration) {
    m_string_format_configuration = string_format_configuration;
    m_string_format_configuration_isSet = true;
}

bool OAIColumnConfiguration_FormatConfiguration::is_string_format_configuration_Set() const{
    return m_string_format_configuration_isSet;
}

bool OAIColumnConfiguration_FormatConfiguration::is_string_format_configuration_Valid() const{
    return m_string_format_configuration_isValid;
}

OAIFormatConfiguration_NumberFormatConfiguration OAIColumnConfiguration_FormatConfiguration::getNumberFormatConfiguration() const {
    return m_number_format_configuration;
}
void OAIColumnConfiguration_FormatConfiguration::setNumberFormatConfiguration(const OAIFormatConfiguration_NumberFormatConfiguration &number_format_configuration) {
    m_number_format_configuration = number_format_configuration;
    m_number_format_configuration_isSet = true;
}

bool OAIColumnConfiguration_FormatConfiguration::is_number_format_configuration_Set() const{
    return m_number_format_configuration_isSet;
}

bool OAIColumnConfiguration_FormatConfiguration::is_number_format_configuration_Valid() const{
    return m_number_format_configuration_isValid;
}

OAIFormatConfiguration_DateTimeFormatConfiguration OAIColumnConfiguration_FormatConfiguration::getDateTimeFormatConfiguration() const {
    return m_date_time_format_configuration;
}
void OAIColumnConfiguration_FormatConfiguration::setDateTimeFormatConfiguration(const OAIFormatConfiguration_DateTimeFormatConfiguration &date_time_format_configuration) {
    m_date_time_format_configuration = date_time_format_configuration;
    m_date_time_format_configuration_isSet = true;
}

bool OAIColumnConfiguration_FormatConfiguration::is_date_time_format_configuration_Set() const{
    return m_date_time_format_configuration_isSet;
}

bool OAIColumnConfiguration_FormatConfiguration::is_date_time_format_configuration_Valid() const{
    return m_date_time_format_configuration_isValid;
}

bool OAIColumnConfiguration_FormatConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnConfiguration_FormatConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
