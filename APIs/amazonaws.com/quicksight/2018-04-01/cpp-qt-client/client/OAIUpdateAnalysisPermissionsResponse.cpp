/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAnalysisPermissionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAnalysisPermissionsResponse::OAIUpdateAnalysisPermissionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAnalysisPermissionsResponse::OAIUpdateAnalysisPermissionsResponse() {
    this->initializeModel();
}

OAIUpdateAnalysisPermissionsResponse::~OAIUpdateAnalysisPermissionsResponse() {}

void OAIUpdateAnalysisPermissionsResponse::initializeModel() {

    m_analysis_arn_isSet = false;
    m_analysis_arn_isValid = false;

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateAnalysisPermissionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAnalysisPermissionsResponse::fromJsonObject(QJsonObject json) {

    m_analysis_arn_isValid = ::OpenAPI::fromJsonValue(m_analysis_arn, json[QString("AnalysisArn")]);
    m_analysis_arn_isSet = !json[QString("AnalysisArn")].isNull() && m_analysis_arn_isValid;

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIUpdateAnalysisPermissionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAnalysisPermissionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_arn_isSet) {
        obj.insert(QString("AnalysisArn"), ::OpenAPI::toJsonValue(m_analysis_arn));
    }
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUpdateAnalysisPermissionsResponse::getAnalysisArn() const {
    return m_analysis_arn;
}
void OAIUpdateAnalysisPermissionsResponse::setAnalysisArn(const QString &analysis_arn) {
    m_analysis_arn = analysis_arn;
    m_analysis_arn_isSet = true;
}

bool OAIUpdateAnalysisPermissionsResponse::is_analysis_arn_Set() const{
    return m_analysis_arn_isSet;
}

bool OAIUpdateAnalysisPermissionsResponse::is_analysis_arn_Valid() const{
    return m_analysis_arn_isValid;
}

QString OAIUpdateAnalysisPermissionsResponse::getAnalysisId() const {
    return m_analysis_id;
}
void OAIUpdateAnalysisPermissionsResponse::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIUpdateAnalysisPermissionsResponse::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIUpdateAnalysisPermissionsResponse::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

QList OAIUpdateAnalysisPermissionsResponse::getPermissions() const {
    return m_permissions;
}
void OAIUpdateAnalysisPermissionsResponse::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIUpdateAnalysisPermissionsResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIUpdateAnalysisPermissionsResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIUpdateAnalysisPermissionsResponse::getRequestId() const {
    return m_request_id;
}
void OAIUpdateAnalysisPermissionsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIUpdateAnalysisPermissionsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIUpdateAnalysisPermissionsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIUpdateAnalysisPermissionsResponse::getStatus() const {
    return m_status;
}
void OAIUpdateAnalysisPermissionsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateAnalysisPermissionsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateAnalysisPermissionsResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateAnalysisPermissionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAnalysisPermissionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
