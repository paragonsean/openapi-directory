/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateEmbedUrlForAnonymousUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateEmbedUrlForAnonymousUserRequest::OAIGenerateEmbedUrlForAnonymousUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateEmbedUrlForAnonymousUserRequest::OAIGenerateEmbedUrlForAnonymousUserRequest() {
    this->initializeModel();
}

OAIGenerateEmbedUrlForAnonymousUserRequest::~OAIGenerateEmbedUrlForAnonymousUserRequest() {}

void OAIGenerateEmbedUrlForAnonymousUserRequest::initializeModel() {

    m_session_lifetime_in_minutes_isSet = false;
    m_session_lifetime_in_minutes_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_session_tags_isSet = false;
    m_session_tags_isValid = false;

    m_authorized_resource_arns_isSet = false;
    m_authorized_resource_arns_isValid = false;

    m_experience_configuration_isSet = false;
    m_experience_configuration_isValid = false;

    m_allowed_domains_isSet = false;
    m_allowed_domains_isValid = false;
}

void OAIGenerateEmbedUrlForAnonymousUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateEmbedUrlForAnonymousUserRequest::fromJsonObject(QJsonObject json) {

    m_session_lifetime_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_session_lifetime_in_minutes, json[QString("SessionLifetimeInMinutes")]);
    m_session_lifetime_in_minutes_isSet = !json[QString("SessionLifetimeInMinutes")].isNull() && m_session_lifetime_in_minutes_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_session_tags_isValid = ::OpenAPI::fromJsonValue(m_session_tags, json[QString("SessionTags")]);
    m_session_tags_isSet = !json[QString("SessionTags")].isNull() && m_session_tags_isValid;

    m_authorized_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_authorized_resource_arns, json[QString("AuthorizedResourceArns")]);
    m_authorized_resource_arns_isSet = !json[QString("AuthorizedResourceArns")].isNull() && m_authorized_resource_arns_isValid;

    m_experience_configuration_isValid = ::OpenAPI::fromJsonValue(m_experience_configuration, json[QString("ExperienceConfiguration")]);
    m_experience_configuration_isSet = !json[QString("ExperienceConfiguration")].isNull() && m_experience_configuration_isValid;

    m_allowed_domains_isValid = ::OpenAPI::fromJsonValue(m_allowed_domains, json[QString("AllowedDomains")]);
    m_allowed_domains_isSet = !json[QString("AllowedDomains")].isNull() && m_allowed_domains_isValid;
}

QString OAIGenerateEmbedUrlForAnonymousUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateEmbedUrlForAnonymousUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_session_lifetime_in_minutes_isSet) {
        obj.insert(QString("SessionLifetimeInMinutes"), ::OpenAPI::toJsonValue(m_session_lifetime_in_minutes));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_session_tags.isSet()) {
        obj.insert(QString("SessionTags"), ::OpenAPI::toJsonValue(m_session_tags));
    }
    if (m_authorized_resource_arns.isSet()) {
        obj.insert(QString("AuthorizedResourceArns"), ::OpenAPI::toJsonValue(m_authorized_resource_arns));
    }
    if (m_experience_configuration.isSet()) {
        obj.insert(QString("ExperienceConfiguration"), ::OpenAPI::toJsonValue(m_experience_configuration));
    }
    if (m_allowed_domains.isSet()) {
        obj.insert(QString("AllowedDomains"), ::OpenAPI::toJsonValue(m_allowed_domains));
    }
    return obj;
}

qint32 OAIGenerateEmbedUrlForAnonymousUserRequest::getSessionLifetimeInMinutes() const {
    return m_session_lifetime_in_minutes;
}
void OAIGenerateEmbedUrlForAnonymousUserRequest::setSessionLifetimeInMinutes(const qint32 &session_lifetime_in_minutes) {
    m_session_lifetime_in_minutes = session_lifetime_in_minutes;
    m_session_lifetime_in_minutes_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_session_lifetime_in_minutes_Set() const{
    return m_session_lifetime_in_minutes_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_session_lifetime_in_minutes_Valid() const{
    return m_session_lifetime_in_minutes_isValid;
}

QString OAIGenerateEmbedUrlForAnonymousUserRequest::getRNamespace() const {
    return m_r_namespace;
}
void OAIGenerateEmbedUrlForAnonymousUserRequest::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QList OAIGenerateEmbedUrlForAnonymousUserRequest::getSessionTags() const {
    return m_session_tags;
}
void OAIGenerateEmbedUrlForAnonymousUserRequest::setSessionTags(const QList &session_tags) {
    m_session_tags = session_tags;
    m_session_tags_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_session_tags_Set() const{
    return m_session_tags_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_session_tags_Valid() const{
    return m_session_tags_isValid;
}

QList OAIGenerateEmbedUrlForAnonymousUserRequest::getAuthorizedResourceArns() const {
    return m_authorized_resource_arns;
}
void OAIGenerateEmbedUrlForAnonymousUserRequest::setAuthorizedResourceArns(const QList &authorized_resource_arns) {
    m_authorized_resource_arns = authorized_resource_arns;
    m_authorized_resource_arns_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_authorized_resource_arns_Set() const{
    return m_authorized_resource_arns_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_authorized_resource_arns_Valid() const{
    return m_authorized_resource_arns_isValid;
}

OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration OAIGenerateEmbedUrlForAnonymousUserRequest::getExperienceConfiguration() const {
    return m_experience_configuration;
}
void OAIGenerateEmbedUrlForAnonymousUserRequest::setExperienceConfiguration(const OAIGenerateEmbedUrlForAnonymousUserRequest_ExperienceConfiguration &experience_configuration) {
    m_experience_configuration = experience_configuration;
    m_experience_configuration_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_experience_configuration_Set() const{
    return m_experience_configuration_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_experience_configuration_Valid() const{
    return m_experience_configuration_isValid;
}

QList OAIGenerateEmbedUrlForAnonymousUserRequest::getAllowedDomains() const {
    return m_allowed_domains;
}
void OAIGenerateEmbedUrlForAnonymousUserRequest::setAllowedDomains(const QList &allowed_domains) {
    m_allowed_domains = allowed_domains;
    m_allowed_domains_isSet = true;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_allowed_domains_Set() const{
    return m_allowed_domains_isSet;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::is_allowed_domains_Valid() const{
    return m_allowed_domains_isValid;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_lifetime_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_resource_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_domains.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateEmbedUrlForAnonymousUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_namespace_isValid && m_authorized_resource_arns_isValid && m_experience_configuration_isValid && true;
}

} // namespace OpenAPI
