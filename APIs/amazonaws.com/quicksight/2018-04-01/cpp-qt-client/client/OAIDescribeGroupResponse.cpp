/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeGroupResponse::OAIDescribeGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeGroupResponse::OAIDescribeGroupResponse() {
    this->initializeModel();
}

OAIDescribeGroupResponse::~OAIDescribeGroupResponse() {}

void OAIDescribeGroupResponse::initializeModel() {

    m_group_isSet = false;
    m_group_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeGroupResponse::fromJsonObject(QJsonObject json) {

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("Group")]);
    m_group_isSet = !json[QString("Group")].isNull() && m_group_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_group.isSet()) {
        obj.insert(QString("Group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICreateGroupResponse_Group OAIDescribeGroupResponse::getGroup() const {
    return m_group;
}
void OAIDescribeGroupResponse::setGroup(const OAICreateGroupResponse_Group &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIDescribeGroupResponse::is_group_Set() const{
    return m_group_isSet;
}

bool OAIDescribeGroupResponse::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIDescribeGroupResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeGroupResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeGroupResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeGroupResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeGroupResponse::getStatus() const {
    return m_status;
}
void OAIDescribeGroupResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeGroupResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeGroupResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
