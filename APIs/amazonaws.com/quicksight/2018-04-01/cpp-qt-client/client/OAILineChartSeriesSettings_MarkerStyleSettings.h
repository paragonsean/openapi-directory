/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILineChartSeriesSettings_MarkerStyleSettings.h
 *
 * 
 */

#ifndef OAILineChartSeriesSettings_MarkerStyleSettings_H
#define OAILineChartSeriesSettings_MarkerStyleSettings_H

#include <QJsonObject>

#include "OAILineChartMarkerShape.h"
#include "OAIVisibility.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILineChartSeriesSettings_MarkerStyleSettings : public OAIObject {
public:
    OAILineChartSeriesSettings_MarkerStyleSettings();
    OAILineChartSeriesSettings_MarkerStyleSettings(QString json);
    ~OAILineChartSeriesSettings_MarkerStyleSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIVisibility getMarkerVisibility() const;
    void setMarkerVisibility(const OAIVisibility &marker_visibility);
    bool is_marker_visibility_Set() const;
    bool is_marker_visibility_Valid() const;

    OAILineChartMarkerShape getMarkerShape() const;
    void setMarkerShape(const OAILineChartMarkerShape &marker_shape);
    bool is_marker_shape_Set() const;
    bool is_marker_shape_Valid() const;

    QString getMarkerSize() const;
    void setMarkerSize(const QString &marker_size);
    bool is_marker_size_Set() const;
    bool is_marker_size_Valid() const;

    QString getMarkerColor() const;
    void setMarkerColor(const QString &marker_color);
    bool is_marker_color_Set() const;
    bool is_marker_color_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIVisibility m_marker_visibility;
    bool m_marker_visibility_isSet;
    bool m_marker_visibility_isValid;

    OAILineChartMarkerShape m_marker_shape;
    bool m_marker_shape_isSet;
    bool m_marker_shape_isValid;

    QString m_marker_size;
    bool m_marker_size_isSet;
    bool m_marker_size_isValid;

    QString m_marker_color;
    bool m_marker_color_isSet;
    bool m_marker_color_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILineChartSeriesSettings_MarkerStyleSettings)

#endif // OAILineChartSeriesSettings_MarkerStyleSettings_H
