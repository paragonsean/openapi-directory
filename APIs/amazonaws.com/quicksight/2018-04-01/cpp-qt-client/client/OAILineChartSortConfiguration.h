/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILineChartSortConfiguration.h
 *
 * The sort configuration of a line chart.
 */

#ifndef OAILineChartSortConfiguration_H
#define OAILineChartSortConfiguration_H

#include <QJsonObject>

#include "OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration.h"
#include "OAILineChartSortConfiguration_CategoryItemsLimitConfiguration.h"
#include "OAILineChartSortConfiguration_ColorItemsLimitConfiguration.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILineChartSortConfiguration_CategoryItemsLimitConfiguration;
class OAILineChartSortConfiguration_ColorItemsLimitConfiguration;
class OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration;

class OAILineChartSortConfiguration : public OAIObject {
public:
    OAILineChartSortConfiguration();
    OAILineChartSortConfiguration(QString json);
    ~OAILineChartSortConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCategorySort() const;
    void setCategorySort(const QList &category_sort);
    bool is_category_sort_Set() const;
    bool is_category_sort_Valid() const;

    OAILineChartSortConfiguration_CategoryItemsLimitConfiguration getCategoryItemsLimitConfiguration() const;
    void setCategoryItemsLimitConfiguration(const OAILineChartSortConfiguration_CategoryItemsLimitConfiguration &category_items_limit_configuration);
    bool is_category_items_limit_configuration_Set() const;
    bool is_category_items_limit_configuration_Valid() const;

    OAILineChartSortConfiguration_ColorItemsLimitConfiguration getColorItemsLimitConfiguration() const;
    void setColorItemsLimitConfiguration(const OAILineChartSortConfiguration_ColorItemsLimitConfiguration &color_items_limit_configuration);
    bool is_color_items_limit_configuration_Set() const;
    bool is_color_items_limit_configuration_Valid() const;

    QList getSmallMultiplesSort() const;
    void setSmallMultiplesSort(const QList &small_multiples_sort);
    bool is_small_multiples_sort_Set() const;
    bool is_small_multiples_sort_Valid() const;

    OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration getSmallMultiplesLimitConfiguration() const;
    void setSmallMultiplesLimitConfiguration(const OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration &small_multiples_limit_configuration);
    bool is_small_multiples_limit_configuration_Set() const;
    bool is_small_multiples_limit_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_category_sort;
    bool m_category_sort_isSet;
    bool m_category_sort_isValid;

    OAILineChartSortConfiguration_CategoryItemsLimitConfiguration m_category_items_limit_configuration;
    bool m_category_items_limit_configuration_isSet;
    bool m_category_items_limit_configuration_isValid;

    OAILineChartSortConfiguration_ColorItemsLimitConfiguration m_color_items_limit_configuration;
    bool m_color_items_limit_configuration_isSet;
    bool m_color_items_limit_configuration_isValid;

    QList m_small_multiples_sort;
    bool m_small_multiples_sort_isSet;
    bool m_small_multiples_sort_isValid;

    OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration m_small_multiples_limit_configuration;
    bool m_small_multiples_limit_configuration_isSet;
    bool m_small_multiples_limit_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILineChartSortConfiguration)

#endif // OAILineChartSortConfiguration_H
