/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKPIVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKPIVisual_ChartConfiguration::OAIKPIVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKPIVisual_ChartConfiguration::OAIKPIVisual_ChartConfiguration() {
    this->initializeModel();
}

OAIKPIVisual_ChartConfiguration::~OAIKPIVisual_ChartConfiguration() {}

void OAIKPIVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_kpi_options_isSet = false;
    m_kpi_options_isValid = false;
}

void OAIKPIVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKPIVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_kpi_options_isValid = ::OpenAPI::fromJsonValue(m_kpi_options, json[QString("KPIOptions")]);
    m_kpi_options_isSet = !json[QString("KPIOptions")].isNull() && m_kpi_options_isValid;
}

QString OAIKPIVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKPIVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_kpi_options.isSet()) {
        obj.insert(QString("KPIOptions"), ::OpenAPI::toJsonValue(m_kpi_options));
    }
    return obj;
}

OAIKPIConfiguration_FieldWells OAIKPIVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIKPIVisual_ChartConfiguration::setFieldWells(const OAIKPIConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIKPIVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIKPIVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIKPIConfiguration_SortConfiguration OAIKPIVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIKPIVisual_ChartConfiguration::setSortConfiguration(const OAIKPIConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIKPIVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIKPIVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIKPIConfiguration_KPIOptions OAIKPIVisual_ChartConfiguration::getKpiOptions() const {
    return m_kpi_options;
}
void OAIKPIVisual_ChartConfiguration::setKpiOptions(const OAIKPIConfiguration_KPIOptions &kpi_options) {
    m_kpi_options = kpi_options;
    m_kpi_options_isSet = true;
}

bool OAIKPIVisual_ChartConfiguration::is_kpi_options_Set() const{
    return m_kpi_options_isSet;
}

bool OAIKPIVisual_ChartConfiguration::is_kpi_options_Valid() const{
    return m_kpi_options_isValid;
}

bool OAIKPIVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kpi_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKPIVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
