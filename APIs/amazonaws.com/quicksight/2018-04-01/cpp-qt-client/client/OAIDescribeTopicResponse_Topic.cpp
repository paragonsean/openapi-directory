/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTopicResponse_Topic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTopicResponse_Topic::OAIDescribeTopicResponse_Topic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTopicResponse_Topic::OAIDescribeTopicResponse_Topic() {
    this->initializeModel();
}

OAIDescribeTopicResponse_Topic::~OAIDescribeTopicResponse_Topic() {}

void OAIDescribeTopicResponse_Topic::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;
}

void OAIDescribeTopicResponse_Topic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTopicResponse_Topic::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("DataSets")]);
    m_data_sets_isSet = !json[QString("DataSets")].isNull() && m_data_sets_isValid;
}

QString OAIDescribeTopicResponse_Topic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTopicResponse_Topic::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_data_sets.isSet()) {
        obj.insert(QString("DataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    return obj;
}

QString OAIDescribeTopicResponse_Topic::getName() const {
    return m_name;
}
void OAIDescribeTopicResponse_Topic::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeTopicResponse_Topic::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeTopicResponse_Topic::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeTopicResponse_Topic::getDescription() const {
    return m_description;
}
void OAIDescribeTopicResponse_Topic::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeTopicResponse_Topic::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeTopicResponse_Topic::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIDescribeTopicResponse_Topic::getDataSets() const {
    return m_data_sets;
}
void OAIDescribeTopicResponse_Topic::setDataSets(const QList &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAIDescribeTopicResponse_Topic::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAIDescribeTopicResponse_Topic::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

bool OAIDescribeTopicResponse_Topic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTopicResponse_Topic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
