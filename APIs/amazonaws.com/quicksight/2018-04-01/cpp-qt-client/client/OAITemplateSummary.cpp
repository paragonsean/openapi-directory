/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSummary::OAITemplateSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSummary::OAITemplateSummary() {
    this->initializeModel();
}

OAITemplateSummary::~OAITemplateSummary() {}

void OAITemplateSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_latest_version_number_isSet = false;
    m_latest_version_number_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAITemplateSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("TemplateId")]);
    m_template_id_isSet = !json[QString("TemplateId")].isNull() && m_template_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_latest_version_number_isValid = ::OpenAPI::fromJsonValue(m_latest_version_number, json[QString("LatestVersionNumber")]);
    m_latest_version_number_isSet = !json[QString("LatestVersionNumber")].isNull() && m_latest_version_number_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAITemplateSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("TemplateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_latest_version_number_isSet) {
        obj.insert(QString("LatestVersionNumber"), ::OpenAPI::toJsonValue(m_latest_version_number));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAITemplateSummary::getArn() const {
    return m_arn;
}
void OAITemplateSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAITemplateSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAITemplateSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAITemplateSummary::getTemplateId() const {
    return m_template_id;
}
void OAITemplateSummary::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAITemplateSummary::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAITemplateSummary::is_template_id_Valid() const{
    return m_template_id_isValid;
}

QString OAITemplateSummary::getName() const {
    return m_name;
}
void OAITemplateSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplateSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplateSummary::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITemplateSummary::getLatestVersionNumber() const {
    return m_latest_version_number;
}
void OAITemplateSummary::setLatestVersionNumber(const qint32 &latest_version_number) {
    m_latest_version_number = latest_version_number;
    m_latest_version_number_isSet = true;
}

bool OAITemplateSummary::is_latest_version_number_Set() const{
    return m_latest_version_number_isSet;
}

bool OAITemplateSummary::is_latest_version_number_Valid() const{
    return m_latest_version_number_isValid;
}

QDateTime OAITemplateSummary::getCreatedTime() const {
    return m_created_time;
}
void OAITemplateSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAITemplateSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAITemplateSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAITemplateSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAITemplateSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAITemplateSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAITemplateSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAITemplateSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
