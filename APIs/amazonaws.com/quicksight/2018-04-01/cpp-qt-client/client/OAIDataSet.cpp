/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSet::OAIDataSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSet::OAIDataSet() {
    this->initializeModel();
}

OAIDataSet::~OAIDataSet() {}

void OAIDataSet::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_physical_table_map_isSet = false;
    m_physical_table_map_isValid = false;

    m_logical_table_map_isSet = false;
    m_logical_table_map_isValid = false;

    m_output_columns_isSet = false;
    m_output_columns_isValid = false;

    m_import_mode_isSet = false;
    m_import_mode_isValid = false;

    m_consumed_spice_capacity_in_bytes_isSet = false;
    m_consumed_spice_capacity_in_bytes_isValid = false;

    m_column_groups_isSet = false;
    m_column_groups_isValid = false;

    m_field_folders_isSet = false;
    m_field_folders_isValid = false;

    m_row_level_permission_data_set_isSet = false;
    m_row_level_permission_data_set_isValid = false;

    m_row_level_permission_tag_configuration_isSet = false;
    m_row_level_permission_tag_configuration_isValid = false;

    m_column_level_permission_rules_isSet = false;
    m_column_level_permission_rules_isValid = false;

    m_data_set_usage_configuration_isSet = false;
    m_data_set_usage_configuration_isValid = false;

    m_dataset_parameters_isSet = false;
    m_dataset_parameters_isValid = false;
}

void OAIDataSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSet::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("DataSetId")]);
    m_data_set_id_isSet = !json[QString("DataSetId")].isNull() && m_data_set_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_physical_table_map_isValid = ::OpenAPI::fromJsonValue(m_physical_table_map, json[QString("PhysicalTableMap")]);
    m_physical_table_map_isSet = !json[QString("PhysicalTableMap")].isNull() && m_physical_table_map_isValid;

    m_logical_table_map_isValid = ::OpenAPI::fromJsonValue(m_logical_table_map, json[QString("LogicalTableMap")]);
    m_logical_table_map_isSet = !json[QString("LogicalTableMap")].isNull() && m_logical_table_map_isValid;

    m_output_columns_isValid = ::OpenAPI::fromJsonValue(m_output_columns, json[QString("OutputColumns")]);
    m_output_columns_isSet = !json[QString("OutputColumns")].isNull() && m_output_columns_isValid;

    m_import_mode_isValid = ::OpenAPI::fromJsonValue(m_import_mode, json[QString("ImportMode")]);
    m_import_mode_isSet = !json[QString("ImportMode")].isNull() && m_import_mode_isValid;

    m_consumed_spice_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_consumed_spice_capacity_in_bytes, json[QString("ConsumedSpiceCapacityInBytes")]);
    m_consumed_spice_capacity_in_bytes_isSet = !json[QString("ConsumedSpiceCapacityInBytes")].isNull() && m_consumed_spice_capacity_in_bytes_isValid;

    m_column_groups_isValid = ::OpenAPI::fromJsonValue(m_column_groups, json[QString("ColumnGroups")]);
    m_column_groups_isSet = !json[QString("ColumnGroups")].isNull() && m_column_groups_isValid;

    m_field_folders_isValid = ::OpenAPI::fromJsonValue(m_field_folders, json[QString("FieldFolders")]);
    m_field_folders_isSet = !json[QString("FieldFolders")].isNull() && m_field_folders_isValid;

    m_row_level_permission_data_set_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_data_set, json[QString("RowLevelPermissionDataSet")]);
    m_row_level_permission_data_set_isSet = !json[QString("RowLevelPermissionDataSet")].isNull() && m_row_level_permission_data_set_isValid;

    m_row_level_permission_tag_configuration_isValid = ::OpenAPI::fromJsonValue(m_row_level_permission_tag_configuration, json[QString("RowLevelPermissionTagConfiguration")]);
    m_row_level_permission_tag_configuration_isSet = !json[QString("RowLevelPermissionTagConfiguration")].isNull() && m_row_level_permission_tag_configuration_isValid;

    m_column_level_permission_rules_isValid = ::OpenAPI::fromJsonValue(m_column_level_permission_rules, json[QString("ColumnLevelPermissionRules")]);
    m_column_level_permission_rules_isSet = !json[QString("ColumnLevelPermissionRules")].isNull() && m_column_level_permission_rules_isValid;

    m_data_set_usage_configuration_isValid = ::OpenAPI::fromJsonValue(m_data_set_usage_configuration, json[QString("DataSetUsageConfiguration")]);
    m_data_set_usage_configuration_isSet = !json[QString("DataSetUsageConfiguration")].isNull() && m_data_set_usage_configuration_isValid;

    m_dataset_parameters_isValid = ::OpenAPI::fromJsonValue(m_dataset_parameters, json[QString("DatasetParameters")]);
    m_dataset_parameters_isSet = !json[QString("DatasetParameters")].isNull() && m_dataset_parameters_isValid;
}

QString OAIDataSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSet::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_data_set_id_isSet) {
        obj.insert(QString("DataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_physical_table_map.isSet()) {
        obj.insert(QString("PhysicalTableMap"), ::OpenAPI::toJsonValue(m_physical_table_map));
    }
    if (m_logical_table_map.isSet()) {
        obj.insert(QString("LogicalTableMap"), ::OpenAPI::toJsonValue(m_logical_table_map));
    }
    if (m_output_columns.isSet()) {
        obj.insert(QString("OutputColumns"), ::OpenAPI::toJsonValue(m_output_columns));
    }
    if (m_import_mode.isSet()) {
        obj.insert(QString("ImportMode"), ::OpenAPI::toJsonValue(m_import_mode));
    }
    if (m_consumed_spice_capacity_in_bytes_isSet) {
        obj.insert(QString("ConsumedSpiceCapacityInBytes"), ::OpenAPI::toJsonValue(m_consumed_spice_capacity_in_bytes));
    }
    if (m_column_groups.isSet()) {
        obj.insert(QString("ColumnGroups"), ::OpenAPI::toJsonValue(m_column_groups));
    }
    if (m_field_folders.isSet()) {
        obj.insert(QString("FieldFolders"), ::OpenAPI::toJsonValue(m_field_folders));
    }
    if (m_row_level_permission_data_set.isSet()) {
        obj.insert(QString("RowLevelPermissionDataSet"), ::OpenAPI::toJsonValue(m_row_level_permission_data_set));
    }
    if (m_row_level_permission_tag_configuration.isSet()) {
        obj.insert(QString("RowLevelPermissionTagConfiguration"), ::OpenAPI::toJsonValue(m_row_level_permission_tag_configuration));
    }
    if (m_column_level_permission_rules.isSet()) {
        obj.insert(QString("ColumnLevelPermissionRules"), ::OpenAPI::toJsonValue(m_column_level_permission_rules));
    }
    if (m_data_set_usage_configuration.isSet()) {
        obj.insert(QString("DataSetUsageConfiguration"), ::OpenAPI::toJsonValue(m_data_set_usage_configuration));
    }
    if (m_dataset_parameters.isSet()) {
        obj.insert(QString("DatasetParameters"), ::OpenAPI::toJsonValue(m_dataset_parameters));
    }
    return obj;
}

QString OAIDataSet::getArn() const {
    return m_arn;
}
void OAIDataSet::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDataSet::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDataSet::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDataSet::getDataSetId() const {
    return m_data_set_id;
}
void OAIDataSet::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIDataSet::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIDataSet::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAIDataSet::getName() const {
    return m_name;
}
void OAIDataSet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSet::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIDataSet::getCreatedTime() const {
    return m_created_time;
}
void OAIDataSet::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDataSet::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDataSet::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDataSet::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDataSet::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDataSet::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDataSet::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QMap OAIDataSet::getPhysicalTableMap() const {
    return m_physical_table_map;
}
void OAIDataSet::setPhysicalTableMap(const QMap &physical_table_map) {
    m_physical_table_map = physical_table_map;
    m_physical_table_map_isSet = true;
}

bool OAIDataSet::is_physical_table_map_Set() const{
    return m_physical_table_map_isSet;
}

bool OAIDataSet::is_physical_table_map_Valid() const{
    return m_physical_table_map_isValid;
}

QMap OAIDataSet::getLogicalTableMap() const {
    return m_logical_table_map;
}
void OAIDataSet::setLogicalTableMap(const QMap &logical_table_map) {
    m_logical_table_map = logical_table_map;
    m_logical_table_map_isSet = true;
}

bool OAIDataSet::is_logical_table_map_Set() const{
    return m_logical_table_map_isSet;
}

bool OAIDataSet::is_logical_table_map_Valid() const{
    return m_logical_table_map_isValid;
}

QList OAIDataSet::getOutputColumns() const {
    return m_output_columns;
}
void OAIDataSet::setOutputColumns(const QList &output_columns) {
    m_output_columns = output_columns;
    m_output_columns_isSet = true;
}

bool OAIDataSet::is_output_columns_Set() const{
    return m_output_columns_isSet;
}

bool OAIDataSet::is_output_columns_Valid() const{
    return m_output_columns_isValid;
}

OAIDataSetImportMode OAIDataSet::getImportMode() const {
    return m_import_mode;
}
void OAIDataSet::setImportMode(const OAIDataSetImportMode &import_mode) {
    m_import_mode = import_mode;
    m_import_mode_isSet = true;
}

bool OAIDataSet::is_import_mode_Set() const{
    return m_import_mode_isSet;
}

bool OAIDataSet::is_import_mode_Valid() const{
    return m_import_mode_isValid;
}

qint32 OAIDataSet::getConsumedSpiceCapacityInBytes() const {
    return m_consumed_spice_capacity_in_bytes;
}
void OAIDataSet::setConsumedSpiceCapacityInBytes(const qint32 &consumed_spice_capacity_in_bytes) {
    m_consumed_spice_capacity_in_bytes = consumed_spice_capacity_in_bytes;
    m_consumed_spice_capacity_in_bytes_isSet = true;
}

bool OAIDataSet::is_consumed_spice_capacity_in_bytes_Set() const{
    return m_consumed_spice_capacity_in_bytes_isSet;
}

bool OAIDataSet::is_consumed_spice_capacity_in_bytes_Valid() const{
    return m_consumed_spice_capacity_in_bytes_isValid;
}

QList OAIDataSet::getColumnGroups() const {
    return m_column_groups;
}
void OAIDataSet::setColumnGroups(const QList &column_groups) {
    m_column_groups = column_groups;
    m_column_groups_isSet = true;
}

bool OAIDataSet::is_column_groups_Set() const{
    return m_column_groups_isSet;
}

bool OAIDataSet::is_column_groups_Valid() const{
    return m_column_groups_isValid;
}

QMap OAIDataSet::getFieldFolders() const {
    return m_field_folders;
}
void OAIDataSet::setFieldFolders(const QMap &field_folders) {
    m_field_folders = field_folders;
    m_field_folders_isSet = true;
}

bool OAIDataSet::is_field_folders_Set() const{
    return m_field_folders_isSet;
}

bool OAIDataSet::is_field_folders_Valid() const{
    return m_field_folders_isValid;
}

OAIDataSet_RowLevelPermissionDataSet OAIDataSet::getRowLevelPermissionDataSet() const {
    return m_row_level_permission_data_set;
}
void OAIDataSet::setRowLevelPermissionDataSet(const OAIDataSet_RowLevelPermissionDataSet &row_level_permission_data_set) {
    m_row_level_permission_data_set = row_level_permission_data_set;
    m_row_level_permission_data_set_isSet = true;
}

bool OAIDataSet::is_row_level_permission_data_set_Set() const{
    return m_row_level_permission_data_set_isSet;
}

bool OAIDataSet::is_row_level_permission_data_set_Valid() const{
    return m_row_level_permission_data_set_isValid;
}

OAIDataSet_RowLevelPermissionTagConfiguration OAIDataSet::getRowLevelPermissionTagConfiguration() const {
    return m_row_level_permission_tag_configuration;
}
void OAIDataSet::setRowLevelPermissionTagConfiguration(const OAIDataSet_RowLevelPermissionTagConfiguration &row_level_permission_tag_configuration) {
    m_row_level_permission_tag_configuration = row_level_permission_tag_configuration;
    m_row_level_permission_tag_configuration_isSet = true;
}

bool OAIDataSet::is_row_level_permission_tag_configuration_Set() const{
    return m_row_level_permission_tag_configuration_isSet;
}

bool OAIDataSet::is_row_level_permission_tag_configuration_Valid() const{
    return m_row_level_permission_tag_configuration_isValid;
}

QList OAIDataSet::getColumnLevelPermissionRules() const {
    return m_column_level_permission_rules;
}
void OAIDataSet::setColumnLevelPermissionRules(const QList &column_level_permission_rules) {
    m_column_level_permission_rules = column_level_permission_rules;
    m_column_level_permission_rules_isSet = true;
}

bool OAIDataSet::is_column_level_permission_rules_Set() const{
    return m_column_level_permission_rules_isSet;
}

bool OAIDataSet::is_column_level_permission_rules_Valid() const{
    return m_column_level_permission_rules_isValid;
}

OAIDataSet_DataSetUsageConfiguration OAIDataSet::getDataSetUsageConfiguration() const {
    return m_data_set_usage_configuration;
}
void OAIDataSet::setDataSetUsageConfiguration(const OAIDataSet_DataSetUsageConfiguration &data_set_usage_configuration) {
    m_data_set_usage_configuration = data_set_usage_configuration;
    m_data_set_usage_configuration_isSet = true;
}

bool OAIDataSet::is_data_set_usage_configuration_Set() const{
    return m_data_set_usage_configuration_isSet;
}

bool OAIDataSet::is_data_set_usage_configuration_Valid() const{
    return m_data_set_usage_configuration_isValid;
}

QList OAIDataSet::getDatasetParameters() const {
    return m_dataset_parameters;
}
void OAIDataSet::setDatasetParameters(const QList &dataset_parameters) {
    m_dataset_parameters = dataset_parameters;
    m_dataset_parameters_isSet = true;
}

bool OAIDataSet::is_dataset_parameters_Set() const{
    return m_dataset_parameters_isSet;
}

bool OAIDataSet::is_dataset_parameters_Valid() const{
    return m_dataset_parameters_isValid;
}

bool OAIDataSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_table_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_table_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_spice_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_folders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_data_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_permission_tag_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_level_permission_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_usage_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
