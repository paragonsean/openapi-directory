/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableFieldCollapseStateTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableFieldCollapseStateTarget::OAIPivotTableFieldCollapseStateTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableFieldCollapseStateTarget::OAIPivotTableFieldCollapseStateTarget() {
    this->initializeModel();
}

OAIPivotTableFieldCollapseStateTarget::~OAIPivotTableFieldCollapseStateTarget() {}

void OAIPivotTableFieldCollapseStateTarget::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_field_data_path_values_isSet = false;
    m_field_data_path_values_isValid = false;
}

void OAIPivotTableFieldCollapseStateTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableFieldCollapseStateTarget::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_field_data_path_values_isValid = ::OpenAPI::fromJsonValue(m_field_data_path_values, json[QString("FieldDataPathValues")]);
    m_field_data_path_values_isSet = !json[QString("FieldDataPathValues")].isNull() && m_field_data_path_values_isValid;
}

QString OAIPivotTableFieldCollapseStateTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableFieldCollapseStateTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_field_data_path_values.isSet()) {
        obj.insert(QString("FieldDataPathValues"), ::OpenAPI::toJsonValue(m_field_data_path_values));
    }
    return obj;
}

QString OAIPivotTableFieldCollapseStateTarget::getFieldId() const {
    return m_field_id;
}
void OAIPivotTableFieldCollapseStateTarget::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIPivotTableFieldCollapseStateTarget::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIPivotTableFieldCollapseStateTarget::is_field_id_Valid() const{
    return m_field_id_isValid;
}

QList OAIPivotTableFieldCollapseStateTarget::getFieldDataPathValues() const {
    return m_field_data_path_values;
}
void OAIPivotTableFieldCollapseStateTarget::setFieldDataPathValues(const QList &field_data_path_values) {
    m_field_data_path_values = field_data_path_values;
    m_field_data_path_values_isSet = true;
}

bool OAIPivotTableFieldCollapseStateTarget::is_field_data_path_values_Set() const{
    return m_field_data_path_values_isSet;
}

bool OAIPivotTableFieldCollapseStateTarget::is_field_data_path_values_Valid() const{
    return m_field_data_path_values_isValid;
}

bool OAIPivotTableFieldCollapseStateTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_data_path_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableFieldCollapseStateTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
