/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGeospatialMapVisual_ChartConfiguration.h
 *
 * 
 */

#ifndef OAIGeospatialMapVisual_ChartConfiguration_H
#define OAIGeospatialMapVisual_ChartConfiguration_H

#include <QJsonObject>

#include "OAIBarChartConfiguration_Legend.h"
#include "OAIBarChartConfiguration_Tooltip.h"
#include "OAIGeospatialMapConfiguration_FieldWells.h"
#include "OAIGeospatialMapConfiguration_MapStyleOptions.h"
#include "OAIGeospatialMapConfiguration_PointStyleOptions.h"
#include "OAIGeospatialMapConfiguration_WindowOptions.h"
#include "OAIVisualPalette.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGeospatialMapConfiguration_FieldWells;
class OAIBarChartConfiguration_Legend;
class OAIBarChartConfiguration_Tooltip;
class OAIGeospatialMapConfiguration_WindowOptions;
class OAIGeospatialMapConfiguration_MapStyleOptions;
class OAIGeospatialMapConfiguration_PointStyleOptions;
class OAIVisualPalette;

class OAIGeospatialMapVisual_ChartConfiguration : public OAIObject {
public:
    OAIGeospatialMapVisual_ChartConfiguration();
    OAIGeospatialMapVisual_ChartConfiguration(QString json);
    ~OAIGeospatialMapVisual_ChartConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGeospatialMapConfiguration_FieldWells getFieldWells() const;
    void setFieldWells(const OAIGeospatialMapConfiguration_FieldWells &field_wells);
    bool is_field_wells_Set() const;
    bool is_field_wells_Valid() const;

    OAIBarChartConfiguration_Legend getLegend() const;
    void setLegend(const OAIBarChartConfiguration_Legend &legend);
    bool is_legend_Set() const;
    bool is_legend_Valid() const;

    OAIBarChartConfiguration_Tooltip getTooltip() const;
    void setTooltip(const OAIBarChartConfiguration_Tooltip &tooltip);
    bool is_tooltip_Set() const;
    bool is_tooltip_Valid() const;

    OAIGeospatialMapConfiguration_WindowOptions getWindowOptions() const;
    void setWindowOptions(const OAIGeospatialMapConfiguration_WindowOptions &window_options);
    bool is_window_options_Set() const;
    bool is_window_options_Valid() const;

    OAIGeospatialMapConfiguration_MapStyleOptions getMapStyleOptions() const;
    void setMapStyleOptions(const OAIGeospatialMapConfiguration_MapStyleOptions &map_style_options);
    bool is_map_style_options_Set() const;
    bool is_map_style_options_Valid() const;

    OAIGeospatialMapConfiguration_PointStyleOptions getPointStyleOptions() const;
    void setPointStyleOptions(const OAIGeospatialMapConfiguration_PointStyleOptions &point_style_options);
    bool is_point_style_options_Set() const;
    bool is_point_style_options_Valid() const;

    OAIVisualPalette getVisualPalette() const;
    void setVisualPalette(const OAIVisualPalette &visual_palette);
    bool is_visual_palette_Set() const;
    bool is_visual_palette_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGeospatialMapConfiguration_FieldWells m_field_wells;
    bool m_field_wells_isSet;
    bool m_field_wells_isValid;

    OAIBarChartConfiguration_Legend m_legend;
    bool m_legend_isSet;
    bool m_legend_isValid;

    OAIBarChartConfiguration_Tooltip m_tooltip;
    bool m_tooltip_isSet;
    bool m_tooltip_isValid;

    OAIGeospatialMapConfiguration_WindowOptions m_window_options;
    bool m_window_options_isSet;
    bool m_window_options_isValid;

    OAIGeospatialMapConfiguration_MapStyleOptions m_map_style_options;
    bool m_map_style_options_isSet;
    bool m_map_style_options_isValid;

    OAIGeospatialMapConfiguration_PointStyleOptions m_point_style_options;
    bool m_point_style_options_isSet;
    bool m_point_style_options_isValid;

    OAIVisualPalette m_visual_palette;
    bool m_visual_palette_isSet;
    bool m_visual_palette_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGeospatialMapVisual_ChartConfiguration)

#endif // OAIGeospatialMapVisual_ChartConfiguration_H
