/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelIngestionResponse.h"
#include "OAICreateAccountCustomizationResponse.h"
#include "OAICreateAccountCustomization_request.h"
#include "OAICreateAccountSubscriptionResponse.h"
#include "OAICreateAccountSubscription_request.h"
#include "OAICreateAnalysisResponse.h"
#include "OAICreateAnalysis_request.h"
#include "OAICreateDashboardResponse.h"
#include "OAICreateDashboard_request.h"
#include "OAICreateDataSetResponse.h"
#include "OAICreateDataSet_request.h"
#include "OAICreateDataSourceResponse.h"
#include "OAICreateDataSource_request.h"
#include "OAICreateFolderMembershipResponse.h"
#include "OAICreateFolderResponse.h"
#include "OAICreateFolder_request.h"
#include "OAICreateGroupMembershipResponse.h"
#include "OAICreateGroupResponse.h"
#include "OAICreateGroup_request.h"
#include "OAICreateIAMPolicyAssignmentResponse.h"
#include "OAICreateIAMPolicyAssignment_request.h"
#include "OAICreateIngestionResponse.h"
#include "OAICreateIngestion_request.h"
#include "OAICreateNamespaceResponse.h"
#include "OAICreateNamespace_request.h"
#include "OAICreateRefreshScheduleResponse.h"
#include "OAICreateTemplateAliasResponse.h"
#include "OAICreateTemplateResponse.h"
#include "OAICreateTemplate_request.h"
#include "OAICreateThemeAliasResponse.h"
#include "OAICreateThemeAlias_request.h"
#include "OAICreateThemeResponse.h"
#include "OAICreateTheme_request.h"
#include "OAICreateTopicRefreshScheduleResponse.h"
#include "OAICreateTopicRefreshSchedule_request.h"
#include "OAICreateTopicResponse.h"
#include "OAICreateTopic_request.h"
#include "OAICreateVPCConnectionResponse.h"
#include "OAICreateVPCConnection_request.h"
#include "OAIDeleteAccountCustomizationResponse.h"
#include "OAIDeleteAccountSubscriptionResponse.h"
#include "OAIDeleteAnalysisResponse.h"
#include "OAIDeleteDashboardResponse.h"
#include "OAIDeleteDataSetRefreshPropertiesResponse.h"
#include "OAIDeleteDataSetResponse.h"
#include "OAIDeleteDataSourceResponse.h"
#include "OAIDeleteFolderMembershipResponse.h"
#include "OAIDeleteFolderResponse.h"
#include "OAIDeleteGroupMembershipResponse.h"
#include "OAIDeleteGroupResponse.h"
#include "OAIDeleteIAMPolicyAssignmentResponse.h"
#include "OAIDeleteNamespaceResponse.h"
#include "OAIDeleteRefreshScheduleResponse.h"
#include "OAIDeleteTemplateAliasResponse.h"
#include "OAIDeleteTemplateResponse.h"
#include "OAIDeleteThemeAliasResponse.h"
#include "OAIDeleteThemeResponse.h"
#include "OAIDeleteTopicRefreshScheduleResponse.h"
#include "OAIDeleteTopicResponse.h"
#include "OAIDeleteUserByPrincipalIdResponse.h"
#include "OAIDeleteUserResponse.h"
#include "OAIDeleteVPCConnectionResponse.h"
#include "OAIDescribeAccountCustomizationResponse.h"
#include "OAIDescribeAccountSettingsResponse.h"
#include "OAIDescribeAccountSubscriptionResponse.h"
#include "OAIDescribeAnalysisDefinitionResponse.h"
#include "OAIDescribeAnalysisPermissionsResponse.h"
#include "OAIDescribeAnalysisResponse.h"
#include "OAIDescribeAssetBundleExportJobResponse.h"
#include "OAIDescribeAssetBundleImportJobResponse.h"
#include "OAIDescribeDashboardDefinitionResponse.h"
#include "OAIDescribeDashboardPermissionsResponse.h"
#include "OAIDescribeDashboardResponse.h"
#include "OAIDescribeDashboardSnapshotJobResponse.h"
#include "OAIDescribeDashboardSnapshotJobResultResponse.h"
#include "OAIDescribeDataSetPermissionsResponse.h"
#include "OAIDescribeDataSetRefreshPropertiesResponse.h"
#include "OAIDescribeDataSetResponse.h"
#include "OAIDescribeDataSourcePermissionsResponse.h"
#include "OAIDescribeDataSourceResponse.h"
#include "OAIDescribeFolderPermissionsResponse.h"
#include "OAIDescribeFolderResolvedPermissionsResponse.h"
#include "OAIDescribeFolderResponse.h"
#include "OAIDescribeGroupMembershipResponse.h"
#include "OAIDescribeGroupResponse.h"
#include "OAIDescribeIAMPolicyAssignmentResponse.h"
#include "OAIDescribeIngestionResponse.h"
#include "OAIDescribeIpRestrictionResponse.h"
#include "OAIDescribeNamespaceResponse.h"
#include "OAIDescribeRefreshScheduleResponse.h"
#include "OAIDescribeTemplateAliasResponse.h"
#include "OAIDescribeTemplateDefinitionResponse.h"
#include "OAIDescribeTemplatePermissionsResponse.h"
#include "OAIDescribeTemplateResponse.h"
#include "OAIDescribeThemeAliasResponse.h"
#include "OAIDescribeThemePermissionsResponse.h"
#include "OAIDescribeThemeResponse.h"
#include "OAIDescribeTopicPermissionsResponse.h"
#include "OAIDescribeTopicRefreshResponse.h"
#include "OAIDescribeTopicRefreshScheduleResponse.h"
#include "OAIDescribeTopicResponse.h"
#include "OAIDescribeUserResponse.h"
#include "OAIDescribeVPCConnectionResponse.h"
#include "OAIGenerateEmbedUrlForAnonymousUserResponse.h"
#include "OAIGenerateEmbedUrlForAnonymousUser_request.h"
#include "OAIGenerateEmbedUrlForRegisteredUserResponse.h"
#include "OAIGenerateEmbedUrlForRegisteredUser_request.h"
#include "OAIGetDashboardEmbedUrlResponse.h"
#include "OAIGetSessionEmbedUrlResponse.h"
#include "OAIListAnalysesResponse.h"
#include "OAIListAssetBundleExportJobsResponse.h"
#include "OAIListAssetBundleImportJobsResponse.h"
#include "OAIListDashboardVersionsResponse.h"
#include "OAIListDashboardsResponse.h"
#include "OAIListDataSetsResponse.h"
#include "OAIListDataSourcesResponse.h"
#include "OAIListFolderMembersResponse.h"
#include "OAIListFoldersResponse.h"
#include "OAIListGroupMembershipsResponse.h"
#include "OAIListGroupsResponse.h"
#include "OAIListIAMPolicyAssignmentsForUserResponse.h"
#include "OAIListIAMPolicyAssignmentsResponse.h"
#include "OAIListIngestionsResponse.h"
#include "OAIListNamespacesResponse.h"
#include "OAIListRefreshSchedulesResponse.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIListTemplateAliasesResponse.h"
#include "OAIListTemplateVersionsResponse.h"
#include "OAIListTemplatesResponse.h"
#include "OAIListThemeAliasesResponse.h"
#include "OAIListThemeVersionsResponse.h"
#include "OAIListThemesResponse.h"
#include "OAIListTopicRefreshSchedulesResponse.h"
#include "OAIListTopicsResponse.h"
#include "OAIListUserGroupsResponse.h"
#include "OAIListUsersResponse.h"
#include "OAIListVPCConnectionsResponse.h"
#include "OAIPutDataSetRefreshPropertiesResponse.h"
#include "OAIPutDataSetRefreshProperties_request.h"
#include "OAIRegisterUserResponse.h"
#include "OAIRegisterUser_request.h"
#include "OAIRestoreAnalysisResponse.h"
#include "OAISearchAnalysesResponse.h"
#include "OAISearchAnalyses_request.h"
#include "OAISearchDashboardsResponse.h"
#include "OAISearchDashboards_request.h"
#include "OAISearchDataSetsResponse.h"
#include "OAISearchDataSets_request.h"
#include "OAISearchDataSourcesResponse.h"
#include "OAISearchDataSources_request.h"
#include "OAISearchFoldersResponse.h"
#include "OAISearchFolders_request.h"
#include "OAISearchGroupsResponse.h"
#include "OAISearchGroups_request.h"
#include "OAIStartAssetBundleExportJobResponse.h"
#include "OAIStartAssetBundleExportJob_request.h"
#include "OAIStartAssetBundleImportJobResponse.h"
#include "OAIStartAssetBundleImportJob_request.h"
#include "OAIStartDashboardSnapshotJobResponse.h"
#include "OAIStartDashboardSnapshotJob_request.h"
#include "OAITagResourceResponse.h"
#include "OAITagResource_request.h"
#include "OAIUntagResourceResponse.h"
#include "OAIUpdateAccountCustomizationResponse.h"
#include "OAIUpdateAccountCustomization_request.h"
#include "OAIUpdateAccountSettingsResponse.h"
#include "OAIUpdateAccountSettings_request.h"
#include "OAIUpdateAnalysisPermissionsResponse.h"
#include "OAIUpdateAnalysisPermissions_request.h"
#include "OAIUpdateAnalysisResponse.h"
#include "OAIUpdateAnalysis_request.h"
#include "OAIUpdateDashboardPermissionsResponse.h"
#include "OAIUpdateDashboardPermissions_request.h"
#include "OAIUpdateDashboardPublishedVersionResponse.h"
#include "OAIUpdateDashboardResponse.h"
#include "OAIUpdateDashboard_request.h"
#include "OAIUpdateDataSetPermissionsResponse.h"
#include "OAIUpdateDataSetPermissions_request.h"
#include "OAIUpdateDataSetResponse.h"
#include "OAIUpdateDataSet_request.h"
#include "OAIUpdateDataSourcePermissionsResponse.h"
#include "OAIUpdateDataSourcePermissions_request.h"
#include "OAIUpdateDataSourceResponse.h"
#include "OAIUpdateDataSource_request.h"
#include "OAIUpdateFolderPermissionsResponse.h"
#include "OAIUpdateFolderPermissions_request.h"
#include "OAIUpdateFolderResponse.h"
#include "OAIUpdateFolder_request.h"
#include "OAIUpdateGroupResponse.h"
#include "OAIUpdateGroup_request.h"
#include "OAIUpdateIAMPolicyAssignmentResponse.h"
#include "OAIUpdateIAMPolicyAssignment_request.h"
#include "OAIUpdateIpRestrictionResponse.h"
#include "OAIUpdateIpRestriction_request.h"
#include "OAIUpdatePublicSharingSettingsResponse.h"
#include "OAIUpdatePublicSharingSettings_request.h"
#include "OAIUpdateRefreshScheduleResponse.h"
#include "OAIUpdateRefreshSchedule_request.h"
#include "OAIUpdateTemplateAliasResponse.h"
#include "OAIUpdateTemplateAlias_request.h"
#include "OAIUpdateTemplatePermissionsResponse.h"
#include "OAIUpdateTemplatePermissions_request.h"
#include "OAIUpdateTemplateResponse.h"
#include "OAIUpdateTemplate_request.h"
#include "OAIUpdateThemeAliasResponse.h"
#include "OAIUpdateThemeAlias_request.h"
#include "OAIUpdateThemePermissionsResponse.h"
#include "OAIUpdateThemePermissions_request.h"
#include "OAIUpdateThemeResponse.h"
#include "OAIUpdateTheme_request.h"
#include "OAIUpdateTopicPermissionsResponse.h"
#include "OAIUpdateTopicPermissions_request.h"
#include "OAIUpdateTopicRefreshScheduleResponse.h"
#include "OAIUpdateTopicRefreshSchedule_request.h"
#include "OAIUpdateTopicResponse.h"
#include "OAIUpdateTopic_request.h"
#include "OAIUpdateUserResponse.h"
#include "OAIUpdateUser_request.h"
#include "OAIUpdateVPCConnectionResponse.h"
#include "OAIUpdateVPCConnection_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  ingestion_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void cancelIngestion(const QString &aws_account_id, const QString &data_set_id, const QString &ingestion_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_create_account_customization_request OAICreateAccountCustomization_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  r_namespace QString [optional]
    */
    virtual void createAccountCustomization(const QString &aws_account_id, const OAICreateAccountCustomization_request &oai_create_account_customization_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_create_account_subscription_request OAICreateAccountSubscription_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAccountSubscription(const QString &aws_account_id, const OAICreateAccountSubscription_request &oai_create_account_subscription_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  analysis_id QString [required]
    * @param[in]  oai_create_analysis_request OAICreateAnalysis_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAnalysis(const QString &aws_account_id, const QString &analysis_id, const OAICreateAnalysis_request &oai_create_analysis_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_create_dashboard_request OAICreateDashboard_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDashboard(const QString &aws_account_id, const QString &dashboard_id, const OAICreateDashboard_request &oai_create_dashboard_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_create_data_set_request OAICreateDataSet_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDataSet(const QString &aws_account_id, const OAICreateDataSet_request &oai_create_data_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_create_data_source_request OAICreateDataSource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDataSource(const QString &aws_account_id, const OAICreateDataSource_request &oai_create_data_source_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  oai_create_folder_request OAICreateFolder_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFolder(const QString &aws_account_id, const QString &folder_id, const OAICreateFolder_request &oai_create_folder_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  member_type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFolderMembership(const QString &aws_account_id, const QString &folder_id, const QString &member_id, const QString &member_type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  oai_create_group_request OAICreateGroup_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createGroup(const QString &aws_account_id, const QString &r_namespace, const OAICreateGroup_request &oai_create_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  member_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createGroupMembership(const QString &member_name, const QString &group_name, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  oai_create_iam_policy_assignment_request OAICreateIAMPolicyAssignment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createIAMPolicyAssignment(const QString &aws_account_id, const QString &r_namespace, const OAICreateIAMPolicyAssignment_request &oai_create_iam_policy_assignment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_set_id QString [required]
    * @param[in]  ingestion_id QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_create_ingestion_request OAICreateIngestion_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createIngestion(const QString &data_set_id, const QString &ingestion_id, const QString &aws_account_id, const OAICreateIngestion_request &oai_create_ingestion_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_create_namespace_request OAICreateNamespace_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createNamespace(const QString &aws_account_id, const OAICreateNamespace_request &oai_create_namespace_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_set_id QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_update_refresh_schedule_request OAIUpdateRefreshSchedule_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRefreshSchedule(const QString &data_set_id, const QString &aws_account_id, const OAIUpdateRefreshSchedule_request &oai_update_refresh_schedule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  oai_create_template_request OAICreateTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTemplate(const QString &aws_account_id, const QString &template_id, const OAICreateTemplate_request &oai_create_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  alias_name QString [required]
    * @param[in]  oai_update_template_alias_request OAIUpdateTemplateAlias_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTemplateAlias(const QString &aws_account_id, const QString &template_id, const QString &alias_name, const OAIUpdateTemplateAlias_request &oai_update_template_alias_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  oai_create_theme_request OAICreateTheme_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTheme(const QString &aws_account_id, const QString &theme_id, const OAICreateTheme_request &oai_create_theme_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  alias_name QString [required]
    * @param[in]  oai_create_theme_alias_request OAICreateThemeAlias_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createThemeAlias(const QString &aws_account_id, const QString &theme_id, const QString &alias_name, const OAICreateThemeAlias_request &oai_create_theme_alias_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_create_topic_request OAICreateTopic_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTopic(const QString &aws_account_id, const OAICreateTopic_request &oai_create_topic_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  oai_create_topic_refresh_schedule_request OAICreateTopicRefreshSchedule_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTopicRefreshSchedule(const QString &aws_account_id, const QString &topic_id, const OAICreateTopicRefreshSchedule_request &oai_create_topic_refresh_schedule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_create_vpc_connection_request OAICreateVPCConnection_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createVPCConnection(const QString &aws_account_id, const OAICreateVPCConnection_request &oai_create_vpc_connection_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  r_namespace QString [optional]
    */
    virtual void deleteAccountCustomization(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAccountSubscription(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  analysis_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  recovery_window_in_days qint32 [optional]
    * @param[in]  force_delete_without_recovery bool [optional]
    */
    virtual void deleteAnalysis(const QString &aws_account_id, const QString &analysis_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &recovery_window_in_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &force_delete_without_recovery = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version_number qint32 [optional]
    */
    virtual void deleteDashboard(const QString &aws_account_id, const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteDataSet(const QString &aws_account_id, const QString &data_set_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteDataSetRefreshProperties(const QString &aws_account_id, const QString &data_set_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_source_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteDataSource(const QString &aws_account_id, const QString &data_source_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteFolder(const QString &aws_account_id, const QString &folder_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  member_type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteFolderMembership(const QString &aws_account_id, const QString &folder_id, const QString &member_id, const QString &member_type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteGroup(const QString &group_name, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  member_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteGroupMembership(const QString &member_name, const QString &group_name, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  assignment_name QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteIAMPolicyAssignment(const QString &aws_account_id, const QString &assignment_name, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteNamespace(const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_set_id QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  schedule_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRefreshSchedule(const QString &data_set_id, const QString &aws_account_id, const QString &schedule_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version_number qint32 [optional]
    */
    virtual void deleteTemplate(const QString &aws_account_id, const QString &template_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  alias_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTemplateAlias(const QString &aws_account_id, const QString &template_id, const QString &alias_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version_number qint32 [optional]
    */
    virtual void deleteTheme(const QString &aws_account_id, const QString &theme_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  alias_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteThemeAlias(const QString &aws_account_id, const QString &theme_id, const QString &alias_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTopic(const QString &aws_account_id, const QString &topic_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTopicRefreshSchedule(const QString &aws_account_id, const QString &topic_id, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteUser(const QString &user_name, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  principal_id QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteUserByPrincipalId(const QString &principal_id, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  vpc_connection_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteVPCConnection(const QString &aws_account_id, const QString &vpc_connection_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  r_namespace QString [optional]
    * @param[in]  resolved bool [optional]
    */
    virtual void describeAccountCustomization(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &resolved = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAccountSettings(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAccountSubscription(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  analysis_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAnalysis(const QString &aws_account_id, const QString &analysis_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  analysis_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAnalysisDefinition(const QString &aws_account_id, const QString &analysis_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  analysis_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAnalysisPermissions(const QString &aws_account_id, const QString &analysis_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  asset_bundle_export_job_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAssetBundleExportJob(const QString &aws_account_id, const QString &asset_bundle_export_job_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  asset_bundle_import_job_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAssetBundleImportJob(const QString &aws_account_id, const QString &asset_bundle_import_job_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version_number qint32 [optional]
    * @param[in]  alias_name QString [optional]
    */
    virtual void describeDashboard(const QString &aws_account_id, const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &alias_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version_number qint32 [optional]
    * @param[in]  alias_name QString [optional]
    */
    virtual void describeDashboardDefinition(const QString &aws_account_id, const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &alias_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeDashboardPermissions(const QString &aws_account_id, const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  snapshot_job_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeDashboardSnapshotJob(const QString &aws_account_id, const QString &dashboard_id, const QString &snapshot_job_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  snapshot_job_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeDashboardSnapshotJobResult(const QString &aws_account_id, const QString &dashboard_id, const QString &snapshot_job_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeDataSet(const QString &aws_account_id, const QString &data_set_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeDataSetPermissions(const QString &aws_account_id, const QString &data_set_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeDataSetRefreshProperties(const QString &aws_account_id, const QString &data_set_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_source_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeDataSource(const QString &aws_account_id, const QString &data_source_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_source_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeDataSourcePermissions(const QString &aws_account_id, const QString &data_source_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeFolder(const QString &aws_account_id, const QString &folder_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeFolderPermissions(const QString &aws_account_id, const QString &folder_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeFolderResolvedPermissions(const QString &aws_account_id, const QString &folder_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeGroup(const QString &group_name, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  member_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeGroupMembership(const QString &member_name, const QString &group_name, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  assignment_name QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeIAMPolicyAssignment(const QString &aws_account_id, const QString &assignment_name, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  ingestion_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeIngestion(const QString &aws_account_id, const QString &data_set_id, const QString &ingestion_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeIpRestriction(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeNamespace(const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  schedule_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeRefreshSchedule(const QString &aws_account_id, const QString &data_set_id, const QString &schedule_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version_number qint32 [optional]
    * @param[in]  alias_name QString [optional]
    */
    virtual void describeTemplate(const QString &aws_account_id, const QString &template_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &alias_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  alias_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTemplateAlias(const QString &aws_account_id, const QString &template_id, const QString &alias_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version_number qint32 [optional]
    * @param[in]  alias_name QString [optional]
    */
    virtual void describeTemplateDefinition(const QString &aws_account_id, const QString &template_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &alias_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTemplatePermissions(const QString &aws_account_id, const QString &template_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version_number qint32 [optional]
    * @param[in]  alias_name QString [optional]
    */
    virtual void describeTheme(const QString &aws_account_id, const QString &theme_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &alias_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  alias_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeThemeAlias(const QString &aws_account_id, const QString &theme_id, const QString &alias_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeThemePermissions(const QString &aws_account_id, const QString &theme_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTopic(const QString &aws_account_id, const QString &topic_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTopicPermissions(const QString &aws_account_id, const QString &topic_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  refresh_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTopicRefresh(const QString &aws_account_id, const QString &topic_id, const QString &refresh_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTopicRefreshSchedule(const QString &aws_account_id, const QString &topic_id, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeUser(const QString &user_name, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  vpc_connection_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeVPCConnection(const QString &aws_account_id, const QString &vpc_connection_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_generate_embed_url_for_anonymous_user_request OAIGenerateEmbedUrlForAnonymousUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void generateEmbedUrlForAnonymousUser(const QString &aws_account_id, const OAIGenerateEmbedUrlForAnonymousUser_request &oai_generate_embed_url_for_anonymous_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_generate_embed_url_for_registered_user_request OAIGenerateEmbedUrlForRegisteredUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void generateEmbedUrlForRegisteredUser(const QString &aws_account_id, const OAIGenerateEmbedUrlForRegisteredUser_request &oai_generate_embed_url_for_registered_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  creds_type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  session_lifetime qint32 [optional]
    * @param[in]  undo_redo_disabled bool [optional]
    * @param[in]  reset_disabled bool [optional]
    * @param[in]  state_persistence_enabled bool [optional]
    * @param[in]  user_arn QString [optional]
    * @param[in]  r_namespace QString [optional]
    * @param[in]  additional_dashboard_ids QList<QString> [optional]
    */
    virtual void getDashboardEmbedUrl(const QString &aws_account_id, const QString &dashboard_id, const QString &creds_type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &session_lifetime = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &undo_redo_disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &reset_disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &state_persistence_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &user_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &additional_dashboard_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  entry_point QString [optional]
    * @param[in]  session_lifetime qint32 [optional]
    * @param[in]  user_arn QString [optional]
    */
    virtual void getSessionEmbedUrl(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &entry_point = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &session_lifetime = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_arn = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listAnalyses(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listAssetBundleExportJobs(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listAssetBundleImportJobs(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listDashboardVersions(const QString &aws_account_id, const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listDashboards(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listDataSets(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listDataSources(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listFolderMembers(const QString &aws_account_id, const QString &folder_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listFolders(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  group_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listGroupMemberships(const QString &group_name, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listGroups(const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  assignment_status QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listIAMPolicyAssignments(const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assignment_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listIAMPolicyAssignmentsForUser(const QString &aws_account_id, const QString &user_name, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_set_id QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listIngestions(const QString &data_set_id, const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listNamespaces(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listRefreshSchedules(const QString &aws_account_id, const QString &data_set_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource(const QString &resource_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_result qint32 [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listTemplateAliases(const QString &aws_account_id, const QString &template_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_result = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listTemplateVersions(const QString &aws_account_id, const QString &template_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_result qint32 [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listTemplates(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_result = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_result qint32 [optional]
    */
    virtual void listThemeAliases(const QString &aws_account_id, const QString &theme_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_result = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listThemeVersions(const QString &aws_account_id, const QString &theme_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listThemes(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTopicRefreshSchedules(const QString &aws_account_id, const QString &topic_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listTopics(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listUserGroups(const QString &user_name, const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listUsers(const QString &aws_account_id, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listVPCConnections(const QString &aws_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  oai_put_data_set_refresh_properties_request OAIPutDataSetRefreshProperties_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putDataSetRefreshProperties(const QString &aws_account_id, const QString &data_set_id, const OAIPutDataSetRefreshProperties_request &oai_put_data_set_refresh_properties_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  oai_register_user_request OAIRegisterUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void registerUser(const QString &aws_account_id, const QString &r_namespace, const OAIRegisterUser_request &oai_register_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  analysis_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void restoreAnalysis(const QString &aws_account_id, const QString &analysis_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_search_analyses_request OAISearchAnalyses_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void searchAnalyses(const QString &aws_account_id, const OAISearchAnalyses_request &oai_search_analyses_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_search_dashboards_request OAISearchDashboards_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void searchDashboards(const QString &aws_account_id, const OAISearchDashboards_request &oai_search_dashboards_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_search_data_sets_request OAISearchDataSets_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void searchDataSets(const QString &aws_account_id, const OAISearchDataSets_request &oai_search_data_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_search_data_sources_request OAISearchDataSources_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void searchDataSources(const QString &aws_account_id, const OAISearchDataSources_request &oai_search_data_sources_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_search_folders_request OAISearchFolders_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void searchFolders(const QString &aws_account_id, const OAISearchFolders_request &oai_search_folders_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  oai_search_groups_request OAISearchGroups_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void searchGroups(const QString &aws_account_id, const QString &r_namespace, const OAISearchGroups_request &oai_search_groups_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_start_asset_bundle_export_job_request OAIStartAssetBundleExportJob_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startAssetBundleExportJob(const QString &aws_account_id, const OAIStartAssetBundleExportJob_request &oai_start_asset_bundle_export_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_start_asset_bundle_import_job_request OAIStartAssetBundleImportJob_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startAssetBundleImportJob(const QString &aws_account_id, const OAIStartAssetBundleImportJob_request &oai_start_asset_bundle_import_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_start_dashboard_snapshot_job_request OAIStartDashboardSnapshotJob_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startDashboardSnapshotJob(const QString &aws_account_id, const QString &dashboard_id, const OAIStartDashboardSnapshotJob_request &oai_start_dashboard_snapshot_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  oai_tag_resource_request OAITagResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &resource_arn, const OAITagResource_request &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  keys QList<QString> [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &resource_arn, const QList<QString> &keys, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_update_account_customization_request OAIUpdateAccountCustomization_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  r_namespace QString [optional]
    */
    virtual void updateAccountCustomization(const QString &aws_account_id, const OAIUpdateAccountCustomization_request &oai_update_account_customization_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_update_account_settings_request OAIUpdateAccountSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAccountSettings(const QString &aws_account_id, const OAIUpdateAccountSettings_request &oai_update_account_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  analysis_id QString [required]
    * @param[in]  oai_update_analysis_request OAIUpdateAnalysis_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAnalysis(const QString &aws_account_id, const QString &analysis_id, const OAIUpdateAnalysis_request &oai_update_analysis_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  analysis_id QString [required]
    * @param[in]  oai_update_analysis_permissions_request OAIUpdateAnalysisPermissions_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAnalysisPermissions(const QString &aws_account_id, const QString &analysis_id, const OAIUpdateAnalysisPermissions_request &oai_update_analysis_permissions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_update_dashboard_request OAIUpdateDashboard_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDashboard(const QString &aws_account_id, const QString &dashboard_id, const OAIUpdateDashboard_request &oai_update_dashboard_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_update_dashboard_permissions_request OAIUpdateDashboardPermissions_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDashboardPermissions(const QString &aws_account_id, const QString &dashboard_id, const OAIUpdateDashboardPermissions_request &oai_update_dashboard_permissions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  version_number qint32 [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDashboardPublishedVersion(const QString &aws_account_id, const QString &dashboard_id, const qint32 &version_number, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  oai_update_data_set_request OAIUpdateDataSet_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDataSet(const QString &aws_account_id, const QString &data_set_id, const OAIUpdateDataSet_request &oai_update_data_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_set_id QString [required]
    * @param[in]  oai_update_data_set_permissions_request OAIUpdateDataSetPermissions_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDataSetPermissions(const QString &aws_account_id, const QString &data_set_id, const OAIUpdateDataSetPermissions_request &oai_update_data_set_permissions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_source_id QString [required]
    * @param[in]  oai_update_data_source_request OAIUpdateDataSource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDataSource(const QString &aws_account_id, const QString &data_source_id, const OAIUpdateDataSource_request &oai_update_data_source_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  data_source_id QString [required]
    * @param[in]  oai_update_data_source_permissions_request OAIUpdateDataSourcePermissions_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDataSourcePermissions(const QString &aws_account_id, const QString &data_source_id, const OAIUpdateDataSourcePermissions_request &oai_update_data_source_permissions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  oai_update_folder_request OAIUpdateFolder_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateFolder(const QString &aws_account_id, const QString &folder_id, const OAIUpdateFolder_request &oai_update_folder_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  oai_update_folder_permissions_request OAIUpdateFolderPermissions_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateFolderPermissions(const QString &aws_account_id, const QString &folder_id, const OAIUpdateFolderPermissions_request &oai_update_folder_permissions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  oai_update_group_request OAIUpdateGroup_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateGroup(const QString &group_name, const QString &aws_account_id, const QString &r_namespace, const OAIUpdateGroup_request &oai_update_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  assignment_name QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  oai_update_iam_policy_assignment_request OAIUpdateIAMPolicyAssignment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateIAMPolicyAssignment(const QString &aws_account_id, const QString &assignment_name, const QString &r_namespace, const OAIUpdateIAMPolicyAssignment_request &oai_update_iam_policy_assignment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_update_ip_restriction_request OAIUpdateIpRestriction_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateIpRestriction(const QString &aws_account_id, const OAIUpdateIpRestriction_request &oai_update_ip_restriction_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_update_public_sharing_settings_request OAIUpdatePublicSharingSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updatePublicSharingSettings(const QString &aws_account_id, const OAIUpdatePublicSharingSettings_request &oai_update_public_sharing_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_set_id QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  oai_update_refresh_schedule_request OAIUpdateRefreshSchedule_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateRefreshSchedule(const QString &data_set_id, const QString &aws_account_id, const OAIUpdateRefreshSchedule_request &oai_update_refresh_schedule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  oai_update_template_request OAIUpdateTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTemplate(const QString &aws_account_id, const QString &template_id, const OAIUpdateTemplate_request &oai_update_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  alias_name QString [required]
    * @param[in]  oai_update_template_alias_request OAIUpdateTemplateAlias_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTemplateAlias(const QString &aws_account_id, const QString &template_id, const QString &alias_name, const OAIUpdateTemplateAlias_request &oai_update_template_alias_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  template_id QString [required]
    * @param[in]  oai_update_template_permissions_request OAIUpdateTemplatePermissions_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTemplatePermissions(const QString &aws_account_id, const QString &template_id, const OAIUpdateTemplatePermissions_request &oai_update_template_permissions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  oai_update_theme_request OAIUpdateTheme_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTheme(const QString &aws_account_id, const QString &theme_id, const OAIUpdateTheme_request &oai_update_theme_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  alias_name QString [required]
    * @param[in]  oai_update_theme_alias_request OAIUpdateThemeAlias_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateThemeAlias(const QString &aws_account_id, const QString &theme_id, const QString &alias_name, const OAIUpdateThemeAlias_request &oai_update_theme_alias_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  theme_id QString [required]
    * @param[in]  oai_update_theme_permissions_request OAIUpdateThemePermissions_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateThemePermissions(const QString &aws_account_id, const QString &theme_id, const OAIUpdateThemePermissions_request &oai_update_theme_permissions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  oai_update_topic_request OAIUpdateTopic_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTopic(const QString &aws_account_id, const QString &topic_id, const OAIUpdateTopic_request &oai_update_topic_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  oai_update_topic_permissions_request OAIUpdateTopicPermissions_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTopicPermissions(const QString &aws_account_id, const QString &topic_id, const OAIUpdateTopicPermissions_request &oai_update_topic_permissions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  oai_update_topic_refresh_schedule_request OAIUpdateTopicRefreshSchedule_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTopicRefreshSchedule(const QString &aws_account_id, const QString &topic_id, const QString &dataset_id, const OAIUpdateTopicRefreshSchedule_request &oai_update_topic_refresh_schedule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  aws_account_id QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  oai_update_user_request OAIUpdateUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateUser(const QString &user_name, const QString &aws_account_id, const QString &r_namespace, const OAIUpdateUser_request &oai_update_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_account_id QString [required]
    * @param[in]  vpc_connection_id QString [required]
    * @param[in]  oai_update_vpc_connection_request OAIUpdateVPCConnection_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateVPCConnection(const QString &aws_account_id, const QString &vpc_connection_id, const OAIUpdateVPCConnection_request &oai_update_vpc_connection_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelIngestionCallback(OAIHttpRequestWorker *worker);
    void createAccountCustomizationCallback(OAIHttpRequestWorker *worker);
    void createAccountSubscriptionCallback(OAIHttpRequestWorker *worker);
    void createAnalysisCallback(OAIHttpRequestWorker *worker);
    void createDashboardCallback(OAIHttpRequestWorker *worker);
    void createDataSetCallback(OAIHttpRequestWorker *worker);
    void createDataSourceCallback(OAIHttpRequestWorker *worker);
    void createFolderCallback(OAIHttpRequestWorker *worker);
    void createFolderMembershipCallback(OAIHttpRequestWorker *worker);
    void createGroupCallback(OAIHttpRequestWorker *worker);
    void createGroupMembershipCallback(OAIHttpRequestWorker *worker);
    void createIAMPolicyAssignmentCallback(OAIHttpRequestWorker *worker);
    void createIngestionCallback(OAIHttpRequestWorker *worker);
    void createNamespaceCallback(OAIHttpRequestWorker *worker);
    void createRefreshScheduleCallback(OAIHttpRequestWorker *worker);
    void createTemplateCallback(OAIHttpRequestWorker *worker);
    void createTemplateAliasCallback(OAIHttpRequestWorker *worker);
    void createThemeCallback(OAIHttpRequestWorker *worker);
    void createThemeAliasCallback(OAIHttpRequestWorker *worker);
    void createTopicCallback(OAIHttpRequestWorker *worker);
    void createTopicRefreshScheduleCallback(OAIHttpRequestWorker *worker);
    void createVPCConnectionCallback(OAIHttpRequestWorker *worker);
    void deleteAccountCustomizationCallback(OAIHttpRequestWorker *worker);
    void deleteAccountSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteAnalysisCallback(OAIHttpRequestWorker *worker);
    void deleteDashboardCallback(OAIHttpRequestWorker *worker);
    void deleteDataSetCallback(OAIHttpRequestWorker *worker);
    void deleteDataSetRefreshPropertiesCallback(OAIHttpRequestWorker *worker);
    void deleteDataSourceCallback(OAIHttpRequestWorker *worker);
    void deleteFolderCallback(OAIHttpRequestWorker *worker);
    void deleteFolderMembershipCallback(OAIHttpRequestWorker *worker);
    void deleteGroupCallback(OAIHttpRequestWorker *worker);
    void deleteGroupMembershipCallback(OAIHttpRequestWorker *worker);
    void deleteIAMPolicyAssignmentCallback(OAIHttpRequestWorker *worker);
    void deleteNamespaceCallback(OAIHttpRequestWorker *worker);
    void deleteRefreshScheduleCallback(OAIHttpRequestWorker *worker);
    void deleteTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteTemplateAliasCallback(OAIHttpRequestWorker *worker);
    void deleteThemeCallback(OAIHttpRequestWorker *worker);
    void deleteThemeAliasCallback(OAIHttpRequestWorker *worker);
    void deleteTopicCallback(OAIHttpRequestWorker *worker);
    void deleteTopicRefreshScheduleCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void deleteUserByPrincipalIdCallback(OAIHttpRequestWorker *worker);
    void deleteVPCConnectionCallback(OAIHttpRequestWorker *worker);
    void describeAccountCustomizationCallback(OAIHttpRequestWorker *worker);
    void describeAccountSettingsCallback(OAIHttpRequestWorker *worker);
    void describeAccountSubscriptionCallback(OAIHttpRequestWorker *worker);
    void describeAnalysisCallback(OAIHttpRequestWorker *worker);
    void describeAnalysisDefinitionCallback(OAIHttpRequestWorker *worker);
    void describeAnalysisPermissionsCallback(OAIHttpRequestWorker *worker);
    void describeAssetBundleExportJobCallback(OAIHttpRequestWorker *worker);
    void describeAssetBundleImportJobCallback(OAIHttpRequestWorker *worker);
    void describeDashboardCallback(OAIHttpRequestWorker *worker);
    void describeDashboardDefinitionCallback(OAIHttpRequestWorker *worker);
    void describeDashboardPermissionsCallback(OAIHttpRequestWorker *worker);
    void describeDashboardSnapshotJobCallback(OAIHttpRequestWorker *worker);
    void describeDashboardSnapshotJobResultCallback(OAIHttpRequestWorker *worker);
    void describeDataSetCallback(OAIHttpRequestWorker *worker);
    void describeDataSetPermissionsCallback(OAIHttpRequestWorker *worker);
    void describeDataSetRefreshPropertiesCallback(OAIHttpRequestWorker *worker);
    void describeDataSourceCallback(OAIHttpRequestWorker *worker);
    void describeDataSourcePermissionsCallback(OAIHttpRequestWorker *worker);
    void describeFolderCallback(OAIHttpRequestWorker *worker);
    void describeFolderPermissionsCallback(OAIHttpRequestWorker *worker);
    void describeFolderResolvedPermissionsCallback(OAIHttpRequestWorker *worker);
    void describeGroupCallback(OAIHttpRequestWorker *worker);
    void describeGroupMembershipCallback(OAIHttpRequestWorker *worker);
    void describeIAMPolicyAssignmentCallback(OAIHttpRequestWorker *worker);
    void describeIngestionCallback(OAIHttpRequestWorker *worker);
    void describeIpRestrictionCallback(OAIHttpRequestWorker *worker);
    void describeNamespaceCallback(OAIHttpRequestWorker *worker);
    void describeRefreshScheduleCallback(OAIHttpRequestWorker *worker);
    void describeTemplateCallback(OAIHttpRequestWorker *worker);
    void describeTemplateAliasCallback(OAIHttpRequestWorker *worker);
    void describeTemplateDefinitionCallback(OAIHttpRequestWorker *worker);
    void describeTemplatePermissionsCallback(OAIHttpRequestWorker *worker);
    void describeThemeCallback(OAIHttpRequestWorker *worker);
    void describeThemeAliasCallback(OAIHttpRequestWorker *worker);
    void describeThemePermissionsCallback(OAIHttpRequestWorker *worker);
    void describeTopicCallback(OAIHttpRequestWorker *worker);
    void describeTopicPermissionsCallback(OAIHttpRequestWorker *worker);
    void describeTopicRefreshCallback(OAIHttpRequestWorker *worker);
    void describeTopicRefreshScheduleCallback(OAIHttpRequestWorker *worker);
    void describeUserCallback(OAIHttpRequestWorker *worker);
    void describeVPCConnectionCallback(OAIHttpRequestWorker *worker);
    void generateEmbedUrlForAnonymousUserCallback(OAIHttpRequestWorker *worker);
    void generateEmbedUrlForRegisteredUserCallback(OAIHttpRequestWorker *worker);
    void getDashboardEmbedUrlCallback(OAIHttpRequestWorker *worker);
    void getSessionEmbedUrlCallback(OAIHttpRequestWorker *worker);
    void listAnalysesCallback(OAIHttpRequestWorker *worker);
    void listAssetBundleExportJobsCallback(OAIHttpRequestWorker *worker);
    void listAssetBundleImportJobsCallback(OAIHttpRequestWorker *worker);
    void listDashboardVersionsCallback(OAIHttpRequestWorker *worker);
    void listDashboardsCallback(OAIHttpRequestWorker *worker);
    void listDataSetsCallback(OAIHttpRequestWorker *worker);
    void listDataSourcesCallback(OAIHttpRequestWorker *worker);
    void listFolderMembersCallback(OAIHttpRequestWorker *worker);
    void listFoldersCallback(OAIHttpRequestWorker *worker);
    void listGroupMembershipsCallback(OAIHttpRequestWorker *worker);
    void listGroupsCallback(OAIHttpRequestWorker *worker);
    void listIAMPolicyAssignmentsCallback(OAIHttpRequestWorker *worker);
    void listIAMPolicyAssignmentsForUserCallback(OAIHttpRequestWorker *worker);
    void listIngestionsCallback(OAIHttpRequestWorker *worker);
    void listNamespacesCallback(OAIHttpRequestWorker *worker);
    void listRefreshSchedulesCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void listTemplateAliasesCallback(OAIHttpRequestWorker *worker);
    void listTemplateVersionsCallback(OAIHttpRequestWorker *worker);
    void listTemplatesCallback(OAIHttpRequestWorker *worker);
    void listThemeAliasesCallback(OAIHttpRequestWorker *worker);
    void listThemeVersionsCallback(OAIHttpRequestWorker *worker);
    void listThemesCallback(OAIHttpRequestWorker *worker);
    void listTopicRefreshSchedulesCallback(OAIHttpRequestWorker *worker);
    void listTopicsCallback(OAIHttpRequestWorker *worker);
    void listUserGroupsCallback(OAIHttpRequestWorker *worker);
    void listUsersCallback(OAIHttpRequestWorker *worker);
    void listVPCConnectionsCallback(OAIHttpRequestWorker *worker);
    void putDataSetRefreshPropertiesCallback(OAIHttpRequestWorker *worker);
    void registerUserCallback(OAIHttpRequestWorker *worker);
    void restoreAnalysisCallback(OAIHttpRequestWorker *worker);
    void searchAnalysesCallback(OAIHttpRequestWorker *worker);
    void searchDashboardsCallback(OAIHttpRequestWorker *worker);
    void searchDataSetsCallback(OAIHttpRequestWorker *worker);
    void searchDataSourcesCallback(OAIHttpRequestWorker *worker);
    void searchFoldersCallback(OAIHttpRequestWorker *worker);
    void searchGroupsCallback(OAIHttpRequestWorker *worker);
    void startAssetBundleExportJobCallback(OAIHttpRequestWorker *worker);
    void startAssetBundleImportJobCallback(OAIHttpRequestWorker *worker);
    void startDashboardSnapshotJobCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateAccountCustomizationCallback(OAIHttpRequestWorker *worker);
    void updateAccountSettingsCallback(OAIHttpRequestWorker *worker);
    void updateAnalysisCallback(OAIHttpRequestWorker *worker);
    void updateAnalysisPermissionsCallback(OAIHttpRequestWorker *worker);
    void updateDashboardCallback(OAIHttpRequestWorker *worker);
    void updateDashboardPermissionsCallback(OAIHttpRequestWorker *worker);
    void updateDashboardPublishedVersionCallback(OAIHttpRequestWorker *worker);
    void updateDataSetCallback(OAIHttpRequestWorker *worker);
    void updateDataSetPermissionsCallback(OAIHttpRequestWorker *worker);
    void updateDataSourceCallback(OAIHttpRequestWorker *worker);
    void updateDataSourcePermissionsCallback(OAIHttpRequestWorker *worker);
    void updateFolderCallback(OAIHttpRequestWorker *worker);
    void updateFolderPermissionsCallback(OAIHttpRequestWorker *worker);
    void updateGroupCallback(OAIHttpRequestWorker *worker);
    void updateIAMPolicyAssignmentCallback(OAIHttpRequestWorker *worker);
    void updateIpRestrictionCallback(OAIHttpRequestWorker *worker);
    void updatePublicSharingSettingsCallback(OAIHttpRequestWorker *worker);
    void updateRefreshScheduleCallback(OAIHttpRequestWorker *worker);
    void updateTemplateCallback(OAIHttpRequestWorker *worker);
    void updateTemplateAliasCallback(OAIHttpRequestWorker *worker);
    void updateTemplatePermissionsCallback(OAIHttpRequestWorker *worker);
    void updateThemeCallback(OAIHttpRequestWorker *worker);
    void updateThemeAliasCallback(OAIHttpRequestWorker *worker);
    void updateThemePermissionsCallback(OAIHttpRequestWorker *worker);
    void updateTopicCallback(OAIHttpRequestWorker *worker);
    void updateTopicPermissionsCallback(OAIHttpRequestWorker *worker);
    void updateTopicRefreshScheduleCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);
    void updateVPCConnectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelIngestionSignal(OAICancelIngestionResponse summary);
    void createAccountCustomizationSignal(OAICreateAccountCustomizationResponse summary);
    void createAccountSubscriptionSignal(OAICreateAccountSubscriptionResponse summary);
    void createAnalysisSignal(OAICreateAnalysisResponse summary);
    void createDashboardSignal(OAICreateDashboardResponse summary);
    void createDataSetSignal(OAICreateDataSetResponse summary);
    void createDataSourceSignal(OAICreateDataSourceResponse summary);
    void createFolderSignal(OAICreateFolderResponse summary);
    void createFolderMembershipSignal(OAICreateFolderMembershipResponse summary);
    void createGroupSignal(OAICreateGroupResponse summary);
    void createGroupMembershipSignal(OAICreateGroupMembershipResponse summary);
    void createIAMPolicyAssignmentSignal(OAICreateIAMPolicyAssignmentResponse summary);
    void createIngestionSignal(OAICreateIngestionResponse summary);
    void createNamespaceSignal(OAICreateNamespaceResponse summary);
    void createRefreshScheduleSignal(OAICreateRefreshScheduleResponse summary);
    void createTemplateSignal(OAICreateTemplateResponse summary);
    void createTemplateAliasSignal(OAICreateTemplateAliasResponse summary);
    void createThemeSignal(OAICreateThemeResponse summary);
    void createThemeAliasSignal(OAICreateThemeAliasResponse summary);
    void createTopicSignal(OAICreateTopicResponse summary);
    void createTopicRefreshScheduleSignal(OAICreateTopicRefreshScheduleResponse summary);
    void createVPCConnectionSignal(OAICreateVPCConnectionResponse summary);
    void deleteAccountCustomizationSignal(OAIDeleteAccountCustomizationResponse summary);
    void deleteAccountSubscriptionSignal(OAIDeleteAccountSubscriptionResponse summary);
    void deleteAnalysisSignal(OAIDeleteAnalysisResponse summary);
    void deleteDashboardSignal(OAIDeleteDashboardResponse summary);
    void deleteDataSetSignal(OAIDeleteDataSetResponse summary);
    void deleteDataSetRefreshPropertiesSignal(OAIDeleteDataSetRefreshPropertiesResponse summary);
    void deleteDataSourceSignal(OAIDeleteDataSourceResponse summary);
    void deleteFolderSignal(OAIDeleteFolderResponse summary);
    void deleteFolderMembershipSignal(OAIDeleteFolderMembershipResponse summary);
    void deleteGroupSignal(OAIDeleteGroupResponse summary);
    void deleteGroupMembershipSignal(OAIDeleteGroupMembershipResponse summary);
    void deleteIAMPolicyAssignmentSignal(OAIDeleteIAMPolicyAssignmentResponse summary);
    void deleteNamespaceSignal(OAIDeleteNamespaceResponse summary);
    void deleteRefreshScheduleSignal(OAIDeleteRefreshScheduleResponse summary);
    void deleteTemplateSignal(OAIDeleteTemplateResponse summary);
    void deleteTemplateAliasSignal(OAIDeleteTemplateAliasResponse summary);
    void deleteThemeSignal(OAIDeleteThemeResponse summary);
    void deleteThemeAliasSignal(OAIDeleteThemeAliasResponse summary);
    void deleteTopicSignal(OAIDeleteTopicResponse summary);
    void deleteTopicRefreshScheduleSignal(OAIDeleteTopicRefreshScheduleResponse summary);
    void deleteUserSignal(OAIDeleteUserResponse summary);
    void deleteUserByPrincipalIdSignal(OAIDeleteUserByPrincipalIdResponse summary);
    void deleteVPCConnectionSignal(OAIDeleteVPCConnectionResponse summary);
    void describeAccountCustomizationSignal(OAIDescribeAccountCustomizationResponse summary);
    void describeAccountSettingsSignal(OAIDescribeAccountSettingsResponse summary);
    void describeAccountSubscriptionSignal(OAIDescribeAccountSubscriptionResponse summary);
    void describeAnalysisSignal(OAIDescribeAnalysisResponse summary);
    void describeAnalysisDefinitionSignal(OAIDescribeAnalysisDefinitionResponse summary);
    void describeAnalysisPermissionsSignal(OAIDescribeAnalysisPermissionsResponse summary);
    void describeAssetBundleExportJobSignal(OAIDescribeAssetBundleExportJobResponse summary);
    void describeAssetBundleImportJobSignal(OAIDescribeAssetBundleImportJobResponse summary);
    void describeDashboardSignal(OAIDescribeDashboardResponse summary);
    void describeDashboardDefinitionSignal(OAIDescribeDashboardDefinitionResponse summary);
    void describeDashboardPermissionsSignal(OAIDescribeDashboardPermissionsResponse summary);
    void describeDashboardSnapshotJobSignal(OAIDescribeDashboardSnapshotJobResponse summary);
    void describeDashboardSnapshotJobResultSignal(OAIDescribeDashboardSnapshotJobResultResponse summary);
    void describeDataSetSignal(OAIDescribeDataSetResponse summary);
    void describeDataSetPermissionsSignal(OAIDescribeDataSetPermissionsResponse summary);
    void describeDataSetRefreshPropertiesSignal(OAIDescribeDataSetRefreshPropertiesResponse summary);
    void describeDataSourceSignal(OAIDescribeDataSourceResponse summary);
    void describeDataSourcePermissionsSignal(OAIDescribeDataSourcePermissionsResponse summary);
    void describeFolderSignal(OAIDescribeFolderResponse summary);
    void describeFolderPermissionsSignal(OAIDescribeFolderPermissionsResponse summary);
    void describeFolderResolvedPermissionsSignal(OAIDescribeFolderResolvedPermissionsResponse summary);
    void describeGroupSignal(OAIDescribeGroupResponse summary);
    void describeGroupMembershipSignal(OAIDescribeGroupMembershipResponse summary);
    void describeIAMPolicyAssignmentSignal(OAIDescribeIAMPolicyAssignmentResponse summary);
    void describeIngestionSignal(OAIDescribeIngestionResponse summary);
    void describeIpRestrictionSignal(OAIDescribeIpRestrictionResponse summary);
    void describeNamespaceSignal(OAIDescribeNamespaceResponse summary);
    void describeRefreshScheduleSignal(OAIDescribeRefreshScheduleResponse summary);
    void describeTemplateSignal(OAIDescribeTemplateResponse summary);
    void describeTemplateAliasSignal(OAIDescribeTemplateAliasResponse summary);
    void describeTemplateDefinitionSignal(OAIDescribeTemplateDefinitionResponse summary);
    void describeTemplatePermissionsSignal(OAIDescribeTemplatePermissionsResponse summary);
    void describeThemeSignal(OAIDescribeThemeResponse summary);
    void describeThemeAliasSignal(OAIDescribeThemeAliasResponse summary);
    void describeThemePermissionsSignal(OAIDescribeThemePermissionsResponse summary);
    void describeTopicSignal(OAIDescribeTopicResponse summary);
    void describeTopicPermissionsSignal(OAIDescribeTopicPermissionsResponse summary);
    void describeTopicRefreshSignal(OAIDescribeTopicRefreshResponse summary);
    void describeTopicRefreshScheduleSignal(OAIDescribeTopicRefreshScheduleResponse summary);
    void describeUserSignal(OAIDescribeUserResponse summary);
    void describeVPCConnectionSignal(OAIDescribeVPCConnectionResponse summary);
    void generateEmbedUrlForAnonymousUserSignal(OAIGenerateEmbedUrlForAnonymousUserResponse summary);
    void generateEmbedUrlForRegisteredUserSignal(OAIGenerateEmbedUrlForRegisteredUserResponse summary);
    void getDashboardEmbedUrlSignal(OAIGetDashboardEmbedUrlResponse summary);
    void getSessionEmbedUrlSignal(OAIGetSessionEmbedUrlResponse summary);
    void listAnalysesSignal(OAIListAnalysesResponse summary);
    void listAssetBundleExportJobsSignal(OAIListAssetBundleExportJobsResponse summary);
    void listAssetBundleImportJobsSignal(OAIListAssetBundleImportJobsResponse summary);
    void listDashboardVersionsSignal(OAIListDashboardVersionsResponse summary);
    void listDashboardsSignal(OAIListDashboardsResponse summary);
    void listDataSetsSignal(OAIListDataSetsResponse summary);
    void listDataSourcesSignal(OAIListDataSourcesResponse summary);
    void listFolderMembersSignal(OAIListFolderMembersResponse summary);
    void listFoldersSignal(OAIListFoldersResponse summary);
    void listGroupMembershipsSignal(OAIListGroupMembershipsResponse summary);
    void listGroupsSignal(OAIListGroupsResponse summary);
    void listIAMPolicyAssignmentsSignal(OAIListIAMPolicyAssignmentsResponse summary);
    void listIAMPolicyAssignmentsForUserSignal(OAIListIAMPolicyAssignmentsForUserResponse summary);
    void listIngestionsSignal(OAIListIngestionsResponse summary);
    void listNamespacesSignal(OAIListNamespacesResponse summary);
    void listRefreshSchedulesSignal(OAIListRefreshSchedulesResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void listTemplateAliasesSignal(OAIListTemplateAliasesResponse summary);
    void listTemplateVersionsSignal(OAIListTemplateVersionsResponse summary);
    void listTemplatesSignal(OAIListTemplatesResponse summary);
    void listThemeAliasesSignal(OAIListThemeAliasesResponse summary);
    void listThemeVersionsSignal(OAIListThemeVersionsResponse summary);
    void listThemesSignal(OAIListThemesResponse summary);
    void listTopicRefreshSchedulesSignal(OAIListTopicRefreshSchedulesResponse summary);
    void listTopicsSignal(OAIListTopicsResponse summary);
    void listUserGroupsSignal(OAIListUserGroupsResponse summary);
    void listUsersSignal(OAIListUsersResponse summary);
    void listVPCConnectionsSignal(OAIListVPCConnectionsResponse summary);
    void putDataSetRefreshPropertiesSignal(OAIPutDataSetRefreshPropertiesResponse summary);
    void registerUserSignal(OAIRegisterUserResponse summary);
    void restoreAnalysisSignal(OAIRestoreAnalysisResponse summary);
    void searchAnalysesSignal(OAISearchAnalysesResponse summary);
    void searchDashboardsSignal(OAISearchDashboardsResponse summary);
    void searchDataSetsSignal(OAISearchDataSetsResponse summary);
    void searchDataSourcesSignal(OAISearchDataSourcesResponse summary);
    void searchFoldersSignal(OAISearchFoldersResponse summary);
    void searchGroupsSignal(OAISearchGroupsResponse summary);
    void startAssetBundleExportJobSignal(OAIStartAssetBundleExportJobResponse summary);
    void startAssetBundleImportJobSignal(OAIStartAssetBundleImportJobResponse summary);
    void startDashboardSnapshotJobSignal(OAIStartDashboardSnapshotJobResponse summary);
    void tagResourceSignal(OAITagResourceResponse summary);
    void untagResourceSignal(OAIUntagResourceResponse summary);
    void updateAccountCustomizationSignal(OAIUpdateAccountCustomizationResponse summary);
    void updateAccountSettingsSignal(OAIUpdateAccountSettingsResponse summary);
    void updateAnalysisSignal(OAIUpdateAnalysisResponse summary);
    void updateAnalysisPermissionsSignal(OAIUpdateAnalysisPermissionsResponse summary);
    void updateDashboardSignal(OAIUpdateDashboardResponse summary);
    void updateDashboardPermissionsSignal(OAIUpdateDashboardPermissionsResponse summary);
    void updateDashboardPublishedVersionSignal(OAIUpdateDashboardPublishedVersionResponse summary);
    void updateDataSetSignal(OAIUpdateDataSetResponse summary);
    void updateDataSetPermissionsSignal(OAIUpdateDataSetPermissionsResponse summary);
    void updateDataSourceSignal(OAIUpdateDataSourceResponse summary);
    void updateDataSourcePermissionsSignal(OAIUpdateDataSourcePermissionsResponse summary);
    void updateFolderSignal(OAIUpdateFolderResponse summary);
    void updateFolderPermissionsSignal(OAIUpdateFolderPermissionsResponse summary);
    void updateGroupSignal(OAIUpdateGroupResponse summary);
    void updateIAMPolicyAssignmentSignal(OAIUpdateIAMPolicyAssignmentResponse summary);
    void updateIpRestrictionSignal(OAIUpdateIpRestrictionResponse summary);
    void updatePublicSharingSettingsSignal(OAIUpdatePublicSharingSettingsResponse summary);
    void updateRefreshScheduleSignal(OAIUpdateRefreshScheduleResponse summary);
    void updateTemplateSignal(OAIUpdateTemplateResponse summary);
    void updateTemplateAliasSignal(OAIUpdateTemplateAliasResponse summary);
    void updateTemplatePermissionsSignal(OAIUpdateTemplatePermissionsResponse summary);
    void updateThemeSignal(OAIUpdateThemeResponse summary);
    void updateThemeAliasSignal(OAIUpdateThemeAliasResponse summary);
    void updateThemePermissionsSignal(OAIUpdateThemePermissionsResponse summary);
    void updateTopicSignal(OAIUpdateTopicResponse summary);
    void updateTopicPermissionsSignal(OAIUpdateTopicPermissionsResponse summary);
    void updateTopicRefreshScheduleSignal(OAIUpdateTopicRefreshScheduleResponse summary);
    void updateUserSignal(OAIUpdateUserResponse summary);
    void updateVPCConnectionSignal(OAIUpdateVPCConnectionResponse summary);


    void cancelIngestionSignalFull(OAIHttpRequestWorker *worker, OAICancelIngestionResponse summary);
    void createAccountCustomizationSignalFull(OAIHttpRequestWorker *worker, OAICreateAccountCustomizationResponse summary);
    void createAccountSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAICreateAccountSubscriptionResponse summary);
    void createAnalysisSignalFull(OAIHttpRequestWorker *worker, OAICreateAnalysisResponse summary);
    void createDashboardSignalFull(OAIHttpRequestWorker *worker, OAICreateDashboardResponse summary);
    void createDataSetSignalFull(OAIHttpRequestWorker *worker, OAICreateDataSetResponse summary);
    void createDataSourceSignalFull(OAIHttpRequestWorker *worker, OAICreateDataSourceResponse summary);
    void createFolderSignalFull(OAIHttpRequestWorker *worker, OAICreateFolderResponse summary);
    void createFolderMembershipSignalFull(OAIHttpRequestWorker *worker, OAICreateFolderMembershipResponse summary);
    void createGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateGroupResponse summary);
    void createGroupMembershipSignalFull(OAIHttpRequestWorker *worker, OAICreateGroupMembershipResponse summary);
    void createIAMPolicyAssignmentSignalFull(OAIHttpRequestWorker *worker, OAICreateIAMPolicyAssignmentResponse summary);
    void createIngestionSignalFull(OAIHttpRequestWorker *worker, OAICreateIngestionResponse summary);
    void createNamespaceSignalFull(OAIHttpRequestWorker *worker, OAICreateNamespaceResponse summary);
    void createRefreshScheduleSignalFull(OAIHttpRequestWorker *worker, OAICreateRefreshScheduleResponse summary);
    void createTemplateSignalFull(OAIHttpRequestWorker *worker, OAICreateTemplateResponse summary);
    void createTemplateAliasSignalFull(OAIHttpRequestWorker *worker, OAICreateTemplateAliasResponse summary);
    void createThemeSignalFull(OAIHttpRequestWorker *worker, OAICreateThemeResponse summary);
    void createThemeAliasSignalFull(OAIHttpRequestWorker *worker, OAICreateThemeAliasResponse summary);
    void createTopicSignalFull(OAIHttpRequestWorker *worker, OAICreateTopicResponse summary);
    void createTopicRefreshScheduleSignalFull(OAIHttpRequestWorker *worker, OAICreateTopicRefreshScheduleResponse summary);
    void createVPCConnectionSignalFull(OAIHttpRequestWorker *worker, OAICreateVPCConnectionResponse summary);
    void deleteAccountCustomizationSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAccountCustomizationResponse summary);
    void deleteAccountSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAccountSubscriptionResponse summary);
    void deleteAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAnalysisResponse summary);
    void deleteDashboardSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDashboardResponse summary);
    void deleteDataSetSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDataSetResponse summary);
    void deleteDataSetRefreshPropertiesSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDataSetRefreshPropertiesResponse summary);
    void deleteDataSourceSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDataSourceResponse summary);
    void deleteFolderSignalFull(OAIHttpRequestWorker *worker, OAIDeleteFolderResponse summary);
    void deleteFolderMembershipSignalFull(OAIHttpRequestWorker *worker, OAIDeleteFolderMembershipResponse summary);
    void deleteGroupSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGroupResponse summary);
    void deleteGroupMembershipSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGroupMembershipResponse summary);
    void deleteIAMPolicyAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIDeleteIAMPolicyAssignmentResponse summary);
    void deleteNamespaceSignalFull(OAIHttpRequestWorker *worker, OAIDeleteNamespaceResponse summary);
    void deleteRefreshScheduleSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRefreshScheduleResponse summary);
    void deleteTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDeleteTemplateResponse summary);
    void deleteTemplateAliasSignalFull(OAIHttpRequestWorker *worker, OAIDeleteTemplateAliasResponse summary);
    void deleteThemeSignalFull(OAIHttpRequestWorker *worker, OAIDeleteThemeResponse summary);
    void deleteThemeAliasSignalFull(OAIHttpRequestWorker *worker, OAIDeleteThemeAliasResponse summary);
    void deleteTopicSignalFull(OAIHttpRequestWorker *worker, OAIDeleteTopicResponse summary);
    void deleteTopicRefreshScheduleSignalFull(OAIHttpRequestWorker *worker, OAIDeleteTopicRefreshScheduleResponse summary);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker, OAIDeleteUserResponse summary);
    void deleteUserByPrincipalIdSignalFull(OAIHttpRequestWorker *worker, OAIDeleteUserByPrincipalIdResponse summary);
    void deleteVPCConnectionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteVPCConnectionResponse summary);
    void describeAccountCustomizationSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountCustomizationResponse summary);
    void describeAccountSettingsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountSettingsResponse summary);
    void describeAccountSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountSubscriptionResponse summary);
    void describeAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAnalysisResponse summary);
    void describeAnalysisDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAnalysisDefinitionResponse summary);
    void describeAnalysisPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAnalysisPermissionsResponse summary);
    void describeAssetBundleExportJobSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAssetBundleExportJobResponse summary);
    void describeAssetBundleImportJobSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAssetBundleImportJobResponse summary);
    void describeDashboardSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDashboardResponse summary);
    void describeDashboardDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDashboardDefinitionResponse summary);
    void describeDashboardPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDashboardPermissionsResponse summary);
    void describeDashboardSnapshotJobSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDashboardSnapshotJobResponse summary);
    void describeDashboardSnapshotJobResultSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDashboardSnapshotJobResultResponse summary);
    void describeDataSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSetResponse summary);
    void describeDataSetPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSetPermissionsResponse summary);
    void describeDataSetRefreshPropertiesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSetRefreshPropertiesResponse summary);
    void describeDataSourceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSourceResponse summary);
    void describeDataSourcePermissionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSourcePermissionsResponse summary);
    void describeFolderSignalFull(OAIHttpRequestWorker *worker, OAIDescribeFolderResponse summary);
    void describeFolderPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeFolderPermissionsResponse summary);
    void describeFolderResolvedPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeFolderResolvedPermissionsResponse summary);
    void describeGroupSignalFull(OAIHttpRequestWorker *worker, OAIDescribeGroupResponse summary);
    void describeGroupMembershipSignalFull(OAIHttpRequestWorker *worker, OAIDescribeGroupMembershipResponse summary);
    void describeIAMPolicyAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIDescribeIAMPolicyAssignmentResponse summary);
    void describeIngestionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeIngestionResponse summary);
    void describeIpRestrictionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeIpRestrictionResponse summary);
    void describeNamespaceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeNamespaceResponse summary);
    void describeRefreshScheduleSignalFull(OAIHttpRequestWorker *worker, OAIDescribeRefreshScheduleResponse summary);
    void describeTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTemplateResponse summary);
    void describeTemplateAliasSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTemplateAliasResponse summary);
    void describeTemplateDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTemplateDefinitionResponse summary);
    void describeTemplatePermissionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTemplatePermissionsResponse summary);
    void describeThemeSignalFull(OAIHttpRequestWorker *worker, OAIDescribeThemeResponse summary);
    void describeThemeAliasSignalFull(OAIHttpRequestWorker *worker, OAIDescribeThemeAliasResponse summary);
    void describeThemePermissionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeThemePermissionsResponse summary);
    void describeTopicSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTopicResponse summary);
    void describeTopicPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTopicPermissionsResponse summary);
    void describeTopicRefreshSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTopicRefreshResponse summary);
    void describeTopicRefreshScheduleSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTopicRefreshScheduleResponse summary);
    void describeUserSignalFull(OAIHttpRequestWorker *worker, OAIDescribeUserResponse summary);
    void describeVPCConnectionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeVPCConnectionResponse summary);
    void generateEmbedUrlForAnonymousUserSignalFull(OAIHttpRequestWorker *worker, OAIGenerateEmbedUrlForAnonymousUserResponse summary);
    void generateEmbedUrlForRegisteredUserSignalFull(OAIHttpRequestWorker *worker, OAIGenerateEmbedUrlForRegisteredUserResponse summary);
    void getDashboardEmbedUrlSignalFull(OAIHttpRequestWorker *worker, OAIGetDashboardEmbedUrlResponse summary);
    void getSessionEmbedUrlSignalFull(OAIHttpRequestWorker *worker, OAIGetSessionEmbedUrlResponse summary);
    void listAnalysesSignalFull(OAIHttpRequestWorker *worker, OAIListAnalysesResponse summary);
    void listAssetBundleExportJobsSignalFull(OAIHttpRequestWorker *worker, OAIListAssetBundleExportJobsResponse summary);
    void listAssetBundleImportJobsSignalFull(OAIHttpRequestWorker *worker, OAIListAssetBundleImportJobsResponse summary);
    void listDashboardVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListDashboardVersionsResponse summary);
    void listDashboardsSignalFull(OAIHttpRequestWorker *worker, OAIListDashboardsResponse summary);
    void listDataSetsSignalFull(OAIHttpRequestWorker *worker, OAIListDataSetsResponse summary);
    void listDataSourcesSignalFull(OAIHttpRequestWorker *worker, OAIListDataSourcesResponse summary);
    void listFolderMembersSignalFull(OAIHttpRequestWorker *worker, OAIListFolderMembersResponse summary);
    void listFoldersSignalFull(OAIHttpRequestWorker *worker, OAIListFoldersResponse summary);
    void listGroupMembershipsSignalFull(OAIHttpRequestWorker *worker, OAIListGroupMembershipsResponse summary);
    void listGroupsSignalFull(OAIHttpRequestWorker *worker, OAIListGroupsResponse summary);
    void listIAMPolicyAssignmentsSignalFull(OAIHttpRequestWorker *worker, OAIListIAMPolicyAssignmentsResponse summary);
    void listIAMPolicyAssignmentsForUserSignalFull(OAIHttpRequestWorker *worker, OAIListIAMPolicyAssignmentsForUserResponse summary);
    void listIngestionsSignalFull(OAIHttpRequestWorker *worker, OAIListIngestionsResponse summary);
    void listNamespacesSignalFull(OAIHttpRequestWorker *worker, OAIListNamespacesResponse summary);
    void listRefreshSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIListRefreshSchedulesResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void listTemplateAliasesSignalFull(OAIHttpRequestWorker *worker, OAIListTemplateAliasesResponse summary);
    void listTemplateVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListTemplateVersionsResponse summary);
    void listTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIListTemplatesResponse summary);
    void listThemeAliasesSignalFull(OAIHttpRequestWorker *worker, OAIListThemeAliasesResponse summary);
    void listThemeVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListThemeVersionsResponse summary);
    void listThemesSignalFull(OAIHttpRequestWorker *worker, OAIListThemesResponse summary);
    void listTopicRefreshSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIListTopicRefreshSchedulesResponse summary);
    void listTopicsSignalFull(OAIHttpRequestWorker *worker, OAIListTopicsResponse summary);
    void listUserGroupsSignalFull(OAIHttpRequestWorker *worker, OAIListUserGroupsResponse summary);
    void listUsersSignalFull(OAIHttpRequestWorker *worker, OAIListUsersResponse summary);
    void listVPCConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIListVPCConnectionsResponse summary);
    void putDataSetRefreshPropertiesSignalFull(OAIHttpRequestWorker *worker, OAIPutDataSetRefreshPropertiesResponse summary);
    void registerUserSignalFull(OAIHttpRequestWorker *worker, OAIRegisterUserResponse summary);
    void restoreAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIRestoreAnalysisResponse summary);
    void searchAnalysesSignalFull(OAIHttpRequestWorker *worker, OAISearchAnalysesResponse summary);
    void searchDashboardsSignalFull(OAIHttpRequestWorker *worker, OAISearchDashboardsResponse summary);
    void searchDataSetsSignalFull(OAIHttpRequestWorker *worker, OAISearchDataSetsResponse summary);
    void searchDataSourcesSignalFull(OAIHttpRequestWorker *worker, OAISearchDataSourcesResponse summary);
    void searchFoldersSignalFull(OAIHttpRequestWorker *worker, OAISearchFoldersResponse summary);
    void searchGroupsSignalFull(OAIHttpRequestWorker *worker, OAISearchGroupsResponse summary);
    void startAssetBundleExportJobSignalFull(OAIHttpRequestWorker *worker, OAIStartAssetBundleExportJobResponse summary);
    void startAssetBundleImportJobSignalFull(OAIHttpRequestWorker *worker, OAIStartAssetBundleImportJobResponse summary);
    void startDashboardSnapshotJobSignalFull(OAIHttpRequestWorker *worker, OAIStartDashboardSnapshotJobResponse summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAITagResourceResponse summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIUntagResourceResponse summary);
    void updateAccountCustomizationSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAccountCustomizationResponse summary);
    void updateAccountSettingsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAccountSettingsResponse summary);
    void updateAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAnalysisResponse summary);
    void updateAnalysisPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAnalysisPermissionsResponse summary);
    void updateDashboardSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDashboardResponse summary);
    void updateDashboardPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDashboardPermissionsResponse summary);
    void updateDashboardPublishedVersionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDashboardPublishedVersionResponse summary);
    void updateDataSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDataSetResponse summary);
    void updateDataSetPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDataSetPermissionsResponse summary);
    void updateDataSourceSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDataSourceResponse summary);
    void updateDataSourcePermissionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDataSourcePermissionsResponse summary);
    void updateFolderSignalFull(OAIHttpRequestWorker *worker, OAIUpdateFolderResponse summary);
    void updateFolderPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateFolderPermissionsResponse summary);
    void updateGroupSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGroupResponse summary);
    void updateIAMPolicyAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateIAMPolicyAssignmentResponse summary);
    void updateIpRestrictionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateIpRestrictionResponse summary);
    void updatePublicSharingSettingsSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePublicSharingSettingsResponse summary);
    void updateRefreshScheduleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRefreshScheduleResponse summary);
    void updateTemplateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTemplateResponse summary);
    void updateTemplateAliasSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTemplateAliasResponse summary);
    void updateTemplatePermissionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTemplatePermissionsResponse summary);
    void updateThemeSignalFull(OAIHttpRequestWorker *worker, OAIUpdateThemeResponse summary);
    void updateThemeAliasSignalFull(OAIHttpRequestWorker *worker, OAIUpdateThemeAliasResponse summary);
    void updateThemePermissionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateThemePermissionsResponse summary);
    void updateTopicSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTopicResponse summary);
    void updateTopicPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTopicPermissionsResponse summary);
    void updateTopicRefreshScheduleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTopicRefreshScheduleResponse summary);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIUpdateUserResponse summary);
    void updateVPCConnectionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVPCConnectionResponse summary);

    Q_DECL_DEPRECATED_X("Use cancelIngestionSignalError() instead")
    void cancelIngestionSignalE(OAICancelIngestionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelIngestionSignalError(OAICancelIngestionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountCustomizationSignalError() instead")
    void createAccountCustomizationSignalE(OAICreateAccountCustomizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountCustomizationSignalError(OAICreateAccountCustomizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountSubscriptionSignalError() instead")
    void createAccountSubscriptionSignalE(OAICreateAccountSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSubscriptionSignalError(OAICreateAccountSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnalysisSignalError() instead")
    void createAnalysisSignalE(OAICreateAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnalysisSignalError(OAICreateAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDashboardSignalError() instead")
    void createDashboardSignalE(OAICreateDashboardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDashboardSignalError(OAICreateDashboardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataSetSignalError() instead")
    void createDataSetSignalE(OAICreateDataSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataSetSignalError(OAICreateDataSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataSourceSignalError() instead")
    void createDataSourceSignalE(OAICreateDataSourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataSourceSignalError(OAICreateDataSourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderSignalError() instead")
    void createFolderSignalE(OAICreateFolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderSignalError(OAICreateFolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderMembershipSignalError() instead")
    void createFolderMembershipSignalE(OAICreateFolderMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderMembershipSignalError(OAICreateFolderMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalError() instead")
    void createGroupSignalE(OAICreateGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalError(OAICreateGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupMembershipSignalError() instead")
    void createGroupMembershipSignalE(OAICreateGroupMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupMembershipSignalError(OAICreateGroupMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIAMPolicyAssignmentSignalError() instead")
    void createIAMPolicyAssignmentSignalE(OAICreateIAMPolicyAssignmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIAMPolicyAssignmentSignalError(OAICreateIAMPolicyAssignmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIngestionSignalError() instead")
    void createIngestionSignalE(OAICreateIngestionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIngestionSignalError(OAICreateIngestionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNamespaceSignalError() instead")
    void createNamespaceSignalE(OAICreateNamespaceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNamespaceSignalError(OAICreateNamespaceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRefreshScheduleSignalError() instead")
    void createRefreshScheduleSignalE(OAICreateRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRefreshScheduleSignalError(OAICreateRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTemplateSignalError() instead")
    void createTemplateSignalE(OAICreateTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTemplateSignalError(OAICreateTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTemplateAliasSignalError() instead")
    void createTemplateAliasSignalE(OAICreateTemplateAliasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTemplateAliasSignalError(OAICreateTemplateAliasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createThemeSignalError() instead")
    void createThemeSignalE(OAICreateThemeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createThemeSignalError(OAICreateThemeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createThemeAliasSignalError() instead")
    void createThemeAliasSignalE(OAICreateThemeAliasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createThemeAliasSignalError(OAICreateThemeAliasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTopicSignalError() instead")
    void createTopicSignalE(OAICreateTopicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicSignalError(OAICreateTopicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTopicRefreshScheduleSignalError() instead")
    void createTopicRefreshScheduleSignalE(OAICreateTopicRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicRefreshScheduleSignalError(OAICreateTopicRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVPCConnectionSignalError() instead")
    void createVPCConnectionSignalE(OAICreateVPCConnectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVPCConnectionSignalError(OAICreateVPCConnectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountCustomizationSignalError() instead")
    void deleteAccountCustomizationSignalE(OAIDeleteAccountCustomizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountCustomizationSignalError(OAIDeleteAccountCustomizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSubscriptionSignalError() instead")
    void deleteAccountSubscriptionSignalE(OAIDeleteAccountSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSubscriptionSignalError(OAIDeleteAccountSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnalysisSignalError() instead")
    void deleteAnalysisSignalE(OAIDeleteAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnalysisSignalError(OAIDeleteAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardSignalError() instead")
    void deleteDashboardSignalE(OAIDeleteDashboardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardSignalError(OAIDeleteDashboardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataSetSignalError() instead")
    void deleteDataSetSignalE(OAIDeleteDataSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataSetSignalError(OAIDeleteDataSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataSetRefreshPropertiesSignalError() instead")
    void deleteDataSetRefreshPropertiesSignalE(OAIDeleteDataSetRefreshPropertiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataSetRefreshPropertiesSignalError(OAIDeleteDataSetRefreshPropertiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataSourceSignalError() instead")
    void deleteDataSourceSignalE(OAIDeleteDataSourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataSourceSignalError(OAIDeleteDataSourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFolderSignalError() instead")
    void deleteFolderSignalE(OAIDeleteFolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFolderSignalError(OAIDeleteFolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFolderMembershipSignalError() instead")
    void deleteFolderMembershipSignalE(OAIDeleteFolderMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFolderMembershipSignalError(OAIDeleteFolderMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupSignalError() instead")
    void deleteGroupSignalE(OAIDeleteGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupSignalError(OAIDeleteGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupMembershipSignalError() instead")
    void deleteGroupMembershipSignalE(OAIDeleteGroupMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupMembershipSignalError(OAIDeleteGroupMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIAMPolicyAssignmentSignalError() instead")
    void deleteIAMPolicyAssignmentSignalE(OAIDeleteIAMPolicyAssignmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIAMPolicyAssignmentSignalError(OAIDeleteIAMPolicyAssignmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNamespaceSignalError() instead")
    void deleteNamespaceSignalE(OAIDeleteNamespaceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNamespaceSignalError(OAIDeleteNamespaceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRefreshScheduleSignalError() instead")
    void deleteRefreshScheduleSignalE(OAIDeleteRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRefreshScheduleSignalError(OAIDeleteRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplateSignalError() instead")
    void deleteTemplateSignalE(OAIDeleteTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateSignalError(OAIDeleteTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplateAliasSignalError() instead")
    void deleteTemplateAliasSignalE(OAIDeleteTemplateAliasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateAliasSignalError(OAIDeleteTemplateAliasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteThemeSignalError() instead")
    void deleteThemeSignalE(OAIDeleteThemeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteThemeSignalError(OAIDeleteThemeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteThemeAliasSignalError() instead")
    void deleteThemeAliasSignalE(OAIDeleteThemeAliasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteThemeAliasSignalError(OAIDeleteThemeAliasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTopicSignalError() instead")
    void deleteTopicSignalE(OAIDeleteTopicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTopicSignalError(OAIDeleteTopicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTopicRefreshScheduleSignalError() instead")
    void deleteTopicRefreshScheduleSignalE(OAIDeleteTopicRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTopicRefreshScheduleSignalError(OAIDeleteTopicRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(OAIDeleteUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(OAIDeleteUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserByPrincipalIdSignalError() instead")
    void deleteUserByPrincipalIdSignalE(OAIDeleteUserByPrincipalIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserByPrincipalIdSignalError(OAIDeleteUserByPrincipalIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVPCConnectionSignalError() instead")
    void deleteVPCConnectionSignalE(OAIDeleteVPCConnectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVPCConnectionSignalError(OAIDeleteVPCConnectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountCustomizationSignalError() instead")
    void describeAccountCustomizationSignalE(OAIDescribeAccountCustomizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountCustomizationSignalError(OAIDescribeAccountCustomizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountSettingsSignalError() instead")
    void describeAccountSettingsSignalE(OAIDescribeAccountSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountSettingsSignalError(OAIDescribeAccountSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountSubscriptionSignalError() instead")
    void describeAccountSubscriptionSignalE(OAIDescribeAccountSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountSubscriptionSignalError(OAIDescribeAccountSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAnalysisSignalError() instead")
    void describeAnalysisSignalE(OAIDescribeAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAnalysisSignalError(OAIDescribeAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAnalysisDefinitionSignalError() instead")
    void describeAnalysisDefinitionSignalE(OAIDescribeAnalysisDefinitionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAnalysisDefinitionSignalError(OAIDescribeAnalysisDefinitionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAnalysisPermissionsSignalError() instead")
    void describeAnalysisPermissionsSignalE(OAIDescribeAnalysisPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAnalysisPermissionsSignalError(OAIDescribeAnalysisPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAssetBundleExportJobSignalError() instead")
    void describeAssetBundleExportJobSignalE(OAIDescribeAssetBundleExportJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAssetBundleExportJobSignalError(OAIDescribeAssetBundleExportJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAssetBundleImportJobSignalError() instead")
    void describeAssetBundleImportJobSignalE(OAIDescribeAssetBundleImportJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAssetBundleImportJobSignalError(OAIDescribeAssetBundleImportJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardSignalError() instead")
    void describeDashboardSignalE(OAIDescribeDashboardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardSignalError(OAIDescribeDashboardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardDefinitionSignalError() instead")
    void describeDashboardDefinitionSignalE(OAIDescribeDashboardDefinitionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardDefinitionSignalError(OAIDescribeDashboardDefinitionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardPermissionsSignalError() instead")
    void describeDashboardPermissionsSignalE(OAIDescribeDashboardPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardPermissionsSignalError(OAIDescribeDashboardPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardSnapshotJobSignalError() instead")
    void describeDashboardSnapshotJobSignalE(OAIDescribeDashboardSnapshotJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardSnapshotJobSignalError(OAIDescribeDashboardSnapshotJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardSnapshotJobResultSignalError() instead")
    void describeDashboardSnapshotJobResultSignalE(OAIDescribeDashboardSnapshotJobResultResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardSnapshotJobResultSignalError(OAIDescribeDashboardSnapshotJobResultResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSetSignalError() instead")
    void describeDataSetSignalE(OAIDescribeDataSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSetSignalError(OAIDescribeDataSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSetPermissionsSignalError() instead")
    void describeDataSetPermissionsSignalE(OAIDescribeDataSetPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSetPermissionsSignalError(OAIDescribeDataSetPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSetRefreshPropertiesSignalError() instead")
    void describeDataSetRefreshPropertiesSignalE(OAIDescribeDataSetRefreshPropertiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSetRefreshPropertiesSignalError(OAIDescribeDataSetRefreshPropertiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSourceSignalError() instead")
    void describeDataSourceSignalE(OAIDescribeDataSourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSourceSignalError(OAIDescribeDataSourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSourcePermissionsSignalError() instead")
    void describeDataSourcePermissionsSignalE(OAIDescribeDataSourcePermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSourcePermissionsSignalError(OAIDescribeDataSourcePermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeFolderSignalError() instead")
    void describeFolderSignalE(OAIDescribeFolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeFolderSignalError(OAIDescribeFolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeFolderPermissionsSignalError() instead")
    void describeFolderPermissionsSignalE(OAIDescribeFolderPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeFolderPermissionsSignalError(OAIDescribeFolderPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeFolderResolvedPermissionsSignalError() instead")
    void describeFolderResolvedPermissionsSignalE(OAIDescribeFolderResolvedPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeFolderResolvedPermissionsSignalError(OAIDescribeFolderResolvedPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeGroupSignalError() instead")
    void describeGroupSignalE(OAIDescribeGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeGroupSignalError(OAIDescribeGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeGroupMembershipSignalError() instead")
    void describeGroupMembershipSignalE(OAIDescribeGroupMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeGroupMembershipSignalError(OAIDescribeGroupMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeIAMPolicyAssignmentSignalError() instead")
    void describeIAMPolicyAssignmentSignalE(OAIDescribeIAMPolicyAssignmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIAMPolicyAssignmentSignalError(OAIDescribeIAMPolicyAssignmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeIngestionSignalError() instead")
    void describeIngestionSignalE(OAIDescribeIngestionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIngestionSignalError(OAIDescribeIngestionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeIpRestrictionSignalError() instead")
    void describeIpRestrictionSignalE(OAIDescribeIpRestrictionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIpRestrictionSignalError(OAIDescribeIpRestrictionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeNamespaceSignalError() instead")
    void describeNamespaceSignalE(OAIDescribeNamespaceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeNamespaceSignalError(OAIDescribeNamespaceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeRefreshScheduleSignalError() instead")
    void describeRefreshScheduleSignalE(OAIDescribeRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeRefreshScheduleSignalError(OAIDescribeRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTemplateSignalError() instead")
    void describeTemplateSignalE(OAIDescribeTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTemplateSignalError(OAIDescribeTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTemplateAliasSignalError() instead")
    void describeTemplateAliasSignalE(OAIDescribeTemplateAliasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTemplateAliasSignalError(OAIDescribeTemplateAliasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTemplateDefinitionSignalError() instead")
    void describeTemplateDefinitionSignalE(OAIDescribeTemplateDefinitionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTemplateDefinitionSignalError(OAIDescribeTemplateDefinitionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTemplatePermissionsSignalError() instead")
    void describeTemplatePermissionsSignalE(OAIDescribeTemplatePermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTemplatePermissionsSignalError(OAIDescribeTemplatePermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeThemeSignalError() instead")
    void describeThemeSignalE(OAIDescribeThemeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeThemeSignalError(OAIDescribeThemeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeThemeAliasSignalError() instead")
    void describeThemeAliasSignalE(OAIDescribeThemeAliasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeThemeAliasSignalError(OAIDescribeThemeAliasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeThemePermissionsSignalError() instead")
    void describeThemePermissionsSignalE(OAIDescribeThemePermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeThemePermissionsSignalError(OAIDescribeThemePermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTopicSignalError() instead")
    void describeTopicSignalE(OAIDescribeTopicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTopicSignalError(OAIDescribeTopicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTopicPermissionsSignalError() instead")
    void describeTopicPermissionsSignalE(OAIDescribeTopicPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTopicPermissionsSignalError(OAIDescribeTopicPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTopicRefreshSignalError() instead")
    void describeTopicRefreshSignalE(OAIDescribeTopicRefreshResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTopicRefreshSignalError(OAIDescribeTopicRefreshResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTopicRefreshScheduleSignalError() instead")
    void describeTopicRefreshScheduleSignalE(OAIDescribeTopicRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTopicRefreshScheduleSignalError(OAIDescribeTopicRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeUserSignalError() instead")
    void describeUserSignalE(OAIDescribeUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeUserSignalError(OAIDescribeUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVPCConnectionSignalError() instead")
    void describeVPCConnectionSignalE(OAIDescribeVPCConnectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVPCConnectionSignalError(OAIDescribeVPCConnectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateEmbedUrlForAnonymousUserSignalError() instead")
    void generateEmbedUrlForAnonymousUserSignalE(OAIGenerateEmbedUrlForAnonymousUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateEmbedUrlForAnonymousUserSignalError(OAIGenerateEmbedUrlForAnonymousUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateEmbedUrlForRegisteredUserSignalError() instead")
    void generateEmbedUrlForRegisteredUserSignalE(OAIGenerateEmbedUrlForRegisteredUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateEmbedUrlForRegisteredUserSignalError(OAIGenerateEmbedUrlForRegisteredUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardEmbedUrlSignalError() instead")
    void getDashboardEmbedUrlSignalE(OAIGetDashboardEmbedUrlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardEmbedUrlSignalError(OAIGetDashboardEmbedUrlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionEmbedUrlSignalError() instead")
    void getSessionEmbedUrlSignalE(OAIGetSessionEmbedUrlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionEmbedUrlSignalError(OAIGetSessionEmbedUrlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnalysesSignalError() instead")
    void listAnalysesSignalE(OAIListAnalysesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAnalysesSignalError(OAIListAnalysesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssetBundleExportJobsSignalError() instead")
    void listAssetBundleExportJobsSignalE(OAIListAssetBundleExportJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssetBundleExportJobsSignalError(OAIListAssetBundleExportJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssetBundleImportJobsSignalError() instead")
    void listAssetBundleImportJobsSignalE(OAIListAssetBundleImportJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssetBundleImportJobsSignalError(OAIListAssetBundleImportJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDashboardVersionsSignalError() instead")
    void listDashboardVersionsSignalE(OAIListDashboardVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDashboardVersionsSignalError(OAIListDashboardVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDashboardsSignalError() instead")
    void listDashboardsSignalE(OAIListDashboardsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDashboardsSignalError(OAIListDashboardsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDataSetsSignalError() instead")
    void listDataSetsSignalE(OAIListDataSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDataSetsSignalError(OAIListDataSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDataSourcesSignalError() instead")
    void listDataSourcesSignalE(OAIListDataSourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDataSourcesSignalError(OAIListDataSourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFolderMembersSignalError() instead")
    void listFolderMembersSignalE(OAIListFolderMembersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFolderMembersSignalError(OAIListFolderMembersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFoldersSignalError() instead")
    void listFoldersSignalE(OAIListFoldersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFoldersSignalError(OAIListFoldersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupMembershipsSignalError() instead")
    void listGroupMembershipsSignalE(OAIListGroupMembershipsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupMembershipsSignalError(OAIListGroupMembershipsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupsSignalError() instead")
    void listGroupsSignalE(OAIListGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupsSignalError(OAIListGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIAMPolicyAssignmentsSignalError() instead")
    void listIAMPolicyAssignmentsSignalE(OAIListIAMPolicyAssignmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIAMPolicyAssignmentsSignalError(OAIListIAMPolicyAssignmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIAMPolicyAssignmentsForUserSignalError() instead")
    void listIAMPolicyAssignmentsForUserSignalE(OAIListIAMPolicyAssignmentsForUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIAMPolicyAssignmentsForUserSignalError(OAIListIAMPolicyAssignmentsForUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIngestionsSignalError() instead")
    void listIngestionsSignalE(OAIListIngestionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIngestionsSignalError(OAIListIngestionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNamespacesSignalError() instead")
    void listNamespacesSignalE(OAIListNamespacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNamespacesSignalError(OAIListNamespacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRefreshSchedulesSignalError() instead")
    void listRefreshSchedulesSignalE(OAIListRefreshSchedulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRefreshSchedulesSignalError(OAIListRefreshSchedulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplateAliasesSignalError() instead")
    void listTemplateAliasesSignalE(OAIListTemplateAliasesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplateAliasesSignalError(OAIListTemplateAliasesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplateVersionsSignalError() instead")
    void listTemplateVersionsSignalE(OAIListTemplateVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplateVersionsSignalError(OAIListTemplateVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesSignalError() instead")
    void listTemplatesSignalE(OAIListTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesSignalError(OAIListTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listThemeAliasesSignalError() instead")
    void listThemeAliasesSignalE(OAIListThemeAliasesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listThemeAliasesSignalError(OAIListThemeAliasesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listThemeVersionsSignalError() instead")
    void listThemeVersionsSignalE(OAIListThemeVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listThemeVersionsSignalError(OAIListThemeVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listThemesSignalError() instead")
    void listThemesSignalE(OAIListThemesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listThemesSignalError(OAIListThemesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTopicRefreshSchedulesSignalError() instead")
    void listTopicRefreshSchedulesSignalE(OAIListTopicRefreshSchedulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTopicRefreshSchedulesSignalError(OAIListTopicRefreshSchedulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTopicsSignalError() instead")
    void listTopicsSignalE(OAIListTopicsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTopicsSignalError(OAIListTopicsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserGroupsSignalError() instead")
    void listUserGroupsSignalE(OAIListUserGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserGroupsSignalError(OAIListUserGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersSignalError() instead")
    void listUsersSignalE(OAIListUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalError(OAIListUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVPCConnectionsSignalError() instead")
    void listVPCConnectionsSignalE(OAIListVPCConnectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVPCConnectionsSignalError(OAIListVPCConnectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDataSetRefreshPropertiesSignalError() instead")
    void putDataSetRefreshPropertiesSignalE(OAIPutDataSetRefreshPropertiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putDataSetRefreshPropertiesSignalError(OAIPutDataSetRefreshPropertiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalError() instead")
    void registerUserSignalE(OAIRegisterUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalError(OAIRegisterUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreAnalysisSignalError() instead")
    void restoreAnalysisSignalE(OAIRestoreAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreAnalysisSignalError(OAIRestoreAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAnalysesSignalError() instead")
    void searchAnalysesSignalE(OAISearchAnalysesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAnalysesSignalError(OAISearchAnalysesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDashboardsSignalError() instead")
    void searchDashboardsSignalE(OAISearchDashboardsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDashboardsSignalError(OAISearchDashboardsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDataSetsSignalError() instead")
    void searchDataSetsSignalE(OAISearchDataSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDataSetsSignalError(OAISearchDataSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDataSourcesSignalError() instead")
    void searchDataSourcesSignalE(OAISearchDataSourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDataSourcesSignalError(OAISearchDataSourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFoldersSignalError() instead")
    void searchFoldersSignalE(OAISearchFoldersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFoldersSignalError(OAISearchFoldersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGroupsSignalError() instead")
    void searchGroupsSignalE(OAISearchGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGroupsSignalError(OAISearchGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAssetBundleExportJobSignalError() instead")
    void startAssetBundleExportJobSignalE(OAIStartAssetBundleExportJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startAssetBundleExportJobSignalError(OAIStartAssetBundleExportJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAssetBundleImportJobSignalError() instead")
    void startAssetBundleImportJobSignalE(OAIStartAssetBundleImportJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startAssetBundleImportJobSignalError(OAIStartAssetBundleImportJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDashboardSnapshotJobSignalError() instead")
    void startDashboardSnapshotJobSignalE(OAIStartDashboardSnapshotJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startDashboardSnapshotJobSignalError(OAIStartDashboardSnapshotJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAITagResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAITagResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIUntagResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIUntagResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountCustomizationSignalError() instead")
    void updateAccountCustomizationSignalE(OAIUpdateAccountCustomizationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountCustomizationSignalError(OAIUpdateAccountCustomizationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSettingsSignalError() instead")
    void updateAccountSettingsSignalE(OAIUpdateAccountSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSettingsSignalError(OAIUpdateAccountSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnalysisSignalError() instead")
    void updateAnalysisSignalE(OAIUpdateAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnalysisSignalError(OAIUpdateAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnalysisPermissionsSignalError() instead")
    void updateAnalysisPermissionsSignalE(OAIUpdateAnalysisPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnalysisPermissionsSignalError(OAIUpdateAnalysisPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDashboardSignalError() instead")
    void updateDashboardSignalE(OAIUpdateDashboardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDashboardSignalError(OAIUpdateDashboardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDashboardPermissionsSignalError() instead")
    void updateDashboardPermissionsSignalE(OAIUpdateDashboardPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDashboardPermissionsSignalError(OAIUpdateDashboardPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDashboardPublishedVersionSignalError() instead")
    void updateDashboardPublishedVersionSignalE(OAIUpdateDashboardPublishedVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDashboardPublishedVersionSignalError(OAIUpdateDashboardPublishedVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSetSignalError() instead")
    void updateDataSetSignalE(OAIUpdateDataSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSetSignalError(OAIUpdateDataSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSetPermissionsSignalError() instead")
    void updateDataSetPermissionsSignalE(OAIUpdateDataSetPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSetPermissionsSignalError(OAIUpdateDataSetPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSourceSignalError() instead")
    void updateDataSourceSignalE(OAIUpdateDataSourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSourceSignalError(OAIUpdateDataSourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSourcePermissionsSignalError() instead")
    void updateDataSourcePermissionsSignalE(OAIUpdateDataSourcePermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSourcePermissionsSignalError(OAIUpdateDataSourcePermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFolderSignalError() instead")
    void updateFolderSignalE(OAIUpdateFolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFolderSignalError(OAIUpdateFolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFolderPermissionsSignalError() instead")
    void updateFolderPermissionsSignalE(OAIUpdateFolderPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFolderPermissionsSignalError(OAIUpdateFolderPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSignalError() instead")
    void updateGroupSignalE(OAIUpdateGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSignalError(OAIUpdateGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIAMPolicyAssignmentSignalError() instead")
    void updateIAMPolicyAssignmentSignalE(OAIUpdateIAMPolicyAssignmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIAMPolicyAssignmentSignalError(OAIUpdateIAMPolicyAssignmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIpRestrictionSignalError() instead")
    void updateIpRestrictionSignalE(OAIUpdateIpRestrictionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIpRestrictionSignalError(OAIUpdateIpRestrictionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublicSharingSettingsSignalError() instead")
    void updatePublicSharingSettingsSignalE(OAIUpdatePublicSharingSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublicSharingSettingsSignalError(OAIUpdatePublicSharingSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRefreshScheduleSignalError() instead")
    void updateRefreshScheduleSignalE(OAIUpdateRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRefreshScheduleSignalError(OAIUpdateRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateSignalError() instead")
    void updateTemplateSignalE(OAIUpdateTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateSignalError(OAIUpdateTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateAliasSignalError() instead")
    void updateTemplateAliasSignalE(OAIUpdateTemplateAliasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateAliasSignalError(OAIUpdateTemplateAliasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplatePermissionsSignalError() instead")
    void updateTemplatePermissionsSignalE(OAIUpdateTemplatePermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplatePermissionsSignalError(OAIUpdateTemplatePermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateThemeSignalError() instead")
    void updateThemeSignalE(OAIUpdateThemeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateThemeSignalError(OAIUpdateThemeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateThemeAliasSignalError() instead")
    void updateThemeAliasSignalE(OAIUpdateThemeAliasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateThemeAliasSignalError(OAIUpdateThemeAliasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateThemePermissionsSignalError() instead")
    void updateThemePermissionsSignalE(OAIUpdateThemePermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateThemePermissionsSignalError(OAIUpdateThemePermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicSignalError() instead")
    void updateTopicSignalE(OAIUpdateTopicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicSignalError(OAIUpdateTopicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicPermissionsSignalError() instead")
    void updateTopicPermissionsSignalE(OAIUpdateTopicPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicPermissionsSignalError(OAIUpdateTopicPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicRefreshScheduleSignalError() instead")
    void updateTopicRefreshScheduleSignalE(OAIUpdateTopicRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicRefreshScheduleSignalError(OAIUpdateTopicRefreshScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(OAIUpdateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(OAIUpdateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVPCConnectionSignalError() instead")
    void updateVPCConnectionSignalE(OAIUpdateVPCConnectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVPCConnectionSignalError(OAIUpdateVPCConnectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelIngestionSignalErrorFull() instead")
    void cancelIngestionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelIngestionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountCustomizationSignalErrorFull() instead")
    void createAccountCustomizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountCustomizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountSubscriptionSignalErrorFull() instead")
    void createAccountSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnalysisSignalErrorFull() instead")
    void createAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDashboardSignalErrorFull() instead")
    void createDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataSetSignalErrorFull() instead")
    void createDataSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataSourceSignalErrorFull() instead")
    void createDataSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderSignalErrorFull() instead")
    void createFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderMembershipSignalErrorFull() instead")
    void createFolderMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalErrorFull() instead")
    void createGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupMembershipSignalErrorFull() instead")
    void createGroupMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIAMPolicyAssignmentSignalErrorFull() instead")
    void createIAMPolicyAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIAMPolicyAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIngestionSignalErrorFull() instead")
    void createIngestionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIngestionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNamespaceSignalErrorFull() instead")
    void createNamespaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNamespaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRefreshScheduleSignalErrorFull() instead")
    void createRefreshScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRefreshScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTemplateSignalErrorFull() instead")
    void createTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTemplateAliasSignalErrorFull() instead")
    void createTemplateAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTemplateAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createThemeSignalErrorFull() instead")
    void createThemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createThemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createThemeAliasSignalErrorFull() instead")
    void createThemeAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createThemeAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTopicSignalErrorFull() instead")
    void createTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTopicRefreshScheduleSignalErrorFull() instead")
    void createTopicRefreshScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTopicRefreshScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVPCConnectionSignalErrorFull() instead")
    void createVPCConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVPCConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountCustomizationSignalErrorFull() instead")
    void deleteAccountCustomizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountCustomizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSubscriptionSignalErrorFull() instead")
    void deleteAccountSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnalysisSignalErrorFull() instead")
    void deleteAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardSignalErrorFull() instead")
    void deleteDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataSetSignalErrorFull() instead")
    void deleteDataSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataSetRefreshPropertiesSignalErrorFull() instead")
    void deleteDataSetRefreshPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataSetRefreshPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataSourceSignalErrorFull() instead")
    void deleteDataSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFolderSignalErrorFull() instead")
    void deleteFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFolderMembershipSignalErrorFull() instead")
    void deleteFolderMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFolderMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupSignalErrorFull() instead")
    void deleteGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupMembershipSignalErrorFull() instead")
    void deleteGroupMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIAMPolicyAssignmentSignalErrorFull() instead")
    void deleteIAMPolicyAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIAMPolicyAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNamespaceSignalErrorFull() instead")
    void deleteNamespaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNamespaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRefreshScheduleSignalErrorFull() instead")
    void deleteRefreshScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRefreshScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplateSignalErrorFull() instead")
    void deleteTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplateAliasSignalErrorFull() instead")
    void deleteTemplateAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteThemeSignalErrorFull() instead")
    void deleteThemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteThemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteThemeAliasSignalErrorFull() instead")
    void deleteThemeAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteThemeAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTopicSignalErrorFull() instead")
    void deleteTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTopicRefreshScheduleSignalErrorFull() instead")
    void deleteTopicRefreshScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTopicRefreshScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserByPrincipalIdSignalErrorFull() instead")
    void deleteUserByPrincipalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserByPrincipalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVPCConnectionSignalErrorFull() instead")
    void deleteVPCConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVPCConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountCustomizationSignalErrorFull() instead")
    void describeAccountCustomizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountCustomizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountSettingsSignalErrorFull() instead")
    void describeAccountSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountSubscriptionSignalErrorFull() instead")
    void describeAccountSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAnalysisSignalErrorFull() instead")
    void describeAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAnalysisDefinitionSignalErrorFull() instead")
    void describeAnalysisDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAnalysisDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAnalysisPermissionsSignalErrorFull() instead")
    void describeAnalysisPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAnalysisPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAssetBundleExportJobSignalErrorFull() instead")
    void describeAssetBundleExportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAssetBundleExportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAssetBundleImportJobSignalErrorFull() instead")
    void describeAssetBundleImportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAssetBundleImportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardSignalErrorFull() instead")
    void describeDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardDefinitionSignalErrorFull() instead")
    void describeDashboardDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardPermissionsSignalErrorFull() instead")
    void describeDashboardPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardSnapshotJobSignalErrorFull() instead")
    void describeDashboardSnapshotJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardSnapshotJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDashboardSnapshotJobResultSignalErrorFull() instead")
    void describeDashboardSnapshotJobResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDashboardSnapshotJobResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSetSignalErrorFull() instead")
    void describeDataSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSetPermissionsSignalErrorFull() instead")
    void describeDataSetPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSetPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSetRefreshPropertiesSignalErrorFull() instead")
    void describeDataSetRefreshPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSetRefreshPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSourceSignalErrorFull() instead")
    void describeDataSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDataSourcePermissionsSignalErrorFull() instead")
    void describeDataSourcePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDataSourcePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeFolderSignalErrorFull() instead")
    void describeFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeFolderPermissionsSignalErrorFull() instead")
    void describeFolderPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeFolderPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeFolderResolvedPermissionsSignalErrorFull() instead")
    void describeFolderResolvedPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeFolderResolvedPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeGroupSignalErrorFull() instead")
    void describeGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeGroupMembershipSignalErrorFull() instead")
    void describeGroupMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeGroupMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeIAMPolicyAssignmentSignalErrorFull() instead")
    void describeIAMPolicyAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIAMPolicyAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeIngestionSignalErrorFull() instead")
    void describeIngestionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIngestionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeIpRestrictionSignalErrorFull() instead")
    void describeIpRestrictionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIpRestrictionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeNamespaceSignalErrorFull() instead")
    void describeNamespaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeNamespaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeRefreshScheduleSignalErrorFull() instead")
    void describeRefreshScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeRefreshScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTemplateSignalErrorFull() instead")
    void describeTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTemplateAliasSignalErrorFull() instead")
    void describeTemplateAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTemplateAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTemplateDefinitionSignalErrorFull() instead")
    void describeTemplateDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTemplateDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTemplatePermissionsSignalErrorFull() instead")
    void describeTemplatePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTemplatePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeThemeSignalErrorFull() instead")
    void describeThemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeThemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeThemeAliasSignalErrorFull() instead")
    void describeThemeAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeThemeAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeThemePermissionsSignalErrorFull() instead")
    void describeThemePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeThemePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTopicSignalErrorFull() instead")
    void describeTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTopicPermissionsSignalErrorFull() instead")
    void describeTopicPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTopicPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTopicRefreshSignalErrorFull() instead")
    void describeTopicRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTopicRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTopicRefreshScheduleSignalErrorFull() instead")
    void describeTopicRefreshScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTopicRefreshScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeUserSignalErrorFull() instead")
    void describeUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVPCConnectionSignalErrorFull() instead")
    void describeVPCConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVPCConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateEmbedUrlForAnonymousUserSignalErrorFull() instead")
    void generateEmbedUrlForAnonymousUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateEmbedUrlForAnonymousUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateEmbedUrlForRegisteredUserSignalErrorFull() instead")
    void generateEmbedUrlForRegisteredUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateEmbedUrlForRegisteredUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardEmbedUrlSignalErrorFull() instead")
    void getDashboardEmbedUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardEmbedUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionEmbedUrlSignalErrorFull() instead")
    void getSessionEmbedUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionEmbedUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnalysesSignalErrorFull() instead")
    void listAnalysesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAnalysesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssetBundleExportJobsSignalErrorFull() instead")
    void listAssetBundleExportJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssetBundleExportJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssetBundleImportJobsSignalErrorFull() instead")
    void listAssetBundleImportJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssetBundleImportJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDashboardVersionsSignalErrorFull() instead")
    void listDashboardVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDashboardVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDashboardsSignalErrorFull() instead")
    void listDashboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDashboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDataSetsSignalErrorFull() instead")
    void listDataSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDataSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDataSourcesSignalErrorFull() instead")
    void listDataSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDataSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFolderMembersSignalErrorFull() instead")
    void listFolderMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFolderMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFoldersSignalErrorFull() instead")
    void listFoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupMembershipsSignalErrorFull() instead")
    void listGroupMembershipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupMembershipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupsSignalErrorFull() instead")
    void listGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIAMPolicyAssignmentsSignalErrorFull() instead")
    void listIAMPolicyAssignmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIAMPolicyAssignmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIAMPolicyAssignmentsForUserSignalErrorFull() instead")
    void listIAMPolicyAssignmentsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIAMPolicyAssignmentsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIngestionsSignalErrorFull() instead")
    void listIngestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIngestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNamespacesSignalErrorFull() instead")
    void listNamespacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNamespacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRefreshSchedulesSignalErrorFull() instead")
    void listRefreshSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRefreshSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplateAliasesSignalErrorFull() instead")
    void listTemplateAliasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplateAliasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplateVersionsSignalErrorFull() instead")
    void listTemplateVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplateVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesSignalErrorFull() instead")
    void listTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listThemeAliasesSignalErrorFull() instead")
    void listThemeAliasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listThemeAliasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listThemeVersionsSignalErrorFull() instead")
    void listThemeVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listThemeVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listThemesSignalErrorFull() instead")
    void listThemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listThemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTopicRefreshSchedulesSignalErrorFull() instead")
    void listTopicRefreshSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTopicRefreshSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTopicsSignalErrorFull() instead")
    void listTopicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTopicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserGroupsSignalErrorFull() instead")
    void listUserGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersSignalErrorFull() instead")
    void listUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVPCConnectionsSignalErrorFull() instead")
    void listVPCConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVPCConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDataSetRefreshPropertiesSignalErrorFull() instead")
    void putDataSetRefreshPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putDataSetRefreshPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalErrorFull() instead")
    void registerUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreAnalysisSignalErrorFull() instead")
    void restoreAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAnalysesSignalErrorFull() instead")
    void searchAnalysesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAnalysesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDashboardsSignalErrorFull() instead")
    void searchDashboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDashboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDataSetsSignalErrorFull() instead")
    void searchDataSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDataSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDataSourcesSignalErrorFull() instead")
    void searchDataSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDataSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFoldersSignalErrorFull() instead")
    void searchFoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGroupsSignalErrorFull() instead")
    void searchGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAssetBundleExportJobSignalErrorFull() instead")
    void startAssetBundleExportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startAssetBundleExportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAssetBundleImportJobSignalErrorFull() instead")
    void startAssetBundleImportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startAssetBundleImportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDashboardSnapshotJobSignalErrorFull() instead")
    void startDashboardSnapshotJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startDashboardSnapshotJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountCustomizationSignalErrorFull() instead")
    void updateAccountCustomizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountCustomizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSettingsSignalErrorFull() instead")
    void updateAccountSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnalysisSignalErrorFull() instead")
    void updateAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnalysisPermissionsSignalErrorFull() instead")
    void updateAnalysisPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnalysisPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDashboardSignalErrorFull() instead")
    void updateDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDashboardPermissionsSignalErrorFull() instead")
    void updateDashboardPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDashboardPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDashboardPublishedVersionSignalErrorFull() instead")
    void updateDashboardPublishedVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDashboardPublishedVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSetSignalErrorFull() instead")
    void updateDataSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSetPermissionsSignalErrorFull() instead")
    void updateDataSetPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSetPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSourceSignalErrorFull() instead")
    void updateDataSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSourcePermissionsSignalErrorFull() instead")
    void updateDataSourcePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSourcePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFolderSignalErrorFull() instead")
    void updateFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFolderPermissionsSignalErrorFull() instead")
    void updateFolderPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFolderPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSignalErrorFull() instead")
    void updateGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIAMPolicyAssignmentSignalErrorFull() instead")
    void updateIAMPolicyAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIAMPolicyAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIpRestrictionSignalErrorFull() instead")
    void updateIpRestrictionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIpRestrictionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublicSharingSettingsSignalErrorFull() instead")
    void updatePublicSharingSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublicSharingSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRefreshScheduleSignalErrorFull() instead")
    void updateRefreshScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRefreshScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateSignalErrorFull() instead")
    void updateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateAliasSignalErrorFull() instead")
    void updateTemplateAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplatePermissionsSignalErrorFull() instead")
    void updateTemplatePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplatePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateThemeSignalErrorFull() instead")
    void updateThemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateThemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateThemeAliasSignalErrorFull() instead")
    void updateThemeAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateThemeAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateThemePermissionsSignalErrorFull() instead")
    void updateThemePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateThemePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicSignalErrorFull() instead")
    void updateTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicPermissionsSignalErrorFull() instead")
    void updateTopicPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicRefreshScheduleSignalErrorFull() instead")
    void updateTopicRefreshScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicRefreshScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVPCConnectionSignalErrorFull() instead")
    void updateVPCConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVPCConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
