/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeNamespaceResponse_Namespace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeNamespaceResponse_Namespace::OAIDescribeNamespaceResponse_Namespace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeNamespaceResponse_Namespace::OAIDescribeNamespaceResponse_Namespace() {
    this->initializeModel();
}

OAIDescribeNamespaceResponse_Namespace::~OAIDescribeNamespaceResponse_Namespace() {}

void OAIDescribeNamespaceResponse_Namespace::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_capacity_region_isSet = false;
    m_capacity_region_isValid = false;

    m_creation_status_isSet = false;
    m_creation_status_isValid = false;

    m_identity_store_isSet = false;
    m_identity_store_isValid = false;

    m_namespace_error_isSet = false;
    m_namespace_error_isValid = false;
}

void OAIDescribeNamespaceResponse_Namespace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeNamespaceResponse_Namespace::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_capacity_region_isValid = ::OpenAPI::fromJsonValue(m_capacity_region, json[QString("CapacityRegion")]);
    m_capacity_region_isSet = !json[QString("CapacityRegion")].isNull() && m_capacity_region_isValid;

    m_creation_status_isValid = ::OpenAPI::fromJsonValue(m_creation_status, json[QString("CreationStatus")]);
    m_creation_status_isSet = !json[QString("CreationStatus")].isNull() && m_creation_status_isValid;

    m_identity_store_isValid = ::OpenAPI::fromJsonValue(m_identity_store, json[QString("IdentityStore")]);
    m_identity_store_isSet = !json[QString("IdentityStore")].isNull() && m_identity_store_isValid;

    m_namespace_error_isValid = ::OpenAPI::fromJsonValue(m_namespace_error, json[QString("NamespaceError")]);
    m_namespace_error_isSet = !json[QString("NamespaceError")].isNull() && m_namespace_error_isValid;
}

QString OAIDescribeNamespaceResponse_Namespace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeNamespaceResponse_Namespace::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_capacity_region_isSet) {
        obj.insert(QString("CapacityRegion"), ::OpenAPI::toJsonValue(m_capacity_region));
    }
    if (m_creation_status.isSet()) {
        obj.insert(QString("CreationStatus"), ::OpenAPI::toJsonValue(m_creation_status));
    }
    if (m_identity_store.isSet()) {
        obj.insert(QString("IdentityStore"), ::OpenAPI::toJsonValue(m_identity_store));
    }
    if (m_namespace_error.isSet()) {
        obj.insert(QString("NamespaceError"), ::OpenAPI::toJsonValue(m_namespace_error));
    }
    return obj;
}

QString OAIDescribeNamespaceResponse_Namespace::getName() const {
    return m_name;
}
void OAIDescribeNamespaceResponse_Namespace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeNamespaceResponse_Namespace::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeNamespaceResponse_Namespace::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeNamespaceResponse_Namespace::getArn() const {
    return m_arn;
}
void OAIDescribeNamespaceResponse_Namespace::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeNamespaceResponse_Namespace::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeNamespaceResponse_Namespace::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeNamespaceResponse_Namespace::getCapacityRegion() const {
    return m_capacity_region;
}
void OAIDescribeNamespaceResponse_Namespace::setCapacityRegion(const QString &capacity_region) {
    m_capacity_region = capacity_region;
    m_capacity_region_isSet = true;
}

bool OAIDescribeNamespaceResponse_Namespace::is_capacity_region_Set() const{
    return m_capacity_region_isSet;
}

bool OAIDescribeNamespaceResponse_Namespace::is_capacity_region_Valid() const{
    return m_capacity_region_isValid;
}

OAINamespaceStatus OAIDescribeNamespaceResponse_Namespace::getCreationStatus() const {
    return m_creation_status;
}
void OAIDescribeNamespaceResponse_Namespace::setCreationStatus(const OAINamespaceStatus &creation_status) {
    m_creation_status = creation_status;
    m_creation_status_isSet = true;
}

bool OAIDescribeNamespaceResponse_Namespace::is_creation_status_Set() const{
    return m_creation_status_isSet;
}

bool OAIDescribeNamespaceResponse_Namespace::is_creation_status_Valid() const{
    return m_creation_status_isValid;
}

OAIIdentityStore OAIDescribeNamespaceResponse_Namespace::getIdentityStore() const {
    return m_identity_store;
}
void OAIDescribeNamespaceResponse_Namespace::setIdentityStore(const OAIIdentityStore &identity_store) {
    m_identity_store = identity_store;
    m_identity_store_isSet = true;
}

bool OAIDescribeNamespaceResponse_Namespace::is_identity_store_Set() const{
    return m_identity_store_isSet;
}

bool OAIDescribeNamespaceResponse_Namespace::is_identity_store_Valid() const{
    return m_identity_store_isValid;
}

OAINamespaceInfoV2_NamespaceError OAIDescribeNamespaceResponse_Namespace::getNamespaceError() const {
    return m_namespace_error;
}
void OAIDescribeNamespaceResponse_Namespace::setNamespaceError(const OAINamespaceInfoV2_NamespaceError &namespace_error) {
    m_namespace_error = namespace_error;
    m_namespace_error_isSet = true;
}

bool OAIDescribeNamespaceResponse_Namespace::is_namespace_error_Set() const{
    return m_namespace_error_isSet;
}

bool OAIDescribeNamespaceResponse_Namespace::is_namespace_error_Valid() const{
    return m_namespace_error_isValid;
}

bool OAIDescribeNamespaceResponse_Namespace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_store.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeNamespaceResponse_Namespace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
