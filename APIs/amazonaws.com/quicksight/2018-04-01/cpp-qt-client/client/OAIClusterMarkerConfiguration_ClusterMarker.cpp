/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterMarkerConfiguration_ClusterMarker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterMarkerConfiguration_ClusterMarker::OAIClusterMarkerConfiguration_ClusterMarker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterMarkerConfiguration_ClusterMarker::OAIClusterMarkerConfiguration_ClusterMarker() {
    this->initializeModel();
}

OAIClusterMarkerConfiguration_ClusterMarker::~OAIClusterMarkerConfiguration_ClusterMarker() {}

void OAIClusterMarkerConfiguration_ClusterMarker::initializeModel() {

    m_simple_cluster_marker_isSet = false;
    m_simple_cluster_marker_isValid = false;
}

void OAIClusterMarkerConfiguration_ClusterMarker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterMarkerConfiguration_ClusterMarker::fromJsonObject(QJsonObject json) {

    m_simple_cluster_marker_isValid = ::OpenAPI::fromJsonValue(m_simple_cluster_marker, json[QString("SimpleClusterMarker")]);
    m_simple_cluster_marker_isSet = !json[QString("SimpleClusterMarker")].isNull() && m_simple_cluster_marker_isValid;
}

QString OAIClusterMarkerConfiguration_ClusterMarker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterMarkerConfiguration_ClusterMarker::asJsonObject() const {
    QJsonObject obj;
    if (m_simple_cluster_marker.isSet()) {
        obj.insert(QString("SimpleClusterMarker"), ::OpenAPI::toJsonValue(m_simple_cluster_marker));
    }
    return obj;
}

OAIClusterMarker_SimpleClusterMarker OAIClusterMarkerConfiguration_ClusterMarker::getSimpleClusterMarker() const {
    return m_simple_cluster_marker;
}
void OAIClusterMarkerConfiguration_ClusterMarker::setSimpleClusterMarker(const OAIClusterMarker_SimpleClusterMarker &simple_cluster_marker) {
    m_simple_cluster_marker = simple_cluster_marker;
    m_simple_cluster_marker_isSet = true;
}

bool OAIClusterMarkerConfiguration_ClusterMarker::is_simple_cluster_marker_Set() const{
    return m_simple_cluster_marker_isSet;
}

bool OAIClusterMarkerConfiguration_ClusterMarker::is_simple_cluster_marker_Valid() const{
    return m_simple_cluster_marker_isValid;
}

bool OAIClusterMarkerConfiguration_ClusterMarker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_simple_cluster_marker.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterMarkerConfiguration_ClusterMarker::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
