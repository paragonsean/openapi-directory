/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisualCustomActionOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisualCustomActionOperation::OAIVisualCustomActionOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisualCustomActionOperation::OAIVisualCustomActionOperation() {
    this->initializeModel();
}

OAIVisualCustomActionOperation::~OAIVisualCustomActionOperation() {}

void OAIVisualCustomActionOperation::initializeModel() {

    m_filter_operation_isSet = false;
    m_filter_operation_isValid = false;

    m_navigation_operation_isSet = false;
    m_navigation_operation_isValid = false;

    m_url_operation_isSet = false;
    m_url_operation_isValid = false;

    m_set_parameters_operation_isSet = false;
    m_set_parameters_operation_isValid = false;
}

void OAIVisualCustomActionOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisualCustomActionOperation::fromJsonObject(QJsonObject json) {

    m_filter_operation_isValid = ::OpenAPI::fromJsonValue(m_filter_operation, json[QString("FilterOperation")]);
    m_filter_operation_isSet = !json[QString("FilterOperation")].isNull() && m_filter_operation_isValid;

    m_navigation_operation_isValid = ::OpenAPI::fromJsonValue(m_navigation_operation, json[QString("NavigationOperation")]);
    m_navigation_operation_isSet = !json[QString("NavigationOperation")].isNull() && m_navigation_operation_isValid;

    m_url_operation_isValid = ::OpenAPI::fromJsonValue(m_url_operation, json[QString("URLOperation")]);
    m_url_operation_isSet = !json[QString("URLOperation")].isNull() && m_url_operation_isValid;

    m_set_parameters_operation_isValid = ::OpenAPI::fromJsonValue(m_set_parameters_operation, json[QString("SetParametersOperation")]);
    m_set_parameters_operation_isSet = !json[QString("SetParametersOperation")].isNull() && m_set_parameters_operation_isValid;
}

QString OAIVisualCustomActionOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisualCustomActionOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_operation.isSet()) {
        obj.insert(QString("FilterOperation"), ::OpenAPI::toJsonValue(m_filter_operation));
    }
    if (m_navigation_operation.isSet()) {
        obj.insert(QString("NavigationOperation"), ::OpenAPI::toJsonValue(m_navigation_operation));
    }
    if (m_url_operation.isSet()) {
        obj.insert(QString("URLOperation"), ::OpenAPI::toJsonValue(m_url_operation));
    }
    if (m_set_parameters_operation.isSet()) {
        obj.insert(QString("SetParametersOperation"), ::OpenAPI::toJsonValue(m_set_parameters_operation));
    }
    return obj;
}

OAIVisualCustomActionOperation_FilterOperation OAIVisualCustomActionOperation::getFilterOperation() const {
    return m_filter_operation;
}
void OAIVisualCustomActionOperation::setFilterOperation(const OAIVisualCustomActionOperation_FilterOperation &filter_operation) {
    m_filter_operation = filter_operation;
    m_filter_operation_isSet = true;
}

bool OAIVisualCustomActionOperation::is_filter_operation_Set() const{
    return m_filter_operation_isSet;
}

bool OAIVisualCustomActionOperation::is_filter_operation_Valid() const{
    return m_filter_operation_isValid;
}

OAIVisualCustomActionOperation_NavigationOperation OAIVisualCustomActionOperation::getNavigationOperation() const {
    return m_navigation_operation;
}
void OAIVisualCustomActionOperation::setNavigationOperation(const OAIVisualCustomActionOperation_NavigationOperation &navigation_operation) {
    m_navigation_operation = navigation_operation;
    m_navigation_operation_isSet = true;
}

bool OAIVisualCustomActionOperation::is_navigation_operation_Set() const{
    return m_navigation_operation_isSet;
}

bool OAIVisualCustomActionOperation::is_navigation_operation_Valid() const{
    return m_navigation_operation_isValid;
}

OAIVisualCustomActionOperation_URLOperation OAIVisualCustomActionOperation::getUrlOperation() const {
    return m_url_operation;
}
void OAIVisualCustomActionOperation::setUrlOperation(const OAIVisualCustomActionOperation_URLOperation &url_operation) {
    m_url_operation = url_operation;
    m_url_operation_isSet = true;
}

bool OAIVisualCustomActionOperation::is_url_operation_Set() const{
    return m_url_operation_isSet;
}

bool OAIVisualCustomActionOperation::is_url_operation_Valid() const{
    return m_url_operation_isValid;
}

OAIVisualCustomActionOperation_SetParametersOperation OAIVisualCustomActionOperation::getSetParametersOperation() const {
    return m_set_parameters_operation;
}
void OAIVisualCustomActionOperation::setSetParametersOperation(const OAIVisualCustomActionOperation_SetParametersOperation &set_parameters_operation) {
    m_set_parameters_operation = set_parameters_operation;
    m_set_parameters_operation_isSet = true;
}

bool OAIVisualCustomActionOperation::is_set_parameters_operation_Set() const{
    return m_set_parameters_operation_isSet;
}

bool OAIVisualCustomActionOperation::is_set_parameters_operation_Valid() const{
    return m_set_parameters_operation_isValid;
}

bool OAIVisualCustomActionOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_parameters_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisualCustomActionOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
