/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThemeVersionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThemeVersionSummary::OAIThemeVersionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThemeVersionSummary::OAIThemeVersionSummary() {
    this->initializeModel();
}

OAIThemeVersionSummary::~OAIThemeVersionSummary() {}

void OAIThemeVersionSummary::initializeModel() {

    m_version_number_isSet = false;
    m_version_number_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIThemeVersionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThemeVersionSummary::fromJsonObject(QJsonObject json) {

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("VersionNumber")]);
    m_version_number_isSet = !json[QString("VersionNumber")].isNull() && m_version_number_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIThemeVersionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThemeVersionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_version_number_isSet) {
        obj.insert(QString("VersionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIThemeVersionSummary::getVersionNumber() const {
    return m_version_number;
}
void OAIThemeVersionSummary::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIThemeVersionSummary::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIThemeVersionSummary::is_version_number_Valid() const{
    return m_version_number_isValid;
}

QString OAIThemeVersionSummary::getArn() const {
    return m_arn;
}
void OAIThemeVersionSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIThemeVersionSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIThemeVersionSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIThemeVersionSummary::getDescription() const {
    return m_description;
}
void OAIThemeVersionSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIThemeVersionSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIThemeVersionSummary::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIThemeVersionSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIThemeVersionSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIThemeVersionSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIThemeVersionSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIResourceStatus OAIThemeVersionSummary::getStatus() const {
    return m_status;
}
void OAIThemeVersionSummary::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIThemeVersionSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIThemeVersionSummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIThemeVersionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThemeVersionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
