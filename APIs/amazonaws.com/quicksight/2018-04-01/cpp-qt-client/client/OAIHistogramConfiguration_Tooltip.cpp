/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramConfiguration_Tooltip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramConfiguration_Tooltip::OAIHistogramConfiguration_Tooltip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramConfiguration_Tooltip::OAIHistogramConfiguration_Tooltip() {
    this->initializeModel();
}

OAIHistogramConfiguration_Tooltip::~OAIHistogramConfiguration_Tooltip() {}

void OAIHistogramConfiguration_Tooltip::initializeModel() {

    m_tooltip_visibility_isSet = false;
    m_tooltip_visibility_isValid = false;

    m_selected_tooltip_type_isSet = false;
    m_selected_tooltip_type_isValid = false;

    m_field_based_tooltip_isSet = false;
    m_field_based_tooltip_isValid = false;
}

void OAIHistogramConfiguration_Tooltip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramConfiguration_Tooltip::fromJsonObject(QJsonObject json) {

    m_tooltip_visibility_isValid = ::OpenAPI::fromJsonValue(m_tooltip_visibility, json[QString("TooltipVisibility")]);
    m_tooltip_visibility_isSet = !json[QString("TooltipVisibility")].isNull() && m_tooltip_visibility_isValid;

    m_selected_tooltip_type_isValid = ::OpenAPI::fromJsonValue(m_selected_tooltip_type, json[QString("SelectedTooltipType")]);
    m_selected_tooltip_type_isSet = !json[QString("SelectedTooltipType")].isNull() && m_selected_tooltip_type_isValid;

    m_field_based_tooltip_isValid = ::OpenAPI::fromJsonValue(m_field_based_tooltip, json[QString("FieldBasedTooltip")]);
    m_field_based_tooltip_isSet = !json[QString("FieldBasedTooltip")].isNull() && m_field_based_tooltip_isValid;
}

QString OAIHistogramConfiguration_Tooltip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramConfiguration_Tooltip::asJsonObject() const {
    QJsonObject obj;
    if (m_tooltip_visibility.isSet()) {
        obj.insert(QString("TooltipVisibility"), ::OpenAPI::toJsonValue(m_tooltip_visibility));
    }
    if (m_selected_tooltip_type.isSet()) {
        obj.insert(QString("SelectedTooltipType"), ::OpenAPI::toJsonValue(m_selected_tooltip_type));
    }
    if (m_field_based_tooltip.isSet()) {
        obj.insert(QString("FieldBasedTooltip"), ::OpenAPI::toJsonValue(m_field_based_tooltip));
    }
    return obj;
}

OAIVisibility OAIHistogramConfiguration_Tooltip::getTooltipVisibility() const {
    return m_tooltip_visibility;
}
void OAIHistogramConfiguration_Tooltip::setTooltipVisibility(const OAIVisibility &tooltip_visibility) {
    m_tooltip_visibility = tooltip_visibility;
    m_tooltip_visibility_isSet = true;
}

bool OAIHistogramConfiguration_Tooltip::is_tooltip_visibility_Set() const{
    return m_tooltip_visibility_isSet;
}

bool OAIHistogramConfiguration_Tooltip::is_tooltip_visibility_Valid() const{
    return m_tooltip_visibility_isValid;
}

OAISelectedTooltipType OAIHistogramConfiguration_Tooltip::getSelectedTooltipType() const {
    return m_selected_tooltip_type;
}
void OAIHistogramConfiguration_Tooltip::setSelectedTooltipType(const OAISelectedTooltipType &selected_tooltip_type) {
    m_selected_tooltip_type = selected_tooltip_type;
    m_selected_tooltip_type_isSet = true;
}

bool OAIHistogramConfiguration_Tooltip::is_selected_tooltip_type_Set() const{
    return m_selected_tooltip_type_isSet;
}

bool OAIHistogramConfiguration_Tooltip::is_selected_tooltip_type_Valid() const{
    return m_selected_tooltip_type_isValid;
}

OAITooltipOptions_FieldBasedTooltip OAIHistogramConfiguration_Tooltip::getFieldBasedTooltip() const {
    return m_field_based_tooltip;
}
void OAIHistogramConfiguration_Tooltip::setFieldBasedTooltip(const OAITooltipOptions_FieldBasedTooltip &field_based_tooltip) {
    m_field_based_tooltip = field_based_tooltip;
    m_field_based_tooltip_isSet = true;
}

bool OAIHistogramConfiguration_Tooltip::is_field_based_tooltip_Set() const{
    return m_field_based_tooltip_isSet;
}

bool OAIHistogramConfiguration_Tooltip::is_field_based_tooltip_Valid() const{
    return m_field_based_tooltip_isValid;
}

bool OAIHistogramConfiguration_Tooltip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tooltip_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_tooltip_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_based_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramConfiguration_Tooltip::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
