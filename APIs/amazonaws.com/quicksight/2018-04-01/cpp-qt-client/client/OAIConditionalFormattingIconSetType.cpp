/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingIconSetType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingIconSetType::OAIConditionalFormattingIconSetType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingIconSetType::OAIConditionalFormattingIconSetType() {
    this->initializeModel();
}

OAIConditionalFormattingIconSetType::~OAIConditionalFormattingIconSetType() {}

void OAIConditionalFormattingIconSetType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConditionalFormattingIconSetType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConditionalFormattingIconSetType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PLUS_MINUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::PLUS_MINUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHECK_X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::CHECK_X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THREE_COLOR_ARROW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::THREE_COLOR_ARROW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THREE_GRAY_ARROW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::THREE_GRAY_ARROW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARET_UP_MINUS_DOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::CARET_UP_MINUS_DOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THREE_SHAPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::THREE_SHAPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THREE_CIRCLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::THREE_CIRCLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLAGS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::FLAGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BARS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::BARS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FOUR_COLOR_ARROW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::FOUR_COLOR_ARROW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FOUR_GRAY_ARROW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConditionalFormattingIconSetType::FOUR_GRAY_ARROW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConditionalFormattingIconSetType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConditionalFormattingIconSetType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConditionalFormattingIconSetType::PLUS_MINUS:
            val = "PLUS_MINUS";
            break;
        case eOAIConditionalFormattingIconSetType::CHECK_X:
            val = "CHECK_X";
            break;
        case eOAIConditionalFormattingIconSetType::THREE_COLOR_ARROW:
            val = "THREE_COLOR_ARROW";
            break;
        case eOAIConditionalFormattingIconSetType::THREE_GRAY_ARROW:
            val = "THREE_GRAY_ARROW";
            break;
        case eOAIConditionalFormattingIconSetType::CARET_UP_MINUS_DOWN:
            val = "CARET_UP_MINUS_DOWN";
            break;
        case eOAIConditionalFormattingIconSetType::THREE_SHAPE:
            val = "THREE_SHAPE";
            break;
        case eOAIConditionalFormattingIconSetType::THREE_CIRCLE:
            val = "THREE_CIRCLE";
            break;
        case eOAIConditionalFormattingIconSetType::FLAGS:
            val = "FLAGS";
            break;
        case eOAIConditionalFormattingIconSetType::BARS:
            val = "BARS";
            break;
        case eOAIConditionalFormattingIconSetType::FOUR_COLOR_ARROW:
            val = "FOUR_COLOR_ARROW";
            break;
        case eOAIConditionalFormattingIconSetType::FOUR_GRAY_ARROW:
            val = "FOUR_GRAY_ARROW";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConditionalFormattingIconSetType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConditionalFormattingIconSetType::eOAIConditionalFormattingIconSetType OAIConditionalFormattingIconSetType::getValue() const {
    return m_value;
}

void OAIConditionalFormattingIconSetType::setValue(const OAIConditionalFormattingIconSetType::eOAIConditionalFormattingIconSetType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConditionalFormattingIconSetType::isSet() const {
    
    return m_value_isSet;
}

bool OAIConditionalFormattingIconSetType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
