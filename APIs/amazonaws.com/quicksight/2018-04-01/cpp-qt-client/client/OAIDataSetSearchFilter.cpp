/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetSearchFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetSearchFilter::OAIDataSetSearchFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetSearchFilter::OAIDataSetSearchFilter() {
    this->initializeModel();
}

OAIDataSetSearchFilter::~OAIDataSetSearchFilter() {}

void OAIDataSetSearchFilter::initializeModel() {

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDataSetSearchFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetSearchFilter::fromJsonObject(QJsonObject json) {

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("Operator")]);
    m_r_operator_isSet = !json[QString("Operator")].isNull() && m_r_operator_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIDataSetSearchFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetSearchFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_r_operator.isSet()) {
        obj.insert(QString("Operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_name.isSet()) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIFilterOperator OAIDataSetSearchFilter::getROperator() const {
    return m_r_operator;
}
void OAIDataSetSearchFilter::setROperator(const OAIFilterOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIDataSetSearchFilter::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIDataSetSearchFilter::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

OAIDataSetFilterAttribute OAIDataSetSearchFilter::getName() const {
    return m_name;
}
void OAIDataSetSearchFilter::setName(const OAIDataSetFilterAttribute &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSetSearchFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSetSearchFilter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataSetSearchFilter::getValue() const {
    return m_value;
}
void OAIDataSetSearchFilter::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDataSetSearchFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDataSetSearchFilter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDataSetSearchFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetSearchFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_operator_isValid && m_name_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
