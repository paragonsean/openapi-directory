/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineChartFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineChartFieldWells::OAILineChartFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineChartFieldWells::OAILineChartFieldWells() {
    this->initializeModel();
}

OAILineChartFieldWells::~OAILineChartFieldWells() {}

void OAILineChartFieldWells::initializeModel() {

    m_line_chart_aggregated_field_wells_isSet = false;
    m_line_chart_aggregated_field_wells_isValid = false;
}

void OAILineChartFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineChartFieldWells::fromJsonObject(QJsonObject json) {

    m_line_chart_aggregated_field_wells_isValid = ::OpenAPI::fromJsonValue(m_line_chart_aggregated_field_wells, json[QString("LineChartAggregatedFieldWells")]);
    m_line_chart_aggregated_field_wells_isSet = !json[QString("LineChartAggregatedFieldWells")].isNull() && m_line_chart_aggregated_field_wells_isValid;
}

QString OAILineChartFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineChartFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_line_chart_aggregated_field_wells.isSet()) {
        obj.insert(QString("LineChartAggregatedFieldWells"), ::OpenAPI::toJsonValue(m_line_chart_aggregated_field_wells));
    }
    return obj;
}

OAILineChartFieldWells_LineChartAggregatedFieldWells OAILineChartFieldWells::getLineChartAggregatedFieldWells() const {
    return m_line_chart_aggregated_field_wells;
}
void OAILineChartFieldWells::setLineChartAggregatedFieldWells(const OAILineChartFieldWells_LineChartAggregatedFieldWells &line_chart_aggregated_field_wells) {
    m_line_chart_aggregated_field_wells = line_chart_aggregated_field_wells;
    m_line_chart_aggregated_field_wells_isSet = true;
}

bool OAILineChartFieldWells::is_line_chart_aggregated_field_wells_Set() const{
    return m_line_chart_aggregated_field_wells_isSet;
}

bool OAILineChartFieldWells::is_line_chart_aggregated_field_wells_Valid() const{
    return m_line_chart_aggregated_field_wells_isValid;
}

bool OAILineChartFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_chart_aggregated_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineChartFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
