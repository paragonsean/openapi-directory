/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineChartSeriesSettings_MarkerStyleSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineChartSeriesSettings_MarkerStyleSettings::OAILineChartSeriesSettings_MarkerStyleSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineChartSeriesSettings_MarkerStyleSettings::OAILineChartSeriesSettings_MarkerStyleSettings() {
    this->initializeModel();
}

OAILineChartSeriesSettings_MarkerStyleSettings::~OAILineChartSeriesSettings_MarkerStyleSettings() {}

void OAILineChartSeriesSettings_MarkerStyleSettings::initializeModel() {

    m_marker_visibility_isSet = false;
    m_marker_visibility_isValid = false;

    m_marker_shape_isSet = false;
    m_marker_shape_isValid = false;

    m_marker_size_isSet = false;
    m_marker_size_isValid = false;

    m_marker_color_isSet = false;
    m_marker_color_isValid = false;
}

void OAILineChartSeriesSettings_MarkerStyleSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineChartSeriesSettings_MarkerStyleSettings::fromJsonObject(QJsonObject json) {

    m_marker_visibility_isValid = ::OpenAPI::fromJsonValue(m_marker_visibility, json[QString("MarkerVisibility")]);
    m_marker_visibility_isSet = !json[QString("MarkerVisibility")].isNull() && m_marker_visibility_isValid;

    m_marker_shape_isValid = ::OpenAPI::fromJsonValue(m_marker_shape, json[QString("MarkerShape")]);
    m_marker_shape_isSet = !json[QString("MarkerShape")].isNull() && m_marker_shape_isValid;

    m_marker_size_isValid = ::OpenAPI::fromJsonValue(m_marker_size, json[QString("MarkerSize")]);
    m_marker_size_isSet = !json[QString("MarkerSize")].isNull() && m_marker_size_isValid;

    m_marker_color_isValid = ::OpenAPI::fromJsonValue(m_marker_color, json[QString("MarkerColor")]);
    m_marker_color_isSet = !json[QString("MarkerColor")].isNull() && m_marker_color_isValid;
}

QString OAILineChartSeriesSettings_MarkerStyleSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineChartSeriesSettings_MarkerStyleSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_marker_visibility.isSet()) {
        obj.insert(QString("MarkerVisibility"), ::OpenAPI::toJsonValue(m_marker_visibility));
    }
    if (m_marker_shape.isSet()) {
        obj.insert(QString("MarkerShape"), ::OpenAPI::toJsonValue(m_marker_shape));
    }
    if (m_marker_size_isSet) {
        obj.insert(QString("MarkerSize"), ::OpenAPI::toJsonValue(m_marker_size));
    }
    if (m_marker_color_isSet) {
        obj.insert(QString("MarkerColor"), ::OpenAPI::toJsonValue(m_marker_color));
    }
    return obj;
}

OAIVisibility OAILineChartSeriesSettings_MarkerStyleSettings::getMarkerVisibility() const {
    return m_marker_visibility;
}
void OAILineChartSeriesSettings_MarkerStyleSettings::setMarkerVisibility(const OAIVisibility &marker_visibility) {
    m_marker_visibility = marker_visibility;
    m_marker_visibility_isSet = true;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::is_marker_visibility_Set() const{
    return m_marker_visibility_isSet;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::is_marker_visibility_Valid() const{
    return m_marker_visibility_isValid;
}

OAILineChartMarkerShape OAILineChartSeriesSettings_MarkerStyleSettings::getMarkerShape() const {
    return m_marker_shape;
}
void OAILineChartSeriesSettings_MarkerStyleSettings::setMarkerShape(const OAILineChartMarkerShape &marker_shape) {
    m_marker_shape = marker_shape;
    m_marker_shape_isSet = true;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::is_marker_shape_Set() const{
    return m_marker_shape_isSet;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::is_marker_shape_Valid() const{
    return m_marker_shape_isValid;
}

QString OAILineChartSeriesSettings_MarkerStyleSettings::getMarkerSize() const {
    return m_marker_size;
}
void OAILineChartSeriesSettings_MarkerStyleSettings::setMarkerSize(const QString &marker_size) {
    m_marker_size = marker_size;
    m_marker_size_isSet = true;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::is_marker_size_Set() const{
    return m_marker_size_isSet;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::is_marker_size_Valid() const{
    return m_marker_size_isValid;
}

QString OAILineChartSeriesSettings_MarkerStyleSettings::getMarkerColor() const {
    return m_marker_color;
}
void OAILineChartSeriesSettings_MarkerStyleSettings::setMarkerColor(const QString &marker_color) {
    m_marker_color = marker_color;
    m_marker_color_isSet = true;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::is_marker_color_Set() const{
    return m_marker_color_isSet;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::is_marker_color_Valid() const{
    return m_marker_color_isValid;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_marker_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineChartSeriesSettings_MarkerStyleSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
