/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRowInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRowInfo::OAIRowInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRowInfo::OAIRowInfo() {
    this->initializeModel();
}

OAIRowInfo::~OAIRowInfo() {}

void OAIRowInfo::initializeModel() {

    m_rows_ingested_isSet = false;
    m_rows_ingested_isValid = false;

    m_rows_dropped_isSet = false;
    m_rows_dropped_isValid = false;

    m_total_rows_in_dataset_isSet = false;
    m_total_rows_in_dataset_isValid = false;
}

void OAIRowInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRowInfo::fromJsonObject(QJsonObject json) {

    m_rows_ingested_isValid = ::OpenAPI::fromJsonValue(m_rows_ingested, json[QString("RowsIngested")]);
    m_rows_ingested_isSet = !json[QString("RowsIngested")].isNull() && m_rows_ingested_isValid;

    m_rows_dropped_isValid = ::OpenAPI::fromJsonValue(m_rows_dropped, json[QString("RowsDropped")]);
    m_rows_dropped_isSet = !json[QString("RowsDropped")].isNull() && m_rows_dropped_isValid;

    m_total_rows_in_dataset_isValid = ::OpenAPI::fromJsonValue(m_total_rows_in_dataset, json[QString("TotalRowsInDataset")]);
    m_total_rows_in_dataset_isSet = !json[QString("TotalRowsInDataset")].isNull() && m_total_rows_in_dataset_isValid;
}

QString OAIRowInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRowInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_rows_ingested_isSet) {
        obj.insert(QString("RowsIngested"), ::OpenAPI::toJsonValue(m_rows_ingested));
    }
    if (m_rows_dropped_isSet) {
        obj.insert(QString("RowsDropped"), ::OpenAPI::toJsonValue(m_rows_dropped));
    }
    if (m_total_rows_in_dataset_isSet) {
        obj.insert(QString("TotalRowsInDataset"), ::OpenAPI::toJsonValue(m_total_rows_in_dataset));
    }
    return obj;
}

qint32 OAIRowInfo::getRowsIngested() const {
    return m_rows_ingested;
}
void OAIRowInfo::setRowsIngested(const qint32 &rows_ingested) {
    m_rows_ingested = rows_ingested;
    m_rows_ingested_isSet = true;
}

bool OAIRowInfo::is_rows_ingested_Set() const{
    return m_rows_ingested_isSet;
}

bool OAIRowInfo::is_rows_ingested_Valid() const{
    return m_rows_ingested_isValid;
}

qint32 OAIRowInfo::getRowsDropped() const {
    return m_rows_dropped;
}
void OAIRowInfo::setRowsDropped(const qint32 &rows_dropped) {
    m_rows_dropped = rows_dropped;
    m_rows_dropped_isSet = true;
}

bool OAIRowInfo::is_rows_dropped_Set() const{
    return m_rows_dropped_isSet;
}

bool OAIRowInfo::is_rows_dropped_Valid() const{
    return m_rows_dropped_isValid;
}

qint32 OAIRowInfo::getTotalRowsInDataset() const {
    return m_total_rows_in_dataset;
}
void OAIRowInfo::setTotalRowsInDataset(const qint32 &total_rows_in_dataset) {
    m_total_rows_in_dataset = total_rows_in_dataset;
    m_total_rows_in_dataset_isSet = true;
}

bool OAIRowInfo::is_total_rows_in_dataset_Set() const{
    return m_total_rows_in_dataset_isSet;
}

bool OAIRowInfo::is_total_rows_in_dataset_Valid() const{
    return m_total_rows_in_dataset_isValid;
}

bool OAIRowInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rows_ingested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_dropped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rows_in_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRowInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
