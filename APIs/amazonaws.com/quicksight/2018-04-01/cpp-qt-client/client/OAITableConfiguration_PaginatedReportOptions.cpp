/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableConfiguration_PaginatedReportOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableConfiguration_PaginatedReportOptions::OAITableConfiguration_PaginatedReportOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableConfiguration_PaginatedReportOptions::OAITableConfiguration_PaginatedReportOptions() {
    this->initializeModel();
}

OAITableConfiguration_PaginatedReportOptions::~OAITableConfiguration_PaginatedReportOptions() {}

void OAITableConfiguration_PaginatedReportOptions::initializeModel() {

    m_vertical_overflow_visibility_isSet = false;
    m_vertical_overflow_visibility_isValid = false;

    m_overflow_column_header_visibility_isSet = false;
    m_overflow_column_header_visibility_isValid = false;
}

void OAITableConfiguration_PaginatedReportOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableConfiguration_PaginatedReportOptions::fromJsonObject(QJsonObject json) {

    m_vertical_overflow_visibility_isValid = ::OpenAPI::fromJsonValue(m_vertical_overflow_visibility, json[QString("VerticalOverflowVisibility")]);
    m_vertical_overflow_visibility_isSet = !json[QString("VerticalOverflowVisibility")].isNull() && m_vertical_overflow_visibility_isValid;

    m_overflow_column_header_visibility_isValid = ::OpenAPI::fromJsonValue(m_overflow_column_header_visibility, json[QString("OverflowColumnHeaderVisibility")]);
    m_overflow_column_header_visibility_isSet = !json[QString("OverflowColumnHeaderVisibility")].isNull() && m_overflow_column_header_visibility_isValid;
}

QString OAITableConfiguration_PaginatedReportOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableConfiguration_PaginatedReportOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_vertical_overflow_visibility.isSet()) {
        obj.insert(QString("VerticalOverflowVisibility"), ::OpenAPI::toJsonValue(m_vertical_overflow_visibility));
    }
    if (m_overflow_column_header_visibility.isSet()) {
        obj.insert(QString("OverflowColumnHeaderVisibility"), ::OpenAPI::toJsonValue(m_overflow_column_header_visibility));
    }
    return obj;
}

OAIVisibility OAITableConfiguration_PaginatedReportOptions::getVerticalOverflowVisibility() const {
    return m_vertical_overflow_visibility;
}
void OAITableConfiguration_PaginatedReportOptions::setVerticalOverflowVisibility(const OAIVisibility &vertical_overflow_visibility) {
    m_vertical_overflow_visibility = vertical_overflow_visibility;
    m_vertical_overflow_visibility_isSet = true;
}

bool OAITableConfiguration_PaginatedReportOptions::is_vertical_overflow_visibility_Set() const{
    return m_vertical_overflow_visibility_isSet;
}

bool OAITableConfiguration_PaginatedReportOptions::is_vertical_overflow_visibility_Valid() const{
    return m_vertical_overflow_visibility_isValid;
}

OAIVisibility OAITableConfiguration_PaginatedReportOptions::getOverflowColumnHeaderVisibility() const {
    return m_overflow_column_header_visibility;
}
void OAITableConfiguration_PaginatedReportOptions::setOverflowColumnHeaderVisibility(const OAIVisibility &overflow_column_header_visibility) {
    m_overflow_column_header_visibility = overflow_column_header_visibility;
    m_overflow_column_header_visibility_isSet = true;
}

bool OAITableConfiguration_PaginatedReportOptions::is_overflow_column_header_visibility_Set() const{
    return m_overflow_column_header_visibility_isSet;
}

bool OAITableConfiguration_PaginatedReportOptions::is_overflow_column_header_visibility_Valid() const{
    return m_overflow_column_header_visibility_isValid;
}

bool OAITableConfiguration_PaginatedReportOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vertical_overflow_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overflow_column_header_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableConfiguration_PaginatedReportOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
