/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITopicCalculatedField.h
 *
 * A structure that represents a calculated field.
 */

#ifndef OAITopicCalculatedField_H
#define OAITopicCalculatedField_H

#include <QJsonObject>

#include "OAIColumnDataRole.h"
#include "OAIDefaultAggregation.h"
#include "OAITopicCalculatedField_ComparativeOrder.h"
#include "OAITopicCalculatedField_DefaultFormatting.h"
#include "OAITopicCalculatedField_SemanticType.h"
#include "OAITopicTimeGranularity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITopicCalculatedField_DefaultFormatting;
class OAITopicCalculatedField_ComparativeOrder;
class OAITopicCalculatedField_SemanticType;

class OAITopicCalculatedField : public OAIObject {
public:
    OAITopicCalculatedField();
    OAITopicCalculatedField(QString json);
    ~OAITopicCalculatedField() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCalculatedFieldName() const;
    void setCalculatedFieldName(const QString &calculated_field_name);
    bool is_calculated_field_name_Set() const;
    bool is_calculated_field_name_Valid() const;

    QString getCalculatedFieldDescription() const;
    void setCalculatedFieldDescription(const QString &calculated_field_description);
    bool is_calculated_field_description_Set() const;
    bool is_calculated_field_description_Valid() const;

    QString getExpression() const;
    void setExpression(const QString &expression);
    bool is_expression_Set() const;
    bool is_expression_Valid() const;

    QList getCalculatedFieldSynonyms() const;
    void setCalculatedFieldSynonyms(const QList &calculated_field_synonyms);
    bool is_calculated_field_synonyms_Set() const;
    bool is_calculated_field_synonyms_Valid() const;

    bool getIsIncludedInTopic() const;
    void setIsIncludedInTopic(const bool &is_included_in_topic);
    bool is_is_included_in_topic_Set() const;
    bool is_is_included_in_topic_Valid() const;

    bool getDisableIndexing() const;
    void setDisableIndexing(const bool &disable_indexing);
    bool is_disable_indexing_Set() const;
    bool is_disable_indexing_Valid() const;

    OAIColumnDataRole getColumnDataRole() const;
    void setColumnDataRole(const OAIColumnDataRole &column_data_role);
    bool is_column_data_role_Set() const;
    bool is_column_data_role_Valid() const;

    OAITopicTimeGranularity getTimeGranularity() const;
    void setTimeGranularity(const OAITopicTimeGranularity &time_granularity);
    bool is_time_granularity_Set() const;
    bool is_time_granularity_Valid() const;

    OAITopicCalculatedField_DefaultFormatting getDefaultFormatting() const;
    void setDefaultFormatting(const OAITopicCalculatedField_DefaultFormatting &default_formatting);
    bool is_default_formatting_Set() const;
    bool is_default_formatting_Valid() const;

    OAIDefaultAggregation getAggregation() const;
    void setAggregation(const OAIDefaultAggregation &aggregation);
    bool is_aggregation_Set() const;
    bool is_aggregation_Valid() const;

    OAITopicCalculatedField_ComparativeOrder getComparativeOrder() const;
    void setComparativeOrder(const OAITopicCalculatedField_ComparativeOrder &comparative_order);
    bool is_comparative_order_Set() const;
    bool is_comparative_order_Valid() const;

    OAITopicCalculatedField_SemanticType getSemanticType() const;
    void setSemanticType(const OAITopicCalculatedField_SemanticType &semantic_type);
    bool is_semantic_type_Set() const;
    bool is_semantic_type_Valid() const;

    QList getAllowedAggregations() const;
    void setAllowedAggregations(const QList &allowed_aggregations);
    bool is_allowed_aggregations_Set() const;
    bool is_allowed_aggregations_Valid() const;

    QList getNotAllowedAggregations() const;
    void setNotAllowedAggregations(const QList &not_allowed_aggregations);
    bool is_not_allowed_aggregations_Set() const;
    bool is_not_allowed_aggregations_Valid() const;

    bool getNeverAggregateInFilter() const;
    void setNeverAggregateInFilter(const bool &never_aggregate_in_filter);
    bool is_never_aggregate_in_filter_Set() const;
    bool is_never_aggregate_in_filter_Valid() const;

    QList getCellValueSynonyms() const;
    void setCellValueSynonyms(const QList &cell_value_synonyms);
    bool is_cell_value_synonyms_Set() const;
    bool is_cell_value_synonyms_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_calculated_field_name;
    bool m_calculated_field_name_isSet;
    bool m_calculated_field_name_isValid;

    QString m_calculated_field_description;
    bool m_calculated_field_description_isSet;
    bool m_calculated_field_description_isValid;

    QString m_expression;
    bool m_expression_isSet;
    bool m_expression_isValid;

    QList m_calculated_field_synonyms;
    bool m_calculated_field_synonyms_isSet;
    bool m_calculated_field_synonyms_isValid;

    bool m_is_included_in_topic;
    bool m_is_included_in_topic_isSet;
    bool m_is_included_in_topic_isValid;

    bool m_disable_indexing;
    bool m_disable_indexing_isSet;
    bool m_disable_indexing_isValid;

    OAIColumnDataRole m_column_data_role;
    bool m_column_data_role_isSet;
    bool m_column_data_role_isValid;

    OAITopicTimeGranularity m_time_granularity;
    bool m_time_granularity_isSet;
    bool m_time_granularity_isValid;

    OAITopicCalculatedField_DefaultFormatting m_default_formatting;
    bool m_default_formatting_isSet;
    bool m_default_formatting_isValid;

    OAIDefaultAggregation m_aggregation;
    bool m_aggregation_isSet;
    bool m_aggregation_isValid;

    OAITopicCalculatedField_ComparativeOrder m_comparative_order;
    bool m_comparative_order_isSet;
    bool m_comparative_order_isValid;

    OAITopicCalculatedField_SemanticType m_semantic_type;
    bool m_semantic_type_isSet;
    bool m_semantic_type_isValid;

    QList m_allowed_aggregations;
    bool m_allowed_aggregations_isSet;
    bool m_allowed_aggregations_isValid;

    QList m_not_allowed_aggregations;
    bool m_not_allowed_aggregations_isSet;
    bool m_not_allowed_aggregations_isValid;

    bool m_never_aggregate_in_filter;
    bool m_never_aggregate_in_filter_isSet;
    bool m_never_aggregate_in_filter_isValid;

    QList m_cell_value_synonyms;
    bool m_cell_value_synonyms_isSet;
    bool m_cell_value_synonyms_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITopicCalculatedField)

#endif // OAITopicCalculatedField_H
