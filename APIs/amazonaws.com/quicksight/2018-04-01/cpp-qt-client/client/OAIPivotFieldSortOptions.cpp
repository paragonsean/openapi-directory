/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotFieldSortOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotFieldSortOptions::OAIPivotFieldSortOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotFieldSortOptions::OAIPivotFieldSortOptions() {
    this->initializeModel();
}

OAIPivotFieldSortOptions::~OAIPivotFieldSortOptions() {}

void OAIPivotFieldSortOptions::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;
}

void OAIPivotFieldSortOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotFieldSortOptions::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;
}

QString OAIPivotFieldSortOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotFieldSortOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    return obj;
}

QString OAIPivotFieldSortOptions::getFieldId() const {
    return m_field_id;
}
void OAIPivotFieldSortOptions::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIPivotFieldSortOptions::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIPivotFieldSortOptions::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIPivotFieldSortOptions_SortBy OAIPivotFieldSortOptions::getSortBy() const {
    return m_sort_by;
}
void OAIPivotFieldSortOptions::setSortBy(const OAIPivotFieldSortOptions_SortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIPivotFieldSortOptions::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIPivotFieldSortOptions::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

bool OAIPivotFieldSortOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotFieldSortOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_sort_by_isValid && true;
}

} // namespace OpenAPI
