/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterUserResponse::OAIRegisterUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterUserResponse::OAIRegisterUserResponse() {
    this->initializeModel();
}

OAIRegisterUserResponse::~OAIRegisterUserResponse() {}

void OAIRegisterUserResponse::initializeModel() {

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_invitation_url_isSet = false;
    m_user_invitation_url_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRegisterUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterUserResponse::fromJsonObject(QJsonObject json) {

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_user_invitation_url_isValid = ::OpenAPI::fromJsonValue(m_user_invitation_url, json[QString("UserInvitationUrl")]);
    m_user_invitation_url_isSet = !json[QString("UserInvitationUrl")].isNull() && m_user_invitation_url_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIRegisterUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_user.isSet()) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_invitation_url_isSet) {
        obj.insert(QString("UserInvitationUrl"), ::OpenAPI::toJsonValue(m_user_invitation_url));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIRegisterUserResponse_User OAIRegisterUserResponse::getUser() const {
    return m_user;
}
void OAIRegisterUserResponse::setUser(const OAIRegisterUserResponse_User &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRegisterUserResponse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRegisterUserResponse::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIRegisterUserResponse::getUserInvitationUrl() const {
    return m_user_invitation_url;
}
void OAIRegisterUserResponse::setUserInvitationUrl(const QString &user_invitation_url) {
    m_user_invitation_url = user_invitation_url;
    m_user_invitation_url_isSet = true;
}

bool OAIRegisterUserResponse::is_user_invitation_url_Set() const{
    return m_user_invitation_url_isSet;
}

bool OAIRegisterUserResponse::is_user_invitation_url_Valid() const{
    return m_user_invitation_url_isValid;
}

QString OAIRegisterUserResponse::getRequestId() const {
    return m_request_id;
}
void OAIRegisterUserResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRegisterUserResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRegisterUserResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIRegisterUserResponse::getStatus() const {
    return m_status;
}
void OAIRegisterUserResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRegisterUserResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRegisterUserResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRegisterUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_invitation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
