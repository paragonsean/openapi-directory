/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramBinOptions_BinWidth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramBinOptions_BinWidth::OAIHistogramBinOptions_BinWidth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramBinOptions_BinWidth::OAIHistogramBinOptions_BinWidth() {
    this->initializeModel();
}

OAIHistogramBinOptions_BinWidth::~OAIHistogramBinOptions_BinWidth() {}

void OAIHistogramBinOptions_BinWidth::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_bin_count_limit_isSet = false;
    m_bin_count_limit_isValid = false;
}

void OAIHistogramBinOptions_BinWidth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramBinOptions_BinWidth::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_bin_count_limit_isValid = ::OpenAPI::fromJsonValue(m_bin_count_limit, json[QString("BinCountLimit")]);
    m_bin_count_limit_isSet = !json[QString("BinCountLimit")].isNull() && m_bin_count_limit_isValid;
}

QString OAIHistogramBinOptions_BinWidth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramBinOptions_BinWidth::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_bin_count_limit_isSet) {
        obj.insert(QString("BinCountLimit"), ::OpenAPI::toJsonValue(m_bin_count_limit));
    }
    return obj;
}

double OAIHistogramBinOptions_BinWidth::getValue() const {
    return m_value;
}
void OAIHistogramBinOptions_BinWidth::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIHistogramBinOptions_BinWidth::is_value_Set() const{
    return m_value_isSet;
}

bool OAIHistogramBinOptions_BinWidth::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAIHistogramBinOptions_BinWidth::getBinCountLimit() const {
    return m_bin_count_limit;
}
void OAIHistogramBinOptions_BinWidth::setBinCountLimit(const qint32 &bin_count_limit) {
    m_bin_count_limit = bin_count_limit;
    m_bin_count_limit_isSet = true;
}

bool OAIHistogramBinOptions_BinWidth::is_bin_count_limit_Set() const{
    return m_bin_count_limit_isSet;
}

bool OAIHistogramBinOptions_BinWidth::is_bin_count_limit_Valid() const{
    return m_bin_count_limit_isValid;
}

bool OAIHistogramBinOptions_BinWidth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_count_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramBinOptions_BinWidth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
