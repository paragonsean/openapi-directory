/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContributionAnalysisDefault.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContributionAnalysisDefault::OAIContributionAnalysisDefault(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContributionAnalysisDefault::OAIContributionAnalysisDefault() {
    this->initializeModel();
}

OAIContributionAnalysisDefault::~OAIContributionAnalysisDefault() {}

void OAIContributionAnalysisDefault::initializeModel() {

    m_measure_field_id_isSet = false;
    m_measure_field_id_isValid = false;

    m_contributor_dimensions_isSet = false;
    m_contributor_dimensions_isValid = false;
}

void OAIContributionAnalysisDefault::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContributionAnalysisDefault::fromJsonObject(QJsonObject json) {

    m_measure_field_id_isValid = ::OpenAPI::fromJsonValue(m_measure_field_id, json[QString("MeasureFieldId")]);
    m_measure_field_id_isSet = !json[QString("MeasureFieldId")].isNull() && m_measure_field_id_isValid;

    m_contributor_dimensions_isValid = ::OpenAPI::fromJsonValue(m_contributor_dimensions, json[QString("ContributorDimensions")]);
    m_contributor_dimensions_isSet = !json[QString("ContributorDimensions")].isNull() && m_contributor_dimensions_isValid;
}

QString OAIContributionAnalysisDefault::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContributionAnalysisDefault::asJsonObject() const {
    QJsonObject obj;
    if (m_measure_field_id_isSet) {
        obj.insert(QString("MeasureFieldId"), ::OpenAPI::toJsonValue(m_measure_field_id));
    }
    if (m_contributor_dimensions.isSet()) {
        obj.insert(QString("ContributorDimensions"), ::OpenAPI::toJsonValue(m_contributor_dimensions));
    }
    return obj;
}

QString OAIContributionAnalysisDefault::getMeasureFieldId() const {
    return m_measure_field_id;
}
void OAIContributionAnalysisDefault::setMeasureFieldId(const QString &measure_field_id) {
    m_measure_field_id = measure_field_id;
    m_measure_field_id_isSet = true;
}

bool OAIContributionAnalysisDefault::is_measure_field_id_Set() const{
    return m_measure_field_id_isSet;
}

bool OAIContributionAnalysisDefault::is_measure_field_id_Valid() const{
    return m_measure_field_id_isValid;
}

QList OAIContributionAnalysisDefault::getContributorDimensions() const {
    return m_contributor_dimensions;
}
void OAIContributionAnalysisDefault::setContributorDimensions(const QList &contributor_dimensions) {
    m_contributor_dimensions = contributor_dimensions;
    m_contributor_dimensions_isSet = true;
}

bool OAIContributionAnalysisDefault::is_contributor_dimensions_Set() const{
    return m_contributor_dimensions_isSet;
}

bool OAIContributionAnalysisDefault::is_contributor_dimensions_Valid() const{
    return m_contributor_dimensions_isValid;
}

bool OAIContributionAnalysisDefault::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_measure_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContributionAnalysisDefault::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_measure_field_id_isValid && m_contributor_dimensions_isValid && true;
}

} // namespace OpenAPI
