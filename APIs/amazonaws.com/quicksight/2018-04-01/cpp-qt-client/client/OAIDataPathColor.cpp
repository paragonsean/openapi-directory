/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataPathColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataPathColor::OAIDataPathColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataPathColor::OAIDataPathColor() {
    this->initializeModel();
}

OAIDataPathColor::~OAIDataPathColor() {}

void OAIDataPathColor::initializeModel() {

    m_element_isSet = false;
    m_element_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;
}

void OAIDataPathColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataPathColor::fromJsonObject(QJsonObject json) {

    m_element_isValid = ::OpenAPI::fromJsonValue(m_element, json[QString("Element")]);
    m_element_isSet = !json[QString("Element")].isNull() && m_element_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;
}

QString OAIDataPathColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataPathColor::asJsonObject() const {
    QJsonObject obj;
    if (m_element.isSet()) {
        obj.insert(QString("Element"), ::OpenAPI::toJsonValue(m_element));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    return obj;
}

OAIDataPathColor_Element OAIDataPathColor::getElement() const {
    return m_element;
}
void OAIDataPathColor::setElement(const OAIDataPathColor_Element &element) {
    m_element = element;
    m_element_isSet = true;
}

bool OAIDataPathColor::is_element_Set() const{
    return m_element_isSet;
}

bool OAIDataPathColor::is_element_Valid() const{
    return m_element_isValid;
}

QString OAIDataPathColor::getColor() const {
    return m_color;
}
void OAIDataPathColor::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIDataPathColor::is_color_Set() const{
    return m_color_isSet;
}

bool OAIDataPathColor::is_color_Valid() const{
    return m_color_isValid;
}

OAITimeGranularity OAIDataPathColor::getTimeGranularity() const {
    return m_time_granularity;
}
void OAIDataPathColor::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAIDataPathColor::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAIDataPathColor::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

bool OAIDataPathColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataPathColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_element_isValid && m_color_isValid && true;
}

} // namespace OpenAPI
