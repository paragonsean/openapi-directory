/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArcOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArcOptions::OAIArcOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArcOptions::OAIArcOptions() {
    this->initializeModel();
}

OAIArcOptions::~OAIArcOptions() {}

void OAIArcOptions::initializeModel() {

    m_arc_thickness_isSet = false;
    m_arc_thickness_isValid = false;
}

void OAIArcOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArcOptions::fromJsonObject(QJsonObject json) {

    m_arc_thickness_isValid = ::OpenAPI::fromJsonValue(m_arc_thickness, json[QString("ArcThickness")]);
    m_arc_thickness_isSet = !json[QString("ArcThickness")].isNull() && m_arc_thickness_isValid;
}

QString OAIArcOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArcOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_arc_thickness.isSet()) {
        obj.insert(QString("ArcThickness"), ::OpenAPI::toJsonValue(m_arc_thickness));
    }
    return obj;
}

OAIArcThickness OAIArcOptions::getArcThickness() const {
    return m_arc_thickness;
}
void OAIArcOptions::setArcThickness(const OAIArcThickness &arc_thickness) {
    m_arc_thickness = arc_thickness;
    m_arc_thickness_isSet = true;
}

bool OAIArcOptions::is_arc_thickness_Set() const{
    return m_arc_thickness_isSet;
}

bool OAIArcOptions::is_arc_thickness_Valid() const{
    return m_arc_thickness_isValid;
}

bool OAIArcOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arc_thickness.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArcOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
