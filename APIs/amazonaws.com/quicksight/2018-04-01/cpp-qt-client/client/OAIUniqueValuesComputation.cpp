/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUniqueValuesComputation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUniqueValuesComputation::OAIUniqueValuesComputation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUniqueValuesComputation::OAIUniqueValuesComputation() {
    this->initializeModel();
}

OAIUniqueValuesComputation::~OAIUniqueValuesComputation() {}

void OAIUniqueValuesComputation::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;
}

void OAIUniqueValuesComputation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUniqueValuesComputation::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;
}

QString OAIUniqueValuesComputation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUniqueValuesComputation::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    return obj;
}

QString OAIUniqueValuesComputation::getComputationId() const {
    return m_computation_id;
}
void OAIUniqueValuesComputation::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIUniqueValuesComputation::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIUniqueValuesComputation::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIUniqueValuesComputation::getName() const {
    return m_name;
}
void OAIUniqueValuesComputation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUniqueValuesComputation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUniqueValuesComputation::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomRankedComputation_Category OAIUniqueValuesComputation::getCategory() const {
    return m_category;
}
void OAIUniqueValuesComputation::setCategory(const OAITopBottomRankedComputation_Category &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIUniqueValuesComputation::is_category_Set() const{
    return m_category_isSet;
}

bool OAIUniqueValuesComputation::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIUniqueValuesComputation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUniqueValuesComputation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_category_isValid && true;
}

} // namespace OpenAPI
