/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridLayoutCanvasSizeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridLayoutCanvasSizeOptions::OAIGridLayoutCanvasSizeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridLayoutCanvasSizeOptions::OAIGridLayoutCanvasSizeOptions() {
    this->initializeModel();
}

OAIGridLayoutCanvasSizeOptions::~OAIGridLayoutCanvasSizeOptions() {}

void OAIGridLayoutCanvasSizeOptions::initializeModel() {

    m_screen_canvas_size_options_isSet = false;
    m_screen_canvas_size_options_isValid = false;
}

void OAIGridLayoutCanvasSizeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridLayoutCanvasSizeOptions::fromJsonObject(QJsonObject json) {

    m_screen_canvas_size_options_isValid = ::OpenAPI::fromJsonValue(m_screen_canvas_size_options, json[QString("ScreenCanvasSizeOptions")]);
    m_screen_canvas_size_options_isSet = !json[QString("ScreenCanvasSizeOptions")].isNull() && m_screen_canvas_size_options_isValid;
}

QString OAIGridLayoutCanvasSizeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridLayoutCanvasSizeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_screen_canvas_size_options.isSet()) {
        obj.insert(QString("ScreenCanvasSizeOptions"), ::OpenAPI::toJsonValue(m_screen_canvas_size_options));
    }
    return obj;
}

OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions OAIGridLayoutCanvasSizeOptions::getScreenCanvasSizeOptions() const {
    return m_screen_canvas_size_options;
}
void OAIGridLayoutCanvasSizeOptions::setScreenCanvasSizeOptions(const OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions &screen_canvas_size_options) {
    m_screen_canvas_size_options = screen_canvas_size_options;
    m_screen_canvas_size_options_isSet = true;
}

bool OAIGridLayoutCanvasSizeOptions::is_screen_canvas_size_options_Set() const{
    return m_screen_canvas_size_options_isSet;
}

bool OAIGridLayoutCanvasSizeOptions::is_screen_canvas_size_options_Valid() const{
    return m_screen_canvas_size_options_isValid;
}

bool OAIGridLayoutCanvasSizeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_screen_canvas_size_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridLayoutCanvasSizeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
