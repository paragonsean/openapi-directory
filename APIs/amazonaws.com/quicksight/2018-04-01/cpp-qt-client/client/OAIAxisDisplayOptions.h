/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAxisDisplayOptions.h
 *
 * The display options for the axis label.
 */

#ifndef OAIAxisDisplayOptions_H
#define OAIAxisDisplayOptions_H

#include <QJsonObject>

#include "OAIAxisDisplayOptions_DataOptions.h"
#include "OAIAxisDisplayOptions_ScrollbarOptions.h"
#include "OAIAxisDisplayOptions_TickLabelOptions.h"
#include "OAIVisibility.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAxisDisplayOptions_TickLabelOptions;
class OAIAxisDisplayOptions_DataOptions;
class OAIAxisDisplayOptions_ScrollbarOptions;

class OAIAxisDisplayOptions : public OAIObject {
public:
    OAIAxisDisplayOptions();
    OAIAxisDisplayOptions(QString json);
    ~OAIAxisDisplayOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAxisDisplayOptions_TickLabelOptions getTickLabelOptions() const;
    void setTickLabelOptions(const OAIAxisDisplayOptions_TickLabelOptions &tick_label_options);
    bool is_tick_label_options_Set() const;
    bool is_tick_label_options_Valid() const;

    OAIVisibility getAxisLineVisibility() const;
    void setAxisLineVisibility(const OAIVisibility &axis_line_visibility);
    bool is_axis_line_visibility_Set() const;
    bool is_axis_line_visibility_Valid() const;

    OAIVisibility getGridLineVisibility() const;
    void setGridLineVisibility(const OAIVisibility &grid_line_visibility);
    bool is_grid_line_visibility_Set() const;
    bool is_grid_line_visibility_Valid() const;

    OAIAxisDisplayOptions_DataOptions getDataOptions() const;
    void setDataOptions(const OAIAxisDisplayOptions_DataOptions &data_options);
    bool is_data_options_Set() const;
    bool is_data_options_Valid() const;

    OAIAxisDisplayOptions_ScrollbarOptions getScrollbarOptions() const;
    void setScrollbarOptions(const OAIAxisDisplayOptions_ScrollbarOptions &scrollbar_options);
    bool is_scrollbar_options_Set() const;
    bool is_scrollbar_options_Valid() const;

    QString getAxisOffset() const;
    void setAxisOffset(const QString &axis_offset);
    bool is_axis_offset_Set() const;
    bool is_axis_offset_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAxisDisplayOptions_TickLabelOptions m_tick_label_options;
    bool m_tick_label_options_isSet;
    bool m_tick_label_options_isValid;

    OAIVisibility m_axis_line_visibility;
    bool m_axis_line_visibility_isSet;
    bool m_axis_line_visibility_isValid;

    OAIVisibility m_grid_line_visibility;
    bool m_grid_line_visibility_isSet;
    bool m_grid_line_visibility_isValid;

    OAIAxisDisplayOptions_DataOptions m_data_options;
    bool m_data_options_isSet;
    bool m_data_options_isValid;

    OAIAxisDisplayOptions_ScrollbarOptions m_scrollbar_options;
    bool m_scrollbar_options_isSet;
    bool m_scrollbar_options_isValid;

    QString m_axis_offset;
    bool m_axis_offset_isSet;
    bool m_axis_offset_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAxisDisplayOptions)

#endif // OAIAxisDisplayOptions_H
