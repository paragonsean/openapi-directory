/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisErrorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisErrorType::OAIAnalysisErrorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisErrorType::OAIAnalysisErrorType() {
    this->initializeModel();
}

OAIAnalysisErrorType::~OAIAnalysisErrorType() {}

void OAIAnalysisErrorType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAnalysisErrorType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAnalysisErrorType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOURCE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::SOURCE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATA_SET_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::DATA_SET_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::INTERNAL_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARAMETER_VALUE_INCOMPATIBLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::PARAMETER_VALUE_INCOMPATIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARAMETER_TYPE_INVALID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::PARAMETER_TYPE_INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARAMETER_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::PARAMETER_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COLUMN_TYPE_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::COLUMN_TYPE_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COLUMN_GEOGRAPHIC_ROLE_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::COLUMN_GEOGRAPHIC_ROLE_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COLUMN_REPLACEMENT_MISSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnalysisErrorType::COLUMN_REPLACEMENT_MISSING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAnalysisErrorType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAnalysisErrorType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAnalysisErrorType::ACCESS_DENIED:
            val = "ACCESS_DENIED";
            break;
        case eOAIAnalysisErrorType::SOURCE_NOT_FOUND:
            val = "SOURCE_NOT_FOUND";
            break;
        case eOAIAnalysisErrorType::DATA_SET_NOT_FOUND:
            val = "DATA_SET_NOT_FOUND";
            break;
        case eOAIAnalysisErrorType::INTERNAL_FAILURE:
            val = "INTERNAL_FAILURE";
            break;
        case eOAIAnalysisErrorType::PARAMETER_VALUE_INCOMPATIBLE:
            val = "PARAMETER_VALUE_INCOMPATIBLE";
            break;
        case eOAIAnalysisErrorType::PARAMETER_TYPE_INVALID:
            val = "PARAMETER_TYPE_INVALID";
            break;
        case eOAIAnalysisErrorType::PARAMETER_NOT_FOUND:
            val = "PARAMETER_NOT_FOUND";
            break;
        case eOAIAnalysisErrorType::COLUMN_TYPE_MISMATCH:
            val = "COLUMN_TYPE_MISMATCH";
            break;
        case eOAIAnalysisErrorType::COLUMN_GEOGRAPHIC_ROLE_MISMATCH:
            val = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH";
            break;
        case eOAIAnalysisErrorType::COLUMN_REPLACEMENT_MISSING:
            val = "COLUMN_REPLACEMENT_MISSING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAnalysisErrorType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAnalysisErrorType::eOAIAnalysisErrorType OAIAnalysisErrorType::getValue() const {
    return m_value;
}

void OAIAnalysisErrorType::setValue(const OAIAnalysisErrorType::eOAIAnalysisErrorType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAnalysisErrorType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAnalysisErrorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
