/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBarChartVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBarChartVisual_ChartConfiguration::OAIBarChartVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBarChartVisual_ChartConfiguration::OAIBarChartVisual_ChartConfiguration() {
    this->initializeModel();
}

OAIBarChartVisual_ChartConfiguration::~OAIBarChartVisual_ChartConfiguration() {}

void OAIBarChartVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_bars_arrangement_isSet = false;
    m_bars_arrangement_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;

    m_small_multiples_options_isSet = false;
    m_small_multiples_options_isValid = false;

    m_category_axis_isSet = false;
    m_category_axis_isValid = false;

    m_category_label_options_isSet = false;
    m_category_label_options_isValid = false;

    m_value_axis_isSet = false;
    m_value_axis_isValid = false;

    m_value_label_options_isSet = false;
    m_value_label_options_isValid = false;

    m_color_label_options_isSet = false;
    m_color_label_options_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_reference_lines_isSet = false;
    m_reference_lines_isValid = false;

    m_contribution_analysis_defaults_isSet = false;
    m_contribution_analysis_defaults_isValid = false;
}

void OAIBarChartVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBarChartVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("Orientation")]);
    m_orientation_isSet = !json[QString("Orientation")].isNull() && m_orientation_isValid;

    m_bars_arrangement_isValid = ::OpenAPI::fromJsonValue(m_bars_arrangement, json[QString("BarsArrangement")]);
    m_bars_arrangement_isSet = !json[QString("BarsArrangement")].isNull() && m_bars_arrangement_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;

    m_small_multiples_options_isValid = ::OpenAPI::fromJsonValue(m_small_multiples_options, json[QString("SmallMultiplesOptions")]);
    m_small_multiples_options_isSet = !json[QString("SmallMultiplesOptions")].isNull() && m_small_multiples_options_isValid;

    m_category_axis_isValid = ::OpenAPI::fromJsonValue(m_category_axis, json[QString("CategoryAxis")]);
    m_category_axis_isSet = !json[QString("CategoryAxis")].isNull() && m_category_axis_isValid;

    m_category_label_options_isValid = ::OpenAPI::fromJsonValue(m_category_label_options, json[QString("CategoryLabelOptions")]);
    m_category_label_options_isSet = !json[QString("CategoryLabelOptions")].isNull() && m_category_label_options_isValid;

    m_value_axis_isValid = ::OpenAPI::fromJsonValue(m_value_axis, json[QString("ValueAxis")]);
    m_value_axis_isSet = !json[QString("ValueAxis")].isNull() && m_value_axis_isValid;

    m_value_label_options_isValid = ::OpenAPI::fromJsonValue(m_value_label_options, json[QString("ValueLabelOptions")]);
    m_value_label_options_isSet = !json[QString("ValueLabelOptions")].isNull() && m_value_label_options_isValid;

    m_color_label_options_isValid = ::OpenAPI::fromJsonValue(m_color_label_options, json[QString("ColorLabelOptions")]);
    m_color_label_options_isSet = !json[QString("ColorLabelOptions")].isNull() && m_color_label_options_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_reference_lines_isValid = ::OpenAPI::fromJsonValue(m_reference_lines, json[QString("ReferenceLines")]);
    m_reference_lines_isSet = !json[QString("ReferenceLines")].isNull() && m_reference_lines_isValid;

    m_contribution_analysis_defaults_isValid = ::OpenAPI::fromJsonValue(m_contribution_analysis_defaults, json[QString("ContributionAnalysisDefaults")]);
    m_contribution_analysis_defaults_isSet = !json[QString("ContributionAnalysisDefaults")].isNull() && m_contribution_analysis_defaults_isValid;
}

QString OAIBarChartVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBarChartVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_orientation.isSet()) {
        obj.insert(QString("Orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_bars_arrangement.isSet()) {
        obj.insert(QString("BarsArrangement"), ::OpenAPI::toJsonValue(m_bars_arrangement));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    if (m_small_multiples_options.isSet()) {
        obj.insert(QString("SmallMultiplesOptions"), ::OpenAPI::toJsonValue(m_small_multiples_options));
    }
    if (m_category_axis.isSet()) {
        obj.insert(QString("CategoryAxis"), ::OpenAPI::toJsonValue(m_category_axis));
    }
    if (m_category_label_options.isSet()) {
        obj.insert(QString("CategoryLabelOptions"), ::OpenAPI::toJsonValue(m_category_label_options));
    }
    if (m_value_axis.isSet()) {
        obj.insert(QString("ValueAxis"), ::OpenAPI::toJsonValue(m_value_axis));
    }
    if (m_value_label_options.isSet()) {
        obj.insert(QString("ValueLabelOptions"), ::OpenAPI::toJsonValue(m_value_label_options));
    }
    if (m_color_label_options.isSet()) {
        obj.insert(QString("ColorLabelOptions"), ::OpenAPI::toJsonValue(m_color_label_options));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_reference_lines.isSet()) {
        obj.insert(QString("ReferenceLines"), ::OpenAPI::toJsonValue(m_reference_lines));
    }
    if (m_contribution_analysis_defaults.isSet()) {
        obj.insert(QString("ContributionAnalysisDefaults"), ::OpenAPI::toJsonValue(m_contribution_analysis_defaults));
    }
    return obj;
}

OAIBarChartConfiguration_FieldWells OAIBarChartVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIBarChartVisual_ChartConfiguration::setFieldWells(const OAIBarChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIBarChartConfiguration_SortConfiguration OAIBarChartVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIBarChartVisual_ChartConfiguration::setSortConfiguration(const OAIBarChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIBarChartOrientation OAIBarChartVisual_ChartConfiguration::getOrientation() const {
    return m_orientation;
}
void OAIBarChartVisual_ChartConfiguration::setOrientation(const OAIBarChartOrientation &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_orientation_Valid() const{
    return m_orientation_isValid;
}

OAIBarsArrangement OAIBarChartVisual_ChartConfiguration::getBarsArrangement() const {
    return m_bars_arrangement;
}
void OAIBarChartVisual_ChartConfiguration::setBarsArrangement(const OAIBarsArrangement &bars_arrangement) {
    m_bars_arrangement = bars_arrangement;
    m_bars_arrangement_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_bars_arrangement_Set() const{
    return m_bars_arrangement_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_bars_arrangement_Valid() const{
    return m_bars_arrangement_isValid;
}

OAIBarChartConfiguration_VisualPalette OAIBarChartVisual_ChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIBarChartVisual_ChartConfiguration::setVisualPalette(const OAIBarChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

OAIBarChartConfiguration_SmallMultiplesOptions OAIBarChartVisual_ChartConfiguration::getSmallMultiplesOptions() const {
    return m_small_multiples_options;
}
void OAIBarChartVisual_ChartConfiguration::setSmallMultiplesOptions(const OAIBarChartConfiguration_SmallMultiplesOptions &small_multiples_options) {
    m_small_multiples_options = small_multiples_options;
    m_small_multiples_options_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_small_multiples_options_Set() const{
    return m_small_multiples_options_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_small_multiples_options_Valid() const{
    return m_small_multiples_options_isValid;
}

OAIBarChartConfiguration_CategoryAxis OAIBarChartVisual_ChartConfiguration::getCategoryAxis() const {
    return m_category_axis;
}
void OAIBarChartVisual_ChartConfiguration::setCategoryAxis(const OAIBarChartConfiguration_CategoryAxis &category_axis) {
    m_category_axis = category_axis;
    m_category_axis_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_category_axis_Set() const{
    return m_category_axis_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_category_axis_Valid() const{
    return m_category_axis_isValid;
}

OAIBarChartConfiguration_CategoryLabelOptions OAIBarChartVisual_ChartConfiguration::getCategoryLabelOptions() const {
    return m_category_label_options;
}
void OAIBarChartVisual_ChartConfiguration::setCategoryLabelOptions(const OAIBarChartConfiguration_CategoryLabelOptions &category_label_options) {
    m_category_label_options = category_label_options;
    m_category_label_options_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_category_label_options_Set() const{
    return m_category_label_options_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_category_label_options_Valid() const{
    return m_category_label_options_isValid;
}

OAIBarChartConfiguration_ValueAxis OAIBarChartVisual_ChartConfiguration::getValueAxis() const {
    return m_value_axis;
}
void OAIBarChartVisual_ChartConfiguration::setValueAxis(const OAIBarChartConfiguration_ValueAxis &value_axis) {
    m_value_axis = value_axis;
    m_value_axis_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_value_axis_Set() const{
    return m_value_axis_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_value_axis_Valid() const{
    return m_value_axis_isValid;
}

OAIBarChartConfiguration_ValueLabelOptions OAIBarChartVisual_ChartConfiguration::getValueLabelOptions() const {
    return m_value_label_options;
}
void OAIBarChartVisual_ChartConfiguration::setValueLabelOptions(const OAIBarChartConfiguration_ValueLabelOptions &value_label_options) {
    m_value_label_options = value_label_options;
    m_value_label_options_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_value_label_options_Set() const{
    return m_value_label_options_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_value_label_options_Valid() const{
    return m_value_label_options_isValid;
}

OAIBarChartConfiguration_ColorLabelOptions OAIBarChartVisual_ChartConfiguration::getColorLabelOptions() const {
    return m_color_label_options;
}
void OAIBarChartVisual_ChartConfiguration::setColorLabelOptions(const OAIBarChartConfiguration_ColorLabelOptions &color_label_options) {
    m_color_label_options = color_label_options;
    m_color_label_options_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_color_label_options_Set() const{
    return m_color_label_options_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_color_label_options_Valid() const{
    return m_color_label_options_isValid;
}

OAIBarChartConfiguration_Legend OAIBarChartVisual_ChartConfiguration::getLegend() const {
    return m_legend;
}
void OAIBarChartVisual_ChartConfiguration::setLegend(const OAIBarChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIBarChartConfiguration_DataLabels OAIBarChartVisual_ChartConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAIBarChartVisual_ChartConfiguration::setDataLabels(const OAIBarChartConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

OAIBarChartConfiguration_Tooltip OAIBarChartVisual_ChartConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIBarChartVisual_ChartConfiguration::setTooltip(const OAIBarChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

QList OAIBarChartVisual_ChartConfiguration::getReferenceLines() const {
    return m_reference_lines;
}
void OAIBarChartVisual_ChartConfiguration::setReferenceLines(const QList &reference_lines) {
    m_reference_lines = reference_lines;
    m_reference_lines_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_reference_lines_Set() const{
    return m_reference_lines_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_reference_lines_Valid() const{
    return m_reference_lines_isValid;
}

QList OAIBarChartVisual_ChartConfiguration::getContributionAnalysisDefaults() const {
    return m_contribution_analysis_defaults;
}
void OAIBarChartVisual_ChartConfiguration::setContributionAnalysisDefaults(const QList &contribution_analysis_defaults) {
    m_contribution_analysis_defaults = contribution_analysis_defaults;
    m_contribution_analysis_defaults_isSet = true;
}

bool OAIBarChartVisual_ChartConfiguration::is_contribution_analysis_defaults_Set() const{
    return m_contribution_analysis_defaults_isSet;
}

bool OAIBarChartVisual_ChartConfiguration::is_contribution_analysis_defaults_Valid() const{
    return m_contribution_analysis_defaults_isValid;
}

bool OAIBarChartVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bars_arrangement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_lines.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_analysis_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBarChartVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
