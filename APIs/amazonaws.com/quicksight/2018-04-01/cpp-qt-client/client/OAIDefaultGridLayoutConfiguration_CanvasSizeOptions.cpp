/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultGridLayoutConfiguration_CanvasSizeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::OAIDefaultGridLayoutConfiguration_CanvasSizeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::OAIDefaultGridLayoutConfiguration_CanvasSizeOptions() {
    this->initializeModel();
}

OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::~OAIDefaultGridLayoutConfiguration_CanvasSizeOptions() {}

void OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::initializeModel() {

    m_screen_canvas_size_options_isSet = false;
    m_screen_canvas_size_options_isValid = false;
}

void OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::fromJsonObject(QJsonObject json) {

    m_screen_canvas_size_options_isValid = ::OpenAPI::fromJsonValue(m_screen_canvas_size_options, json[QString("ScreenCanvasSizeOptions")]);
    m_screen_canvas_size_options_isSet = !json[QString("ScreenCanvasSizeOptions")].isNull() && m_screen_canvas_size_options_isValid;
}

QString OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_screen_canvas_size_options.isSet()) {
        obj.insert(QString("ScreenCanvasSizeOptions"), ::OpenAPI::toJsonValue(m_screen_canvas_size_options));
    }
    return obj;
}

OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::getScreenCanvasSizeOptions() const {
    return m_screen_canvas_size_options;
}
void OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::setScreenCanvasSizeOptions(const OAIGridLayoutCanvasSizeOptions_ScreenCanvasSizeOptions &screen_canvas_size_options) {
    m_screen_canvas_size_options = screen_canvas_size_options;
    m_screen_canvas_size_options_isSet = true;
}

bool OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::is_screen_canvas_size_options_Set() const{
    return m_screen_canvas_size_options_isSet;
}

bool OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::is_screen_canvas_size_options_Valid() const{
    return m_screen_canvas_size_options_isValid;
}

bool OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_screen_canvas_size_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultGridLayoutConfiguration_CanvasSizeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
