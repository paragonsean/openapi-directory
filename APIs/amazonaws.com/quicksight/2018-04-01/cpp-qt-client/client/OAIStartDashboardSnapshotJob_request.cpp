/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartDashboardSnapshotJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartDashboardSnapshotJob_request::OAIStartDashboardSnapshotJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartDashboardSnapshotJob_request::OAIStartDashboardSnapshotJob_request() {
    this->initializeModel();
}

OAIStartDashboardSnapshotJob_request::~OAIStartDashboardSnapshotJob_request() {}

void OAIStartDashboardSnapshotJob_request::initializeModel() {

    m_snapshot_job_id_isSet = false;
    m_snapshot_job_id_isValid = false;

    m_user_configuration_isSet = false;
    m_user_configuration_isValid = false;

    m_snapshot_configuration_isSet = false;
    m_snapshot_configuration_isValid = false;
}

void OAIStartDashboardSnapshotJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartDashboardSnapshotJob_request::fromJsonObject(QJsonObject json) {

    m_snapshot_job_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_job_id, json[QString("SnapshotJobId")]);
    m_snapshot_job_id_isSet = !json[QString("SnapshotJobId")].isNull() && m_snapshot_job_id_isValid;

    m_user_configuration_isValid = ::OpenAPI::fromJsonValue(m_user_configuration, json[QString("UserConfiguration")]);
    m_user_configuration_isSet = !json[QString("UserConfiguration")].isNull() && m_user_configuration_isValid;

    m_snapshot_configuration_isValid = ::OpenAPI::fromJsonValue(m_snapshot_configuration, json[QString("SnapshotConfiguration")]);
    m_snapshot_configuration_isSet = !json[QString("SnapshotConfiguration")].isNull() && m_snapshot_configuration_isValid;
}

QString OAIStartDashboardSnapshotJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartDashboardSnapshotJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_snapshot_job_id_isSet) {
        obj.insert(QString("SnapshotJobId"), ::OpenAPI::toJsonValue(m_snapshot_job_id));
    }
    if (m_user_configuration.isSet()) {
        obj.insert(QString("UserConfiguration"), ::OpenAPI::toJsonValue(m_user_configuration));
    }
    if (m_snapshot_configuration.isSet()) {
        obj.insert(QString("SnapshotConfiguration"), ::OpenAPI::toJsonValue(m_snapshot_configuration));
    }
    return obj;
}

QString OAIStartDashboardSnapshotJob_request::getSnapshotJobId() const {
    return m_snapshot_job_id;
}
void OAIStartDashboardSnapshotJob_request::setSnapshotJobId(const QString &snapshot_job_id) {
    m_snapshot_job_id = snapshot_job_id;
    m_snapshot_job_id_isSet = true;
}

bool OAIStartDashboardSnapshotJob_request::is_snapshot_job_id_Set() const{
    return m_snapshot_job_id_isSet;
}

bool OAIStartDashboardSnapshotJob_request::is_snapshot_job_id_Valid() const{
    return m_snapshot_job_id_isValid;
}

OAIStartDashboardSnapshotJob_request_UserConfiguration OAIStartDashboardSnapshotJob_request::getUserConfiguration() const {
    return m_user_configuration;
}
void OAIStartDashboardSnapshotJob_request::setUserConfiguration(const OAIStartDashboardSnapshotJob_request_UserConfiguration &user_configuration) {
    m_user_configuration = user_configuration;
    m_user_configuration_isSet = true;
}

bool OAIStartDashboardSnapshotJob_request::is_user_configuration_Set() const{
    return m_user_configuration_isSet;
}

bool OAIStartDashboardSnapshotJob_request::is_user_configuration_Valid() const{
    return m_user_configuration_isValid;
}

OAIStartDashboardSnapshotJob_request_SnapshotConfiguration OAIStartDashboardSnapshotJob_request::getSnapshotConfiguration() const {
    return m_snapshot_configuration;
}
void OAIStartDashboardSnapshotJob_request::setSnapshotConfiguration(const OAIStartDashboardSnapshotJob_request_SnapshotConfiguration &snapshot_configuration) {
    m_snapshot_configuration = snapshot_configuration;
    m_snapshot_configuration_isSet = true;
}

bool OAIStartDashboardSnapshotJob_request::is_snapshot_configuration_Set() const{
    return m_snapshot_configuration_isSet;
}

bool OAIStartDashboardSnapshotJob_request::is_snapshot_configuration_Valid() const{
    return m_snapshot_configuration_isValid;
}

bool OAIStartDashboardSnapshotJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snapshot_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartDashboardSnapshotJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_snapshot_job_id_isValid && m_user_configuration_isValid && m_snapshot_configuration_isValid && true;
}

} // namespace OpenAPI
