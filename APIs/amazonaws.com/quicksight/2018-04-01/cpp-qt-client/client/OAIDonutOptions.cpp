/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDonutOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDonutOptions::OAIDonutOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDonutOptions::OAIDonutOptions() {
    this->initializeModel();
}

OAIDonutOptions::~OAIDonutOptions() {}

void OAIDonutOptions::initializeModel() {

    m_arc_options_isSet = false;
    m_arc_options_isValid = false;

    m_donut_center_options_isSet = false;
    m_donut_center_options_isValid = false;
}

void OAIDonutOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDonutOptions::fromJsonObject(QJsonObject json) {

    m_arc_options_isValid = ::OpenAPI::fromJsonValue(m_arc_options, json[QString("ArcOptions")]);
    m_arc_options_isSet = !json[QString("ArcOptions")].isNull() && m_arc_options_isValid;

    m_donut_center_options_isValid = ::OpenAPI::fromJsonValue(m_donut_center_options, json[QString("DonutCenterOptions")]);
    m_donut_center_options_isSet = !json[QString("DonutCenterOptions")].isNull() && m_donut_center_options_isValid;
}

QString OAIDonutOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDonutOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_arc_options.isSet()) {
        obj.insert(QString("ArcOptions"), ::OpenAPI::toJsonValue(m_arc_options));
    }
    if (m_donut_center_options.isSet()) {
        obj.insert(QString("DonutCenterOptions"), ::OpenAPI::toJsonValue(m_donut_center_options));
    }
    return obj;
}

OAIDonutOptions_ArcOptions OAIDonutOptions::getArcOptions() const {
    return m_arc_options;
}
void OAIDonutOptions::setArcOptions(const OAIDonutOptions_ArcOptions &arc_options) {
    m_arc_options = arc_options;
    m_arc_options_isSet = true;
}

bool OAIDonutOptions::is_arc_options_Set() const{
    return m_arc_options_isSet;
}

bool OAIDonutOptions::is_arc_options_Valid() const{
    return m_arc_options_isValid;
}

OAIDonutOptions_DonutCenterOptions OAIDonutOptions::getDonutCenterOptions() const {
    return m_donut_center_options;
}
void OAIDonutOptions::setDonutCenterOptions(const OAIDonutOptions_DonutCenterOptions &donut_center_options) {
    m_donut_center_options = donut_center_options;
    m_donut_center_options_isSet = true;
}

bool OAIDonutOptions::is_donut_center_options_Set() const{
    return m_donut_center_options_isSet;
}

bool OAIDonutOptions::is_donut_center_options_Valid() const{
    return m_donut_center_options_isValid;
}

bool OAIDonutOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arc_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_donut_center_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDonutOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
