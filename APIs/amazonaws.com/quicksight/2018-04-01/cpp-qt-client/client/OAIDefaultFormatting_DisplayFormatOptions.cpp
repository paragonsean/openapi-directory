/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultFormatting_DisplayFormatOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultFormatting_DisplayFormatOptions::OAIDefaultFormatting_DisplayFormatOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultFormatting_DisplayFormatOptions::OAIDefaultFormatting_DisplayFormatOptions() {
    this->initializeModel();
}

OAIDefaultFormatting_DisplayFormatOptions::~OAIDefaultFormatting_DisplayFormatOptions() {}

void OAIDefaultFormatting_DisplayFormatOptions::initializeModel() {

    m_use_blank_cell_format_isSet = false;
    m_use_blank_cell_format_isValid = false;

    m_blank_cell_format_isSet = false;
    m_blank_cell_format_isValid = false;

    m_date_format_isSet = false;
    m_date_format_isValid = false;

    m_decimal_separator_isSet = false;
    m_decimal_separator_isValid = false;

    m_grouping_separator_isSet = false;
    m_grouping_separator_isValid = false;

    m_use_grouping_isSet = false;
    m_use_grouping_isValid = false;

    m_fraction_digits_isSet = false;
    m_fraction_digits_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;

    m_unit_scaler_isSet = false;
    m_unit_scaler_isValid = false;

    m_negative_format_isSet = false;
    m_negative_format_isValid = false;

    m_currency_symbol_isSet = false;
    m_currency_symbol_isValid = false;
}

void OAIDefaultFormatting_DisplayFormatOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultFormatting_DisplayFormatOptions::fromJsonObject(QJsonObject json) {

    m_use_blank_cell_format_isValid = ::OpenAPI::fromJsonValue(m_use_blank_cell_format, json[QString("UseBlankCellFormat")]);
    m_use_blank_cell_format_isSet = !json[QString("UseBlankCellFormat")].isNull() && m_use_blank_cell_format_isValid;

    m_blank_cell_format_isValid = ::OpenAPI::fromJsonValue(m_blank_cell_format, json[QString("BlankCellFormat")]);
    m_blank_cell_format_isSet = !json[QString("BlankCellFormat")].isNull() && m_blank_cell_format_isValid;

    m_date_format_isValid = ::OpenAPI::fromJsonValue(m_date_format, json[QString("DateFormat")]);
    m_date_format_isSet = !json[QString("DateFormat")].isNull() && m_date_format_isValid;

    m_decimal_separator_isValid = ::OpenAPI::fromJsonValue(m_decimal_separator, json[QString("DecimalSeparator")]);
    m_decimal_separator_isSet = !json[QString("DecimalSeparator")].isNull() && m_decimal_separator_isValid;

    m_grouping_separator_isValid = ::OpenAPI::fromJsonValue(m_grouping_separator, json[QString("GroupingSeparator")]);
    m_grouping_separator_isSet = !json[QString("GroupingSeparator")].isNull() && m_grouping_separator_isValid;

    m_use_grouping_isValid = ::OpenAPI::fromJsonValue(m_use_grouping, json[QString("UseGrouping")]);
    m_use_grouping_isSet = !json[QString("UseGrouping")].isNull() && m_use_grouping_isValid;

    m_fraction_digits_isValid = ::OpenAPI::fromJsonValue(m_fraction_digits, json[QString("FractionDigits")]);
    m_fraction_digits_isSet = !json[QString("FractionDigits")].isNull() && m_fraction_digits_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(m_suffix, json[QString("Suffix")]);
    m_suffix_isSet = !json[QString("Suffix")].isNull() && m_suffix_isValid;

    m_unit_scaler_isValid = ::OpenAPI::fromJsonValue(m_unit_scaler, json[QString("UnitScaler")]);
    m_unit_scaler_isSet = !json[QString("UnitScaler")].isNull() && m_unit_scaler_isValid;

    m_negative_format_isValid = ::OpenAPI::fromJsonValue(m_negative_format, json[QString("NegativeFormat")]);
    m_negative_format_isSet = !json[QString("NegativeFormat")].isNull() && m_negative_format_isValid;

    m_currency_symbol_isValid = ::OpenAPI::fromJsonValue(m_currency_symbol, json[QString("CurrencySymbol")]);
    m_currency_symbol_isSet = !json[QString("CurrencySymbol")].isNull() && m_currency_symbol_isValid;
}

QString OAIDefaultFormatting_DisplayFormatOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultFormatting_DisplayFormatOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_use_blank_cell_format_isSet) {
        obj.insert(QString("UseBlankCellFormat"), ::OpenAPI::toJsonValue(m_use_blank_cell_format));
    }
    if (m_blank_cell_format_isSet) {
        obj.insert(QString("BlankCellFormat"), ::OpenAPI::toJsonValue(m_blank_cell_format));
    }
    if (m_date_format_isSet) {
        obj.insert(QString("DateFormat"), ::OpenAPI::toJsonValue(m_date_format));
    }
    if (m_decimal_separator.isSet()) {
        obj.insert(QString("DecimalSeparator"), ::OpenAPI::toJsonValue(m_decimal_separator));
    }
    if (m_grouping_separator_isSet) {
        obj.insert(QString("GroupingSeparator"), ::OpenAPI::toJsonValue(m_grouping_separator));
    }
    if (m_use_grouping_isSet) {
        obj.insert(QString("UseGrouping"), ::OpenAPI::toJsonValue(m_use_grouping));
    }
    if (m_fraction_digits_isSet) {
        obj.insert(QString("FractionDigits"), ::OpenAPI::toJsonValue(m_fraction_digits));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_suffix_isSet) {
        obj.insert(QString("Suffix"), ::OpenAPI::toJsonValue(m_suffix));
    }
    if (m_unit_scaler.isSet()) {
        obj.insert(QString("UnitScaler"), ::OpenAPI::toJsonValue(m_unit_scaler));
    }
    if (m_negative_format.isSet()) {
        obj.insert(QString("NegativeFormat"), ::OpenAPI::toJsonValue(m_negative_format));
    }
    if (m_currency_symbol_isSet) {
        obj.insert(QString("CurrencySymbol"), ::OpenAPI::toJsonValue(m_currency_symbol));
    }
    return obj;
}

bool OAIDefaultFormatting_DisplayFormatOptions::getUseBlankCellFormat() const {
    return m_use_blank_cell_format;
}
void OAIDefaultFormatting_DisplayFormatOptions::setUseBlankCellFormat(const bool &use_blank_cell_format) {
    m_use_blank_cell_format = use_blank_cell_format;
    m_use_blank_cell_format_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_use_blank_cell_format_Set() const{
    return m_use_blank_cell_format_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_use_blank_cell_format_Valid() const{
    return m_use_blank_cell_format_isValid;
}

QString OAIDefaultFormatting_DisplayFormatOptions::getBlankCellFormat() const {
    return m_blank_cell_format;
}
void OAIDefaultFormatting_DisplayFormatOptions::setBlankCellFormat(const QString &blank_cell_format) {
    m_blank_cell_format = blank_cell_format;
    m_blank_cell_format_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_blank_cell_format_Set() const{
    return m_blank_cell_format_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_blank_cell_format_Valid() const{
    return m_blank_cell_format_isValid;
}

QString OAIDefaultFormatting_DisplayFormatOptions::getDateFormat() const {
    return m_date_format;
}
void OAIDefaultFormatting_DisplayFormatOptions::setDateFormat(const QString &date_format) {
    m_date_format = date_format;
    m_date_format_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_date_format_Set() const{
    return m_date_format_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_date_format_Valid() const{
    return m_date_format_isValid;
}

OAITopicNumericSeparatorSymbol OAIDefaultFormatting_DisplayFormatOptions::getDecimalSeparator() const {
    return m_decimal_separator;
}
void OAIDefaultFormatting_DisplayFormatOptions::setDecimalSeparator(const OAITopicNumericSeparatorSymbol &decimal_separator) {
    m_decimal_separator = decimal_separator;
    m_decimal_separator_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_decimal_separator_Set() const{
    return m_decimal_separator_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_decimal_separator_Valid() const{
    return m_decimal_separator_isValid;
}

QString OAIDefaultFormatting_DisplayFormatOptions::getGroupingSeparator() const {
    return m_grouping_separator;
}
void OAIDefaultFormatting_DisplayFormatOptions::setGroupingSeparator(const QString &grouping_separator) {
    m_grouping_separator = grouping_separator;
    m_grouping_separator_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_grouping_separator_Set() const{
    return m_grouping_separator_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_grouping_separator_Valid() const{
    return m_grouping_separator_isValid;
}

bool OAIDefaultFormatting_DisplayFormatOptions::getUseGrouping() const {
    return m_use_grouping;
}
void OAIDefaultFormatting_DisplayFormatOptions::setUseGrouping(const bool &use_grouping) {
    m_use_grouping = use_grouping;
    m_use_grouping_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_use_grouping_Set() const{
    return m_use_grouping_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_use_grouping_Valid() const{
    return m_use_grouping_isValid;
}

qint32 OAIDefaultFormatting_DisplayFormatOptions::getFractionDigits() const {
    return m_fraction_digits;
}
void OAIDefaultFormatting_DisplayFormatOptions::setFractionDigits(const qint32 &fraction_digits) {
    m_fraction_digits = fraction_digits;
    m_fraction_digits_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_fraction_digits_Set() const{
    return m_fraction_digits_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_fraction_digits_Valid() const{
    return m_fraction_digits_isValid;
}

QString OAIDefaultFormatting_DisplayFormatOptions::getPrefix() const {
    return m_prefix;
}
void OAIDefaultFormatting_DisplayFormatOptions::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAIDefaultFormatting_DisplayFormatOptions::getSuffix() const {
    return m_suffix;
}
void OAIDefaultFormatting_DisplayFormatOptions::setSuffix(const QString &suffix) {
    m_suffix = suffix;
    m_suffix_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_suffix_Valid() const{
    return m_suffix_isValid;
}

OAINumberScale OAIDefaultFormatting_DisplayFormatOptions::getUnitScaler() const {
    return m_unit_scaler;
}
void OAIDefaultFormatting_DisplayFormatOptions::setUnitScaler(const OAINumberScale &unit_scaler) {
    m_unit_scaler = unit_scaler;
    m_unit_scaler_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_unit_scaler_Set() const{
    return m_unit_scaler_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_unit_scaler_Valid() const{
    return m_unit_scaler_isValid;
}

OAIDisplayFormatOptions_NegativeFormat OAIDefaultFormatting_DisplayFormatOptions::getNegativeFormat() const {
    return m_negative_format;
}
void OAIDefaultFormatting_DisplayFormatOptions::setNegativeFormat(const OAIDisplayFormatOptions_NegativeFormat &negative_format) {
    m_negative_format = negative_format;
    m_negative_format_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_negative_format_Set() const{
    return m_negative_format_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_negative_format_Valid() const{
    return m_negative_format_isValid;
}

QString OAIDefaultFormatting_DisplayFormatOptions::getCurrencySymbol() const {
    return m_currency_symbol;
}
void OAIDefaultFormatting_DisplayFormatOptions::setCurrencySymbol(const QString &currency_symbol) {
    m_currency_symbol = currency_symbol;
    m_currency_symbol_isSet = true;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_currency_symbol_Set() const{
    return m_currency_symbol_isSet;
}

bool OAIDefaultFormatting_DisplayFormatOptions::is_currency_symbol_Valid() const{
    return m_currency_symbol_isValid;
}

bool OAIDefaultFormatting_DisplayFormatOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_use_blank_cell_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blank_cell_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_separator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouping_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_grouping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraction_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_scaler.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultFormatting_DisplayFormatOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
