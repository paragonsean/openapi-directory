/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetParameter_DateTimeDatasetParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetParameter_DateTimeDatasetParameter::OAIDatasetParameter_DateTimeDatasetParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetParameter_DateTimeDatasetParameter::OAIDatasetParameter_DateTimeDatasetParameter() {
    this->initializeModel();
}

OAIDatasetParameter_DateTimeDatasetParameter::~OAIDatasetParameter_DateTimeDatasetParameter() {}

void OAIDatasetParameter_DateTimeDatasetParameter::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;

    m_default_values_isSet = false;
    m_default_values_isValid = false;
}

void OAIDatasetParameter_DateTimeDatasetParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetParameter_DateTimeDatasetParameter::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("ValueType")]);
    m_value_type_isSet = !json[QString("ValueType")].isNull() && m_value_type_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;

    m_default_values_isValid = ::OpenAPI::fromJsonValue(m_default_values, json[QString("DefaultValues")]);
    m_default_values_isSet = !json[QString("DefaultValues")].isNull() && m_default_values_isValid;
}

QString OAIDatasetParameter_DateTimeDatasetParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetParameter_DateTimeDatasetParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_type.isSet()) {
        obj.insert(QString("ValueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    if (m_default_values.isSet()) {
        obj.insert(QString("DefaultValues"), ::OpenAPI::toJsonValue(m_default_values));
    }
    return obj;
}

QString OAIDatasetParameter_DateTimeDatasetParameter::getId() const {
    return m_id;
}
void OAIDatasetParameter_DateTimeDatasetParameter::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDatasetParameter_DateTimeDatasetParameter::getName() const {
    return m_name;
}
void OAIDatasetParameter_DateTimeDatasetParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_name_Valid() const{
    return m_name_isValid;
}

OAIDatasetParameterValueType OAIDatasetParameter_DateTimeDatasetParameter::getValueType() const {
    return m_value_type;
}
void OAIDatasetParameter_DateTimeDatasetParameter::setValueType(const OAIDatasetParameterValueType &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_value_type_Valid() const{
    return m_value_type_isValid;
}

OAITimeGranularity OAIDatasetParameter_DateTimeDatasetParameter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAIDatasetParameter_DateTimeDatasetParameter::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

OAIDateTimeDatasetParameter_DefaultValues OAIDatasetParameter_DateTimeDatasetParameter::getDefaultValues() const {
    return m_default_values;
}
void OAIDatasetParameter_DateTimeDatasetParameter::setDefaultValues(const OAIDateTimeDatasetParameter_DefaultValues &default_values) {
    m_default_values = default_values;
    m_default_values_isSet = true;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_default_values_Set() const{
    return m_default_values_isSet;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::is_default_values_Valid() const{
    return m_default_values_isValid;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetParameter_DateTimeDatasetParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_value_type_isValid && true;
}

} // namespace OpenAPI
