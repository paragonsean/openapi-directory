/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGaugeChartOptions_Comparison.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGaugeChartOptions_Comparison::OAIGaugeChartOptions_Comparison(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGaugeChartOptions_Comparison::OAIGaugeChartOptions_Comparison() {
    this->initializeModel();
}

OAIGaugeChartOptions_Comparison::~OAIGaugeChartOptions_Comparison() {}

void OAIGaugeChartOptions_Comparison::initializeModel() {

    m_comparison_method_isSet = false;
    m_comparison_method_isValid = false;

    m_comparison_format_isSet = false;
    m_comparison_format_isValid = false;
}

void OAIGaugeChartOptions_Comparison::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGaugeChartOptions_Comparison::fromJsonObject(QJsonObject json) {

    m_comparison_method_isValid = ::OpenAPI::fromJsonValue(m_comparison_method, json[QString("ComparisonMethod")]);
    m_comparison_method_isSet = !json[QString("ComparisonMethod")].isNull() && m_comparison_method_isValid;

    m_comparison_format_isValid = ::OpenAPI::fromJsonValue(m_comparison_format, json[QString("ComparisonFormat")]);
    m_comparison_format_isSet = !json[QString("ComparisonFormat")].isNull() && m_comparison_format_isValid;
}

QString OAIGaugeChartOptions_Comparison::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGaugeChartOptions_Comparison::asJsonObject() const {
    QJsonObject obj;
    if (m_comparison_method.isSet()) {
        obj.insert(QString("ComparisonMethod"), ::OpenAPI::toJsonValue(m_comparison_method));
    }
    if (m_comparison_format.isSet()) {
        obj.insert(QString("ComparisonFormat"), ::OpenAPI::toJsonValue(m_comparison_format));
    }
    return obj;
}

OAIComparisonMethod OAIGaugeChartOptions_Comparison::getComparisonMethod() const {
    return m_comparison_method;
}
void OAIGaugeChartOptions_Comparison::setComparisonMethod(const OAIComparisonMethod &comparison_method) {
    m_comparison_method = comparison_method;
    m_comparison_method_isSet = true;
}

bool OAIGaugeChartOptions_Comparison::is_comparison_method_Set() const{
    return m_comparison_method_isSet;
}

bool OAIGaugeChartOptions_Comparison::is_comparison_method_Valid() const{
    return m_comparison_method_isValid;
}

OAIComparisonConfiguration_ComparisonFormat OAIGaugeChartOptions_Comparison::getComparisonFormat() const {
    return m_comparison_format;
}
void OAIGaugeChartOptions_Comparison::setComparisonFormat(const OAIComparisonConfiguration_ComparisonFormat &comparison_format) {
    m_comparison_format = comparison_format;
    m_comparison_format_isSet = true;
}

bool OAIGaugeChartOptions_Comparison::is_comparison_format_Set() const{
    return m_comparison_format_isSet;
}

bool OAIGaugeChartOptions_Comparison::is_comparison_format_Valid() const{
    return m_comparison_format_isValid;
}

bool OAIGaugeChartOptions_Comparison::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparison_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGaugeChartOptions_Comparison::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
