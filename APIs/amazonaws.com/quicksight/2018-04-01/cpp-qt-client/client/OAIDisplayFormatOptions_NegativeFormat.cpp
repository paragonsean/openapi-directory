/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisplayFormatOptions_NegativeFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisplayFormatOptions_NegativeFormat::OAIDisplayFormatOptions_NegativeFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisplayFormatOptions_NegativeFormat::OAIDisplayFormatOptions_NegativeFormat() {
    this->initializeModel();
}

OAIDisplayFormatOptions_NegativeFormat::~OAIDisplayFormatOptions_NegativeFormat() {}

void OAIDisplayFormatOptions_NegativeFormat::initializeModel() {

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;
}

void OAIDisplayFormatOptions_NegativeFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisplayFormatOptions_NegativeFormat::fromJsonObject(QJsonObject json) {

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(m_suffix, json[QString("Suffix")]);
    m_suffix_isSet = !json[QString("Suffix")].isNull() && m_suffix_isValid;
}

QString OAIDisplayFormatOptions_NegativeFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisplayFormatOptions_NegativeFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_suffix_isSet) {
        obj.insert(QString("Suffix"), ::OpenAPI::toJsonValue(m_suffix));
    }
    return obj;
}

QString OAIDisplayFormatOptions_NegativeFormat::getPrefix() const {
    return m_prefix;
}
void OAIDisplayFormatOptions_NegativeFormat::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIDisplayFormatOptions_NegativeFormat::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIDisplayFormatOptions_NegativeFormat::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAIDisplayFormatOptions_NegativeFormat::getSuffix() const {
    return m_suffix;
}
void OAIDisplayFormatOptions_NegativeFormat::setSuffix(const QString &suffix) {
    m_suffix = suffix;
    m_suffix_isSet = true;
}

bool OAIDisplayFormatOptions_NegativeFormat::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAIDisplayFormatOptions_NegativeFormat::is_suffix_Valid() const{
    return m_suffix_isValid;
}

bool OAIDisplayFormatOptions_NegativeFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisplayFormatOptions_NegativeFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
