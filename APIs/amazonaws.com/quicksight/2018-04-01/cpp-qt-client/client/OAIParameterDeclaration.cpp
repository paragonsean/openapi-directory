/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterDeclaration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterDeclaration::OAIParameterDeclaration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterDeclaration::OAIParameterDeclaration() {
    this->initializeModel();
}

OAIParameterDeclaration::~OAIParameterDeclaration() {}

void OAIParameterDeclaration::initializeModel() {

    m_string_parameter_declaration_isSet = false;
    m_string_parameter_declaration_isValid = false;

    m_decimal_parameter_declaration_isSet = false;
    m_decimal_parameter_declaration_isValid = false;

    m_integer_parameter_declaration_isSet = false;
    m_integer_parameter_declaration_isValid = false;

    m_date_time_parameter_declaration_isSet = false;
    m_date_time_parameter_declaration_isValid = false;
}

void OAIParameterDeclaration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterDeclaration::fromJsonObject(QJsonObject json) {

    m_string_parameter_declaration_isValid = ::OpenAPI::fromJsonValue(m_string_parameter_declaration, json[QString("StringParameterDeclaration")]);
    m_string_parameter_declaration_isSet = !json[QString("StringParameterDeclaration")].isNull() && m_string_parameter_declaration_isValid;

    m_decimal_parameter_declaration_isValid = ::OpenAPI::fromJsonValue(m_decimal_parameter_declaration, json[QString("DecimalParameterDeclaration")]);
    m_decimal_parameter_declaration_isSet = !json[QString("DecimalParameterDeclaration")].isNull() && m_decimal_parameter_declaration_isValid;

    m_integer_parameter_declaration_isValid = ::OpenAPI::fromJsonValue(m_integer_parameter_declaration, json[QString("IntegerParameterDeclaration")]);
    m_integer_parameter_declaration_isSet = !json[QString("IntegerParameterDeclaration")].isNull() && m_integer_parameter_declaration_isValid;

    m_date_time_parameter_declaration_isValid = ::OpenAPI::fromJsonValue(m_date_time_parameter_declaration, json[QString("DateTimeParameterDeclaration")]);
    m_date_time_parameter_declaration_isSet = !json[QString("DateTimeParameterDeclaration")].isNull() && m_date_time_parameter_declaration_isValid;
}

QString OAIParameterDeclaration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterDeclaration::asJsonObject() const {
    QJsonObject obj;
    if (m_string_parameter_declaration.isSet()) {
        obj.insert(QString("StringParameterDeclaration"), ::OpenAPI::toJsonValue(m_string_parameter_declaration));
    }
    if (m_decimal_parameter_declaration.isSet()) {
        obj.insert(QString("DecimalParameterDeclaration"), ::OpenAPI::toJsonValue(m_decimal_parameter_declaration));
    }
    if (m_integer_parameter_declaration.isSet()) {
        obj.insert(QString("IntegerParameterDeclaration"), ::OpenAPI::toJsonValue(m_integer_parameter_declaration));
    }
    if (m_date_time_parameter_declaration.isSet()) {
        obj.insert(QString("DateTimeParameterDeclaration"), ::OpenAPI::toJsonValue(m_date_time_parameter_declaration));
    }
    return obj;
}

OAIParameterDeclaration_StringParameterDeclaration OAIParameterDeclaration::getStringParameterDeclaration() const {
    return m_string_parameter_declaration;
}
void OAIParameterDeclaration::setStringParameterDeclaration(const OAIParameterDeclaration_StringParameterDeclaration &string_parameter_declaration) {
    m_string_parameter_declaration = string_parameter_declaration;
    m_string_parameter_declaration_isSet = true;
}

bool OAIParameterDeclaration::is_string_parameter_declaration_Set() const{
    return m_string_parameter_declaration_isSet;
}

bool OAIParameterDeclaration::is_string_parameter_declaration_Valid() const{
    return m_string_parameter_declaration_isValid;
}

OAIParameterDeclaration_DecimalParameterDeclaration OAIParameterDeclaration::getDecimalParameterDeclaration() const {
    return m_decimal_parameter_declaration;
}
void OAIParameterDeclaration::setDecimalParameterDeclaration(const OAIParameterDeclaration_DecimalParameterDeclaration &decimal_parameter_declaration) {
    m_decimal_parameter_declaration = decimal_parameter_declaration;
    m_decimal_parameter_declaration_isSet = true;
}

bool OAIParameterDeclaration::is_decimal_parameter_declaration_Set() const{
    return m_decimal_parameter_declaration_isSet;
}

bool OAIParameterDeclaration::is_decimal_parameter_declaration_Valid() const{
    return m_decimal_parameter_declaration_isValid;
}

OAIParameterDeclaration_IntegerParameterDeclaration OAIParameterDeclaration::getIntegerParameterDeclaration() const {
    return m_integer_parameter_declaration;
}
void OAIParameterDeclaration::setIntegerParameterDeclaration(const OAIParameterDeclaration_IntegerParameterDeclaration &integer_parameter_declaration) {
    m_integer_parameter_declaration = integer_parameter_declaration;
    m_integer_parameter_declaration_isSet = true;
}

bool OAIParameterDeclaration::is_integer_parameter_declaration_Set() const{
    return m_integer_parameter_declaration_isSet;
}

bool OAIParameterDeclaration::is_integer_parameter_declaration_Valid() const{
    return m_integer_parameter_declaration_isValid;
}

OAIParameterDeclaration_DateTimeParameterDeclaration OAIParameterDeclaration::getDateTimeParameterDeclaration() const {
    return m_date_time_parameter_declaration;
}
void OAIParameterDeclaration::setDateTimeParameterDeclaration(const OAIParameterDeclaration_DateTimeParameterDeclaration &date_time_parameter_declaration) {
    m_date_time_parameter_declaration = date_time_parameter_declaration;
    m_date_time_parameter_declaration_isSet = true;
}

bool OAIParameterDeclaration::is_date_time_parameter_declaration_Set() const{
    return m_date_time_parameter_declaration_isSet;
}

bool OAIParameterDeclaration::is_date_time_parameter_declaration_Valid() const{
    return m_date_time_parameter_declaration_isValid;
}

bool OAIParameterDeclaration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_parameter_declaration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_parameter_declaration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_parameter_declaration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_parameter_declaration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterDeclaration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
