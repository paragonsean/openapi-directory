/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISankeyDiagramChartConfiguration_SortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISankeyDiagramChartConfiguration_SortConfiguration::OAISankeyDiagramChartConfiguration_SortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISankeyDiagramChartConfiguration_SortConfiguration::OAISankeyDiagramChartConfiguration_SortConfiguration() {
    this->initializeModel();
}

OAISankeyDiagramChartConfiguration_SortConfiguration::~OAISankeyDiagramChartConfiguration_SortConfiguration() {}

void OAISankeyDiagramChartConfiguration_SortConfiguration::initializeModel() {

    m_weight_sort_isSet = false;
    m_weight_sort_isValid = false;

    m_source_items_limit_isSet = false;
    m_source_items_limit_isValid = false;

    m_destination_items_limit_isSet = false;
    m_destination_items_limit_isValid = false;
}

void OAISankeyDiagramChartConfiguration_SortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISankeyDiagramChartConfiguration_SortConfiguration::fromJsonObject(QJsonObject json) {

    m_weight_sort_isValid = ::OpenAPI::fromJsonValue(m_weight_sort, json[QString("WeightSort")]);
    m_weight_sort_isSet = !json[QString("WeightSort")].isNull() && m_weight_sort_isValid;

    m_source_items_limit_isValid = ::OpenAPI::fromJsonValue(m_source_items_limit, json[QString("SourceItemsLimit")]);
    m_source_items_limit_isSet = !json[QString("SourceItemsLimit")].isNull() && m_source_items_limit_isValid;

    m_destination_items_limit_isValid = ::OpenAPI::fromJsonValue(m_destination_items_limit, json[QString("DestinationItemsLimit")]);
    m_destination_items_limit_isSet = !json[QString("DestinationItemsLimit")].isNull() && m_destination_items_limit_isValid;
}

QString OAISankeyDiagramChartConfiguration_SortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISankeyDiagramChartConfiguration_SortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_weight_sort.isSet()) {
        obj.insert(QString("WeightSort"), ::OpenAPI::toJsonValue(m_weight_sort));
    }
    if (m_source_items_limit.isSet()) {
        obj.insert(QString("SourceItemsLimit"), ::OpenAPI::toJsonValue(m_source_items_limit));
    }
    if (m_destination_items_limit.isSet()) {
        obj.insert(QString("DestinationItemsLimit"), ::OpenAPI::toJsonValue(m_destination_items_limit));
    }
    return obj;
}

QList OAISankeyDiagramChartConfiguration_SortConfiguration::getWeightSort() const {
    return m_weight_sort;
}
void OAISankeyDiagramChartConfiguration_SortConfiguration::setWeightSort(const QList &weight_sort) {
    m_weight_sort = weight_sort;
    m_weight_sort_isSet = true;
}

bool OAISankeyDiagramChartConfiguration_SortConfiguration::is_weight_sort_Set() const{
    return m_weight_sort_isSet;
}

bool OAISankeyDiagramChartConfiguration_SortConfiguration::is_weight_sort_Valid() const{
    return m_weight_sort_isValid;
}

OAISankeyDiagramSortConfiguration_SourceItemsLimit OAISankeyDiagramChartConfiguration_SortConfiguration::getSourceItemsLimit() const {
    return m_source_items_limit;
}
void OAISankeyDiagramChartConfiguration_SortConfiguration::setSourceItemsLimit(const OAISankeyDiagramSortConfiguration_SourceItemsLimit &source_items_limit) {
    m_source_items_limit = source_items_limit;
    m_source_items_limit_isSet = true;
}

bool OAISankeyDiagramChartConfiguration_SortConfiguration::is_source_items_limit_Set() const{
    return m_source_items_limit_isSet;
}

bool OAISankeyDiagramChartConfiguration_SortConfiguration::is_source_items_limit_Valid() const{
    return m_source_items_limit_isValid;
}

OAISankeyDiagramSortConfiguration_DestinationItemsLimit OAISankeyDiagramChartConfiguration_SortConfiguration::getDestinationItemsLimit() const {
    return m_destination_items_limit;
}
void OAISankeyDiagramChartConfiguration_SortConfiguration::setDestinationItemsLimit(const OAISankeyDiagramSortConfiguration_DestinationItemsLimit &destination_items_limit) {
    m_destination_items_limit = destination_items_limit;
    m_destination_items_limit_isSet = true;
}

bool OAISankeyDiagramChartConfiguration_SortConfiguration::is_destination_items_limit_Set() const{
    return m_destination_items_limit_isSet;
}

bool OAISankeyDiagramChartConfiguration_SortConfiguration::is_destination_items_limit_Valid() const{
    return m_destination_items_limit_isValid;
}

bool OAISankeyDiagramChartConfiguration_SortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_weight_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_items_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_items_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISankeyDiagramChartConfiguration_SortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
