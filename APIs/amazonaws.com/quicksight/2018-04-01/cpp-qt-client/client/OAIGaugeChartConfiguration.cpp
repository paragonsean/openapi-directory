/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGaugeChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGaugeChartConfiguration::OAIGaugeChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGaugeChartConfiguration::OAIGaugeChartConfiguration() {
    this->initializeModel();
}

OAIGaugeChartConfiguration::~OAIGaugeChartConfiguration() {}

void OAIGaugeChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_gauge_chart_options_isSet = false;
    m_gauge_chart_options_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;

    m_tooltip_options_isSet = false;
    m_tooltip_options_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAIGaugeChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGaugeChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_gauge_chart_options_isValid = ::OpenAPI::fromJsonValue(m_gauge_chart_options, json[QString("GaugeChartOptions")]);
    m_gauge_chart_options_isSet = !json[QString("GaugeChartOptions")].isNull() && m_gauge_chart_options_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;

    m_tooltip_options_isValid = ::OpenAPI::fromJsonValue(m_tooltip_options, json[QString("TooltipOptions")]);
    m_tooltip_options_isSet = !json[QString("TooltipOptions")].isNull() && m_tooltip_options_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAIGaugeChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGaugeChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_gauge_chart_options.isSet()) {
        obj.insert(QString("GaugeChartOptions"), ::OpenAPI::toJsonValue(m_gauge_chart_options));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    if (m_tooltip_options.isSet()) {
        obj.insert(QString("TooltipOptions"), ::OpenAPI::toJsonValue(m_tooltip_options));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAIGaugeChartConfiguration_FieldWells OAIGaugeChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIGaugeChartConfiguration::setFieldWells(const OAIGaugeChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIGaugeChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIGaugeChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIGaugeChartConfiguration_GaugeChartOptions OAIGaugeChartConfiguration::getGaugeChartOptions() const {
    return m_gauge_chart_options;
}
void OAIGaugeChartConfiguration::setGaugeChartOptions(const OAIGaugeChartConfiguration_GaugeChartOptions &gauge_chart_options) {
    m_gauge_chart_options = gauge_chart_options;
    m_gauge_chart_options_isSet = true;
}

bool OAIGaugeChartConfiguration::is_gauge_chart_options_Set() const{
    return m_gauge_chart_options_isSet;
}

bool OAIGaugeChartConfiguration::is_gauge_chart_options_Valid() const{
    return m_gauge_chart_options_isValid;
}

OAIGaugeChartConfiguration_DataLabels OAIGaugeChartConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAIGaugeChartConfiguration::setDataLabels(const OAIGaugeChartConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAIGaugeChartConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAIGaugeChartConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

OAIGaugeChartConfiguration_TooltipOptions OAIGaugeChartConfiguration::getTooltipOptions() const {
    return m_tooltip_options;
}
void OAIGaugeChartConfiguration::setTooltipOptions(const OAIGaugeChartConfiguration_TooltipOptions &tooltip_options) {
    m_tooltip_options = tooltip_options;
    m_tooltip_options_isSet = true;
}

bool OAIGaugeChartConfiguration::is_tooltip_options_Set() const{
    return m_tooltip_options_isSet;
}

bool OAIGaugeChartConfiguration::is_tooltip_options_Valid() const{
    return m_tooltip_options_isValid;
}

OAIGaugeChartConfiguration_VisualPalette OAIGaugeChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIGaugeChartConfiguration::setVisualPalette(const OAIGaugeChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIGaugeChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIGaugeChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAIGaugeChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gauge_chart_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGaugeChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
