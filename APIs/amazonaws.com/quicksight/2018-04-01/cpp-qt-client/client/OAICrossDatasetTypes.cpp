/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrossDatasetTypes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrossDatasetTypes::OAICrossDatasetTypes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrossDatasetTypes::OAICrossDatasetTypes() {
    this->initializeModel();
}

OAICrossDatasetTypes::~OAICrossDatasetTypes() {}

void OAICrossDatasetTypes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICrossDatasetTypes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICrossDatasetTypes::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ALL_DATASETS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICrossDatasetTypes::ALL_DATASETS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SINGLE_DATASET", Qt::CaseInsensitive) == 0) {
        m_value = eOAICrossDatasetTypes::SINGLE_DATASET;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICrossDatasetTypes::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICrossDatasetTypes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICrossDatasetTypes::ALL_DATASETS:
            val = "ALL_DATASETS";
            break;
        case eOAICrossDatasetTypes::SINGLE_DATASET:
            val = "SINGLE_DATASET";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICrossDatasetTypes::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICrossDatasetTypes::eOAICrossDatasetTypes OAICrossDatasetTypes::getValue() const {
    return m_value;
}

void OAICrossDatasetTypes::setValue(const OAICrossDatasetTypes::eOAICrossDatasetTypes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICrossDatasetTypes::isSet() const {
    
    return m_value_isSet;
}

bool OAICrossDatasetTypes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
