/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTopic_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTopic_request::OAICreateTopic_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTopic_request::OAICreateTopic_request() {
    this->initializeModel();
}

OAICreateTopic_request::~OAICreateTopic_request() {}

void OAICreateTopic_request::initializeModel() {

    m_topic_id_isSet = false;
    m_topic_id_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateTopic_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTopic_request::fromJsonObject(QJsonObject json) {

    m_topic_id_isValid = ::OpenAPI::fromJsonValue(m_topic_id, json[QString("TopicId")]);
    m_topic_id_isSet = !json[QString("TopicId")].isNull() && m_topic_id_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("Topic")]);
    m_topic_isSet = !json[QString("Topic")].isNull() && m_topic_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateTopic_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTopic_request::asJsonObject() const {
    QJsonObject obj;
    if (m_topic_id_isSet) {
        obj.insert(QString("TopicId"), ::OpenAPI::toJsonValue(m_topic_id));
    }
    if (m_topic.isSet()) {
        obj.insert(QString("Topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateTopic_request::getTopicId() const {
    return m_topic_id;
}
void OAICreateTopic_request::setTopicId(const QString &topic_id) {
    m_topic_id = topic_id;
    m_topic_id_isSet = true;
}

bool OAICreateTopic_request::is_topic_id_Set() const{
    return m_topic_id_isSet;
}

bool OAICreateTopic_request::is_topic_id_Valid() const{
    return m_topic_id_isValid;
}

OAICreateTopic_request_Topic OAICreateTopic_request::getTopic() const {
    return m_topic;
}
void OAICreateTopic_request::setTopic(const OAICreateTopic_request_Topic &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAICreateTopic_request::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAICreateTopic_request::is_topic_Valid() const{
    return m_topic_isValid;
}

QList<OAITag> OAICreateTopic_request::getTags() const {
    return m_tags;
}
void OAICreateTopic_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTopic_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTopic_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateTopic_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTopic_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_topic_id_isValid && m_topic_isValid && true;
}

} // namespace OpenAPI
