/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableBorderOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableBorderOptions::OAITableBorderOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableBorderOptions::OAITableBorderOptions() {
    this->initializeModel();
}

OAITableBorderOptions::~OAITableBorderOptions() {}

void OAITableBorderOptions::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_thickness_isSet = false;
    m_thickness_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;
}

void OAITableBorderOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableBorderOptions::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_thickness_isValid = ::OpenAPI::fromJsonValue(m_thickness, json[QString("Thickness")]);
    m_thickness_isSet = !json[QString("Thickness")].isNull() && m_thickness_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("Style")]);
    m_style_isSet = !json[QString("Style")].isNull() && m_style_isValid;
}

QString OAITableBorderOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableBorderOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_thickness_isSet) {
        obj.insert(QString("Thickness"), ::OpenAPI::toJsonValue(m_thickness));
    }
    if (m_style.isSet()) {
        obj.insert(QString("Style"), ::OpenAPI::toJsonValue(m_style));
    }
    return obj;
}

QString OAITableBorderOptions::getColor() const {
    return m_color;
}
void OAITableBorderOptions::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAITableBorderOptions::is_color_Set() const{
    return m_color_isSet;
}

bool OAITableBorderOptions::is_color_Valid() const{
    return m_color_isValid;
}

qint32 OAITableBorderOptions::getThickness() const {
    return m_thickness;
}
void OAITableBorderOptions::setThickness(const qint32 &thickness) {
    m_thickness = thickness;
    m_thickness_isSet = true;
}

bool OAITableBorderOptions::is_thickness_Set() const{
    return m_thickness_isSet;
}

bool OAITableBorderOptions::is_thickness_Valid() const{
    return m_thickness_isValid;
}

OAITableBorderStyle OAITableBorderOptions::getStyle() const {
    return m_style;
}
void OAITableBorderOptions::setStyle(const OAITableBorderStyle &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAITableBorderOptions::is_style_Set() const{
    return m_style_isSet;
}

bool OAITableBorderOptions::is_style_Valid() const{
    return m_style_isValid;
}

bool OAITableBorderOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thickness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableBorderOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
