/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter_NumericEqualityFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter_NumericEqualityFilter::OAIFilter_NumericEqualityFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter_NumericEqualityFilter::OAIFilter_NumericEqualityFilter() {
    this->initializeModel();
}

OAIFilter_NumericEqualityFilter::~OAIFilter_NumericEqualityFilter() {}

void OAIFilter_NumericEqualityFilter::initializeModel() {

    m_filter_id_isSet = false;
    m_filter_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_select_all_options_isSet = false;
    m_select_all_options_isValid = false;

    m_match_operator_isSet = false;
    m_match_operator_isValid = false;

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_null_option_isSet = false;
    m_null_option_isValid = false;
}

void OAIFilter_NumericEqualityFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter_NumericEqualityFilter::fromJsonObject(QJsonObject json) {

    m_filter_id_isValid = ::OpenAPI::fromJsonValue(m_filter_id, json[QString("FilterId")]);
    m_filter_id_isSet = !json[QString("FilterId")].isNull() && m_filter_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_select_all_options_isValid = ::OpenAPI::fromJsonValue(m_select_all_options, json[QString("SelectAllOptions")]);
    m_select_all_options_isSet = !json[QString("SelectAllOptions")].isNull() && m_select_all_options_isValid;

    m_match_operator_isValid = ::OpenAPI::fromJsonValue(m_match_operator, json[QString("MatchOperator")]);
    m_match_operator_isSet = !json[QString("MatchOperator")].isNull() && m_match_operator_isValid;

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("AggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("AggregationFunction")].isNull() && m_aggregation_function_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;

    m_null_option_isValid = ::OpenAPI::fromJsonValue(m_null_option, json[QString("NullOption")]);
    m_null_option_isSet = !json[QString("NullOption")].isNull() && m_null_option_isValid;
}

QString OAIFilter_NumericEqualityFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter_NumericEqualityFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_id_isSet) {
        obj.insert(QString("FilterId"), ::OpenAPI::toJsonValue(m_filter_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_select_all_options.isSet()) {
        obj.insert(QString("SelectAllOptions"), ::OpenAPI::toJsonValue(m_select_all_options));
    }
    if (m_match_operator.isSet()) {
        obj.insert(QString("MatchOperator"), ::OpenAPI::toJsonValue(m_match_operator));
    }
    if (m_aggregation_function.isSet()) {
        obj.insert(QString("AggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_null_option.isSet()) {
        obj.insert(QString("NullOption"), ::OpenAPI::toJsonValue(m_null_option));
    }
    return obj;
}

QString OAIFilter_NumericEqualityFilter::getFilterId() const {
    return m_filter_id;
}
void OAIFilter_NumericEqualityFilter::setFilterId(const QString &filter_id) {
    m_filter_id = filter_id;
    m_filter_id_isSet = true;
}

bool OAIFilter_NumericEqualityFilter::is_filter_id_Set() const{
    return m_filter_id_isSet;
}

bool OAIFilter_NumericEqualityFilter::is_filter_id_Valid() const{
    return m_filter_id_isValid;
}

OAICategoryDrillDownFilter_Column OAIFilter_NumericEqualityFilter::getColumn() const {
    return m_column;
}
void OAIFilter_NumericEqualityFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIFilter_NumericEqualityFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAIFilter_NumericEqualityFilter::is_column_Valid() const{
    return m_column_isValid;
}

double OAIFilter_NumericEqualityFilter::getValue() const {
    return m_value;
}
void OAIFilter_NumericEqualityFilter::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFilter_NumericEqualityFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFilter_NumericEqualityFilter::is_value_Valid() const{
    return m_value_isValid;
}

OAINumericFilterSelectAllOptions OAIFilter_NumericEqualityFilter::getSelectAllOptions() const {
    return m_select_all_options;
}
void OAIFilter_NumericEqualityFilter::setSelectAllOptions(const OAINumericFilterSelectAllOptions &select_all_options) {
    m_select_all_options = select_all_options;
    m_select_all_options_isSet = true;
}

bool OAIFilter_NumericEqualityFilter::is_select_all_options_Set() const{
    return m_select_all_options_isSet;
}

bool OAIFilter_NumericEqualityFilter::is_select_all_options_Valid() const{
    return m_select_all_options_isValid;
}

OAINumericEqualityMatchOperator OAIFilter_NumericEqualityFilter::getMatchOperator() const {
    return m_match_operator;
}
void OAIFilter_NumericEqualityFilter::setMatchOperator(const OAINumericEqualityMatchOperator &match_operator) {
    m_match_operator = match_operator;
    m_match_operator_isSet = true;
}

bool OAIFilter_NumericEqualityFilter::is_match_operator_Set() const{
    return m_match_operator_isSet;
}

bool OAIFilter_NumericEqualityFilter::is_match_operator_Valid() const{
    return m_match_operator_isValid;
}

OAINumericRangeFilter_AggregationFunction OAIFilter_NumericEqualityFilter::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAIFilter_NumericEqualityFilter::setAggregationFunction(const OAINumericRangeFilter_AggregationFunction &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAIFilter_NumericEqualityFilter::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAIFilter_NumericEqualityFilter::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

QString OAIFilter_NumericEqualityFilter::getParameterName() const {
    return m_parameter_name;
}
void OAIFilter_NumericEqualityFilter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIFilter_NumericEqualityFilter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIFilter_NumericEqualityFilter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

OAIFilterNullOption OAIFilter_NumericEqualityFilter::getNullOption() const {
    return m_null_option;
}
void OAIFilter_NumericEqualityFilter::setNullOption(const OAIFilterNullOption &null_option) {
    m_null_option = null_option;
    m_null_option_isSet = true;
}

bool OAIFilter_NumericEqualityFilter::is_null_option_Set() const{
    return m_null_option_isSet;
}

bool OAIFilter_NumericEqualityFilter::is_null_option_Valid() const{
    return m_null_option_isValid;
}

bool OAIFilter_NumericEqualityFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_all_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_option.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter_NumericEqualityFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_id_isValid && m_column_isValid && m_match_operator_isValid && m_null_option_isValid && true;
}

} // namespace OpenAPI
