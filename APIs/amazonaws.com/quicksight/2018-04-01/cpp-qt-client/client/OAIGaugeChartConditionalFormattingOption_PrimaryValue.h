/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGaugeChartConditionalFormattingOption_PrimaryValue.h
 *
 * 
 */

#ifndef OAIGaugeChartConditionalFormattingOption_PrimaryValue_H
#define OAIGaugeChartConditionalFormattingOption_PrimaryValue_H

#include <QJsonObject>

#include "OAIGaugeChartPrimaryValueConditionalFormatting_Icon.h"
#include "OAIGaugeChartPrimaryValueConditionalFormatting_TextColor.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGaugeChartPrimaryValueConditionalFormatting_TextColor;
class OAIGaugeChartPrimaryValueConditionalFormatting_Icon;

class OAIGaugeChartConditionalFormattingOption_PrimaryValue : public OAIObject {
public:
    OAIGaugeChartConditionalFormattingOption_PrimaryValue();
    OAIGaugeChartConditionalFormattingOption_PrimaryValue(QString json);
    ~OAIGaugeChartConditionalFormattingOption_PrimaryValue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGaugeChartPrimaryValueConditionalFormatting_TextColor getTextColor() const;
    void setTextColor(const OAIGaugeChartPrimaryValueConditionalFormatting_TextColor &text_color);
    bool is_text_color_Set() const;
    bool is_text_color_Valid() const;

    OAIGaugeChartPrimaryValueConditionalFormatting_Icon getIcon() const;
    void setIcon(const OAIGaugeChartPrimaryValueConditionalFormatting_Icon &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGaugeChartPrimaryValueConditionalFormatting_TextColor m_text_color;
    bool m_text_color_isSet;
    bool m_text_color_isValid;

    OAIGaugeChartPrimaryValueConditionalFormatting_Icon m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGaugeChartConditionalFormattingOption_PrimaryValue)

#endif // OAIGaugeChartConditionalFormattingOption_PrimaryValue_H
