/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableConditionalFormatting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableConditionalFormatting::OAITableConditionalFormatting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableConditionalFormatting::OAITableConditionalFormatting() {
    this->initializeModel();
}

OAITableConditionalFormatting::~OAITableConditionalFormatting() {}

void OAITableConditionalFormatting::initializeModel() {

    m_conditional_formatting_options_isSet = false;
    m_conditional_formatting_options_isValid = false;
}

void OAITableConditionalFormatting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableConditionalFormatting::fromJsonObject(QJsonObject json) {

    m_conditional_formatting_options_isValid = ::OpenAPI::fromJsonValue(m_conditional_formatting_options, json[QString("ConditionalFormattingOptions")]);
    m_conditional_formatting_options_isSet = !json[QString("ConditionalFormattingOptions")].isNull() && m_conditional_formatting_options_isValid;
}

QString OAITableConditionalFormatting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableConditionalFormatting::asJsonObject() const {
    QJsonObject obj;
    if (m_conditional_formatting_options.isSet()) {
        obj.insert(QString("ConditionalFormattingOptions"), ::OpenAPI::toJsonValue(m_conditional_formatting_options));
    }
    return obj;
}

QList OAITableConditionalFormatting::getConditionalFormattingOptions() const {
    return m_conditional_formatting_options;
}
void OAITableConditionalFormatting::setConditionalFormattingOptions(const QList &conditional_formatting_options) {
    m_conditional_formatting_options = conditional_formatting_options;
    m_conditional_formatting_options_isSet = true;
}

bool OAITableConditionalFormatting::is_conditional_formatting_options_Set() const{
    return m_conditional_formatting_options_isSet;
}

bool OAITableConditionalFormatting::is_conditional_formatting_options_Valid() const{
    return m_conditional_formatting_options_isValid;
}

bool OAITableConditionalFormatting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditional_formatting_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableConditionalFormatting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
