/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDashboardResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDashboardResponse::OAIUpdateDashboardResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDashboardResponse::OAIUpdateDashboardResponse() {
    this->initializeModel();
}

OAIUpdateDashboardResponse::~OAIUpdateDashboardResponse() {}

void OAIUpdateDashboardResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_version_arn_isSet = false;
    m_version_arn_isValid = false;

    m_dashboard_id_isSet = false;
    m_dashboard_id_isValid = false;

    m_creation_status_isSet = false;
    m_creation_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIUpdateDashboardResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDashboardResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_version_arn_isValid = ::OpenAPI::fromJsonValue(m_version_arn, json[QString("VersionArn")]);
    m_version_arn_isSet = !json[QString("VersionArn")].isNull() && m_version_arn_isValid;

    m_dashboard_id_isValid = ::OpenAPI::fromJsonValue(m_dashboard_id, json[QString("DashboardId")]);
    m_dashboard_id_isSet = !json[QString("DashboardId")].isNull() && m_dashboard_id_isValid;

    m_creation_status_isValid = ::OpenAPI::fromJsonValue(m_creation_status, json[QString("CreationStatus")]);
    m_creation_status_isSet = !json[QString("CreationStatus")].isNull() && m_creation_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIUpdateDashboardResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDashboardResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_version_arn_isSet) {
        obj.insert(QString("VersionArn"), ::OpenAPI::toJsonValue(m_version_arn));
    }
    if (m_dashboard_id_isSet) {
        obj.insert(QString("DashboardId"), ::OpenAPI::toJsonValue(m_dashboard_id));
    }
    if (m_creation_status.isSet()) {
        obj.insert(QString("CreationStatus"), ::OpenAPI::toJsonValue(m_creation_status));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIUpdateDashboardResponse::getArn() const {
    return m_arn;
}
void OAIUpdateDashboardResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateDashboardResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateDashboardResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUpdateDashboardResponse::getVersionArn() const {
    return m_version_arn;
}
void OAIUpdateDashboardResponse::setVersionArn(const QString &version_arn) {
    m_version_arn = version_arn;
    m_version_arn_isSet = true;
}

bool OAIUpdateDashboardResponse::is_version_arn_Set() const{
    return m_version_arn_isSet;
}

bool OAIUpdateDashboardResponse::is_version_arn_Valid() const{
    return m_version_arn_isValid;
}

QString OAIUpdateDashboardResponse::getDashboardId() const {
    return m_dashboard_id;
}
void OAIUpdateDashboardResponse::setDashboardId(const QString &dashboard_id) {
    m_dashboard_id = dashboard_id;
    m_dashboard_id_isSet = true;
}

bool OAIUpdateDashboardResponse::is_dashboard_id_Set() const{
    return m_dashboard_id_isSet;
}

bool OAIUpdateDashboardResponse::is_dashboard_id_Valid() const{
    return m_dashboard_id_isValid;
}

OAIResourceStatus OAIUpdateDashboardResponse::getCreationStatus() const {
    return m_creation_status;
}
void OAIUpdateDashboardResponse::setCreationStatus(const OAIResourceStatus &creation_status) {
    m_creation_status = creation_status;
    m_creation_status_isSet = true;
}

bool OAIUpdateDashboardResponse::is_creation_status_Set() const{
    return m_creation_status_isSet;
}

bool OAIUpdateDashboardResponse::is_creation_status_Valid() const{
    return m_creation_status_isValid;
}

qint32 OAIUpdateDashboardResponse::getStatus() const {
    return m_status;
}
void OAIUpdateDashboardResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateDashboardResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateDashboardResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateDashboardResponse::getRequestId() const {
    return m_request_id;
}
void OAIUpdateDashboardResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIUpdateDashboardResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIUpdateDashboardResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIUpdateDashboardResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDashboardResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
