/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComboChartVisual_ChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComboChartVisual_ChartConfiguration::OAIComboChartVisual_ChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComboChartVisual_ChartConfiguration::OAIComboChartVisual_ChartConfiguration() {
    this->initializeModel();
}

OAIComboChartVisual_ChartConfiguration::~OAIComboChartVisual_ChartConfiguration() {}

void OAIComboChartVisual_ChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_bars_arrangement_isSet = false;
    m_bars_arrangement_isValid = false;

    m_category_axis_isSet = false;
    m_category_axis_isValid = false;

    m_category_label_options_isSet = false;
    m_category_label_options_isValid = false;

    m_primary_y_axis_display_options_isSet = false;
    m_primary_y_axis_display_options_isValid = false;

    m_primary_y_axis_label_options_isSet = false;
    m_primary_y_axis_label_options_isValid = false;

    m_secondary_y_axis_display_options_isSet = false;
    m_secondary_y_axis_display_options_isValid = false;

    m_secondary_y_axis_label_options_isSet = false;
    m_secondary_y_axis_label_options_isValid = false;

    m_color_label_options_isSet = false;
    m_color_label_options_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_bar_data_labels_isSet = false;
    m_bar_data_labels_isValid = false;

    m_line_data_labels_isSet = false;
    m_line_data_labels_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_reference_lines_isSet = false;
    m_reference_lines_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAIComboChartVisual_ChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComboChartVisual_ChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_bars_arrangement_isValid = ::OpenAPI::fromJsonValue(m_bars_arrangement, json[QString("BarsArrangement")]);
    m_bars_arrangement_isSet = !json[QString("BarsArrangement")].isNull() && m_bars_arrangement_isValid;

    m_category_axis_isValid = ::OpenAPI::fromJsonValue(m_category_axis, json[QString("CategoryAxis")]);
    m_category_axis_isSet = !json[QString("CategoryAxis")].isNull() && m_category_axis_isValid;

    m_category_label_options_isValid = ::OpenAPI::fromJsonValue(m_category_label_options, json[QString("CategoryLabelOptions")]);
    m_category_label_options_isSet = !json[QString("CategoryLabelOptions")].isNull() && m_category_label_options_isValid;

    m_primary_y_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_primary_y_axis_display_options, json[QString("PrimaryYAxisDisplayOptions")]);
    m_primary_y_axis_display_options_isSet = !json[QString("PrimaryYAxisDisplayOptions")].isNull() && m_primary_y_axis_display_options_isValid;

    m_primary_y_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_primary_y_axis_label_options, json[QString("PrimaryYAxisLabelOptions")]);
    m_primary_y_axis_label_options_isSet = !json[QString("PrimaryYAxisLabelOptions")].isNull() && m_primary_y_axis_label_options_isValid;

    m_secondary_y_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_secondary_y_axis_display_options, json[QString("SecondaryYAxisDisplayOptions")]);
    m_secondary_y_axis_display_options_isSet = !json[QString("SecondaryYAxisDisplayOptions")].isNull() && m_secondary_y_axis_display_options_isValid;

    m_secondary_y_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_secondary_y_axis_label_options, json[QString("SecondaryYAxisLabelOptions")]);
    m_secondary_y_axis_label_options_isSet = !json[QString("SecondaryYAxisLabelOptions")].isNull() && m_secondary_y_axis_label_options_isValid;

    m_color_label_options_isValid = ::OpenAPI::fromJsonValue(m_color_label_options, json[QString("ColorLabelOptions")]);
    m_color_label_options_isSet = !json[QString("ColorLabelOptions")].isNull() && m_color_label_options_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_bar_data_labels_isValid = ::OpenAPI::fromJsonValue(m_bar_data_labels, json[QString("BarDataLabels")]);
    m_bar_data_labels_isSet = !json[QString("BarDataLabels")].isNull() && m_bar_data_labels_isValid;

    m_line_data_labels_isValid = ::OpenAPI::fromJsonValue(m_line_data_labels, json[QString("LineDataLabels")]);
    m_line_data_labels_isSet = !json[QString("LineDataLabels")].isNull() && m_line_data_labels_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_reference_lines_isValid = ::OpenAPI::fromJsonValue(m_reference_lines, json[QString("ReferenceLines")]);
    m_reference_lines_isSet = !json[QString("ReferenceLines")].isNull() && m_reference_lines_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAIComboChartVisual_ChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComboChartVisual_ChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_bars_arrangement.isSet()) {
        obj.insert(QString("BarsArrangement"), ::OpenAPI::toJsonValue(m_bars_arrangement));
    }
    if (m_category_axis.isSet()) {
        obj.insert(QString("CategoryAxis"), ::OpenAPI::toJsonValue(m_category_axis));
    }
    if (m_category_label_options.isSet()) {
        obj.insert(QString("CategoryLabelOptions"), ::OpenAPI::toJsonValue(m_category_label_options));
    }
    if (m_primary_y_axis_display_options.isSet()) {
        obj.insert(QString("PrimaryYAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_primary_y_axis_display_options));
    }
    if (m_primary_y_axis_label_options.isSet()) {
        obj.insert(QString("PrimaryYAxisLabelOptions"), ::OpenAPI::toJsonValue(m_primary_y_axis_label_options));
    }
    if (m_secondary_y_axis_display_options.isSet()) {
        obj.insert(QString("SecondaryYAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_secondary_y_axis_display_options));
    }
    if (m_secondary_y_axis_label_options.isSet()) {
        obj.insert(QString("SecondaryYAxisLabelOptions"), ::OpenAPI::toJsonValue(m_secondary_y_axis_label_options));
    }
    if (m_color_label_options.isSet()) {
        obj.insert(QString("ColorLabelOptions"), ::OpenAPI::toJsonValue(m_color_label_options));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_bar_data_labels.isSet()) {
        obj.insert(QString("BarDataLabels"), ::OpenAPI::toJsonValue(m_bar_data_labels));
    }
    if (m_line_data_labels.isSet()) {
        obj.insert(QString("LineDataLabels"), ::OpenAPI::toJsonValue(m_line_data_labels));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_reference_lines.isSet()) {
        obj.insert(QString("ReferenceLines"), ::OpenAPI::toJsonValue(m_reference_lines));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAIComboChartConfiguration_FieldWells OAIComboChartVisual_ChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIComboChartVisual_ChartConfiguration::setFieldWells(const OAIComboChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIComboChartConfiguration_SortConfiguration OAIComboChartVisual_ChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIComboChartVisual_ChartConfiguration::setSortConfiguration(const OAIComboChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIBarsArrangement OAIComboChartVisual_ChartConfiguration::getBarsArrangement() const {
    return m_bars_arrangement;
}
void OAIComboChartVisual_ChartConfiguration::setBarsArrangement(const OAIBarsArrangement &bars_arrangement) {
    m_bars_arrangement = bars_arrangement;
    m_bars_arrangement_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_bars_arrangement_Set() const{
    return m_bars_arrangement_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_bars_arrangement_Valid() const{
    return m_bars_arrangement_isValid;
}

OAIComboChartConfiguration_CategoryAxis OAIComboChartVisual_ChartConfiguration::getCategoryAxis() const {
    return m_category_axis;
}
void OAIComboChartVisual_ChartConfiguration::setCategoryAxis(const OAIComboChartConfiguration_CategoryAxis &category_axis) {
    m_category_axis = category_axis;
    m_category_axis_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_category_axis_Set() const{
    return m_category_axis_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_category_axis_Valid() const{
    return m_category_axis_isValid;
}

OAIComboChartConfiguration_CategoryLabelOptions OAIComboChartVisual_ChartConfiguration::getCategoryLabelOptions() const {
    return m_category_label_options;
}
void OAIComboChartVisual_ChartConfiguration::setCategoryLabelOptions(const OAIComboChartConfiguration_CategoryLabelOptions &category_label_options) {
    m_category_label_options = category_label_options;
    m_category_label_options_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_category_label_options_Set() const{
    return m_category_label_options_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_category_label_options_Valid() const{
    return m_category_label_options_isValid;
}

OAIComboChartConfiguration_PrimaryYAxisDisplayOptions OAIComboChartVisual_ChartConfiguration::getPrimaryYAxisDisplayOptions() const {
    return m_primary_y_axis_display_options;
}
void OAIComboChartVisual_ChartConfiguration::setPrimaryYAxisDisplayOptions(const OAIComboChartConfiguration_PrimaryYAxisDisplayOptions &primary_y_axis_display_options) {
    m_primary_y_axis_display_options = primary_y_axis_display_options;
    m_primary_y_axis_display_options_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_primary_y_axis_display_options_Set() const{
    return m_primary_y_axis_display_options_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_primary_y_axis_display_options_Valid() const{
    return m_primary_y_axis_display_options_isValid;
}

OAIComboChartConfiguration_PrimaryYAxisLabelOptions OAIComboChartVisual_ChartConfiguration::getPrimaryYAxisLabelOptions() const {
    return m_primary_y_axis_label_options;
}
void OAIComboChartVisual_ChartConfiguration::setPrimaryYAxisLabelOptions(const OAIComboChartConfiguration_PrimaryYAxisLabelOptions &primary_y_axis_label_options) {
    m_primary_y_axis_label_options = primary_y_axis_label_options;
    m_primary_y_axis_label_options_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_primary_y_axis_label_options_Set() const{
    return m_primary_y_axis_label_options_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_primary_y_axis_label_options_Valid() const{
    return m_primary_y_axis_label_options_isValid;
}

OAIComboChartConfiguration_SecondaryYAxisDisplayOptions OAIComboChartVisual_ChartConfiguration::getSecondaryYAxisDisplayOptions() const {
    return m_secondary_y_axis_display_options;
}
void OAIComboChartVisual_ChartConfiguration::setSecondaryYAxisDisplayOptions(const OAIComboChartConfiguration_SecondaryYAxisDisplayOptions &secondary_y_axis_display_options) {
    m_secondary_y_axis_display_options = secondary_y_axis_display_options;
    m_secondary_y_axis_display_options_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_secondary_y_axis_display_options_Set() const{
    return m_secondary_y_axis_display_options_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_secondary_y_axis_display_options_Valid() const{
    return m_secondary_y_axis_display_options_isValid;
}

OAIComboChartConfiguration_SecondaryYAxisLabelOptions OAIComboChartVisual_ChartConfiguration::getSecondaryYAxisLabelOptions() const {
    return m_secondary_y_axis_label_options;
}
void OAIComboChartVisual_ChartConfiguration::setSecondaryYAxisLabelOptions(const OAIComboChartConfiguration_SecondaryYAxisLabelOptions &secondary_y_axis_label_options) {
    m_secondary_y_axis_label_options = secondary_y_axis_label_options;
    m_secondary_y_axis_label_options_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_secondary_y_axis_label_options_Set() const{
    return m_secondary_y_axis_label_options_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_secondary_y_axis_label_options_Valid() const{
    return m_secondary_y_axis_label_options_isValid;
}

OAIComboChartConfiguration_ColorLabelOptions OAIComboChartVisual_ChartConfiguration::getColorLabelOptions() const {
    return m_color_label_options;
}
void OAIComboChartVisual_ChartConfiguration::setColorLabelOptions(const OAIComboChartConfiguration_ColorLabelOptions &color_label_options) {
    m_color_label_options = color_label_options;
    m_color_label_options_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_color_label_options_Set() const{
    return m_color_label_options_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_color_label_options_Valid() const{
    return m_color_label_options_isValid;
}

OAIBarChartConfiguration_Legend OAIComboChartVisual_ChartConfiguration::getLegend() const {
    return m_legend;
}
void OAIComboChartVisual_ChartConfiguration::setLegend(const OAIBarChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIComboChartConfiguration_BarDataLabels OAIComboChartVisual_ChartConfiguration::getBarDataLabels() const {
    return m_bar_data_labels;
}
void OAIComboChartVisual_ChartConfiguration::setBarDataLabels(const OAIComboChartConfiguration_BarDataLabels &bar_data_labels) {
    m_bar_data_labels = bar_data_labels;
    m_bar_data_labels_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_bar_data_labels_Set() const{
    return m_bar_data_labels_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_bar_data_labels_Valid() const{
    return m_bar_data_labels_isValid;
}

OAIComboChartConfiguration_LineDataLabels OAIComboChartVisual_ChartConfiguration::getLineDataLabels() const {
    return m_line_data_labels;
}
void OAIComboChartVisual_ChartConfiguration::setLineDataLabels(const OAIComboChartConfiguration_LineDataLabels &line_data_labels) {
    m_line_data_labels = line_data_labels;
    m_line_data_labels_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_line_data_labels_Set() const{
    return m_line_data_labels_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_line_data_labels_Valid() const{
    return m_line_data_labels_isValid;
}

OAIComboChartConfiguration_Tooltip OAIComboChartVisual_ChartConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIComboChartVisual_ChartConfiguration::setTooltip(const OAIComboChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

QList OAIComboChartVisual_ChartConfiguration::getReferenceLines() const {
    return m_reference_lines;
}
void OAIComboChartVisual_ChartConfiguration::setReferenceLines(const QList &reference_lines) {
    m_reference_lines = reference_lines;
    m_reference_lines_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_reference_lines_Set() const{
    return m_reference_lines_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_reference_lines_Valid() const{
    return m_reference_lines_isValid;
}

OAIBarChartConfiguration_VisualPalette OAIComboChartVisual_ChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIComboChartVisual_ChartConfiguration::setVisualPalette(const OAIBarChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIComboChartVisual_ChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIComboChartVisual_ChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAIComboChartVisual_ChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bars_arrangement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_y_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_y_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_y_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_y_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bar_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_lines.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComboChartVisual_ChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
