/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnGroup_GeoSpatialColumnGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnGroup_GeoSpatialColumnGroup::OAIColumnGroup_GeoSpatialColumnGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnGroup_GeoSpatialColumnGroup::OAIColumnGroup_GeoSpatialColumnGroup() {
    this->initializeModel();
}

OAIColumnGroup_GeoSpatialColumnGroup::~OAIColumnGroup_GeoSpatialColumnGroup() {}

void OAIColumnGroup_GeoSpatialColumnGroup::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;
}

void OAIColumnGroup_GeoSpatialColumnGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnGroup_GeoSpatialColumnGroup::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("CountryCode")]);
    m_country_code_isSet = !json[QString("CountryCode")].isNull() && m_country_code_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("Columns")]);
    m_columns_isSet = !json[QString("Columns")].isNull() && m_columns_isValid;
}

QString OAIColumnGroup_GeoSpatialColumnGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnGroup_GeoSpatialColumnGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_country_code.isSet()) {
        obj.insert(QString("CountryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_columns.isSet()) {
        obj.insert(QString("Columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    return obj;
}

QString OAIColumnGroup_GeoSpatialColumnGroup::getName() const {
    return m_name;
}
void OAIColumnGroup_GeoSpatialColumnGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIColumnGroup_GeoSpatialColumnGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIColumnGroup_GeoSpatialColumnGroup::is_name_Valid() const{
    return m_name_isValid;
}

OAIGeoSpatialCountryCode OAIColumnGroup_GeoSpatialColumnGroup::getCountryCode() const {
    return m_country_code;
}
void OAIColumnGroup_GeoSpatialColumnGroup::setCountryCode(const OAIGeoSpatialCountryCode &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIColumnGroup_GeoSpatialColumnGroup::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIColumnGroup_GeoSpatialColumnGroup::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QList OAIColumnGroup_GeoSpatialColumnGroup::getColumns() const {
    return m_columns;
}
void OAIColumnGroup_GeoSpatialColumnGroup::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIColumnGroup_GeoSpatialColumnGroup::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIColumnGroup_GeoSpatialColumnGroup::is_columns_Valid() const{
    return m_columns_isValid;
}

bool OAIColumnGroup_GeoSpatialColumnGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnGroup_GeoSpatialColumnGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_columns_isValid && true;
}

} // namespace OpenAPI
