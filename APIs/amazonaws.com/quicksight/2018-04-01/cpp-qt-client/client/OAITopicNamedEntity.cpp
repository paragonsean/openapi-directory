/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicNamedEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicNamedEntity::OAITopicNamedEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicNamedEntity::OAITopicNamedEntity() {
    this->initializeModel();
}

OAITopicNamedEntity::~OAITopicNamedEntity() {}

void OAITopicNamedEntity::initializeModel() {

    m_entity_name_isSet = false;
    m_entity_name_isValid = false;

    m_entity_description_isSet = false;
    m_entity_description_isValid = false;

    m_entity_synonyms_isSet = false;
    m_entity_synonyms_isValid = false;

    m_semantic_entity_type_isSet = false;
    m_semantic_entity_type_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;
}

void OAITopicNamedEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicNamedEntity::fromJsonObject(QJsonObject json) {

    m_entity_name_isValid = ::OpenAPI::fromJsonValue(m_entity_name, json[QString("EntityName")]);
    m_entity_name_isSet = !json[QString("EntityName")].isNull() && m_entity_name_isValid;

    m_entity_description_isValid = ::OpenAPI::fromJsonValue(m_entity_description, json[QString("EntityDescription")]);
    m_entity_description_isSet = !json[QString("EntityDescription")].isNull() && m_entity_description_isValid;

    m_entity_synonyms_isValid = ::OpenAPI::fromJsonValue(m_entity_synonyms, json[QString("EntitySynonyms")]);
    m_entity_synonyms_isSet = !json[QString("EntitySynonyms")].isNull() && m_entity_synonyms_isValid;

    m_semantic_entity_type_isValid = ::OpenAPI::fromJsonValue(m_semantic_entity_type, json[QString("SemanticEntityType")]);
    m_semantic_entity_type_isSet = !json[QString("SemanticEntityType")].isNull() && m_semantic_entity_type_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;
}

QString OAITopicNamedEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicNamedEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_name_isSet) {
        obj.insert(QString("EntityName"), ::OpenAPI::toJsonValue(m_entity_name));
    }
    if (m_entity_description_isSet) {
        obj.insert(QString("EntityDescription"), ::OpenAPI::toJsonValue(m_entity_description));
    }
    if (m_entity_synonyms.isSet()) {
        obj.insert(QString("EntitySynonyms"), ::OpenAPI::toJsonValue(m_entity_synonyms));
    }
    if (m_semantic_entity_type.isSet()) {
        obj.insert(QString("SemanticEntityType"), ::OpenAPI::toJsonValue(m_semantic_entity_type));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    return obj;
}

QString OAITopicNamedEntity::getEntityName() const {
    return m_entity_name;
}
void OAITopicNamedEntity::setEntityName(const QString &entity_name) {
    m_entity_name = entity_name;
    m_entity_name_isSet = true;
}

bool OAITopicNamedEntity::is_entity_name_Set() const{
    return m_entity_name_isSet;
}

bool OAITopicNamedEntity::is_entity_name_Valid() const{
    return m_entity_name_isValid;
}

QString OAITopicNamedEntity::getEntityDescription() const {
    return m_entity_description;
}
void OAITopicNamedEntity::setEntityDescription(const QString &entity_description) {
    m_entity_description = entity_description;
    m_entity_description_isSet = true;
}

bool OAITopicNamedEntity::is_entity_description_Set() const{
    return m_entity_description_isSet;
}

bool OAITopicNamedEntity::is_entity_description_Valid() const{
    return m_entity_description_isValid;
}

QList OAITopicNamedEntity::getEntitySynonyms() const {
    return m_entity_synonyms;
}
void OAITopicNamedEntity::setEntitySynonyms(const QList &entity_synonyms) {
    m_entity_synonyms = entity_synonyms;
    m_entity_synonyms_isSet = true;
}

bool OAITopicNamedEntity::is_entity_synonyms_Set() const{
    return m_entity_synonyms_isSet;
}

bool OAITopicNamedEntity::is_entity_synonyms_Valid() const{
    return m_entity_synonyms_isValid;
}

OAITopicNamedEntity_SemanticEntityType OAITopicNamedEntity::getSemanticEntityType() const {
    return m_semantic_entity_type;
}
void OAITopicNamedEntity::setSemanticEntityType(const OAITopicNamedEntity_SemanticEntityType &semantic_entity_type) {
    m_semantic_entity_type = semantic_entity_type;
    m_semantic_entity_type_isSet = true;
}

bool OAITopicNamedEntity::is_semantic_entity_type_Set() const{
    return m_semantic_entity_type_isSet;
}

bool OAITopicNamedEntity::is_semantic_entity_type_Valid() const{
    return m_semantic_entity_type_isValid;
}

QList OAITopicNamedEntity::getDefinition() const {
    return m_definition;
}
void OAITopicNamedEntity::setDefinition(const QList &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAITopicNamedEntity::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAITopicNamedEntity::is_definition_Valid() const{
    return m_definition_isValid;
}

bool OAITopicNamedEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_synonyms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_semantic_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicNamedEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_name_isValid && true;
}

} // namespace OpenAPI
