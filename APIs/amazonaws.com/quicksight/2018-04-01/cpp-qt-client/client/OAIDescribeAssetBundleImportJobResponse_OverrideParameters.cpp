/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAssetBundleImportJobResponse_OverrideParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAssetBundleImportJobResponse_OverrideParameters::OAIDescribeAssetBundleImportJobResponse_OverrideParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAssetBundleImportJobResponse_OverrideParameters::OAIDescribeAssetBundleImportJobResponse_OverrideParameters() {
    this->initializeModel();
}

OAIDescribeAssetBundleImportJobResponse_OverrideParameters::~OAIDescribeAssetBundleImportJobResponse_OverrideParameters() {}

void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::initializeModel() {

    m_resource_id_override_configuration_isSet = false;
    m_resource_id_override_configuration_isValid = false;

    m_vpc_connections_isSet = false;
    m_vpc_connections_isValid = false;

    m_refresh_schedules_isSet = false;
    m_refresh_schedules_isValid = false;

    m_data_sources_isSet = false;
    m_data_sources_isValid = false;

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_analyses_isSet = false;
    m_analyses_isValid = false;

    m_dashboards_isSet = false;
    m_dashboards_isValid = false;
}

void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::fromJsonObject(QJsonObject json) {

    m_resource_id_override_configuration_isValid = ::OpenAPI::fromJsonValue(m_resource_id_override_configuration, json[QString("ResourceIdOverrideConfiguration")]);
    m_resource_id_override_configuration_isSet = !json[QString("ResourceIdOverrideConfiguration")].isNull() && m_resource_id_override_configuration_isValid;

    m_vpc_connections_isValid = ::OpenAPI::fromJsonValue(m_vpc_connections, json[QString("VPCConnections")]);
    m_vpc_connections_isSet = !json[QString("VPCConnections")].isNull() && m_vpc_connections_isValid;

    m_refresh_schedules_isValid = ::OpenAPI::fromJsonValue(m_refresh_schedules, json[QString("RefreshSchedules")]);
    m_refresh_schedules_isSet = !json[QString("RefreshSchedules")].isNull() && m_refresh_schedules_isValid;

    m_data_sources_isValid = ::OpenAPI::fromJsonValue(m_data_sources, json[QString("DataSources")]);
    m_data_sources_isSet = !json[QString("DataSources")].isNull() && m_data_sources_isValid;

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("DataSets")]);
    m_data_sets_isSet = !json[QString("DataSets")].isNull() && m_data_sets_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("Themes")]);
    m_themes_isSet = !json[QString("Themes")].isNull() && m_themes_isValid;

    m_analyses_isValid = ::OpenAPI::fromJsonValue(m_analyses, json[QString("Analyses")]);
    m_analyses_isSet = !json[QString("Analyses")].isNull() && m_analyses_isValid;

    m_dashboards_isValid = ::OpenAPI::fromJsonValue(m_dashboards, json[QString("Dashboards")]);
    m_dashboards_isSet = !json[QString("Dashboards")].isNull() && m_dashboards_isValid;
}

QString OAIDescribeAssetBundleImportJobResponse_OverrideParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAssetBundleImportJobResponse_OverrideParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_override_configuration.isSet()) {
        obj.insert(QString("ResourceIdOverrideConfiguration"), ::OpenAPI::toJsonValue(m_resource_id_override_configuration));
    }
    if (m_vpc_connections.isSet()) {
        obj.insert(QString("VPCConnections"), ::OpenAPI::toJsonValue(m_vpc_connections));
    }
    if (m_refresh_schedules.isSet()) {
        obj.insert(QString("RefreshSchedules"), ::OpenAPI::toJsonValue(m_refresh_schedules));
    }
    if (m_data_sources.isSet()) {
        obj.insert(QString("DataSources"), ::OpenAPI::toJsonValue(m_data_sources));
    }
    if (m_data_sets.isSet()) {
        obj.insert(QString("DataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    if (m_themes.isSet()) {
        obj.insert(QString("Themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_analyses.isSet()) {
        obj.insert(QString("Analyses"), ::OpenAPI::toJsonValue(m_analyses));
    }
    if (m_dashboards.isSet()) {
        obj.insert(QString("Dashboards"), ::OpenAPI::toJsonValue(m_dashboards));
    }
    return obj;
}

OAIStartAssetBundleImportJob_request_OverrideParameters_ResourceIdOverrideConfiguration OAIDescribeAssetBundleImportJobResponse_OverrideParameters::getResourceIdOverrideConfiguration() const {
    return m_resource_id_override_configuration;
}
void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::setResourceIdOverrideConfiguration(const OAIStartAssetBundleImportJob_request_OverrideParameters_ResourceIdOverrideConfiguration &resource_id_override_configuration) {
    m_resource_id_override_configuration = resource_id_override_configuration;
    m_resource_id_override_configuration_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_resource_id_override_configuration_Set() const{
    return m_resource_id_override_configuration_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_resource_id_override_configuration_Valid() const{
    return m_resource_id_override_configuration_isValid;
}

QList OAIDescribeAssetBundleImportJobResponse_OverrideParameters::getVpcConnections() const {
    return m_vpc_connections;
}
void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::setVpcConnections(const QList &vpc_connections) {
    m_vpc_connections = vpc_connections;
    m_vpc_connections_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_vpc_connections_Set() const{
    return m_vpc_connections_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_vpc_connections_Valid() const{
    return m_vpc_connections_isValid;
}

QList OAIDescribeAssetBundleImportJobResponse_OverrideParameters::getRefreshSchedules() const {
    return m_refresh_schedules;
}
void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::setRefreshSchedules(const QList &refresh_schedules) {
    m_refresh_schedules = refresh_schedules;
    m_refresh_schedules_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_refresh_schedules_Set() const{
    return m_refresh_schedules_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_refresh_schedules_Valid() const{
    return m_refresh_schedules_isValid;
}

QList OAIDescribeAssetBundleImportJobResponse_OverrideParameters::getDataSources() const {
    return m_data_sources;
}
void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::setDataSources(const QList &data_sources) {
    m_data_sources = data_sources;
    m_data_sources_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_data_sources_Set() const{
    return m_data_sources_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_data_sources_Valid() const{
    return m_data_sources_isValid;
}

QList OAIDescribeAssetBundleImportJobResponse_OverrideParameters::getDataSets() const {
    return m_data_sets;
}
void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::setDataSets(const QList &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

QList OAIDescribeAssetBundleImportJobResponse_OverrideParameters::getThemes() const {
    return m_themes;
}
void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::setThemes(const QList &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_themes_Valid() const{
    return m_themes_isValid;
}

QList OAIDescribeAssetBundleImportJobResponse_OverrideParameters::getAnalyses() const {
    return m_analyses;
}
void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::setAnalyses(const QList &analyses) {
    m_analyses = analyses;
    m_analyses_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_analyses_Set() const{
    return m_analyses_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_analyses_Valid() const{
    return m_analyses_isValid;
}

QList OAIDescribeAssetBundleImportJobResponse_OverrideParameters::getDashboards() const {
    return m_dashboards;
}
void OAIDescribeAssetBundleImportJobResponse_OverrideParameters::setDashboards(const QList &dashboards) {
    m_dashboards = dashboards;
    m_dashboards_isSet = true;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_dashboards_Set() const{
    return m_dashboards_isSet;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::is_dashboards_Valid() const{
    return m_dashboards_isValid;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_override_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_schedules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboards.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAssetBundleImportJobResponse_OverrideParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
