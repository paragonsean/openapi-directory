/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBarChartAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBarChartAggregatedFieldWells::OAIBarChartAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBarChartAggregatedFieldWells::OAIBarChartAggregatedFieldWells() {
    this->initializeModel();
}

OAIBarChartAggregatedFieldWells::~OAIBarChartAggregatedFieldWells() {}

void OAIBarChartAggregatedFieldWells::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_small_multiples_isSet = false;
    m_small_multiples_isValid = false;
}

void OAIBarChartAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBarChartAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("Colors")]);
    m_colors_isSet = !json[QString("Colors")].isNull() && m_colors_isValid;

    m_small_multiples_isValid = ::OpenAPI::fromJsonValue(m_small_multiples, json[QString("SmallMultiples")]);
    m_small_multiples_isSet = !json[QString("SmallMultiples")].isNull() && m_small_multiples_isValid;
}

QString OAIBarChartAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBarChartAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_colors.isSet()) {
        obj.insert(QString("Colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_small_multiples.isSet()) {
        obj.insert(QString("SmallMultiples"), ::OpenAPI::toJsonValue(m_small_multiples));
    }
    return obj;
}

QList OAIBarChartAggregatedFieldWells::getCategory() const {
    return m_category;
}
void OAIBarChartAggregatedFieldWells::setCategory(const QList &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIBarChartAggregatedFieldWells::is_category_Set() const{
    return m_category_isSet;
}

bool OAIBarChartAggregatedFieldWells::is_category_Valid() const{
    return m_category_isValid;
}

QList OAIBarChartAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIBarChartAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIBarChartAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIBarChartAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

QList OAIBarChartAggregatedFieldWells::getColors() const {
    return m_colors;
}
void OAIBarChartAggregatedFieldWells::setColors(const QList &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIBarChartAggregatedFieldWells::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIBarChartAggregatedFieldWells::is_colors_Valid() const{
    return m_colors_isValid;
}

QList OAIBarChartAggregatedFieldWells::getSmallMultiples() const {
    return m_small_multiples;
}
void OAIBarChartAggregatedFieldWells::setSmallMultiples(const QList &small_multiples) {
    m_small_multiples = small_multiples;
    m_small_multiples_isSet = true;
}

bool OAIBarChartAggregatedFieldWells::is_small_multiples_Set() const{
    return m_small_multiples_isSet;
}

bool OAIBarChartAggregatedFieldWells::is_small_multiples_Valid() const{
    return m_small_multiples_isValid;
}

bool OAIBarChartAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBarChartAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
