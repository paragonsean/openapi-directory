/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingGradientColor_Color.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingGradientColor_Color::OAIConditionalFormattingGradientColor_Color(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingGradientColor_Color::OAIConditionalFormattingGradientColor_Color() {
    this->initializeModel();
}

OAIConditionalFormattingGradientColor_Color::~OAIConditionalFormattingGradientColor_Color() {}

void OAIConditionalFormattingGradientColor_Color::initializeModel() {

    m_stops_isSet = false;
    m_stops_isValid = false;
}

void OAIConditionalFormattingGradientColor_Color::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalFormattingGradientColor_Color::fromJsonObject(QJsonObject json) {

    m_stops_isValid = ::OpenAPI::fromJsonValue(m_stops, json[QString("Stops")]);
    m_stops_isSet = !json[QString("Stops")].isNull() && m_stops_isValid;
}

QString OAIConditionalFormattingGradientColor_Color::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalFormattingGradientColor_Color::asJsonObject() const {
    QJsonObject obj;
    if (m_stops.isSet()) {
        obj.insert(QString("Stops"), ::OpenAPI::toJsonValue(m_stops));
    }
    return obj;
}

QList OAIConditionalFormattingGradientColor_Color::getStops() const {
    return m_stops;
}
void OAIConditionalFormattingGradientColor_Color::setStops(const QList &stops) {
    m_stops = stops;
    m_stops_isSet = true;
}

bool OAIConditionalFormattingGradientColor_Color::is_stops_Set() const{
    return m_stops_isSet;
}

bool OAIConditionalFormattingGradientColor_Color::is_stops_Valid() const{
    return m_stops_isValid;
}

bool OAIConditionalFormattingGradientColor_Color::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stops.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalFormattingGradientColor_Color::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
