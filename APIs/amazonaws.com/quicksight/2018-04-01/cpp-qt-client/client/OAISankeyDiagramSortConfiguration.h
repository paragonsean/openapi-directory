/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISankeyDiagramSortConfiguration.h
 *
 * The sort configuration of a sankey diagram.
 */

#ifndef OAISankeyDiagramSortConfiguration_H
#define OAISankeyDiagramSortConfiguration_H

#include <QJsonObject>

#include "OAISankeyDiagramSortConfiguration_DestinationItemsLimit.h"
#include "OAISankeyDiagramSortConfiguration_SourceItemsLimit.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISankeyDiagramSortConfiguration_SourceItemsLimit;
class OAISankeyDiagramSortConfiguration_DestinationItemsLimit;

class OAISankeyDiagramSortConfiguration : public OAIObject {
public:
    OAISankeyDiagramSortConfiguration();
    OAISankeyDiagramSortConfiguration(QString json);
    ~OAISankeyDiagramSortConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getWeightSort() const;
    void setWeightSort(const QList &weight_sort);
    bool is_weight_sort_Set() const;
    bool is_weight_sort_Valid() const;

    OAISankeyDiagramSortConfiguration_SourceItemsLimit getSourceItemsLimit() const;
    void setSourceItemsLimit(const OAISankeyDiagramSortConfiguration_SourceItemsLimit &source_items_limit);
    bool is_source_items_limit_Set() const;
    bool is_source_items_limit_Valid() const;

    OAISankeyDiagramSortConfiguration_DestinationItemsLimit getDestinationItemsLimit() const;
    void setDestinationItemsLimit(const OAISankeyDiagramSortConfiguration_DestinationItemsLimit &destination_items_limit);
    bool is_destination_items_limit_Set() const;
    bool is_destination_items_limit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_weight_sort;
    bool m_weight_sort_isSet;
    bool m_weight_sort_isValid;

    OAISankeyDiagramSortConfiguration_SourceItemsLimit m_source_items_limit;
    bool m_source_items_limit_isSet;
    bool m_source_items_limit_isValid;

    OAISankeyDiagramSortConfiguration_DestinationItemsLimit m_destination_items_limit;
    bool m_destination_items_limit_isSet;
    bool m_destination_items_limit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISankeyDiagramSortConfiguration)

#endif // OAISankeyDiagramSortConfiguration_H
