/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFolderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFolderRequest::OAICreateFolderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFolderRequest::OAICreateFolderRequest() {
    this->initializeModel();
}

OAICreateFolderRequest::~OAICreateFolderRequest() {}

void OAICreateFolderRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_folder_type_isSet = false;
    m_folder_type_isValid = false;

    m_parent_folder_arn_isSet = false;
    m_parent_folder_arn_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateFolderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFolderRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_folder_type_isValid = ::OpenAPI::fromJsonValue(m_folder_type, json[QString("FolderType")]);
    m_folder_type_isSet = !json[QString("FolderType")].isNull() && m_folder_type_isValid;

    m_parent_folder_arn_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_arn, json[QString("ParentFolderArn")]);
    m_parent_folder_arn_isSet = !json[QString("ParentFolderArn")].isNull() && m_parent_folder_arn_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateFolderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFolderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_folder_type.isSet()) {
        obj.insert(QString("FolderType"), ::OpenAPI::toJsonValue(m_folder_type));
    }
    if (m_parent_folder_arn_isSet) {
        obj.insert(QString("ParentFolderArn"), ::OpenAPI::toJsonValue(m_parent_folder_arn));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateFolderRequest::getName() const {
    return m_name;
}
void OAICreateFolderRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFolderRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFolderRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIFolderType OAICreateFolderRequest::getFolderType() const {
    return m_folder_type;
}
void OAICreateFolderRequest::setFolderType(const OAIFolderType &folder_type) {
    m_folder_type = folder_type;
    m_folder_type_isSet = true;
}

bool OAICreateFolderRequest::is_folder_type_Set() const{
    return m_folder_type_isSet;
}

bool OAICreateFolderRequest::is_folder_type_Valid() const{
    return m_folder_type_isValid;
}

QString OAICreateFolderRequest::getParentFolderArn() const {
    return m_parent_folder_arn;
}
void OAICreateFolderRequest::setParentFolderArn(const QString &parent_folder_arn) {
    m_parent_folder_arn = parent_folder_arn;
    m_parent_folder_arn_isSet = true;
}

bool OAICreateFolderRequest::is_parent_folder_arn_Set() const{
    return m_parent_folder_arn_isSet;
}

bool OAICreateFolderRequest::is_parent_folder_arn_Valid() const{
    return m_parent_folder_arn_isValid;
}

QList OAICreateFolderRequest::getPermissions() const {
    return m_permissions;
}
void OAICreateFolderRequest::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateFolderRequest::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateFolderRequest::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QList OAICreateFolderRequest::getTags() const {
    return m_tags;
}
void OAICreateFolderRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFolderRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFolderRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateFolderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFolderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
