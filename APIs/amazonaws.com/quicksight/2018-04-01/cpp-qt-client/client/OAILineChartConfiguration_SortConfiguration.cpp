/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineChartConfiguration_SortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineChartConfiguration_SortConfiguration::OAILineChartConfiguration_SortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineChartConfiguration_SortConfiguration::OAILineChartConfiguration_SortConfiguration() {
    this->initializeModel();
}

OAILineChartConfiguration_SortConfiguration::~OAILineChartConfiguration_SortConfiguration() {}

void OAILineChartConfiguration_SortConfiguration::initializeModel() {

    m_category_sort_isSet = false;
    m_category_sort_isValid = false;

    m_category_items_limit_configuration_isSet = false;
    m_category_items_limit_configuration_isValid = false;

    m_color_items_limit_configuration_isSet = false;
    m_color_items_limit_configuration_isValid = false;

    m_small_multiples_sort_isSet = false;
    m_small_multiples_sort_isValid = false;

    m_small_multiples_limit_configuration_isSet = false;
    m_small_multiples_limit_configuration_isValid = false;
}

void OAILineChartConfiguration_SortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineChartConfiguration_SortConfiguration::fromJsonObject(QJsonObject json) {

    m_category_sort_isValid = ::OpenAPI::fromJsonValue(m_category_sort, json[QString("CategorySort")]);
    m_category_sort_isSet = !json[QString("CategorySort")].isNull() && m_category_sort_isValid;

    m_category_items_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_category_items_limit_configuration, json[QString("CategoryItemsLimitConfiguration")]);
    m_category_items_limit_configuration_isSet = !json[QString("CategoryItemsLimitConfiguration")].isNull() && m_category_items_limit_configuration_isValid;

    m_color_items_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_color_items_limit_configuration, json[QString("ColorItemsLimitConfiguration")]);
    m_color_items_limit_configuration_isSet = !json[QString("ColorItemsLimitConfiguration")].isNull() && m_color_items_limit_configuration_isValid;

    m_small_multiples_sort_isValid = ::OpenAPI::fromJsonValue(m_small_multiples_sort, json[QString("SmallMultiplesSort")]);
    m_small_multiples_sort_isSet = !json[QString("SmallMultiplesSort")].isNull() && m_small_multiples_sort_isValid;

    m_small_multiples_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_small_multiples_limit_configuration, json[QString("SmallMultiplesLimitConfiguration")]);
    m_small_multiples_limit_configuration_isSet = !json[QString("SmallMultiplesLimitConfiguration")].isNull() && m_small_multiples_limit_configuration_isValid;
}

QString OAILineChartConfiguration_SortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineChartConfiguration_SortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_category_sort.isSet()) {
        obj.insert(QString("CategorySort"), ::OpenAPI::toJsonValue(m_category_sort));
    }
    if (m_category_items_limit_configuration.isSet()) {
        obj.insert(QString("CategoryItemsLimitConfiguration"), ::OpenAPI::toJsonValue(m_category_items_limit_configuration));
    }
    if (m_color_items_limit_configuration.isSet()) {
        obj.insert(QString("ColorItemsLimitConfiguration"), ::OpenAPI::toJsonValue(m_color_items_limit_configuration));
    }
    if (m_small_multiples_sort.isSet()) {
        obj.insert(QString("SmallMultiplesSort"), ::OpenAPI::toJsonValue(m_small_multiples_sort));
    }
    if (m_small_multiples_limit_configuration.isSet()) {
        obj.insert(QString("SmallMultiplesLimitConfiguration"), ::OpenAPI::toJsonValue(m_small_multiples_limit_configuration));
    }
    return obj;
}

QList OAILineChartConfiguration_SortConfiguration::getCategorySort() const {
    return m_category_sort;
}
void OAILineChartConfiguration_SortConfiguration::setCategorySort(const QList &category_sort) {
    m_category_sort = category_sort;
    m_category_sort_isSet = true;
}

bool OAILineChartConfiguration_SortConfiguration::is_category_sort_Set() const{
    return m_category_sort_isSet;
}

bool OAILineChartConfiguration_SortConfiguration::is_category_sort_Valid() const{
    return m_category_sort_isValid;
}

OAILineChartSortConfiguration_CategoryItemsLimitConfiguration OAILineChartConfiguration_SortConfiguration::getCategoryItemsLimitConfiguration() const {
    return m_category_items_limit_configuration;
}
void OAILineChartConfiguration_SortConfiguration::setCategoryItemsLimitConfiguration(const OAILineChartSortConfiguration_CategoryItemsLimitConfiguration &category_items_limit_configuration) {
    m_category_items_limit_configuration = category_items_limit_configuration;
    m_category_items_limit_configuration_isSet = true;
}

bool OAILineChartConfiguration_SortConfiguration::is_category_items_limit_configuration_Set() const{
    return m_category_items_limit_configuration_isSet;
}

bool OAILineChartConfiguration_SortConfiguration::is_category_items_limit_configuration_Valid() const{
    return m_category_items_limit_configuration_isValid;
}

OAILineChartSortConfiguration_ColorItemsLimitConfiguration OAILineChartConfiguration_SortConfiguration::getColorItemsLimitConfiguration() const {
    return m_color_items_limit_configuration;
}
void OAILineChartConfiguration_SortConfiguration::setColorItemsLimitConfiguration(const OAILineChartSortConfiguration_ColorItemsLimitConfiguration &color_items_limit_configuration) {
    m_color_items_limit_configuration = color_items_limit_configuration;
    m_color_items_limit_configuration_isSet = true;
}

bool OAILineChartConfiguration_SortConfiguration::is_color_items_limit_configuration_Set() const{
    return m_color_items_limit_configuration_isSet;
}

bool OAILineChartConfiguration_SortConfiguration::is_color_items_limit_configuration_Valid() const{
    return m_color_items_limit_configuration_isValid;
}

QList OAILineChartConfiguration_SortConfiguration::getSmallMultiplesSort() const {
    return m_small_multiples_sort;
}
void OAILineChartConfiguration_SortConfiguration::setSmallMultiplesSort(const QList &small_multiples_sort) {
    m_small_multiples_sort = small_multiples_sort;
    m_small_multiples_sort_isSet = true;
}

bool OAILineChartConfiguration_SortConfiguration::is_small_multiples_sort_Set() const{
    return m_small_multiples_sort_isSet;
}

bool OAILineChartConfiguration_SortConfiguration::is_small_multiples_sort_Valid() const{
    return m_small_multiples_sort_isValid;
}

OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration OAILineChartConfiguration_SortConfiguration::getSmallMultiplesLimitConfiguration() const {
    return m_small_multiples_limit_configuration;
}
void OAILineChartConfiguration_SortConfiguration::setSmallMultiplesLimitConfiguration(const OAIBarChartSortConfiguration_SmallMultiplesLimitConfiguration &small_multiples_limit_configuration) {
    m_small_multiples_limit_configuration = small_multiples_limit_configuration;
    m_small_multiples_limit_configuration_isSet = true;
}

bool OAILineChartConfiguration_SortConfiguration::is_small_multiples_limit_configuration_Set() const{
    return m_small_multiples_limit_configuration_isSet;
}

bool OAILineChartConfiguration_SortConfiguration::is_small_multiples_limit_configuration_Valid() const{
    return m_small_multiples_limit_configuration_isValid;
}

bool OAILineChartConfiguration_SortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_items_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_items_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineChartConfiguration_SortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
