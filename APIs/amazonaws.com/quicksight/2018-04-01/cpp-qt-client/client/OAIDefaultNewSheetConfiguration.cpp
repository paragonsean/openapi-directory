/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultNewSheetConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultNewSheetConfiguration::OAIDefaultNewSheetConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultNewSheetConfiguration::OAIDefaultNewSheetConfiguration() {
    this->initializeModel();
}

OAIDefaultNewSheetConfiguration::~OAIDefaultNewSheetConfiguration() {}

void OAIDefaultNewSheetConfiguration::initializeModel() {

    m_interactive_layout_configuration_isSet = false;
    m_interactive_layout_configuration_isValid = false;

    m_paginated_layout_configuration_isSet = false;
    m_paginated_layout_configuration_isValid = false;

    m_sheet_content_type_isSet = false;
    m_sheet_content_type_isValid = false;
}

void OAIDefaultNewSheetConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultNewSheetConfiguration::fromJsonObject(QJsonObject json) {

    m_interactive_layout_configuration_isValid = ::OpenAPI::fromJsonValue(m_interactive_layout_configuration, json[QString("InteractiveLayoutConfiguration")]);
    m_interactive_layout_configuration_isSet = !json[QString("InteractiveLayoutConfiguration")].isNull() && m_interactive_layout_configuration_isValid;

    m_paginated_layout_configuration_isValid = ::OpenAPI::fromJsonValue(m_paginated_layout_configuration, json[QString("PaginatedLayoutConfiguration")]);
    m_paginated_layout_configuration_isSet = !json[QString("PaginatedLayoutConfiguration")].isNull() && m_paginated_layout_configuration_isValid;

    m_sheet_content_type_isValid = ::OpenAPI::fromJsonValue(m_sheet_content_type, json[QString("SheetContentType")]);
    m_sheet_content_type_isSet = !json[QString("SheetContentType")].isNull() && m_sheet_content_type_isValid;
}

QString OAIDefaultNewSheetConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultNewSheetConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_interactive_layout_configuration.isSet()) {
        obj.insert(QString("InteractiveLayoutConfiguration"), ::OpenAPI::toJsonValue(m_interactive_layout_configuration));
    }
    if (m_paginated_layout_configuration.isSet()) {
        obj.insert(QString("PaginatedLayoutConfiguration"), ::OpenAPI::toJsonValue(m_paginated_layout_configuration));
    }
    if (m_sheet_content_type.isSet()) {
        obj.insert(QString("SheetContentType"), ::OpenAPI::toJsonValue(m_sheet_content_type));
    }
    return obj;
}

OAIDefaultNewSheetConfiguration_InteractiveLayoutConfiguration OAIDefaultNewSheetConfiguration::getInteractiveLayoutConfiguration() const {
    return m_interactive_layout_configuration;
}
void OAIDefaultNewSheetConfiguration::setInteractiveLayoutConfiguration(const OAIDefaultNewSheetConfiguration_InteractiveLayoutConfiguration &interactive_layout_configuration) {
    m_interactive_layout_configuration = interactive_layout_configuration;
    m_interactive_layout_configuration_isSet = true;
}

bool OAIDefaultNewSheetConfiguration::is_interactive_layout_configuration_Set() const{
    return m_interactive_layout_configuration_isSet;
}

bool OAIDefaultNewSheetConfiguration::is_interactive_layout_configuration_Valid() const{
    return m_interactive_layout_configuration_isValid;
}

OAIDefaultNewSheetConfiguration_PaginatedLayoutConfiguration OAIDefaultNewSheetConfiguration::getPaginatedLayoutConfiguration() const {
    return m_paginated_layout_configuration;
}
void OAIDefaultNewSheetConfiguration::setPaginatedLayoutConfiguration(const OAIDefaultNewSheetConfiguration_PaginatedLayoutConfiguration &paginated_layout_configuration) {
    m_paginated_layout_configuration = paginated_layout_configuration;
    m_paginated_layout_configuration_isSet = true;
}

bool OAIDefaultNewSheetConfiguration::is_paginated_layout_configuration_Set() const{
    return m_paginated_layout_configuration_isSet;
}

bool OAIDefaultNewSheetConfiguration::is_paginated_layout_configuration_Valid() const{
    return m_paginated_layout_configuration_isValid;
}

OAISheetContentType OAIDefaultNewSheetConfiguration::getSheetContentType() const {
    return m_sheet_content_type;
}
void OAIDefaultNewSheetConfiguration::setSheetContentType(const OAISheetContentType &sheet_content_type) {
    m_sheet_content_type = sheet_content_type;
    m_sheet_content_type_isSet = true;
}

bool OAIDefaultNewSheetConfiguration::is_sheet_content_type_Set() const{
    return m_sheet_content_type_isSet;
}

bool OAIDefaultNewSheetConfiguration::is_sheet_content_type_Valid() const{
    return m_sheet_content_type_isValid;
}

bool OAIDefaultNewSheetConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interactive_layout_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paginated_layout_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultNewSheetConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
