/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTemplateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTemplateResponse::OAIDescribeTemplateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTemplateResponse::OAIDescribeTemplateResponse() {
    this->initializeModel();
}

OAIDescribeTemplateResponse::~OAIDescribeTemplateResponse() {}

void OAIDescribeTemplateResponse::initializeModel() {

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDescribeTemplateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTemplateResponse::fromJsonObject(QJsonObject json) {

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("Template")]);
    m_r_template_isSet = !json[QString("Template")].isNull() && m_r_template_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIDescribeTemplateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTemplateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_r_template.isSet()) {
        obj.insert(QString("Template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIDescribeTemplateResponse_Template OAIDescribeTemplateResponse::getRTemplate() const {
    return m_r_template;
}
void OAIDescribeTemplateResponse::setRTemplate(const OAIDescribeTemplateResponse_Template &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIDescribeTemplateResponse::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIDescribeTemplateResponse::is_r_template_Valid() const{
    return m_r_template_isValid;
}

qint32 OAIDescribeTemplateResponse::getStatus() const {
    return m_status;
}
void OAIDescribeTemplateResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeTemplateResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeTemplateResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeTemplateResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeTemplateResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeTemplateResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeTemplateResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDescribeTemplateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTemplateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
