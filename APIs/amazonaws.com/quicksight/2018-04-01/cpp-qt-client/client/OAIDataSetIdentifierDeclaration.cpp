/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetIdentifierDeclaration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetIdentifierDeclaration::OAIDataSetIdentifierDeclaration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetIdentifierDeclaration::OAIDataSetIdentifierDeclaration() {
    this->initializeModel();
}

OAIDataSetIdentifierDeclaration::~OAIDataSetIdentifierDeclaration() {}

void OAIDataSetIdentifierDeclaration::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_data_set_arn_isSet = false;
    m_data_set_arn_isValid = false;
}

void OAIDataSetIdentifierDeclaration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetIdentifierDeclaration::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;

    m_data_set_arn_isValid = ::OpenAPI::fromJsonValue(m_data_set_arn, json[QString("DataSetArn")]);
    m_data_set_arn_isSet = !json[QString("DataSetArn")].isNull() && m_data_set_arn_isValid;
}

QString OAIDataSetIdentifierDeclaration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetIdentifierDeclaration::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_data_set_arn_isSet) {
        obj.insert(QString("DataSetArn"), ::OpenAPI::toJsonValue(m_data_set_arn));
    }
    return obj;
}

QString OAIDataSetIdentifierDeclaration::getIdentifier() const {
    return m_identifier;
}
void OAIDataSetIdentifierDeclaration::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIDataSetIdentifierDeclaration::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIDataSetIdentifierDeclaration::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIDataSetIdentifierDeclaration::getDataSetArn() const {
    return m_data_set_arn;
}
void OAIDataSetIdentifierDeclaration::setDataSetArn(const QString &data_set_arn) {
    m_data_set_arn = data_set_arn;
    m_data_set_arn_isSet = true;
}

bool OAIDataSetIdentifierDeclaration::is_data_set_arn_Set() const{
    return m_data_set_arn_isSet;
}

bool OAIDataSetIdentifierDeclaration::is_data_set_arn_Valid() const{
    return m_data_set_arn_isValid;
}

bool OAIDataSetIdentifierDeclaration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetIdentifierDeclaration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && m_data_set_arn_isValid && true;
}

} // namespace OpenAPI
