/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputation_TopBottomMovers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputation_TopBottomMovers::OAIComputation_TopBottomMovers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputation_TopBottomMovers::OAIComputation_TopBottomMovers() {
    this->initializeModel();
}

OAIComputation_TopBottomMovers::~OAIComputation_TopBottomMovers() {}

void OAIComputation_TopBottomMovers::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_mover_size_isSet = false;
    m_mover_size_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIComputation_TopBottomMovers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputation_TopBottomMovers::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_mover_size_isValid = ::OpenAPI::fromJsonValue(m_mover_size, json[QString("MoverSize")]);
    m_mover_size_isSet = !json[QString("MoverSize")].isNull() && m_mover_size_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIComputation_TopBottomMovers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputation_TopBottomMovers::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time.isSet()) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_mover_size_isSet) {
        obj.insert(QString("MoverSize"), ::OpenAPI::toJsonValue(m_mover_size));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIComputation_TopBottomMovers::getComputationId() const {
    return m_computation_id;
}
void OAIComputation_TopBottomMovers::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIComputation_TopBottomMovers::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIComputation_TopBottomMovers::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIComputation_TopBottomMovers::getName() const {
    return m_name;
}
void OAIComputation_TopBottomMovers::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComputation_TopBottomMovers::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComputation_TopBottomMovers::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomMoversComputation_Time OAIComputation_TopBottomMovers::getTime() const {
    return m_time;
}
void OAIComputation_TopBottomMovers::setTime(const OAITopBottomMoversComputation_Time &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIComputation_TopBottomMovers::is_time_Set() const{
    return m_time_isSet;
}

bool OAIComputation_TopBottomMovers::is_time_Valid() const{
    return m_time_isValid;
}

OAITopBottomRankedComputation_Category OAIComputation_TopBottomMovers::getCategory() const {
    return m_category;
}
void OAIComputation_TopBottomMovers::setCategory(const OAITopBottomRankedComputation_Category &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIComputation_TopBottomMovers::is_category_Set() const{
    return m_category_isSet;
}

bool OAIComputation_TopBottomMovers::is_category_Valid() const{
    return m_category_isValid;
}

OAITopBottomRankedComputation_Value OAIComputation_TopBottomMovers::getValue() const {
    return m_value;
}
void OAIComputation_TopBottomMovers::setValue(const OAITopBottomRankedComputation_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIComputation_TopBottomMovers::is_value_Set() const{
    return m_value_isSet;
}

bool OAIComputation_TopBottomMovers::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAIComputation_TopBottomMovers::getMoverSize() const {
    return m_mover_size;
}
void OAIComputation_TopBottomMovers::setMoverSize(const qint32 &mover_size) {
    m_mover_size = mover_size;
    m_mover_size_isSet = true;
}

bool OAIComputation_TopBottomMovers::is_mover_size_Set() const{
    return m_mover_size_isSet;
}

bool OAIComputation_TopBottomMovers::is_mover_size_Valid() const{
    return m_mover_size_isValid;
}

OAITopBottomSortOrder OAIComputation_TopBottomMovers::getSortOrder() const {
    return m_sort_order;
}
void OAIComputation_TopBottomMovers::setSortOrder(const OAITopBottomSortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIComputation_TopBottomMovers::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIComputation_TopBottomMovers::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAITopBottomComputationType OAIComputation_TopBottomMovers::getType() const {
    return m_type;
}
void OAIComputation_TopBottomMovers::setType(const OAITopBottomComputationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIComputation_TopBottomMovers::is_type_Set() const{
    return m_type_isSet;
}

bool OAIComputation_TopBottomMovers::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIComputation_TopBottomMovers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mover_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputation_TopBottomMovers::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_time_isValid && m_category_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
