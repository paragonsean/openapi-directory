/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhatIfPointScenario.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhatIfPointScenario::OAIWhatIfPointScenario(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhatIfPointScenario::OAIWhatIfPointScenario() {
    this->initializeModel();
}

OAIWhatIfPointScenario::~OAIWhatIfPointScenario() {}

void OAIWhatIfPointScenario::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIWhatIfPointScenario::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhatIfPointScenario::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIWhatIfPointScenario::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhatIfPointScenario::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QDateTime OAIWhatIfPointScenario::getDate() const {
    return m_date;
}
void OAIWhatIfPointScenario::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIWhatIfPointScenario::is_date_Set() const{
    return m_date_isSet;
}

bool OAIWhatIfPointScenario::is_date_Valid() const{
    return m_date_isValid;
}

double OAIWhatIfPointScenario::getValue() const {
    return m_value;
}
void OAIWhatIfPointScenario::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIWhatIfPointScenario::is_value_Set() const{
    return m_value_isSet;
}

bool OAIWhatIfPointScenario::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIWhatIfPointScenario::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhatIfPointScenario::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
