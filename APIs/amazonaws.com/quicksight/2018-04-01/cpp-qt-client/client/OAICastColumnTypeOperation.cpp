/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICastColumnTypeOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICastColumnTypeOperation::OAICastColumnTypeOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICastColumnTypeOperation::OAICastColumnTypeOperation() {
    this->initializeModel();
}

OAICastColumnTypeOperation::~OAICastColumnTypeOperation() {}

void OAICastColumnTypeOperation::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_new_column_type_isSet = false;
    m_new_column_type_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAICastColumnTypeOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICastColumnTypeOperation::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_new_column_type_isValid = ::OpenAPI::fromJsonValue(m_new_column_type, json[QString("NewColumnType")]);
    m_new_column_type_isSet = !json[QString("NewColumnType")].isNull() && m_new_column_type_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;
}

QString OAICastColumnTypeOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICastColumnTypeOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_new_column_type.isSet()) {
        obj.insert(QString("NewColumnType"), ::OpenAPI::toJsonValue(m_new_column_type));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

QString OAICastColumnTypeOperation::getColumnName() const {
    return m_column_name;
}
void OAICastColumnTypeOperation::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAICastColumnTypeOperation::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAICastColumnTypeOperation::is_column_name_Valid() const{
    return m_column_name_isValid;
}

OAIColumnDataType OAICastColumnTypeOperation::getNewColumnType() const {
    return m_new_column_type;
}
void OAICastColumnTypeOperation::setNewColumnType(const OAIColumnDataType &new_column_type) {
    m_new_column_type = new_column_type;
    m_new_column_type_isSet = true;
}

bool OAICastColumnTypeOperation::is_new_column_type_Set() const{
    return m_new_column_type_isSet;
}

bool OAICastColumnTypeOperation::is_new_column_type_Valid() const{
    return m_new_column_type_isValid;
}

QString OAICastColumnTypeOperation::getFormat() const {
    return m_format;
}
void OAICastColumnTypeOperation::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICastColumnTypeOperation::is_format_Set() const{
    return m_format_isSet;
}

bool OAICastColumnTypeOperation::is_format_Valid() const{
    return m_format_isValid;
}

bool OAICastColumnTypeOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_column_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICastColumnTypeOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_new_column_type_isValid && true;
}

} // namespace OpenAPI
