/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridLayoutElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridLayoutElement::OAIGridLayoutElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridLayoutElement::OAIGridLayoutElement() {
    this->initializeModel();
}

OAIGridLayoutElement::~OAIGridLayoutElement() {}

void OAIGridLayoutElement::initializeModel() {

    m_element_id_isSet = false;
    m_element_id_isValid = false;

    m_element_type_isSet = false;
    m_element_type_isValid = false;

    m_column_index_isSet = false;
    m_column_index_isValid = false;

    m_column_span_isSet = false;
    m_column_span_isValid = false;

    m_row_index_isSet = false;
    m_row_index_isValid = false;

    m_row_span_isSet = false;
    m_row_span_isValid = false;
}

void OAIGridLayoutElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridLayoutElement::fromJsonObject(QJsonObject json) {

    m_element_id_isValid = ::OpenAPI::fromJsonValue(m_element_id, json[QString("ElementId")]);
    m_element_id_isSet = !json[QString("ElementId")].isNull() && m_element_id_isValid;

    m_element_type_isValid = ::OpenAPI::fromJsonValue(m_element_type, json[QString("ElementType")]);
    m_element_type_isSet = !json[QString("ElementType")].isNull() && m_element_type_isValid;

    m_column_index_isValid = ::OpenAPI::fromJsonValue(m_column_index, json[QString("ColumnIndex")]);
    m_column_index_isSet = !json[QString("ColumnIndex")].isNull() && m_column_index_isValid;

    m_column_span_isValid = ::OpenAPI::fromJsonValue(m_column_span, json[QString("ColumnSpan")]);
    m_column_span_isSet = !json[QString("ColumnSpan")].isNull() && m_column_span_isValid;

    m_row_index_isValid = ::OpenAPI::fromJsonValue(m_row_index, json[QString("RowIndex")]);
    m_row_index_isSet = !json[QString("RowIndex")].isNull() && m_row_index_isValid;

    m_row_span_isValid = ::OpenAPI::fromJsonValue(m_row_span, json[QString("RowSpan")]);
    m_row_span_isSet = !json[QString("RowSpan")].isNull() && m_row_span_isValid;
}

QString OAIGridLayoutElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridLayoutElement::asJsonObject() const {
    QJsonObject obj;
    if (m_element_id_isSet) {
        obj.insert(QString("ElementId"), ::OpenAPI::toJsonValue(m_element_id));
    }
    if (m_element_type.isSet()) {
        obj.insert(QString("ElementType"), ::OpenAPI::toJsonValue(m_element_type));
    }
    if (m_column_index_isSet) {
        obj.insert(QString("ColumnIndex"), ::OpenAPI::toJsonValue(m_column_index));
    }
    if (m_column_span_isSet) {
        obj.insert(QString("ColumnSpan"), ::OpenAPI::toJsonValue(m_column_span));
    }
    if (m_row_index_isSet) {
        obj.insert(QString("RowIndex"), ::OpenAPI::toJsonValue(m_row_index));
    }
    if (m_row_span_isSet) {
        obj.insert(QString("RowSpan"), ::OpenAPI::toJsonValue(m_row_span));
    }
    return obj;
}

QString OAIGridLayoutElement::getElementId() const {
    return m_element_id;
}
void OAIGridLayoutElement::setElementId(const QString &element_id) {
    m_element_id = element_id;
    m_element_id_isSet = true;
}

bool OAIGridLayoutElement::is_element_id_Set() const{
    return m_element_id_isSet;
}

bool OAIGridLayoutElement::is_element_id_Valid() const{
    return m_element_id_isValid;
}

OAILayoutElementType OAIGridLayoutElement::getElementType() const {
    return m_element_type;
}
void OAIGridLayoutElement::setElementType(const OAILayoutElementType &element_type) {
    m_element_type = element_type;
    m_element_type_isSet = true;
}

bool OAIGridLayoutElement::is_element_type_Set() const{
    return m_element_type_isSet;
}

bool OAIGridLayoutElement::is_element_type_Valid() const{
    return m_element_type_isValid;
}

qint32 OAIGridLayoutElement::getColumnIndex() const {
    return m_column_index;
}
void OAIGridLayoutElement::setColumnIndex(const qint32 &column_index) {
    m_column_index = column_index;
    m_column_index_isSet = true;
}

bool OAIGridLayoutElement::is_column_index_Set() const{
    return m_column_index_isSet;
}

bool OAIGridLayoutElement::is_column_index_Valid() const{
    return m_column_index_isValid;
}

qint32 OAIGridLayoutElement::getColumnSpan() const {
    return m_column_span;
}
void OAIGridLayoutElement::setColumnSpan(const qint32 &column_span) {
    m_column_span = column_span;
    m_column_span_isSet = true;
}

bool OAIGridLayoutElement::is_column_span_Set() const{
    return m_column_span_isSet;
}

bool OAIGridLayoutElement::is_column_span_Valid() const{
    return m_column_span_isValid;
}

qint32 OAIGridLayoutElement::getRowIndex() const {
    return m_row_index;
}
void OAIGridLayoutElement::setRowIndex(const qint32 &row_index) {
    m_row_index = row_index;
    m_row_index_isSet = true;
}

bool OAIGridLayoutElement::is_row_index_Set() const{
    return m_row_index_isSet;
}

bool OAIGridLayoutElement::is_row_index_Valid() const{
    return m_row_index_isValid;
}

qint32 OAIGridLayoutElement::getRowSpan() const {
    return m_row_span;
}
void OAIGridLayoutElement::setRowSpan(const qint32 &row_span) {
    m_row_span = row_span;
    m_row_span_isSet = true;
}

bool OAIGridLayoutElement::is_row_span_Set() const{
    return m_row_span_isSet;
}

bool OAIGridLayoutElement::is_row_span_Valid() const{
    return m_row_span_isValid;
}

bool OAIGridLayoutElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_span_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridLayoutElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_element_id_isValid && m_element_type_isValid && m_column_span_isValid && m_row_span_isValid && true;
}

} // namespace OpenAPI
