/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAnalysisResponse_Analysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAnalysisResponse_Analysis::OAIDescribeAnalysisResponse_Analysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAnalysisResponse_Analysis::OAIDescribeAnalysisResponse_Analysis() {
    this->initializeModel();
}

OAIDescribeAnalysisResponse_Analysis::~OAIDescribeAnalysisResponse_Analysis() {}

void OAIDescribeAnalysisResponse_Analysis::initializeModel() {

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_data_set_arns_isSet = false;
    m_data_set_arns_isValid = false;

    m_theme_arn_isSet = false;
    m_theme_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_sheets_isSet = false;
    m_sheets_isValid = false;
}

void OAIDescribeAnalysisResponse_Analysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAnalysisResponse_Analysis::fromJsonObject(QJsonObject json) {

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_data_set_arns_isValid = ::OpenAPI::fromJsonValue(m_data_set_arns, json[QString("DataSetArns")]);
    m_data_set_arns_isSet = !json[QString("DataSetArns")].isNull() && m_data_set_arns_isValid;

    m_theme_arn_isValid = ::OpenAPI::fromJsonValue(m_theme_arn, json[QString("ThemeArn")]);
    m_theme_arn_isSet = !json[QString("ThemeArn")].isNull() && m_theme_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_sheets_isValid = ::OpenAPI::fromJsonValue(m_sheets, json[QString("Sheets")]);
    m_sheets_isSet = !json[QString("Sheets")].isNull() && m_sheets_isValid;
}

QString OAIDescribeAnalysisResponse_Analysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAnalysisResponse_Analysis::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_data_set_arns.isSet()) {
        obj.insert(QString("DataSetArns"), ::OpenAPI::toJsonValue(m_data_set_arns));
    }
    if (m_theme_arn_isSet) {
        obj.insert(QString("ThemeArn"), ::OpenAPI::toJsonValue(m_theme_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_sheets.isSet()) {
        obj.insert(QString("Sheets"), ::OpenAPI::toJsonValue(m_sheets));
    }
    return obj;
}

QString OAIDescribeAnalysisResponse_Analysis::getAnalysisId() const {
    return m_analysis_id;
}
void OAIDescribeAnalysisResponse_Analysis::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

QString OAIDescribeAnalysisResponse_Analysis::getArn() const {
    return m_arn;
}
void OAIDescribeAnalysisResponse_Analysis::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeAnalysisResponse_Analysis::getName() const {
    return m_name;
}
void OAIDescribeAnalysisResponse_Analysis::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_name_Valid() const{
    return m_name_isValid;
}

OAIResourceStatus OAIDescribeAnalysisResponse_Analysis::getStatus() const {
    return m_status;
}
void OAIDescribeAnalysisResponse_Analysis::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIDescribeAnalysisResponse_Analysis::getErrors() const {
    return m_errors;
}
void OAIDescribeAnalysisResponse_Analysis::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_errors_Valid() const{
    return m_errors_isValid;
}

QList OAIDescribeAnalysisResponse_Analysis::getDataSetArns() const {
    return m_data_set_arns;
}
void OAIDescribeAnalysisResponse_Analysis::setDataSetArns(const QList &data_set_arns) {
    m_data_set_arns = data_set_arns;
    m_data_set_arns_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_data_set_arns_Set() const{
    return m_data_set_arns_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_data_set_arns_Valid() const{
    return m_data_set_arns_isValid;
}

QString OAIDescribeAnalysisResponse_Analysis::getThemeArn() const {
    return m_theme_arn;
}
void OAIDescribeAnalysisResponse_Analysis::setThemeArn(const QString &theme_arn) {
    m_theme_arn = theme_arn;
    m_theme_arn_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_theme_arn_Set() const{
    return m_theme_arn_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_theme_arn_Valid() const{
    return m_theme_arn_isValid;
}

QDateTime OAIDescribeAnalysisResponse_Analysis::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeAnalysisResponse_Analysis::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDescribeAnalysisResponse_Analysis::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDescribeAnalysisResponse_Analysis::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList OAIDescribeAnalysisResponse_Analysis::getSheets() const {
    return m_sheets;
}
void OAIDescribeAnalysisResponse_Analysis::setSheets(const QList &sheets) {
    m_sheets = sheets;
    m_sheets_isSet = true;
}

bool OAIDescribeAnalysisResponse_Analysis::is_sheets_Set() const{
    return m_sheets_isSet;
}

bool OAIDescribeAnalysisResponse_Analysis::is_sheets_Valid() const{
    return m_sheets_isValid;
}

bool OAIDescribeAnalysisResponse_Analysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAnalysisResponse_Analysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
