/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVPCConnectionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVPCConnectionRequest::OAIUpdateVPCConnectionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVPCConnectionRequest::OAIUpdateVPCConnectionRequest() {
    this->initializeModel();
}

OAIUpdateVPCConnectionRequest::~OAIUpdateVPCConnectionRequest() {}

void OAIUpdateVPCConnectionRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_dns_resolvers_isSet = false;
    m_dns_resolvers_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIUpdateVPCConnectionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVPCConnectionRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_dns_resolvers_isValid = ::OpenAPI::fromJsonValue(m_dns_resolvers, json[QString("DnsResolvers")]);
    m_dns_resolvers_isSet = !json[QString("DnsResolvers")].isNull() && m_dns_resolvers_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIUpdateVPCConnectionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVPCConnectionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_dns_resolvers.isSet()) {
        obj.insert(QString("DnsResolvers"), ::OpenAPI::toJsonValue(m_dns_resolvers));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIUpdateVPCConnectionRequest::getName() const {
    return m_name;
}
void OAIUpdateVPCConnectionRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateVPCConnectionRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateVPCConnectionRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIUpdateVPCConnectionRequest::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIUpdateVPCConnectionRequest::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIUpdateVPCConnectionRequest::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIUpdateVPCConnectionRequest::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList OAIUpdateVPCConnectionRequest::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIUpdateVPCConnectionRequest::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIUpdateVPCConnectionRequest::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIUpdateVPCConnectionRequest::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QList OAIUpdateVPCConnectionRequest::getDnsResolvers() const {
    return m_dns_resolvers;
}
void OAIUpdateVPCConnectionRequest::setDnsResolvers(const QList &dns_resolvers) {
    m_dns_resolvers = dns_resolvers;
    m_dns_resolvers_isSet = true;
}

bool OAIUpdateVPCConnectionRequest::is_dns_resolvers_Set() const{
    return m_dns_resolvers_isSet;
}

bool OAIUpdateVPCConnectionRequest::is_dns_resolvers_Valid() const{
    return m_dns_resolvers_isValid;
}

QString OAIUpdateVPCConnectionRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateVPCConnectionRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateVPCConnectionRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateVPCConnectionRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIUpdateVPCConnectionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_resolvers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVPCConnectionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_subnet_ids_isValid && m_security_group_ids_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
