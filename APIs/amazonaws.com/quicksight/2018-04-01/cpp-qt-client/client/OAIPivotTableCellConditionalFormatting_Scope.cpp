/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableCellConditionalFormatting_Scope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableCellConditionalFormatting_Scope::OAIPivotTableCellConditionalFormatting_Scope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableCellConditionalFormatting_Scope::OAIPivotTableCellConditionalFormatting_Scope() {
    this->initializeModel();
}

OAIPivotTableCellConditionalFormatting_Scope::~OAIPivotTableCellConditionalFormatting_Scope() {}

void OAIPivotTableCellConditionalFormatting_Scope::initializeModel() {

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIPivotTableCellConditionalFormatting_Scope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableCellConditionalFormatting_Scope::fromJsonObject(QJsonObject json) {

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;
}

QString OAIPivotTableCellConditionalFormatting_Scope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableCellConditionalFormatting_Scope::asJsonObject() const {
    QJsonObject obj;
    if (m_role.isSet()) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

OAIPivotTableConditionalFormattingScopeRole OAIPivotTableCellConditionalFormatting_Scope::getRole() const {
    return m_role;
}
void OAIPivotTableCellConditionalFormatting_Scope::setRole(const OAIPivotTableConditionalFormattingScopeRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPivotTableCellConditionalFormatting_Scope::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPivotTableCellConditionalFormatting_Scope::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIPivotTableCellConditionalFormatting_Scope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableCellConditionalFormatting_Scope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
