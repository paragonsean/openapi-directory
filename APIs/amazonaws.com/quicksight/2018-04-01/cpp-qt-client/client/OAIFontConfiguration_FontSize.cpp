/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFontConfiguration_FontSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFontConfiguration_FontSize::OAIFontConfiguration_FontSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFontConfiguration_FontSize::OAIFontConfiguration_FontSize() {
    this->initializeModel();
}

OAIFontConfiguration_FontSize::~OAIFontConfiguration_FontSize() {}

void OAIFontConfiguration_FontSize::initializeModel() {

    m_relative_isSet = false;
    m_relative_isValid = false;
}

void OAIFontConfiguration_FontSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFontConfiguration_FontSize::fromJsonObject(QJsonObject json) {

    m_relative_isValid = ::OpenAPI::fromJsonValue(m_relative, json[QString("Relative")]);
    m_relative_isSet = !json[QString("Relative")].isNull() && m_relative_isValid;
}

QString OAIFontConfiguration_FontSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFontConfiguration_FontSize::asJsonObject() const {
    QJsonObject obj;
    if (m_relative.isSet()) {
        obj.insert(QString("Relative"), ::OpenAPI::toJsonValue(m_relative));
    }
    return obj;
}

OAIRelativeFontSize OAIFontConfiguration_FontSize::getRelative() const {
    return m_relative;
}
void OAIFontConfiguration_FontSize::setRelative(const OAIRelativeFontSize &relative) {
    m_relative = relative;
    m_relative_isSet = true;
}

bool OAIFontConfiguration_FontSize::is_relative_Set() const{
    return m_relative_isSet;
}

bool OAIFontConfiguration_FontSize::is_relative_Valid() const{
    return m_relative_isValid;
}

bool OAIFontConfiguration_FontSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_relative.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFontConfiguration_FontSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
