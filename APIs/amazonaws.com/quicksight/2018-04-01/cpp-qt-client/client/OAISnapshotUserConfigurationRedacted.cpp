/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotUserConfigurationRedacted.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotUserConfigurationRedacted::OAISnapshotUserConfigurationRedacted(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotUserConfigurationRedacted::OAISnapshotUserConfigurationRedacted() {
    this->initializeModel();
}

OAISnapshotUserConfigurationRedacted::~OAISnapshotUserConfigurationRedacted() {}

void OAISnapshotUserConfigurationRedacted::initializeModel() {

    m_anonymous_users_isSet = false;
    m_anonymous_users_isValid = false;
}

void OAISnapshotUserConfigurationRedacted::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotUserConfigurationRedacted::fromJsonObject(QJsonObject json) {

    m_anonymous_users_isValid = ::OpenAPI::fromJsonValue(m_anonymous_users, json[QString("AnonymousUsers")]);
    m_anonymous_users_isSet = !json[QString("AnonymousUsers")].isNull() && m_anonymous_users_isValid;
}

QString OAISnapshotUserConfigurationRedacted::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotUserConfigurationRedacted::asJsonObject() const {
    QJsonObject obj;
    if (m_anonymous_users.isSet()) {
        obj.insert(QString("AnonymousUsers"), ::OpenAPI::toJsonValue(m_anonymous_users));
    }
    return obj;
}

QList OAISnapshotUserConfigurationRedacted::getAnonymousUsers() const {
    return m_anonymous_users;
}
void OAISnapshotUserConfigurationRedacted::setAnonymousUsers(const QList &anonymous_users) {
    m_anonymous_users = anonymous_users;
    m_anonymous_users_isSet = true;
}

bool OAISnapshotUserConfigurationRedacted::is_anonymous_users_Set() const{
    return m_anonymous_users_isSet;
}

bool OAISnapshotUserConfigurationRedacted::is_anonymous_users_Valid() const{
    return m_anonymous_users_isValid;
}

bool OAISnapshotUserConfigurationRedacted::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anonymous_users.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotUserConfigurationRedacted::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
