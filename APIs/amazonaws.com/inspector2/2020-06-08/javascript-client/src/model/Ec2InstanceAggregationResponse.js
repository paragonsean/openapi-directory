/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmiAggregationResponseSeverityCounts from './AmiAggregationResponseSeverityCounts';

/**
 * The Ec2InstanceAggregationResponse model module.
 * @module model/Ec2InstanceAggregationResponse
 * @version 2020-06-08
 */
class Ec2InstanceAggregationResponse {
    /**
     * Constructs a new <code>Ec2InstanceAggregationResponse</code>.
     * A response that contains the results of a finding aggregation by Amazon EC2 instance.
     * @alias module:model/Ec2InstanceAggregationResponse
     * @param instanceId {String} 
     */
    constructor(instanceId) { 
        
        Ec2InstanceAggregationResponse.initialize(this, instanceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, instanceId) { 
        obj['instanceId'] = instanceId;
    }

    /**
     * Constructs a <code>Ec2InstanceAggregationResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Ec2InstanceAggregationResponse} obj Optional instance to populate.
     * @return {module:model/Ec2InstanceAggregationResponse} The populated <code>Ec2InstanceAggregationResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Ec2InstanceAggregationResponse();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('ami')) {
                obj['ami'] = ApiClient.convertToType(data['ami'], 'String');
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('instanceTags')) {
                obj['instanceTags'] = ApiClient.convertToType(data['instanceTags'], Object);
            }
            if (data.hasOwnProperty('networkFindings')) {
                obj['networkFindings'] = ApiClient.convertToType(data['networkFindings'], 'Number');
            }
            if (data.hasOwnProperty('operatingSystem')) {
                obj['operatingSystem'] = ApiClient.convertToType(data['operatingSystem'], 'String');
            }
            if (data.hasOwnProperty('severityCounts')) {
                obj['severityCounts'] = AmiAggregationResponseSeverityCounts.constructFromObject(data['severityCounts']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Ec2InstanceAggregationResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Ec2InstanceAggregationResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Ec2InstanceAggregationResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accountId`
        if (data['accountId']) { // data not null
          String.validateJSON(data['accountId']);
        }
        // validate the optional field `ami`
        if (data['ami']) { // data not null
          String.validateJSON(data['ami']);
        }
        // validate the optional field `instanceId`
        if (data['instanceId']) { // data not null
          String.validateJSON(data['instanceId']);
        }
        // validate the optional field `instanceTags`
        if (data['instanceTags']) { // data not null
          Object.validateJSON(data['instanceTags']);
        }
        // validate the optional field `networkFindings`
        if (data['networkFindings']) { // data not null
          Number.validateJSON(data['networkFindings']);
        }
        // validate the optional field `operatingSystem`
        if (data['operatingSystem']) { // data not null
          String.validateJSON(data['operatingSystem']);
        }
        // validate the optional field `severityCounts`
        if (data['severityCounts']) { // data not null
          AmiAggregationResponseSeverityCounts.validateJSON(data['severityCounts']);
        }

        return true;
    }


}

Ec2InstanceAggregationResponse.RequiredProperties = ["instanceId"];

/**
 * @member {String} accountId
 */
Ec2InstanceAggregationResponse.prototype['accountId'] = undefined;

/**
 * @member {String} ami
 */
Ec2InstanceAggregationResponse.prototype['ami'] = undefined;

/**
 * @member {String} instanceId
 */
Ec2InstanceAggregationResponse.prototype['instanceId'] = undefined;

/**
 * @member {Object} instanceTags
 */
Ec2InstanceAggregationResponse.prototype['instanceTags'] = undefined;

/**
 * @member {Number} networkFindings
 */
Ec2InstanceAggregationResponse.prototype['networkFindings'] = undefined;

/**
 * @member {String} operatingSystem
 */
Ec2InstanceAggregationResponse.prototype['operatingSystem'] = undefined;

/**
 * @member {module:model/AmiAggregationResponseSeverityCounts} severityCounts
 */
Ec2InstanceAggregationResponse.prototype['severityCounts'] = undefined;






export default Ec2InstanceAggregationResponse;

