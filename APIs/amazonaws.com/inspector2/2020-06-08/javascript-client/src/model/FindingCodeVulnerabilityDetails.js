/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodeVulnerabilityDetails from './CodeVulnerabilityDetails';
import CodeVulnerabilityDetailsFilePath from './CodeVulnerabilityDetailsFilePath';

/**
 * The FindingCodeVulnerabilityDetails model module.
 * @module model/FindingCodeVulnerabilityDetails
 * @version 2020-06-08
 */
class FindingCodeVulnerabilityDetails {
    /**
     * Constructs a new <code>FindingCodeVulnerabilityDetails</code>.
     * @alias module:model/FindingCodeVulnerabilityDetails
     * @implements module:model/CodeVulnerabilityDetails
     * @param cwes {Array} 
     * @param detectorId {String} 
     * @param detectorName {String} 
     * @param filePath {module:model/CodeVulnerabilityDetailsFilePath} 
     */
    constructor(cwes, detectorId, detectorName, filePath) { 
        CodeVulnerabilityDetails.initialize(this, cwes, detectorId, detectorName, filePath);
        FindingCodeVulnerabilityDetails.initialize(this, cwes, detectorId, detectorName, filePath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cwes, detectorId, detectorName, filePath) { 
        obj['cwes'] = cwes;
        obj['detectorId'] = detectorId;
        obj['detectorName'] = detectorName;
        obj['filePath'] = filePath;
    }

    /**
     * Constructs a <code>FindingCodeVulnerabilityDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindingCodeVulnerabilityDetails} obj Optional instance to populate.
     * @return {module:model/FindingCodeVulnerabilityDetails} The populated <code>FindingCodeVulnerabilityDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindingCodeVulnerabilityDetails();
            CodeVulnerabilityDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('cwes')) {
                obj['cwes'] = ApiClient.convertToType(data['cwes'], Array);
            }
            if (data.hasOwnProperty('detectorId')) {
                obj['detectorId'] = ApiClient.convertToType(data['detectorId'], 'String');
            }
            if (data.hasOwnProperty('detectorName')) {
                obj['detectorName'] = ApiClient.convertToType(data['detectorName'], 'String');
            }
            if (data.hasOwnProperty('detectorTags')) {
                obj['detectorTags'] = ApiClient.convertToType(data['detectorTags'], Array);
            }
            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = CodeVulnerabilityDetailsFilePath.constructFromObject(data['filePath']);
            }
            if (data.hasOwnProperty('referenceUrls')) {
                obj['referenceUrls'] = ApiClient.convertToType(data['referenceUrls'], Array);
            }
            if (data.hasOwnProperty('ruleId')) {
                obj['ruleId'] = ApiClient.convertToType(data['ruleId'], 'String');
            }
            if (data.hasOwnProperty('sourceLambdaLayerArn')) {
                obj['sourceLambdaLayerArn'] = ApiClient.convertToType(data['sourceLambdaLayerArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindingCodeVulnerabilityDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindingCodeVulnerabilityDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FindingCodeVulnerabilityDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cwes`
        if (data['cwes']) { // data not null
          Array.validateJSON(data['cwes']);
        }
        // validate the optional field `detectorId`
        if (data['detectorId']) { // data not null
          String.validateJSON(data['detectorId']);
        }
        // validate the optional field `detectorName`
        if (data['detectorName']) { // data not null
          String.validateJSON(data['detectorName']);
        }
        // validate the optional field `detectorTags`
        if (data['detectorTags']) { // data not null
          Array.validateJSON(data['detectorTags']);
        }
        // validate the optional field `filePath`
        if (data['filePath']) { // data not null
          CodeVulnerabilityDetailsFilePath.validateJSON(data['filePath']);
        }
        // validate the optional field `referenceUrls`
        if (data['referenceUrls']) { // data not null
          Array.validateJSON(data['referenceUrls']);
        }
        // validate the optional field `ruleId`
        if (data['ruleId']) { // data not null
          String.validateJSON(data['ruleId']);
        }
        // validate the optional field `sourceLambdaLayerArn`
        if (data['sourceLambdaLayerArn']) { // data not null
          String.validateJSON(data['sourceLambdaLayerArn']);
        }

        return true;
    }


}

FindingCodeVulnerabilityDetails.RequiredProperties = ["cwes", "detectorId", "detectorName", "filePath"];

/**
 * @member {Array} cwes
 */
FindingCodeVulnerabilityDetails.prototype['cwes'] = undefined;

/**
 * @member {String} detectorId
 */
FindingCodeVulnerabilityDetails.prototype['detectorId'] = undefined;

/**
 * @member {String} detectorName
 */
FindingCodeVulnerabilityDetails.prototype['detectorName'] = undefined;

/**
 * @member {Array} detectorTags
 */
FindingCodeVulnerabilityDetails.prototype['detectorTags'] = undefined;

/**
 * @member {module:model/CodeVulnerabilityDetailsFilePath} filePath
 */
FindingCodeVulnerabilityDetails.prototype['filePath'] = undefined;

/**
 * @member {Array} referenceUrls
 */
FindingCodeVulnerabilityDetails.prototype['referenceUrls'] = undefined;

/**
 * @member {String} ruleId
 */
FindingCodeVulnerabilityDetails.prototype['ruleId'] = undefined;

/**
 * @member {String} sourceLambdaLayerArn
 */
FindingCodeVulnerabilityDetails.prototype['sourceLambdaLayerArn'] = undefined;


// Implement CodeVulnerabilityDetails interface:
/**
 * @member {Array} cwes
 */
CodeVulnerabilityDetails.prototype['cwes'] = undefined;
/**
 * @member {String} detectorId
 */
CodeVulnerabilityDetails.prototype['detectorId'] = undefined;
/**
 * @member {String} detectorName
 */
CodeVulnerabilityDetails.prototype['detectorName'] = undefined;
/**
 * @member {Array} detectorTags
 */
CodeVulnerabilityDetails.prototype['detectorTags'] = undefined;
/**
 * @member {module:model/CodeVulnerabilityDetailsFilePath} filePath
 */
CodeVulnerabilityDetails.prototype['filePath'] = undefined;
/**
 * @member {Array} referenceUrls
 */
CodeVulnerabilityDetails.prototype['referenceUrls'] = undefined;
/**
 * @member {String} ruleId
 */
CodeVulnerabilityDetails.prototype['ruleId'] = undefined;
/**
 * @member {String} sourceLambdaLayerArn
 */
CodeVulnerabilityDetails.prototype['sourceLambdaLayerArn'] = undefined;




export default FindingCodeVulnerabilityDetails;

