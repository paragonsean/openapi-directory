/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceDetails from './ResourceDetails';
import ResourceType from './ResourceType';

/**
 * The Resource model module.
 * @module model/Resource
 * @version 2020-06-08
 */
class Resource {
    /**
     * Constructs a new <code>Resource</code>.
     * Details about the resource involved in a finding.
     * @alias module:model/Resource
     * @param id {String} 
     * @param type {module:model/ResourceType} 
     */
    constructor(id, type) { 
        
        Resource.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Resource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Resource} obj Optional instance to populate.
     * @return {module:model/Resource} The populated <code>Resource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Resource();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ResourceDetails.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('partition')) {
                obj['partition'] = ApiClient.convertToType(data['partition'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], ResourceType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Resource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Resource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Resource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          ResourceDetails.validateJSON(data['details']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `partition`
        if (data['partition']) { // data not null
          String.validateJSON(data['partition']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          String.validateJSON(data['region']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          ResourceType.validateJSON(data['type']);
        }

        return true;
    }


}

Resource.RequiredProperties = ["id", "type"];

/**
 * @member {module:model/ResourceDetails} details
 */
Resource.prototype['details'] = undefined;

/**
 * @member {String} id
 */
Resource.prototype['id'] = undefined;

/**
 * @member {String} partition
 */
Resource.prototype['partition'] = undefined;

/**
 * @member {String} region
 */
Resource.prototype['region'] = undefined;

/**
 * @member {Object} tags
 */
Resource.prototype['tags'] = undefined;

/**
 * @member {module:model/ResourceType} type
 */
Resource.prototype['type'] = undefined;






export default Resource;

