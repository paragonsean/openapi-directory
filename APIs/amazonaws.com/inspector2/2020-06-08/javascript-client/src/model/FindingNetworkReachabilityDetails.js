/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkProtocol from './NetworkProtocol';
import NetworkReachabilityDetails from './NetworkReachabilityDetails';
import NetworkReachabilityDetailsNetworkPath from './NetworkReachabilityDetailsNetworkPath';
import NetworkReachabilityDetailsOpenPortRange from './NetworkReachabilityDetailsOpenPortRange';

/**
 * The FindingNetworkReachabilityDetails model module.
 * @module model/FindingNetworkReachabilityDetails
 * @version 2020-06-08
 */
class FindingNetworkReachabilityDetails {
    /**
     * Constructs a new <code>FindingNetworkReachabilityDetails</code>.
     * @alias module:model/FindingNetworkReachabilityDetails
     * @implements module:model/NetworkReachabilityDetails
     * @param networkPath {module:model/NetworkReachabilityDetailsNetworkPath} 
     * @param openPortRange {module:model/NetworkReachabilityDetailsOpenPortRange} 
     * @param protocol {module:model/NetworkProtocol} 
     */
    constructor(networkPath, openPortRange, protocol) { 
        NetworkReachabilityDetails.initialize(this, networkPath, openPortRange, protocol);
        FindingNetworkReachabilityDetails.initialize(this, networkPath, openPortRange, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, networkPath, openPortRange, protocol) { 
        obj['networkPath'] = networkPath;
        obj['openPortRange'] = openPortRange;
        obj['protocol'] = protocol;
    }

    /**
     * Constructs a <code>FindingNetworkReachabilityDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindingNetworkReachabilityDetails} obj Optional instance to populate.
     * @return {module:model/FindingNetworkReachabilityDetails} The populated <code>FindingNetworkReachabilityDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindingNetworkReachabilityDetails();
            NetworkReachabilityDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('networkPath')) {
                obj['networkPath'] = NetworkReachabilityDetailsNetworkPath.constructFromObject(data['networkPath']);
            }
            if (data.hasOwnProperty('openPortRange')) {
                obj['openPortRange'] = NetworkReachabilityDetailsOpenPortRange.constructFromObject(data['openPortRange']);
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], NetworkProtocol);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindingNetworkReachabilityDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindingNetworkReachabilityDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FindingNetworkReachabilityDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `networkPath`
        if (data['networkPath']) { // data not null
          NetworkReachabilityDetailsNetworkPath.validateJSON(data['networkPath']);
        }
        // validate the optional field `openPortRange`
        if (data['openPortRange']) { // data not null
          NetworkReachabilityDetailsOpenPortRange.validateJSON(data['openPortRange']);
        }
        // validate the optional field `protocol`
        if (data['protocol']) { // data not null
          NetworkProtocol.validateJSON(data['protocol']);
        }

        return true;
    }


}

FindingNetworkReachabilityDetails.RequiredProperties = ["networkPath", "openPortRange", "protocol"];

/**
 * @member {module:model/NetworkReachabilityDetailsNetworkPath} networkPath
 */
FindingNetworkReachabilityDetails.prototype['networkPath'] = undefined;

/**
 * @member {module:model/NetworkReachabilityDetailsOpenPortRange} openPortRange
 */
FindingNetworkReachabilityDetails.prototype['openPortRange'] = undefined;

/**
 * @member {module:model/NetworkProtocol} protocol
 */
FindingNetworkReachabilityDetails.prototype['protocol'] = undefined;


// Implement NetworkReachabilityDetails interface:
/**
 * @member {module:model/NetworkReachabilityDetailsNetworkPath} networkPath
 */
NetworkReachabilityDetails.prototype['networkPath'] = undefined;
/**
 * @member {module:model/NetworkReachabilityDetailsOpenPortRange} openPortRange
 */
NetworkReachabilityDetails.prototype['openPortRange'] = undefined;
/**
 * @member {module:model/NetworkProtocol} protocol
 */
NetworkReachabilityDetails.prototype['protocol'] = undefined;




export default FindingNetworkReachabilityDetails;

