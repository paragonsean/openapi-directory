/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CoverageResourceType from './CoverageResourceType';
import CoveredResourceResourceMetadata from './CoveredResourceResourceMetadata';
import CoveredResourceScanStatus from './CoveredResourceScanStatus';
import ScanType from './ScanType';

/**
 * The CoveredResource model module.
 * @module model/CoveredResource
 * @version 2020-06-08
 */
class CoveredResource {
    /**
     * Constructs a new <code>CoveredResource</code>.
     * An object that contains details about a resource covered by Amazon Inspector.
     * @alias module:model/CoveredResource
     * @param accountId {String} 
     * @param resourceId {String} 
     * @param resourceType {module:model/CoverageResourceType} 
     * @param scanType {module:model/ScanType} 
     */
    constructor(accountId, resourceId, resourceType, scanType) { 
        
        CoveredResource.initialize(this, accountId, resourceId, resourceType, scanType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, resourceId, resourceType, scanType) { 
        obj['accountId'] = accountId;
        obj['resourceId'] = resourceId;
        obj['resourceType'] = resourceType;
        obj['scanType'] = scanType;
    }

    /**
     * Constructs a <code>CoveredResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CoveredResource} obj Optional instance to populate.
     * @return {module:model/CoveredResource} The populated <code>CoveredResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CoveredResource();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('lastScannedAt')) {
                obj['lastScannedAt'] = ApiClient.convertToType(data['lastScannedAt'], 'Date');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceMetadata')) {
                obj['resourceMetadata'] = CoveredResourceResourceMetadata.constructFromObject(data['resourceMetadata']);
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], CoverageResourceType);
            }
            if (data.hasOwnProperty('scanStatus')) {
                obj['scanStatus'] = CoveredResourceScanStatus.constructFromObject(data['scanStatus']);
            }
            if (data.hasOwnProperty('scanType')) {
                obj['scanType'] = ApiClient.convertToType(data['scanType'], ScanType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CoveredResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CoveredResource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CoveredResource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accountId`
        if (data['accountId']) { // data not null
          String.validateJSON(data['accountId']);
        }
        // validate the optional field `lastScannedAt`
        if (data['lastScannedAt']) { // data not null
          Date.validateJSON(data['lastScannedAt']);
        }
        // validate the optional field `resourceId`
        if (data['resourceId']) { // data not null
          String.validateJSON(data['resourceId']);
        }
        // validate the optional field `resourceMetadata`
        if (data['resourceMetadata']) { // data not null
          CoveredResourceResourceMetadata.validateJSON(data['resourceMetadata']);
        }
        // validate the optional field `resourceType`
        if (data['resourceType']) { // data not null
          CoverageResourceType.validateJSON(data['resourceType']);
        }
        // validate the optional field `scanStatus`
        if (data['scanStatus']) { // data not null
          CoveredResourceScanStatus.validateJSON(data['scanStatus']);
        }
        // validate the optional field `scanType`
        if (data['scanType']) { // data not null
          ScanType.validateJSON(data['scanType']);
        }

        return true;
    }


}

CoveredResource.RequiredProperties = ["accountId", "resourceId", "resourceType", "scanType"];

/**
 * @member {String} accountId
 */
CoveredResource.prototype['accountId'] = undefined;

/**
 * @member {Date} lastScannedAt
 */
CoveredResource.prototype['lastScannedAt'] = undefined;

/**
 * @member {String} resourceId
 */
CoveredResource.prototype['resourceId'] = undefined;

/**
 * @member {module:model/CoveredResourceResourceMetadata} resourceMetadata
 */
CoveredResource.prototype['resourceMetadata'] = undefined;

/**
 * @member {module:model/CoverageResourceType} resourceType
 */
CoveredResource.prototype['resourceType'] = undefined;

/**
 * @member {module:model/CoveredResourceScanStatus} scanStatus
 */
CoveredResource.prototype['scanStatus'] = undefined;

/**
 * @member {module:model/ScanType} scanType
 */
CoveredResource.prototype['scanType'] = undefined;






export default CoveredResource;

