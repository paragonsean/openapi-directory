/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorCode from './ErrorCode';
import State from './State';
import Status from './Status';

/**
 * The AccountStateState model module.
 * @module model/AccountStateState
 * @version 2020-06-08
 */
class AccountStateState {
    /**
     * Constructs a new <code>AccountStateState</code>.
     * @alias module:model/AccountStateState
     * @implements module:model/State
     * @param errorCode {module:model/ErrorCode} 
     * @param errorMessage {String} 
     * @param status {module:model/Status} 
     */
    constructor(errorCode, errorMessage, status) { 
        State.initialize(this, errorCode, errorMessage, status);
        AccountStateState.initialize(this, errorCode, errorMessage, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, errorCode, errorMessage, status) { 
        obj['errorCode'] = errorCode;
        obj['errorMessage'] = errorMessage;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>AccountStateState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountStateState} obj Optional instance to populate.
     * @return {module:model/AccountStateState} The populated <code>AccountStateState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountStateState();
            State.constructFromObject(data, obj);

            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], ErrorCode);
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], Status);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountStateState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountStateState</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountStateState.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `errorCode`
        if (data['errorCode']) { // data not null
          ErrorCode.validateJSON(data['errorCode']);
        }
        // validate the optional field `errorMessage`
        if (data['errorMessage']) { // data not null
          String.validateJSON(data['errorMessage']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }

        return true;
    }


}

AccountStateState.RequiredProperties = ["errorCode", "errorMessage", "status"];

/**
 * @member {module:model/ErrorCode} errorCode
 */
AccountStateState.prototype['errorCode'] = undefined;

/**
 * @member {String} errorMessage
 */
AccountStateState.prototype['errorMessage'] = undefined;

/**
 * @member {module:model/Status} status
 */
AccountStateState.prototype['status'] = undefined;


// Implement State interface:
/**
 * @member {module:model/ErrorCode} errorCode
 */
State.prototype['errorCode'] = undefined;
/**
 * @member {String} errorMessage
 */
State.prototype['errorMessage'] = undefined;
/**
 * @member {module:model/Status} status
 */
State.prototype['status'] = undefined;




export default AccountStateState;

