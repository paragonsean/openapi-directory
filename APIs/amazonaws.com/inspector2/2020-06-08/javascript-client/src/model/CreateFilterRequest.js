/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateFilterRequestFilterCriteria from './CreateFilterRequestFilterCriteria';

/**
 * The CreateFilterRequest model module.
 * @module model/CreateFilterRequest
 * @version 2020-06-08
 */
class CreateFilterRequest {
    /**
     * Constructs a new <code>CreateFilterRequest</code>.
     * @alias module:model/CreateFilterRequest
     * @param action {module:model/CreateFilterRequest.ActionEnum} Defines the action that is to be applied to the findings that match the filter.
     * @param filterCriteria {module:model/CreateFilterRequestFilterCriteria} 
     * @param name {String} The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.
     */
    constructor(action, filterCriteria, name) { 
        
        CreateFilterRequest.initialize(this, action, filterCriteria, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, filterCriteria, name) { 
        obj['action'] = action;
        obj['filterCriteria'] = filterCriteria;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateFilterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateFilterRequest} obj Optional instance to populate.
     * @return {module:model/CreateFilterRequest} The populated <code>CreateFilterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateFilterRequest();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('filterCriteria')) {
                obj['filterCriteria'] = CreateFilterRequestFilterCriteria.constructFromObject(data['filterCriteria']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateFilterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateFilterRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateFilterRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `filterCriteria`
        if (data['filterCriteria']) { // data not null
          CreateFilterRequestFilterCriteria.validateJSON(data['filterCriteria']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}

CreateFilterRequest.RequiredProperties = ["action", "filterCriteria", "name"];

/**
 * Defines the action that is to be applied to the findings that match the filter.
 * @member {module:model/CreateFilterRequest.ActionEnum} action
 */
CreateFilterRequest.prototype['action'] = undefined;

/**
 * A description of the filter.
 * @member {String} description
 */
CreateFilterRequest.prototype['description'] = undefined;

/**
 * @member {module:model/CreateFilterRequestFilterCriteria} filterCriteria
 */
CreateFilterRequest.prototype['filterCriteria'] = undefined;

/**
 * The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.
 * @member {String} name
 */
CreateFilterRequest.prototype['name'] = undefined;

/**
 * The reason for creating the filter.
 * @member {String} reason
 */
CreateFilterRequest.prototype['reason'] = undefined;

/**
 * A list of tags for the filter.
 * @member {Object.<String, String>} tags
 */
CreateFilterRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
CreateFilterRequest['ActionEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "SUPPRESS"
     * @const
     */
    "SUPPRESS": "SUPPRESS"
};



export default CreateFilterRequest;

