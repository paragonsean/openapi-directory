/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceScanMetadata from './ResourceScanMetadata';
import ResourceScanMetadataEc2 from './ResourceScanMetadataEc2';
import ResourceScanMetadataEcrImage from './ResourceScanMetadataEcrImage';
import ResourceScanMetadataEcrRepository from './ResourceScanMetadataEcrRepository';
import ResourceScanMetadataLambdaFunction from './ResourceScanMetadataLambdaFunction';

/**
 * The CoveredResourceResourceMetadata model module.
 * @module model/CoveredResourceResourceMetadata
 * @version 2020-06-08
 */
class CoveredResourceResourceMetadata {
    /**
     * Constructs a new <code>CoveredResourceResourceMetadata</code>.
     * @alias module:model/CoveredResourceResourceMetadata
     * @implements module:model/ResourceScanMetadata
     */
    constructor() { 
        ResourceScanMetadata.initialize(this);
        CoveredResourceResourceMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CoveredResourceResourceMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CoveredResourceResourceMetadata} obj Optional instance to populate.
     * @return {module:model/CoveredResourceResourceMetadata} The populated <code>CoveredResourceResourceMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CoveredResourceResourceMetadata();
            ResourceScanMetadata.constructFromObject(data, obj);

            if (data.hasOwnProperty('ec2')) {
                obj['ec2'] = ResourceScanMetadataEc2.constructFromObject(data['ec2']);
            }
            if (data.hasOwnProperty('ecrImage')) {
                obj['ecrImage'] = ResourceScanMetadataEcrImage.constructFromObject(data['ecrImage']);
            }
            if (data.hasOwnProperty('ecrRepository')) {
                obj['ecrRepository'] = ResourceScanMetadataEcrRepository.constructFromObject(data['ecrRepository']);
            }
            if (data.hasOwnProperty('lambdaFunction')) {
                obj['lambdaFunction'] = ResourceScanMetadataLambdaFunction.constructFromObject(data['lambdaFunction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CoveredResourceResourceMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CoveredResourceResourceMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ec2`
        if (data['ec2']) { // data not null
          ResourceScanMetadataEc2.validateJSON(data['ec2']);
        }
        // validate the optional field `ecrImage`
        if (data['ecrImage']) { // data not null
          ResourceScanMetadataEcrImage.validateJSON(data['ecrImage']);
        }
        // validate the optional field `ecrRepository`
        if (data['ecrRepository']) { // data not null
          ResourceScanMetadataEcrRepository.validateJSON(data['ecrRepository']);
        }
        // validate the optional field `lambdaFunction`
        if (data['lambdaFunction']) { // data not null
          ResourceScanMetadataLambdaFunction.validateJSON(data['lambdaFunction']);
        }

        return true;
    }


}



/**
 * @member {module:model/ResourceScanMetadataEc2} ec2
 */
CoveredResourceResourceMetadata.prototype['ec2'] = undefined;

/**
 * @member {module:model/ResourceScanMetadataEcrImage} ecrImage
 */
CoveredResourceResourceMetadata.prototype['ecrImage'] = undefined;

/**
 * @member {module:model/ResourceScanMetadataEcrRepository} ecrRepository
 */
CoveredResourceResourceMetadata.prototype['ecrRepository'] = undefined;

/**
 * @member {module:model/ResourceScanMetadataLambdaFunction} lambdaFunction
 */
CoveredResourceResourceMetadata.prototype['lambdaFunction'] = undefined;


// Implement ResourceScanMetadata interface:
/**
 * @member {module:model/ResourceScanMetadataEc2} ec2
 */
ResourceScanMetadata.prototype['ec2'] = undefined;
/**
 * @member {module:model/ResourceScanMetadataEcrImage} ecrImage
 */
ResourceScanMetadata.prototype['ecrImage'] = undefined;
/**
 * @member {module:model/ResourceScanMetadataEcrRepository} ecrRepository
 */
ResourceScanMetadata.prototype['ecrRepository'] = undefined;
/**
 * @member {module:model/ResourceScanMetadataLambdaFunction} lambdaFunction
 */
ResourceScanMetadata.prototype['lambdaFunction'] = undefined;




export default CoveredResourceResourceMetadata;

