/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CoverageFilterCriteria model module.
 * @module model/CoverageFilterCriteria
 * @version 2020-06-08
 */
class CoverageFilterCriteria {
    /**
     * Constructs a new <code>CoverageFilterCriteria</code>.
     * A structure that identifies filter criteria for &lt;code&gt;GetCoverageStatistics&lt;/code&gt;.
     * @alias module:model/CoverageFilterCriteria
     */
    constructor() { 
        
        CoverageFilterCriteria.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CoverageFilterCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CoverageFilterCriteria} obj Optional instance to populate.
     * @return {module:model/CoverageFilterCriteria} The populated <code>CoverageFilterCriteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CoverageFilterCriteria();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], Array);
            }
            if (data.hasOwnProperty('ec2InstanceTags')) {
                obj['ec2InstanceTags'] = ApiClient.convertToType(data['ec2InstanceTags'], Array);
            }
            if (data.hasOwnProperty('ecrImageTags')) {
                obj['ecrImageTags'] = ApiClient.convertToType(data['ecrImageTags'], Array);
            }
            if (data.hasOwnProperty('ecrRepositoryName')) {
                obj['ecrRepositoryName'] = ApiClient.convertToType(data['ecrRepositoryName'], Array);
            }
            if (data.hasOwnProperty('lambdaFunctionName')) {
                obj['lambdaFunctionName'] = ApiClient.convertToType(data['lambdaFunctionName'], Array);
            }
            if (data.hasOwnProperty('lambdaFunctionRuntime')) {
                obj['lambdaFunctionRuntime'] = ApiClient.convertToType(data['lambdaFunctionRuntime'], Array);
            }
            if (data.hasOwnProperty('lambdaFunctionTags')) {
                obj['lambdaFunctionTags'] = ApiClient.convertToType(data['lambdaFunctionTags'], Array);
            }
            if (data.hasOwnProperty('lastScannedAt')) {
                obj['lastScannedAt'] = ApiClient.convertToType(data['lastScannedAt'], Array);
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], Array);
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], Array);
            }
            if (data.hasOwnProperty('scanStatusCode')) {
                obj['scanStatusCode'] = ApiClient.convertToType(data['scanStatusCode'], Array);
            }
            if (data.hasOwnProperty('scanStatusReason')) {
                obj['scanStatusReason'] = ApiClient.convertToType(data['scanStatusReason'], Array);
            }
            if (data.hasOwnProperty('scanType')) {
                obj['scanType'] = ApiClient.convertToType(data['scanType'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CoverageFilterCriteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CoverageFilterCriteria</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accountId`
        if (data['accountId']) { // data not null
          Array.validateJSON(data['accountId']);
        }
        // validate the optional field `ec2InstanceTags`
        if (data['ec2InstanceTags']) { // data not null
          Array.validateJSON(data['ec2InstanceTags']);
        }
        // validate the optional field `ecrImageTags`
        if (data['ecrImageTags']) { // data not null
          Array.validateJSON(data['ecrImageTags']);
        }
        // validate the optional field `ecrRepositoryName`
        if (data['ecrRepositoryName']) { // data not null
          Array.validateJSON(data['ecrRepositoryName']);
        }
        // validate the optional field `lambdaFunctionName`
        if (data['lambdaFunctionName']) { // data not null
          Array.validateJSON(data['lambdaFunctionName']);
        }
        // validate the optional field `lambdaFunctionRuntime`
        if (data['lambdaFunctionRuntime']) { // data not null
          Array.validateJSON(data['lambdaFunctionRuntime']);
        }
        // validate the optional field `lambdaFunctionTags`
        if (data['lambdaFunctionTags']) { // data not null
          Array.validateJSON(data['lambdaFunctionTags']);
        }
        // validate the optional field `lastScannedAt`
        if (data['lastScannedAt']) { // data not null
          Array.validateJSON(data['lastScannedAt']);
        }
        // validate the optional field `resourceId`
        if (data['resourceId']) { // data not null
          Array.validateJSON(data['resourceId']);
        }
        // validate the optional field `resourceType`
        if (data['resourceType']) { // data not null
          Array.validateJSON(data['resourceType']);
        }
        // validate the optional field `scanStatusCode`
        if (data['scanStatusCode']) { // data not null
          Array.validateJSON(data['scanStatusCode']);
        }
        // validate the optional field `scanStatusReason`
        if (data['scanStatusReason']) { // data not null
          Array.validateJSON(data['scanStatusReason']);
        }
        // validate the optional field `scanType`
        if (data['scanType']) { // data not null
          Array.validateJSON(data['scanType']);
        }

        return true;
    }


}



/**
 * @member {Array} accountId
 */
CoverageFilterCriteria.prototype['accountId'] = undefined;

/**
 * @member {Array} ec2InstanceTags
 */
CoverageFilterCriteria.prototype['ec2InstanceTags'] = undefined;

/**
 * @member {Array} ecrImageTags
 */
CoverageFilterCriteria.prototype['ecrImageTags'] = undefined;

/**
 * @member {Array} ecrRepositoryName
 */
CoverageFilterCriteria.prototype['ecrRepositoryName'] = undefined;

/**
 * @member {Array} lambdaFunctionName
 */
CoverageFilterCriteria.prototype['lambdaFunctionName'] = undefined;

/**
 * @member {Array} lambdaFunctionRuntime
 */
CoverageFilterCriteria.prototype['lambdaFunctionRuntime'] = undefined;

/**
 * @member {Array} lambdaFunctionTags
 */
CoverageFilterCriteria.prototype['lambdaFunctionTags'] = undefined;

/**
 * @member {Array} lastScannedAt
 */
CoverageFilterCriteria.prototype['lastScannedAt'] = undefined;

/**
 * @member {Array} resourceId
 */
CoverageFilterCriteria.prototype['resourceId'] = undefined;

/**
 * @member {Array} resourceType
 */
CoverageFilterCriteria.prototype['resourceType'] = undefined;

/**
 * @member {Array} scanStatusCode
 */
CoverageFilterCriteria.prototype['scanStatusCode'] = undefined;

/**
 * @member {Array} scanStatusReason
 */
CoverageFilterCriteria.prototype['scanStatusReason'] = undefined;

/**
 * @member {Array} scanType
 */
CoverageFilterCriteria.prototype['scanType'] = undefined;






export default CoverageFilterCriteria;

