/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CvssScoreDetails from './CvssScoreDetails';

/**
 * The InspectorScoreDetailsAdjustedCvss model module.
 * @module model/InspectorScoreDetailsAdjustedCvss
 * @version 2020-06-08
 */
class InspectorScoreDetailsAdjustedCvss {
    /**
     * Constructs a new <code>InspectorScoreDetailsAdjustedCvss</code>.
     * @alias module:model/InspectorScoreDetailsAdjustedCvss
     * @implements module:model/CvssScoreDetails
     * @param score {Number} 
     * @param scoreSource {String} 
     * @param scoringVector {String} 
     * @param version {String} 
     */
    constructor(score, scoreSource, scoringVector, version) { 
        CvssScoreDetails.initialize(this, score, scoreSource, scoringVector, version);
        InspectorScoreDetailsAdjustedCvss.initialize(this, score, scoreSource, scoringVector, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, score, scoreSource, scoringVector, version) { 
        obj['score'] = score;
        obj['scoreSource'] = scoreSource;
        obj['scoringVector'] = scoringVector;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>InspectorScoreDetailsAdjustedCvss</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InspectorScoreDetailsAdjustedCvss} obj Optional instance to populate.
     * @return {module:model/InspectorScoreDetailsAdjustedCvss} The populated <code>InspectorScoreDetailsAdjustedCvss</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InspectorScoreDetailsAdjustedCvss();
            CvssScoreDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('adjustments')) {
                obj['adjustments'] = ApiClient.convertToType(data['adjustments'], Array);
            }
            if (data.hasOwnProperty('cvssSource')) {
                obj['cvssSource'] = ApiClient.convertToType(data['cvssSource'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('scoreSource')) {
                obj['scoreSource'] = ApiClient.convertToType(data['scoreSource'], 'String');
            }
            if (data.hasOwnProperty('scoringVector')) {
                obj['scoringVector'] = ApiClient.convertToType(data['scoringVector'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InspectorScoreDetailsAdjustedCvss</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InspectorScoreDetailsAdjustedCvss</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InspectorScoreDetailsAdjustedCvss.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `adjustments`
        if (data['adjustments']) { // data not null
          Array.validateJSON(data['adjustments']);
        }
        // validate the optional field `cvssSource`
        if (data['cvssSource']) { // data not null
          String.validateJSON(data['cvssSource']);
        }
        // validate the optional field `score`
        if (data['score']) { // data not null
          Number.validateJSON(data['score']);
        }
        // validate the optional field `scoreSource`
        if (data['scoreSource']) { // data not null
          String.validateJSON(data['scoreSource']);
        }
        // validate the optional field `scoringVector`
        if (data['scoringVector']) { // data not null
          String.validateJSON(data['scoringVector']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          String.validateJSON(data['version']);
        }

        return true;
    }


}

InspectorScoreDetailsAdjustedCvss.RequiredProperties = ["score", "scoreSource", "scoringVector", "version"];

/**
 * @member {Array} adjustments
 */
InspectorScoreDetailsAdjustedCvss.prototype['adjustments'] = undefined;

/**
 * @member {String} cvssSource
 */
InspectorScoreDetailsAdjustedCvss.prototype['cvssSource'] = undefined;

/**
 * @member {Number} score
 */
InspectorScoreDetailsAdjustedCvss.prototype['score'] = undefined;

/**
 * @member {String} scoreSource
 */
InspectorScoreDetailsAdjustedCvss.prototype['scoreSource'] = undefined;

/**
 * @member {String} scoringVector
 */
InspectorScoreDetailsAdjustedCvss.prototype['scoringVector'] = undefined;

/**
 * @member {String} version
 */
InspectorScoreDetailsAdjustedCvss.prototype['version'] = undefined;


// Implement CvssScoreDetails interface:
/**
 * @member {Array} adjustments
 */
CvssScoreDetails.prototype['adjustments'] = undefined;
/**
 * @member {String} cvssSource
 */
CvssScoreDetails.prototype['cvssSource'] = undefined;
/**
 * @member {Number} score
 */
CvssScoreDetails.prototype['score'] = undefined;
/**
 * @member {String} scoreSource
 */
CvssScoreDetails.prototype['scoreSource'] = undefined;
/**
 * @member {String} scoringVector
 */
CvssScoreDetails.prototype['scoringVector'] = undefined;
/**
 * @member {String} version
 */
CvssScoreDetails.prototype['version'] = undefined;




export default InspectorScoreDetailsAdjustedCvss;

