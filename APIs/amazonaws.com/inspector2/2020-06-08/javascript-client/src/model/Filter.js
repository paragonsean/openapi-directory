/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterAction from './FilterAction';
import FilterCriteria from './FilterCriteria';

/**
 * The Filter model module.
 * @module model/Filter
 * @version 2020-06-08
 */
class Filter {
    /**
     * Constructs a new <code>Filter</code>.
     * Details about a filter.
     * @alias module:model/Filter
     * @param action {module:model/FilterAction} 
     * @param arn {String} 
     * @param createdAt {Date} 
     * @param criteria {module:model/FilterCriteria} 
     * @param name {String} 
     * @param ownerId {String} 
     * @param updatedAt {Date} 
     */
    constructor(action, arn, createdAt, criteria, name, ownerId, updatedAt) { 
        
        Filter.initialize(this, action, arn, createdAt, criteria, name, ownerId, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, arn, createdAt, criteria, name, ownerId, updatedAt) { 
        obj['action'] = action;
        obj['arn'] = arn;
        obj['createdAt'] = createdAt;
        obj['criteria'] = criteria;
        obj['name'] = name;
        obj['ownerId'] = ownerId;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>Filter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filter} obj Optional instance to populate.
     * @return {module:model/Filter} The populated <code>Filter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filter();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], FilterAction);
            }
            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = FilterCriteria.constructFromObject(data['criteria']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Filter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `action`
        if (data['action']) { // data not null
          FilterAction.validateJSON(data['action']);
        }
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `criteria`
        if (data['criteria']) { // data not null
          FilterCriteria.validateJSON(data['criteria']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `ownerId`
        if (data['ownerId']) { // data not null
          String.validateJSON(data['ownerId']);
        }
        // validate the optional field `reason`
        if (data['reason']) { // data not null
          String.validateJSON(data['reason']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `updatedAt`
        if (data['updatedAt']) { // data not null
          Date.validateJSON(data['updatedAt']);
        }

        return true;
    }


}

Filter.RequiredProperties = ["action", "arn", "createdAt", "criteria", "name", "ownerId", "updatedAt"];

/**
 * @member {module:model/FilterAction} action
 */
Filter.prototype['action'] = undefined;

/**
 * @member {String} arn
 */
Filter.prototype['arn'] = undefined;

/**
 * @member {Date} createdAt
 */
Filter.prototype['createdAt'] = undefined;

/**
 * @member {module:model/FilterCriteria} criteria
 */
Filter.prototype['criteria'] = undefined;

/**
 * @member {String} description
 */
Filter.prototype['description'] = undefined;

/**
 * @member {String} name
 */
Filter.prototype['name'] = undefined;

/**
 * @member {String} ownerId
 */
Filter.prototype['ownerId'] = undefined;

/**
 * @member {String} reason
 */
Filter.prototype['reason'] = undefined;

/**
 * @member {Object} tags
 */
Filter.prototype['tags'] = undefined;

/**
 * @member {Date} updatedAt
 */
Filter.prototype['updatedAt'] = undefined;






export default Filter;

