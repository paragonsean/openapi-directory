/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CisaData from './CisaData';
import ExploitObserved from './ExploitObserved';

/**
 * The FindingDetail model module.
 * @module model/FindingDetail
 * @version 2020-06-08
 */
class FindingDetail {
    /**
     * Constructs a new <code>FindingDetail</code>.
     * Details of the vulnerability identified in a finding.
     * @alias module:model/FindingDetail
     */
    constructor() { 
        
        FindingDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FindingDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindingDetail} obj Optional instance to populate.
     * @return {module:model/FindingDetail} The populated <code>FindingDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindingDetail();

            if (data.hasOwnProperty('cisaData')) {
                obj['cisaData'] = CisaData.constructFromObject(data['cisaData']);
            }
            if (data.hasOwnProperty('cwes')) {
                obj['cwes'] = ApiClient.convertToType(data['cwes'], Array);
            }
            if (data.hasOwnProperty('epssScore')) {
                obj['epssScore'] = ApiClient.convertToType(data['epssScore'], 'Number');
            }
            if (data.hasOwnProperty('evidences')) {
                obj['evidences'] = ApiClient.convertToType(data['evidences'], Array);
            }
            if (data.hasOwnProperty('exploitObserved')) {
                obj['exploitObserved'] = ExploitObserved.constructFromObject(data['exploitObserved']);
            }
            if (data.hasOwnProperty('findingArn')) {
                obj['findingArn'] = ApiClient.convertToType(data['findingArn'], 'String');
            }
            if (data.hasOwnProperty('referenceUrls')) {
                obj['referenceUrls'] = ApiClient.convertToType(data['referenceUrls'], Array);
            }
            if (data.hasOwnProperty('riskScore')) {
                obj['riskScore'] = ApiClient.convertToType(data['riskScore'], 'Number');
            }
            if (data.hasOwnProperty('tools')) {
                obj['tools'] = ApiClient.convertToType(data['tools'], Array);
            }
            if (data.hasOwnProperty('ttps')) {
                obj['ttps'] = ApiClient.convertToType(data['ttps'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindingDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindingDetail</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cisaData`
        if (data['cisaData']) { // data not null
          CisaData.validateJSON(data['cisaData']);
        }
        // validate the optional field `cwes`
        if (data['cwes']) { // data not null
          Array.validateJSON(data['cwes']);
        }
        // validate the optional field `epssScore`
        if (data['epssScore']) { // data not null
          Number.validateJSON(data['epssScore']);
        }
        // validate the optional field `evidences`
        if (data['evidences']) { // data not null
          Array.validateJSON(data['evidences']);
        }
        // validate the optional field `exploitObserved`
        if (data['exploitObserved']) { // data not null
          ExploitObserved.validateJSON(data['exploitObserved']);
        }
        // validate the optional field `findingArn`
        if (data['findingArn']) { // data not null
          String.validateJSON(data['findingArn']);
        }
        // validate the optional field `referenceUrls`
        if (data['referenceUrls']) { // data not null
          Array.validateJSON(data['referenceUrls']);
        }
        // validate the optional field `riskScore`
        if (data['riskScore']) { // data not null
          Number.validateJSON(data['riskScore']);
        }
        // validate the optional field `tools`
        if (data['tools']) { // data not null
          Array.validateJSON(data['tools']);
        }
        // validate the optional field `ttps`
        if (data['ttps']) { // data not null
          Array.validateJSON(data['ttps']);
        }

        return true;
    }


}



/**
 * @member {module:model/CisaData} cisaData
 */
FindingDetail.prototype['cisaData'] = undefined;

/**
 * @member {Array} cwes
 */
FindingDetail.prototype['cwes'] = undefined;

/**
 * @member {Number} epssScore
 */
FindingDetail.prototype['epssScore'] = undefined;

/**
 * @member {Array} evidences
 */
FindingDetail.prototype['evidences'] = undefined;

/**
 * @member {module:model/ExploitObserved} exploitObserved
 */
FindingDetail.prototype['exploitObserved'] = undefined;

/**
 * @member {String} findingArn
 */
FindingDetail.prototype['findingArn'] = undefined;

/**
 * @member {Array} referenceUrls
 */
FindingDetail.prototype['referenceUrls'] = undefined;

/**
 * @member {Number} riskScore
 */
FindingDetail.prototype['riskScore'] = undefined;

/**
 * @member {Array} tools
 */
FindingDetail.prototype['tools'] = undefined;

/**
 * @member {Array} ttps
 */
FindingDetail.prototype['ttps'] = undefined;






export default FindingDetail;

