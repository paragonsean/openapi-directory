/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateMemberRequest from '../model/AssociateMemberRequest';
import AssociateMemberResponse from '../model/AssociateMemberResponse';
import BatchGetAccountStatusRequest from '../model/BatchGetAccountStatusRequest';
import BatchGetAccountStatusResponse from '../model/BatchGetAccountStatusResponse';
import BatchGetCodeSnippetRequest from '../model/BatchGetCodeSnippetRequest';
import BatchGetCodeSnippetResponse from '../model/BatchGetCodeSnippetResponse';
import BatchGetFindingDetailsRequest from '../model/BatchGetFindingDetailsRequest';
import BatchGetFindingDetailsResponse from '../model/BatchGetFindingDetailsResponse';
import BatchGetFreeTrialInfoRequest from '../model/BatchGetFreeTrialInfoRequest';
import BatchGetFreeTrialInfoResponse from '../model/BatchGetFreeTrialInfoResponse';
import BatchGetMemberEc2DeepInspectionStatusRequest from '../model/BatchGetMemberEc2DeepInspectionStatusRequest';
import BatchGetMemberEc2DeepInspectionStatusResponse from '../model/BatchGetMemberEc2DeepInspectionStatusResponse';
import BatchUpdateMemberEc2DeepInspectionStatusRequest from '../model/BatchUpdateMemberEc2DeepInspectionStatusRequest';
import BatchUpdateMemberEc2DeepInspectionStatusResponse from '../model/BatchUpdateMemberEc2DeepInspectionStatusResponse';
import CancelFindingsReportRequest from '../model/CancelFindingsReportRequest';
import CancelFindingsReportResponse from '../model/CancelFindingsReportResponse';
import CancelSbomExportRequest from '../model/CancelSbomExportRequest';
import CancelSbomExportResponse from '../model/CancelSbomExportResponse';
import CreateFilterRequest from '../model/CreateFilterRequest';
import CreateFilterResponse from '../model/CreateFilterResponse';
import CreateFindingsReportRequest from '../model/CreateFindingsReportRequest';
import CreateFindingsReportResponse from '../model/CreateFindingsReportResponse';
import CreateSbomExportRequest from '../model/CreateSbomExportRequest';
import CreateSbomExportResponse from '../model/CreateSbomExportResponse';
import DeleteFilterRequest from '../model/DeleteFilterRequest';
import DeleteFilterResponse from '../model/DeleteFilterResponse';
import DescribeOrganizationConfigurationResponse from '../model/DescribeOrganizationConfigurationResponse';
import DisableDelegatedAdminAccountRequest from '../model/DisableDelegatedAdminAccountRequest';
import DisableDelegatedAdminAccountResponse from '../model/DisableDelegatedAdminAccountResponse';
import DisableRequest from '../model/DisableRequest';
import DisableResponse from '../model/DisableResponse';
import DisassociateMemberRequest from '../model/DisassociateMemberRequest';
import DisassociateMemberResponse from '../model/DisassociateMemberResponse';
import EnableDelegatedAdminAccountRequest from '../model/EnableDelegatedAdminAccountRequest';
import EnableDelegatedAdminAccountResponse from '../model/EnableDelegatedAdminAccountResponse';
import EnableRequest from '../model/EnableRequest';
import EnableResponse from '../model/EnableResponse';
import GetConfigurationResponse from '../model/GetConfigurationResponse';
import GetDelegatedAdminAccountResponse from '../model/GetDelegatedAdminAccountResponse';
import GetEc2DeepInspectionConfigurationResponse from '../model/GetEc2DeepInspectionConfigurationResponse';
import GetEncryptionKeyResponse from '../model/GetEncryptionKeyResponse';
import GetFindingsReportStatusRequest from '../model/GetFindingsReportStatusRequest';
import GetFindingsReportStatusResponse from '../model/GetFindingsReportStatusResponse';
import GetMemberRequest from '../model/GetMemberRequest';
import GetMemberResponse from '../model/GetMemberResponse';
import GetSbomExportRequest from '../model/GetSbomExportRequest';
import GetSbomExportResponse from '../model/GetSbomExportResponse';
import ListAccountPermissionsRequest from '../model/ListAccountPermissionsRequest';
import ListAccountPermissionsResponse from '../model/ListAccountPermissionsResponse';
import ListCoverageRequest from '../model/ListCoverageRequest';
import ListCoverageResponse from '../model/ListCoverageResponse';
import ListCoverageStatisticsRequest from '../model/ListCoverageStatisticsRequest';
import ListCoverageStatisticsResponse from '../model/ListCoverageStatisticsResponse';
import ListDelegatedAdminAccountsRequest from '../model/ListDelegatedAdminAccountsRequest';
import ListDelegatedAdminAccountsResponse from '../model/ListDelegatedAdminAccountsResponse';
import ListFiltersRequest from '../model/ListFiltersRequest';
import ListFiltersResponse from '../model/ListFiltersResponse';
import ListFindingAggregationsRequest from '../model/ListFindingAggregationsRequest';
import ListFindingAggregationsResponse from '../model/ListFindingAggregationsResponse';
import ListFindingsRequest from '../model/ListFindingsRequest';
import ListFindingsResponse from '../model/ListFindingsResponse';
import ListMembersRequest from '../model/ListMembersRequest';
import ListMembersResponse from '../model/ListMembersResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListUsageTotalsRequest from '../model/ListUsageTotalsRequest';
import ListUsageTotalsResponse from '../model/ListUsageTotalsResponse';
import ResetEncryptionKeyRequest from '../model/ResetEncryptionKeyRequest';
import SearchVulnerabilitiesRequest from '../model/SearchVulnerabilitiesRequest';
import SearchVulnerabilitiesResponse from '../model/SearchVulnerabilitiesResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateConfigurationRequest from '../model/UpdateConfigurationRequest';
import UpdateEc2DeepInspectionConfigurationRequest from '../model/UpdateEc2DeepInspectionConfigurationRequest';
import UpdateEc2DeepInspectionConfigurationResponse from '../model/UpdateEc2DeepInspectionConfigurationResponse';
import UpdateEncryptionKeyRequest from '../model/UpdateEncryptionKeyRequest';
import UpdateFilterRequest from '../model/UpdateFilterRequest';
import UpdateFilterResponse from '../model/UpdateFilterResponse';
import UpdateOrgEc2DeepInspectionConfigurationRequest from '../model/UpdateOrgEc2DeepInspectionConfigurationRequest';
import UpdateOrganizationConfigurationRequest from '../model/UpdateOrganizationConfigurationRequest';
import UpdateOrganizationConfigurationResponse from '../model/UpdateOrganizationConfigurationResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-06-08
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateMember operation.
     * @callback module:api/DefaultApi~associateMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates an Amazon Web Services account with an Amazon Inspector delegated administrator. An HTTP 200 response indicates the association was successfully started, but doesnâ€™t indicate whether it was completed. You can check if the association completed by using <a href=\"https://docs.aws.amazon.com/inspector/v2/APIReference/API_ListMembers.html\">ListMembers</a> for multiple accounts or <a href=\"https://docs.aws.amazon.com/inspector/v2/APIReference/API_GetMember.html\">GetMembers</a> for a single account.
     * @param {module:model/AssociateMemberRequest} associateMemberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateMemberResponse}
     */
    associateMember(associateMemberRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateMemberRequest;
      // verify the required parameter 'associateMemberRequest' is set
      if (associateMemberRequest === undefined || associateMemberRequest === null) {
        throw new Error("Missing the required parameter 'associateMemberRequest' when calling associateMember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateMemberResponse;
      return this.apiClient.callApi(
        '/members/associate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetAccountStatus operation.
     * @callback module:api/DefaultApi~batchGetAccountStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetAccountStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the Amazon Inspector status of multiple Amazon Web Services accounts within your environment.
     * @param {module:model/BatchGetAccountStatusRequest} batchGetAccountStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetAccountStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetAccountStatusResponse}
     */
    batchGetAccountStatus(batchGetAccountStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetAccountStatusRequest;
      // verify the required parameter 'batchGetAccountStatusRequest' is set
      if (batchGetAccountStatusRequest === undefined || batchGetAccountStatusRequest === null) {
        throw new Error("Missing the required parameter 'batchGetAccountStatusRequest' when calling batchGetAccountStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetAccountStatusResponse;
      return this.apiClient.callApi(
        '/status/batch/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetCodeSnippet operation.
     * @callback module:api/DefaultApi~batchGetCodeSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetCodeSnippetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves code snippets from findings that Amazon Inspector detected code vulnerabilities in.
     * @param {module:model/BatchGetCodeSnippetRequest} batchGetCodeSnippetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetCodeSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetCodeSnippetResponse}
     */
    batchGetCodeSnippet(batchGetCodeSnippetRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetCodeSnippetRequest;
      // verify the required parameter 'batchGetCodeSnippetRequest' is set
      if (batchGetCodeSnippetRequest === undefined || batchGetCodeSnippetRequest === null) {
        throw new Error("Missing the required parameter 'batchGetCodeSnippetRequest' when calling batchGetCodeSnippet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetCodeSnippetResponse;
      return this.apiClient.callApi(
        '/codesnippet/batchget', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetFindingDetails operation.
     * @callback module:api/DefaultApi~batchGetFindingDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetFindingDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets vulnerability details for findings.
     * @param {module:model/BatchGetFindingDetailsRequest} batchGetFindingDetailsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetFindingDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetFindingDetailsResponse}
     */
    batchGetFindingDetails(batchGetFindingDetailsRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetFindingDetailsRequest;
      // verify the required parameter 'batchGetFindingDetailsRequest' is set
      if (batchGetFindingDetailsRequest === undefined || batchGetFindingDetailsRequest === null) {
        throw new Error("Missing the required parameter 'batchGetFindingDetailsRequest' when calling batchGetFindingDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetFindingDetailsResponse;
      return this.apiClient.callApi(
        '/findings/details/batch/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetFreeTrialInfo operation.
     * @callback module:api/DefaultApi~batchGetFreeTrialInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetFreeTrialInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets free trial status for multiple Amazon Web Services accounts.
     * @param {module:model/BatchGetFreeTrialInfoRequest} batchGetFreeTrialInfoRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetFreeTrialInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetFreeTrialInfoResponse}
     */
    batchGetFreeTrialInfo(batchGetFreeTrialInfoRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetFreeTrialInfoRequest;
      // verify the required parameter 'batchGetFreeTrialInfoRequest' is set
      if (batchGetFreeTrialInfoRequest === undefined || batchGetFreeTrialInfoRequest === null) {
        throw new Error("Missing the required parameter 'batchGetFreeTrialInfoRequest' when calling batchGetFreeTrialInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetFreeTrialInfoResponse;
      return this.apiClient.callApi(
        '/freetrialinfo/batchget', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetMemberEc2DeepInspectionStatus operation.
     * @callback module:api/DefaultApi~batchGetMemberEc2DeepInspectionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetMemberEc2DeepInspectionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves Amazon Inspector deep inspection activation status of multiple member accounts within your organization. You must be the delegated administrator of an organization in Amazon Inspector to use this API.
     * @param {module:model/BatchGetMemberEc2DeepInspectionStatusRequest} batchGetMemberEc2DeepInspectionStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetMemberEc2DeepInspectionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetMemberEc2DeepInspectionStatusResponse}
     */
    batchGetMemberEc2DeepInspectionStatus(batchGetMemberEc2DeepInspectionStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetMemberEc2DeepInspectionStatusRequest;
      // verify the required parameter 'batchGetMemberEc2DeepInspectionStatusRequest' is set
      if (batchGetMemberEc2DeepInspectionStatusRequest === undefined || batchGetMemberEc2DeepInspectionStatusRequest === null) {
        throw new Error("Missing the required parameter 'batchGetMemberEc2DeepInspectionStatusRequest' when calling batchGetMemberEc2DeepInspectionStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetMemberEc2DeepInspectionStatusResponse;
      return this.apiClient.callApi(
        '/ec2deepinspectionstatus/member/batch/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchUpdateMemberEc2DeepInspectionStatus operation.
     * @callback module:api/DefaultApi~batchUpdateMemberEc2DeepInspectionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateMemberEc2DeepInspectionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates or deactivates Amazon Inspector deep inspection for the provided member accounts in your organization. You must be the delegated administrator of an organization in Amazon Inspector to use this API.
     * @param {module:model/BatchUpdateMemberEc2DeepInspectionStatusRequest} batchUpdateMemberEc2DeepInspectionStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchUpdateMemberEc2DeepInspectionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateMemberEc2DeepInspectionStatusResponse}
     */
    batchUpdateMemberEc2DeepInspectionStatus(batchUpdateMemberEc2DeepInspectionStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchUpdateMemberEc2DeepInspectionStatusRequest;
      // verify the required parameter 'batchUpdateMemberEc2DeepInspectionStatusRequest' is set
      if (batchUpdateMemberEc2DeepInspectionStatusRequest === undefined || batchUpdateMemberEc2DeepInspectionStatusRequest === null) {
        throw new Error("Missing the required parameter 'batchUpdateMemberEc2DeepInspectionStatusRequest' when calling batchUpdateMemberEc2DeepInspectionStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateMemberEc2DeepInspectionStatusResponse;
      return this.apiClient.callApi(
        '/ec2deepinspectionstatus/member/batch/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelFindingsReport operation.
     * @callback module:api/DefaultApi~cancelFindingsReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelFindingsReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the given findings report.
     * @param {module:model/CancelFindingsReportRequest} cancelFindingsReportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelFindingsReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelFindingsReportResponse}
     */
    cancelFindingsReport(cancelFindingsReportRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelFindingsReportRequest;
      // verify the required parameter 'cancelFindingsReportRequest' is set
      if (cancelFindingsReportRequest === undefined || cancelFindingsReportRequest === null) {
        throw new Error("Missing the required parameter 'cancelFindingsReportRequest' when calling cancelFindingsReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelFindingsReportResponse;
      return this.apiClient.callApi(
        '/reporting/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelSbomExport operation.
     * @callback module:api/DefaultApi~cancelSbomExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelSbomExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a software bill of materials (SBOM) report.
     * @param {module:model/CancelSbomExportRequest} cancelSbomExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelSbomExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelSbomExportResponse}
     */
    cancelSbomExport(cancelSbomExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelSbomExportRequest;
      // verify the required parameter 'cancelSbomExportRequest' is set
      if (cancelSbomExportRequest === undefined || cancelSbomExportRequest === null) {
        throw new Error("Missing the required parameter 'cancelSbomExportRequest' when calling cancelSbomExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelSbomExportResponse;
      return this.apiClient.callApi(
        '/sbomexport/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFilter operation.
     * @callback module:api/DefaultApi~createFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a filter resource using specified filter criteria.
     * @param {module:model/CreateFilterRequest} createFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFilterResponse}
     */
    createFilter(createFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFilterRequest;
      // verify the required parameter 'createFilterRequest' is set
      if (createFilterRequest === undefined || createFilterRequest === null) {
        throw new Error("Missing the required parameter 'createFilterRequest' when calling createFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFilterResponse;
      return this.apiClient.callApi(
        '/filters/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFindingsReport operation.
     * @callback module:api/DefaultApi~createFindingsReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFindingsReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a finding report. By default only <code>ACTIVE</code> findings are returned in the report. To see <code>SUPRESSED</code> or <code>CLOSED</code> findings you must specify a value for the <code>findingStatus</code> filter criteria. 
     * @param {module:model/CreateFindingsReportRequest} createFindingsReportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFindingsReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFindingsReportResponse}
     */
    createFindingsReport(createFindingsReportRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFindingsReportRequest;
      // verify the required parameter 'createFindingsReportRequest' is set
      if (createFindingsReportRequest === undefined || createFindingsReportRequest === null) {
        throw new Error("Missing the required parameter 'createFindingsReportRequest' when calling createFindingsReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFindingsReportResponse;
      return this.apiClient.callApi(
        '/reporting/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSbomExport operation.
     * @callback module:api/DefaultApi~createSbomExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSbomExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a software bill of materials (SBOM) report.
     * @param {module:model/CreateSbomExportRequest} createSbomExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSbomExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSbomExportResponse}
     */
    createSbomExport(createSbomExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSbomExportRequest;
      // verify the required parameter 'createSbomExportRequest' is set
      if (createSbomExportRequest === undefined || createSbomExportRequest === null) {
        throw new Error("Missing the required parameter 'createSbomExportRequest' when calling createSbomExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSbomExportResponse;
      return this.apiClient.callApi(
        '/sbomexport/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFilter operation.
     * @callback module:api/DefaultApi~deleteFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a filter resource.
     * @param {module:model/DeleteFilterRequest} deleteFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFilterResponse}
     */
    deleteFilter(deleteFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFilterRequest;
      // verify the required parameter 'deleteFilterRequest' is set
      if (deleteFilterRequest === undefined || deleteFilterRequest === null) {
        throw new Error("Missing the required parameter 'deleteFilterRequest' when calling deleteFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteFilterResponse;
      return this.apiClient.callApi(
        '/filters/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeOrganizationConfiguration operation.
     * @callback module:api/DefaultApi~describeOrganizationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeOrganizationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe Amazon Inspector configuration settings for an Amazon Web Services organization.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeOrganizationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeOrganizationConfigurationResponse}
     */
    describeOrganizationConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeOrganizationConfigurationResponse;
      return this.apiClient.callApi(
        '/organizationconfiguration/describe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disable operation.
     * @callback module:api/DefaultApi~disableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables Amazon Inspector scans for one or more Amazon Web Services accounts. Disabling all scan types in an account disables the Amazon Inspector service.
     * @param {module:model/DisableRequest} disableRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableResponse}
     */
    disable(disableRequest, opts, callback) {
      opts = opts || {};
      let postBody = disableRequest;
      // verify the required parameter 'disableRequest' is set
      if (disableRequest === undefined || disableRequest === null) {
        throw new Error("Missing the required parameter 'disableRequest' when calling disable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisableResponse;
      return this.apiClient.callApi(
        '/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableDelegatedAdminAccount operation.
     * @callback module:api/DefaultApi~disableDelegatedAdminAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableDelegatedAdminAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the Amazon Inspector delegated administrator for your organization.
     * @param {module:model/DisableDelegatedAdminAccountRequest} disableDelegatedAdminAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disableDelegatedAdminAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableDelegatedAdminAccountResponse}
     */
    disableDelegatedAdminAccount(disableDelegatedAdminAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = disableDelegatedAdminAccountRequest;
      // verify the required parameter 'disableDelegatedAdminAccountRequest' is set
      if (disableDelegatedAdminAccountRequest === undefined || disableDelegatedAdminAccountRequest === null) {
        throw new Error("Missing the required parameter 'disableDelegatedAdminAccountRequest' when calling disableDelegatedAdminAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisableDelegatedAdminAccountResponse;
      return this.apiClient.callApi(
        '/delegatedadminaccounts/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateMember operation.
     * @callback module:api/DefaultApi~disassociateMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a member account from an Amazon Inspector delegated administrator.
     * @param {module:model/DisassociateMemberRequest} disassociateMemberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateMemberResponse}
     */
    disassociateMember(disassociateMemberRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateMemberRequest;
      // verify the required parameter 'disassociateMemberRequest' is set
      if (disassociateMemberRequest === undefined || disassociateMemberRequest === null) {
        throw new Error("Missing the required parameter 'disassociateMemberRequest' when calling disassociateMember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateMemberResponse;
      return this.apiClient.callApi(
        '/members/disassociate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enable operation.
     * @callback module:api/DefaultApi~enableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables Amazon Inspector scans for one or more Amazon Web Services accounts.
     * @param {module:model/EnableRequest} enableRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~enableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableResponse}
     */
    enable(enableRequest, opts, callback) {
      opts = opts || {};
      let postBody = enableRequest;
      // verify the required parameter 'enableRequest' is set
      if (enableRequest === undefined || enableRequest === null) {
        throw new Error("Missing the required parameter 'enableRequest' when calling enable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnableResponse;
      return this.apiClient.callApi(
        '/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableDelegatedAdminAccount operation.
     * @callback module:api/DefaultApi~enableDelegatedAdminAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableDelegatedAdminAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the Amazon Inspector delegated administrator for your Organizations organization.
     * @param {module:model/EnableDelegatedAdminAccountRequest} enableDelegatedAdminAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~enableDelegatedAdminAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableDelegatedAdminAccountResponse}
     */
    enableDelegatedAdminAccount(enableDelegatedAdminAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = enableDelegatedAdminAccountRequest;
      // verify the required parameter 'enableDelegatedAdminAccountRequest' is set
      if (enableDelegatedAdminAccountRequest === undefined || enableDelegatedAdminAccountRequest === null) {
        throw new Error("Missing the required parameter 'enableDelegatedAdminAccountRequest' when calling enableDelegatedAdminAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnableDelegatedAdminAccountResponse;
      return this.apiClient.callApi(
        '/delegatedadminaccounts/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguration operation.
     * @callback module:api/DefaultApi~getConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves setting configurations for Inspector scans.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfigurationResponse}
     */
    getConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfigurationResponse;
      return this.apiClient.callApi(
        '/configuration/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDelegatedAdminAccount operation.
     * @callback module:api/DefaultApi~getDelegatedAdminAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDelegatedAdminAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the Amazon Inspector delegated administrator for your organization.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDelegatedAdminAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDelegatedAdminAccountResponse}
     */
    getDelegatedAdminAccount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDelegatedAdminAccountResponse;
      return this.apiClient.callApi(
        '/delegatedadminaccounts/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEc2DeepInspectionConfiguration operation.
     * @callback module:api/DefaultApi~getEc2DeepInspectionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEc2DeepInspectionConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the activation status of Amazon Inspector deep inspection and custom paths associated with your account. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEc2DeepInspectionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEc2DeepInspectionConfigurationResponse}
     */
    getEc2DeepInspectionConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEc2DeepInspectionConfigurationResponse;
      return this.apiClient.callApi(
        '/ec2deepinspectionconfiguration/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEncryptionKey operation.
     * @callback module:api/DefaultApi~getEncryptionKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEncryptionKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an encryption key.
     * @param {module:model/String} resourceType The resource type the key encrypts.
     * @param {module:model/String} scanType The scan type the key encrypts.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEncryptionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEncryptionKeyResponse}
     */
    getEncryptionKey(resourceType, scanType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getEncryptionKey");
      }
      // verify the required parameter 'scanType' is set
      if (scanType === undefined || scanType === null) {
        throw new Error("Missing the required parameter 'scanType' when calling getEncryptionKey");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceType': resourceType,
        'scanType': scanType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEncryptionKeyResponse;
      return this.apiClient.callApi(
        '/encryptionkey/get#resourceType&scanType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFindingsReportStatus operation.
     * @callback module:api/DefaultApi~getFindingsReportStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFindingsReportStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of a findings report.
     * @param {module:model/GetFindingsReportStatusRequest} getFindingsReportStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFindingsReportStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFindingsReportStatusResponse}
     */
    getFindingsReportStatus(getFindingsReportStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = getFindingsReportStatusRequest;
      // verify the required parameter 'getFindingsReportStatusRequest' is set
      if (getFindingsReportStatusRequest === undefined || getFindingsReportStatusRequest === null) {
        throw new Error("Missing the required parameter 'getFindingsReportStatusRequest' when calling getFindingsReportStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFindingsReportStatusResponse;
      return this.apiClient.callApi(
        '/reporting/status/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMember operation.
     * @callback module:api/DefaultApi~getMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets member information for your organization.
     * @param {module:model/GetMemberRequest} getMemberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMemberResponse}
     */
    getMember(getMemberRequest, opts, callback) {
      opts = opts || {};
      let postBody = getMemberRequest;
      // verify the required parameter 'getMemberRequest' is set
      if (getMemberRequest === undefined || getMemberRequest === null) {
        throw new Error("Missing the required parameter 'getMemberRequest' when calling getMember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMemberResponse;
      return this.apiClient.callApi(
        '/members/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSbomExport operation.
     * @callback module:api/DefaultApi~getSbomExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSbomExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details of a software bill of materials (SBOM) report.
     * @param {module:model/GetSbomExportRequest} getSbomExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSbomExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSbomExportResponse}
     */
    getSbomExport(getSbomExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSbomExportRequest;
      // verify the required parameter 'getSbomExportRequest' is set
      if (getSbomExportRequest === undefined || getSbomExportRequest === null) {
        throw new Error("Missing the required parameter 'getSbomExportRequest' when calling getSbomExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSbomExportResponse;
      return this.apiClient.callApi(
        '/sbomexport/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountPermissions operation.
     * @callback module:api/DefaultApi~listAccountPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccountPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the permissions an account has to configure Amazon Inspector.
     * @param {module:model/ListAccountPermissionsRequest} listAccountPermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAccountPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccountPermissionsResponse}
     */
    listAccountPermissions(listAccountPermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAccountPermissionsRequest;
      // verify the required parameter 'listAccountPermissionsRequest' is set
      if (listAccountPermissionsRequest === undefined || listAccountPermissionsRequest === null) {
        throw new Error("Missing the required parameter 'listAccountPermissionsRequest' when calling listAccountPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAccountPermissionsResponse;
      return this.apiClient.callApi(
        '/accountpermissions/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoverage operation.
     * @callback module:api/DefaultApi~listCoverageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCoverageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists coverage details for you environment.
     * @param {module:model/ListCoverageRequest} listCoverageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCoverageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCoverageResponse}
     */
    listCoverage(listCoverageRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCoverageRequest;
      // verify the required parameter 'listCoverageRequest' is set
      if (listCoverageRequest === undefined || listCoverageRequest === null) {
        throw new Error("Missing the required parameter 'listCoverageRequest' when calling listCoverage");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCoverageResponse;
      return this.apiClient.callApi(
        '/coverage/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoverageStatistics operation.
     * @callback module:api/DefaultApi~listCoverageStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCoverageStatisticsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Amazon Inspector coverage statistics for your environment.
     * @param {module:model/ListCoverageStatisticsRequest} listCoverageStatisticsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCoverageStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCoverageStatisticsResponse}
     */
    listCoverageStatistics(listCoverageStatisticsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCoverageStatisticsRequest;
      // verify the required parameter 'listCoverageStatisticsRequest' is set
      if (listCoverageStatisticsRequest === undefined || listCoverageStatisticsRequest === null) {
        throw new Error("Missing the required parameter 'listCoverageStatisticsRequest' when calling listCoverageStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCoverageStatisticsResponse;
      return this.apiClient.callApi(
        '/coverage/statistics/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDelegatedAdminAccounts operation.
     * @callback module:api/DefaultApi~listDelegatedAdminAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDelegatedAdminAccountsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information about the Amazon Inspector delegated administrator of your organization.
     * @param {module:model/ListDelegatedAdminAccountsRequest} listDelegatedAdminAccountsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDelegatedAdminAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDelegatedAdminAccountsResponse}
     */
    listDelegatedAdminAccounts(listDelegatedAdminAccountsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDelegatedAdminAccountsRequest;
      // verify the required parameter 'listDelegatedAdminAccountsRequest' is set
      if (listDelegatedAdminAccountsRequest === undefined || listDelegatedAdminAccountsRequest === null) {
        throw new Error("Missing the required parameter 'listDelegatedAdminAccountsRequest' when calling listDelegatedAdminAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDelegatedAdminAccountsResponse;
      return this.apiClient.callApi(
        '/delegatedadminaccounts/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFilters operation.
     * @callback module:api/DefaultApi~listFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFiltersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the filters associated with your account.
     * @param {module:model/ListFiltersRequest} listFiltersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFiltersResponse}
     */
    listFilters(listFiltersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFiltersRequest;
      // verify the required parameter 'listFiltersRequest' is set
      if (listFiltersRequest === undefined || listFiltersRequest === null) {
        throw new Error("Missing the required parameter 'listFiltersRequest' when calling listFilters");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFiltersResponse;
      return this.apiClient.callApi(
        '/filters/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFindingAggregations operation.
     * @callback module:api/DefaultApi~listFindingAggregationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFindingAggregationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists aggregated finding data for your environment based on specific criteria.
     * @param {module:model/ListFindingAggregationsRequest} listFindingAggregationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFindingAggregationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFindingAggregationsResponse}
     */
    listFindingAggregations(listFindingAggregationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFindingAggregationsRequest;
      // verify the required parameter 'listFindingAggregationsRequest' is set
      if (listFindingAggregationsRequest === undefined || listFindingAggregationsRequest === null) {
        throw new Error("Missing the required parameter 'listFindingAggregationsRequest' when calling listFindingAggregations");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFindingAggregationsResponse;
      return this.apiClient.callApi(
        '/findings/aggregation/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFindings operation.
     * @callback module:api/DefaultApi~listFindingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFindingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists findings for your environment.
     * @param {module:model/ListFindingsRequest} listFindingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFindingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFindingsResponse}
     */
    listFindings(listFindingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFindingsRequest;
      // verify the required parameter 'listFindingsRequest' is set
      if (listFindingsRequest === undefined || listFindingsRequest === null) {
        throw new Error("Missing the required parameter 'listFindingsRequest' when calling listFindings");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFindingsResponse;
      return this.apiClient.callApi(
        '/findings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMembers operation.
     * @callback module:api/DefaultApi~listMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List members associated with the Amazon Inspector delegated administrator for your organization.
     * @param {module:model/ListMembersRequest} listMembersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMembersResponse}
     */
    listMembers(listMembersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMembersRequest;
      // verify the required parameter 'listMembersRequest' is set
      if (listMembersRequest === undefined || listMembersRequest === null) {
        throw new Error("Missing the required parameter 'listMembersRequest' when calling listMembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMembersResponse;
      return this.apiClient.callApi(
        '/members/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags attached to a given resource.
     * @param {String} resourceArn The Amazon resource number (ARN) of the resource to list tags of.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsageTotals operation.
     * @callback module:api/DefaultApi~listUsageTotalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsageTotalsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Amazon Inspector usage totals over the last 30 days.
     * @param {module:model/ListUsageTotalsRequest} listUsageTotalsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listUsageTotalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsageTotalsResponse}
     */
    listUsageTotals(listUsageTotalsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUsageTotalsRequest;
      // verify the required parameter 'listUsageTotalsRequest' is set
      if (listUsageTotalsRequest === undefined || listUsageTotalsRequest === null) {
        throw new Error("Missing the required parameter 'listUsageTotalsRequest' when calling listUsageTotals");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUsageTotalsResponse;
      return this.apiClient.callApi(
        '/usage/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetEncryptionKey operation.
     * @callback module:api/DefaultApi~resetEncryptionKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets an encryption key. After the key is reset your resources will be encrypted by an Amazon Web Services owned key.
     * @param {module:model/ResetEncryptionKeyRequest} resetEncryptionKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resetEncryptionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resetEncryptionKey(resetEncryptionKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = resetEncryptionKeyRequest;
      // verify the required parameter 'resetEncryptionKeyRequest' is set
      if (resetEncryptionKeyRequest === undefined || resetEncryptionKeyRequest === null) {
        throw new Error("Missing the required parameter 'resetEncryptionKeyRequest' when calling resetEncryptionKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/encryptionkey/reset', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVulnerabilities operation.
     * @callback module:api/DefaultApi~searchVulnerabilitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchVulnerabilitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Amazon Inspector coverage details for a specific vulnerability.
     * @param {module:model/SearchVulnerabilitiesRequest} searchVulnerabilitiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchVulnerabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchVulnerabilitiesResponse}
     */
    searchVulnerabilities(searchVulnerabilitiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchVulnerabilitiesRequest;
      // verify the required parameter 'searchVulnerabilitiesRequest' is set
      if (searchVulnerabilitiesRequest === undefined || searchVulnerabilitiesRequest === null) {
        throw new Error("Missing the required parameter 'searchVulnerabilitiesRequest' when calling searchVulnerabilities");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchVulnerabilitiesResponse;
      return this.apiClient.callApi(
        '/vulnerabilities/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds tags to a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource to apply a tag to.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for the resource to remove tags from.
     * @param {Array.<String>} tagKeys The tag keys to remove from the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfiguration operation.
     * @callback module:api/DefaultApi~updateConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates setting configurations for your Amazon Inspector account. When you use this API as an Amazon Inspector delegated administrator this updates the setting for all accounts you manage. Member accounts in an organization cannot update this setting.
     * @param {module:model/UpdateConfigurationRequest} updateConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateConfiguration(updateConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfigurationRequest;
      // verify the required parameter 'updateConfigurationRequest' is set
      if (updateConfigurationRequest === undefined || updateConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateConfigurationRequest' when calling updateConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/configuration/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEc2DeepInspectionConfiguration operation.
     * @callback module:api/DefaultApi~updateEc2DeepInspectionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEc2DeepInspectionConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates, deactivates Amazon Inspector deep inspection, or updates custom paths for your account. 
     * @param {module:model/UpdateEc2DeepInspectionConfigurationRequest} updateEc2DeepInspectionConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEc2DeepInspectionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEc2DeepInspectionConfigurationResponse}
     */
    updateEc2DeepInspectionConfiguration(updateEc2DeepInspectionConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEc2DeepInspectionConfigurationRequest;
      // verify the required parameter 'updateEc2DeepInspectionConfigurationRequest' is set
      if (updateEc2DeepInspectionConfigurationRequest === undefined || updateEc2DeepInspectionConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateEc2DeepInspectionConfigurationRequest' when calling updateEc2DeepInspectionConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEc2DeepInspectionConfigurationResponse;
      return this.apiClient.callApi(
        '/ec2deepinspectionconfiguration/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEncryptionKey operation.
     * @callback module:api/DefaultApi~updateEncryptionKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an encryption key. A <code>ResourceNotFoundException</code> means that an AWS owned key is being used for encryption.
     * @param {module:model/UpdateEncryptionKeyRequest} updateEncryptionKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEncryptionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateEncryptionKey(updateEncryptionKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEncryptionKeyRequest;
      // verify the required parameter 'updateEncryptionKeyRequest' is set
      if (updateEncryptionKeyRequest === undefined || updateEncryptionKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateEncryptionKeyRequest' when calling updateEncryptionKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/encryptionkey/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFilter operation.
     * @callback module:api/DefaultApi~updateFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specifies the action that is to be applied to the findings that match the filter.
     * @param {module:model/UpdateFilterRequest} updateFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFilterResponse}
     */
    updateFilter(updateFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFilterRequest;
      // verify the required parameter 'updateFilterRequest' is set
      if (updateFilterRequest === undefined || updateFilterRequest === null) {
        throw new Error("Missing the required parameter 'updateFilterRequest' when calling updateFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFilterResponse;
      return this.apiClient.callApi(
        '/filters/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrgEc2DeepInspectionConfiguration operation.
     * @callback module:api/DefaultApi~updateOrgEc2DeepInspectionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Amazon Inspector deep inspection custom paths for your organization. You must be an Amazon Inspector delegated administrator to use this API.
     * @param {module:model/UpdateOrgEc2DeepInspectionConfigurationRequest} updateOrgEc2DeepInspectionConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateOrgEc2DeepInspectionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrgEc2DeepInspectionConfiguration(updateOrgEc2DeepInspectionConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateOrgEc2DeepInspectionConfigurationRequest;
      // verify the required parameter 'updateOrgEc2DeepInspectionConfigurationRequest' is set
      if (updateOrgEc2DeepInspectionConfigurationRequest === undefined || updateOrgEc2DeepInspectionConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateOrgEc2DeepInspectionConfigurationRequest' when calling updateOrgEc2DeepInspectionConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/ec2deepinspectionconfiguration/org/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationConfiguration operation.
     * @callback module:api/DefaultApi~updateOrganizationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateOrganizationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configurations for your Amazon Inspector organization.
     * @param {module:model/UpdateOrganizationConfigurationRequest} updateOrganizationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateOrganizationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateOrganizationConfigurationResponse}
     */
    updateOrganizationConfiguration(updateOrganizationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateOrganizationConfigurationRequest;
      // verify the required parameter 'updateOrganizationConfigurationRequest' is set
      if (updateOrganizationConfigurationRequest === undefined || updateOrganizationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateOrganizationConfigurationRequest' when calling updateOrganizationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateOrganizationConfigurationResponse;
      return this.apiClient.callApi(
        '/organizationconfiguration/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
