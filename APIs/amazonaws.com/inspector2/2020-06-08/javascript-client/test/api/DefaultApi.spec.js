/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Inspector2);
  }
}(this, function(expect, Inspector2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Inspector2.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateMember', function() {
      it('should call associateMember successfully', function(done) {
        //uncomment below and update the code to test associateMember
        //instance.associateMember(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetAccountStatus', function() {
      it('should call batchGetAccountStatus successfully', function(done) {
        //uncomment below and update the code to test batchGetAccountStatus
        //instance.batchGetAccountStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetCodeSnippet', function() {
      it('should call batchGetCodeSnippet successfully', function(done) {
        //uncomment below and update the code to test batchGetCodeSnippet
        //instance.batchGetCodeSnippet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetFindingDetails', function() {
      it('should call batchGetFindingDetails successfully', function(done) {
        //uncomment below and update the code to test batchGetFindingDetails
        //instance.batchGetFindingDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetFreeTrialInfo', function() {
      it('should call batchGetFreeTrialInfo successfully', function(done) {
        //uncomment below and update the code to test batchGetFreeTrialInfo
        //instance.batchGetFreeTrialInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetMemberEc2DeepInspectionStatus', function() {
      it('should call batchGetMemberEc2DeepInspectionStatus successfully', function(done) {
        //uncomment below and update the code to test batchGetMemberEc2DeepInspectionStatus
        //instance.batchGetMemberEc2DeepInspectionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchUpdateMemberEc2DeepInspectionStatus', function() {
      it('should call batchUpdateMemberEc2DeepInspectionStatus successfully', function(done) {
        //uncomment below and update the code to test batchUpdateMemberEc2DeepInspectionStatus
        //instance.batchUpdateMemberEc2DeepInspectionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelFindingsReport', function() {
      it('should call cancelFindingsReport successfully', function(done) {
        //uncomment below and update the code to test cancelFindingsReport
        //instance.cancelFindingsReport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelSbomExport', function() {
      it('should call cancelSbomExport successfully', function(done) {
        //uncomment below and update the code to test cancelSbomExport
        //instance.cancelSbomExport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFilter', function() {
      it('should call createFilter successfully', function(done) {
        //uncomment below and update the code to test createFilter
        //instance.createFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFindingsReport', function() {
      it('should call createFindingsReport successfully', function(done) {
        //uncomment below and update the code to test createFindingsReport
        //instance.createFindingsReport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSbomExport', function() {
      it('should call createSbomExport successfully', function(done) {
        //uncomment below and update the code to test createSbomExport
        //instance.createSbomExport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFilter', function() {
      it('should call deleteFilter successfully', function(done) {
        //uncomment below and update the code to test deleteFilter
        //instance.deleteFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOrganizationConfiguration', function() {
      it('should call describeOrganizationConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeOrganizationConfiguration
        //instance.describeOrganizationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disable', function() {
      it('should call disable successfully', function(done) {
        //uncomment below and update the code to test disable
        //instance.disable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableDelegatedAdminAccount', function() {
      it('should call disableDelegatedAdminAccount successfully', function(done) {
        //uncomment below and update the code to test disableDelegatedAdminAccount
        //instance.disableDelegatedAdminAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateMember', function() {
      it('should call disassociateMember successfully', function(done) {
        //uncomment below and update the code to test disassociateMember
        //instance.disassociateMember(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enable', function() {
      it('should call enable successfully', function(done) {
        //uncomment below and update the code to test enable
        //instance.enable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableDelegatedAdminAccount', function() {
      it('should call enableDelegatedAdminAccount successfully', function(done) {
        //uncomment below and update the code to test enableDelegatedAdminAccount
        //instance.enableDelegatedAdminAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfiguration', function() {
      it('should call getConfiguration successfully', function(done) {
        //uncomment below and update the code to test getConfiguration
        //instance.getConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDelegatedAdminAccount', function() {
      it('should call getDelegatedAdminAccount successfully', function(done) {
        //uncomment below and update the code to test getDelegatedAdminAccount
        //instance.getDelegatedAdminAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEc2DeepInspectionConfiguration', function() {
      it('should call getEc2DeepInspectionConfiguration successfully', function(done) {
        //uncomment below and update the code to test getEc2DeepInspectionConfiguration
        //instance.getEc2DeepInspectionConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEncryptionKey', function() {
      it('should call getEncryptionKey successfully', function(done) {
        //uncomment below and update the code to test getEncryptionKey
        //instance.getEncryptionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFindingsReportStatus', function() {
      it('should call getFindingsReportStatus successfully', function(done) {
        //uncomment below and update the code to test getFindingsReportStatus
        //instance.getFindingsReportStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMember', function() {
      it('should call getMember successfully', function(done) {
        //uncomment below and update the code to test getMember
        //instance.getMember(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSbomExport', function() {
      it('should call getSbomExport successfully', function(done) {
        //uncomment below and update the code to test getSbomExport
        //instance.getSbomExport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccountPermissions', function() {
      it('should call listAccountPermissions successfully', function(done) {
        //uncomment below and update the code to test listAccountPermissions
        //instance.listAccountPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoverage', function() {
      it('should call listCoverage successfully', function(done) {
        //uncomment below and update the code to test listCoverage
        //instance.listCoverage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoverageStatistics', function() {
      it('should call listCoverageStatistics successfully', function(done) {
        //uncomment below and update the code to test listCoverageStatistics
        //instance.listCoverageStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDelegatedAdminAccounts', function() {
      it('should call listDelegatedAdminAccounts successfully', function(done) {
        //uncomment below and update the code to test listDelegatedAdminAccounts
        //instance.listDelegatedAdminAccounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFilters', function() {
      it('should call listFilters successfully', function(done) {
        //uncomment below and update the code to test listFilters
        //instance.listFilters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFindingAggregations', function() {
      it('should call listFindingAggregations successfully', function(done) {
        //uncomment below and update the code to test listFindingAggregations
        //instance.listFindingAggregations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFindings', function() {
      it('should call listFindings successfully', function(done) {
        //uncomment below and update the code to test listFindings
        //instance.listFindings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMembers', function() {
      it('should call listMembers successfully', function(done) {
        //uncomment below and update the code to test listMembers
        //instance.listMembers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsageTotals', function() {
      it('should call listUsageTotals successfully', function(done) {
        //uncomment below and update the code to test listUsageTotals
        //instance.listUsageTotals(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetEncryptionKey', function() {
      it('should call resetEncryptionKey successfully', function(done) {
        //uncomment below and update the code to test resetEncryptionKey
        //instance.resetEncryptionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchVulnerabilities', function() {
      it('should call searchVulnerabilities successfully', function(done) {
        //uncomment below and update the code to test searchVulnerabilities
        //instance.searchVulnerabilities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConfiguration', function() {
      it('should call updateConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateConfiguration
        //instance.updateConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEc2DeepInspectionConfiguration', function() {
      it('should call updateEc2DeepInspectionConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateEc2DeepInspectionConfiguration
        //instance.updateEc2DeepInspectionConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEncryptionKey', function() {
      it('should call updateEncryptionKey successfully', function(done) {
        //uncomment below and update the code to test updateEncryptionKey
        //instance.updateEncryptionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFilter', function() {
      it('should call updateFilter successfully', function(done) {
        //uncomment below and update the code to test updateFilter
        //instance.updateFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOrgEc2DeepInspectionConfiguration', function() {
      it('should call updateOrgEc2DeepInspectionConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateOrgEc2DeepInspectionConfiguration
        //instance.updateOrgEc2DeepInspectionConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOrganizationConfiguration', function() {
      it('should call updateOrganizationConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateOrganizationConfiguration
        //instance.updateOrganizationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
