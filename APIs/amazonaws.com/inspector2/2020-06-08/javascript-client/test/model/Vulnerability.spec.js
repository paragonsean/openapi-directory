/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Inspector2);
  }
}(this, function(expect, Inspector2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Inspector2.Vulnerability();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Vulnerability', function() {
    it('should create an instance of Vulnerability', function() {
      // uncomment below and update the code to test Vulnerability
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be.a(Inspector2.Vulnerability);
    });

    it('should have the property atigData (base name: "atigData")', function() {
      // uncomment below and update the code to test the property atigData
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property cisaData (base name: "cisaData")', function() {
      // uncomment below and update the code to test the property cisaData
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property cvss2 (base name: "cvss2")', function() {
      // uncomment below and update the code to test the property cvss2
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property cvss3 (base name: "cvss3")', function() {
      // uncomment below and update the code to test the property cvss3
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property cwes (base name: "cwes")', function() {
      // uncomment below and update the code to test the property cwes
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property detectionPlatforms (base name: "detectionPlatforms")', function() {
      // uncomment below and update the code to test the property detectionPlatforms
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property epss (base name: "epss")', function() {
      // uncomment below and update the code to test the property epss
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property exploitObserved (base name: "exploitObserved")', function() {
      // uncomment below and update the code to test the property exploitObserved
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property referenceUrls (base name: "referenceUrls")', function() {
      // uncomment below and update the code to test the property referenceUrls
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property relatedVulnerabilities (base name: "relatedVulnerabilities")', function() {
      // uncomment below and update the code to test the property relatedVulnerabilities
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property sourceUrl (base name: "sourceUrl")', function() {
      // uncomment below and update the code to test the property sourceUrl
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property vendorCreatedAt (base name: "vendorCreatedAt")', function() {
      // uncomment below and update the code to test the property vendorCreatedAt
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property vendorSeverity (base name: "vendorSeverity")', function() {
      // uncomment below and update the code to test the property vendorSeverity
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

    it('should have the property vendorUpdatedAt (base name: "vendorUpdatedAt")', function() {
      // uncomment below and update the code to test the property vendorUpdatedAt
      //var instance = new Inspector2.Vulnerability();
      //expect(instance).to.be();
    });

  });

}));
