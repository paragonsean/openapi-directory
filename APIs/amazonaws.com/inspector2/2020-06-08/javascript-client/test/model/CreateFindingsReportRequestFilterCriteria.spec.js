/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Inspector2);
  }
}(this, function(expect, Inspector2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateFindingsReportRequestFilterCriteria', function() {
    it('should create an instance of CreateFindingsReportRequestFilterCriteria', function() {
      // uncomment below and update the code to test CreateFindingsReportRequestFilterCriteria
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be.a(Inspector2.CreateFindingsReportRequestFilterCriteria);
    });

    it('should have the property awsAccountId (base name: "awsAccountId")', function() {
      // uncomment below and update the code to test the property awsAccountId
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property codeVulnerabilityDetectorName (base name: "codeVulnerabilityDetectorName")', function() {
      // uncomment below and update the code to test the property codeVulnerabilityDetectorName
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property codeVulnerabilityDetectorTags (base name: "codeVulnerabilityDetectorTags")', function() {
      // uncomment below and update the code to test the property codeVulnerabilityDetectorTags
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property codeVulnerabilityFilePath (base name: "codeVulnerabilityFilePath")', function() {
      // uncomment below and update the code to test the property codeVulnerabilityFilePath
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property componentId (base name: "componentId")', function() {
      // uncomment below and update the code to test the property componentId
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property componentType (base name: "componentType")', function() {
      // uncomment below and update the code to test the property componentType
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property ec2InstanceImageId (base name: "ec2InstanceImageId")', function() {
      // uncomment below and update the code to test the property ec2InstanceImageId
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property ec2InstanceSubnetId (base name: "ec2InstanceSubnetId")', function() {
      // uncomment below and update the code to test the property ec2InstanceSubnetId
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property ec2InstanceVpcId (base name: "ec2InstanceVpcId")', function() {
      // uncomment below and update the code to test the property ec2InstanceVpcId
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property ecrImageArchitecture (base name: "ecrImageArchitecture")', function() {
      // uncomment below and update the code to test the property ecrImageArchitecture
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property ecrImageHash (base name: "ecrImageHash")', function() {
      // uncomment below and update the code to test the property ecrImageHash
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property ecrImagePushedAt (base name: "ecrImagePushedAt")', function() {
      // uncomment below and update the code to test the property ecrImagePushedAt
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property ecrImageRegistry (base name: "ecrImageRegistry")', function() {
      // uncomment below and update the code to test the property ecrImageRegistry
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property ecrImageRepositoryName (base name: "ecrImageRepositoryName")', function() {
      // uncomment below and update the code to test the property ecrImageRepositoryName
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property ecrImageTags (base name: "ecrImageTags")', function() {
      // uncomment below and update the code to test the property ecrImageTags
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property epssScore (base name: "epssScore")', function() {
      // uncomment below and update the code to test the property epssScore
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property exploitAvailable (base name: "exploitAvailable")', function() {
      // uncomment below and update the code to test the property exploitAvailable
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property findingArn (base name: "findingArn")', function() {
      // uncomment below and update the code to test the property findingArn
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property findingStatus (base name: "findingStatus")', function() {
      // uncomment below and update the code to test the property findingStatus
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property findingType (base name: "findingType")', function() {
      // uncomment below and update the code to test the property findingType
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property firstObservedAt (base name: "firstObservedAt")', function() {
      // uncomment below and update the code to test the property firstObservedAt
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property fixAvailable (base name: "fixAvailable")', function() {
      // uncomment below and update the code to test the property fixAvailable
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property inspectorScore (base name: "inspectorScore")', function() {
      // uncomment below and update the code to test the property inspectorScore
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property lambdaFunctionExecutionRoleArn (base name: "lambdaFunctionExecutionRoleArn")', function() {
      // uncomment below and update the code to test the property lambdaFunctionExecutionRoleArn
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property lambdaFunctionLastModifiedAt (base name: "lambdaFunctionLastModifiedAt")', function() {
      // uncomment below and update the code to test the property lambdaFunctionLastModifiedAt
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property lambdaFunctionLayers (base name: "lambdaFunctionLayers")', function() {
      // uncomment below and update the code to test the property lambdaFunctionLayers
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property lambdaFunctionName (base name: "lambdaFunctionName")', function() {
      // uncomment below and update the code to test the property lambdaFunctionName
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property lambdaFunctionRuntime (base name: "lambdaFunctionRuntime")', function() {
      // uncomment below and update the code to test the property lambdaFunctionRuntime
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property lastObservedAt (base name: "lastObservedAt")', function() {
      // uncomment below and update the code to test the property lastObservedAt
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property networkProtocol (base name: "networkProtocol")', function() {
      // uncomment below and update the code to test the property networkProtocol
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property portRange (base name: "portRange")', function() {
      // uncomment below and update the code to test the property portRange
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property relatedVulnerabilities (base name: "relatedVulnerabilities")', function() {
      // uncomment below and update the code to test the property relatedVulnerabilities
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property resourceId (base name: "resourceId")', function() {
      // uncomment below and update the code to test the property resourceId
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property resourceTags (base name: "resourceTags")', function() {
      // uncomment below and update the code to test the property resourceTags
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property resourceType (base name: "resourceType")', function() {
      // uncomment below and update the code to test the property resourceType
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property severity (base name: "severity")', function() {
      // uncomment below and update the code to test the property severity
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property vendorSeverity (base name: "vendorSeverity")', function() {
      // uncomment below and update the code to test the property vendorSeverity
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property vulnerabilityId (base name: "vulnerabilityId")', function() {
      // uncomment below and update the code to test the property vulnerabilityId
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property vulnerabilitySource (base name: "vulnerabilitySource")', function() {
      // uncomment below and update the code to test the property vulnerabilitySource
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

    it('should have the property vulnerablePackages (base name: "vulnerablePackages")', function() {
      // uncomment below and update the code to test the property vulnerablePackages
      //var instance = new Inspector2.CreateFindingsReportRequestFilterCriteria();
      //expect(instance).to.be();
    });

  });

}));
