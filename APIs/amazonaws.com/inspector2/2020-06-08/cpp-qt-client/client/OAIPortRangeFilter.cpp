/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortRangeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortRangeFilter::OAIPortRangeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortRangeFilter::OAIPortRangeFilter() {
    this->initializeModel();
}

OAIPortRangeFilter::~OAIPortRangeFilter() {}

void OAIPortRangeFilter::initializeModel() {

    m_begin_inclusive_isSet = false;
    m_begin_inclusive_isValid = false;

    m_end_inclusive_isSet = false;
    m_end_inclusive_isValid = false;
}

void OAIPortRangeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPortRangeFilter::fromJsonObject(QJsonObject json) {

    m_begin_inclusive_isValid = ::OpenAPI::fromJsonValue(m_begin_inclusive, json[QString("beginInclusive")]);
    m_begin_inclusive_isSet = !json[QString("beginInclusive")].isNull() && m_begin_inclusive_isValid;

    m_end_inclusive_isValid = ::OpenAPI::fromJsonValue(m_end_inclusive, json[QString("endInclusive")]);
    m_end_inclusive_isSet = !json[QString("endInclusive")].isNull() && m_end_inclusive_isValid;
}

QString OAIPortRangeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPortRangeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_inclusive_isSet) {
        obj.insert(QString("beginInclusive"), ::OpenAPI::toJsonValue(m_begin_inclusive));
    }
    if (m_end_inclusive_isSet) {
        obj.insert(QString("endInclusive"), ::OpenAPI::toJsonValue(m_end_inclusive));
    }
    return obj;
}

qint32 OAIPortRangeFilter::getBeginInclusive() const {
    return m_begin_inclusive;
}
void OAIPortRangeFilter::setBeginInclusive(const qint32 &begin_inclusive) {
    m_begin_inclusive = begin_inclusive;
    m_begin_inclusive_isSet = true;
}

bool OAIPortRangeFilter::is_begin_inclusive_Set() const{
    return m_begin_inclusive_isSet;
}

bool OAIPortRangeFilter::is_begin_inclusive_Valid() const{
    return m_begin_inclusive_isValid;
}

qint32 OAIPortRangeFilter::getEndInclusive() const {
    return m_end_inclusive;
}
void OAIPortRangeFilter::setEndInclusive(const qint32 &end_inclusive) {
    m_end_inclusive = end_inclusive;
    m_end_inclusive_isSet = true;
}

bool OAIPortRangeFilter::is_end_inclusive_Set() const{
    return m_end_inclusive_isSet;
}

bool OAIPortRangeFilter::is_end_inclusive_Valid() const{
    return m_end_inclusive_isValid;
}

bool OAIPortRangeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPortRangeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
