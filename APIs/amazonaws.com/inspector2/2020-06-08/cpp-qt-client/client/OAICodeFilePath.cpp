/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeFilePath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeFilePath::OAICodeFilePath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeFilePath::OAICodeFilePath() {
    this->initializeModel();
}

OAICodeFilePath::~OAICodeFilePath() {}

void OAICodeFilePath::initializeModel() {

    m_end_line_isSet = false;
    m_end_line_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_start_line_isSet = false;
    m_start_line_isValid = false;
}

void OAICodeFilePath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeFilePath::fromJsonObject(QJsonObject json) {

    m_end_line_isValid = ::OpenAPI::fromJsonValue(m_end_line, json[QString("endLine")]);
    m_end_line_isSet = !json[QString("endLine")].isNull() && m_end_line_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_start_line_isValid = ::OpenAPI::fromJsonValue(m_start_line, json[QString("startLine")]);
    m_start_line_isSet = !json[QString("startLine")].isNull() && m_start_line_isValid;
}

QString OAICodeFilePath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeFilePath::asJsonObject() const {
    QJsonObject obj;
    if (m_end_line_isSet) {
        obj.insert(QString("endLine"), ::OpenAPI::toJsonValue(m_end_line));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_start_line_isSet) {
        obj.insert(QString("startLine"), ::OpenAPI::toJsonValue(m_start_line));
    }
    return obj;
}

qint32 OAICodeFilePath::getEndLine() const {
    return m_end_line;
}
void OAICodeFilePath::setEndLine(const qint32 &end_line) {
    m_end_line = end_line;
    m_end_line_isSet = true;
}

bool OAICodeFilePath::is_end_line_Set() const{
    return m_end_line_isSet;
}

bool OAICodeFilePath::is_end_line_Valid() const{
    return m_end_line_isValid;
}

QString OAICodeFilePath::getFileName() const {
    return m_file_name;
}
void OAICodeFilePath::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAICodeFilePath::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAICodeFilePath::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAICodeFilePath::getFilePath() const {
    return m_file_path;
}
void OAICodeFilePath::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAICodeFilePath::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAICodeFilePath::is_file_path_Valid() const{
    return m_file_path_isValid;
}

qint32 OAICodeFilePath::getStartLine() const {
    return m_start_line;
}
void OAICodeFilePath::setStartLine(const qint32 &start_line) {
    m_start_line = start_line;
    m_start_line_isSet = true;
}

bool OAICodeFilePath::is_start_line_Set() const{
    return m_start_line_isSet;
}

bool OAICodeFilePath::is_start_line_Valid() const{
    return m_start_line_isValid;
}

bool OAICodeFilePath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_line_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeFilePath::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_line_isValid && m_file_name_isValid && m_file_path_isValid && m_start_line_isValid && true;
}

} // namespace OpenAPI
