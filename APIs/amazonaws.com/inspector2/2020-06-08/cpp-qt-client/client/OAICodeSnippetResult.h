/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICodeSnippetResult.h
 *
 * Contains information on a code snippet retrieved by Amazon Inspector from a code vulnerability finding.
 */

#ifndef OAICodeSnippetResult_H
#define OAICodeSnippetResult_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICodeSnippetResult : public OAIObject {
public:
    OAICodeSnippetResult();
    OAICodeSnippetResult(QString json);
    ~OAICodeSnippetResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCodeSnippet() const;
    void setCodeSnippet(const QList &code_snippet);
    bool is_code_snippet_Set() const;
    bool is_code_snippet_Valid() const;

    qint32 getEndLine() const;
    void setEndLine(const qint32 &end_line);
    bool is_end_line_Set() const;
    bool is_end_line_Valid() const;

    QString getFindingArn() const;
    void setFindingArn(const QString &finding_arn);
    bool is_finding_arn_Set() const;
    bool is_finding_arn_Valid() const;

    qint32 getStartLine() const;
    void setStartLine(const qint32 &start_line);
    bool is_start_line_Set() const;
    bool is_start_line_Valid() const;

    QList getSuggestedFixes() const;
    void setSuggestedFixes(const QList &suggested_fixes);
    bool is_suggested_fixes_Set() const;
    bool is_suggested_fixes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_code_snippet;
    bool m_code_snippet_isSet;
    bool m_code_snippet_isValid;

    qint32 m_end_line;
    bool m_end_line_isSet;
    bool m_end_line_isValid;

    QString m_finding_arn;
    bool m_finding_arn_isSet;
    bool m_finding_arn_isValid;

    qint32 m_start_line;
    bool m_start_line_isSet;
    bool m_start_line_isValid;

    QList m_suggested_fixes;
    bool m_suggested_fixes_isSet;
    bool m_suggested_fixes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICodeSnippetResult)

#endif // OAICodeSnippetResult_H
