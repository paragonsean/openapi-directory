/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter_criteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter_criteria::OAIFilter_criteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter_criteria::OAIFilter_criteria() {
    this->initializeModel();
}

OAIFilter_criteria::~OAIFilter_criteria() {}

void OAIFilter_criteria::initializeModel() {

    m_aws_account_id_isSet = false;
    m_aws_account_id_isValid = false;

    m_code_vulnerability_detector_name_isSet = false;
    m_code_vulnerability_detector_name_isValid = false;

    m_code_vulnerability_detector_tags_isSet = false;
    m_code_vulnerability_detector_tags_isValid = false;

    m_code_vulnerability_file_path_isSet = false;
    m_code_vulnerability_file_path_isValid = false;

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_component_type_isSet = false;
    m_component_type_isValid = false;

    m_ec2_instance_image_id_isSet = false;
    m_ec2_instance_image_id_isValid = false;

    m_ec2_instance_subnet_id_isSet = false;
    m_ec2_instance_subnet_id_isValid = false;

    m_ec2_instance_vpc_id_isSet = false;
    m_ec2_instance_vpc_id_isValid = false;

    m_ecr_image_architecture_isSet = false;
    m_ecr_image_architecture_isValid = false;

    m_ecr_image_hash_isSet = false;
    m_ecr_image_hash_isValid = false;

    m_ecr_image_pushed_at_isSet = false;
    m_ecr_image_pushed_at_isValid = false;

    m_ecr_image_registry_isSet = false;
    m_ecr_image_registry_isValid = false;

    m_ecr_image_repository_name_isSet = false;
    m_ecr_image_repository_name_isValid = false;

    m_ecr_image_tags_isSet = false;
    m_ecr_image_tags_isValid = false;

    m_epss_score_isSet = false;
    m_epss_score_isValid = false;

    m_exploit_available_isSet = false;
    m_exploit_available_isValid = false;

    m_finding_arn_isSet = false;
    m_finding_arn_isValid = false;

    m_finding_status_isSet = false;
    m_finding_status_isValid = false;

    m_finding_type_isSet = false;
    m_finding_type_isValid = false;

    m_first_observed_at_isSet = false;
    m_first_observed_at_isValid = false;

    m_fix_available_isSet = false;
    m_fix_available_isValid = false;

    m_inspector_score_isSet = false;
    m_inspector_score_isValid = false;

    m_lambda_function_execution_role_arn_isSet = false;
    m_lambda_function_execution_role_arn_isValid = false;

    m_lambda_function_last_modified_at_isSet = false;
    m_lambda_function_last_modified_at_isValid = false;

    m_lambda_function_layers_isSet = false;
    m_lambda_function_layers_isValid = false;

    m_lambda_function_name_isSet = false;
    m_lambda_function_name_isValid = false;

    m_lambda_function_runtime_isSet = false;
    m_lambda_function_runtime_isValid = false;

    m_last_observed_at_isSet = false;
    m_last_observed_at_isValid = false;

    m_network_protocol_isSet = false;
    m_network_protocol_isValid = false;

    m_port_range_isSet = false;
    m_port_range_isValid = false;

    m_related_vulnerabilities_isSet = false;
    m_related_vulnerabilities_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_tags_isSet = false;
    m_resource_tags_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_vendor_severity_isSet = false;
    m_vendor_severity_isValid = false;

    m_vulnerability_id_isSet = false;
    m_vulnerability_id_isValid = false;

    m_vulnerability_source_isSet = false;
    m_vulnerability_source_isValid = false;

    m_vulnerable_packages_isSet = false;
    m_vulnerable_packages_isValid = false;
}

void OAIFilter_criteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter_criteria::fromJsonObject(QJsonObject json) {

    m_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_aws_account_id, json[QString("awsAccountId")]);
    m_aws_account_id_isSet = !json[QString("awsAccountId")].isNull() && m_aws_account_id_isValid;

    m_code_vulnerability_detector_name_isValid = ::OpenAPI::fromJsonValue(m_code_vulnerability_detector_name, json[QString("codeVulnerabilityDetectorName")]);
    m_code_vulnerability_detector_name_isSet = !json[QString("codeVulnerabilityDetectorName")].isNull() && m_code_vulnerability_detector_name_isValid;

    m_code_vulnerability_detector_tags_isValid = ::OpenAPI::fromJsonValue(m_code_vulnerability_detector_tags, json[QString("codeVulnerabilityDetectorTags")]);
    m_code_vulnerability_detector_tags_isSet = !json[QString("codeVulnerabilityDetectorTags")].isNull() && m_code_vulnerability_detector_tags_isValid;

    m_code_vulnerability_file_path_isValid = ::OpenAPI::fromJsonValue(m_code_vulnerability_file_path, json[QString("codeVulnerabilityFilePath")]);
    m_code_vulnerability_file_path_isSet = !json[QString("codeVulnerabilityFilePath")].isNull() && m_code_vulnerability_file_path_isValid;

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("componentId")]);
    m_component_id_isSet = !json[QString("componentId")].isNull() && m_component_id_isValid;

    m_component_type_isValid = ::OpenAPI::fromJsonValue(m_component_type, json[QString("componentType")]);
    m_component_type_isSet = !json[QString("componentType")].isNull() && m_component_type_isValid;

    m_ec2_instance_image_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_image_id, json[QString("ec2InstanceImageId")]);
    m_ec2_instance_image_id_isSet = !json[QString("ec2InstanceImageId")].isNull() && m_ec2_instance_image_id_isValid;

    m_ec2_instance_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_subnet_id, json[QString("ec2InstanceSubnetId")]);
    m_ec2_instance_subnet_id_isSet = !json[QString("ec2InstanceSubnetId")].isNull() && m_ec2_instance_subnet_id_isValid;

    m_ec2_instance_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_vpc_id, json[QString("ec2InstanceVpcId")]);
    m_ec2_instance_vpc_id_isSet = !json[QString("ec2InstanceVpcId")].isNull() && m_ec2_instance_vpc_id_isValid;

    m_ecr_image_architecture_isValid = ::OpenAPI::fromJsonValue(m_ecr_image_architecture, json[QString("ecrImageArchitecture")]);
    m_ecr_image_architecture_isSet = !json[QString("ecrImageArchitecture")].isNull() && m_ecr_image_architecture_isValid;

    m_ecr_image_hash_isValid = ::OpenAPI::fromJsonValue(m_ecr_image_hash, json[QString("ecrImageHash")]);
    m_ecr_image_hash_isSet = !json[QString("ecrImageHash")].isNull() && m_ecr_image_hash_isValid;

    m_ecr_image_pushed_at_isValid = ::OpenAPI::fromJsonValue(m_ecr_image_pushed_at, json[QString("ecrImagePushedAt")]);
    m_ecr_image_pushed_at_isSet = !json[QString("ecrImagePushedAt")].isNull() && m_ecr_image_pushed_at_isValid;

    m_ecr_image_registry_isValid = ::OpenAPI::fromJsonValue(m_ecr_image_registry, json[QString("ecrImageRegistry")]);
    m_ecr_image_registry_isSet = !json[QString("ecrImageRegistry")].isNull() && m_ecr_image_registry_isValid;

    m_ecr_image_repository_name_isValid = ::OpenAPI::fromJsonValue(m_ecr_image_repository_name, json[QString("ecrImageRepositoryName")]);
    m_ecr_image_repository_name_isSet = !json[QString("ecrImageRepositoryName")].isNull() && m_ecr_image_repository_name_isValid;

    m_ecr_image_tags_isValid = ::OpenAPI::fromJsonValue(m_ecr_image_tags, json[QString("ecrImageTags")]);
    m_ecr_image_tags_isSet = !json[QString("ecrImageTags")].isNull() && m_ecr_image_tags_isValid;

    m_epss_score_isValid = ::OpenAPI::fromJsonValue(m_epss_score, json[QString("epssScore")]);
    m_epss_score_isSet = !json[QString("epssScore")].isNull() && m_epss_score_isValid;

    m_exploit_available_isValid = ::OpenAPI::fromJsonValue(m_exploit_available, json[QString("exploitAvailable")]);
    m_exploit_available_isSet = !json[QString("exploitAvailable")].isNull() && m_exploit_available_isValid;

    m_finding_arn_isValid = ::OpenAPI::fromJsonValue(m_finding_arn, json[QString("findingArn")]);
    m_finding_arn_isSet = !json[QString("findingArn")].isNull() && m_finding_arn_isValid;

    m_finding_status_isValid = ::OpenAPI::fromJsonValue(m_finding_status, json[QString("findingStatus")]);
    m_finding_status_isSet = !json[QString("findingStatus")].isNull() && m_finding_status_isValid;

    m_finding_type_isValid = ::OpenAPI::fromJsonValue(m_finding_type, json[QString("findingType")]);
    m_finding_type_isSet = !json[QString("findingType")].isNull() && m_finding_type_isValid;

    m_first_observed_at_isValid = ::OpenAPI::fromJsonValue(m_first_observed_at, json[QString("firstObservedAt")]);
    m_first_observed_at_isSet = !json[QString("firstObservedAt")].isNull() && m_first_observed_at_isValid;

    m_fix_available_isValid = ::OpenAPI::fromJsonValue(m_fix_available, json[QString("fixAvailable")]);
    m_fix_available_isSet = !json[QString("fixAvailable")].isNull() && m_fix_available_isValid;

    m_inspector_score_isValid = ::OpenAPI::fromJsonValue(m_inspector_score, json[QString("inspectorScore")]);
    m_inspector_score_isSet = !json[QString("inspectorScore")].isNull() && m_inspector_score_isValid;

    m_lambda_function_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_execution_role_arn, json[QString("lambdaFunctionExecutionRoleArn")]);
    m_lambda_function_execution_role_arn_isSet = !json[QString("lambdaFunctionExecutionRoleArn")].isNull() && m_lambda_function_execution_role_arn_isValid;

    m_lambda_function_last_modified_at_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_last_modified_at, json[QString("lambdaFunctionLastModifiedAt")]);
    m_lambda_function_last_modified_at_isSet = !json[QString("lambdaFunctionLastModifiedAt")].isNull() && m_lambda_function_last_modified_at_isValid;

    m_lambda_function_layers_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_layers, json[QString("lambdaFunctionLayers")]);
    m_lambda_function_layers_isSet = !json[QString("lambdaFunctionLayers")].isNull() && m_lambda_function_layers_isValid;

    m_lambda_function_name_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_name, json[QString("lambdaFunctionName")]);
    m_lambda_function_name_isSet = !json[QString("lambdaFunctionName")].isNull() && m_lambda_function_name_isValid;

    m_lambda_function_runtime_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_runtime, json[QString("lambdaFunctionRuntime")]);
    m_lambda_function_runtime_isSet = !json[QString("lambdaFunctionRuntime")].isNull() && m_lambda_function_runtime_isValid;

    m_last_observed_at_isValid = ::OpenAPI::fromJsonValue(m_last_observed_at, json[QString("lastObservedAt")]);
    m_last_observed_at_isSet = !json[QString("lastObservedAt")].isNull() && m_last_observed_at_isValid;

    m_network_protocol_isValid = ::OpenAPI::fromJsonValue(m_network_protocol, json[QString("networkProtocol")]);
    m_network_protocol_isSet = !json[QString("networkProtocol")].isNull() && m_network_protocol_isValid;

    m_port_range_isValid = ::OpenAPI::fromJsonValue(m_port_range, json[QString("portRange")]);
    m_port_range_isSet = !json[QString("portRange")].isNull() && m_port_range_isValid;

    m_related_vulnerabilities_isValid = ::OpenAPI::fromJsonValue(m_related_vulnerabilities, json[QString("relatedVulnerabilities")]);
    m_related_vulnerabilities_isSet = !json[QString("relatedVulnerabilities")].isNull() && m_related_vulnerabilities_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_tags_isValid = ::OpenAPI::fromJsonValue(m_resource_tags, json[QString("resourceTags")]);
    m_resource_tags_isSet = !json[QString("resourceTags")].isNull() && m_resource_tags_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_vendor_severity_isValid = ::OpenAPI::fromJsonValue(m_vendor_severity, json[QString("vendorSeverity")]);
    m_vendor_severity_isSet = !json[QString("vendorSeverity")].isNull() && m_vendor_severity_isValid;

    m_vulnerability_id_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_id, json[QString("vulnerabilityId")]);
    m_vulnerability_id_isSet = !json[QString("vulnerabilityId")].isNull() && m_vulnerability_id_isValid;

    m_vulnerability_source_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_source, json[QString("vulnerabilitySource")]);
    m_vulnerability_source_isSet = !json[QString("vulnerabilitySource")].isNull() && m_vulnerability_source_isValid;

    m_vulnerable_packages_isValid = ::OpenAPI::fromJsonValue(m_vulnerable_packages, json[QString("vulnerablePackages")]);
    m_vulnerable_packages_isSet = !json[QString("vulnerablePackages")].isNull() && m_vulnerable_packages_isValid;
}

QString OAIFilter_criteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter_criteria::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_account_id.isSet()) {
        obj.insert(QString("awsAccountId"), ::OpenAPI::toJsonValue(m_aws_account_id));
    }
    if (m_code_vulnerability_detector_name.isSet()) {
        obj.insert(QString("codeVulnerabilityDetectorName"), ::OpenAPI::toJsonValue(m_code_vulnerability_detector_name));
    }
    if (m_code_vulnerability_detector_tags.isSet()) {
        obj.insert(QString("codeVulnerabilityDetectorTags"), ::OpenAPI::toJsonValue(m_code_vulnerability_detector_tags));
    }
    if (m_code_vulnerability_file_path.isSet()) {
        obj.insert(QString("codeVulnerabilityFilePath"), ::OpenAPI::toJsonValue(m_code_vulnerability_file_path));
    }
    if (m_component_id.isSet()) {
        obj.insert(QString("componentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_component_type.isSet()) {
        obj.insert(QString("componentType"), ::OpenAPI::toJsonValue(m_component_type));
    }
    if (m_ec2_instance_image_id.isSet()) {
        obj.insert(QString("ec2InstanceImageId"), ::OpenAPI::toJsonValue(m_ec2_instance_image_id));
    }
    if (m_ec2_instance_subnet_id.isSet()) {
        obj.insert(QString("ec2InstanceSubnetId"), ::OpenAPI::toJsonValue(m_ec2_instance_subnet_id));
    }
    if (m_ec2_instance_vpc_id.isSet()) {
        obj.insert(QString("ec2InstanceVpcId"), ::OpenAPI::toJsonValue(m_ec2_instance_vpc_id));
    }
    if (m_ecr_image_architecture.isSet()) {
        obj.insert(QString("ecrImageArchitecture"), ::OpenAPI::toJsonValue(m_ecr_image_architecture));
    }
    if (m_ecr_image_hash.isSet()) {
        obj.insert(QString("ecrImageHash"), ::OpenAPI::toJsonValue(m_ecr_image_hash));
    }
    if (m_ecr_image_pushed_at.isSet()) {
        obj.insert(QString("ecrImagePushedAt"), ::OpenAPI::toJsonValue(m_ecr_image_pushed_at));
    }
    if (m_ecr_image_registry.isSet()) {
        obj.insert(QString("ecrImageRegistry"), ::OpenAPI::toJsonValue(m_ecr_image_registry));
    }
    if (m_ecr_image_repository_name.isSet()) {
        obj.insert(QString("ecrImageRepositoryName"), ::OpenAPI::toJsonValue(m_ecr_image_repository_name));
    }
    if (m_ecr_image_tags.isSet()) {
        obj.insert(QString("ecrImageTags"), ::OpenAPI::toJsonValue(m_ecr_image_tags));
    }
    if (m_epss_score.isSet()) {
        obj.insert(QString("epssScore"), ::OpenAPI::toJsonValue(m_epss_score));
    }
    if (m_exploit_available.isSet()) {
        obj.insert(QString("exploitAvailable"), ::OpenAPI::toJsonValue(m_exploit_available));
    }
    if (m_finding_arn.isSet()) {
        obj.insert(QString("findingArn"), ::OpenAPI::toJsonValue(m_finding_arn));
    }
    if (m_finding_status.isSet()) {
        obj.insert(QString("findingStatus"), ::OpenAPI::toJsonValue(m_finding_status));
    }
    if (m_finding_type.isSet()) {
        obj.insert(QString("findingType"), ::OpenAPI::toJsonValue(m_finding_type));
    }
    if (m_first_observed_at.isSet()) {
        obj.insert(QString("firstObservedAt"), ::OpenAPI::toJsonValue(m_first_observed_at));
    }
    if (m_fix_available.isSet()) {
        obj.insert(QString("fixAvailable"), ::OpenAPI::toJsonValue(m_fix_available));
    }
    if (m_inspector_score.isSet()) {
        obj.insert(QString("inspectorScore"), ::OpenAPI::toJsonValue(m_inspector_score));
    }
    if (m_lambda_function_execution_role_arn.isSet()) {
        obj.insert(QString("lambdaFunctionExecutionRoleArn"), ::OpenAPI::toJsonValue(m_lambda_function_execution_role_arn));
    }
    if (m_lambda_function_last_modified_at.isSet()) {
        obj.insert(QString("lambdaFunctionLastModifiedAt"), ::OpenAPI::toJsonValue(m_lambda_function_last_modified_at));
    }
    if (m_lambda_function_layers.isSet()) {
        obj.insert(QString("lambdaFunctionLayers"), ::OpenAPI::toJsonValue(m_lambda_function_layers));
    }
    if (m_lambda_function_name.isSet()) {
        obj.insert(QString("lambdaFunctionName"), ::OpenAPI::toJsonValue(m_lambda_function_name));
    }
    if (m_lambda_function_runtime.isSet()) {
        obj.insert(QString("lambdaFunctionRuntime"), ::OpenAPI::toJsonValue(m_lambda_function_runtime));
    }
    if (m_last_observed_at.isSet()) {
        obj.insert(QString("lastObservedAt"), ::OpenAPI::toJsonValue(m_last_observed_at));
    }
    if (m_network_protocol.isSet()) {
        obj.insert(QString("networkProtocol"), ::OpenAPI::toJsonValue(m_network_protocol));
    }
    if (m_port_range.isSet()) {
        obj.insert(QString("portRange"), ::OpenAPI::toJsonValue(m_port_range));
    }
    if (m_related_vulnerabilities.isSet()) {
        obj.insert(QString("relatedVulnerabilities"), ::OpenAPI::toJsonValue(m_related_vulnerabilities));
    }
    if (m_resource_id.isSet()) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_tags.isSet()) {
        obj.insert(QString("resourceTags"), ::OpenAPI::toJsonValue(m_resource_tags));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_title.isSet()) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at.isSet()) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_vendor_severity.isSet()) {
        obj.insert(QString("vendorSeverity"), ::OpenAPI::toJsonValue(m_vendor_severity));
    }
    if (m_vulnerability_id.isSet()) {
        obj.insert(QString("vulnerabilityId"), ::OpenAPI::toJsonValue(m_vulnerability_id));
    }
    if (m_vulnerability_source.isSet()) {
        obj.insert(QString("vulnerabilitySource"), ::OpenAPI::toJsonValue(m_vulnerability_source));
    }
    if (m_vulnerable_packages.isSet()) {
        obj.insert(QString("vulnerablePackages"), ::OpenAPI::toJsonValue(m_vulnerable_packages));
    }
    return obj;
}

QList OAIFilter_criteria::getAwsAccountId() const {
    return m_aws_account_id;
}
void OAIFilter_criteria::setAwsAccountId(const QList &aws_account_id) {
    m_aws_account_id = aws_account_id;
    m_aws_account_id_isSet = true;
}

bool OAIFilter_criteria::is_aws_account_id_Set() const{
    return m_aws_account_id_isSet;
}

bool OAIFilter_criteria::is_aws_account_id_Valid() const{
    return m_aws_account_id_isValid;
}

QList OAIFilter_criteria::getCodeVulnerabilityDetectorName() const {
    return m_code_vulnerability_detector_name;
}
void OAIFilter_criteria::setCodeVulnerabilityDetectorName(const QList &code_vulnerability_detector_name) {
    m_code_vulnerability_detector_name = code_vulnerability_detector_name;
    m_code_vulnerability_detector_name_isSet = true;
}

bool OAIFilter_criteria::is_code_vulnerability_detector_name_Set() const{
    return m_code_vulnerability_detector_name_isSet;
}

bool OAIFilter_criteria::is_code_vulnerability_detector_name_Valid() const{
    return m_code_vulnerability_detector_name_isValid;
}

QList OAIFilter_criteria::getCodeVulnerabilityDetectorTags() const {
    return m_code_vulnerability_detector_tags;
}
void OAIFilter_criteria::setCodeVulnerabilityDetectorTags(const QList &code_vulnerability_detector_tags) {
    m_code_vulnerability_detector_tags = code_vulnerability_detector_tags;
    m_code_vulnerability_detector_tags_isSet = true;
}

bool OAIFilter_criteria::is_code_vulnerability_detector_tags_Set() const{
    return m_code_vulnerability_detector_tags_isSet;
}

bool OAIFilter_criteria::is_code_vulnerability_detector_tags_Valid() const{
    return m_code_vulnerability_detector_tags_isValid;
}

QList OAIFilter_criteria::getCodeVulnerabilityFilePath() const {
    return m_code_vulnerability_file_path;
}
void OAIFilter_criteria::setCodeVulnerabilityFilePath(const QList &code_vulnerability_file_path) {
    m_code_vulnerability_file_path = code_vulnerability_file_path;
    m_code_vulnerability_file_path_isSet = true;
}

bool OAIFilter_criteria::is_code_vulnerability_file_path_Set() const{
    return m_code_vulnerability_file_path_isSet;
}

bool OAIFilter_criteria::is_code_vulnerability_file_path_Valid() const{
    return m_code_vulnerability_file_path_isValid;
}

QList OAIFilter_criteria::getComponentId() const {
    return m_component_id;
}
void OAIFilter_criteria::setComponentId(const QList &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIFilter_criteria::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIFilter_criteria::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QList OAIFilter_criteria::getComponentType() const {
    return m_component_type;
}
void OAIFilter_criteria::setComponentType(const QList &component_type) {
    m_component_type = component_type;
    m_component_type_isSet = true;
}

bool OAIFilter_criteria::is_component_type_Set() const{
    return m_component_type_isSet;
}

bool OAIFilter_criteria::is_component_type_Valid() const{
    return m_component_type_isValid;
}

QList OAIFilter_criteria::getEc2InstanceImageId() const {
    return m_ec2_instance_image_id;
}
void OAIFilter_criteria::setEc2InstanceImageId(const QList &ec2_instance_image_id) {
    m_ec2_instance_image_id = ec2_instance_image_id;
    m_ec2_instance_image_id_isSet = true;
}

bool OAIFilter_criteria::is_ec2_instance_image_id_Set() const{
    return m_ec2_instance_image_id_isSet;
}

bool OAIFilter_criteria::is_ec2_instance_image_id_Valid() const{
    return m_ec2_instance_image_id_isValid;
}

QList OAIFilter_criteria::getEc2InstanceSubnetId() const {
    return m_ec2_instance_subnet_id;
}
void OAIFilter_criteria::setEc2InstanceSubnetId(const QList &ec2_instance_subnet_id) {
    m_ec2_instance_subnet_id = ec2_instance_subnet_id;
    m_ec2_instance_subnet_id_isSet = true;
}

bool OAIFilter_criteria::is_ec2_instance_subnet_id_Set() const{
    return m_ec2_instance_subnet_id_isSet;
}

bool OAIFilter_criteria::is_ec2_instance_subnet_id_Valid() const{
    return m_ec2_instance_subnet_id_isValid;
}

QList OAIFilter_criteria::getEc2InstanceVpcId() const {
    return m_ec2_instance_vpc_id;
}
void OAIFilter_criteria::setEc2InstanceVpcId(const QList &ec2_instance_vpc_id) {
    m_ec2_instance_vpc_id = ec2_instance_vpc_id;
    m_ec2_instance_vpc_id_isSet = true;
}

bool OAIFilter_criteria::is_ec2_instance_vpc_id_Set() const{
    return m_ec2_instance_vpc_id_isSet;
}

bool OAIFilter_criteria::is_ec2_instance_vpc_id_Valid() const{
    return m_ec2_instance_vpc_id_isValid;
}

QList OAIFilter_criteria::getEcrImageArchitecture() const {
    return m_ecr_image_architecture;
}
void OAIFilter_criteria::setEcrImageArchitecture(const QList &ecr_image_architecture) {
    m_ecr_image_architecture = ecr_image_architecture;
    m_ecr_image_architecture_isSet = true;
}

bool OAIFilter_criteria::is_ecr_image_architecture_Set() const{
    return m_ecr_image_architecture_isSet;
}

bool OAIFilter_criteria::is_ecr_image_architecture_Valid() const{
    return m_ecr_image_architecture_isValid;
}

QList OAIFilter_criteria::getEcrImageHash() const {
    return m_ecr_image_hash;
}
void OAIFilter_criteria::setEcrImageHash(const QList &ecr_image_hash) {
    m_ecr_image_hash = ecr_image_hash;
    m_ecr_image_hash_isSet = true;
}

bool OAIFilter_criteria::is_ecr_image_hash_Set() const{
    return m_ecr_image_hash_isSet;
}

bool OAIFilter_criteria::is_ecr_image_hash_Valid() const{
    return m_ecr_image_hash_isValid;
}

QList OAIFilter_criteria::getEcrImagePushedAt() const {
    return m_ecr_image_pushed_at;
}
void OAIFilter_criteria::setEcrImagePushedAt(const QList &ecr_image_pushed_at) {
    m_ecr_image_pushed_at = ecr_image_pushed_at;
    m_ecr_image_pushed_at_isSet = true;
}

bool OAIFilter_criteria::is_ecr_image_pushed_at_Set() const{
    return m_ecr_image_pushed_at_isSet;
}

bool OAIFilter_criteria::is_ecr_image_pushed_at_Valid() const{
    return m_ecr_image_pushed_at_isValid;
}

QList OAIFilter_criteria::getEcrImageRegistry() const {
    return m_ecr_image_registry;
}
void OAIFilter_criteria::setEcrImageRegistry(const QList &ecr_image_registry) {
    m_ecr_image_registry = ecr_image_registry;
    m_ecr_image_registry_isSet = true;
}

bool OAIFilter_criteria::is_ecr_image_registry_Set() const{
    return m_ecr_image_registry_isSet;
}

bool OAIFilter_criteria::is_ecr_image_registry_Valid() const{
    return m_ecr_image_registry_isValid;
}

QList OAIFilter_criteria::getEcrImageRepositoryName() const {
    return m_ecr_image_repository_name;
}
void OAIFilter_criteria::setEcrImageRepositoryName(const QList &ecr_image_repository_name) {
    m_ecr_image_repository_name = ecr_image_repository_name;
    m_ecr_image_repository_name_isSet = true;
}

bool OAIFilter_criteria::is_ecr_image_repository_name_Set() const{
    return m_ecr_image_repository_name_isSet;
}

bool OAIFilter_criteria::is_ecr_image_repository_name_Valid() const{
    return m_ecr_image_repository_name_isValid;
}

QList OAIFilter_criteria::getEcrImageTags() const {
    return m_ecr_image_tags;
}
void OAIFilter_criteria::setEcrImageTags(const QList &ecr_image_tags) {
    m_ecr_image_tags = ecr_image_tags;
    m_ecr_image_tags_isSet = true;
}

bool OAIFilter_criteria::is_ecr_image_tags_Set() const{
    return m_ecr_image_tags_isSet;
}

bool OAIFilter_criteria::is_ecr_image_tags_Valid() const{
    return m_ecr_image_tags_isValid;
}

QList OAIFilter_criteria::getEpssScore() const {
    return m_epss_score;
}
void OAIFilter_criteria::setEpssScore(const QList &epss_score) {
    m_epss_score = epss_score;
    m_epss_score_isSet = true;
}

bool OAIFilter_criteria::is_epss_score_Set() const{
    return m_epss_score_isSet;
}

bool OAIFilter_criteria::is_epss_score_Valid() const{
    return m_epss_score_isValid;
}

QList OAIFilter_criteria::getExploitAvailable() const {
    return m_exploit_available;
}
void OAIFilter_criteria::setExploitAvailable(const QList &exploit_available) {
    m_exploit_available = exploit_available;
    m_exploit_available_isSet = true;
}

bool OAIFilter_criteria::is_exploit_available_Set() const{
    return m_exploit_available_isSet;
}

bool OAIFilter_criteria::is_exploit_available_Valid() const{
    return m_exploit_available_isValid;
}

QList OAIFilter_criteria::getFindingArn() const {
    return m_finding_arn;
}
void OAIFilter_criteria::setFindingArn(const QList &finding_arn) {
    m_finding_arn = finding_arn;
    m_finding_arn_isSet = true;
}

bool OAIFilter_criteria::is_finding_arn_Set() const{
    return m_finding_arn_isSet;
}

bool OAIFilter_criteria::is_finding_arn_Valid() const{
    return m_finding_arn_isValid;
}

QList OAIFilter_criteria::getFindingStatus() const {
    return m_finding_status;
}
void OAIFilter_criteria::setFindingStatus(const QList &finding_status) {
    m_finding_status = finding_status;
    m_finding_status_isSet = true;
}

bool OAIFilter_criteria::is_finding_status_Set() const{
    return m_finding_status_isSet;
}

bool OAIFilter_criteria::is_finding_status_Valid() const{
    return m_finding_status_isValid;
}

QList OAIFilter_criteria::getFindingType() const {
    return m_finding_type;
}
void OAIFilter_criteria::setFindingType(const QList &finding_type) {
    m_finding_type = finding_type;
    m_finding_type_isSet = true;
}

bool OAIFilter_criteria::is_finding_type_Set() const{
    return m_finding_type_isSet;
}

bool OAIFilter_criteria::is_finding_type_Valid() const{
    return m_finding_type_isValid;
}

QList OAIFilter_criteria::getFirstObservedAt() const {
    return m_first_observed_at;
}
void OAIFilter_criteria::setFirstObservedAt(const QList &first_observed_at) {
    m_first_observed_at = first_observed_at;
    m_first_observed_at_isSet = true;
}

bool OAIFilter_criteria::is_first_observed_at_Set() const{
    return m_first_observed_at_isSet;
}

bool OAIFilter_criteria::is_first_observed_at_Valid() const{
    return m_first_observed_at_isValid;
}

QList OAIFilter_criteria::getFixAvailable() const {
    return m_fix_available;
}
void OAIFilter_criteria::setFixAvailable(const QList &fix_available) {
    m_fix_available = fix_available;
    m_fix_available_isSet = true;
}

bool OAIFilter_criteria::is_fix_available_Set() const{
    return m_fix_available_isSet;
}

bool OAIFilter_criteria::is_fix_available_Valid() const{
    return m_fix_available_isValid;
}

QList OAIFilter_criteria::getInspectorScore() const {
    return m_inspector_score;
}
void OAIFilter_criteria::setInspectorScore(const QList &inspector_score) {
    m_inspector_score = inspector_score;
    m_inspector_score_isSet = true;
}

bool OAIFilter_criteria::is_inspector_score_Set() const{
    return m_inspector_score_isSet;
}

bool OAIFilter_criteria::is_inspector_score_Valid() const{
    return m_inspector_score_isValid;
}

QList OAIFilter_criteria::getLambdaFunctionExecutionRoleArn() const {
    return m_lambda_function_execution_role_arn;
}
void OAIFilter_criteria::setLambdaFunctionExecutionRoleArn(const QList &lambda_function_execution_role_arn) {
    m_lambda_function_execution_role_arn = lambda_function_execution_role_arn;
    m_lambda_function_execution_role_arn_isSet = true;
}

bool OAIFilter_criteria::is_lambda_function_execution_role_arn_Set() const{
    return m_lambda_function_execution_role_arn_isSet;
}

bool OAIFilter_criteria::is_lambda_function_execution_role_arn_Valid() const{
    return m_lambda_function_execution_role_arn_isValid;
}

QList OAIFilter_criteria::getLambdaFunctionLastModifiedAt() const {
    return m_lambda_function_last_modified_at;
}
void OAIFilter_criteria::setLambdaFunctionLastModifiedAt(const QList &lambda_function_last_modified_at) {
    m_lambda_function_last_modified_at = lambda_function_last_modified_at;
    m_lambda_function_last_modified_at_isSet = true;
}

bool OAIFilter_criteria::is_lambda_function_last_modified_at_Set() const{
    return m_lambda_function_last_modified_at_isSet;
}

bool OAIFilter_criteria::is_lambda_function_last_modified_at_Valid() const{
    return m_lambda_function_last_modified_at_isValid;
}

QList OAIFilter_criteria::getLambdaFunctionLayers() const {
    return m_lambda_function_layers;
}
void OAIFilter_criteria::setLambdaFunctionLayers(const QList &lambda_function_layers) {
    m_lambda_function_layers = lambda_function_layers;
    m_lambda_function_layers_isSet = true;
}

bool OAIFilter_criteria::is_lambda_function_layers_Set() const{
    return m_lambda_function_layers_isSet;
}

bool OAIFilter_criteria::is_lambda_function_layers_Valid() const{
    return m_lambda_function_layers_isValid;
}

QList OAIFilter_criteria::getLambdaFunctionName() const {
    return m_lambda_function_name;
}
void OAIFilter_criteria::setLambdaFunctionName(const QList &lambda_function_name) {
    m_lambda_function_name = lambda_function_name;
    m_lambda_function_name_isSet = true;
}

bool OAIFilter_criteria::is_lambda_function_name_Set() const{
    return m_lambda_function_name_isSet;
}

bool OAIFilter_criteria::is_lambda_function_name_Valid() const{
    return m_lambda_function_name_isValid;
}

QList OAIFilter_criteria::getLambdaFunctionRuntime() const {
    return m_lambda_function_runtime;
}
void OAIFilter_criteria::setLambdaFunctionRuntime(const QList &lambda_function_runtime) {
    m_lambda_function_runtime = lambda_function_runtime;
    m_lambda_function_runtime_isSet = true;
}

bool OAIFilter_criteria::is_lambda_function_runtime_Set() const{
    return m_lambda_function_runtime_isSet;
}

bool OAIFilter_criteria::is_lambda_function_runtime_Valid() const{
    return m_lambda_function_runtime_isValid;
}

QList OAIFilter_criteria::getLastObservedAt() const {
    return m_last_observed_at;
}
void OAIFilter_criteria::setLastObservedAt(const QList &last_observed_at) {
    m_last_observed_at = last_observed_at;
    m_last_observed_at_isSet = true;
}

bool OAIFilter_criteria::is_last_observed_at_Set() const{
    return m_last_observed_at_isSet;
}

bool OAIFilter_criteria::is_last_observed_at_Valid() const{
    return m_last_observed_at_isValid;
}

QList OAIFilter_criteria::getNetworkProtocol() const {
    return m_network_protocol;
}
void OAIFilter_criteria::setNetworkProtocol(const QList &network_protocol) {
    m_network_protocol = network_protocol;
    m_network_protocol_isSet = true;
}

bool OAIFilter_criteria::is_network_protocol_Set() const{
    return m_network_protocol_isSet;
}

bool OAIFilter_criteria::is_network_protocol_Valid() const{
    return m_network_protocol_isValid;
}

QList OAIFilter_criteria::getPortRange() const {
    return m_port_range;
}
void OAIFilter_criteria::setPortRange(const QList &port_range) {
    m_port_range = port_range;
    m_port_range_isSet = true;
}

bool OAIFilter_criteria::is_port_range_Set() const{
    return m_port_range_isSet;
}

bool OAIFilter_criteria::is_port_range_Valid() const{
    return m_port_range_isValid;
}

QList OAIFilter_criteria::getRelatedVulnerabilities() const {
    return m_related_vulnerabilities;
}
void OAIFilter_criteria::setRelatedVulnerabilities(const QList &related_vulnerabilities) {
    m_related_vulnerabilities = related_vulnerabilities;
    m_related_vulnerabilities_isSet = true;
}

bool OAIFilter_criteria::is_related_vulnerabilities_Set() const{
    return m_related_vulnerabilities_isSet;
}

bool OAIFilter_criteria::is_related_vulnerabilities_Valid() const{
    return m_related_vulnerabilities_isValid;
}

QList OAIFilter_criteria::getResourceId() const {
    return m_resource_id;
}
void OAIFilter_criteria::setResourceId(const QList &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIFilter_criteria::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIFilter_criteria::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QList OAIFilter_criteria::getResourceTags() const {
    return m_resource_tags;
}
void OAIFilter_criteria::setResourceTags(const QList &resource_tags) {
    m_resource_tags = resource_tags;
    m_resource_tags_isSet = true;
}

bool OAIFilter_criteria::is_resource_tags_Set() const{
    return m_resource_tags_isSet;
}

bool OAIFilter_criteria::is_resource_tags_Valid() const{
    return m_resource_tags_isValid;
}

QList OAIFilter_criteria::getResourceType() const {
    return m_resource_type;
}
void OAIFilter_criteria::setResourceType(const QList &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIFilter_criteria::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIFilter_criteria::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList OAIFilter_criteria::getSeverity() const {
    return m_severity;
}
void OAIFilter_criteria::setSeverity(const QList &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIFilter_criteria::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIFilter_criteria::is_severity_Valid() const{
    return m_severity_isValid;
}

QList OAIFilter_criteria::getTitle() const {
    return m_title;
}
void OAIFilter_criteria::setTitle(const QList &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFilter_criteria::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFilter_criteria::is_title_Valid() const{
    return m_title_isValid;
}

QList OAIFilter_criteria::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFilter_criteria::setUpdatedAt(const QList &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFilter_criteria::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFilter_criteria::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList OAIFilter_criteria::getVendorSeverity() const {
    return m_vendor_severity;
}
void OAIFilter_criteria::setVendorSeverity(const QList &vendor_severity) {
    m_vendor_severity = vendor_severity;
    m_vendor_severity_isSet = true;
}

bool OAIFilter_criteria::is_vendor_severity_Set() const{
    return m_vendor_severity_isSet;
}

bool OAIFilter_criteria::is_vendor_severity_Valid() const{
    return m_vendor_severity_isValid;
}

QList OAIFilter_criteria::getVulnerabilityId() const {
    return m_vulnerability_id;
}
void OAIFilter_criteria::setVulnerabilityId(const QList &vulnerability_id) {
    m_vulnerability_id = vulnerability_id;
    m_vulnerability_id_isSet = true;
}

bool OAIFilter_criteria::is_vulnerability_id_Set() const{
    return m_vulnerability_id_isSet;
}

bool OAIFilter_criteria::is_vulnerability_id_Valid() const{
    return m_vulnerability_id_isValid;
}

QList OAIFilter_criteria::getVulnerabilitySource() const {
    return m_vulnerability_source;
}
void OAIFilter_criteria::setVulnerabilitySource(const QList &vulnerability_source) {
    m_vulnerability_source = vulnerability_source;
    m_vulnerability_source_isSet = true;
}

bool OAIFilter_criteria::is_vulnerability_source_Set() const{
    return m_vulnerability_source_isSet;
}

bool OAIFilter_criteria::is_vulnerability_source_Valid() const{
    return m_vulnerability_source_isValid;
}

QList OAIFilter_criteria::getVulnerablePackages() const {
    return m_vulnerable_packages;
}
void OAIFilter_criteria::setVulnerablePackages(const QList &vulnerable_packages) {
    m_vulnerable_packages = vulnerable_packages;
    m_vulnerable_packages_isSet = true;
}

bool OAIFilter_criteria::is_vulnerable_packages_Set() const{
    return m_vulnerable_packages_isSet;
}

bool OAIFilter_criteria::is_vulnerable_packages_Valid() const{
    return m_vulnerable_packages_isValid;
}

bool OAIFilter_criteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_account_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_vulnerability_detector_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_vulnerability_detector_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_vulnerability_file_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_image_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_subnet_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_vpc_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_image_architecture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_image_hash.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_image_pushed_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_image_registry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_image_repository_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_image_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_epss_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exploit_available.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_arn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_observed_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fix_available.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspector_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_execution_role_arn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_last_modified_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_layers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_runtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_observed_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_vulnerabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerable_packages.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter_criteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
