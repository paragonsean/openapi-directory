/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationResponse_ec2InstanceAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationResponse_ec2InstanceAggregation::OAIAggregationResponse_ec2InstanceAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationResponse_ec2InstanceAggregation::OAIAggregationResponse_ec2InstanceAggregation() {
    this->initializeModel();
}

OAIAggregationResponse_ec2InstanceAggregation::~OAIAggregationResponse_ec2InstanceAggregation() {}

void OAIAggregationResponse_ec2InstanceAggregation::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ami_isSet = false;
    m_ami_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_tags_isSet = false;
    m_instance_tags_isValid = false;

    m_network_findings_isSet = false;
    m_network_findings_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_severity_counts_isSet = false;
    m_severity_counts_isValid = false;
}

void OAIAggregationResponse_ec2InstanceAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationResponse_ec2InstanceAggregation::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_ami_isValid = ::OpenAPI::fromJsonValue(m_ami, json[QString("ami")]);
    m_ami_isSet = !json[QString("ami")].isNull() && m_ami_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_instance_tags_isValid = ::OpenAPI::fromJsonValue(m_instance_tags, json[QString("instanceTags")]);
    m_instance_tags_isSet = !json[QString("instanceTags")].isNull() && m_instance_tags_isValid;

    m_network_findings_isValid = ::OpenAPI::fromJsonValue(m_network_findings, json[QString("networkFindings")]);
    m_network_findings_isSet = !json[QString("networkFindings")].isNull() && m_network_findings_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_severity_counts_isValid = ::OpenAPI::fromJsonValue(m_severity_counts, json[QString("severityCounts")]);
    m_severity_counts_isSet = !json[QString("severityCounts")].isNull() && m_severity_counts_isValid;
}

QString OAIAggregationResponse_ec2InstanceAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationResponse_ec2InstanceAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ami_isSet) {
        obj.insert(QString("ami"), ::OpenAPI::toJsonValue(m_ami));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_tags.isSet()) {
        obj.insert(QString("instanceTags"), ::OpenAPI::toJsonValue(m_instance_tags));
    }
    if (m_network_findings_isSet) {
        obj.insert(QString("networkFindings"), ::OpenAPI::toJsonValue(m_network_findings));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_severity_counts.isSet()) {
        obj.insert(QString("severityCounts"), ::OpenAPI::toJsonValue(m_severity_counts));
    }
    return obj;
}

QString OAIAggregationResponse_ec2InstanceAggregation::getAccountId() const {
    return m_account_id;
}
void OAIAggregationResponse_ec2InstanceAggregation::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAggregationResponse_ec2InstanceAggregation::getAmi() const {
    return m_ami;
}
void OAIAggregationResponse_ec2InstanceAggregation::setAmi(const QString &ami) {
    m_ami = ami;
    m_ami_isSet = true;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_ami_Set() const{
    return m_ami_isSet;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_ami_Valid() const{
    return m_ami_isValid;
}

QString OAIAggregationResponse_ec2InstanceAggregation::getInstanceId() const {
    return m_instance_id;
}
void OAIAggregationResponse_ec2InstanceAggregation::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QMap OAIAggregationResponse_ec2InstanceAggregation::getInstanceTags() const {
    return m_instance_tags;
}
void OAIAggregationResponse_ec2InstanceAggregation::setInstanceTags(const QMap &instance_tags) {
    m_instance_tags = instance_tags;
    m_instance_tags_isSet = true;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_instance_tags_Set() const{
    return m_instance_tags_isSet;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_instance_tags_Valid() const{
    return m_instance_tags_isValid;
}

qint32 OAIAggregationResponse_ec2InstanceAggregation::getNetworkFindings() const {
    return m_network_findings;
}
void OAIAggregationResponse_ec2InstanceAggregation::setNetworkFindings(const qint32 &network_findings) {
    m_network_findings = network_findings;
    m_network_findings_isSet = true;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_network_findings_Set() const{
    return m_network_findings_isSet;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_network_findings_Valid() const{
    return m_network_findings_isValid;
}

QString OAIAggregationResponse_ec2InstanceAggregation::getOperatingSystem() const {
    return m_operating_system;
}
void OAIAggregationResponse_ec2InstanceAggregation::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

OAIAmiAggregationResponse_severityCounts OAIAggregationResponse_ec2InstanceAggregation::getSeverityCounts() const {
    return m_severity_counts;
}
void OAIAggregationResponse_ec2InstanceAggregation::setSeverityCounts(const OAIAmiAggregationResponse_severityCounts &severity_counts) {
    m_severity_counts = severity_counts;
    m_severity_counts_isSet = true;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_severity_counts_Set() const{
    return m_severity_counts_isSet;
}

bool OAIAggregationResponse_ec2InstanceAggregation::is_severity_counts_Valid() const{
    return m_severity_counts_isValid;
}

bool OAIAggregationResponse_ec2InstanceAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ami_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_findings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationResponse_ec2InstanceAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && true;
}

} // namespace OpenAPI
