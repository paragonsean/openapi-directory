/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAwsEcrContainerAggregationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAwsEcrContainerAggregationResponse::OAIAwsEcrContainerAggregationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAwsEcrContainerAggregationResponse::OAIAwsEcrContainerAggregationResponse() {
    this->initializeModel();
}

OAIAwsEcrContainerAggregationResponse::~OAIAwsEcrContainerAggregationResponse() {}

void OAIAwsEcrContainerAggregationResponse::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_image_sha_isSet = false;
    m_image_sha_isValid = false;

    m_image_tags_isSet = false;
    m_image_tags_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_severity_counts_isSet = false;
    m_severity_counts_isValid = false;
}

void OAIAwsEcrContainerAggregationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAwsEcrContainerAggregationResponse::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_image_sha_isValid = ::OpenAPI::fromJsonValue(m_image_sha, json[QString("imageSha")]);
    m_image_sha_isSet = !json[QString("imageSha")].isNull() && m_image_sha_isValid;

    m_image_tags_isValid = ::OpenAPI::fromJsonValue(m_image_tags, json[QString("imageTags")]);
    m_image_tags_isSet = !json[QString("imageTags")].isNull() && m_image_tags_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_severity_counts_isValid = ::OpenAPI::fromJsonValue(m_severity_counts, json[QString("severityCounts")]);
    m_severity_counts_isSet = !json[QString("severityCounts")].isNull() && m_severity_counts_isValid;
}

QString OAIAwsEcrContainerAggregationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAwsEcrContainerAggregationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_image_sha_isSet) {
        obj.insert(QString("imageSha"), ::OpenAPI::toJsonValue(m_image_sha));
    }
    if (m_image_tags.isSet()) {
        obj.insert(QString("imageTags"), ::OpenAPI::toJsonValue(m_image_tags));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_severity_counts.isSet()) {
        obj.insert(QString("severityCounts"), ::OpenAPI::toJsonValue(m_severity_counts));
    }
    return obj;
}

QString OAIAwsEcrContainerAggregationResponse::getAccountId() const {
    return m_account_id;
}
void OAIAwsEcrContainerAggregationResponse::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAwsEcrContainerAggregationResponse::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAwsEcrContainerAggregationResponse::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAwsEcrContainerAggregationResponse::getArchitecture() const {
    return m_architecture;
}
void OAIAwsEcrContainerAggregationResponse::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIAwsEcrContainerAggregationResponse::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIAwsEcrContainerAggregationResponse::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIAwsEcrContainerAggregationResponse::getImageSha() const {
    return m_image_sha;
}
void OAIAwsEcrContainerAggregationResponse::setImageSha(const QString &image_sha) {
    m_image_sha = image_sha;
    m_image_sha_isSet = true;
}

bool OAIAwsEcrContainerAggregationResponse::is_image_sha_Set() const{
    return m_image_sha_isSet;
}

bool OAIAwsEcrContainerAggregationResponse::is_image_sha_Valid() const{
    return m_image_sha_isValid;
}

QList OAIAwsEcrContainerAggregationResponse::getImageTags() const {
    return m_image_tags;
}
void OAIAwsEcrContainerAggregationResponse::setImageTags(const QList &image_tags) {
    m_image_tags = image_tags;
    m_image_tags_isSet = true;
}

bool OAIAwsEcrContainerAggregationResponse::is_image_tags_Set() const{
    return m_image_tags_isSet;
}

bool OAIAwsEcrContainerAggregationResponse::is_image_tags_Valid() const{
    return m_image_tags_isValid;
}

QString OAIAwsEcrContainerAggregationResponse::getRepository() const {
    return m_repository;
}
void OAIAwsEcrContainerAggregationResponse::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIAwsEcrContainerAggregationResponse::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIAwsEcrContainerAggregationResponse::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIAwsEcrContainerAggregationResponse::getResourceId() const {
    return m_resource_id;
}
void OAIAwsEcrContainerAggregationResponse::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAwsEcrContainerAggregationResponse::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAwsEcrContainerAggregationResponse::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIAwsEcrContainerAggregationResponse_severityCounts OAIAwsEcrContainerAggregationResponse::getSeverityCounts() const {
    return m_severity_counts;
}
void OAIAwsEcrContainerAggregationResponse::setSeverityCounts(const OAIAwsEcrContainerAggregationResponse_severityCounts &severity_counts) {
    m_severity_counts = severity_counts;
    m_severity_counts_isSet = true;
}

bool OAIAwsEcrContainerAggregationResponse::is_severity_counts_Set() const{
    return m_severity_counts_isSet;
}

bool OAIAwsEcrContainerAggregationResponse::is_severity_counts_Valid() const{
    return m_severity_counts_isValid;
}

bool OAIAwsEcrContainerAggregationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAwsEcrContainerAggregationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_id_isValid && true;
}

} // namespace OpenAPI
