/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScanStatusReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScanStatusReason::OAIScanStatusReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScanStatusReason::OAIScanStatusReason() {
    this->initializeModel();
}

OAIScanStatusReason::~OAIScanStatusReason() {}

void OAIScanStatusReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIScanStatusReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIScanStatusReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING_INITIAL_SCAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::PENDING_INITIAL_SCAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::INTERNAL_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNMANAGED_EC2_INSTANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::UNMANAGED_EC2_INSTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_OS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::UNSUPPORTED_OS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCAN_ELIGIBILITY_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::SCAN_ELIGIBILITY_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESOURCE_TERMINATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::RESOURCE_TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCESSFUL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::SUCCESSFUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_RESOURCES_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::NO_RESOURCES_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMAGE_SIZE_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::IMAGE_SIZE_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCAN_FREQUENCY_MANUAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::SCAN_FREQUENCY_MANUAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCAN_FREQUENCY_SCAN_ON_PUSH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::SCAN_FREQUENCY_SCAN_ON_PUSH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC2_INSTANCE_STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::EC2_INSTANCE_STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_DISABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::PENDING_DISABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_INVENTORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::NO_INVENTORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STALE_INVENTORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::STALE_INVENTORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXCLUDED_BY_TAG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::EXCLUDED_BY_TAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_RUNTIME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::UNSUPPORTED_RUNTIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_MEDIA_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::UNSUPPORTED_MEDIA_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_CONFIG_FILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::UNSUPPORTED_CONFIG_FILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEEP_INSPECTION_NO_INVENTORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatusReason::DEEP_INSPECTION_NO_INVENTORY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIScanStatusReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIScanStatusReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIScanStatusReason::PENDING_INITIAL_SCAN:
            val = "PENDING_INITIAL_SCAN";
            break;
        case eOAIScanStatusReason::ACCESS_DENIED:
            val = "ACCESS_DENIED";
            break;
        case eOAIScanStatusReason::INTERNAL_ERROR:
            val = "INTERNAL_ERROR";
            break;
        case eOAIScanStatusReason::UNMANAGED_EC2_INSTANCE:
            val = "UNMANAGED_EC2_INSTANCE";
            break;
        case eOAIScanStatusReason::UNSUPPORTED_OS:
            val = "UNSUPPORTED_OS";
            break;
        case eOAIScanStatusReason::SCAN_ELIGIBILITY_EXPIRED:
            val = "SCAN_ELIGIBILITY_EXPIRED";
            break;
        case eOAIScanStatusReason::RESOURCE_TERMINATED:
            val = "RESOURCE_TERMINATED";
            break;
        case eOAIScanStatusReason::SUCCESSFUL:
            val = "SUCCESSFUL";
            break;
        case eOAIScanStatusReason::NO_RESOURCES_FOUND:
            val = "NO_RESOURCES_FOUND";
            break;
        case eOAIScanStatusReason::IMAGE_SIZE_EXCEEDED:
            val = "IMAGE_SIZE_EXCEEDED";
            break;
        case eOAIScanStatusReason::SCAN_FREQUENCY_MANUAL:
            val = "SCAN_FREQUENCY_MANUAL";
            break;
        case eOAIScanStatusReason::SCAN_FREQUENCY_SCAN_ON_PUSH:
            val = "SCAN_FREQUENCY_SCAN_ON_PUSH";
            break;
        case eOAIScanStatusReason::EC2_INSTANCE_STOPPED:
            val = "EC2_INSTANCE_STOPPED";
            break;
        case eOAIScanStatusReason::PENDING_DISABLE:
            val = "PENDING_DISABLE";
            break;
        case eOAIScanStatusReason::NO_INVENTORY:
            val = "NO_INVENTORY";
            break;
        case eOAIScanStatusReason::STALE_INVENTORY:
            val = "STALE_INVENTORY";
            break;
        case eOAIScanStatusReason::EXCLUDED_BY_TAG:
            val = "EXCLUDED_BY_TAG";
            break;
        case eOAIScanStatusReason::UNSUPPORTED_RUNTIME:
            val = "UNSUPPORTED_RUNTIME";
            break;
        case eOAIScanStatusReason::UNSUPPORTED_MEDIA_TYPE:
            val = "UNSUPPORTED_MEDIA_TYPE";
            break;
        case eOAIScanStatusReason::UNSUPPORTED_CONFIG_FILE:
            val = "UNSUPPORTED_CONFIG_FILE";
            break;
        case eOAIScanStatusReason::DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED:
            val = "DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED";
            break;
        case eOAIScanStatusReason::DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED:
            val = "DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED";
            break;
        case eOAIScanStatusReason::DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED:
            val = "DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED";
            break;
        case eOAIScanStatusReason::DEEP_INSPECTION_NO_INVENTORY:
            val = "DEEP_INSPECTION_NO_INVENTORY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIScanStatusReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIScanStatusReason::eOAIScanStatusReason OAIScanStatusReason::getValue() const {
    return m_value;
}

void OAIScanStatusReason::setValue(const OAIScanStatusReason::eOAIScanStatusReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIScanStatusReason::isSet() const {
    
    return m_value_isSet;
}

bool OAIScanStatusReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
