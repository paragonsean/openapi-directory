/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCoverageStatisticsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCoverageStatisticsResponse::OAIListCoverageStatisticsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCoverageStatisticsResponse::OAIListCoverageStatisticsResponse() {
    this->initializeModel();
}

OAIListCoverageStatisticsResponse::~OAIListCoverageStatisticsResponse() {}

void OAIListCoverageStatisticsResponse::initializeModel() {

    m_counts_by_group_isSet = false;
    m_counts_by_group_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_total_counts_isSet = false;
    m_total_counts_isValid = false;
}

void OAIListCoverageStatisticsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCoverageStatisticsResponse::fromJsonObject(QJsonObject json) {

    m_counts_by_group_isValid = ::OpenAPI::fromJsonValue(m_counts_by_group, json[QString("countsByGroup")]);
    m_counts_by_group_isSet = !json[QString("countsByGroup")].isNull() && m_counts_by_group_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_total_counts_isValid = ::OpenAPI::fromJsonValue(m_total_counts, json[QString("totalCounts")]);
    m_total_counts_isSet = !json[QString("totalCounts")].isNull() && m_total_counts_isValid;
}

QString OAIListCoverageStatisticsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCoverageStatisticsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_counts_by_group.isSet()) {
        obj.insert(QString("countsByGroup"), ::OpenAPI::toJsonValue(m_counts_by_group));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_total_counts_isSet) {
        obj.insert(QString("totalCounts"), ::OpenAPI::toJsonValue(m_total_counts));
    }
    return obj;
}

QList OAIListCoverageStatisticsResponse::getCountsByGroup() const {
    return m_counts_by_group;
}
void OAIListCoverageStatisticsResponse::setCountsByGroup(const QList &counts_by_group) {
    m_counts_by_group = counts_by_group;
    m_counts_by_group_isSet = true;
}

bool OAIListCoverageStatisticsResponse::is_counts_by_group_Set() const{
    return m_counts_by_group_isSet;
}

bool OAIListCoverageStatisticsResponse::is_counts_by_group_Valid() const{
    return m_counts_by_group_isValid;
}

QString OAIListCoverageStatisticsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListCoverageStatisticsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCoverageStatisticsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCoverageStatisticsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListCoverageStatisticsResponse::getTotalCounts() const {
    return m_total_counts;
}
void OAIListCoverageStatisticsResponse::setTotalCounts(const qint32 &total_counts) {
    m_total_counts = total_counts;
    m_total_counts_isSet = true;
}

bool OAIListCoverageStatisticsResponse::is_total_counts_Set() const{
    return m_total_counts_isSet;
}

bool OAIListCoverageStatisticsResponse::is_total_counts_Valid() const{
    return m_total_counts_isValid;
}

bool OAIListCoverageStatisticsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counts_by_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_counts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCoverageStatisticsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_counts_isValid && true;
}

} // namespace OpenAPI
