/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICvss2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICvss2::OAICvss2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICvss2::OAICvss2() {
    this->initializeModel();
}

OAICvss2::~OAICvss2() {}

void OAICvss2::initializeModel() {

    m_base_score_isSet = false;
    m_base_score_isValid = false;

    m_scoring_vector_isSet = false;
    m_scoring_vector_isValid = false;
}

void OAICvss2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICvss2::fromJsonObject(QJsonObject json) {

    m_base_score_isValid = ::OpenAPI::fromJsonValue(m_base_score, json[QString("baseScore")]);
    m_base_score_isSet = !json[QString("baseScore")].isNull() && m_base_score_isValid;

    m_scoring_vector_isValid = ::OpenAPI::fromJsonValue(m_scoring_vector, json[QString("scoringVector")]);
    m_scoring_vector_isSet = !json[QString("scoringVector")].isNull() && m_scoring_vector_isValid;
}

QString OAICvss2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICvss2::asJsonObject() const {
    QJsonObject obj;
    if (m_base_score_isSet) {
        obj.insert(QString("baseScore"), ::OpenAPI::toJsonValue(m_base_score));
    }
    if (m_scoring_vector_isSet) {
        obj.insert(QString("scoringVector"), ::OpenAPI::toJsonValue(m_scoring_vector));
    }
    return obj;
}

double OAICvss2::getBaseScore() const {
    return m_base_score;
}
void OAICvss2::setBaseScore(const double &base_score) {
    m_base_score = base_score;
    m_base_score_isSet = true;
}

bool OAICvss2::is_base_score_Set() const{
    return m_base_score_isSet;
}

bool OAICvss2::is_base_score_Valid() const{
    return m_base_score_isValid;
}

QString OAICvss2::getScoringVector() const {
    return m_scoring_vector;
}
void OAICvss2::setScoringVector(const QString &scoring_vector) {
    m_scoring_vector = scoring_vector;
    m_scoring_vector_isSet = true;
}

bool OAICvss2::is_scoring_vector_Set() const{
    return m_scoring_vector_isSet;
}

bool OAICvss2::is_scoring_vector_Valid() const{
    return m_scoring_vector_isValid;
}

bool OAICvss2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_vector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICvss2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
