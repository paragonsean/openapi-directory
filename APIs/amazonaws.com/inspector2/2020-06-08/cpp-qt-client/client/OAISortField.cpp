/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISortField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISortField::OAISortField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISortField::OAISortField() {
    this->initializeModel();
}

OAISortField::~OAISortField() {}

void OAISortField::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISortField::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISortField::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AWS_ACCOUNT_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::AWS_ACCOUNT_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FINDING_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::FINDING_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEVERITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::SEVERITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIRST_OBSERVED_AT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::FIRST_OBSERVED_AT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAST_OBSERVED_AT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::LAST_OBSERVED_AT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FINDING_STATUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::FINDING_STATUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESOURCE_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::RESOURCE_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECR_IMAGE_PUSHED_AT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::ECR_IMAGE_PUSHED_AT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECR_IMAGE_REPOSITORY_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::ECR_IMAGE_REPOSITORY_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECR_IMAGE_REGISTRY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::ECR_IMAGE_REGISTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NETWORK_PROTOCOL", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::NETWORK_PROTOCOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPONENT_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::COMPONENT_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VULNERABILITY_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::VULNERABILITY_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VULNERABILITY_SOURCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::VULNERABILITY_SOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSPECTOR_SCORE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::INSPECTOR_SCORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VENDOR_SEVERITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::VENDOR_SEVERITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EPSS_SCORE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISortField::EPSS_SCORE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISortField::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISortField::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISortField::AWS_ACCOUNT_ID:
            val = "AWS_ACCOUNT_ID";
            break;
        case eOAISortField::FINDING_TYPE:
            val = "FINDING_TYPE";
            break;
        case eOAISortField::SEVERITY:
            val = "SEVERITY";
            break;
        case eOAISortField::FIRST_OBSERVED_AT:
            val = "FIRST_OBSERVED_AT";
            break;
        case eOAISortField::LAST_OBSERVED_AT:
            val = "LAST_OBSERVED_AT";
            break;
        case eOAISortField::FINDING_STATUS:
            val = "FINDING_STATUS";
            break;
        case eOAISortField::RESOURCE_TYPE:
            val = "RESOURCE_TYPE";
            break;
        case eOAISortField::ECR_IMAGE_PUSHED_AT:
            val = "ECR_IMAGE_PUSHED_AT";
            break;
        case eOAISortField::ECR_IMAGE_REPOSITORY_NAME:
            val = "ECR_IMAGE_REPOSITORY_NAME";
            break;
        case eOAISortField::ECR_IMAGE_REGISTRY:
            val = "ECR_IMAGE_REGISTRY";
            break;
        case eOAISortField::NETWORK_PROTOCOL:
            val = "NETWORK_PROTOCOL";
            break;
        case eOAISortField::COMPONENT_TYPE:
            val = "COMPONENT_TYPE";
            break;
        case eOAISortField::VULNERABILITY_ID:
            val = "VULNERABILITY_ID";
            break;
        case eOAISortField::VULNERABILITY_SOURCE:
            val = "VULNERABILITY_SOURCE";
            break;
        case eOAISortField::INSPECTOR_SCORE:
            val = "INSPECTOR_SCORE";
            break;
        case eOAISortField::VENDOR_SEVERITY:
            val = "VENDOR_SEVERITY";
            break;
        case eOAISortField::EPSS_SCORE:
            val = "EPSS_SCORE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISortField::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISortField::eOAISortField OAISortField::getValue() const {
    return m_value;
}

void OAISortField::setValue(const OAISortField::eOAISortField& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISortField::isSet() const {
    
    return m_value_isSet;
}

bool OAISortField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
