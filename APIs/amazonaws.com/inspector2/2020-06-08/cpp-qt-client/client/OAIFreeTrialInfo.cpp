/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFreeTrialInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFreeTrialInfo::OAIFreeTrialInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFreeTrialInfo::OAIFreeTrialInfo() {
    this->initializeModel();
}

OAIFreeTrialInfo::~OAIFreeTrialInfo() {}

void OAIFreeTrialInfo::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFreeTrialInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFreeTrialInfo::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFreeTrialInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFreeTrialInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIFreeTrialInfo::getEnd() const {
    return m_end;
}
void OAIFreeTrialInfo::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIFreeTrialInfo::is_end_Set() const{
    return m_end_isSet;
}

bool OAIFreeTrialInfo::is_end_Valid() const{
    return m_end_isValid;
}

QDateTime OAIFreeTrialInfo::getStart() const {
    return m_start;
}
void OAIFreeTrialInfo::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIFreeTrialInfo::is_start_Set() const{
    return m_start_isSet;
}

bool OAIFreeTrialInfo::is_start_Valid() const{
    return m_start_isValid;
}

OAIFreeTrialStatus OAIFreeTrialInfo::getStatus() const {
    return m_status;
}
void OAIFreeTrialInfo::setStatus(const OAIFreeTrialStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFreeTrialInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFreeTrialInfo::is_status_Valid() const{
    return m_status_isValid;
}

OAIFreeTrialType OAIFreeTrialInfo::getType() const {
    return m_type;
}
void OAIFreeTrialInfo::setType(const OAIFreeTrialType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFreeTrialInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFreeTrialInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFreeTrialInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFreeTrialInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_isValid && m_start_isValid && m_status_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
