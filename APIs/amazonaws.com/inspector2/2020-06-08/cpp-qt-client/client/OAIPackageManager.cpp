/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageManager.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageManager::OAIPackageManager(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageManager::OAIPackageManager() {
    this->initializeModel();
}

OAIPackageManager::~OAIPackageManager() {}

void OAIPackageManager::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPackageManager::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPackageManager::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BUNDLER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::BUNDLER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CARGO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::CARGO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPOSER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::COMPOSER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NPM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::NPM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUGET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::NUGET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PIPENV", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::PIPENV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POETRY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::POETRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("YARN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::YARN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GOBINARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::GOBINARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GOMOD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::GOMOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::JAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::OS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PIP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::PIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PYTHONPKG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::PYTHONPKG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NODEPKG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::NODEPKG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::POM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GEMSPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageManager::GEMSPEC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPackageManager::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPackageManager::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPackageManager::BUNDLER:
            val = "BUNDLER";
            break;
        case eOAIPackageManager::CARGO:
            val = "CARGO";
            break;
        case eOAIPackageManager::COMPOSER:
            val = "COMPOSER";
            break;
        case eOAIPackageManager::NPM:
            val = "NPM";
            break;
        case eOAIPackageManager::NUGET:
            val = "NUGET";
            break;
        case eOAIPackageManager::PIPENV:
            val = "PIPENV";
            break;
        case eOAIPackageManager::POETRY:
            val = "POETRY";
            break;
        case eOAIPackageManager::YARN:
            val = "YARN";
            break;
        case eOAIPackageManager::GOBINARY:
            val = "GOBINARY";
            break;
        case eOAIPackageManager::GOMOD:
            val = "GOMOD";
            break;
        case eOAIPackageManager::JAR:
            val = "JAR";
            break;
        case eOAIPackageManager::OS:
            val = "OS";
            break;
        case eOAIPackageManager::PIP:
            val = "PIP";
            break;
        case eOAIPackageManager::PYTHONPKG:
            val = "PYTHONPKG";
            break;
        case eOAIPackageManager::NODEPKG:
            val = "NODEPKG";
            break;
        case eOAIPackageManager::POM:
            val = "POM";
            break;
        case eOAIPackageManager::GEMSPEC:
            val = "GEMSPEC";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPackageManager::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPackageManager::eOAIPackageManager OAIPackageManager::getValue() const {
    return m_value;
}

void OAIPackageManager::setValue(const OAIPackageManager::eOAIPackageManager& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPackageManager::isSet() const {
    
    return m_value_isSet;
}

bool OAIPackageManager::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
