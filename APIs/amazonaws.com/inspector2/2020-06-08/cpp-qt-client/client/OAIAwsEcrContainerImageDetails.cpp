/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAwsEcrContainerImageDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAwsEcrContainerImageDetails::OAIAwsEcrContainerImageDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAwsEcrContainerImageDetails::OAIAwsEcrContainerImageDetails() {
    this->initializeModel();
}

OAIAwsEcrContainerImageDetails::~OAIAwsEcrContainerImageDetails() {}

void OAIAwsEcrContainerImageDetails::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_image_hash_isSet = false;
    m_image_hash_isValid = false;

    m_image_tags_isSet = false;
    m_image_tags_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_pushed_at_isSet = false;
    m_pushed_at_isValid = false;

    m_registry_isSet = false;
    m_registry_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;
}

void OAIAwsEcrContainerImageDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAwsEcrContainerImageDetails::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_image_hash_isValid = ::OpenAPI::fromJsonValue(m_image_hash, json[QString("imageHash")]);
    m_image_hash_isSet = !json[QString("imageHash")].isNull() && m_image_hash_isValid;

    m_image_tags_isValid = ::OpenAPI::fromJsonValue(m_image_tags, json[QString("imageTags")]);
    m_image_tags_isSet = !json[QString("imageTags")].isNull() && m_image_tags_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_pushed_at_isValid = ::OpenAPI::fromJsonValue(m_pushed_at, json[QString("pushedAt")]);
    m_pushed_at_isSet = !json[QString("pushedAt")].isNull() && m_pushed_at_isValid;

    m_registry_isValid = ::OpenAPI::fromJsonValue(m_registry, json[QString("registry")]);
    m_registry_isSet = !json[QString("registry")].isNull() && m_registry_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;
}

QString OAIAwsEcrContainerImageDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAwsEcrContainerImageDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_image_hash_isSet) {
        obj.insert(QString("imageHash"), ::OpenAPI::toJsonValue(m_image_hash));
    }
    if (m_image_tags.isSet()) {
        obj.insert(QString("imageTags"), ::OpenAPI::toJsonValue(m_image_tags));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_pushed_at_isSet) {
        obj.insert(QString("pushedAt"), ::OpenAPI::toJsonValue(m_pushed_at));
    }
    if (m_registry_isSet) {
        obj.insert(QString("registry"), ::OpenAPI::toJsonValue(m_registry));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    return obj;
}

QString OAIAwsEcrContainerImageDetails::getArchitecture() const {
    return m_architecture;
}
void OAIAwsEcrContainerImageDetails::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIAwsEcrContainerImageDetails::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIAwsEcrContainerImageDetails::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIAwsEcrContainerImageDetails::getAuthor() const {
    return m_author;
}
void OAIAwsEcrContainerImageDetails::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIAwsEcrContainerImageDetails::is_author_Set() const{
    return m_author_isSet;
}

bool OAIAwsEcrContainerImageDetails::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIAwsEcrContainerImageDetails::getImageHash() const {
    return m_image_hash;
}
void OAIAwsEcrContainerImageDetails::setImageHash(const QString &image_hash) {
    m_image_hash = image_hash;
    m_image_hash_isSet = true;
}

bool OAIAwsEcrContainerImageDetails::is_image_hash_Set() const{
    return m_image_hash_isSet;
}

bool OAIAwsEcrContainerImageDetails::is_image_hash_Valid() const{
    return m_image_hash_isValid;
}

QList OAIAwsEcrContainerImageDetails::getImageTags() const {
    return m_image_tags;
}
void OAIAwsEcrContainerImageDetails::setImageTags(const QList &image_tags) {
    m_image_tags = image_tags;
    m_image_tags_isSet = true;
}

bool OAIAwsEcrContainerImageDetails::is_image_tags_Set() const{
    return m_image_tags_isSet;
}

bool OAIAwsEcrContainerImageDetails::is_image_tags_Valid() const{
    return m_image_tags_isValid;
}

QString OAIAwsEcrContainerImageDetails::getPlatform() const {
    return m_platform;
}
void OAIAwsEcrContainerImageDetails::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIAwsEcrContainerImageDetails::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIAwsEcrContainerImageDetails::is_platform_Valid() const{
    return m_platform_isValid;
}

QDateTime OAIAwsEcrContainerImageDetails::getPushedAt() const {
    return m_pushed_at;
}
void OAIAwsEcrContainerImageDetails::setPushedAt(const QDateTime &pushed_at) {
    m_pushed_at = pushed_at;
    m_pushed_at_isSet = true;
}

bool OAIAwsEcrContainerImageDetails::is_pushed_at_Set() const{
    return m_pushed_at_isSet;
}

bool OAIAwsEcrContainerImageDetails::is_pushed_at_Valid() const{
    return m_pushed_at_isValid;
}

QString OAIAwsEcrContainerImageDetails::getRegistry() const {
    return m_registry;
}
void OAIAwsEcrContainerImageDetails::setRegistry(const QString &registry) {
    m_registry = registry;
    m_registry_isSet = true;
}

bool OAIAwsEcrContainerImageDetails::is_registry_Set() const{
    return m_registry_isSet;
}

bool OAIAwsEcrContainerImageDetails::is_registry_Valid() const{
    return m_registry_isValid;
}

QString OAIAwsEcrContainerImageDetails::getRepositoryName() const {
    return m_repository_name;
}
void OAIAwsEcrContainerImageDetails::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIAwsEcrContainerImageDetails::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIAwsEcrContainerImageDetails::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

bool OAIAwsEcrContainerImageDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pushed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAwsEcrContainerImageDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_hash_isValid && m_registry_isValid && m_repository_name_isValid && true;
}

} // namespace OpenAPI
