/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoveredResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoveredResource::OAICoveredResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoveredResource::OAICoveredResource() {
    this->initializeModel();
}

OAICoveredResource::~OAICoveredResource() {}

void OAICoveredResource::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_last_scanned_at_isSet = false;
    m_last_scanned_at_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_metadata_isSet = false;
    m_resource_metadata_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_scan_status_isSet = false;
    m_scan_status_isValid = false;

    m_scan_type_isSet = false;
    m_scan_type_isValid = false;
}

void OAICoveredResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoveredResource::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_last_scanned_at_isValid = ::OpenAPI::fromJsonValue(m_last_scanned_at, json[QString("lastScannedAt")]);
    m_last_scanned_at_isSet = !json[QString("lastScannedAt")].isNull() && m_last_scanned_at_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_metadata_isValid = ::OpenAPI::fromJsonValue(m_resource_metadata, json[QString("resourceMetadata")]);
    m_resource_metadata_isSet = !json[QString("resourceMetadata")].isNull() && m_resource_metadata_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_scan_status_isValid = ::OpenAPI::fromJsonValue(m_scan_status, json[QString("scanStatus")]);
    m_scan_status_isSet = !json[QString("scanStatus")].isNull() && m_scan_status_isValid;

    m_scan_type_isValid = ::OpenAPI::fromJsonValue(m_scan_type, json[QString("scanType")]);
    m_scan_type_isSet = !json[QString("scanType")].isNull() && m_scan_type_isValid;
}

QString OAICoveredResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoveredResource::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_last_scanned_at_isSet) {
        obj.insert(QString("lastScannedAt"), ::OpenAPI::toJsonValue(m_last_scanned_at));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_metadata.isSet()) {
        obj.insert(QString("resourceMetadata"), ::OpenAPI::toJsonValue(m_resource_metadata));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_scan_status.isSet()) {
        obj.insert(QString("scanStatus"), ::OpenAPI::toJsonValue(m_scan_status));
    }
    if (m_scan_type.isSet()) {
        obj.insert(QString("scanType"), ::OpenAPI::toJsonValue(m_scan_type));
    }
    return obj;
}

QString OAICoveredResource::getAccountId() const {
    return m_account_id;
}
void OAICoveredResource::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICoveredResource::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICoveredResource::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QDateTime OAICoveredResource::getLastScannedAt() const {
    return m_last_scanned_at;
}
void OAICoveredResource::setLastScannedAt(const QDateTime &last_scanned_at) {
    m_last_scanned_at = last_scanned_at;
    m_last_scanned_at_isSet = true;
}

bool OAICoveredResource::is_last_scanned_at_Set() const{
    return m_last_scanned_at_isSet;
}

bool OAICoveredResource::is_last_scanned_at_Valid() const{
    return m_last_scanned_at_isValid;
}

QString OAICoveredResource::getResourceId() const {
    return m_resource_id;
}
void OAICoveredResource::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICoveredResource::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICoveredResource::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAICoveredResource_resourceMetadata OAICoveredResource::getResourceMetadata() const {
    return m_resource_metadata;
}
void OAICoveredResource::setResourceMetadata(const OAICoveredResource_resourceMetadata &resource_metadata) {
    m_resource_metadata = resource_metadata;
    m_resource_metadata_isSet = true;
}

bool OAICoveredResource::is_resource_metadata_Set() const{
    return m_resource_metadata_isSet;
}

bool OAICoveredResource::is_resource_metadata_Valid() const{
    return m_resource_metadata_isValid;
}

OAICoverageResourceType OAICoveredResource::getResourceType() const {
    return m_resource_type;
}
void OAICoveredResource::setResourceType(const OAICoverageResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAICoveredResource::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAICoveredResource::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAICoveredResource_scanStatus OAICoveredResource::getScanStatus() const {
    return m_scan_status;
}
void OAICoveredResource::setScanStatus(const OAICoveredResource_scanStatus &scan_status) {
    m_scan_status = scan_status;
    m_scan_status_isSet = true;
}

bool OAICoveredResource::is_scan_status_Set() const{
    return m_scan_status_isSet;
}

bool OAICoveredResource::is_scan_status_Valid() const{
    return m_scan_status_isValid;
}

OAIScanType OAICoveredResource::getScanType() const {
    return m_scan_type;
}
void OAICoveredResource::setScanType(const OAIScanType &scan_type) {
    m_scan_type = scan_type;
    m_scan_type_isSet = true;
}

bool OAICoveredResource::is_scan_type_Set() const{
    return m_scan_type_isSet;
}

bool OAICoveredResource::is_scan_type_Valid() const{
    return m_scan_type_isValid;
}

bool OAICoveredResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_scanned_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoveredResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_resource_id_isValid && m_resource_type_isValid && m_scan_type_isValid && true;
}

} // namespace OpenAPI
