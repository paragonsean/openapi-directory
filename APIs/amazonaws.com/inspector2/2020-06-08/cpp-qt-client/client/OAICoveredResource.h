/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICoveredResource.h
 *
 * An object that contains details about a resource covered by Amazon Inspector.
 */

#ifndef OAICoveredResource_H
#define OAICoveredResource_H

#include <QJsonObject>

#include "OAICoverageResourceType.h"
#include "OAICoveredResource_resourceMetadata.h"
#include "OAICoveredResource_scanStatus.h"
#include "OAIScanType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICoveredResource_resourceMetadata;
class OAICoveredResource_scanStatus;

class OAICoveredResource : public OAIObject {
public:
    OAICoveredResource();
    OAICoveredResource(QString json);
    ~OAICoveredResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QDateTime getLastScannedAt() const;
    void setLastScannedAt(const QDateTime &last_scanned_at);
    bool is_last_scanned_at_Set() const;
    bool is_last_scanned_at_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    OAICoveredResource_resourceMetadata getResourceMetadata() const;
    void setResourceMetadata(const OAICoveredResource_resourceMetadata &resource_metadata);
    bool is_resource_metadata_Set() const;
    bool is_resource_metadata_Valid() const;

    OAICoverageResourceType getResourceType() const;
    void setResourceType(const OAICoverageResourceType &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    OAICoveredResource_scanStatus getScanStatus() const;
    void setScanStatus(const OAICoveredResource_scanStatus &scan_status);
    bool is_scan_status_Set() const;
    bool is_scan_status_Valid() const;

    OAIScanType getScanType() const;
    void setScanType(const OAIScanType &scan_type);
    bool is_scan_type_Set() const;
    bool is_scan_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QDateTime m_last_scanned_at;
    bool m_last_scanned_at_isSet;
    bool m_last_scanned_at_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    OAICoveredResource_resourceMetadata m_resource_metadata;
    bool m_resource_metadata_isSet;
    bool m_resource_metadata_isValid;

    OAICoverageResourceType m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    OAICoveredResource_scanStatus m_scan_status;
    bool m_scan_status_isSet;
    bool m_scan_status_isValid;

    OAIScanType m_scan_type;
    bool m_scan_type_isSet;
    bool m_scan_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICoveredResource)

#endif // OAICoveredResource_H
