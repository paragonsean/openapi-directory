/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateFilterRequest.h
 *
 * 
 */

#ifndef OAICreateFilterRequest_H
#define OAICreateFilterRequest_H

#include <QJsonObject>

#include "OAICreateFilterRequest_filterCriteria.h"
#include "OAIFilterAction.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateFilterRequest_filterCriteria;

class OAICreateFilterRequest : public OAIObject {
public:
    OAICreateFilterRequest();
    OAICreateFilterRequest(QString json);
    ~OAICreateFilterRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFilterAction getAction() const;
    void setAction(const OAIFilterAction &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAICreateFilterRequest_filterCriteria getFilterCriteria() const;
    void setFilterCriteria(const OAICreateFilterRequest_filterCriteria &filter_criteria);
    bool is_filter_criteria_Set() const;
    bool is_filter_criteria_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFilterAction m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAICreateFilterRequest_filterCriteria m_filter_criteria;
    bool m_filter_criteria_isSet;
    bool m_filter_criteria_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateFilterRequest)

#endif // OAICreateFilterRequest_H
