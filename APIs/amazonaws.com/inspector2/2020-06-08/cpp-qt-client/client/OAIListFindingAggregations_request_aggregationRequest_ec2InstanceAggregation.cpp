/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation() {
    this->initializeModel();
}

OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::~OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation() {}

void OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::initializeModel() {

    m_amis_isSet = false;
    m_amis_isValid = false;

    m_instance_ids_isSet = false;
    m_instance_ids_isValid = false;

    m_instance_tags_isSet = false;
    m_instance_tags_isValid = false;

    m_operating_systems_isSet = false;
    m_operating_systems_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::fromJsonObject(QJsonObject json) {

    m_amis_isValid = ::OpenAPI::fromJsonValue(m_amis, json[QString("amis")]);
    m_amis_isSet = !json[QString("amis")].isNull() && m_amis_isValid;

    m_instance_ids_isValid = ::OpenAPI::fromJsonValue(m_instance_ids, json[QString("instanceIds")]);
    m_instance_ids_isSet = !json[QString("instanceIds")].isNull() && m_instance_ids_isValid;

    m_instance_tags_isValid = ::OpenAPI::fromJsonValue(m_instance_tags, json[QString("instanceTags")]);
    m_instance_tags_isSet = !json[QString("instanceTags")].isNull() && m_instance_tags_isValid;

    m_operating_systems_isValid = ::OpenAPI::fromJsonValue(m_operating_systems, json[QString("operatingSystems")]);
    m_operating_systems_isSet = !json[QString("operatingSystems")].isNull() && m_operating_systems_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_amis.isSet()) {
        obj.insert(QString("amis"), ::OpenAPI::toJsonValue(m_amis));
    }
    if (m_instance_ids.isSet()) {
        obj.insert(QString("instanceIds"), ::OpenAPI::toJsonValue(m_instance_ids));
    }
    if (m_instance_tags.isSet()) {
        obj.insert(QString("instanceTags"), ::OpenAPI::toJsonValue(m_instance_tags));
    }
    if (m_operating_systems.isSet()) {
        obj.insert(QString("operatingSystems"), ::OpenAPI::toJsonValue(m_operating_systems));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QList OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::getAmis() const {
    return m_amis;
}
void OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::setAmis(const QList &amis) {
    m_amis = amis;
    m_amis_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_amis_Set() const{
    return m_amis_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_amis_Valid() const{
    return m_amis_isValid;
}

QList OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::getInstanceIds() const {
    return m_instance_ids;
}
void OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::setInstanceIds(const QList &instance_ids) {
    m_instance_ids = instance_ids;
    m_instance_ids_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_instance_ids_Set() const{
    return m_instance_ids_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_instance_ids_Valid() const{
    return m_instance_ids_isValid;
}

QList OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::getInstanceTags() const {
    return m_instance_tags;
}
void OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::setInstanceTags(const QList &instance_tags) {
    m_instance_tags = instance_tags;
    m_instance_tags_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_instance_tags_Set() const{
    return m_instance_tags_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_instance_tags_Valid() const{
    return m_instance_tags_isValid;
}

QList OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::getOperatingSystems() const {
    return m_operating_systems;
}
void OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::setOperatingSystems(const QList &operating_systems) {
    m_operating_systems = operating_systems;
    m_operating_systems_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_operating_systems_Set() const{
    return m_operating_systems_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_operating_systems_Valid() const{
    return m_operating_systems_isValid;
}

OAIEc2InstanceSortBy OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::getSortBy() const {
    return m_sort_by;
}
void OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::setSortBy(const OAIEc2InstanceSortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::getSortOrder() const {
    return m_sort_order;
}
void OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_systems.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFindingAggregations_request_aggregationRequest_ec2InstanceAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
