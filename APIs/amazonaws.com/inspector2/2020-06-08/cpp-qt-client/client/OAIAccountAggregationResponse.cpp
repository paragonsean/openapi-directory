/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountAggregationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountAggregationResponse::OAIAccountAggregationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountAggregationResponse::OAIAccountAggregationResponse() {
    this->initializeModel();
}

OAIAccountAggregationResponse::~OAIAccountAggregationResponse() {}

void OAIAccountAggregationResponse::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_severity_counts_isSet = false;
    m_severity_counts_isValid = false;
}

void OAIAccountAggregationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountAggregationResponse::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_severity_counts_isValid = ::OpenAPI::fromJsonValue(m_severity_counts, json[QString("severityCounts")]);
    m_severity_counts_isSet = !json[QString("severityCounts")].isNull() && m_severity_counts_isValid;
}

QString OAIAccountAggregationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountAggregationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_severity_counts.isSet()) {
        obj.insert(QString("severityCounts"), ::OpenAPI::toJsonValue(m_severity_counts));
    }
    return obj;
}

QString OAIAccountAggregationResponse::getAccountId() const {
    return m_account_id;
}
void OAIAccountAggregationResponse::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountAggregationResponse::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountAggregationResponse::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIAccountAggregationResponse_severityCounts OAIAccountAggregationResponse::getSeverityCounts() const {
    return m_severity_counts;
}
void OAIAccountAggregationResponse::setSeverityCounts(const OAIAccountAggregationResponse_severityCounts &severity_counts) {
    m_severity_counts = severity_counts;
    m_severity_counts_isSet = true;
}

bool OAIAccountAggregationResponse::is_severity_counts_Set() const{
    return m_severity_counts_isSet;
}

bool OAIAccountAggregationResponse::is_severity_counts_Valid() const{
    return m_severity_counts_isValid;
}

bool OAIAccountAggregationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountAggregationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
