/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageFilter::OAIPackageFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageFilter::OAIPackageFilter() {
    this->initializeModel();
}

OAIPackageFilter::~OAIPackageFilter() {}

void OAIPackageFilter::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_epoch_isSet = false;
    m_epoch_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_release_isSet = false;
    m_release_isValid = false;

    m_source_lambda_layer_arn_isSet = false;
    m_source_lambda_layer_arn_isValid = false;

    m_source_layer_hash_isSet = false;
    m_source_layer_hash_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPackageFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageFilter::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_epoch_isValid = ::OpenAPI::fromJsonValue(m_epoch, json[QString("epoch")]);
    m_epoch_isSet = !json[QString("epoch")].isNull() && m_epoch_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_release_isValid = ::OpenAPI::fromJsonValue(m_release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;

    m_source_lambda_layer_arn_isValid = ::OpenAPI::fromJsonValue(m_source_lambda_layer_arn, json[QString("sourceLambdaLayerArn")]);
    m_source_lambda_layer_arn_isSet = !json[QString("sourceLambdaLayerArn")].isNull() && m_source_lambda_layer_arn_isValid;

    m_source_layer_hash_isValid = ::OpenAPI::fromJsonValue(m_source_layer_hash, json[QString("sourceLayerHash")]);
    m_source_layer_hash_isSet = !json[QString("sourceLayerHash")].isNull() && m_source_layer_hash_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPackageFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture.isSet()) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_epoch.isSet()) {
        obj.insert(QString("epoch"), ::OpenAPI::toJsonValue(m_epoch));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_release.isSet()) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(m_release));
    }
    if (m_source_lambda_layer_arn.isSet()) {
        obj.insert(QString("sourceLambdaLayerArn"), ::OpenAPI::toJsonValue(m_source_lambda_layer_arn));
    }
    if (m_source_layer_hash.isSet()) {
        obj.insert(QString("sourceLayerHash"), ::OpenAPI::toJsonValue(m_source_layer_hash));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIPackageFilter_architecture OAIPackageFilter::getArchitecture() const {
    return m_architecture;
}
void OAIPackageFilter::setArchitecture(const OAIPackageFilter_architecture &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIPackageFilter::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIPackageFilter::is_architecture_Valid() const{
    return m_architecture_isValid;
}

OAIPackageFilter_epoch OAIPackageFilter::getEpoch() const {
    return m_epoch;
}
void OAIPackageFilter::setEpoch(const OAIPackageFilter_epoch &epoch) {
    m_epoch = epoch;
    m_epoch_isSet = true;
}

bool OAIPackageFilter::is_epoch_Set() const{
    return m_epoch_isSet;
}

bool OAIPackageFilter::is_epoch_Valid() const{
    return m_epoch_isValid;
}

OAIPackageFilter_name OAIPackageFilter::getName() const {
    return m_name;
}
void OAIPackageFilter::setName(const OAIPackageFilter_name &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPackageFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPackageFilter::is_name_Valid() const{
    return m_name_isValid;
}

OAIPackageFilter_release OAIPackageFilter::getRelease() const {
    return m_release;
}
void OAIPackageFilter::setRelease(const OAIPackageFilter_release &release) {
    m_release = release;
    m_release_isSet = true;
}

bool OAIPackageFilter::is_release_Set() const{
    return m_release_isSet;
}

bool OAIPackageFilter::is_release_Valid() const{
    return m_release_isValid;
}

OAIStringFilter OAIPackageFilter::getSourceLambdaLayerArn() const {
    return m_source_lambda_layer_arn;
}
void OAIPackageFilter::setSourceLambdaLayerArn(const OAIStringFilter &source_lambda_layer_arn) {
    m_source_lambda_layer_arn = source_lambda_layer_arn;
    m_source_lambda_layer_arn_isSet = true;
}

bool OAIPackageFilter::is_source_lambda_layer_arn_Set() const{
    return m_source_lambda_layer_arn_isSet;
}

bool OAIPackageFilter::is_source_lambda_layer_arn_Valid() const{
    return m_source_lambda_layer_arn_isValid;
}

OAIPackageFilter_sourceLayerHash OAIPackageFilter::getSourceLayerHash() const {
    return m_source_layer_hash;
}
void OAIPackageFilter::setSourceLayerHash(const OAIPackageFilter_sourceLayerHash &source_layer_hash) {
    m_source_layer_hash = source_layer_hash;
    m_source_layer_hash_isSet = true;
}

bool OAIPackageFilter::is_source_layer_hash_Set() const{
    return m_source_layer_hash_isSet;
}

bool OAIPackageFilter::is_source_layer_hash_Valid() const{
    return m_source_layer_hash_isValid;
}

OAIPackageFilter_version OAIPackageFilter::getVersion() const {
    return m_version;
}
void OAIPackageFilter::setVersion(const OAIPackageFilter_version &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPackageFilter::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPackageFilter::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPackageFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_epoch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_lambda_layer_arn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_layer_hash.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
