/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindingDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindingDetail::OAIFindingDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindingDetail::OAIFindingDetail() {
    this->initializeModel();
}

OAIFindingDetail::~OAIFindingDetail() {}

void OAIFindingDetail::initializeModel() {

    m_cisa_data_isSet = false;
    m_cisa_data_isValid = false;

    m_cwes_isSet = false;
    m_cwes_isValid = false;

    m_epss_score_isSet = false;
    m_epss_score_isValid = false;

    m_evidences_isSet = false;
    m_evidences_isValid = false;

    m_exploit_observed_isSet = false;
    m_exploit_observed_isValid = false;

    m_finding_arn_isSet = false;
    m_finding_arn_isValid = false;

    m_reference_urls_isSet = false;
    m_reference_urls_isValid = false;

    m_risk_score_isSet = false;
    m_risk_score_isValid = false;

    m_tools_isSet = false;
    m_tools_isValid = false;

    m_ttps_isSet = false;
    m_ttps_isValid = false;
}

void OAIFindingDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindingDetail::fromJsonObject(QJsonObject json) {

    m_cisa_data_isValid = ::OpenAPI::fromJsonValue(m_cisa_data, json[QString("cisaData")]);
    m_cisa_data_isSet = !json[QString("cisaData")].isNull() && m_cisa_data_isValid;

    m_cwes_isValid = ::OpenAPI::fromJsonValue(m_cwes, json[QString("cwes")]);
    m_cwes_isSet = !json[QString("cwes")].isNull() && m_cwes_isValid;

    m_epss_score_isValid = ::OpenAPI::fromJsonValue(m_epss_score, json[QString("epssScore")]);
    m_epss_score_isSet = !json[QString("epssScore")].isNull() && m_epss_score_isValid;

    m_evidences_isValid = ::OpenAPI::fromJsonValue(m_evidences, json[QString("evidences")]);
    m_evidences_isSet = !json[QString("evidences")].isNull() && m_evidences_isValid;

    m_exploit_observed_isValid = ::OpenAPI::fromJsonValue(m_exploit_observed, json[QString("exploitObserved")]);
    m_exploit_observed_isSet = !json[QString("exploitObserved")].isNull() && m_exploit_observed_isValid;

    m_finding_arn_isValid = ::OpenAPI::fromJsonValue(m_finding_arn, json[QString("findingArn")]);
    m_finding_arn_isSet = !json[QString("findingArn")].isNull() && m_finding_arn_isValid;

    m_reference_urls_isValid = ::OpenAPI::fromJsonValue(m_reference_urls, json[QString("referenceUrls")]);
    m_reference_urls_isSet = !json[QString("referenceUrls")].isNull() && m_reference_urls_isValid;

    m_risk_score_isValid = ::OpenAPI::fromJsonValue(m_risk_score, json[QString("riskScore")]);
    m_risk_score_isSet = !json[QString("riskScore")].isNull() && m_risk_score_isValid;

    m_tools_isValid = ::OpenAPI::fromJsonValue(m_tools, json[QString("tools")]);
    m_tools_isSet = !json[QString("tools")].isNull() && m_tools_isValid;

    m_ttps_isValid = ::OpenAPI::fromJsonValue(m_ttps, json[QString("ttps")]);
    m_ttps_isSet = !json[QString("ttps")].isNull() && m_ttps_isValid;
}

QString OAIFindingDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindingDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_cisa_data.isSet()) {
        obj.insert(QString("cisaData"), ::OpenAPI::toJsonValue(m_cisa_data));
    }
    if (m_cwes.isSet()) {
        obj.insert(QString("cwes"), ::OpenAPI::toJsonValue(m_cwes));
    }
    if (m_epss_score_isSet) {
        obj.insert(QString("epssScore"), ::OpenAPI::toJsonValue(m_epss_score));
    }
    if (m_evidences.isSet()) {
        obj.insert(QString("evidences"), ::OpenAPI::toJsonValue(m_evidences));
    }
    if (m_exploit_observed.isSet()) {
        obj.insert(QString("exploitObserved"), ::OpenAPI::toJsonValue(m_exploit_observed));
    }
    if (m_finding_arn_isSet) {
        obj.insert(QString("findingArn"), ::OpenAPI::toJsonValue(m_finding_arn));
    }
    if (m_reference_urls.isSet()) {
        obj.insert(QString("referenceUrls"), ::OpenAPI::toJsonValue(m_reference_urls));
    }
    if (m_risk_score_isSet) {
        obj.insert(QString("riskScore"), ::OpenAPI::toJsonValue(m_risk_score));
    }
    if (m_tools.isSet()) {
        obj.insert(QString("tools"), ::OpenAPI::toJsonValue(m_tools));
    }
    if (m_ttps.isSet()) {
        obj.insert(QString("ttps"), ::OpenAPI::toJsonValue(m_ttps));
    }
    return obj;
}

OAICisaData OAIFindingDetail::getCisaData() const {
    return m_cisa_data;
}
void OAIFindingDetail::setCisaData(const OAICisaData &cisa_data) {
    m_cisa_data = cisa_data;
    m_cisa_data_isSet = true;
}

bool OAIFindingDetail::is_cisa_data_Set() const{
    return m_cisa_data_isSet;
}

bool OAIFindingDetail::is_cisa_data_Valid() const{
    return m_cisa_data_isValid;
}

QList OAIFindingDetail::getCwes() const {
    return m_cwes;
}
void OAIFindingDetail::setCwes(const QList &cwes) {
    m_cwes = cwes;
    m_cwes_isSet = true;
}

bool OAIFindingDetail::is_cwes_Set() const{
    return m_cwes_isSet;
}

bool OAIFindingDetail::is_cwes_Valid() const{
    return m_cwes_isValid;
}

double OAIFindingDetail::getEpssScore() const {
    return m_epss_score;
}
void OAIFindingDetail::setEpssScore(const double &epss_score) {
    m_epss_score = epss_score;
    m_epss_score_isSet = true;
}

bool OAIFindingDetail::is_epss_score_Set() const{
    return m_epss_score_isSet;
}

bool OAIFindingDetail::is_epss_score_Valid() const{
    return m_epss_score_isValid;
}

QList OAIFindingDetail::getEvidences() const {
    return m_evidences;
}
void OAIFindingDetail::setEvidences(const QList &evidences) {
    m_evidences = evidences;
    m_evidences_isSet = true;
}

bool OAIFindingDetail::is_evidences_Set() const{
    return m_evidences_isSet;
}

bool OAIFindingDetail::is_evidences_Valid() const{
    return m_evidences_isValid;
}

OAIExploitObserved OAIFindingDetail::getExploitObserved() const {
    return m_exploit_observed;
}
void OAIFindingDetail::setExploitObserved(const OAIExploitObserved &exploit_observed) {
    m_exploit_observed = exploit_observed;
    m_exploit_observed_isSet = true;
}

bool OAIFindingDetail::is_exploit_observed_Set() const{
    return m_exploit_observed_isSet;
}

bool OAIFindingDetail::is_exploit_observed_Valid() const{
    return m_exploit_observed_isValid;
}

QString OAIFindingDetail::getFindingArn() const {
    return m_finding_arn;
}
void OAIFindingDetail::setFindingArn(const QString &finding_arn) {
    m_finding_arn = finding_arn;
    m_finding_arn_isSet = true;
}

bool OAIFindingDetail::is_finding_arn_Set() const{
    return m_finding_arn_isSet;
}

bool OAIFindingDetail::is_finding_arn_Valid() const{
    return m_finding_arn_isValid;
}

QList OAIFindingDetail::getReferenceUrls() const {
    return m_reference_urls;
}
void OAIFindingDetail::setReferenceUrls(const QList &reference_urls) {
    m_reference_urls = reference_urls;
    m_reference_urls_isSet = true;
}

bool OAIFindingDetail::is_reference_urls_Set() const{
    return m_reference_urls_isSet;
}

bool OAIFindingDetail::is_reference_urls_Valid() const{
    return m_reference_urls_isValid;
}

qint32 OAIFindingDetail::getRiskScore() const {
    return m_risk_score;
}
void OAIFindingDetail::setRiskScore(const qint32 &risk_score) {
    m_risk_score = risk_score;
    m_risk_score_isSet = true;
}

bool OAIFindingDetail::is_risk_score_Set() const{
    return m_risk_score_isSet;
}

bool OAIFindingDetail::is_risk_score_Valid() const{
    return m_risk_score_isValid;
}

QList OAIFindingDetail::getTools() const {
    return m_tools;
}
void OAIFindingDetail::setTools(const QList &tools) {
    m_tools = tools;
    m_tools_isSet = true;
}

bool OAIFindingDetail::is_tools_Set() const{
    return m_tools_isSet;
}

bool OAIFindingDetail::is_tools_Valid() const{
    return m_tools_isValid;
}

QList OAIFindingDetail::getTtps() const {
    return m_ttps;
}
void OAIFindingDetail::setTtps(const QList &ttps) {
    m_ttps = ttps;
    m_ttps_isSet = true;
}

bool OAIFindingDetail::is_ttps_Set() const{
    return m_ttps_isSet;
}

bool OAIFindingDetail::is_ttps_Valid() const{
    return m_ttps_isValid;
}

bool OAIFindingDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cisa_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_epss_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exploit_observed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tools.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindingDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
