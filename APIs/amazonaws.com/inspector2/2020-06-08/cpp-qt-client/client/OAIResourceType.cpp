/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceType::OAIResourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceType::OAIResourceType() {
    this->initializeModel();
}

OAIResourceType::~OAIResourceType() {}

void OAIResourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIResourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIResourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AWS_EC2_INSTANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::EC2_INSTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_ECR_CONTAINER_IMAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::ECR_CONTAINER_IMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_ECR_REPOSITORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::ECR_REPOSITORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_LAMBDA_FUNCTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::LAMBDA_FUNCTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIResourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIResourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIResourceType::EC2_INSTANCE:
            val = "AWS_EC2_INSTANCE";
            break;
        case eOAIResourceType::ECR_CONTAINER_IMAGE:
            val = "AWS_ECR_CONTAINER_IMAGE";
            break;
        case eOAIResourceType::ECR_REPOSITORY:
            val = "AWS_ECR_REPOSITORY";
            break;
        case eOAIResourceType::LAMBDA_FUNCTION:
            val = "AWS_LAMBDA_FUNCTION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIResourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIResourceType::eOAIResourceType OAIResourceType::getValue() const {
    return m_value;
}

void OAIResourceType::setValue(const OAIResourceType::eOAIResourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIResourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIResourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
