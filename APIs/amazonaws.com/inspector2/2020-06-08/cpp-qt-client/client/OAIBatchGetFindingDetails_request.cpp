/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetFindingDetails_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetFindingDetails_request::OAIBatchGetFindingDetails_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetFindingDetails_request::OAIBatchGetFindingDetails_request() {
    this->initializeModel();
}

OAIBatchGetFindingDetails_request::~OAIBatchGetFindingDetails_request() {}

void OAIBatchGetFindingDetails_request::initializeModel() {

    m_finding_arns_isSet = false;
    m_finding_arns_isValid = false;
}

void OAIBatchGetFindingDetails_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetFindingDetails_request::fromJsonObject(QJsonObject json) {

    m_finding_arns_isValid = ::OpenAPI::fromJsonValue(m_finding_arns, json[QString("findingArns")]);
    m_finding_arns_isSet = !json[QString("findingArns")].isNull() && m_finding_arns_isValid;
}

QString OAIBatchGetFindingDetails_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetFindingDetails_request::asJsonObject() const {
    QJsonObject obj;
    if (m_finding_arns.size() > 0) {
        obj.insert(QString("findingArns"), ::OpenAPI::toJsonValue(m_finding_arns));
    }
    return obj;
}

QList<QString> OAIBatchGetFindingDetails_request::getFindingArns() const {
    return m_finding_arns;
}
void OAIBatchGetFindingDetails_request::setFindingArns(const QList<QString> &finding_arns) {
    m_finding_arns = finding_arns;
    m_finding_arns_isSet = true;
}

bool OAIBatchGetFindingDetails_request::is_finding_arns_Set() const{
    return m_finding_arns_isSet;
}

bool OAIBatchGetFindingDetails_request::is_finding_arns_Valid() const{
    return m_finding_arns_isValid;
}

bool OAIBatchGetFindingDetails_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finding_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetFindingDetails_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_finding_arns_isValid && true;
}

} // namespace OpenAPI
