/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationshipStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationshipStatus::OAIRelationshipStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationshipStatus::OAIRelationshipStatus() {
    this->initializeModel();
}

OAIRelationshipStatus::~OAIRelationshipStatus() {}

void OAIRelationshipStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRelationshipStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRelationshipStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVITED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::INVITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::REMOVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESIGNED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::RESIGNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMAIL_VERIFICATION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::EMAIL_VERIFICATION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMAIL_VERIFICATION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::EMAIL_VERIFICATION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REGION_DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::REGION_DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_SUSPENDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::ACCOUNT_SUSPENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANNOT_CREATE_DETECTOR_IN_ORG_MASTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipStatus::CANNOT_CREATE_DETECTOR_IN_ORG_MASTER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRelationshipStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRelationshipStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRelationshipStatus::CREATED:
            val = "CREATED";
            break;
        case eOAIRelationshipStatus::INVITED:
            val = "INVITED";
            break;
        case eOAIRelationshipStatus::DISABLED:
            val = "DISABLED";
            break;
        case eOAIRelationshipStatus::ENABLED:
            val = "ENABLED";
            break;
        case eOAIRelationshipStatus::REMOVED:
            val = "REMOVED";
            break;
        case eOAIRelationshipStatus::RESIGNED:
            val = "RESIGNED";
            break;
        case eOAIRelationshipStatus::DELETED:
            val = "DELETED";
            break;
        case eOAIRelationshipStatus::EMAIL_VERIFICATION_IN_PROGRESS:
            val = "EMAIL_VERIFICATION_IN_PROGRESS";
            break;
        case eOAIRelationshipStatus::EMAIL_VERIFICATION_FAILED:
            val = "EMAIL_VERIFICATION_FAILED";
            break;
        case eOAIRelationshipStatus::REGION_DISABLED:
            val = "REGION_DISABLED";
            break;
        case eOAIRelationshipStatus::ACCOUNT_SUSPENDED:
            val = "ACCOUNT_SUSPENDED";
            break;
        case eOAIRelationshipStatus::CANNOT_CREATE_DETECTOR_IN_ORG_MASTER:
            val = "CANNOT_CREATE_DETECTOR_IN_ORG_MASTER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRelationshipStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRelationshipStatus::eOAIRelationshipStatus OAIRelationshipStatus::getValue() const {
    return m_value;
}

void OAIRelationshipStatus::setValue(const OAIRelationshipStatus::eOAIRelationshipStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRelationshipStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIRelationshipStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
