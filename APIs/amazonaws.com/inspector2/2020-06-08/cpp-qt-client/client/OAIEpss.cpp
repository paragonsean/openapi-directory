/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEpss.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEpss::OAIEpss(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEpss::OAIEpss() {
    this->initializeModel();
}

OAIEpss::~OAIEpss() {}

void OAIEpss::initializeModel() {

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIEpss::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEpss::fromJsonObject(QJsonObject json) {

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIEpss::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEpss::asJsonObject() const {
    QJsonObject obj;
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

double OAIEpss::getScore() const {
    return m_score;
}
void OAIEpss::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIEpss::is_score_Set() const{
    return m_score_isSet;
}

bool OAIEpss::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIEpss::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEpss::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
