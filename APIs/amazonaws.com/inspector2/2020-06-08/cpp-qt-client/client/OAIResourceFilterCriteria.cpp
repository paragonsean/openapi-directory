/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceFilterCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceFilterCriteria::OAIResourceFilterCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceFilterCriteria::OAIResourceFilterCriteria() {
    this->initializeModel();
}

OAIResourceFilterCriteria::~OAIResourceFilterCriteria() {}

void OAIResourceFilterCriteria::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ec2_instance_tags_isSet = false;
    m_ec2_instance_tags_isValid = false;

    m_ecr_image_tags_isSet = false;
    m_ecr_image_tags_isValid = false;

    m_ecr_repository_name_isSet = false;
    m_ecr_repository_name_isValid = false;

    m_lambda_function_name_isSet = false;
    m_lambda_function_name_isValid = false;

    m_lambda_function_tags_isSet = false;
    m_lambda_function_tags_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAIResourceFilterCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceFilterCriteria::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_ec2_instance_tags_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_tags, json[QString("ec2InstanceTags")]);
    m_ec2_instance_tags_isSet = !json[QString("ec2InstanceTags")].isNull() && m_ec2_instance_tags_isValid;

    m_ecr_image_tags_isValid = ::OpenAPI::fromJsonValue(m_ecr_image_tags, json[QString("ecrImageTags")]);
    m_ecr_image_tags_isSet = !json[QString("ecrImageTags")].isNull() && m_ecr_image_tags_isValid;

    m_ecr_repository_name_isValid = ::OpenAPI::fromJsonValue(m_ecr_repository_name, json[QString("ecrRepositoryName")]);
    m_ecr_repository_name_isSet = !json[QString("ecrRepositoryName")].isNull() && m_ecr_repository_name_isValid;

    m_lambda_function_name_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_name, json[QString("lambdaFunctionName")]);
    m_lambda_function_name_isSet = !json[QString("lambdaFunctionName")].isNull() && m_lambda_function_name_isValid;

    m_lambda_function_tags_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_tags, json[QString("lambdaFunctionTags")]);
    m_lambda_function_tags_isSet = !json[QString("lambdaFunctionTags")].isNull() && m_lambda_function_tags_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;
}

QString OAIResourceFilterCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceFilterCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id.isSet()) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ec2_instance_tags.isSet()) {
        obj.insert(QString("ec2InstanceTags"), ::OpenAPI::toJsonValue(m_ec2_instance_tags));
    }
    if (m_ecr_image_tags.isSet()) {
        obj.insert(QString("ecrImageTags"), ::OpenAPI::toJsonValue(m_ecr_image_tags));
    }
    if (m_ecr_repository_name.isSet()) {
        obj.insert(QString("ecrRepositoryName"), ::OpenAPI::toJsonValue(m_ecr_repository_name));
    }
    if (m_lambda_function_name.isSet()) {
        obj.insert(QString("lambdaFunctionName"), ::OpenAPI::toJsonValue(m_lambda_function_name));
    }
    if (m_lambda_function_tags.isSet()) {
        obj.insert(QString("lambdaFunctionTags"), ::OpenAPI::toJsonValue(m_lambda_function_tags));
    }
    if (m_resource_id.isSet()) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    return obj;
}

QList OAIResourceFilterCriteria::getAccountId() const {
    return m_account_id;
}
void OAIResourceFilterCriteria::setAccountId(const QList &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIResourceFilterCriteria::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIResourceFilterCriteria::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList OAIResourceFilterCriteria::getEc2InstanceTags() const {
    return m_ec2_instance_tags;
}
void OAIResourceFilterCriteria::setEc2InstanceTags(const QList &ec2_instance_tags) {
    m_ec2_instance_tags = ec2_instance_tags;
    m_ec2_instance_tags_isSet = true;
}

bool OAIResourceFilterCriteria::is_ec2_instance_tags_Set() const{
    return m_ec2_instance_tags_isSet;
}

bool OAIResourceFilterCriteria::is_ec2_instance_tags_Valid() const{
    return m_ec2_instance_tags_isValid;
}

QList OAIResourceFilterCriteria::getEcrImageTags() const {
    return m_ecr_image_tags;
}
void OAIResourceFilterCriteria::setEcrImageTags(const QList &ecr_image_tags) {
    m_ecr_image_tags = ecr_image_tags;
    m_ecr_image_tags_isSet = true;
}

bool OAIResourceFilterCriteria::is_ecr_image_tags_Set() const{
    return m_ecr_image_tags_isSet;
}

bool OAIResourceFilterCriteria::is_ecr_image_tags_Valid() const{
    return m_ecr_image_tags_isValid;
}

QList OAIResourceFilterCriteria::getEcrRepositoryName() const {
    return m_ecr_repository_name;
}
void OAIResourceFilterCriteria::setEcrRepositoryName(const QList &ecr_repository_name) {
    m_ecr_repository_name = ecr_repository_name;
    m_ecr_repository_name_isSet = true;
}

bool OAIResourceFilterCriteria::is_ecr_repository_name_Set() const{
    return m_ecr_repository_name_isSet;
}

bool OAIResourceFilterCriteria::is_ecr_repository_name_Valid() const{
    return m_ecr_repository_name_isValid;
}

QList OAIResourceFilterCriteria::getLambdaFunctionName() const {
    return m_lambda_function_name;
}
void OAIResourceFilterCriteria::setLambdaFunctionName(const QList &lambda_function_name) {
    m_lambda_function_name = lambda_function_name;
    m_lambda_function_name_isSet = true;
}

bool OAIResourceFilterCriteria::is_lambda_function_name_Set() const{
    return m_lambda_function_name_isSet;
}

bool OAIResourceFilterCriteria::is_lambda_function_name_Valid() const{
    return m_lambda_function_name_isValid;
}

QList OAIResourceFilterCriteria::getLambdaFunctionTags() const {
    return m_lambda_function_tags;
}
void OAIResourceFilterCriteria::setLambdaFunctionTags(const QList &lambda_function_tags) {
    m_lambda_function_tags = lambda_function_tags;
    m_lambda_function_tags_isSet = true;
}

bool OAIResourceFilterCriteria::is_lambda_function_tags_Set() const{
    return m_lambda_function_tags_isSet;
}

bool OAIResourceFilterCriteria::is_lambda_function_tags_Valid() const{
    return m_lambda_function_tags_isValid;
}

QList OAIResourceFilterCriteria::getResourceId() const {
    return m_resource_id;
}
void OAIResourceFilterCriteria::setResourceId(const QList &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIResourceFilterCriteria::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceFilterCriteria::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QList OAIResourceFilterCriteria::getResourceType() const {
    return m_resource_type;
}
void OAIResourceFilterCriteria::setResourceType(const QList &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIResourceFilterCriteria::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIResourceFilterCriteria::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIResourceFilterCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_image_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_repository_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceFilterCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
