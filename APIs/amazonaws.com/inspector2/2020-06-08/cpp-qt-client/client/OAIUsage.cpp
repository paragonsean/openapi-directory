/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsage::OAIUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsage::OAIUsage() {
    this->initializeModel();
}

OAIUsage::~OAIUsage() {}

void OAIUsage::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_estimated_monthly_cost_isSet = false;
    m_estimated_monthly_cost_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsage::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_estimated_monthly_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_cost, json[QString("estimatedMonthlyCost")]);
    m_estimated_monthly_cost_isSet = !json[QString("estimatedMonthlyCost")].isNull() && m_estimated_monthly_cost_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_estimated_monthly_cost_isSet) {
        obj.insert(QString("estimatedMonthlyCost"), ::OpenAPI::toJsonValue(m_estimated_monthly_cost));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICurrency OAIUsage::getCurrency() const {
    return m_currency;
}
void OAIUsage::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIUsage::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIUsage::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIUsage::getEstimatedMonthlyCost() const {
    return m_estimated_monthly_cost;
}
void OAIUsage::setEstimatedMonthlyCost(const double &estimated_monthly_cost) {
    m_estimated_monthly_cost = estimated_monthly_cost;
    m_estimated_monthly_cost_isSet = true;
}

bool OAIUsage::is_estimated_monthly_cost_Set() const{
    return m_estimated_monthly_cost_isSet;
}

bool OAIUsage::is_estimated_monthly_cost_Valid() const{
    return m_estimated_monthly_cost_isValid;
}

double OAIUsage::getTotal() const {
    return m_total;
}
void OAIUsage::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIUsage::is_total_Set() const{
    return m_total_isSet;
}

bool OAIUsage::is_total_Valid() const{
    return m_total_isValid;
}

OAIUsageType OAIUsage::getType() const {
    return m_type;
}
void OAIUsage::setType(const OAIUsageType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUsage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUsage::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
