/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFindings_request_sortCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFindings_request_sortCriteria::OAIListFindings_request_sortCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFindings_request_sortCriteria::OAIListFindings_request_sortCriteria() {
    this->initializeModel();
}

OAIListFindings_request_sortCriteria::~OAIListFindings_request_sortCriteria() {}

void OAIListFindings_request_sortCriteria::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListFindings_request_sortCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFindings_request_sortCriteria::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIListFindings_request_sortCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFindings_request_sortCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_field.isSet()) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

OAISortField OAIListFindings_request_sortCriteria::getField() const {
    return m_field;
}
void OAIListFindings_request_sortCriteria::setField(const OAISortField &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIListFindings_request_sortCriteria::is_field_Set() const{
    return m_field_isSet;
}

bool OAIListFindings_request_sortCriteria::is_field_Valid() const{
    return m_field_isValid;
}

OAISortOrder OAIListFindings_request_sortCriteria::getSortOrder() const {
    return m_sort_order;
}
void OAIListFindings_request_sortCriteria::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListFindings_request_sortCriteria::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListFindings_request_sortCriteria::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListFindings_request_sortCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFindings_request_sortCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
