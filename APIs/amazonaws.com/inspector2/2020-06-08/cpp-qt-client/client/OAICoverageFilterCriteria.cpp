/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoverageFilterCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoverageFilterCriteria::OAICoverageFilterCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoverageFilterCriteria::OAICoverageFilterCriteria() {
    this->initializeModel();
}

OAICoverageFilterCriteria::~OAICoverageFilterCriteria() {}

void OAICoverageFilterCriteria::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ec2_instance_tags_isSet = false;
    m_ec2_instance_tags_isValid = false;

    m_ecr_image_tags_isSet = false;
    m_ecr_image_tags_isValid = false;

    m_ecr_repository_name_isSet = false;
    m_ecr_repository_name_isValid = false;

    m_lambda_function_name_isSet = false;
    m_lambda_function_name_isValid = false;

    m_lambda_function_runtime_isSet = false;
    m_lambda_function_runtime_isValid = false;

    m_lambda_function_tags_isSet = false;
    m_lambda_function_tags_isValid = false;

    m_last_scanned_at_isSet = false;
    m_last_scanned_at_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_scan_status_code_isSet = false;
    m_scan_status_code_isValid = false;

    m_scan_status_reason_isSet = false;
    m_scan_status_reason_isValid = false;

    m_scan_type_isSet = false;
    m_scan_type_isValid = false;
}

void OAICoverageFilterCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoverageFilterCriteria::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_ec2_instance_tags_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_tags, json[QString("ec2InstanceTags")]);
    m_ec2_instance_tags_isSet = !json[QString("ec2InstanceTags")].isNull() && m_ec2_instance_tags_isValid;

    m_ecr_image_tags_isValid = ::OpenAPI::fromJsonValue(m_ecr_image_tags, json[QString("ecrImageTags")]);
    m_ecr_image_tags_isSet = !json[QString("ecrImageTags")].isNull() && m_ecr_image_tags_isValid;

    m_ecr_repository_name_isValid = ::OpenAPI::fromJsonValue(m_ecr_repository_name, json[QString("ecrRepositoryName")]);
    m_ecr_repository_name_isSet = !json[QString("ecrRepositoryName")].isNull() && m_ecr_repository_name_isValid;

    m_lambda_function_name_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_name, json[QString("lambdaFunctionName")]);
    m_lambda_function_name_isSet = !json[QString("lambdaFunctionName")].isNull() && m_lambda_function_name_isValid;

    m_lambda_function_runtime_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_runtime, json[QString("lambdaFunctionRuntime")]);
    m_lambda_function_runtime_isSet = !json[QString("lambdaFunctionRuntime")].isNull() && m_lambda_function_runtime_isValid;

    m_lambda_function_tags_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_tags, json[QString("lambdaFunctionTags")]);
    m_lambda_function_tags_isSet = !json[QString("lambdaFunctionTags")].isNull() && m_lambda_function_tags_isValid;

    m_last_scanned_at_isValid = ::OpenAPI::fromJsonValue(m_last_scanned_at, json[QString("lastScannedAt")]);
    m_last_scanned_at_isSet = !json[QString("lastScannedAt")].isNull() && m_last_scanned_at_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_scan_status_code_isValid = ::OpenAPI::fromJsonValue(m_scan_status_code, json[QString("scanStatusCode")]);
    m_scan_status_code_isSet = !json[QString("scanStatusCode")].isNull() && m_scan_status_code_isValid;

    m_scan_status_reason_isValid = ::OpenAPI::fromJsonValue(m_scan_status_reason, json[QString("scanStatusReason")]);
    m_scan_status_reason_isSet = !json[QString("scanStatusReason")].isNull() && m_scan_status_reason_isValid;

    m_scan_type_isValid = ::OpenAPI::fromJsonValue(m_scan_type, json[QString("scanType")]);
    m_scan_type_isSet = !json[QString("scanType")].isNull() && m_scan_type_isValid;
}

QString OAICoverageFilterCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoverageFilterCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id.isSet()) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ec2_instance_tags.isSet()) {
        obj.insert(QString("ec2InstanceTags"), ::OpenAPI::toJsonValue(m_ec2_instance_tags));
    }
    if (m_ecr_image_tags.isSet()) {
        obj.insert(QString("ecrImageTags"), ::OpenAPI::toJsonValue(m_ecr_image_tags));
    }
    if (m_ecr_repository_name.isSet()) {
        obj.insert(QString("ecrRepositoryName"), ::OpenAPI::toJsonValue(m_ecr_repository_name));
    }
    if (m_lambda_function_name.isSet()) {
        obj.insert(QString("lambdaFunctionName"), ::OpenAPI::toJsonValue(m_lambda_function_name));
    }
    if (m_lambda_function_runtime.isSet()) {
        obj.insert(QString("lambdaFunctionRuntime"), ::OpenAPI::toJsonValue(m_lambda_function_runtime));
    }
    if (m_lambda_function_tags.isSet()) {
        obj.insert(QString("lambdaFunctionTags"), ::OpenAPI::toJsonValue(m_lambda_function_tags));
    }
    if (m_last_scanned_at.isSet()) {
        obj.insert(QString("lastScannedAt"), ::OpenAPI::toJsonValue(m_last_scanned_at));
    }
    if (m_resource_id.isSet()) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_scan_status_code.isSet()) {
        obj.insert(QString("scanStatusCode"), ::OpenAPI::toJsonValue(m_scan_status_code));
    }
    if (m_scan_status_reason.isSet()) {
        obj.insert(QString("scanStatusReason"), ::OpenAPI::toJsonValue(m_scan_status_reason));
    }
    if (m_scan_type.isSet()) {
        obj.insert(QString("scanType"), ::OpenAPI::toJsonValue(m_scan_type));
    }
    return obj;
}

QList OAICoverageFilterCriteria::getAccountId() const {
    return m_account_id;
}
void OAICoverageFilterCriteria::setAccountId(const QList &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICoverageFilterCriteria::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICoverageFilterCriteria::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList OAICoverageFilterCriteria::getEc2InstanceTags() const {
    return m_ec2_instance_tags;
}
void OAICoverageFilterCriteria::setEc2InstanceTags(const QList &ec2_instance_tags) {
    m_ec2_instance_tags = ec2_instance_tags;
    m_ec2_instance_tags_isSet = true;
}

bool OAICoverageFilterCriteria::is_ec2_instance_tags_Set() const{
    return m_ec2_instance_tags_isSet;
}

bool OAICoverageFilterCriteria::is_ec2_instance_tags_Valid() const{
    return m_ec2_instance_tags_isValid;
}

QList OAICoverageFilterCriteria::getEcrImageTags() const {
    return m_ecr_image_tags;
}
void OAICoverageFilterCriteria::setEcrImageTags(const QList &ecr_image_tags) {
    m_ecr_image_tags = ecr_image_tags;
    m_ecr_image_tags_isSet = true;
}

bool OAICoverageFilterCriteria::is_ecr_image_tags_Set() const{
    return m_ecr_image_tags_isSet;
}

bool OAICoverageFilterCriteria::is_ecr_image_tags_Valid() const{
    return m_ecr_image_tags_isValid;
}

QList OAICoverageFilterCriteria::getEcrRepositoryName() const {
    return m_ecr_repository_name;
}
void OAICoverageFilterCriteria::setEcrRepositoryName(const QList &ecr_repository_name) {
    m_ecr_repository_name = ecr_repository_name;
    m_ecr_repository_name_isSet = true;
}

bool OAICoverageFilterCriteria::is_ecr_repository_name_Set() const{
    return m_ecr_repository_name_isSet;
}

bool OAICoverageFilterCriteria::is_ecr_repository_name_Valid() const{
    return m_ecr_repository_name_isValid;
}

QList OAICoverageFilterCriteria::getLambdaFunctionName() const {
    return m_lambda_function_name;
}
void OAICoverageFilterCriteria::setLambdaFunctionName(const QList &lambda_function_name) {
    m_lambda_function_name = lambda_function_name;
    m_lambda_function_name_isSet = true;
}

bool OAICoverageFilterCriteria::is_lambda_function_name_Set() const{
    return m_lambda_function_name_isSet;
}

bool OAICoverageFilterCriteria::is_lambda_function_name_Valid() const{
    return m_lambda_function_name_isValid;
}

QList OAICoverageFilterCriteria::getLambdaFunctionRuntime() const {
    return m_lambda_function_runtime;
}
void OAICoverageFilterCriteria::setLambdaFunctionRuntime(const QList &lambda_function_runtime) {
    m_lambda_function_runtime = lambda_function_runtime;
    m_lambda_function_runtime_isSet = true;
}

bool OAICoverageFilterCriteria::is_lambda_function_runtime_Set() const{
    return m_lambda_function_runtime_isSet;
}

bool OAICoverageFilterCriteria::is_lambda_function_runtime_Valid() const{
    return m_lambda_function_runtime_isValid;
}

QList OAICoverageFilterCriteria::getLambdaFunctionTags() const {
    return m_lambda_function_tags;
}
void OAICoverageFilterCriteria::setLambdaFunctionTags(const QList &lambda_function_tags) {
    m_lambda_function_tags = lambda_function_tags;
    m_lambda_function_tags_isSet = true;
}

bool OAICoverageFilterCriteria::is_lambda_function_tags_Set() const{
    return m_lambda_function_tags_isSet;
}

bool OAICoverageFilterCriteria::is_lambda_function_tags_Valid() const{
    return m_lambda_function_tags_isValid;
}

QList OAICoverageFilterCriteria::getLastScannedAt() const {
    return m_last_scanned_at;
}
void OAICoverageFilterCriteria::setLastScannedAt(const QList &last_scanned_at) {
    m_last_scanned_at = last_scanned_at;
    m_last_scanned_at_isSet = true;
}

bool OAICoverageFilterCriteria::is_last_scanned_at_Set() const{
    return m_last_scanned_at_isSet;
}

bool OAICoverageFilterCriteria::is_last_scanned_at_Valid() const{
    return m_last_scanned_at_isValid;
}

QList OAICoverageFilterCriteria::getResourceId() const {
    return m_resource_id;
}
void OAICoverageFilterCriteria::setResourceId(const QList &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICoverageFilterCriteria::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICoverageFilterCriteria::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QList OAICoverageFilterCriteria::getResourceType() const {
    return m_resource_type;
}
void OAICoverageFilterCriteria::setResourceType(const QList &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAICoverageFilterCriteria::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAICoverageFilterCriteria::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList OAICoverageFilterCriteria::getScanStatusCode() const {
    return m_scan_status_code;
}
void OAICoverageFilterCriteria::setScanStatusCode(const QList &scan_status_code) {
    m_scan_status_code = scan_status_code;
    m_scan_status_code_isSet = true;
}

bool OAICoverageFilterCriteria::is_scan_status_code_Set() const{
    return m_scan_status_code_isSet;
}

bool OAICoverageFilterCriteria::is_scan_status_code_Valid() const{
    return m_scan_status_code_isValid;
}

QList OAICoverageFilterCriteria::getScanStatusReason() const {
    return m_scan_status_reason;
}
void OAICoverageFilterCriteria::setScanStatusReason(const QList &scan_status_reason) {
    m_scan_status_reason = scan_status_reason;
    m_scan_status_reason_isSet = true;
}

bool OAICoverageFilterCriteria::is_scan_status_reason_Set() const{
    return m_scan_status_reason_isSet;
}

bool OAICoverageFilterCriteria::is_scan_status_reason_Valid() const{
    return m_scan_status_reason_isValid;
}

QList OAICoverageFilterCriteria::getScanType() const {
    return m_scan_type;
}
void OAICoverageFilterCriteria::setScanType(const QList &scan_type) {
    m_scan_type = scan_type;
    m_scan_type_isSet = true;
}

bool OAICoverageFilterCriteria::is_scan_type_Set() const{
    return m_scan_type_isSet;
}

bool OAICoverageFilterCriteria::is_scan_type_Valid() const{
    return m_scan_type_isValid;
}

bool OAICoverageFilterCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_image_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_repository_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_runtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_scanned_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_status_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoverageFilterCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
