/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerability::OAIVulnerability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerability::OAIVulnerability() {
    this->initializeModel();
}

OAIVulnerability::~OAIVulnerability() {}

void OAIVulnerability::initializeModel() {

    m_atig_data_isSet = false;
    m_atig_data_isValid = false;

    m_cisa_data_isSet = false;
    m_cisa_data_isValid = false;

    m_cvss2_isSet = false;
    m_cvss2_isValid = false;

    m_cvss3_isSet = false;
    m_cvss3_isValid = false;

    m_cwes_isSet = false;
    m_cwes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_detection_platforms_isSet = false;
    m_detection_platforms_isValid = false;

    m_epss_isSet = false;
    m_epss_isValid = false;

    m_exploit_observed_isSet = false;
    m_exploit_observed_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_reference_urls_isSet = false;
    m_reference_urls_isValid = false;

    m_related_vulnerabilities_isSet = false;
    m_related_vulnerabilities_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_vendor_created_at_isSet = false;
    m_vendor_created_at_isValid = false;

    m_vendor_severity_isSet = false;
    m_vendor_severity_isValid = false;

    m_vendor_updated_at_isSet = false;
    m_vendor_updated_at_isValid = false;
}

void OAIVulnerability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerability::fromJsonObject(QJsonObject json) {

    m_atig_data_isValid = ::OpenAPI::fromJsonValue(m_atig_data, json[QString("atigData")]);
    m_atig_data_isSet = !json[QString("atigData")].isNull() && m_atig_data_isValid;

    m_cisa_data_isValid = ::OpenAPI::fromJsonValue(m_cisa_data, json[QString("cisaData")]);
    m_cisa_data_isSet = !json[QString("cisaData")].isNull() && m_cisa_data_isValid;

    m_cvss2_isValid = ::OpenAPI::fromJsonValue(m_cvss2, json[QString("cvss2")]);
    m_cvss2_isSet = !json[QString("cvss2")].isNull() && m_cvss2_isValid;

    m_cvss3_isValid = ::OpenAPI::fromJsonValue(m_cvss3, json[QString("cvss3")]);
    m_cvss3_isSet = !json[QString("cvss3")].isNull() && m_cvss3_isValid;

    m_cwes_isValid = ::OpenAPI::fromJsonValue(m_cwes, json[QString("cwes")]);
    m_cwes_isSet = !json[QString("cwes")].isNull() && m_cwes_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_detection_platforms_isValid = ::OpenAPI::fromJsonValue(m_detection_platforms, json[QString("detectionPlatforms")]);
    m_detection_platforms_isSet = !json[QString("detectionPlatforms")].isNull() && m_detection_platforms_isValid;

    m_epss_isValid = ::OpenAPI::fromJsonValue(m_epss, json[QString("epss")]);
    m_epss_isSet = !json[QString("epss")].isNull() && m_epss_isValid;

    m_exploit_observed_isValid = ::OpenAPI::fromJsonValue(m_exploit_observed, json[QString("exploitObserved")]);
    m_exploit_observed_isSet = !json[QString("exploitObserved")].isNull() && m_exploit_observed_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_reference_urls_isValid = ::OpenAPI::fromJsonValue(m_reference_urls, json[QString("referenceUrls")]);
    m_reference_urls_isSet = !json[QString("referenceUrls")].isNull() && m_reference_urls_isValid;

    m_related_vulnerabilities_isValid = ::OpenAPI::fromJsonValue(m_related_vulnerabilities, json[QString("relatedVulnerabilities")]);
    m_related_vulnerabilities_isSet = !json[QString("relatedVulnerabilities")].isNull() && m_related_vulnerabilities_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;

    m_vendor_created_at_isValid = ::OpenAPI::fromJsonValue(m_vendor_created_at, json[QString("vendorCreatedAt")]);
    m_vendor_created_at_isSet = !json[QString("vendorCreatedAt")].isNull() && m_vendor_created_at_isValid;

    m_vendor_severity_isValid = ::OpenAPI::fromJsonValue(m_vendor_severity, json[QString("vendorSeverity")]);
    m_vendor_severity_isSet = !json[QString("vendorSeverity")].isNull() && m_vendor_severity_isValid;

    m_vendor_updated_at_isValid = ::OpenAPI::fromJsonValue(m_vendor_updated_at, json[QString("vendorUpdatedAt")]);
    m_vendor_updated_at_isSet = !json[QString("vendorUpdatedAt")].isNull() && m_vendor_updated_at_isValid;
}

QString OAIVulnerability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerability::asJsonObject() const {
    QJsonObject obj;
    if (m_atig_data.isSet()) {
        obj.insert(QString("atigData"), ::OpenAPI::toJsonValue(m_atig_data));
    }
    if (m_cisa_data.isSet()) {
        obj.insert(QString("cisaData"), ::OpenAPI::toJsonValue(m_cisa_data));
    }
    if (m_cvss2.isSet()) {
        obj.insert(QString("cvss2"), ::OpenAPI::toJsonValue(m_cvss2));
    }
    if (m_cvss3.isSet()) {
        obj.insert(QString("cvss3"), ::OpenAPI::toJsonValue(m_cvss3));
    }
    if (m_cwes.isSet()) {
        obj.insert(QString("cwes"), ::OpenAPI::toJsonValue(m_cwes));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_detection_platforms.isSet()) {
        obj.insert(QString("detectionPlatforms"), ::OpenAPI::toJsonValue(m_detection_platforms));
    }
    if (m_epss.isSet()) {
        obj.insert(QString("epss"), ::OpenAPI::toJsonValue(m_epss));
    }
    if (m_exploit_observed.isSet()) {
        obj.insert(QString("exploitObserved"), ::OpenAPI::toJsonValue(m_exploit_observed));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_reference_urls.isSet()) {
        obj.insert(QString("referenceUrls"), ::OpenAPI::toJsonValue(m_reference_urls));
    }
    if (m_related_vulnerabilities.isSet()) {
        obj.insert(QString("relatedVulnerabilities"), ::OpenAPI::toJsonValue(m_related_vulnerabilities));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_vendor_created_at_isSet) {
        obj.insert(QString("vendorCreatedAt"), ::OpenAPI::toJsonValue(m_vendor_created_at));
    }
    if (m_vendor_severity_isSet) {
        obj.insert(QString("vendorSeverity"), ::OpenAPI::toJsonValue(m_vendor_severity));
    }
    if (m_vendor_updated_at_isSet) {
        obj.insert(QString("vendorUpdatedAt"), ::OpenAPI::toJsonValue(m_vendor_updated_at));
    }
    return obj;
}

OAIVulnerability_atigData OAIVulnerability::getAtigData() const {
    return m_atig_data;
}
void OAIVulnerability::setAtigData(const OAIVulnerability_atigData &atig_data) {
    m_atig_data = atig_data;
    m_atig_data_isSet = true;
}

bool OAIVulnerability::is_atig_data_Set() const{
    return m_atig_data_isSet;
}

bool OAIVulnerability::is_atig_data_Valid() const{
    return m_atig_data_isValid;
}

OAIVulnerability_cisaData OAIVulnerability::getCisaData() const {
    return m_cisa_data;
}
void OAIVulnerability::setCisaData(const OAIVulnerability_cisaData &cisa_data) {
    m_cisa_data = cisa_data;
    m_cisa_data_isSet = true;
}

bool OAIVulnerability::is_cisa_data_Set() const{
    return m_cisa_data_isSet;
}

bool OAIVulnerability::is_cisa_data_Valid() const{
    return m_cisa_data_isValid;
}

OAIVulnerability_cvss2 OAIVulnerability::getCvss2() const {
    return m_cvss2;
}
void OAIVulnerability::setCvss2(const OAIVulnerability_cvss2 &cvss2) {
    m_cvss2 = cvss2;
    m_cvss2_isSet = true;
}

bool OAIVulnerability::is_cvss2_Set() const{
    return m_cvss2_isSet;
}

bool OAIVulnerability::is_cvss2_Valid() const{
    return m_cvss2_isValid;
}

OAIVulnerability_cvss3 OAIVulnerability::getCvss3() const {
    return m_cvss3;
}
void OAIVulnerability::setCvss3(const OAIVulnerability_cvss3 &cvss3) {
    m_cvss3 = cvss3;
    m_cvss3_isSet = true;
}

bool OAIVulnerability::is_cvss3_Set() const{
    return m_cvss3_isSet;
}

bool OAIVulnerability::is_cvss3_Valid() const{
    return m_cvss3_isValid;
}

QList OAIVulnerability::getCwes() const {
    return m_cwes;
}
void OAIVulnerability::setCwes(const QList &cwes) {
    m_cwes = cwes;
    m_cwes_isSet = true;
}

bool OAIVulnerability::is_cwes_Set() const{
    return m_cwes_isSet;
}

bool OAIVulnerability::is_cwes_Valid() const{
    return m_cwes_isValid;
}

QString OAIVulnerability::getDescription() const {
    return m_description;
}
void OAIVulnerability::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVulnerability::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVulnerability::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIVulnerability::getDetectionPlatforms() const {
    return m_detection_platforms;
}
void OAIVulnerability::setDetectionPlatforms(const QList &detection_platforms) {
    m_detection_platforms = detection_platforms;
    m_detection_platforms_isSet = true;
}

bool OAIVulnerability::is_detection_platforms_Set() const{
    return m_detection_platforms_isSet;
}

bool OAIVulnerability::is_detection_platforms_Valid() const{
    return m_detection_platforms_isValid;
}

OAIVulnerability_epss OAIVulnerability::getEpss() const {
    return m_epss;
}
void OAIVulnerability::setEpss(const OAIVulnerability_epss &epss) {
    m_epss = epss;
    m_epss_isSet = true;
}

bool OAIVulnerability::is_epss_Set() const{
    return m_epss_isSet;
}

bool OAIVulnerability::is_epss_Valid() const{
    return m_epss_isValid;
}

OAIVulnerability_exploitObserved OAIVulnerability::getExploitObserved() const {
    return m_exploit_observed;
}
void OAIVulnerability::setExploitObserved(const OAIVulnerability_exploitObserved &exploit_observed) {
    m_exploit_observed = exploit_observed;
    m_exploit_observed_isSet = true;
}

bool OAIVulnerability::is_exploit_observed_Set() const{
    return m_exploit_observed_isSet;
}

bool OAIVulnerability::is_exploit_observed_Valid() const{
    return m_exploit_observed_isValid;
}

QString OAIVulnerability::getId() const {
    return m_id;
}
void OAIVulnerability::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVulnerability::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVulnerability::is_id_Valid() const{
    return m_id_isValid;
}

QList OAIVulnerability::getReferenceUrls() const {
    return m_reference_urls;
}
void OAIVulnerability::setReferenceUrls(const QList &reference_urls) {
    m_reference_urls = reference_urls;
    m_reference_urls_isSet = true;
}

bool OAIVulnerability::is_reference_urls_Set() const{
    return m_reference_urls_isSet;
}

bool OAIVulnerability::is_reference_urls_Valid() const{
    return m_reference_urls_isValid;
}

QList OAIVulnerability::getRelatedVulnerabilities() const {
    return m_related_vulnerabilities;
}
void OAIVulnerability::setRelatedVulnerabilities(const QList &related_vulnerabilities) {
    m_related_vulnerabilities = related_vulnerabilities;
    m_related_vulnerabilities_isSet = true;
}

bool OAIVulnerability::is_related_vulnerabilities_Set() const{
    return m_related_vulnerabilities_isSet;
}

bool OAIVulnerability::is_related_vulnerabilities_Valid() const{
    return m_related_vulnerabilities_isValid;
}

OAIVulnerabilitySource OAIVulnerability::getSource() const {
    return m_source;
}
void OAIVulnerability::setSource(const OAIVulnerabilitySource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIVulnerability::is_source_Set() const{
    return m_source_isSet;
}

bool OAIVulnerability::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIVulnerability::getSourceUrl() const {
    return m_source_url;
}
void OAIVulnerability::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIVulnerability::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIVulnerability::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QDateTime OAIVulnerability::getVendorCreatedAt() const {
    return m_vendor_created_at;
}
void OAIVulnerability::setVendorCreatedAt(const QDateTime &vendor_created_at) {
    m_vendor_created_at = vendor_created_at;
    m_vendor_created_at_isSet = true;
}

bool OAIVulnerability::is_vendor_created_at_Set() const{
    return m_vendor_created_at_isSet;
}

bool OAIVulnerability::is_vendor_created_at_Valid() const{
    return m_vendor_created_at_isValid;
}

QString OAIVulnerability::getVendorSeverity() const {
    return m_vendor_severity;
}
void OAIVulnerability::setVendorSeverity(const QString &vendor_severity) {
    m_vendor_severity = vendor_severity;
    m_vendor_severity_isSet = true;
}

bool OAIVulnerability::is_vendor_severity_Set() const{
    return m_vendor_severity_isSet;
}

bool OAIVulnerability::is_vendor_severity_Valid() const{
    return m_vendor_severity_isValid;
}

QDateTime OAIVulnerability::getVendorUpdatedAt() const {
    return m_vendor_updated_at;
}
void OAIVulnerability::setVendorUpdatedAt(const QDateTime &vendor_updated_at) {
    m_vendor_updated_at = vendor_updated_at;
    m_vendor_updated_at_isSet = true;
}

bool OAIVulnerability::is_vendor_updated_at_Set() const{
    return m_vendor_updated_at_isSet;
}

bool OAIVulnerability::is_vendor_updated_at_Valid() const{
    return m_vendor_updated_at_isValid;
}

bool OAIVulnerability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_atig_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cisa_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detection_platforms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_epss.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exploit_observed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_vulnerabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerability::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
