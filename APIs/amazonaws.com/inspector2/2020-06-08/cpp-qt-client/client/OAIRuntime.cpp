/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntime::OAIRuntime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntime::OAIRuntime() {
    this->initializeModel();
}

OAIRuntime::~OAIRuntime() {}

void OAIRuntime::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRuntime::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRuntime::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NODEJS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::NODEJS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NODEJS_12_X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::NODEJS_12_X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NODEJS_14_X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::NODEJS_14_X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NODEJS_16_X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::NODEJS_16_X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JAVA_8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::JAVA_8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JAVA_8_AL2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::JAVA_8_AL2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JAVA_11", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::JAVA_11;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PYTHON_3_7", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::PYTHON_3_7;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PYTHON_3_8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::PYTHON_3_8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PYTHON_3_9", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::PYTHON_3_9;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::UNSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NODEJS_18_X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::NODEJS_18_X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GO_1_X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::GO_1_X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JAVA_17", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::JAVA_17;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PYTHON_3_10", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntime::PYTHON_3_10;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRuntime::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRuntime::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRuntime::NODEJS:
            val = "NODEJS";
            break;
        case eOAIRuntime::NODEJS_12_X:
            val = "NODEJS_12_X";
            break;
        case eOAIRuntime::NODEJS_14_X:
            val = "NODEJS_14_X";
            break;
        case eOAIRuntime::NODEJS_16_X:
            val = "NODEJS_16_X";
            break;
        case eOAIRuntime::JAVA_8:
            val = "JAVA_8";
            break;
        case eOAIRuntime::JAVA_8_AL2:
            val = "JAVA_8_AL2";
            break;
        case eOAIRuntime::JAVA_11:
            val = "JAVA_11";
            break;
        case eOAIRuntime::PYTHON_3_7:
            val = "PYTHON_3_7";
            break;
        case eOAIRuntime::PYTHON_3_8:
            val = "PYTHON_3_8";
            break;
        case eOAIRuntime::PYTHON_3_9:
            val = "PYTHON_3_9";
            break;
        case eOAIRuntime::UNSUPPORTED:
            val = "UNSUPPORTED";
            break;
        case eOAIRuntime::NODEJS_18_X:
            val = "NODEJS_18_X";
            break;
        case eOAIRuntime::GO_1_X:
            val = "GO_1_X";
            break;
        case eOAIRuntime::JAVA_17:
            val = "JAVA_17";
            break;
        case eOAIRuntime::PYTHON_3_10:
            val = "PYTHON_3_10";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRuntime::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRuntime::eOAIRuntime OAIRuntime::getValue() const {
    return m_value;
}

void OAIRuntime::setValue(const OAIRuntime::eOAIRuntime& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRuntime::isSet() const {
    
    return m_value_isSet;
}

bool OAIRuntime::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
