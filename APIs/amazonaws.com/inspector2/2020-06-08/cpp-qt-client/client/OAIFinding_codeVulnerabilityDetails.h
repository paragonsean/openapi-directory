/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFinding_codeVulnerabilityDetails.h
 *
 * 
 */

#ifndef OAIFinding_codeVulnerabilityDetails_H
#define OAIFinding_codeVulnerabilityDetails_H

#include <QJsonObject>

#include "OAICodeVulnerabilityDetails_filePath.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICodeVulnerabilityDetails_filePath;

class OAIFinding_codeVulnerabilityDetails : public OAIObject {
public:
    OAIFinding_codeVulnerabilityDetails();
    OAIFinding_codeVulnerabilityDetails(QString json);
    ~OAIFinding_codeVulnerabilityDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCwes() const;
    void setCwes(const QList &cwes);
    bool is_cwes_Set() const;
    bool is_cwes_Valid() const;

    QString getDetectorId() const;
    void setDetectorId(const QString &detector_id);
    bool is_detector_id_Set() const;
    bool is_detector_id_Valid() const;

    QString getDetectorName() const;
    void setDetectorName(const QString &detector_name);
    bool is_detector_name_Set() const;
    bool is_detector_name_Valid() const;

    QList getDetectorTags() const;
    void setDetectorTags(const QList &detector_tags);
    bool is_detector_tags_Set() const;
    bool is_detector_tags_Valid() const;

    OAICodeVulnerabilityDetails_filePath getFilePath() const;
    void setFilePath(const OAICodeVulnerabilityDetails_filePath &file_path);
    bool is_file_path_Set() const;
    bool is_file_path_Valid() const;

    QList getReferenceUrls() const;
    void setReferenceUrls(const QList &reference_urls);
    bool is_reference_urls_Set() const;
    bool is_reference_urls_Valid() const;

    QString getRuleId() const;
    void setRuleId(const QString &rule_id);
    bool is_rule_id_Set() const;
    bool is_rule_id_Valid() const;

    QString getSourceLambdaLayerArn() const;
    void setSourceLambdaLayerArn(const QString &source_lambda_layer_arn);
    bool is_source_lambda_layer_arn_Set() const;
    bool is_source_lambda_layer_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_cwes;
    bool m_cwes_isSet;
    bool m_cwes_isValid;

    QString m_detector_id;
    bool m_detector_id_isSet;
    bool m_detector_id_isValid;

    QString m_detector_name;
    bool m_detector_name_isSet;
    bool m_detector_name_isValid;

    QList m_detector_tags;
    bool m_detector_tags_isSet;
    bool m_detector_tags_isValid;

    OAICodeVulnerabilityDetails_filePath m_file_path;
    bool m_file_path_isSet;
    bool m_file_path_isValid;

    QList m_reference_urls;
    bool m_reference_urls_isSet;
    bool m_reference_urls_isValid;

    QString m_rule_id;
    bool m_rule_id_isSet;
    bool m_rule_id_isValid;

    QString m_source_lambda_layer_arn;
    bool m_source_lambda_layer_arn_isSet;
    bool m_source_lambda_layer_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFinding_codeVulnerabilityDetails)

#endif // OAIFinding_codeVulnerabilityDetails_H
