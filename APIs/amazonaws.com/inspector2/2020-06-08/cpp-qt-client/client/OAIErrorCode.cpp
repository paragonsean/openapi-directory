/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCode::OAIErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCode::OAIErrorCode() {
    this->initializeModel();
}

OAIErrorCode::~OAIErrorCode() {}

void OAIErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ALREADY_ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ALREADY_ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENABLE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ENABLE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::DISABLE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUSPEND_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SUSPEND_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESOURCE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::RESOURCE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INTERNAL_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SSM_UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SSM_UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SSM_THROTTLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SSM_THROTTLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVENTBRIDGE_UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EVENTBRIDGE_UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVENTBRIDGE_THROTTLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EVENTBRIDGE_THROTTLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESOURCE_SCAN_NOT_DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::RESOURCE_SCAN_NOT_DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISASSOCIATE_ALL_MEMBERS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::DISASSOCIATE_ALL_MEMBERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_IS_ISOLATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ACCOUNT_IS_ISOLATED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorCode::ALREADY_ENABLED:
            val = "ALREADY_ENABLED";
            break;
        case eOAIErrorCode::ENABLE_IN_PROGRESS:
            val = "ENABLE_IN_PROGRESS";
            break;
        case eOAIErrorCode::DISABLE_IN_PROGRESS:
            val = "DISABLE_IN_PROGRESS";
            break;
        case eOAIErrorCode::SUSPEND_IN_PROGRESS:
            val = "SUSPEND_IN_PROGRESS";
            break;
        case eOAIErrorCode::RESOURCE_NOT_FOUND:
            val = "RESOURCE_NOT_FOUND";
            break;
        case eOAIErrorCode::ACCESS_DENIED:
            val = "ACCESS_DENIED";
            break;
        case eOAIErrorCode::INTERNAL_ERROR:
            val = "INTERNAL_ERROR";
            break;
        case eOAIErrorCode::SSM_UNAVAILABLE:
            val = "SSM_UNAVAILABLE";
            break;
        case eOAIErrorCode::SSM_THROTTLED:
            val = "SSM_THROTTLED";
            break;
        case eOAIErrorCode::EVENTBRIDGE_UNAVAILABLE:
            val = "EVENTBRIDGE_UNAVAILABLE";
            break;
        case eOAIErrorCode::EVENTBRIDGE_THROTTLED:
            val = "EVENTBRIDGE_THROTTLED";
            break;
        case eOAIErrorCode::RESOURCE_SCAN_NOT_DISABLED:
            val = "RESOURCE_SCAN_NOT_DISABLED";
            break;
        case eOAIErrorCode::DISASSOCIATE_ALL_MEMBERS:
            val = "DISASSOCIATE_ALL_MEMBERS";
            break;
        case eOAIErrorCode::ACCOUNT_IS_ISOLATED:
            val = "ACCOUNT_IS_ISOLATED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorCode::eOAIErrorCode OAIErrorCode::getValue() const {
    return m_value;
}

void OAIErrorCode::setValue(const OAIErrorCode::eOAIErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
