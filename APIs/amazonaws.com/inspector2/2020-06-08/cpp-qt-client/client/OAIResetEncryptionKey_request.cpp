/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResetEncryptionKey_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResetEncryptionKey_request::OAIResetEncryptionKey_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResetEncryptionKey_request::OAIResetEncryptionKey_request() {
    this->initializeModel();
}

OAIResetEncryptionKey_request::~OAIResetEncryptionKey_request() {}

void OAIResetEncryptionKey_request::initializeModel() {

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_scan_type_isSet = false;
    m_scan_type_isValid = false;
}

void OAIResetEncryptionKey_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResetEncryptionKey_request::fromJsonObject(QJsonObject json) {

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_scan_type_isValid = ::OpenAPI::fromJsonValue(m_scan_type, json[QString("scanType")]);
    m_scan_type_isSet = !json[QString("scanType")].isNull() && m_scan_type_isValid;
}

QString OAIResetEncryptionKey_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResetEncryptionKey_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_scan_type_isSet) {
        obj.insert(QString("scanType"), ::OpenAPI::toJsonValue(m_scan_type));
    }
    return obj;
}

QString OAIResetEncryptionKey_request::getResourceType() const {
    return m_resource_type;
}
void OAIResetEncryptionKey_request::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIResetEncryptionKey_request::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIResetEncryptionKey_request::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIResetEncryptionKey_request::getScanType() const {
    return m_scan_type;
}
void OAIResetEncryptionKey_request::setScanType(const QString &scan_type) {
    m_scan_type = scan_type;
    m_scan_type_isSet = true;
}

bool OAIResetEncryptionKey_request::is_scan_type_Set() const{
    return m_scan_type_isSet;
}

bool OAIResetEncryptionKey_request::is_scan_type_Valid() const{
    return m_scan_type_isValid;
}

bool OAIResetEncryptionKey_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResetEncryptionKey_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_type_isValid && m_scan_type_isValid && true;
}

} // namespace OpenAPI
