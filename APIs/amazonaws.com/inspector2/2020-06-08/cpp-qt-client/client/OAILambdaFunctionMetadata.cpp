/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILambdaFunctionMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILambdaFunctionMetadata::OAILambdaFunctionMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILambdaFunctionMetadata::OAILambdaFunctionMetadata() {
    this->initializeModel();
}

OAILambdaFunctionMetadata::~OAILambdaFunctionMetadata() {}

void OAILambdaFunctionMetadata::initializeModel() {

    m_function_name_isSet = false;
    m_function_name_isValid = false;

    m_function_tags_isSet = false;
    m_function_tags_isValid = false;

    m_layers_isSet = false;
    m_layers_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;
}

void OAILambdaFunctionMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILambdaFunctionMetadata::fromJsonObject(QJsonObject json) {

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("functionName")]);
    m_function_name_isSet = !json[QString("functionName")].isNull() && m_function_name_isValid;

    m_function_tags_isValid = ::OpenAPI::fromJsonValue(m_function_tags, json[QString("functionTags")]);
    m_function_tags_isSet = !json[QString("functionTags")].isNull() && m_function_tags_isValid;

    m_layers_isValid = ::OpenAPI::fromJsonValue(m_layers, json[QString("layers")]);
    m_layers_isSet = !json[QString("layers")].isNull() && m_layers_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;
}

QString OAILambdaFunctionMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILambdaFunctionMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_function_name_isSet) {
        obj.insert(QString("functionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    if (m_function_tags.isSet()) {
        obj.insert(QString("functionTags"), ::OpenAPI::toJsonValue(m_function_tags));
    }
    if (m_layers.isSet()) {
        obj.insert(QString("layers"), ::OpenAPI::toJsonValue(m_layers));
    }
    if (m_runtime.isSet()) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    return obj;
}

QString OAILambdaFunctionMetadata::getFunctionName() const {
    return m_function_name;
}
void OAILambdaFunctionMetadata::setFunctionName(const QString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAILambdaFunctionMetadata::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAILambdaFunctionMetadata::is_function_name_Valid() const{
    return m_function_name_isValid;
}

QMap OAILambdaFunctionMetadata::getFunctionTags() const {
    return m_function_tags;
}
void OAILambdaFunctionMetadata::setFunctionTags(const QMap &function_tags) {
    m_function_tags = function_tags;
    m_function_tags_isSet = true;
}

bool OAILambdaFunctionMetadata::is_function_tags_Set() const{
    return m_function_tags_isSet;
}

bool OAILambdaFunctionMetadata::is_function_tags_Valid() const{
    return m_function_tags_isValid;
}

QList OAILambdaFunctionMetadata::getLayers() const {
    return m_layers;
}
void OAILambdaFunctionMetadata::setLayers(const QList &layers) {
    m_layers = layers;
    m_layers_isSet = true;
}

bool OAILambdaFunctionMetadata::is_layers_Set() const{
    return m_layers_isSet;
}

bool OAILambdaFunctionMetadata::is_layers_Valid() const{
    return m_layers_isValid;
}

OAIRuntime OAILambdaFunctionMetadata::getRuntime() const {
    return m_runtime;
}
void OAILambdaFunctionMetadata::setRuntime(const OAIRuntime &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAILambdaFunctionMetadata::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAILambdaFunctionMetadata::is_runtime_Valid() const{
    return m_runtime_isValid;
}

bool OAILambdaFunctionMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILambdaFunctionMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
