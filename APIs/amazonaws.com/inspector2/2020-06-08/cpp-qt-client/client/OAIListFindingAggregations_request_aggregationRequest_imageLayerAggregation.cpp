/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation() {
    this->initializeModel();
}

OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::~OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation() {}

void OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::initializeModel() {

    m_layer_hashes_isSet = false;
    m_layer_hashes_isValid = false;

    m_repositories_isSet = false;
    m_repositories_isValid = false;

    m_resource_ids_isSet = false;
    m_resource_ids_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::fromJsonObject(QJsonObject json) {

    m_layer_hashes_isValid = ::OpenAPI::fromJsonValue(m_layer_hashes, json[QString("layerHashes")]);
    m_layer_hashes_isSet = !json[QString("layerHashes")].isNull() && m_layer_hashes_isValid;

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;

    m_resource_ids_isValid = ::OpenAPI::fromJsonValue(m_resource_ids, json[QString("resourceIds")]);
    m_resource_ids_isSet = !json[QString("resourceIds")].isNull() && m_resource_ids_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_layer_hashes.isSet()) {
        obj.insert(QString("layerHashes"), ::OpenAPI::toJsonValue(m_layer_hashes));
    }
    if (m_repositories.isSet()) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    if (m_resource_ids.isSet()) {
        obj.insert(QString("resourceIds"), ::OpenAPI::toJsonValue(m_resource_ids));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QList OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::getLayerHashes() const {
    return m_layer_hashes;
}
void OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::setLayerHashes(const QList &layer_hashes) {
    m_layer_hashes = layer_hashes;
    m_layer_hashes_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_layer_hashes_Set() const{
    return m_layer_hashes_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_layer_hashes_Valid() const{
    return m_layer_hashes_isValid;
}

QList OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::getRepositories() const {
    return m_repositories;
}
void OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::setRepositories(const QList &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_repositories_Valid() const{
    return m_repositories_isValid;
}

QList OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::getResourceIds() const {
    return m_resource_ids;
}
void OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::setResourceIds(const QList &resource_ids) {
    m_resource_ids = resource_ids;
    m_resource_ids_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_resource_ids_Set() const{
    return m_resource_ids_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_resource_ids_Valid() const{
    return m_resource_ids_isValid;
}

OAIImageLayerSortBy OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::getSortBy() const {
    return m_sort_by;
}
void OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::setSortBy(const OAIImageLayerSortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::getSortOrder() const {
    return m_sort_order;
}
void OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layer_hashes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFindingAggregations_request_aggregationRequest_imageLayerAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
