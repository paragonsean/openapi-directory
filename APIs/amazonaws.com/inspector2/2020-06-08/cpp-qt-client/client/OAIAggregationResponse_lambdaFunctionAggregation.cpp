/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationResponse_lambdaFunctionAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationResponse_lambdaFunctionAggregation::OAIAggregationResponse_lambdaFunctionAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationResponse_lambdaFunctionAggregation::OAIAggregationResponse_lambdaFunctionAggregation() {
    this->initializeModel();
}

OAIAggregationResponse_lambdaFunctionAggregation::~OAIAggregationResponse_lambdaFunctionAggregation() {}

void OAIAggregationResponse_lambdaFunctionAggregation::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_function_name_isSet = false;
    m_function_name_isValid = false;

    m_lambda_tags_isSet = false;
    m_lambda_tags_isValid = false;

    m_last_modified_at_isSet = false;
    m_last_modified_at_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_severity_counts_isSet = false;
    m_severity_counts_isValid = false;
}

void OAIAggregationResponse_lambdaFunctionAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationResponse_lambdaFunctionAggregation::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("functionName")]);
    m_function_name_isSet = !json[QString("functionName")].isNull() && m_function_name_isValid;

    m_lambda_tags_isValid = ::OpenAPI::fromJsonValue(m_lambda_tags, json[QString("lambdaTags")]);
    m_lambda_tags_isSet = !json[QString("lambdaTags")].isNull() && m_lambda_tags_isValid;

    m_last_modified_at_isValid = ::OpenAPI::fromJsonValue(m_last_modified_at, json[QString("lastModifiedAt")]);
    m_last_modified_at_isSet = !json[QString("lastModifiedAt")].isNull() && m_last_modified_at_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;

    m_severity_counts_isValid = ::OpenAPI::fromJsonValue(m_severity_counts, json[QString("severityCounts")]);
    m_severity_counts_isSet = !json[QString("severityCounts")].isNull() && m_severity_counts_isValid;
}

QString OAIAggregationResponse_lambdaFunctionAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationResponse_lambdaFunctionAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_function_name_isSet) {
        obj.insert(QString("functionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    if (m_lambda_tags.isSet()) {
        obj.insert(QString("lambdaTags"), ::OpenAPI::toJsonValue(m_lambda_tags));
    }
    if (m_last_modified_at_isSet) {
        obj.insert(QString("lastModifiedAt"), ::OpenAPI::toJsonValue(m_last_modified_at));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_severity_counts.isSet()) {
        obj.insert(QString("severityCounts"), ::OpenAPI::toJsonValue(m_severity_counts));
    }
    return obj;
}

QString OAIAggregationResponse_lambdaFunctionAggregation::getAccountId() const {
    return m_account_id;
}
void OAIAggregationResponse_lambdaFunctionAggregation::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAggregationResponse_lambdaFunctionAggregation::getFunctionName() const {
    return m_function_name;
}
void OAIAggregationResponse_lambdaFunctionAggregation::setFunctionName(const QString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_function_name_Valid() const{
    return m_function_name_isValid;
}

QMap OAIAggregationResponse_lambdaFunctionAggregation::getLambdaTags() const {
    return m_lambda_tags;
}
void OAIAggregationResponse_lambdaFunctionAggregation::setLambdaTags(const QMap &lambda_tags) {
    m_lambda_tags = lambda_tags;
    m_lambda_tags_isSet = true;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_lambda_tags_Set() const{
    return m_lambda_tags_isSet;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_lambda_tags_Valid() const{
    return m_lambda_tags_isValid;
}

QDateTime OAIAggregationResponse_lambdaFunctionAggregation::getLastModifiedAt() const {
    return m_last_modified_at;
}
void OAIAggregationResponse_lambdaFunctionAggregation::setLastModifiedAt(const QDateTime &last_modified_at) {
    m_last_modified_at = last_modified_at;
    m_last_modified_at_isSet = true;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_last_modified_at_Set() const{
    return m_last_modified_at_isSet;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_last_modified_at_Valid() const{
    return m_last_modified_at_isValid;
}

QString OAIAggregationResponse_lambdaFunctionAggregation::getResourceId() const {
    return m_resource_id;
}
void OAIAggregationResponse_lambdaFunctionAggregation::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIAggregationResponse_lambdaFunctionAggregation::getRuntime() const {
    return m_runtime;
}
void OAIAggregationResponse_lambdaFunctionAggregation::setRuntime(const QString &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_runtime_Valid() const{
    return m_runtime_isValid;
}

OAISeverityCounts OAIAggregationResponse_lambdaFunctionAggregation::getSeverityCounts() const {
    return m_severity_counts;
}
void OAIAggregationResponse_lambdaFunctionAggregation::setSeverityCounts(const OAISeverityCounts &severity_counts) {
    m_severity_counts = severity_counts;
    m_severity_counts_isSet = true;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_severity_counts_Set() const{
    return m_severity_counts_isSet;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::is_severity_counts_Valid() const{
    return m_severity_counts_isValid;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationResponse_lambdaFunctionAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_id_isValid && true;
}

} // namespace OpenAPI
