/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetAccountStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetAccountStatusResponse::OAIBatchGetAccountStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetAccountStatusResponse::OAIBatchGetAccountStatusResponse() {
    this->initializeModel();
}

OAIBatchGetAccountStatusResponse::~OAIBatchGetAccountStatusResponse() {}

void OAIBatchGetAccountStatusResponse::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_failed_accounts_isSet = false;
    m_failed_accounts_isValid = false;
}

void OAIBatchGetAccountStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetAccountStatusResponse::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_failed_accounts_isValid = ::OpenAPI::fromJsonValue(m_failed_accounts, json[QString("failedAccounts")]);
    m_failed_accounts_isSet = !json[QString("failedAccounts")].isNull() && m_failed_accounts_isValid;
}

QString OAIBatchGetAccountStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetAccountStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.isSet()) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_failed_accounts.isSet()) {
        obj.insert(QString("failedAccounts"), ::OpenAPI::toJsonValue(m_failed_accounts));
    }
    return obj;
}

QList OAIBatchGetAccountStatusResponse::getAccounts() const {
    return m_accounts;
}
void OAIBatchGetAccountStatusResponse::setAccounts(const QList &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIBatchGetAccountStatusResponse::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIBatchGetAccountStatusResponse::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QList OAIBatchGetAccountStatusResponse::getFailedAccounts() const {
    return m_failed_accounts;
}
void OAIBatchGetAccountStatusResponse::setFailedAccounts(const QList &failed_accounts) {
    m_failed_accounts = failed_accounts;
    m_failed_accounts_isSet = true;
}

bool OAIBatchGetAccountStatusResponse::is_failed_accounts_Set() const{
    return m_failed_accounts_isSet;
}

bool OAIBatchGetAccountStatusResponse::is_failed_accounts_Valid() const{
    return m_failed_accounts_isValid;
}

bool OAIBatchGetAccountStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetAccountStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accounts_isValid && true;
}

} // namespace OpenAPI
