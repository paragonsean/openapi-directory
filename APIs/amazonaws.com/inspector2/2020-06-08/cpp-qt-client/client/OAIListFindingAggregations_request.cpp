/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFindingAggregations_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFindingAggregations_request::OAIListFindingAggregations_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFindingAggregations_request::OAIListFindingAggregations_request() {
    this->initializeModel();
}

OAIListFindingAggregations_request::~OAIListFindingAggregations_request() {}

void OAIListFindingAggregations_request::initializeModel() {

    m_account_ids_isSet = false;
    m_account_ids_isValid = false;

    m_aggregation_request_isSet = false;
    m_aggregation_request_isValid = false;

    m_aggregation_type_isSet = false;
    m_aggregation_type_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListFindingAggregations_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFindingAggregations_request::fromJsonObject(QJsonObject json) {

    m_account_ids_isValid = ::OpenAPI::fromJsonValue(m_account_ids, json[QString("accountIds")]);
    m_account_ids_isSet = !json[QString("accountIds")].isNull() && m_account_ids_isValid;

    m_aggregation_request_isValid = ::OpenAPI::fromJsonValue(m_aggregation_request, json[QString("aggregationRequest")]);
    m_aggregation_request_isSet = !json[QString("aggregationRequest")].isNull() && m_aggregation_request_isValid;

    m_aggregation_type_isValid = ::OpenAPI::fromJsonValue(m_aggregation_type, json[QString("aggregationType")]);
    m_aggregation_type_isSet = !json[QString("aggregationType")].isNull() && m_aggregation_type_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListFindingAggregations_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFindingAggregations_request::asJsonObject() const {
    QJsonObject obj;
    if (m_account_ids.size() > 0) {
        obj.insert(QString("accountIds"), ::OpenAPI::toJsonValue(m_account_ids));
    }
    if (m_aggregation_request.isSet()) {
        obj.insert(QString("aggregationRequest"), ::OpenAPI::toJsonValue(m_aggregation_request));
    }
    if (m_aggregation_type_isSet) {
        obj.insert(QString("aggregationType"), ::OpenAPI::toJsonValue(m_aggregation_type));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList<OAIStringFilter> OAIListFindingAggregations_request::getAccountIds() const {
    return m_account_ids;
}
void OAIListFindingAggregations_request::setAccountIds(const QList<OAIStringFilter> &account_ids) {
    m_account_ids = account_ids;
    m_account_ids_isSet = true;
}

bool OAIListFindingAggregations_request::is_account_ids_Set() const{
    return m_account_ids_isSet;
}

bool OAIListFindingAggregations_request::is_account_ids_Valid() const{
    return m_account_ids_isValid;
}

OAIListFindingAggregations_request_aggregationRequest OAIListFindingAggregations_request::getAggregationRequest() const {
    return m_aggregation_request;
}
void OAIListFindingAggregations_request::setAggregationRequest(const OAIListFindingAggregations_request_aggregationRequest &aggregation_request) {
    m_aggregation_request = aggregation_request;
    m_aggregation_request_isSet = true;
}

bool OAIListFindingAggregations_request::is_aggregation_request_Set() const{
    return m_aggregation_request_isSet;
}

bool OAIListFindingAggregations_request::is_aggregation_request_Valid() const{
    return m_aggregation_request_isValid;
}

QString OAIListFindingAggregations_request::getAggregationType() const {
    return m_aggregation_type;
}
void OAIListFindingAggregations_request::setAggregationType(const QString &aggregation_type) {
    m_aggregation_type = aggregation_type;
    m_aggregation_type_isSet = true;
}

bool OAIListFindingAggregations_request::is_aggregation_type_Set() const{
    return m_aggregation_type_isSet;
}

bool OAIListFindingAggregations_request::is_aggregation_type_Valid() const{
    return m_aggregation_type_isValid;
}

qint32 OAIListFindingAggregations_request::getMaxResults() const {
    return m_max_results;
}
void OAIListFindingAggregations_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListFindingAggregations_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListFindingAggregations_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListFindingAggregations_request::getNextToken() const {
    return m_next_token;
}
void OAIListFindingAggregations_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListFindingAggregations_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListFindingAggregations_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListFindingAggregations_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFindingAggregations_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aggregation_type_isValid && true;
}

} // namespace OpenAPI
