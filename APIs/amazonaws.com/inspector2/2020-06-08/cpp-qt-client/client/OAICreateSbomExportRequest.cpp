/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSbomExportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSbomExportRequest::OAICreateSbomExportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSbomExportRequest::OAICreateSbomExportRequest() {
    this->initializeModel();
}

OAICreateSbomExportRequest::~OAICreateSbomExportRequest() {}

void OAICreateSbomExportRequest::initializeModel() {

    m_report_format_isSet = false;
    m_report_format_isValid = false;

    m_resource_filter_criteria_isSet = false;
    m_resource_filter_criteria_isValid = false;

    m_s3_destination_isSet = false;
    m_s3_destination_isValid = false;
}

void OAICreateSbomExportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSbomExportRequest::fromJsonObject(QJsonObject json) {

    m_report_format_isValid = ::OpenAPI::fromJsonValue(m_report_format, json[QString("reportFormat")]);
    m_report_format_isSet = !json[QString("reportFormat")].isNull() && m_report_format_isValid;

    m_resource_filter_criteria_isValid = ::OpenAPI::fromJsonValue(m_resource_filter_criteria, json[QString("resourceFilterCriteria")]);
    m_resource_filter_criteria_isSet = !json[QString("resourceFilterCriteria")].isNull() && m_resource_filter_criteria_isValid;

    m_s3_destination_isValid = ::OpenAPI::fromJsonValue(m_s3_destination, json[QString("s3Destination")]);
    m_s3_destination_isSet = !json[QString("s3Destination")].isNull() && m_s3_destination_isValid;
}

QString OAICreateSbomExportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSbomExportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_report_format.isSet()) {
        obj.insert(QString("reportFormat"), ::OpenAPI::toJsonValue(m_report_format));
    }
    if (m_resource_filter_criteria.isSet()) {
        obj.insert(QString("resourceFilterCriteria"), ::OpenAPI::toJsonValue(m_resource_filter_criteria));
    }
    if (m_s3_destination.isSet()) {
        obj.insert(QString("s3Destination"), ::OpenAPI::toJsonValue(m_s3_destination));
    }
    return obj;
}

OAISbomReportFormat OAICreateSbomExportRequest::getReportFormat() const {
    return m_report_format;
}
void OAICreateSbomExportRequest::setReportFormat(const OAISbomReportFormat &report_format) {
    m_report_format = report_format;
    m_report_format_isSet = true;
}

bool OAICreateSbomExportRequest::is_report_format_Set() const{
    return m_report_format_isSet;
}

bool OAICreateSbomExportRequest::is_report_format_Valid() const{
    return m_report_format_isValid;
}

OAICreateSbomExportRequest_resourceFilterCriteria OAICreateSbomExportRequest::getResourceFilterCriteria() const {
    return m_resource_filter_criteria;
}
void OAICreateSbomExportRequest::setResourceFilterCriteria(const OAICreateSbomExportRequest_resourceFilterCriteria &resource_filter_criteria) {
    m_resource_filter_criteria = resource_filter_criteria;
    m_resource_filter_criteria_isSet = true;
}

bool OAICreateSbomExportRequest::is_resource_filter_criteria_Set() const{
    return m_resource_filter_criteria_isSet;
}

bool OAICreateSbomExportRequest::is_resource_filter_criteria_Valid() const{
    return m_resource_filter_criteria_isValid;
}

OAIDestination OAICreateSbomExportRequest::getS3Destination() const {
    return m_s3_destination;
}
void OAICreateSbomExportRequest::setS3Destination(const OAIDestination &s3_destination) {
    m_s3_destination = s3_destination;
    m_s3_destination_isSet = true;
}

bool OAICreateSbomExportRequest::is_s3_destination_Set() const{
    return m_s3_destination_isSet;
}

bool OAICreateSbomExportRequest::is_s3_destination_Valid() const{
    return m_s3_destination_isValid;
}

bool OAICreateSbomExportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_filter_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSbomExportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_report_format_isValid && m_s3_destination_isValid && true;
}

} // namespace OpenAPI
