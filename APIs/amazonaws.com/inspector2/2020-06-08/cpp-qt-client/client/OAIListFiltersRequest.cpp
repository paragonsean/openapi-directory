/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFiltersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFiltersRequest::OAIListFiltersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFiltersRequest::OAIListFiltersRequest() {
    this->initializeModel();
}

OAIListFiltersRequest::~OAIListFiltersRequest() {}

void OAIListFiltersRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_arns_isSet = false;
    m_arns_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListFiltersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFiltersRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_arns_isValid = ::OpenAPI::fromJsonValue(m_arns, json[QString("arns")]);
    m_arns_isSet = !json[QString("arns")].isNull() && m_arns_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListFiltersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFiltersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_arns.isSet()) {
        obj.insert(QString("arns"), ::OpenAPI::toJsonValue(m_arns));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIFilterAction OAIListFiltersRequest::getAction() const {
    return m_action;
}
void OAIListFiltersRequest::setAction(const OAIFilterAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIListFiltersRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIListFiltersRequest::is_action_Valid() const{
    return m_action_isValid;
}

QList OAIListFiltersRequest::getArns() const {
    return m_arns;
}
void OAIListFiltersRequest::setArns(const QList &arns) {
    m_arns = arns;
    m_arns_isSet = true;
}

bool OAIListFiltersRequest::is_arns_Set() const{
    return m_arns_isSet;
}

bool OAIListFiltersRequest::is_arns_Valid() const{
    return m_arns_isValid;
}

qint32 OAIListFiltersRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListFiltersRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListFiltersRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListFiltersRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListFiltersRequest::getNextToken() const {
    return m_next_token;
}
void OAIListFiltersRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListFiltersRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListFiltersRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListFiltersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFiltersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
