/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationResponse::OAIAggregationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationResponse::OAIAggregationResponse() {
    this->initializeModel();
}

OAIAggregationResponse::~OAIAggregationResponse() {}

void OAIAggregationResponse::initializeModel() {

    m_account_aggregation_isSet = false;
    m_account_aggregation_isValid = false;

    m_ami_aggregation_isSet = false;
    m_ami_aggregation_isValid = false;

    m_aws_ecr_container_aggregation_isSet = false;
    m_aws_ecr_container_aggregation_isValid = false;

    m_ec2_instance_aggregation_isSet = false;
    m_ec2_instance_aggregation_isValid = false;

    m_finding_type_aggregation_isSet = false;
    m_finding_type_aggregation_isValid = false;

    m_image_layer_aggregation_isSet = false;
    m_image_layer_aggregation_isValid = false;

    m_lambda_function_aggregation_isSet = false;
    m_lambda_function_aggregation_isValid = false;

    m_lambda_layer_aggregation_isSet = false;
    m_lambda_layer_aggregation_isValid = false;

    m_package_aggregation_isSet = false;
    m_package_aggregation_isValid = false;

    m_repository_aggregation_isSet = false;
    m_repository_aggregation_isValid = false;

    m_title_aggregation_isSet = false;
    m_title_aggregation_isValid = false;
}

void OAIAggregationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationResponse::fromJsonObject(QJsonObject json) {

    m_account_aggregation_isValid = ::OpenAPI::fromJsonValue(m_account_aggregation, json[QString("accountAggregation")]);
    m_account_aggregation_isSet = !json[QString("accountAggregation")].isNull() && m_account_aggregation_isValid;

    m_ami_aggregation_isValid = ::OpenAPI::fromJsonValue(m_ami_aggregation, json[QString("amiAggregation")]);
    m_ami_aggregation_isSet = !json[QString("amiAggregation")].isNull() && m_ami_aggregation_isValid;

    m_aws_ecr_container_aggregation_isValid = ::OpenAPI::fromJsonValue(m_aws_ecr_container_aggregation, json[QString("awsEcrContainerAggregation")]);
    m_aws_ecr_container_aggregation_isSet = !json[QString("awsEcrContainerAggregation")].isNull() && m_aws_ecr_container_aggregation_isValid;

    m_ec2_instance_aggregation_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_aggregation, json[QString("ec2InstanceAggregation")]);
    m_ec2_instance_aggregation_isSet = !json[QString("ec2InstanceAggregation")].isNull() && m_ec2_instance_aggregation_isValid;

    m_finding_type_aggregation_isValid = ::OpenAPI::fromJsonValue(m_finding_type_aggregation, json[QString("findingTypeAggregation")]);
    m_finding_type_aggregation_isSet = !json[QString("findingTypeAggregation")].isNull() && m_finding_type_aggregation_isValid;

    m_image_layer_aggregation_isValid = ::OpenAPI::fromJsonValue(m_image_layer_aggregation, json[QString("imageLayerAggregation")]);
    m_image_layer_aggregation_isSet = !json[QString("imageLayerAggregation")].isNull() && m_image_layer_aggregation_isValid;

    m_lambda_function_aggregation_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_aggregation, json[QString("lambdaFunctionAggregation")]);
    m_lambda_function_aggregation_isSet = !json[QString("lambdaFunctionAggregation")].isNull() && m_lambda_function_aggregation_isValid;

    m_lambda_layer_aggregation_isValid = ::OpenAPI::fromJsonValue(m_lambda_layer_aggregation, json[QString("lambdaLayerAggregation")]);
    m_lambda_layer_aggregation_isSet = !json[QString("lambdaLayerAggregation")].isNull() && m_lambda_layer_aggregation_isValid;

    m_package_aggregation_isValid = ::OpenAPI::fromJsonValue(m_package_aggregation, json[QString("packageAggregation")]);
    m_package_aggregation_isSet = !json[QString("packageAggregation")].isNull() && m_package_aggregation_isValid;

    m_repository_aggregation_isValid = ::OpenAPI::fromJsonValue(m_repository_aggregation, json[QString("repositoryAggregation")]);
    m_repository_aggregation_isSet = !json[QString("repositoryAggregation")].isNull() && m_repository_aggregation_isValid;

    m_title_aggregation_isValid = ::OpenAPI::fromJsonValue(m_title_aggregation, json[QString("titleAggregation")]);
    m_title_aggregation_isSet = !json[QString("titleAggregation")].isNull() && m_title_aggregation_isValid;
}

QString OAIAggregationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_aggregation.isSet()) {
        obj.insert(QString("accountAggregation"), ::OpenAPI::toJsonValue(m_account_aggregation));
    }
    if (m_ami_aggregation.isSet()) {
        obj.insert(QString("amiAggregation"), ::OpenAPI::toJsonValue(m_ami_aggregation));
    }
    if (m_aws_ecr_container_aggregation.isSet()) {
        obj.insert(QString("awsEcrContainerAggregation"), ::OpenAPI::toJsonValue(m_aws_ecr_container_aggregation));
    }
    if (m_ec2_instance_aggregation.isSet()) {
        obj.insert(QString("ec2InstanceAggregation"), ::OpenAPI::toJsonValue(m_ec2_instance_aggregation));
    }
    if (m_finding_type_aggregation.isSet()) {
        obj.insert(QString("findingTypeAggregation"), ::OpenAPI::toJsonValue(m_finding_type_aggregation));
    }
    if (m_image_layer_aggregation.isSet()) {
        obj.insert(QString("imageLayerAggregation"), ::OpenAPI::toJsonValue(m_image_layer_aggregation));
    }
    if (m_lambda_function_aggregation.isSet()) {
        obj.insert(QString("lambdaFunctionAggregation"), ::OpenAPI::toJsonValue(m_lambda_function_aggregation));
    }
    if (m_lambda_layer_aggregation.isSet()) {
        obj.insert(QString("lambdaLayerAggregation"), ::OpenAPI::toJsonValue(m_lambda_layer_aggregation));
    }
    if (m_package_aggregation.isSet()) {
        obj.insert(QString("packageAggregation"), ::OpenAPI::toJsonValue(m_package_aggregation));
    }
    if (m_repository_aggregation.isSet()) {
        obj.insert(QString("repositoryAggregation"), ::OpenAPI::toJsonValue(m_repository_aggregation));
    }
    if (m_title_aggregation.isSet()) {
        obj.insert(QString("titleAggregation"), ::OpenAPI::toJsonValue(m_title_aggregation));
    }
    return obj;
}

OAIAggregationResponse_accountAggregation OAIAggregationResponse::getAccountAggregation() const {
    return m_account_aggregation;
}
void OAIAggregationResponse::setAccountAggregation(const OAIAggregationResponse_accountAggregation &account_aggregation) {
    m_account_aggregation = account_aggregation;
    m_account_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_account_aggregation_Set() const{
    return m_account_aggregation_isSet;
}

bool OAIAggregationResponse::is_account_aggregation_Valid() const{
    return m_account_aggregation_isValid;
}

OAIAggregationResponse_amiAggregation OAIAggregationResponse::getAmiAggregation() const {
    return m_ami_aggregation;
}
void OAIAggregationResponse::setAmiAggregation(const OAIAggregationResponse_amiAggregation &ami_aggregation) {
    m_ami_aggregation = ami_aggregation;
    m_ami_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_ami_aggregation_Set() const{
    return m_ami_aggregation_isSet;
}

bool OAIAggregationResponse::is_ami_aggregation_Valid() const{
    return m_ami_aggregation_isValid;
}

OAIAggregationResponse_awsEcrContainerAggregation OAIAggregationResponse::getAwsEcrContainerAggregation() const {
    return m_aws_ecr_container_aggregation;
}
void OAIAggregationResponse::setAwsEcrContainerAggregation(const OAIAggregationResponse_awsEcrContainerAggregation &aws_ecr_container_aggregation) {
    m_aws_ecr_container_aggregation = aws_ecr_container_aggregation;
    m_aws_ecr_container_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_aws_ecr_container_aggregation_Set() const{
    return m_aws_ecr_container_aggregation_isSet;
}

bool OAIAggregationResponse::is_aws_ecr_container_aggregation_Valid() const{
    return m_aws_ecr_container_aggregation_isValid;
}

OAIAggregationResponse_ec2InstanceAggregation OAIAggregationResponse::getEc2InstanceAggregation() const {
    return m_ec2_instance_aggregation;
}
void OAIAggregationResponse::setEc2InstanceAggregation(const OAIAggregationResponse_ec2InstanceAggregation &ec2_instance_aggregation) {
    m_ec2_instance_aggregation = ec2_instance_aggregation;
    m_ec2_instance_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_ec2_instance_aggregation_Set() const{
    return m_ec2_instance_aggregation_isSet;
}

bool OAIAggregationResponse::is_ec2_instance_aggregation_Valid() const{
    return m_ec2_instance_aggregation_isValid;
}

OAIAggregationResponse_findingTypeAggregation OAIAggregationResponse::getFindingTypeAggregation() const {
    return m_finding_type_aggregation;
}
void OAIAggregationResponse::setFindingTypeAggregation(const OAIAggregationResponse_findingTypeAggregation &finding_type_aggregation) {
    m_finding_type_aggregation = finding_type_aggregation;
    m_finding_type_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_finding_type_aggregation_Set() const{
    return m_finding_type_aggregation_isSet;
}

bool OAIAggregationResponse::is_finding_type_aggregation_Valid() const{
    return m_finding_type_aggregation_isValid;
}

OAIAggregationResponse_imageLayerAggregation OAIAggregationResponse::getImageLayerAggregation() const {
    return m_image_layer_aggregation;
}
void OAIAggregationResponse::setImageLayerAggregation(const OAIAggregationResponse_imageLayerAggregation &image_layer_aggregation) {
    m_image_layer_aggregation = image_layer_aggregation;
    m_image_layer_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_image_layer_aggregation_Set() const{
    return m_image_layer_aggregation_isSet;
}

bool OAIAggregationResponse::is_image_layer_aggregation_Valid() const{
    return m_image_layer_aggregation_isValid;
}

OAIAggregationResponse_lambdaFunctionAggregation OAIAggregationResponse::getLambdaFunctionAggregation() const {
    return m_lambda_function_aggregation;
}
void OAIAggregationResponse::setLambdaFunctionAggregation(const OAIAggregationResponse_lambdaFunctionAggregation &lambda_function_aggregation) {
    m_lambda_function_aggregation = lambda_function_aggregation;
    m_lambda_function_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_lambda_function_aggregation_Set() const{
    return m_lambda_function_aggregation_isSet;
}

bool OAIAggregationResponse::is_lambda_function_aggregation_Valid() const{
    return m_lambda_function_aggregation_isValid;
}

OAIAggregationResponse_lambdaLayerAggregation OAIAggregationResponse::getLambdaLayerAggregation() const {
    return m_lambda_layer_aggregation;
}
void OAIAggregationResponse::setLambdaLayerAggregation(const OAIAggregationResponse_lambdaLayerAggregation &lambda_layer_aggregation) {
    m_lambda_layer_aggregation = lambda_layer_aggregation;
    m_lambda_layer_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_lambda_layer_aggregation_Set() const{
    return m_lambda_layer_aggregation_isSet;
}

bool OAIAggregationResponse::is_lambda_layer_aggregation_Valid() const{
    return m_lambda_layer_aggregation_isValid;
}

OAIAggregationResponse_packageAggregation OAIAggregationResponse::getPackageAggregation() const {
    return m_package_aggregation;
}
void OAIAggregationResponse::setPackageAggregation(const OAIAggregationResponse_packageAggregation &package_aggregation) {
    m_package_aggregation = package_aggregation;
    m_package_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_package_aggregation_Set() const{
    return m_package_aggregation_isSet;
}

bool OAIAggregationResponse::is_package_aggregation_Valid() const{
    return m_package_aggregation_isValid;
}

OAIAggregationResponse_repositoryAggregation OAIAggregationResponse::getRepositoryAggregation() const {
    return m_repository_aggregation;
}
void OAIAggregationResponse::setRepositoryAggregation(const OAIAggregationResponse_repositoryAggregation &repository_aggregation) {
    m_repository_aggregation = repository_aggregation;
    m_repository_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_repository_aggregation_Set() const{
    return m_repository_aggregation_isSet;
}

bool OAIAggregationResponse::is_repository_aggregation_Valid() const{
    return m_repository_aggregation_isValid;
}

OAIAggregationResponse_titleAggregation OAIAggregationResponse::getTitleAggregation() const {
    return m_title_aggregation;
}
void OAIAggregationResponse::setTitleAggregation(const OAIAggregationResponse_titleAggregation &title_aggregation) {
    m_title_aggregation = title_aggregation;
    m_title_aggregation_isSet = true;
}

bool OAIAggregationResponse::is_title_aggregation_Set() const{
    return m_title_aggregation_isSet;
}

bool OAIAggregationResponse::is_title_aggregation_Valid() const{
    return m_title_aggregation_isValid;
}

bool OAIAggregationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ami_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_ecr_container_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_type_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_layer_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_layer_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
