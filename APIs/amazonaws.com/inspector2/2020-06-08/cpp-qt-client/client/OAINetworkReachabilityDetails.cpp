/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkReachabilityDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkReachabilityDetails::OAINetworkReachabilityDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkReachabilityDetails::OAINetworkReachabilityDetails() {
    this->initializeModel();
}

OAINetworkReachabilityDetails::~OAINetworkReachabilityDetails() {}

void OAINetworkReachabilityDetails::initializeModel() {

    m_network_path_isSet = false;
    m_network_path_isValid = false;

    m_open_port_range_isSet = false;
    m_open_port_range_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAINetworkReachabilityDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkReachabilityDetails::fromJsonObject(QJsonObject json) {

    m_network_path_isValid = ::OpenAPI::fromJsonValue(m_network_path, json[QString("networkPath")]);
    m_network_path_isSet = !json[QString("networkPath")].isNull() && m_network_path_isValid;

    m_open_port_range_isValid = ::OpenAPI::fromJsonValue(m_open_port_range, json[QString("openPortRange")]);
    m_open_port_range_isSet = !json[QString("openPortRange")].isNull() && m_open_port_range_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAINetworkReachabilityDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkReachabilityDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_network_path.isSet()) {
        obj.insert(QString("networkPath"), ::OpenAPI::toJsonValue(m_network_path));
    }
    if (m_open_port_range.isSet()) {
        obj.insert(QString("openPortRange"), ::OpenAPI::toJsonValue(m_open_port_range));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

OAINetworkReachabilityDetails_networkPath OAINetworkReachabilityDetails::getNetworkPath() const {
    return m_network_path;
}
void OAINetworkReachabilityDetails::setNetworkPath(const OAINetworkReachabilityDetails_networkPath &network_path) {
    m_network_path = network_path;
    m_network_path_isSet = true;
}

bool OAINetworkReachabilityDetails::is_network_path_Set() const{
    return m_network_path_isSet;
}

bool OAINetworkReachabilityDetails::is_network_path_Valid() const{
    return m_network_path_isValid;
}

OAINetworkReachabilityDetails_openPortRange OAINetworkReachabilityDetails::getOpenPortRange() const {
    return m_open_port_range;
}
void OAINetworkReachabilityDetails::setOpenPortRange(const OAINetworkReachabilityDetails_openPortRange &open_port_range) {
    m_open_port_range = open_port_range;
    m_open_port_range_isSet = true;
}

bool OAINetworkReachabilityDetails::is_open_port_range_Set() const{
    return m_open_port_range_isSet;
}

bool OAINetworkReachabilityDetails::is_open_port_range_Valid() const{
    return m_open_port_range_isValid;
}

OAINetworkProtocol OAINetworkReachabilityDetails::getProtocol() const {
    return m_protocol;
}
void OAINetworkReachabilityDetails::setProtocol(const OAINetworkProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAINetworkReachabilityDetails::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAINetworkReachabilityDetails::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAINetworkReachabilityDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_port_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkReachabilityDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_network_path_isValid && m_open_port_range_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
