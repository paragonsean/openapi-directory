/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceScanMetadata_ec2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceScanMetadata_ec2::OAIResourceScanMetadata_ec2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceScanMetadata_ec2::OAIResourceScanMetadata_ec2() {
    this->initializeModel();
}

OAIResourceScanMetadata_ec2::~OAIResourceScanMetadata_ec2() {}

void OAIResourceScanMetadata_ec2::initializeModel() {

    m_ami_id_isSet = false;
    m_ami_id_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIResourceScanMetadata_ec2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceScanMetadata_ec2::fromJsonObject(QJsonObject json) {

    m_ami_id_isValid = ::OpenAPI::fromJsonValue(m_ami_id, json[QString("amiId")]);
    m_ami_id_isSet = !json[QString("amiId")].isNull() && m_ami_id_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIResourceScanMetadata_ec2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceScanMetadata_ec2::asJsonObject() const {
    QJsonObject obj;
    if (m_ami_id_isSet) {
        obj.insert(QString("amiId"), ::OpenAPI::toJsonValue(m_ami_id));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIResourceScanMetadata_ec2::getAmiId() const {
    return m_ami_id;
}
void OAIResourceScanMetadata_ec2::setAmiId(const QString &ami_id) {
    m_ami_id = ami_id;
    m_ami_id_isSet = true;
}

bool OAIResourceScanMetadata_ec2::is_ami_id_Set() const{
    return m_ami_id_isSet;
}

bool OAIResourceScanMetadata_ec2::is_ami_id_Valid() const{
    return m_ami_id_isValid;
}

OAIEc2Platform OAIResourceScanMetadata_ec2::getPlatform() const {
    return m_platform;
}
void OAIResourceScanMetadata_ec2::setPlatform(const OAIEc2Platform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIResourceScanMetadata_ec2::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIResourceScanMetadata_ec2::is_platform_Valid() const{
    return m_platform_isValid;
}

QMap OAIResourceScanMetadata_ec2::getTags() const {
    return m_tags;
}
void OAIResourceScanMetadata_ec2::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIResourceScanMetadata_ec2::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIResourceScanMetadata_ec2::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIResourceScanMetadata_ec2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ami_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceScanMetadata_ec2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
