/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEc2DeepInspectionConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEc2DeepInspectionConfigurationResponse::OAIUpdateEc2DeepInspectionConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEc2DeepInspectionConfigurationResponse::OAIUpdateEc2DeepInspectionConfigurationResponse() {
    this->initializeModel();
}

OAIUpdateEc2DeepInspectionConfigurationResponse::~OAIUpdateEc2DeepInspectionConfigurationResponse() {}

void OAIUpdateEc2DeepInspectionConfigurationResponse::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_org_package_paths_isSet = false;
    m_org_package_paths_isValid = false;

    m_package_paths_isSet = false;
    m_package_paths_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateEc2DeepInspectionConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEc2DeepInspectionConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_org_package_paths_isValid = ::OpenAPI::fromJsonValue(m_org_package_paths, json[QString("orgPackagePaths")]);
    m_org_package_paths_isSet = !json[QString("orgPackagePaths")].isNull() && m_org_package_paths_isValid;

    m_package_paths_isValid = ::OpenAPI::fromJsonValue(m_package_paths, json[QString("packagePaths")]);
    m_package_paths_isSet = !json[QString("packagePaths")].isNull() && m_package_paths_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIUpdateEc2DeepInspectionConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEc2DeepInspectionConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_org_package_paths.isSet()) {
        obj.insert(QString("orgPackagePaths"), ::OpenAPI::toJsonValue(m_org_package_paths));
    }
    if (m_package_paths.isSet()) {
        obj.insert(QString("packagePaths"), ::OpenAPI::toJsonValue(m_package_paths));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUpdateEc2DeepInspectionConfigurationResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIUpdateEc2DeepInspectionConfigurationResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QList OAIUpdateEc2DeepInspectionConfigurationResponse::getOrgPackagePaths() const {
    return m_org_package_paths;
}
void OAIUpdateEc2DeepInspectionConfigurationResponse::setOrgPackagePaths(const QList &org_package_paths) {
    m_org_package_paths = org_package_paths;
    m_org_package_paths_isSet = true;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::is_org_package_paths_Set() const{
    return m_org_package_paths_isSet;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::is_org_package_paths_Valid() const{
    return m_org_package_paths_isValid;
}

QList OAIUpdateEc2DeepInspectionConfigurationResponse::getPackagePaths() const {
    return m_package_paths;
}
void OAIUpdateEc2DeepInspectionConfigurationResponse::setPackagePaths(const QList &package_paths) {
    m_package_paths = package_paths;
    m_package_paths_isSet = true;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::is_package_paths_Set() const{
    return m_package_paths_isSet;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::is_package_paths_Valid() const{
    return m_package_paths_isValid;
}

OAIEc2DeepInspectionStatus OAIUpdateEc2DeepInspectionConfigurationResponse::getStatus() const {
    return m_status;
}
void OAIUpdateEc2DeepInspectionConfigurationResponse::setStatus(const OAIEc2DeepInspectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_package_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEc2DeepInspectionConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
