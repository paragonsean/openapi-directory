/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFindingDetail.h
 *
 * Details of the vulnerability identified in a finding.
 */

#ifndef OAIFindingDetail_H
#define OAIFindingDetail_H

#include <QJsonObject>

#include "OAICisaData.h"
#include "OAIExploitObserved.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICisaData;
class OAIExploitObserved;

class OAIFindingDetail : public OAIObject {
public:
    OAIFindingDetail();
    OAIFindingDetail(QString json);
    ~OAIFindingDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICisaData getCisaData() const;
    void setCisaData(const OAICisaData &cisa_data);
    bool is_cisa_data_Set() const;
    bool is_cisa_data_Valid() const;

    QList getCwes() const;
    void setCwes(const QList &cwes);
    bool is_cwes_Set() const;
    bool is_cwes_Valid() const;

    double getEpssScore() const;
    void setEpssScore(const double &epss_score);
    bool is_epss_score_Set() const;
    bool is_epss_score_Valid() const;

    QList getEvidences() const;
    void setEvidences(const QList &evidences);
    bool is_evidences_Set() const;
    bool is_evidences_Valid() const;

    OAIExploitObserved getExploitObserved() const;
    void setExploitObserved(const OAIExploitObserved &exploit_observed);
    bool is_exploit_observed_Set() const;
    bool is_exploit_observed_Valid() const;

    QString getFindingArn() const;
    void setFindingArn(const QString &finding_arn);
    bool is_finding_arn_Set() const;
    bool is_finding_arn_Valid() const;

    QList getReferenceUrls() const;
    void setReferenceUrls(const QList &reference_urls);
    bool is_reference_urls_Set() const;
    bool is_reference_urls_Valid() const;

    qint32 getRiskScore() const;
    void setRiskScore(const qint32 &risk_score);
    bool is_risk_score_Set() const;
    bool is_risk_score_Valid() const;

    QList getTools() const;
    void setTools(const QList &tools);
    bool is_tools_Set() const;
    bool is_tools_Valid() const;

    QList getTtps() const;
    void setTtps(const QList &ttps);
    bool is_ttps_Set() const;
    bool is_ttps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICisaData m_cisa_data;
    bool m_cisa_data_isSet;
    bool m_cisa_data_isValid;

    QList m_cwes;
    bool m_cwes_isSet;
    bool m_cwes_isValid;

    double m_epss_score;
    bool m_epss_score_isSet;
    bool m_epss_score_isValid;

    QList m_evidences;
    bool m_evidences_isSet;
    bool m_evidences_isValid;

    OAIExploitObserved m_exploit_observed;
    bool m_exploit_observed_isSet;
    bool m_exploit_observed_isValid;

    QString m_finding_arn;
    bool m_finding_arn_isSet;
    bool m_finding_arn_isValid;

    QList m_reference_urls;
    bool m_reference_urls_isSet;
    bool m_reference_urls_isValid;

    qint32 m_risk_score;
    bool m_risk_score_isSet;
    bool m_risk_score_isValid;

    QList m_tools;
    bool m_tools_isSet;
    bool m_tools_isValid;

    QList m_ttps;
    bool m_ttps_isSet;
    bool m_ttps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFindingDetail)

#endif // OAIFindingDetail_H
