/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFreeTrialInfoError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFreeTrialInfoError::OAIFreeTrialInfoError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFreeTrialInfoError::OAIFreeTrialInfoError() {
    this->initializeModel();
}

OAIFreeTrialInfoError::~OAIFreeTrialInfoError() {}

void OAIFreeTrialInfoError::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIFreeTrialInfoError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFreeTrialInfoError::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIFreeTrialInfoError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFreeTrialInfoError::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_code.isSet()) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIFreeTrialInfoError::getAccountId() const {
    return m_account_id;
}
void OAIFreeTrialInfoError::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIFreeTrialInfoError::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIFreeTrialInfoError::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIFreeTrialInfoErrorCode OAIFreeTrialInfoError::getCode() const {
    return m_code;
}
void OAIFreeTrialInfoError::setCode(const OAIFreeTrialInfoErrorCode &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIFreeTrialInfoError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIFreeTrialInfoError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIFreeTrialInfoError::getMessage() const {
    return m_message;
}
void OAIFreeTrialInfoError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIFreeTrialInfoError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIFreeTrialInfoError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIFreeTrialInfoError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFreeTrialInfoError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
