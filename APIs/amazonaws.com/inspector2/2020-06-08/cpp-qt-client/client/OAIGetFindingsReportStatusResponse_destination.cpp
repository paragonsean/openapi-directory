/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFindingsReportStatusResponse_destination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFindingsReportStatusResponse_destination::OAIGetFindingsReportStatusResponse_destination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFindingsReportStatusResponse_destination::OAIGetFindingsReportStatusResponse_destination() {
    this->initializeModel();
}

OAIGetFindingsReportStatusResponse_destination::~OAIGetFindingsReportStatusResponse_destination() {}

void OAIGetFindingsReportStatusResponse_destination::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_key_prefix_isSet = false;
    m_key_prefix_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;
}

void OAIGetFindingsReportStatusResponse_destination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFindingsReportStatusResponse_destination::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_key_prefix, json[QString("keyPrefix")]);
    m_key_prefix_isSet = !json[QString("keyPrefix")].isNull() && m_key_prefix_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("kmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("kmsKeyArn")].isNull() && m_kms_key_arn_isValid;
}

QString OAIGetFindingsReportStatusResponse_destination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFindingsReportStatusResponse_destination::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_key_prefix_isSet) {
        obj.insert(QString("keyPrefix"), ::OpenAPI::toJsonValue(m_key_prefix));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("kmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    return obj;
}

QString OAIGetFindingsReportStatusResponse_destination::getBucketName() const {
    return m_bucket_name;
}
void OAIGetFindingsReportStatusResponse_destination::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIGetFindingsReportStatusResponse_destination::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIGetFindingsReportStatusResponse_destination::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIGetFindingsReportStatusResponse_destination::getKeyPrefix() const {
    return m_key_prefix;
}
void OAIGetFindingsReportStatusResponse_destination::setKeyPrefix(const QString &key_prefix) {
    m_key_prefix = key_prefix;
    m_key_prefix_isSet = true;
}

bool OAIGetFindingsReportStatusResponse_destination::is_key_prefix_Set() const{
    return m_key_prefix_isSet;
}

bool OAIGetFindingsReportStatusResponse_destination::is_key_prefix_Valid() const{
    return m_key_prefix_isValid;
}

QString OAIGetFindingsReportStatusResponse_destination::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIGetFindingsReportStatusResponse_destination::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIGetFindingsReportStatusResponse_destination::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIGetFindingsReportStatusResponse_destination::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

bool OAIGetFindingsReportStatusResponse_destination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFindingsReportStatusResponse_destination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_name_isValid && m_kms_key_arn_isValid && true;
}

} // namespace OpenAPI
