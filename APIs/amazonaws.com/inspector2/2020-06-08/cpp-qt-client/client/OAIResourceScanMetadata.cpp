/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceScanMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceScanMetadata::OAIResourceScanMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceScanMetadata::OAIResourceScanMetadata() {
    this->initializeModel();
}

OAIResourceScanMetadata::~OAIResourceScanMetadata() {}

void OAIResourceScanMetadata::initializeModel() {

    m_ec2_isSet = false;
    m_ec2_isValid = false;

    m_ecr_image_isSet = false;
    m_ecr_image_isValid = false;

    m_ecr_repository_isSet = false;
    m_ecr_repository_isValid = false;

    m_lambda_function_isSet = false;
    m_lambda_function_isValid = false;
}

void OAIResourceScanMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceScanMetadata::fromJsonObject(QJsonObject json) {

    m_ec2_isValid = ::OpenAPI::fromJsonValue(m_ec2, json[QString("ec2")]);
    m_ec2_isSet = !json[QString("ec2")].isNull() && m_ec2_isValid;

    m_ecr_image_isValid = ::OpenAPI::fromJsonValue(m_ecr_image, json[QString("ecrImage")]);
    m_ecr_image_isSet = !json[QString("ecrImage")].isNull() && m_ecr_image_isValid;

    m_ecr_repository_isValid = ::OpenAPI::fromJsonValue(m_ecr_repository, json[QString("ecrRepository")]);
    m_ecr_repository_isSet = !json[QString("ecrRepository")].isNull() && m_ecr_repository_isValid;

    m_lambda_function_isValid = ::OpenAPI::fromJsonValue(m_lambda_function, json[QString("lambdaFunction")]);
    m_lambda_function_isSet = !json[QString("lambdaFunction")].isNull() && m_lambda_function_isValid;
}

QString OAIResourceScanMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceScanMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_ec2.isSet()) {
        obj.insert(QString("ec2"), ::OpenAPI::toJsonValue(m_ec2));
    }
    if (m_ecr_image.isSet()) {
        obj.insert(QString("ecrImage"), ::OpenAPI::toJsonValue(m_ecr_image));
    }
    if (m_ecr_repository.isSet()) {
        obj.insert(QString("ecrRepository"), ::OpenAPI::toJsonValue(m_ecr_repository));
    }
    if (m_lambda_function.isSet()) {
        obj.insert(QString("lambdaFunction"), ::OpenAPI::toJsonValue(m_lambda_function));
    }
    return obj;
}

OAIResourceScanMetadata_ec2 OAIResourceScanMetadata::getEc2() const {
    return m_ec2;
}
void OAIResourceScanMetadata::setEc2(const OAIResourceScanMetadata_ec2 &ec2) {
    m_ec2 = ec2;
    m_ec2_isSet = true;
}

bool OAIResourceScanMetadata::is_ec2_Set() const{
    return m_ec2_isSet;
}

bool OAIResourceScanMetadata::is_ec2_Valid() const{
    return m_ec2_isValid;
}

OAIResourceScanMetadata_ecrImage OAIResourceScanMetadata::getEcrImage() const {
    return m_ecr_image;
}
void OAIResourceScanMetadata::setEcrImage(const OAIResourceScanMetadata_ecrImage &ecr_image) {
    m_ecr_image = ecr_image;
    m_ecr_image_isSet = true;
}

bool OAIResourceScanMetadata::is_ecr_image_Set() const{
    return m_ecr_image_isSet;
}

bool OAIResourceScanMetadata::is_ecr_image_Valid() const{
    return m_ecr_image_isValid;
}

OAIResourceScanMetadata_ecrRepository OAIResourceScanMetadata::getEcrRepository() const {
    return m_ecr_repository;
}
void OAIResourceScanMetadata::setEcrRepository(const OAIResourceScanMetadata_ecrRepository &ecr_repository) {
    m_ecr_repository = ecr_repository;
    m_ecr_repository_isSet = true;
}

bool OAIResourceScanMetadata::is_ecr_repository_Set() const{
    return m_ecr_repository_isSet;
}

bool OAIResourceScanMetadata::is_ecr_repository_Valid() const{
    return m_ecr_repository_isValid;
}

OAIResourceScanMetadata_lambdaFunction OAIResourceScanMetadata::getLambdaFunction() const {
    return m_lambda_function;
}
void OAIResourceScanMetadata::setLambdaFunction(const OAIResourceScanMetadata_lambdaFunction &lambda_function) {
    m_lambda_function = lambda_function;
    m_lambda_function_isSet = true;
}

bool OAIResourceScanMetadata::is_lambda_function_Set() const{
    return m_lambda_function_isSet;
}

bool OAIResourceScanMetadata::is_lambda_function_Valid() const{
    return m_lambda_function_isValid;
}

bool OAIResourceScanMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ec2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecr_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceScanMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
