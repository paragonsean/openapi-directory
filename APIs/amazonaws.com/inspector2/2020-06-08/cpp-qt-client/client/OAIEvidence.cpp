/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvidence::OAIEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvidence::OAIEvidence() {
    this->initializeModel();
}

OAIEvidence::~OAIEvidence() {}

void OAIEvidence::initializeModel() {

    m_evidence_detail_isSet = false;
    m_evidence_detail_isValid = false;

    m_evidence_rule_isSet = false;
    m_evidence_rule_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvidence::fromJsonObject(QJsonObject json) {

    m_evidence_detail_isValid = ::OpenAPI::fromJsonValue(m_evidence_detail, json[QString("evidenceDetail")]);
    m_evidence_detail_isSet = !json[QString("evidenceDetail")].isNull() && m_evidence_detail_isValid;

    m_evidence_rule_isValid = ::OpenAPI::fromJsonValue(m_evidence_rule, json[QString("evidenceRule")]);
    m_evidence_rule_isSet = !json[QString("evidenceRule")].isNull() && m_evidence_rule_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAIEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_detail_isSet) {
        obj.insert(QString("evidenceDetail"), ::OpenAPI::toJsonValue(m_evidence_detail));
    }
    if (m_evidence_rule_isSet) {
        obj.insert(QString("evidenceRule"), ::OpenAPI::toJsonValue(m_evidence_rule));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAIEvidence::getEvidenceDetail() const {
    return m_evidence_detail;
}
void OAIEvidence::setEvidenceDetail(const QString &evidence_detail) {
    m_evidence_detail = evidence_detail;
    m_evidence_detail_isSet = true;
}

bool OAIEvidence::is_evidence_detail_Set() const{
    return m_evidence_detail_isSet;
}

bool OAIEvidence::is_evidence_detail_Valid() const{
    return m_evidence_detail_isValid;
}

QString OAIEvidence::getEvidenceRule() const {
    return m_evidence_rule;
}
void OAIEvidence::setEvidenceRule(const QString &evidence_rule) {
    m_evidence_rule = evidence_rule;
    m_evidence_rule_isSet = true;
}

bool OAIEvidence::is_evidence_rule_Set() const{
    return m_evidence_rule_isSet;
}

bool OAIEvidence::is_evidence_rule_Valid() const{
    return m_evidence_rule_isValid;
}

QString OAIEvidence::getSeverity() const {
    return m_severity;
}
void OAIEvidence::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIEvidence::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIEvidence::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
