/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationType::OAIAggregationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationType::OAIAggregationType() {
    this->initializeModel();
}

OAIAggregationType::~OAIAggregationType() {}

void OAIAggregationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAggregationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAggregationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FINDING_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::FINDING_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TITLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPOSITORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::REPOSITORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::AMI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_EC2_INSTANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::AWS_EC2_INSTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_ECR_CONTAINER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::AWS_ECR_CONTAINER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMAGE_LAYER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::IMAGE_LAYER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_LAMBDA_FUNCTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::AWS_LAMBDA_FUNCTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAMBDA_LAYER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggregationType::LAMBDA_LAYER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAggregationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAggregationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAggregationType::FINDING_TYPE:
            val = "FINDING_TYPE";
            break;
        case eOAIAggregationType::PACKAGE:
            val = "PACKAGE";
            break;
        case eOAIAggregationType::TITLE:
            val = "TITLE";
            break;
        case eOAIAggregationType::REPOSITORY:
            val = "REPOSITORY";
            break;
        case eOAIAggregationType::AMI:
            val = "AMI";
            break;
        case eOAIAggregationType::AWS_EC2_INSTANCE:
            val = "AWS_EC2_INSTANCE";
            break;
        case eOAIAggregationType::AWS_ECR_CONTAINER:
            val = "AWS_ECR_CONTAINER";
            break;
        case eOAIAggregationType::IMAGE_LAYER:
            val = "IMAGE_LAYER";
            break;
        case eOAIAggregationType::ACCOUNT:
            val = "ACCOUNT";
            break;
        case eOAIAggregationType::AWS_LAMBDA_FUNCTION:
            val = "AWS_LAMBDA_FUNCTION";
            break;
        case eOAIAggregationType::LAMBDA_LAYER:
            val = "LAMBDA_LAYER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAggregationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAggregationType::eOAIAggregationType OAIAggregationType::getValue() const {
    return m_value;
}

void OAIAggregationType::setValue(const OAIAggregationType::eOAIAggregationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAggregationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAggregationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
