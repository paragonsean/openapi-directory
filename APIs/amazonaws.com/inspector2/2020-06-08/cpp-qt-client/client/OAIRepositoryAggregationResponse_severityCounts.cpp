/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepositoryAggregationResponse_severityCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepositoryAggregationResponse_severityCounts::OAIRepositoryAggregationResponse_severityCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepositoryAggregationResponse_severityCounts::OAIRepositoryAggregationResponse_severityCounts() {
    this->initializeModel();
}

OAIRepositoryAggregationResponse_severityCounts::~OAIRepositoryAggregationResponse_severityCounts() {}

void OAIRepositoryAggregationResponse_severityCounts::initializeModel() {

    m_all_isSet = false;
    m_all_isValid = false;

    m_critical_isSet = false;
    m_critical_isValid = false;

    m_high_isSet = false;
    m_high_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;
}

void OAIRepositoryAggregationResponse_severityCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepositoryAggregationResponse_severityCounts::fromJsonObject(QJsonObject json) {

    m_all_isValid = ::OpenAPI::fromJsonValue(m_all, json[QString("all")]);
    m_all_isSet = !json[QString("all")].isNull() && m_all_isValid;

    m_critical_isValid = ::OpenAPI::fromJsonValue(m_critical, json[QString("critical")]);
    m_critical_isSet = !json[QString("critical")].isNull() && m_critical_isValid;

    m_high_isValid = ::OpenAPI::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;
}

QString OAIRepositoryAggregationResponse_severityCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepositoryAggregationResponse_severityCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_all_isSet) {
        obj.insert(QString("all"), ::OpenAPI::toJsonValue(m_all));
    }
    if (m_critical_isSet) {
        obj.insert(QString("critical"), ::OpenAPI::toJsonValue(m_critical));
    }
    if (m_high_isSet) {
        obj.insert(QString("high"), ::OpenAPI::toJsonValue(m_high));
    }
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    return obj;
}

qint32 OAIRepositoryAggregationResponse_severityCounts::getAll() const {
    return m_all;
}
void OAIRepositoryAggregationResponse_severityCounts::setAll(const qint32 &all) {
    m_all = all;
    m_all_isSet = true;
}

bool OAIRepositoryAggregationResponse_severityCounts::is_all_Set() const{
    return m_all_isSet;
}

bool OAIRepositoryAggregationResponse_severityCounts::is_all_Valid() const{
    return m_all_isValid;
}

qint32 OAIRepositoryAggregationResponse_severityCounts::getCritical() const {
    return m_critical;
}
void OAIRepositoryAggregationResponse_severityCounts::setCritical(const qint32 &critical) {
    m_critical = critical;
    m_critical_isSet = true;
}

bool OAIRepositoryAggregationResponse_severityCounts::is_critical_Set() const{
    return m_critical_isSet;
}

bool OAIRepositoryAggregationResponse_severityCounts::is_critical_Valid() const{
    return m_critical_isValid;
}

qint32 OAIRepositoryAggregationResponse_severityCounts::getHigh() const {
    return m_high;
}
void OAIRepositoryAggregationResponse_severityCounts::setHigh(const qint32 &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OAIRepositoryAggregationResponse_severityCounts::is_high_Set() const{
    return m_high_isSet;
}

bool OAIRepositoryAggregationResponse_severityCounts::is_high_Valid() const{
    return m_high_isValid;
}

qint32 OAIRepositoryAggregationResponse_severityCounts::getMedium() const {
    return m_medium;
}
void OAIRepositoryAggregationResponse_severityCounts::setMedium(const qint32 &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIRepositoryAggregationResponse_severityCounts::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIRepositoryAggregationResponse_severityCounts::is_medium_Valid() const{
    return m_medium_isValid;
}

bool OAIRepositoryAggregationResponse_severityCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_critical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepositoryAggregationResponse_severityCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
