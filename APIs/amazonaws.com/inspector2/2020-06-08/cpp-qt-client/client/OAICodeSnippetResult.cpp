/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeSnippetResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeSnippetResult::OAICodeSnippetResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeSnippetResult::OAICodeSnippetResult() {
    this->initializeModel();
}

OAICodeSnippetResult::~OAICodeSnippetResult() {}

void OAICodeSnippetResult::initializeModel() {

    m_code_snippet_isSet = false;
    m_code_snippet_isValid = false;

    m_end_line_isSet = false;
    m_end_line_isValid = false;

    m_finding_arn_isSet = false;
    m_finding_arn_isValid = false;

    m_start_line_isSet = false;
    m_start_line_isValid = false;

    m_suggested_fixes_isSet = false;
    m_suggested_fixes_isValid = false;
}

void OAICodeSnippetResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeSnippetResult::fromJsonObject(QJsonObject json) {

    m_code_snippet_isValid = ::OpenAPI::fromJsonValue(m_code_snippet, json[QString("codeSnippet")]);
    m_code_snippet_isSet = !json[QString("codeSnippet")].isNull() && m_code_snippet_isValid;

    m_end_line_isValid = ::OpenAPI::fromJsonValue(m_end_line, json[QString("endLine")]);
    m_end_line_isSet = !json[QString("endLine")].isNull() && m_end_line_isValid;

    m_finding_arn_isValid = ::OpenAPI::fromJsonValue(m_finding_arn, json[QString("findingArn")]);
    m_finding_arn_isSet = !json[QString("findingArn")].isNull() && m_finding_arn_isValid;

    m_start_line_isValid = ::OpenAPI::fromJsonValue(m_start_line, json[QString("startLine")]);
    m_start_line_isSet = !json[QString("startLine")].isNull() && m_start_line_isValid;

    m_suggested_fixes_isValid = ::OpenAPI::fromJsonValue(m_suggested_fixes, json[QString("suggestedFixes")]);
    m_suggested_fixes_isSet = !json[QString("suggestedFixes")].isNull() && m_suggested_fixes_isValid;
}

QString OAICodeSnippetResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeSnippetResult::asJsonObject() const {
    QJsonObject obj;
    if (m_code_snippet.isSet()) {
        obj.insert(QString("codeSnippet"), ::OpenAPI::toJsonValue(m_code_snippet));
    }
    if (m_end_line_isSet) {
        obj.insert(QString("endLine"), ::OpenAPI::toJsonValue(m_end_line));
    }
    if (m_finding_arn_isSet) {
        obj.insert(QString("findingArn"), ::OpenAPI::toJsonValue(m_finding_arn));
    }
    if (m_start_line_isSet) {
        obj.insert(QString("startLine"), ::OpenAPI::toJsonValue(m_start_line));
    }
    if (m_suggested_fixes.isSet()) {
        obj.insert(QString("suggestedFixes"), ::OpenAPI::toJsonValue(m_suggested_fixes));
    }
    return obj;
}

QList OAICodeSnippetResult::getCodeSnippet() const {
    return m_code_snippet;
}
void OAICodeSnippetResult::setCodeSnippet(const QList &code_snippet) {
    m_code_snippet = code_snippet;
    m_code_snippet_isSet = true;
}

bool OAICodeSnippetResult::is_code_snippet_Set() const{
    return m_code_snippet_isSet;
}

bool OAICodeSnippetResult::is_code_snippet_Valid() const{
    return m_code_snippet_isValid;
}

qint32 OAICodeSnippetResult::getEndLine() const {
    return m_end_line;
}
void OAICodeSnippetResult::setEndLine(const qint32 &end_line) {
    m_end_line = end_line;
    m_end_line_isSet = true;
}

bool OAICodeSnippetResult::is_end_line_Set() const{
    return m_end_line_isSet;
}

bool OAICodeSnippetResult::is_end_line_Valid() const{
    return m_end_line_isValid;
}

QString OAICodeSnippetResult::getFindingArn() const {
    return m_finding_arn;
}
void OAICodeSnippetResult::setFindingArn(const QString &finding_arn) {
    m_finding_arn = finding_arn;
    m_finding_arn_isSet = true;
}

bool OAICodeSnippetResult::is_finding_arn_Set() const{
    return m_finding_arn_isSet;
}

bool OAICodeSnippetResult::is_finding_arn_Valid() const{
    return m_finding_arn_isValid;
}

qint32 OAICodeSnippetResult::getStartLine() const {
    return m_start_line;
}
void OAICodeSnippetResult::setStartLine(const qint32 &start_line) {
    m_start_line = start_line;
    m_start_line_isSet = true;
}

bool OAICodeSnippetResult::is_start_line_Set() const{
    return m_start_line_isSet;
}

bool OAICodeSnippetResult::is_start_line_Valid() const{
    return m_start_line_isValid;
}

QList OAICodeSnippetResult::getSuggestedFixes() const {
    return m_suggested_fixes;
}
void OAICodeSnippetResult::setSuggestedFixes(const QList &suggested_fixes) {
    m_suggested_fixes = suggested_fixes;
    m_suggested_fixes_isSet = true;
}

bool OAICodeSnippetResult::is_suggested_fixes_Set() const{
    return m_suggested_fixes_isSet;
}

bool OAICodeSnippetResult::is_suggested_fixes_Valid() const{
    return m_suggested_fixes_isValid;
}

bool OAICodeSnippetResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_snippet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_fixes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeSnippetResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
