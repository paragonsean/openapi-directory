/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSbomExportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSbomExportResponse::OAIGetSbomExportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSbomExportResponse::OAIGetSbomExportResponse() {
    this->initializeModel();
}

OAIGetSbomExportResponse::~OAIGetSbomExportResponse() {}

void OAIGetSbomExportResponse::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_filter_criteria_isSet = false;
    m_filter_criteria_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_report_id_isSet = false;
    m_report_id_isValid = false;

    m_s3_destination_isSet = false;
    m_s3_destination_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetSbomExportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSbomExportResponse::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_filter_criteria_isValid = ::OpenAPI::fromJsonValue(m_filter_criteria, json[QString("filterCriteria")]);
    m_filter_criteria_isSet = !json[QString("filterCriteria")].isNull() && m_filter_criteria_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_report_id_isValid = ::OpenAPI::fromJsonValue(m_report_id, json[QString("reportId")]);
    m_report_id_isSet = !json[QString("reportId")].isNull() && m_report_id_isValid;

    m_s3_destination_isValid = ::OpenAPI::fromJsonValue(m_s3_destination, json[QString("s3Destination")]);
    m_s3_destination_isSet = !json[QString("s3Destination")].isNull() && m_s3_destination_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGetSbomExportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSbomExportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code.isSet()) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_filter_criteria.isSet()) {
        obj.insert(QString("filterCriteria"), ::OpenAPI::toJsonValue(m_filter_criteria));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_report_id_isSet) {
        obj.insert(QString("reportId"), ::OpenAPI::toJsonValue(m_report_id));
    }
    if (m_s3_destination.isSet()) {
        obj.insert(QString("s3Destination"), ::OpenAPI::toJsonValue(m_s3_destination));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIReportingErrorCode OAIGetSbomExportResponse::getErrorCode() const {
    return m_error_code;
}
void OAIGetSbomExportResponse::setErrorCode(const OAIReportingErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIGetSbomExportResponse::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIGetSbomExportResponse::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIGetSbomExportResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIGetSbomExportResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIGetSbomExportResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIGetSbomExportResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIGetSbomExportResponse_filterCriteria OAIGetSbomExportResponse::getFilterCriteria() const {
    return m_filter_criteria;
}
void OAIGetSbomExportResponse::setFilterCriteria(const OAIGetSbomExportResponse_filterCriteria &filter_criteria) {
    m_filter_criteria = filter_criteria;
    m_filter_criteria_isSet = true;
}

bool OAIGetSbomExportResponse::is_filter_criteria_Set() const{
    return m_filter_criteria_isSet;
}

bool OAIGetSbomExportResponse::is_filter_criteria_Valid() const{
    return m_filter_criteria_isValid;
}

OAISbomReportFormat OAIGetSbomExportResponse::getFormat() const {
    return m_format;
}
void OAIGetSbomExportResponse::setFormat(const OAISbomReportFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIGetSbomExportResponse::is_format_Set() const{
    return m_format_isSet;
}

bool OAIGetSbomExportResponse::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIGetSbomExportResponse::getReportId() const {
    return m_report_id;
}
void OAIGetSbomExportResponse::setReportId(const QString &report_id) {
    m_report_id = report_id;
    m_report_id_isSet = true;
}

bool OAIGetSbomExportResponse::is_report_id_Set() const{
    return m_report_id_isSet;
}

bool OAIGetSbomExportResponse::is_report_id_Valid() const{
    return m_report_id_isValid;
}

OAIDestination OAIGetSbomExportResponse::getS3Destination() const {
    return m_s3_destination;
}
void OAIGetSbomExportResponse::setS3Destination(const OAIDestination &s3_destination) {
    m_s3_destination = s3_destination;
    m_s3_destination_isSet = true;
}

bool OAIGetSbomExportResponse::is_s3_destination_Set() const{
    return m_s3_destination_isSet;
}

bool OAIGetSbomExportResponse::is_s3_destination_Valid() const{
    return m_s3_destination_isValid;
}

OAIExternalReportStatus OAIGetSbomExportResponse::getStatus() const {
    return m_status;
}
void OAIGetSbomExportResponse::setStatus(const OAIExternalReportStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetSbomExportResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetSbomExportResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetSbomExportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSbomExportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
