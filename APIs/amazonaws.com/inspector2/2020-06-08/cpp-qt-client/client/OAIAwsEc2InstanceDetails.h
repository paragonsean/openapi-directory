/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAwsEc2InstanceDetails.h
 *
 * Details of the Amazon EC2 instance involved in a finding.
 */

#ifndef OAIAwsEc2InstanceDetails_H
#define OAIAwsEc2InstanceDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAwsEc2InstanceDetails : public OAIObject {
public:
    OAIAwsEc2InstanceDetails();
    OAIAwsEc2InstanceDetails(QString json);
    ~OAIAwsEc2InstanceDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIamInstanceProfileArn() const;
    void setIamInstanceProfileArn(const QString &iam_instance_profile_arn);
    bool is_iam_instance_profile_arn_Set() const;
    bool is_iam_instance_profile_arn_Valid() const;

    QString getImageId() const;
    void setImageId(const QString &image_id);
    bool is_image_id_Set() const;
    bool is_image_id_Valid() const;

    QList getIpV4Addresses() const;
    void setIpV4Addresses(const QList &ip_v4_addresses);
    bool is_ip_v4_addresses_Set() const;
    bool is_ip_v4_addresses_Valid() const;

    QList getIpV6Addresses() const;
    void setIpV6Addresses(const QList &ip_v6_addresses);
    bool is_ip_v6_addresses_Set() const;
    bool is_ip_v6_addresses_Valid() const;

    QString getKeyName() const;
    void setKeyName(const QString &key_name);
    bool is_key_name_Set() const;
    bool is_key_name_Valid() const;

    QDateTime getLaunchedAt() const;
    void setLaunchedAt(const QDateTime &launched_at);
    bool is_launched_at_Set() const;
    bool is_launched_at_Valid() const;

    QString getPlatform() const;
    void setPlatform(const QString &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getSubnetId() const;
    void setSubnetId(const QString &subnet_id);
    bool is_subnet_id_Set() const;
    bool is_subnet_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVpcId() const;
    void setVpcId(const QString &vpc_id);
    bool is_vpc_id_Set() const;
    bool is_vpc_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_iam_instance_profile_arn;
    bool m_iam_instance_profile_arn_isSet;
    bool m_iam_instance_profile_arn_isValid;

    QString m_image_id;
    bool m_image_id_isSet;
    bool m_image_id_isValid;

    QList m_ip_v4_addresses;
    bool m_ip_v4_addresses_isSet;
    bool m_ip_v4_addresses_isValid;

    QList m_ip_v6_addresses;
    bool m_ip_v6_addresses_isSet;
    bool m_ip_v6_addresses_isValid;

    QString m_key_name;
    bool m_key_name_isSet;
    bool m_key_name_isValid;

    QDateTime m_launched_at;
    bool m_launched_at_isSet;
    bool m_launched_at_isValid;

    QString m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_subnet_id;
    bool m_subnet_id_isSet;
    bool m_subnet_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_vpc_id;
    bool m_vpc_id_isSet;
    bool m_vpc_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAwsEc2InstanceDetails)

#endif // OAIAwsEc2InstanceDetails_H
