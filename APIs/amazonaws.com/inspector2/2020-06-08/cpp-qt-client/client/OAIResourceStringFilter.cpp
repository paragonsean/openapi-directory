/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceStringFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceStringFilter::OAIResourceStringFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceStringFilter::OAIResourceStringFilter() {
    this->initializeModel();
}

OAIResourceStringFilter::~OAIResourceStringFilter() {}

void OAIResourceStringFilter::initializeModel() {

    m_comparison_isSet = false;
    m_comparison_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIResourceStringFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceStringFilter::fromJsonObject(QJsonObject json) {

    m_comparison_isValid = ::OpenAPI::fromJsonValue(m_comparison, json[QString("comparison")]);
    m_comparison_isSet = !json[QString("comparison")].isNull() && m_comparison_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIResourceStringFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceStringFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_comparison.isSet()) {
        obj.insert(QString("comparison"), ::OpenAPI::toJsonValue(m_comparison));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIResourceStringComparison OAIResourceStringFilter::getComparison() const {
    return m_comparison;
}
void OAIResourceStringFilter::setComparison(const OAIResourceStringComparison &comparison) {
    m_comparison = comparison;
    m_comparison_isSet = true;
}

bool OAIResourceStringFilter::is_comparison_Set() const{
    return m_comparison_isSet;
}

bool OAIResourceStringFilter::is_comparison_Valid() const{
    return m_comparison_isValid;
}

QString OAIResourceStringFilter::getValue() const {
    return m_value;
}
void OAIResourceStringFilter::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIResourceStringFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIResourceStringFilter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIResourceStringFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparison.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceStringFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comparison_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
