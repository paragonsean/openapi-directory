/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinding_codeVulnerabilityDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinding_codeVulnerabilityDetails::OAIFinding_codeVulnerabilityDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinding_codeVulnerabilityDetails::OAIFinding_codeVulnerabilityDetails() {
    this->initializeModel();
}

OAIFinding_codeVulnerabilityDetails::~OAIFinding_codeVulnerabilityDetails() {}

void OAIFinding_codeVulnerabilityDetails::initializeModel() {

    m_cwes_isSet = false;
    m_cwes_isValid = false;

    m_detector_id_isSet = false;
    m_detector_id_isValid = false;

    m_detector_name_isSet = false;
    m_detector_name_isValid = false;

    m_detector_tags_isSet = false;
    m_detector_tags_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_reference_urls_isSet = false;
    m_reference_urls_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_source_lambda_layer_arn_isSet = false;
    m_source_lambda_layer_arn_isValid = false;
}

void OAIFinding_codeVulnerabilityDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinding_codeVulnerabilityDetails::fromJsonObject(QJsonObject json) {

    m_cwes_isValid = ::OpenAPI::fromJsonValue(m_cwes, json[QString("cwes")]);
    m_cwes_isSet = !json[QString("cwes")].isNull() && m_cwes_isValid;

    m_detector_id_isValid = ::OpenAPI::fromJsonValue(m_detector_id, json[QString("detectorId")]);
    m_detector_id_isSet = !json[QString("detectorId")].isNull() && m_detector_id_isValid;

    m_detector_name_isValid = ::OpenAPI::fromJsonValue(m_detector_name, json[QString("detectorName")]);
    m_detector_name_isSet = !json[QString("detectorName")].isNull() && m_detector_name_isValid;

    m_detector_tags_isValid = ::OpenAPI::fromJsonValue(m_detector_tags, json[QString("detectorTags")]);
    m_detector_tags_isSet = !json[QString("detectorTags")].isNull() && m_detector_tags_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_reference_urls_isValid = ::OpenAPI::fromJsonValue(m_reference_urls, json[QString("referenceUrls")]);
    m_reference_urls_isSet = !json[QString("referenceUrls")].isNull() && m_reference_urls_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_source_lambda_layer_arn_isValid = ::OpenAPI::fromJsonValue(m_source_lambda_layer_arn, json[QString("sourceLambdaLayerArn")]);
    m_source_lambda_layer_arn_isSet = !json[QString("sourceLambdaLayerArn")].isNull() && m_source_lambda_layer_arn_isValid;
}

QString OAIFinding_codeVulnerabilityDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinding_codeVulnerabilityDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_cwes.isSet()) {
        obj.insert(QString("cwes"), ::OpenAPI::toJsonValue(m_cwes));
    }
    if (m_detector_id_isSet) {
        obj.insert(QString("detectorId"), ::OpenAPI::toJsonValue(m_detector_id));
    }
    if (m_detector_name_isSet) {
        obj.insert(QString("detectorName"), ::OpenAPI::toJsonValue(m_detector_name));
    }
    if (m_detector_tags.isSet()) {
        obj.insert(QString("detectorTags"), ::OpenAPI::toJsonValue(m_detector_tags));
    }
    if (m_file_path.isSet()) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_reference_urls.isSet()) {
        obj.insert(QString("referenceUrls"), ::OpenAPI::toJsonValue(m_reference_urls));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_source_lambda_layer_arn_isSet) {
        obj.insert(QString("sourceLambdaLayerArn"), ::OpenAPI::toJsonValue(m_source_lambda_layer_arn));
    }
    return obj;
}

QList OAIFinding_codeVulnerabilityDetails::getCwes() const {
    return m_cwes;
}
void OAIFinding_codeVulnerabilityDetails::setCwes(const QList &cwes) {
    m_cwes = cwes;
    m_cwes_isSet = true;
}

bool OAIFinding_codeVulnerabilityDetails::is_cwes_Set() const{
    return m_cwes_isSet;
}

bool OAIFinding_codeVulnerabilityDetails::is_cwes_Valid() const{
    return m_cwes_isValid;
}

QString OAIFinding_codeVulnerabilityDetails::getDetectorId() const {
    return m_detector_id;
}
void OAIFinding_codeVulnerabilityDetails::setDetectorId(const QString &detector_id) {
    m_detector_id = detector_id;
    m_detector_id_isSet = true;
}

bool OAIFinding_codeVulnerabilityDetails::is_detector_id_Set() const{
    return m_detector_id_isSet;
}

bool OAIFinding_codeVulnerabilityDetails::is_detector_id_Valid() const{
    return m_detector_id_isValid;
}

QString OAIFinding_codeVulnerabilityDetails::getDetectorName() const {
    return m_detector_name;
}
void OAIFinding_codeVulnerabilityDetails::setDetectorName(const QString &detector_name) {
    m_detector_name = detector_name;
    m_detector_name_isSet = true;
}

bool OAIFinding_codeVulnerabilityDetails::is_detector_name_Set() const{
    return m_detector_name_isSet;
}

bool OAIFinding_codeVulnerabilityDetails::is_detector_name_Valid() const{
    return m_detector_name_isValid;
}

QList OAIFinding_codeVulnerabilityDetails::getDetectorTags() const {
    return m_detector_tags;
}
void OAIFinding_codeVulnerabilityDetails::setDetectorTags(const QList &detector_tags) {
    m_detector_tags = detector_tags;
    m_detector_tags_isSet = true;
}

bool OAIFinding_codeVulnerabilityDetails::is_detector_tags_Set() const{
    return m_detector_tags_isSet;
}

bool OAIFinding_codeVulnerabilityDetails::is_detector_tags_Valid() const{
    return m_detector_tags_isValid;
}

OAICodeVulnerabilityDetails_filePath OAIFinding_codeVulnerabilityDetails::getFilePath() const {
    return m_file_path;
}
void OAIFinding_codeVulnerabilityDetails::setFilePath(const OAICodeVulnerabilityDetails_filePath &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIFinding_codeVulnerabilityDetails::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIFinding_codeVulnerabilityDetails::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QList OAIFinding_codeVulnerabilityDetails::getReferenceUrls() const {
    return m_reference_urls;
}
void OAIFinding_codeVulnerabilityDetails::setReferenceUrls(const QList &reference_urls) {
    m_reference_urls = reference_urls;
    m_reference_urls_isSet = true;
}

bool OAIFinding_codeVulnerabilityDetails::is_reference_urls_Set() const{
    return m_reference_urls_isSet;
}

bool OAIFinding_codeVulnerabilityDetails::is_reference_urls_Valid() const{
    return m_reference_urls_isValid;
}

QString OAIFinding_codeVulnerabilityDetails::getRuleId() const {
    return m_rule_id;
}
void OAIFinding_codeVulnerabilityDetails::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIFinding_codeVulnerabilityDetails::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIFinding_codeVulnerabilityDetails::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIFinding_codeVulnerabilityDetails::getSourceLambdaLayerArn() const {
    return m_source_lambda_layer_arn;
}
void OAIFinding_codeVulnerabilityDetails::setSourceLambdaLayerArn(const QString &source_lambda_layer_arn) {
    m_source_lambda_layer_arn = source_lambda_layer_arn;
    m_source_lambda_layer_arn_isSet = true;
}

bool OAIFinding_codeVulnerabilityDetails::is_source_lambda_layer_arn_Set() const{
    return m_source_lambda_layer_arn_isSet;
}

bool OAIFinding_codeVulnerabilityDetails::is_source_lambda_layer_arn_Valid() const{
    return m_source_lambda_layer_arn_isValid;
}

bool OAIFinding_codeVulnerabilityDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cwes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_lambda_layer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinding_codeVulnerabilityDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cwes_isValid && m_detector_id_isValid && m_detector_name_isValid && m_file_path_isValid && true;
}

} // namespace OpenAPI
