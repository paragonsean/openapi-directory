/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationResponse_lambdaLayerAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationResponse_lambdaLayerAggregation::OAIAggregationResponse_lambdaLayerAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationResponse_lambdaLayerAggregation::OAIAggregationResponse_lambdaLayerAggregation() {
    this->initializeModel();
}

OAIAggregationResponse_lambdaLayerAggregation::~OAIAggregationResponse_lambdaLayerAggregation() {}

void OAIAggregationResponse_lambdaLayerAggregation::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_function_name_isSet = false;
    m_function_name_isValid = false;

    m_layer_arn_isSet = false;
    m_layer_arn_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_severity_counts_isSet = false;
    m_severity_counts_isValid = false;
}

void OAIAggregationResponse_lambdaLayerAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationResponse_lambdaLayerAggregation::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("functionName")]);
    m_function_name_isSet = !json[QString("functionName")].isNull() && m_function_name_isValid;

    m_layer_arn_isValid = ::OpenAPI::fromJsonValue(m_layer_arn, json[QString("layerArn")]);
    m_layer_arn_isSet = !json[QString("layerArn")].isNull() && m_layer_arn_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_severity_counts_isValid = ::OpenAPI::fromJsonValue(m_severity_counts, json[QString("severityCounts")]);
    m_severity_counts_isSet = !json[QString("severityCounts")].isNull() && m_severity_counts_isValid;
}

QString OAIAggregationResponse_lambdaLayerAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationResponse_lambdaLayerAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_function_name_isSet) {
        obj.insert(QString("functionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    if (m_layer_arn_isSet) {
        obj.insert(QString("layerArn"), ::OpenAPI::toJsonValue(m_layer_arn));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_severity_counts.isSet()) {
        obj.insert(QString("severityCounts"), ::OpenAPI::toJsonValue(m_severity_counts));
    }
    return obj;
}

QString OAIAggregationResponse_lambdaLayerAggregation::getAccountId() const {
    return m_account_id;
}
void OAIAggregationResponse_lambdaLayerAggregation::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAggregationResponse_lambdaLayerAggregation::getFunctionName() const {
    return m_function_name;
}
void OAIAggregationResponse_lambdaLayerAggregation::setFunctionName(const QString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_function_name_Valid() const{
    return m_function_name_isValid;
}

QString OAIAggregationResponse_lambdaLayerAggregation::getLayerArn() const {
    return m_layer_arn;
}
void OAIAggregationResponse_lambdaLayerAggregation::setLayerArn(const QString &layer_arn) {
    m_layer_arn = layer_arn;
    m_layer_arn_isSet = true;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_layer_arn_Set() const{
    return m_layer_arn_isSet;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_layer_arn_Valid() const{
    return m_layer_arn_isValid;
}

QString OAIAggregationResponse_lambdaLayerAggregation::getResourceId() const {
    return m_resource_id;
}
void OAIAggregationResponse_lambdaLayerAggregation::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAISeverityCounts OAIAggregationResponse_lambdaLayerAggregation::getSeverityCounts() const {
    return m_severity_counts;
}
void OAIAggregationResponse_lambdaLayerAggregation::setSeverityCounts(const OAISeverityCounts &severity_counts) {
    m_severity_counts = severity_counts;
    m_severity_counts_isSet = true;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_severity_counts_Set() const{
    return m_severity_counts_isSet;
}

bool OAIAggregationResponse_lambdaLayerAggregation::is_severity_counts_Valid() const{
    return m_severity_counts_isValid;
}

bool OAIAggregationResponse_lambdaLayerAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationResponse_lambdaLayerAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_function_name_isValid && m_layer_arn_isValid && m_resource_id_isValid && true;
}

} // namespace OpenAPI
