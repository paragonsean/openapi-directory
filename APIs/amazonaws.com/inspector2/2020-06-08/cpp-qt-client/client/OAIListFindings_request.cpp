/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFindings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFindings_request::OAIListFindings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFindings_request::OAIListFindings_request() {
    this->initializeModel();
}

OAIListFindings_request::~OAIListFindings_request() {}

void OAIListFindings_request::initializeModel() {

    m_filter_criteria_isSet = false;
    m_filter_criteria_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_sort_criteria_isSet = false;
    m_sort_criteria_isValid = false;
}

void OAIListFindings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFindings_request::fromJsonObject(QJsonObject json) {

    m_filter_criteria_isValid = ::OpenAPI::fromJsonValue(m_filter_criteria, json[QString("filterCriteria")]);
    m_filter_criteria_isSet = !json[QString("filterCriteria")].isNull() && m_filter_criteria_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_sort_criteria_isValid = ::OpenAPI::fromJsonValue(m_sort_criteria, json[QString("sortCriteria")]);
    m_sort_criteria_isSet = !json[QString("sortCriteria")].isNull() && m_sort_criteria_isValid;
}

QString OAIListFindings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFindings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_criteria.isSet()) {
        obj.insert(QString("filterCriteria"), ::OpenAPI::toJsonValue(m_filter_criteria));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_sort_criteria.isSet()) {
        obj.insert(QString("sortCriteria"), ::OpenAPI::toJsonValue(m_sort_criteria));
    }
    return obj;
}

OAICreateFilter_request_filterCriteria OAIListFindings_request::getFilterCriteria() const {
    return m_filter_criteria;
}
void OAIListFindings_request::setFilterCriteria(const OAICreateFilter_request_filterCriteria &filter_criteria) {
    m_filter_criteria = filter_criteria;
    m_filter_criteria_isSet = true;
}

bool OAIListFindings_request::is_filter_criteria_Set() const{
    return m_filter_criteria_isSet;
}

bool OAIListFindings_request::is_filter_criteria_Valid() const{
    return m_filter_criteria_isValid;
}

qint32 OAIListFindings_request::getMaxResults() const {
    return m_max_results;
}
void OAIListFindings_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListFindings_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListFindings_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListFindings_request::getNextToken() const {
    return m_next_token;
}
void OAIListFindings_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListFindings_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListFindings_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIListFindings_request_sortCriteria OAIListFindings_request::getSortCriteria() const {
    return m_sort_criteria;
}
void OAIListFindings_request::setSortCriteria(const OAIListFindings_request_sortCriteria &sort_criteria) {
    m_sort_criteria = sort_criteria;
    m_sort_criteria_isSet = true;
}

bool OAIListFindings_request::is_sort_criteria_Set() const{
    return m_sort_criteria_isSet;
}

bool OAIListFindings_request::is_sort_criteria_Valid() const{
    return m_sort_criteria_isValid;
}

bool OAIListFindings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFindings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
