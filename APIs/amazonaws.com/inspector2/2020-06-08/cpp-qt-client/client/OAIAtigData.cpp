/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAtigData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAtigData::OAIAtigData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAtigData::OAIAtigData() {
    this->initializeModel();
}

OAIAtigData::~OAIAtigData() {}

void OAIAtigData::initializeModel() {

    m_first_seen_isSet = false;
    m_first_seen_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_ttps_isSet = false;
    m_ttps_isValid = false;
}

void OAIAtigData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAtigData::fromJsonObject(QJsonObject json) {

    m_first_seen_isValid = ::OpenAPI::fromJsonValue(m_first_seen, json[QString("firstSeen")]);
    m_first_seen_isSet = !json[QString("firstSeen")].isNull() && m_first_seen_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("lastSeen")]);
    m_last_seen_isSet = !json[QString("lastSeen")].isNull() && m_last_seen_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_ttps_isValid = ::OpenAPI::fromJsonValue(m_ttps, json[QString("ttps")]);
    m_ttps_isSet = !json[QString("ttps")].isNull() && m_ttps_isValid;
}

QString OAIAtigData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAtigData::asJsonObject() const {
    QJsonObject obj;
    if (m_first_seen_isSet) {
        obj.insert(QString("firstSeen"), ::OpenAPI::toJsonValue(m_first_seen));
    }
    if (m_last_seen_isSet) {
        obj.insert(QString("lastSeen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_ttps.isSet()) {
        obj.insert(QString("ttps"), ::OpenAPI::toJsonValue(m_ttps));
    }
    return obj;
}

QDateTime OAIAtigData::getFirstSeen() const {
    return m_first_seen;
}
void OAIAtigData::setFirstSeen(const QDateTime &first_seen) {
    m_first_seen = first_seen;
    m_first_seen_isSet = true;
}

bool OAIAtigData::is_first_seen_Set() const{
    return m_first_seen_isSet;
}

bool OAIAtigData::is_first_seen_Valid() const{
    return m_first_seen_isValid;
}

QDateTime OAIAtigData::getLastSeen() const {
    return m_last_seen;
}
void OAIAtigData::setLastSeen(const QDateTime &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAIAtigData::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAIAtigData::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

QList OAIAtigData::getTargets() const {
    return m_targets;
}
void OAIAtigData::setTargets(const QList &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIAtigData::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIAtigData::is_targets_Valid() const{
    return m_targets_isValid;
}

QList OAIAtigData::getTtps() const {
    return m_ttps;
}
void OAIAtigData::setTtps(const QList &ttps) {
    m_ttps = ttps;
    m_ttps_isSet = true;
}

bool OAIAtigData::is_ttps_Set() const{
    return m_ttps_isSet;
}

bool OAIAtigData::is_ttps_Valid() const{
    return m_ttps_isValid;
}

bool OAIAtigData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAtigData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
