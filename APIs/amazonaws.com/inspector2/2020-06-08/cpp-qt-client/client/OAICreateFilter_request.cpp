/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFilter_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFilter_request::OAICreateFilter_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFilter_request::OAICreateFilter_request() {
    this->initializeModel();
}

OAICreateFilter_request::~OAICreateFilter_request() {}

void OAICreateFilter_request::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_filter_criteria_isSet = false;
    m_filter_criteria_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateFilter_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFilter_request::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_filter_criteria_isValid = ::OpenAPI::fromJsonValue(m_filter_criteria, json[QString("filterCriteria")]);
    m_filter_criteria_isSet = !json[QString("filterCriteria")].isNull() && m_filter_criteria_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateFilter_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFilter_request::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_filter_criteria.isSet()) {
        obj.insert(QString("filterCriteria"), ::OpenAPI::toJsonValue(m_filter_criteria));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateFilter_request::getAction() const {
    return m_action;
}
void OAICreateFilter_request::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICreateFilter_request::is_action_Set() const{
    return m_action_isSet;
}

bool OAICreateFilter_request::is_action_Valid() const{
    return m_action_isValid;
}

QString OAICreateFilter_request::getDescription() const {
    return m_description;
}
void OAICreateFilter_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateFilter_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateFilter_request::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateFilter_request_filterCriteria OAICreateFilter_request::getFilterCriteria() const {
    return m_filter_criteria;
}
void OAICreateFilter_request::setFilterCriteria(const OAICreateFilter_request_filterCriteria &filter_criteria) {
    m_filter_criteria = filter_criteria;
    m_filter_criteria_isSet = true;
}

bool OAICreateFilter_request::is_filter_criteria_Set() const{
    return m_filter_criteria_isSet;
}

bool OAICreateFilter_request::is_filter_criteria_Valid() const{
    return m_filter_criteria_isValid;
}

QString OAICreateFilter_request::getName() const {
    return m_name;
}
void OAICreateFilter_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFilter_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFilter_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateFilter_request::getReason() const {
    return m_reason;
}
void OAICreateFilter_request::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAICreateFilter_request::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAICreateFilter_request::is_reason_Valid() const{
    return m_reason_isValid;
}

QMap<QString, QString> OAICreateFilter_request::getTags() const {
    return m_tags;
}
void OAICreateFilter_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFilter_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFilter_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateFilter_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFilter_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_filter_criteria_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
