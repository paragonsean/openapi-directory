/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter::OAIFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter::OAIFilter() {
    this->initializeModel();
}

OAIFilter::~OAIFilter() {}

void OAIFilter::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_criteria.isSet()) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIFilterAction OAIFilter::getAction() const {
    return m_action;
}
void OAIFilter::setAction(const OAIFilterAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIFilter::is_action_Set() const{
    return m_action_isSet;
}

bool OAIFilter::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIFilter::getArn() const {
    return m_arn;
}
void OAIFilter::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIFilter::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIFilter::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIFilter::getCreatedAt() const {
    return m_created_at;
}
void OAIFilter::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFilter::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFilter::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIFilter_criteria OAIFilter::getCriteria() const {
    return m_criteria;
}
void OAIFilter::setCriteria(const OAIFilter_criteria &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAIFilter::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAIFilter::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QString OAIFilter::getDescription() const {
    return m_description;
}
void OAIFilter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFilter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFilter::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFilter::getName() const {
    return m_name;
}
void OAIFilter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFilter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFilter::getOwnerId() const {
    return m_owner_id;
}
void OAIFilter::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIFilter::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIFilter::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAIFilter::getReason() const {
    return m_reason;
}
void OAIFilter::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIFilter::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIFilter::is_reason_Valid() const{
    return m_reason_isValid;
}

QMap OAIFilter::getTags() const {
    return m_tags;
}
void OAIFilter::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFilter::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFilter::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIFilter::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFilter::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFilter::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFilter::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_arn_isValid && m_created_at_isValid && m_criteria_isValid && m_name_isValid && m_owner_id_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
