/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerablePackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerablePackage::OAIVulnerablePackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerablePackage::OAIVulnerablePackage() {
    this->initializeModel();
}

OAIVulnerablePackage::~OAIVulnerablePackage() {}

void OAIVulnerablePackage::initializeModel() {

    m_arch_isSet = false;
    m_arch_isValid = false;

    m_epoch_isSet = false;
    m_epoch_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_fixed_in_version_isSet = false;
    m_fixed_in_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_manager_isSet = false;
    m_package_manager_isValid = false;

    m_release_isSet = false;
    m_release_isValid = false;

    m_remediation_isSet = false;
    m_remediation_isValid = false;

    m_source_lambda_layer_arn_isSet = false;
    m_source_lambda_layer_arn_isValid = false;

    m_source_layer_hash_isSet = false;
    m_source_layer_hash_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVulnerablePackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerablePackage::fromJsonObject(QJsonObject json) {

    m_arch_isValid = ::OpenAPI::fromJsonValue(m_arch, json[QString("arch")]);
    m_arch_isSet = !json[QString("arch")].isNull() && m_arch_isValid;

    m_epoch_isValid = ::OpenAPI::fromJsonValue(m_epoch, json[QString("epoch")]);
    m_epoch_isSet = !json[QString("epoch")].isNull() && m_epoch_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_fixed_in_version_isValid = ::OpenAPI::fromJsonValue(m_fixed_in_version, json[QString("fixedInVersion")]);
    m_fixed_in_version_isSet = !json[QString("fixedInVersion")].isNull() && m_fixed_in_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_manager_isValid = ::OpenAPI::fromJsonValue(m_package_manager, json[QString("packageManager")]);
    m_package_manager_isSet = !json[QString("packageManager")].isNull() && m_package_manager_isValid;

    m_release_isValid = ::OpenAPI::fromJsonValue(m_release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;

    m_remediation_isValid = ::OpenAPI::fromJsonValue(m_remediation, json[QString("remediation")]);
    m_remediation_isSet = !json[QString("remediation")].isNull() && m_remediation_isValid;

    m_source_lambda_layer_arn_isValid = ::OpenAPI::fromJsonValue(m_source_lambda_layer_arn, json[QString("sourceLambdaLayerArn")]);
    m_source_lambda_layer_arn_isSet = !json[QString("sourceLambdaLayerArn")].isNull() && m_source_lambda_layer_arn_isValid;

    m_source_layer_hash_isValid = ::OpenAPI::fromJsonValue(m_source_layer_hash, json[QString("sourceLayerHash")]);
    m_source_layer_hash_isSet = !json[QString("sourceLayerHash")].isNull() && m_source_layer_hash_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVulnerablePackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerablePackage::asJsonObject() const {
    QJsonObject obj;
    if (m_arch_isSet) {
        obj.insert(QString("arch"), ::OpenAPI::toJsonValue(m_arch));
    }
    if (m_epoch_isSet) {
        obj.insert(QString("epoch"), ::OpenAPI::toJsonValue(m_epoch));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_fixed_in_version_isSet) {
        obj.insert(QString("fixedInVersion"), ::OpenAPI::toJsonValue(m_fixed_in_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_manager.isSet()) {
        obj.insert(QString("packageManager"), ::OpenAPI::toJsonValue(m_package_manager));
    }
    if (m_release_isSet) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(m_release));
    }
    if (m_remediation_isSet) {
        obj.insert(QString("remediation"), ::OpenAPI::toJsonValue(m_remediation));
    }
    if (m_source_lambda_layer_arn_isSet) {
        obj.insert(QString("sourceLambdaLayerArn"), ::OpenAPI::toJsonValue(m_source_lambda_layer_arn));
    }
    if (m_source_layer_hash_isSet) {
        obj.insert(QString("sourceLayerHash"), ::OpenAPI::toJsonValue(m_source_layer_hash));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIVulnerablePackage::getArch() const {
    return m_arch;
}
void OAIVulnerablePackage::setArch(const QString &arch) {
    m_arch = arch;
    m_arch_isSet = true;
}

bool OAIVulnerablePackage::is_arch_Set() const{
    return m_arch_isSet;
}

bool OAIVulnerablePackage::is_arch_Valid() const{
    return m_arch_isValid;
}

qint32 OAIVulnerablePackage::getEpoch() const {
    return m_epoch;
}
void OAIVulnerablePackage::setEpoch(const qint32 &epoch) {
    m_epoch = epoch;
    m_epoch_isSet = true;
}

bool OAIVulnerablePackage::is_epoch_Set() const{
    return m_epoch_isSet;
}

bool OAIVulnerablePackage::is_epoch_Valid() const{
    return m_epoch_isValid;
}

QString OAIVulnerablePackage::getFilePath() const {
    return m_file_path;
}
void OAIVulnerablePackage::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIVulnerablePackage::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIVulnerablePackage::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIVulnerablePackage::getFixedInVersion() const {
    return m_fixed_in_version;
}
void OAIVulnerablePackage::setFixedInVersion(const QString &fixed_in_version) {
    m_fixed_in_version = fixed_in_version;
    m_fixed_in_version_isSet = true;
}

bool OAIVulnerablePackage::is_fixed_in_version_Set() const{
    return m_fixed_in_version_isSet;
}

bool OAIVulnerablePackage::is_fixed_in_version_Valid() const{
    return m_fixed_in_version_isValid;
}

QString OAIVulnerablePackage::getName() const {
    return m_name;
}
void OAIVulnerablePackage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVulnerablePackage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVulnerablePackage::is_name_Valid() const{
    return m_name_isValid;
}

OAIPackageManager OAIVulnerablePackage::getPackageManager() const {
    return m_package_manager;
}
void OAIVulnerablePackage::setPackageManager(const OAIPackageManager &package_manager) {
    m_package_manager = package_manager;
    m_package_manager_isSet = true;
}

bool OAIVulnerablePackage::is_package_manager_Set() const{
    return m_package_manager_isSet;
}

bool OAIVulnerablePackage::is_package_manager_Valid() const{
    return m_package_manager_isValid;
}

QString OAIVulnerablePackage::getRelease() const {
    return m_release;
}
void OAIVulnerablePackage::setRelease(const QString &release) {
    m_release = release;
    m_release_isSet = true;
}

bool OAIVulnerablePackage::is_release_Set() const{
    return m_release_isSet;
}

bool OAIVulnerablePackage::is_release_Valid() const{
    return m_release_isValid;
}

QString OAIVulnerablePackage::getRemediation() const {
    return m_remediation;
}
void OAIVulnerablePackage::setRemediation(const QString &remediation) {
    m_remediation = remediation;
    m_remediation_isSet = true;
}

bool OAIVulnerablePackage::is_remediation_Set() const{
    return m_remediation_isSet;
}

bool OAIVulnerablePackage::is_remediation_Valid() const{
    return m_remediation_isValid;
}

QString OAIVulnerablePackage::getSourceLambdaLayerArn() const {
    return m_source_lambda_layer_arn;
}
void OAIVulnerablePackage::setSourceLambdaLayerArn(const QString &source_lambda_layer_arn) {
    m_source_lambda_layer_arn = source_lambda_layer_arn;
    m_source_lambda_layer_arn_isSet = true;
}

bool OAIVulnerablePackage::is_source_lambda_layer_arn_Set() const{
    return m_source_lambda_layer_arn_isSet;
}

bool OAIVulnerablePackage::is_source_lambda_layer_arn_Valid() const{
    return m_source_lambda_layer_arn_isValid;
}

QString OAIVulnerablePackage::getSourceLayerHash() const {
    return m_source_layer_hash;
}
void OAIVulnerablePackage::setSourceLayerHash(const QString &source_layer_hash) {
    m_source_layer_hash = source_layer_hash;
    m_source_layer_hash_isSet = true;
}

bool OAIVulnerablePackage::is_source_layer_hash_Set() const{
    return m_source_layer_hash_isSet;
}

bool OAIVulnerablePackage::is_source_layer_hash_Valid() const{
    return m_source_layer_hash_isValid;
}

QString OAIVulnerablePackage::getVersion() const {
    return m_version;
}
void OAIVulnerablePackage::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVulnerablePackage::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVulnerablePackage::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVulnerablePackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epoch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_in_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_lambda_layer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_layer_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerablePackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
