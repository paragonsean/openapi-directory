/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepositoryAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepositoryAggregation::OAIRepositoryAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepositoryAggregation::OAIRepositoryAggregation() {
    this->initializeModel();
}

OAIRepositoryAggregation::~OAIRepositoryAggregation() {}

void OAIRepositoryAggregation::initializeModel() {

    m_repositories_isSet = false;
    m_repositories_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIRepositoryAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepositoryAggregation::fromJsonObject(QJsonObject json) {

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIRepositoryAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepositoryAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_repositories.isSet()) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QList OAIRepositoryAggregation::getRepositories() const {
    return m_repositories;
}
void OAIRepositoryAggregation::setRepositories(const QList &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIRepositoryAggregation::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIRepositoryAggregation::is_repositories_Valid() const{
    return m_repositories_isValid;
}

OAIRepositorySortBy OAIRepositoryAggregation::getSortBy() const {
    return m_sort_by;
}
void OAIRepositoryAggregation::setSortBy(const OAIRepositorySortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIRepositoryAggregation::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIRepositoryAggregation::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIRepositoryAggregation::getSortOrder() const {
    return m_sort_order;
}
void OAIRepositoryAggregation::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIRepositoryAggregation::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIRepositoryAggregation::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIRepositoryAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repositories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepositoryAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
