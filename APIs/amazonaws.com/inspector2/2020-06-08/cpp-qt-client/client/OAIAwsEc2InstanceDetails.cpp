/**
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAwsEc2InstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAwsEc2InstanceDetails::OAIAwsEc2InstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAwsEc2InstanceDetails::OAIAwsEc2InstanceDetails() {
    this->initializeModel();
}

OAIAwsEc2InstanceDetails::~OAIAwsEc2InstanceDetails() {}

void OAIAwsEc2InstanceDetails::initializeModel() {

    m_iam_instance_profile_arn_isSet = false;
    m_iam_instance_profile_arn_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_ip_v4_addresses_isSet = false;
    m_ip_v4_addresses_isValid = false;

    m_ip_v6_addresses_isSet = false;
    m_ip_v6_addresses_isValid = false;

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_launched_at_isSet = false;
    m_launched_at_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAIAwsEc2InstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAwsEc2InstanceDetails::fromJsonObject(QJsonObject json) {

    m_iam_instance_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_instance_profile_arn, json[QString("iamInstanceProfileArn")]);
    m_iam_instance_profile_arn_isSet = !json[QString("iamInstanceProfileArn")].isNull() && m_iam_instance_profile_arn_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_ip_v4_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_v4_addresses, json[QString("ipV4Addresses")]);
    m_ip_v4_addresses_isSet = !json[QString("ipV4Addresses")].isNull() && m_ip_v4_addresses_isValid;

    m_ip_v6_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_v6_addresses, json[QString("ipV6Addresses")]);
    m_ip_v6_addresses_isSet = !json[QString("ipV6Addresses")].isNull() && m_ip_v6_addresses_isValid;

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_launched_at_isValid = ::OpenAPI::fromJsonValue(m_launched_at, json[QString("launchedAt")]);
    m_launched_at_isSet = !json[QString("launchedAt")].isNull() && m_launched_at_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("vpcId")]);
    m_vpc_id_isSet = !json[QString("vpcId")].isNull() && m_vpc_id_isValid;
}

QString OAIAwsEc2InstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAwsEc2InstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_iam_instance_profile_arn_isSet) {
        obj.insert(QString("iamInstanceProfileArn"), ::OpenAPI::toJsonValue(m_iam_instance_profile_arn));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_ip_v4_addresses.isSet()) {
        obj.insert(QString("ipV4Addresses"), ::OpenAPI::toJsonValue(m_ip_v4_addresses));
    }
    if (m_ip_v6_addresses.isSet()) {
        obj.insert(QString("ipV6Addresses"), ::OpenAPI::toJsonValue(m_ip_v6_addresses));
    }
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_launched_at_isSet) {
        obj.insert(QString("launchedAt"), ::OpenAPI::toJsonValue(m_launched_at));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("vpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

QString OAIAwsEc2InstanceDetails::getIamInstanceProfileArn() const {
    return m_iam_instance_profile_arn;
}
void OAIAwsEc2InstanceDetails::setIamInstanceProfileArn(const QString &iam_instance_profile_arn) {
    m_iam_instance_profile_arn = iam_instance_profile_arn;
    m_iam_instance_profile_arn_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_iam_instance_profile_arn_Set() const{
    return m_iam_instance_profile_arn_isSet;
}

bool OAIAwsEc2InstanceDetails::is_iam_instance_profile_arn_Valid() const{
    return m_iam_instance_profile_arn_isValid;
}

QString OAIAwsEc2InstanceDetails::getImageId() const {
    return m_image_id;
}
void OAIAwsEc2InstanceDetails::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIAwsEc2InstanceDetails::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QList OAIAwsEc2InstanceDetails::getIpV4Addresses() const {
    return m_ip_v4_addresses;
}
void OAIAwsEc2InstanceDetails::setIpV4Addresses(const QList &ip_v4_addresses) {
    m_ip_v4_addresses = ip_v4_addresses;
    m_ip_v4_addresses_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_ip_v4_addresses_Set() const{
    return m_ip_v4_addresses_isSet;
}

bool OAIAwsEc2InstanceDetails::is_ip_v4_addresses_Valid() const{
    return m_ip_v4_addresses_isValid;
}

QList OAIAwsEc2InstanceDetails::getIpV6Addresses() const {
    return m_ip_v6_addresses;
}
void OAIAwsEc2InstanceDetails::setIpV6Addresses(const QList &ip_v6_addresses) {
    m_ip_v6_addresses = ip_v6_addresses;
    m_ip_v6_addresses_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_ip_v6_addresses_Set() const{
    return m_ip_v6_addresses_isSet;
}

bool OAIAwsEc2InstanceDetails::is_ip_v6_addresses_Valid() const{
    return m_ip_v6_addresses_isValid;
}

QString OAIAwsEc2InstanceDetails::getKeyName() const {
    return m_key_name;
}
void OAIAwsEc2InstanceDetails::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAIAwsEc2InstanceDetails::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QDateTime OAIAwsEc2InstanceDetails::getLaunchedAt() const {
    return m_launched_at;
}
void OAIAwsEc2InstanceDetails::setLaunchedAt(const QDateTime &launched_at) {
    m_launched_at = launched_at;
    m_launched_at_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_launched_at_Set() const{
    return m_launched_at_isSet;
}

bool OAIAwsEc2InstanceDetails::is_launched_at_Valid() const{
    return m_launched_at_isValid;
}

QString OAIAwsEc2InstanceDetails::getPlatform() const {
    return m_platform;
}
void OAIAwsEc2InstanceDetails::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIAwsEc2InstanceDetails::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIAwsEc2InstanceDetails::getSubnetId() const {
    return m_subnet_id;
}
void OAIAwsEc2InstanceDetails::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIAwsEc2InstanceDetails::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAIAwsEc2InstanceDetails::getType() const {
    return m_type;
}
void OAIAwsEc2InstanceDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAwsEc2InstanceDetails::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAwsEc2InstanceDetails::getVpcId() const {
    return m_vpc_id;
}
void OAIAwsEc2InstanceDetails::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIAwsEc2InstanceDetails::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIAwsEc2InstanceDetails::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAIAwsEc2InstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iam_instance_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_v4_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_v6_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launched_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAwsEc2InstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
