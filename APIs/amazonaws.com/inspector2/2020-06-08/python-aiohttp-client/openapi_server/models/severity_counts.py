# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SeverityCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all: int=None, critical: int=None, high: int=None, medium: int=None):
        """SeverityCounts - a model defined in OpenAPI

        :param all: The all of this SeverityCounts.
        :param critical: The critical of this SeverityCounts.
        :param high: The high of this SeverityCounts.
        :param medium: The medium of this SeverityCounts.
        """
        self.openapi_types = {
            'all': int,
            'critical': int,
            'high': int,
            'medium': int
        }

        self.attribute_map = {
            'all': 'all',
            'critical': 'critical',
            'high': 'high',
            'medium': 'medium'
        }

        self._all = all
        self._critical = critical
        self._high = high
        self._medium = medium

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeverityCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeverityCounts of this SeverityCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self):
        """Gets the all of this SeverityCounts.


        :return: The all of this SeverityCounts.
        :rtype: int
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this SeverityCounts.


        :param all: The all of this SeverityCounts.
        :type all: int
        """

        self._all = all

    @property
    def critical(self):
        """Gets the critical of this SeverityCounts.


        :return: The critical of this SeverityCounts.
        :rtype: int
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this SeverityCounts.


        :param critical: The critical of this SeverityCounts.
        :type critical: int
        """

        self._critical = critical

    @property
    def high(self):
        """Gets the high of this SeverityCounts.


        :return: The high of this SeverityCounts.
        :rtype: int
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this SeverityCounts.


        :param high: The high of this SeverityCounts.
        :type high: int
        """

        self._high = high

    @property
    def medium(self):
        """Gets the medium of this SeverityCounts.


        :return: The medium of this SeverityCounts.
        :rtype: int
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this SeverityCounts.


        :param medium: The medium of this SeverityCounts.
        :type medium: int
        """

        self._medium = medium
