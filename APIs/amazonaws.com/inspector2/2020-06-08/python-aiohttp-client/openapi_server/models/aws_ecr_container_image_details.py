# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AwsEcrContainerImageDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, author: str=None, image_hash: str=None, image_tags: List=None, platform: str=None, pushed_at: datetime=None, registry: str=None, repository_name: str=None):
        """AwsEcrContainerImageDetails - a model defined in OpenAPI

        :param architecture: The architecture of this AwsEcrContainerImageDetails.
        :param author: The author of this AwsEcrContainerImageDetails.
        :param image_hash: The image_hash of this AwsEcrContainerImageDetails.
        :param image_tags: The image_tags of this AwsEcrContainerImageDetails.
        :param platform: The platform of this AwsEcrContainerImageDetails.
        :param pushed_at: The pushed_at of this AwsEcrContainerImageDetails.
        :param registry: The registry of this AwsEcrContainerImageDetails.
        :param repository_name: The repository_name of this AwsEcrContainerImageDetails.
        """
        self.openapi_types = {
            'architecture': str,
            'author': str,
            'image_hash': str,
            'image_tags': List,
            'platform': str,
            'pushed_at': datetime,
            'registry': str,
            'repository_name': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'author': 'author',
            'image_hash': 'imageHash',
            'image_tags': 'imageTags',
            'platform': 'platform',
            'pushed_at': 'pushedAt',
            'registry': 'registry',
            'repository_name': 'repositoryName'
        }

        self._architecture = architecture
        self._author = author
        self._image_hash = image_hash
        self._image_tags = image_tags
        self._platform = platform
        self._pushed_at = pushed_at
        self._registry = registry
        self._repository_name = repository_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsEcrContainerImageDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AwsEcrContainerImageDetails of this AwsEcrContainerImageDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this AwsEcrContainerImageDetails.


        :return: The architecture of this AwsEcrContainerImageDetails.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this AwsEcrContainerImageDetails.


        :param architecture: The architecture of this AwsEcrContainerImageDetails.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def author(self):
        """Gets the author of this AwsEcrContainerImageDetails.


        :return: The author of this AwsEcrContainerImageDetails.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this AwsEcrContainerImageDetails.


        :param author: The author of this AwsEcrContainerImageDetails.
        :type author: str
        """

        self._author = author

    @property
    def image_hash(self):
        """Gets the image_hash of this AwsEcrContainerImageDetails.


        :return: The image_hash of this AwsEcrContainerImageDetails.
        :rtype: str
        """
        return self._image_hash

    @image_hash.setter
    def image_hash(self, image_hash):
        """Sets the image_hash of this AwsEcrContainerImageDetails.


        :param image_hash: The image_hash of this AwsEcrContainerImageDetails.
        :type image_hash: str
        """
        if image_hash is None:
            raise ValueError("Invalid value for `image_hash`, must not be `None`")

        self._image_hash = image_hash

    @property
    def image_tags(self):
        """Gets the image_tags of this AwsEcrContainerImageDetails.


        :return: The image_tags of this AwsEcrContainerImageDetails.
        :rtype: List
        """
        return self._image_tags

    @image_tags.setter
    def image_tags(self, image_tags):
        """Sets the image_tags of this AwsEcrContainerImageDetails.


        :param image_tags: The image_tags of this AwsEcrContainerImageDetails.
        :type image_tags: List
        """

        self._image_tags = image_tags

    @property
    def platform(self):
        """Gets the platform of this AwsEcrContainerImageDetails.


        :return: The platform of this AwsEcrContainerImageDetails.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AwsEcrContainerImageDetails.


        :param platform: The platform of this AwsEcrContainerImageDetails.
        :type platform: str
        """

        self._platform = platform

    @property
    def pushed_at(self):
        """Gets the pushed_at of this AwsEcrContainerImageDetails.


        :return: The pushed_at of this AwsEcrContainerImageDetails.
        :rtype: datetime
        """
        return self._pushed_at

    @pushed_at.setter
    def pushed_at(self, pushed_at):
        """Sets the pushed_at of this AwsEcrContainerImageDetails.


        :param pushed_at: The pushed_at of this AwsEcrContainerImageDetails.
        :type pushed_at: datetime
        """

        self._pushed_at = pushed_at

    @property
    def registry(self):
        """Gets the registry of this AwsEcrContainerImageDetails.


        :return: The registry of this AwsEcrContainerImageDetails.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this AwsEcrContainerImageDetails.


        :param registry: The registry of this AwsEcrContainerImageDetails.
        :type registry: str
        """
        if registry is None:
            raise ValueError("Invalid value for `registry`, must not be `None`")

        self._registry = registry

    @property
    def repository_name(self):
        """Gets the repository_name of this AwsEcrContainerImageDetails.


        :return: The repository_name of this AwsEcrContainerImageDetails.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this AwsEcrContainerImageDetails.


        :param repository_name: The repository_name of this AwsEcrContainerImageDetails.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name
