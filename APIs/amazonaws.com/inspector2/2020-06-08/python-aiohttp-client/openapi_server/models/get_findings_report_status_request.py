# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetFindingsReportStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_id: str=None):
        """GetFindingsReportStatusRequest - a model defined in OpenAPI

        :param report_id: The report_id of this GetFindingsReportStatusRequest.
        """
        self.openapi_types = {
            'report_id': str
        }

        self.attribute_map = {
            'report_id': 'reportId'
        }

        self._report_id = report_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFindingsReportStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFindingsReportStatus_request of this GetFindingsReportStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_id(self):
        """Gets the report_id of this GetFindingsReportStatusRequest.

        The ID of the report to retrieve the status of.

        :return: The report_id of this GetFindingsReportStatusRequest.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this GetFindingsReportStatusRequest.

        The ID of the report to retrieve the status of.

        :param report_id: The report_id of this GetFindingsReportStatusRequest.
        :type report_id: str
        """
        if report_id is not None and not re.search(r'\b[a-f0-9]{8}\b-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-\b[a-f0-9]{12}\b', report_id):
            raise ValueError("Invalid value for `report_id`, must be a follow pattern or equal to `/\b[a-f0-9]{8}\b-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-\b[a-f0-9]{12}\b/`")

        self._report_id = report_id
