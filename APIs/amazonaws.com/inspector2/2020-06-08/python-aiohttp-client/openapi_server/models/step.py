# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Step(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_id: str=None, component_type: str=None):
        """Step - a model defined in OpenAPI

        :param component_id: The component_id of this Step.
        :param component_type: The component_type of this Step.
        """
        self.openapi_types = {
            'component_id': str,
            'component_type': str
        }

        self.attribute_map = {
            'component_id': 'componentId',
            'component_type': 'componentType'
        }

        self._component_id = component_id
        self._component_type = component_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Step':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Step of this Step.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_id(self):
        """Gets the component_id of this Step.


        :return: The component_id of this Step.
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this Step.


        :param component_id: The component_id of this Step.
        :type component_id: str
        """
        if component_id is None:
            raise ValueError("Invalid value for `component_id`, must not be `None`")

        self._component_id = component_id

    @property
    def component_type(self):
        """Gets the component_type of this Step.


        :return: The component_type of this Step.
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this Step.


        :param component_type: The component_type of this Step.
        :type component_type: str
        """
        if component_type is None:
            raise ValueError("Invalid value for `component_type`, must not be `None`")

        self._component_type = component_type
