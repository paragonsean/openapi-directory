# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, line_number: int=None):
        """CodeLine - a model defined in OpenAPI

        :param content: The content of this CodeLine.
        :param line_number: The line_number of this CodeLine.
        """
        self.openapi_types = {
            'content': str,
            'line_number': int
        }

        self.attribute_map = {
            'content': 'content',
            'line_number': 'lineNumber'
        }

        self._content = content
        self._line_number = line_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeLine of this CodeLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this CodeLine.


        :return: The content of this CodeLine.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CodeLine.


        :param content: The content of this CodeLine.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def line_number(self):
        """Gets the line_number of this CodeLine.


        :return: The line_number of this CodeLine.
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this CodeLine.


        :param line_number: The line_number of this CodeLine.
        :type line_number: int
        """
        if line_number is None:
            raise ValueError("Invalid value for `line_number`, must not be `None`")

        self._line_number = line_number
