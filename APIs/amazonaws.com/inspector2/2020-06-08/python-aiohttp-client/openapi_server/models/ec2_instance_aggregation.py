# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ec2_instance_sort_by import Ec2InstanceSortBy
from openapi_server.models.sort_order import SortOrder
from openapi_server import util


class Ec2InstanceAggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amis: List=None, instance_ids: List=None, instance_tags: List=None, operating_systems: List=None, sort_by: Ec2InstanceSortBy=None, sort_order: SortOrder=None):
        """Ec2InstanceAggregation - a model defined in OpenAPI

        :param amis: The amis of this Ec2InstanceAggregation.
        :param instance_ids: The instance_ids of this Ec2InstanceAggregation.
        :param instance_tags: The instance_tags of this Ec2InstanceAggregation.
        :param operating_systems: The operating_systems of this Ec2InstanceAggregation.
        :param sort_by: The sort_by of this Ec2InstanceAggregation.
        :param sort_order: The sort_order of this Ec2InstanceAggregation.
        """
        self.openapi_types = {
            'amis': List,
            'instance_ids': List,
            'instance_tags': List,
            'operating_systems': List,
            'sort_by': Ec2InstanceSortBy,
            'sort_order': SortOrder
        }

        self.attribute_map = {
            'amis': 'amis',
            'instance_ids': 'instanceIds',
            'instance_tags': 'instanceTags',
            'operating_systems': 'operatingSystems',
            'sort_by': 'sortBy',
            'sort_order': 'sortOrder'
        }

        self._amis = amis
        self._instance_ids = instance_ids
        self._instance_tags = instance_tags
        self._operating_systems = operating_systems
        self._sort_by = sort_by
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ec2InstanceAggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ec2InstanceAggregation of this Ec2InstanceAggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amis(self):
        """Gets the amis of this Ec2InstanceAggregation.


        :return: The amis of this Ec2InstanceAggregation.
        :rtype: List
        """
        return self._amis

    @amis.setter
    def amis(self, amis):
        """Sets the amis of this Ec2InstanceAggregation.


        :param amis: The amis of this Ec2InstanceAggregation.
        :type amis: List
        """

        self._amis = amis

    @property
    def instance_ids(self):
        """Gets the instance_ids of this Ec2InstanceAggregation.


        :return: The instance_ids of this Ec2InstanceAggregation.
        :rtype: List
        """
        return self._instance_ids

    @instance_ids.setter
    def instance_ids(self, instance_ids):
        """Sets the instance_ids of this Ec2InstanceAggregation.


        :param instance_ids: The instance_ids of this Ec2InstanceAggregation.
        :type instance_ids: List
        """

        self._instance_ids = instance_ids

    @property
    def instance_tags(self):
        """Gets the instance_tags of this Ec2InstanceAggregation.


        :return: The instance_tags of this Ec2InstanceAggregation.
        :rtype: List
        """
        return self._instance_tags

    @instance_tags.setter
    def instance_tags(self, instance_tags):
        """Sets the instance_tags of this Ec2InstanceAggregation.


        :param instance_tags: The instance_tags of this Ec2InstanceAggregation.
        :type instance_tags: List
        """

        self._instance_tags = instance_tags

    @property
    def operating_systems(self):
        """Gets the operating_systems of this Ec2InstanceAggregation.


        :return: The operating_systems of this Ec2InstanceAggregation.
        :rtype: List
        """
        return self._operating_systems

    @operating_systems.setter
    def operating_systems(self, operating_systems):
        """Sets the operating_systems of this Ec2InstanceAggregation.


        :param operating_systems: The operating_systems of this Ec2InstanceAggregation.
        :type operating_systems: List
        """

        self._operating_systems = operating_systems

    @property
    def sort_by(self):
        """Gets the sort_by of this Ec2InstanceAggregation.


        :return: The sort_by of this Ec2InstanceAggregation.
        :rtype: Ec2InstanceSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this Ec2InstanceAggregation.


        :param sort_by: The sort_by of this Ec2InstanceAggregation.
        :type sort_by: Ec2InstanceSortBy
        """

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this Ec2InstanceAggregation.


        :return: The sort_order of this Ec2InstanceAggregation.
        :rtype: SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Ec2InstanceAggregation.


        :param sort_order: The sort_order of this Ec2InstanceAggregation.
        :type sort_order: SortOrder
        """

        self._sort_order = sort_order
