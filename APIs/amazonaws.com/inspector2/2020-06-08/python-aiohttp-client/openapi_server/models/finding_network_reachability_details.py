# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_protocol import NetworkProtocol
from openapi_server.models.network_reachability_details_network_path import NetworkReachabilityDetailsNetworkPath
from openapi_server.models.network_reachability_details_open_port_range import NetworkReachabilityDetailsOpenPortRange
from openapi_server import util


class FindingNetworkReachabilityDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_path: NetworkReachabilityDetailsNetworkPath=None, open_port_range: NetworkReachabilityDetailsOpenPortRange=None, protocol: NetworkProtocol=None):
        """FindingNetworkReachabilityDetails - a model defined in OpenAPI

        :param network_path: The network_path of this FindingNetworkReachabilityDetails.
        :param open_port_range: The open_port_range of this FindingNetworkReachabilityDetails.
        :param protocol: The protocol of this FindingNetworkReachabilityDetails.
        """
        self.openapi_types = {
            'network_path': NetworkReachabilityDetailsNetworkPath,
            'open_port_range': NetworkReachabilityDetailsOpenPortRange,
            'protocol': NetworkProtocol
        }

        self.attribute_map = {
            'network_path': 'networkPath',
            'open_port_range': 'openPortRange',
            'protocol': 'protocol'
        }

        self._network_path = network_path
        self._open_port_range = open_port_range
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FindingNetworkReachabilityDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Finding_networkReachabilityDetails of this FindingNetworkReachabilityDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_path(self):
        """Gets the network_path of this FindingNetworkReachabilityDetails.


        :return: The network_path of this FindingNetworkReachabilityDetails.
        :rtype: NetworkReachabilityDetailsNetworkPath
        """
        return self._network_path

    @network_path.setter
    def network_path(self, network_path):
        """Sets the network_path of this FindingNetworkReachabilityDetails.


        :param network_path: The network_path of this FindingNetworkReachabilityDetails.
        :type network_path: NetworkReachabilityDetailsNetworkPath
        """
        if network_path is None:
            raise ValueError("Invalid value for `network_path`, must not be `None`")

        self._network_path = network_path

    @property
    def open_port_range(self):
        """Gets the open_port_range of this FindingNetworkReachabilityDetails.


        :return: The open_port_range of this FindingNetworkReachabilityDetails.
        :rtype: NetworkReachabilityDetailsOpenPortRange
        """
        return self._open_port_range

    @open_port_range.setter
    def open_port_range(self, open_port_range):
        """Sets the open_port_range of this FindingNetworkReachabilityDetails.


        :param open_port_range: The open_port_range of this FindingNetworkReachabilityDetails.
        :type open_port_range: NetworkReachabilityDetailsOpenPortRange
        """
        if open_port_range is None:
            raise ValueError("Invalid value for `open_port_range`, must not be `None`")

        self._open_port_range = open_port_range

    @property
    def protocol(self):
        """Gets the protocol of this FindingNetworkReachabilityDetails.


        :return: The protocol of this FindingNetworkReachabilityDetails.
        :rtype: NetworkProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this FindingNetworkReachabilityDetails.


        :param protocol: The protocol of this FindingNetworkReachabilityDetails.
        :type protocol: NetworkProtocol
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol
