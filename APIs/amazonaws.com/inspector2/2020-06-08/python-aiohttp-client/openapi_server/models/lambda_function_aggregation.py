# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lambda_function_sort_by import LambdaFunctionSortBy
from openapi_server.models.sort_order import SortOrder
from openapi_server import util


class LambdaFunctionAggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, function_names: List=None, function_tags: List=None, resource_ids: List=None, runtimes: List=None, sort_by: LambdaFunctionSortBy=None, sort_order: SortOrder=None):
        """LambdaFunctionAggregation - a model defined in OpenAPI

        :param function_names: The function_names of this LambdaFunctionAggregation.
        :param function_tags: The function_tags of this LambdaFunctionAggregation.
        :param resource_ids: The resource_ids of this LambdaFunctionAggregation.
        :param runtimes: The runtimes of this LambdaFunctionAggregation.
        :param sort_by: The sort_by of this LambdaFunctionAggregation.
        :param sort_order: The sort_order of this LambdaFunctionAggregation.
        """
        self.openapi_types = {
            'function_names': List,
            'function_tags': List,
            'resource_ids': List,
            'runtimes': List,
            'sort_by': LambdaFunctionSortBy,
            'sort_order': SortOrder
        }

        self.attribute_map = {
            'function_names': 'functionNames',
            'function_tags': 'functionTags',
            'resource_ids': 'resourceIds',
            'runtimes': 'runtimes',
            'sort_by': 'sortBy',
            'sort_order': 'sortOrder'
        }

        self._function_names = function_names
        self._function_tags = function_tags
        self._resource_ids = resource_ids
        self._runtimes = runtimes
        self._sort_by = sort_by
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LambdaFunctionAggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LambdaFunctionAggregation of this LambdaFunctionAggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def function_names(self):
        """Gets the function_names of this LambdaFunctionAggregation.


        :return: The function_names of this LambdaFunctionAggregation.
        :rtype: List
        """
        return self._function_names

    @function_names.setter
    def function_names(self, function_names):
        """Sets the function_names of this LambdaFunctionAggregation.


        :param function_names: The function_names of this LambdaFunctionAggregation.
        :type function_names: List
        """

        self._function_names = function_names

    @property
    def function_tags(self):
        """Gets the function_tags of this LambdaFunctionAggregation.


        :return: The function_tags of this LambdaFunctionAggregation.
        :rtype: List
        """
        return self._function_tags

    @function_tags.setter
    def function_tags(self, function_tags):
        """Sets the function_tags of this LambdaFunctionAggregation.


        :param function_tags: The function_tags of this LambdaFunctionAggregation.
        :type function_tags: List
        """

        self._function_tags = function_tags

    @property
    def resource_ids(self):
        """Gets the resource_ids of this LambdaFunctionAggregation.


        :return: The resource_ids of this LambdaFunctionAggregation.
        :rtype: List
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this LambdaFunctionAggregation.


        :param resource_ids: The resource_ids of this LambdaFunctionAggregation.
        :type resource_ids: List
        """

        self._resource_ids = resource_ids

    @property
    def runtimes(self):
        """Gets the runtimes of this LambdaFunctionAggregation.


        :return: The runtimes of this LambdaFunctionAggregation.
        :rtype: List
        """
        return self._runtimes

    @runtimes.setter
    def runtimes(self, runtimes):
        """Sets the runtimes of this LambdaFunctionAggregation.


        :param runtimes: The runtimes of this LambdaFunctionAggregation.
        :type runtimes: List
        """

        self._runtimes = runtimes

    @property
    def sort_by(self):
        """Gets the sort_by of this LambdaFunctionAggregation.


        :return: The sort_by of this LambdaFunctionAggregation.
        :rtype: LambdaFunctionSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this LambdaFunctionAggregation.


        :param sort_by: The sort_by of this LambdaFunctionAggregation.
        :type sort_by: LambdaFunctionSortBy
        """

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this LambdaFunctionAggregation.


        :return: The sort_order of this LambdaFunctionAggregation.
        :rtype: SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this LambdaFunctionAggregation.


        :param sort_order: The sort_order of this LambdaFunctionAggregation.
        :type sort_order: SortOrder
        """

        self._sort_order = sort_order
