# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateOrgEc2DeepInspectionConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, org_package_paths: List[str]=None):
        """UpdateOrgEc2DeepInspectionConfigurationRequest - a model defined in OpenAPI

        :param org_package_paths: The org_package_paths of this UpdateOrgEc2DeepInspectionConfigurationRequest.
        """
        self.openapi_types = {
            'org_package_paths': List[str]
        }

        self.attribute_map = {
            'org_package_paths': 'orgPackagePaths'
        }

        self._org_package_paths = org_package_paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateOrgEc2DeepInspectionConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateOrgEc2DeepInspectionConfiguration_request of this UpdateOrgEc2DeepInspectionConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def org_package_paths(self):
        """Gets the org_package_paths of this UpdateOrgEc2DeepInspectionConfigurationRequest.

        The Amazon Inspector deep inspection custom paths you are adding for your organization.

        :return: The org_package_paths of this UpdateOrgEc2DeepInspectionConfigurationRequest.
        :rtype: List[str]
        """
        return self._org_package_paths

    @org_package_paths.setter
    def org_package_paths(self, org_package_paths):
        """Sets the org_package_paths of this UpdateOrgEc2DeepInspectionConfigurationRequest.

        The Amazon Inspector deep inspection custom paths you are adding for your organization.

        :param org_package_paths: The org_package_paths of this UpdateOrgEc2DeepInspectionConfigurationRequest.
        :type org_package_paths: List[str]
        """
        if org_package_paths is None:
            raise ValueError("Invalid value for `org_package_paths`, must not be `None`")
        if org_package_paths is not None and len(org_package_paths) > 5:
            raise ValueError("Invalid value for `org_package_paths`, number of items must be less than or equal to `5`")
        if org_package_paths is not None and len(org_package_paths) < 0:
            raise ValueError("Invalid value for `org_package_paths`, number of items must be greater than or equal to `0`")

        self._org_package_paths = org_package_paths
