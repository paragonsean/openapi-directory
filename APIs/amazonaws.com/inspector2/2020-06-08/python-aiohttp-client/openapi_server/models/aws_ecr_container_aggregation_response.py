# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aws_ecr_container_aggregation_response_severity_counts import AwsEcrContainerAggregationResponseSeverityCounts
from openapi_server import util


class AwsEcrContainerAggregationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, architecture: str=None, image_sha: str=None, image_tags: List=None, repository: str=None, resource_id: str=None, severity_counts: AwsEcrContainerAggregationResponseSeverityCounts=None):
        """AwsEcrContainerAggregationResponse - a model defined in OpenAPI

        :param account_id: The account_id of this AwsEcrContainerAggregationResponse.
        :param architecture: The architecture of this AwsEcrContainerAggregationResponse.
        :param image_sha: The image_sha of this AwsEcrContainerAggregationResponse.
        :param image_tags: The image_tags of this AwsEcrContainerAggregationResponse.
        :param repository: The repository of this AwsEcrContainerAggregationResponse.
        :param resource_id: The resource_id of this AwsEcrContainerAggregationResponse.
        :param severity_counts: The severity_counts of this AwsEcrContainerAggregationResponse.
        """
        self.openapi_types = {
            'account_id': str,
            'architecture': str,
            'image_sha': str,
            'image_tags': List,
            'repository': str,
            'resource_id': str,
            'severity_counts': AwsEcrContainerAggregationResponseSeverityCounts
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'architecture': 'architecture',
            'image_sha': 'imageSha',
            'image_tags': 'imageTags',
            'repository': 'repository',
            'resource_id': 'resourceId',
            'severity_counts': 'severityCounts'
        }

        self._account_id = account_id
        self._architecture = architecture
        self._image_sha = image_sha
        self._image_tags = image_tags
        self._repository = repository
        self._resource_id = resource_id
        self._severity_counts = severity_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsEcrContainerAggregationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AwsEcrContainerAggregationResponse of this AwsEcrContainerAggregationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AwsEcrContainerAggregationResponse.


        :return: The account_id of this AwsEcrContainerAggregationResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AwsEcrContainerAggregationResponse.


        :param account_id: The account_id of this AwsEcrContainerAggregationResponse.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def architecture(self):
        """Gets the architecture of this AwsEcrContainerAggregationResponse.


        :return: The architecture of this AwsEcrContainerAggregationResponse.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this AwsEcrContainerAggregationResponse.


        :param architecture: The architecture of this AwsEcrContainerAggregationResponse.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def image_sha(self):
        """Gets the image_sha of this AwsEcrContainerAggregationResponse.


        :return: The image_sha of this AwsEcrContainerAggregationResponse.
        :rtype: str
        """
        return self._image_sha

    @image_sha.setter
    def image_sha(self, image_sha):
        """Sets the image_sha of this AwsEcrContainerAggregationResponse.


        :param image_sha: The image_sha of this AwsEcrContainerAggregationResponse.
        :type image_sha: str
        """

        self._image_sha = image_sha

    @property
    def image_tags(self):
        """Gets the image_tags of this AwsEcrContainerAggregationResponse.


        :return: The image_tags of this AwsEcrContainerAggregationResponse.
        :rtype: List
        """
        return self._image_tags

    @image_tags.setter
    def image_tags(self, image_tags):
        """Sets the image_tags of this AwsEcrContainerAggregationResponse.


        :param image_tags: The image_tags of this AwsEcrContainerAggregationResponse.
        :type image_tags: List
        """

        self._image_tags = image_tags

    @property
    def repository(self):
        """Gets the repository of this AwsEcrContainerAggregationResponse.


        :return: The repository of this AwsEcrContainerAggregationResponse.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this AwsEcrContainerAggregationResponse.


        :param repository: The repository of this AwsEcrContainerAggregationResponse.
        :type repository: str
        """

        self._repository = repository

    @property
    def resource_id(self):
        """Gets the resource_id of this AwsEcrContainerAggregationResponse.


        :return: The resource_id of this AwsEcrContainerAggregationResponse.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AwsEcrContainerAggregationResponse.


        :param resource_id: The resource_id of this AwsEcrContainerAggregationResponse.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def severity_counts(self):
        """Gets the severity_counts of this AwsEcrContainerAggregationResponse.


        :return: The severity_counts of this AwsEcrContainerAggregationResponse.
        :rtype: AwsEcrContainerAggregationResponseSeverityCounts
        """
        return self._severity_counts

    @severity_counts.setter
    def severity_counts(self, severity_counts):
        """Sets the severity_counts of this AwsEcrContainerAggregationResponse.


        :param severity_counts: The severity_counts of this AwsEcrContainerAggregationResponse.
        :type severity_counts: AwsEcrContainerAggregationResponseSeverityCounts
        """

        self._severity_counts = severity_counts
