# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_scan_type import ResourceScanType
from openapi_server import util


class EnableRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_ids: List[str]=None, client_token: str=None, resource_types: List[ResourceScanType]=None):
        """EnableRequest - a model defined in OpenAPI

        :param account_ids: The account_ids of this EnableRequest.
        :param client_token: The client_token of this EnableRequest.
        :param resource_types: The resource_types of this EnableRequest.
        """
        self.openapi_types = {
            'account_ids': List[str],
            'client_token': str,
            'resource_types': List[ResourceScanType]
        }

        self.attribute_map = {
            'account_ids': 'accountIds',
            'client_token': 'clientToken',
            'resource_types': 'resourceTypes'
        }

        self._account_ids = account_ids
        self._client_token = client_token
        self._resource_types = resource_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Enable_request of this EnableRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_ids(self):
        """Gets the account_ids of this EnableRequest.

        A list of account IDs you want to enable Amazon Inspector scans for.

        :return: The account_ids of this EnableRequest.
        :rtype: List[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this EnableRequest.

        A list of account IDs you want to enable Amazon Inspector scans for.

        :param account_ids: The account_ids of this EnableRequest.
        :type account_ids: List[str]
        """
        if account_ids is not None and len(account_ids) > 100:
            raise ValueError("Invalid value for `account_ids`, number of items must be less than or equal to `100`")
        if account_ids is not None and len(account_ids) < 0:
            raise ValueError("Invalid value for `account_ids`, number of items must be greater than or equal to `0`")

        self._account_ids = account_ids

    @property
    def client_token(self):
        """Gets the client_token of this EnableRequest.

        The idempotency token for the request.

        :return: The client_token of this EnableRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this EnableRequest.

        The idempotency token for the request.

        :param client_token: The client_token of this EnableRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token

    @property
    def resource_types(self):
        """Gets the resource_types of this EnableRequest.

        The resource scan types you want to enable.

        :return: The resource_types of this EnableRequest.
        :rtype: List[ResourceScanType]
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this EnableRequest.

        The resource scan types you want to enable.

        :param resource_types: The resource_types of this EnableRequest.
        :type resource_types: List[ResourceScanType]
        """
        if resource_types is None:
            raise ValueError("Invalid value for `resource_types`, must not be `None`")
        if resource_types is not None and len(resource_types) > 3:
            raise ValueError("Invalid value for `resource_types`, number of items must be less than or equal to `3`")
        if resource_types is not None and len(resource_types) < 1:
            raise ValueError("Invalid value for `resource_types`, number of items must be greater than or equal to `1`")

        self._resource_types = resource_types
