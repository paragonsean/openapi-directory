# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_resource_status import AccountResourceStatus
from openapi_server.models.status import Status
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, resource_status: AccountResourceStatus=None, status: Status=None):
        """Account - a model defined in OpenAPI

        :param account_id: The account_id of this Account.
        :param resource_status: The resource_status of this Account.
        :param status: The status of this Account.
        """
        self.openapi_types = {
            'account_id': str,
            'resource_status': AccountResourceStatus,
            'status': Status
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'resource_status': 'resourceStatus',
            'status': 'status'
        }

        self._account_id = account_id
        self._resource_status = resource_status
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Account.


        :return: The account_id of this Account.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.


        :param account_id: The account_id of this Account.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def resource_status(self):
        """Gets the resource_status of this Account.


        :return: The resource_status of this Account.
        :rtype: AccountResourceStatus
        """
        return self._resource_status

    @resource_status.setter
    def resource_status(self, resource_status):
        """Sets the resource_status of this Account.


        :param resource_status: The resource_status of this Account.
        :type resource_status: AccountResourceStatus
        """
        if resource_status is None:
            raise ValueError("Invalid value for `resource_status`, must not be `None`")

        self._resource_status = resource_status

    @property
    def status(self):
        """Gets the status of this Account.


        :return: The status of this Account.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.


        :param status: The status of this Account.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
