# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_key import GroupKey
from openapi_server import util


class Counts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, group_key: GroupKey=None):
        """Counts - a model defined in OpenAPI

        :param count: The count of this Counts.
        :param group_key: The group_key of this Counts.
        """
        self.openapi_types = {
            'count': int,
            'group_key': GroupKey
        }

        self.attribute_map = {
            'count': 'count',
            'group_key': 'groupKey'
        }

        self._count = count
        self._group_key = group_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Counts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Counts of this Counts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Counts.


        :return: The count of this Counts.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Counts.


        :param count: The count of this Counts.
        :type count: int
        """

        self._count = count

    @property
    def group_key(self):
        """Gets the group_key of this Counts.


        :return: The group_key of this Counts.
        :rtype: GroupKey
        """
        return self._group_key

    @group_key.setter
    def group_key(self, group_key):
        """Sets the group_key of this Counts.


        :param group_key: The group_key of this Counts.
        :type group_key: GroupKey
        """

        self._group_key = group_key
