# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort_field import SortField
from openapi_server.models.sort_order import SortOrder
from openapi_server import util


class ListFindingsRequestSortCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: SortField=None, sort_order: SortOrder=None):
        """ListFindingsRequestSortCriteria - a model defined in OpenAPI

        :param _field: The _field of this ListFindingsRequestSortCriteria.
        :param sort_order: The sort_order of this ListFindingsRequestSortCriteria.
        """
        self.openapi_types = {
            '_field': SortField,
            'sort_order': SortOrder
        }

        self.attribute_map = {
            '_field': 'field',
            'sort_order': 'sortOrder'
        }

        self.__field = _field
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListFindingsRequestSortCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListFindingsRequest_sortCriteria of this ListFindingsRequestSortCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this ListFindingsRequestSortCriteria.


        :return: The _field of this ListFindingsRequestSortCriteria.
        :rtype: SortField
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this ListFindingsRequestSortCriteria.


        :param _field: The _field of this ListFindingsRequestSortCriteria.
        :type _field: SortField
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def sort_order(self):
        """Gets the sort_order of this ListFindingsRequestSortCriteria.


        :return: The sort_order of this ListFindingsRequestSortCriteria.
        :rtype: SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ListFindingsRequestSortCriteria.


        :param sort_order: The sort_order of this ListFindingsRequestSortCriteria.
        :type sort_order: SortOrder
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order
