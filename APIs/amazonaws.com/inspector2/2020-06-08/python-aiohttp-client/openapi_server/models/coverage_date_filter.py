# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CoverageDateFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_inclusive: datetime=None, start_inclusive: datetime=None):
        """CoverageDateFilter - a model defined in OpenAPI

        :param end_inclusive: The end_inclusive of this CoverageDateFilter.
        :param start_inclusive: The start_inclusive of this CoverageDateFilter.
        """
        self.openapi_types = {
            'end_inclusive': datetime,
            'start_inclusive': datetime
        }

        self.attribute_map = {
            'end_inclusive': 'endInclusive',
            'start_inclusive': 'startInclusive'
        }

        self._end_inclusive = end_inclusive
        self._start_inclusive = start_inclusive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CoverageDateFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CoverageDateFilter of this CoverageDateFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_inclusive(self):
        """Gets the end_inclusive of this CoverageDateFilter.


        :return: The end_inclusive of this CoverageDateFilter.
        :rtype: datetime
        """
        return self._end_inclusive

    @end_inclusive.setter
    def end_inclusive(self, end_inclusive):
        """Sets the end_inclusive of this CoverageDateFilter.


        :param end_inclusive: The end_inclusive of this CoverageDateFilter.
        :type end_inclusive: datetime
        """

        self._end_inclusive = end_inclusive

    @property
    def start_inclusive(self):
        """Gets the start_inclusive of this CoverageDateFilter.


        :return: The start_inclusive of this CoverageDateFilter.
        :rtype: datetime
        """
        return self._start_inclusive

    @start_inclusive.setter
    def start_inclusive(self, start_inclusive):
        """Sets the start_inclusive of this CoverageDateFilter.


        :param start_inclusive: The start_inclusive of this CoverageDateFilter.
        :type start_inclusive: datetime
        """

        self._start_inclusive = start_inclusive
