# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_finding_aggregations_request_aggregation_request import ListFindingAggregationsRequestAggregationRequest
from openapi_server.models.string_filter import StringFilter
from openapi_server import util


class ListFindingAggregationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_ids: List[StringFilter]=None, aggregation_request: ListFindingAggregationsRequestAggregationRequest=None, aggregation_type: str=None, max_results: int=None, next_token: str=None):
        """ListFindingAggregationsRequest - a model defined in OpenAPI

        :param account_ids: The account_ids of this ListFindingAggregationsRequest.
        :param aggregation_request: The aggregation_request of this ListFindingAggregationsRequest.
        :param aggregation_type: The aggregation_type of this ListFindingAggregationsRequest.
        :param max_results: The max_results of this ListFindingAggregationsRequest.
        :param next_token: The next_token of this ListFindingAggregationsRequest.
        """
        self.openapi_types = {
            'account_ids': List[StringFilter],
            'aggregation_request': ListFindingAggregationsRequestAggregationRequest,
            'aggregation_type': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'account_ids': 'accountIds',
            'aggregation_request': 'aggregationRequest',
            'aggregation_type': 'aggregationType',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._account_ids = account_ids
        self._aggregation_request = aggregation_request
        self._aggregation_type = aggregation_type
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListFindingAggregationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListFindingAggregations_request of this ListFindingAggregationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_ids(self):
        """Gets the account_ids of this ListFindingAggregationsRequest.

        The Amazon Web Services account IDs to retrieve finding aggregation data for.

        :return: The account_ids of this ListFindingAggregationsRequest.
        :rtype: List[StringFilter]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this ListFindingAggregationsRequest.

        The Amazon Web Services account IDs to retrieve finding aggregation data for.

        :param account_ids: The account_ids of this ListFindingAggregationsRequest.
        :type account_ids: List[StringFilter]
        """
        if account_ids is not None and len(account_ids) > 10:
            raise ValueError("Invalid value for `account_ids`, number of items must be less than or equal to `10`")
        if account_ids is not None and len(account_ids) < 1:
            raise ValueError("Invalid value for `account_ids`, number of items must be greater than or equal to `1`")

        self._account_ids = account_ids

    @property
    def aggregation_request(self):
        """Gets the aggregation_request of this ListFindingAggregationsRequest.


        :return: The aggregation_request of this ListFindingAggregationsRequest.
        :rtype: ListFindingAggregationsRequestAggregationRequest
        """
        return self._aggregation_request

    @aggregation_request.setter
    def aggregation_request(self, aggregation_request):
        """Sets the aggregation_request of this ListFindingAggregationsRequest.


        :param aggregation_request: The aggregation_request of this ListFindingAggregationsRequest.
        :type aggregation_request: ListFindingAggregationsRequestAggregationRequest
        """

        self._aggregation_request = aggregation_request

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this ListFindingAggregationsRequest.

        The type of the aggregation request.

        :return: The aggregation_type of this ListFindingAggregationsRequest.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this ListFindingAggregationsRequest.

        The type of the aggregation request.

        :param aggregation_type: The aggregation_type of this ListFindingAggregationsRequest.
        :type aggregation_type: str
        """
        allowed_values = ["FINDING_TYPE", "PACKAGE", "TITLE", "REPOSITORY", "AMI", "AWS_EC2_INSTANCE", "AWS_ECR_CONTAINER", "IMAGE_LAYER", "ACCOUNT", "AWS_LAMBDA_FUNCTION", "LAMBDA_LAYER"]  # noqa: E501
        if aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_type` ({0}), must be one of {1}"
                .format(aggregation_type, allowed_values)
            )

        self._aggregation_type = aggregation_type

    @property
    def max_results(self):
        """Gets the max_results of this ListFindingAggregationsRequest.

        The maximum number of results to return in the response.

        :return: The max_results of this ListFindingAggregationsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListFindingAggregationsRequest.

        The maximum number of results to return in the response.

        :param max_results: The max_results of this ListFindingAggregationsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListFindingAggregationsRequest.

        A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.

        :return: The next_token of this ListFindingAggregationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListFindingAggregationsRequest.

        A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.

        :param next_token: The next_token of this ListFindingAggregationsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1000000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1000000`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")

        self._next_token = next_token
