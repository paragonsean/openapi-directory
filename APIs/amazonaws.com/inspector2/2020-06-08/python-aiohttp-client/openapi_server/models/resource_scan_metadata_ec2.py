# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ec2_platform import Ec2Platform
from openapi_server import util


class ResourceScanMetadataEc2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ami_id: str=None, platform: Ec2Platform=None, tags: Dict=None):
        """ResourceScanMetadataEc2 - a model defined in OpenAPI

        :param ami_id: The ami_id of this ResourceScanMetadataEc2.
        :param platform: The platform of this ResourceScanMetadataEc2.
        :param tags: The tags of this ResourceScanMetadataEc2.
        """
        self.openapi_types = {
            'ami_id': str,
            'platform': Ec2Platform,
            'tags': Dict
        }

        self.attribute_map = {
            'ami_id': 'amiId',
            'platform': 'platform',
            'tags': 'tags'
        }

        self._ami_id = ami_id
        self._platform = platform
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceScanMetadataEc2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceScanMetadata_ec2 of this ResourceScanMetadataEc2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ami_id(self):
        """Gets the ami_id of this ResourceScanMetadataEc2.


        :return: The ami_id of this ResourceScanMetadataEc2.
        :rtype: str
        """
        return self._ami_id

    @ami_id.setter
    def ami_id(self, ami_id):
        """Sets the ami_id of this ResourceScanMetadataEc2.


        :param ami_id: The ami_id of this ResourceScanMetadataEc2.
        :type ami_id: str
        """

        self._ami_id = ami_id

    @property
    def platform(self):
        """Gets the platform of this ResourceScanMetadataEc2.


        :return: The platform of this ResourceScanMetadataEc2.
        :rtype: Ec2Platform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ResourceScanMetadataEc2.


        :param platform: The platform of this ResourceScanMetadataEc2.
        :type platform: Ec2Platform
        """

        self._platform = platform

    @property
    def tags(self):
        """Gets the tags of this ResourceScanMetadataEc2.


        :return: The tags of this ResourceScanMetadataEc2.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ResourceScanMetadataEc2.


        :param tags: The tags of this ResourceScanMetadataEc2.
        :type tags: Dict
        """

        self._tags = tags
