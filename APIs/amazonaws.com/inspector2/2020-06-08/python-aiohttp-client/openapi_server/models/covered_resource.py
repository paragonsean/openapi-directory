# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coverage_resource_type import CoverageResourceType
from openapi_server.models.covered_resource_resource_metadata import CoveredResourceResourceMetadata
from openapi_server.models.covered_resource_scan_status import CoveredResourceScanStatus
from openapi_server.models.scan_type import ScanType
from openapi_server import util


class CoveredResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, last_scanned_at: datetime=None, resource_id: str=None, resource_metadata: CoveredResourceResourceMetadata=None, resource_type: CoverageResourceType=None, scan_status: CoveredResourceScanStatus=None, scan_type: ScanType=None):
        """CoveredResource - a model defined in OpenAPI

        :param account_id: The account_id of this CoveredResource.
        :param last_scanned_at: The last_scanned_at of this CoveredResource.
        :param resource_id: The resource_id of this CoveredResource.
        :param resource_metadata: The resource_metadata of this CoveredResource.
        :param resource_type: The resource_type of this CoveredResource.
        :param scan_status: The scan_status of this CoveredResource.
        :param scan_type: The scan_type of this CoveredResource.
        """
        self.openapi_types = {
            'account_id': str,
            'last_scanned_at': datetime,
            'resource_id': str,
            'resource_metadata': CoveredResourceResourceMetadata,
            'resource_type': CoverageResourceType,
            'scan_status': CoveredResourceScanStatus,
            'scan_type': ScanType
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'last_scanned_at': 'lastScannedAt',
            'resource_id': 'resourceId',
            'resource_metadata': 'resourceMetadata',
            'resource_type': 'resourceType',
            'scan_status': 'scanStatus',
            'scan_type': 'scanType'
        }

        self._account_id = account_id
        self._last_scanned_at = last_scanned_at
        self._resource_id = resource_id
        self._resource_metadata = resource_metadata
        self._resource_type = resource_type
        self._scan_status = scan_status
        self._scan_type = scan_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CoveredResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CoveredResource of this CoveredResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CoveredResource.


        :return: The account_id of this CoveredResource.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CoveredResource.


        :param account_id: The account_id of this CoveredResource.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def last_scanned_at(self):
        """Gets the last_scanned_at of this CoveredResource.


        :return: The last_scanned_at of this CoveredResource.
        :rtype: datetime
        """
        return self._last_scanned_at

    @last_scanned_at.setter
    def last_scanned_at(self, last_scanned_at):
        """Sets the last_scanned_at of this CoveredResource.


        :param last_scanned_at: The last_scanned_at of this CoveredResource.
        :type last_scanned_at: datetime
        """

        self._last_scanned_at = last_scanned_at

    @property
    def resource_id(self):
        """Gets the resource_id of this CoveredResource.


        :return: The resource_id of this CoveredResource.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CoveredResource.


        :param resource_id: The resource_id of this CoveredResource.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def resource_metadata(self):
        """Gets the resource_metadata of this CoveredResource.


        :return: The resource_metadata of this CoveredResource.
        :rtype: CoveredResourceResourceMetadata
        """
        return self._resource_metadata

    @resource_metadata.setter
    def resource_metadata(self, resource_metadata):
        """Sets the resource_metadata of this CoveredResource.


        :param resource_metadata: The resource_metadata of this CoveredResource.
        :type resource_metadata: CoveredResourceResourceMetadata
        """

        self._resource_metadata = resource_metadata

    @property
    def resource_type(self):
        """Gets the resource_type of this CoveredResource.


        :return: The resource_type of this CoveredResource.
        :rtype: CoverageResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CoveredResource.


        :param resource_type: The resource_type of this CoveredResource.
        :type resource_type: CoverageResourceType
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def scan_status(self):
        """Gets the scan_status of this CoveredResource.


        :return: The scan_status of this CoveredResource.
        :rtype: CoveredResourceScanStatus
        """
        return self._scan_status

    @scan_status.setter
    def scan_status(self, scan_status):
        """Sets the scan_status of this CoveredResource.


        :param scan_status: The scan_status of this CoveredResource.
        :type scan_status: CoveredResourceScanStatus
        """

        self._scan_status = scan_status

    @property
    def scan_type(self):
        """Gets the scan_type of this CoveredResource.


        :return: The scan_type of this CoveredResource.
        :rtype: ScanType
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this CoveredResource.


        :param scan_type: The scan_type of this CoveredResource.
        :type scan_type: ScanType
        """
        if scan_type is None:
            raise ValueError("Invalid value for `scan_type`, must not be `None`")

        self._scan_type = scan_type
