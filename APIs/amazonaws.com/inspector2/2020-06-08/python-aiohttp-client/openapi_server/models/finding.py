# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exploit_available import ExploitAvailable
from openapi_server.models.finding_code_vulnerability_details import FindingCodeVulnerabilityDetails
from openapi_server.models.finding_epss import FindingEpss
from openapi_server.models.finding_exploitability_details import FindingExploitabilityDetails
from openapi_server.models.finding_inspector_score_details import FindingInspectorScoreDetails
from openapi_server.models.finding_network_reachability_details import FindingNetworkReachabilityDetails
from openapi_server.models.finding_package_vulnerability_details import FindingPackageVulnerabilityDetails
from openapi_server.models.finding_remediation import FindingRemediation
from openapi_server.models.finding_status import FindingStatus
from openapi_server.models.finding_type import FindingType
from openapi_server.models.fix_available import FixAvailable
from openapi_server.models.severity import Severity
from openapi_server import util


class Finding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aws_account_id: str=None, code_vulnerability_details: FindingCodeVulnerabilityDetails=None, description: str=None, epss: FindingEpss=None, exploit_available: ExploitAvailable=None, exploitability_details: FindingExploitabilityDetails=None, finding_arn: str=None, first_observed_at: datetime=None, fix_available: FixAvailable=None, inspector_score: float=None, inspector_score_details: FindingInspectorScoreDetails=None, last_observed_at: datetime=None, network_reachability_details: FindingNetworkReachabilityDetails=None, package_vulnerability_details: FindingPackageVulnerabilityDetails=None, remediation: FindingRemediation=None, resources: List=None, severity: Severity=None, status: FindingStatus=None, title: str=None, type: FindingType=None, updated_at: datetime=None):
        """Finding - a model defined in OpenAPI

        :param aws_account_id: The aws_account_id of this Finding.
        :param code_vulnerability_details: The code_vulnerability_details of this Finding.
        :param description: The description of this Finding.
        :param epss: The epss of this Finding.
        :param exploit_available: The exploit_available of this Finding.
        :param exploitability_details: The exploitability_details of this Finding.
        :param finding_arn: The finding_arn of this Finding.
        :param first_observed_at: The first_observed_at of this Finding.
        :param fix_available: The fix_available of this Finding.
        :param inspector_score: The inspector_score of this Finding.
        :param inspector_score_details: The inspector_score_details of this Finding.
        :param last_observed_at: The last_observed_at of this Finding.
        :param network_reachability_details: The network_reachability_details of this Finding.
        :param package_vulnerability_details: The package_vulnerability_details of this Finding.
        :param remediation: The remediation of this Finding.
        :param resources: The resources of this Finding.
        :param severity: The severity of this Finding.
        :param status: The status of this Finding.
        :param title: The title of this Finding.
        :param type: The type of this Finding.
        :param updated_at: The updated_at of this Finding.
        """
        self.openapi_types = {
            'aws_account_id': str,
            'code_vulnerability_details': FindingCodeVulnerabilityDetails,
            'description': str,
            'epss': FindingEpss,
            'exploit_available': ExploitAvailable,
            'exploitability_details': FindingExploitabilityDetails,
            'finding_arn': str,
            'first_observed_at': datetime,
            'fix_available': FixAvailable,
            'inspector_score': float,
            'inspector_score_details': FindingInspectorScoreDetails,
            'last_observed_at': datetime,
            'network_reachability_details': FindingNetworkReachabilityDetails,
            'package_vulnerability_details': FindingPackageVulnerabilityDetails,
            'remediation': FindingRemediation,
            'resources': List,
            'severity': Severity,
            'status': FindingStatus,
            'title': str,
            'type': FindingType,
            'updated_at': datetime
        }

        self.attribute_map = {
            'aws_account_id': 'awsAccountId',
            'code_vulnerability_details': 'codeVulnerabilityDetails',
            'description': 'description',
            'epss': 'epss',
            'exploit_available': 'exploitAvailable',
            'exploitability_details': 'exploitabilityDetails',
            'finding_arn': 'findingArn',
            'first_observed_at': 'firstObservedAt',
            'fix_available': 'fixAvailable',
            'inspector_score': 'inspectorScore',
            'inspector_score_details': 'inspectorScoreDetails',
            'last_observed_at': 'lastObservedAt',
            'network_reachability_details': 'networkReachabilityDetails',
            'package_vulnerability_details': 'packageVulnerabilityDetails',
            'remediation': 'remediation',
            'resources': 'resources',
            'severity': 'severity',
            'status': 'status',
            'title': 'title',
            'type': 'type',
            'updated_at': 'updatedAt'
        }

        self._aws_account_id = aws_account_id
        self._code_vulnerability_details = code_vulnerability_details
        self._description = description
        self._epss = epss
        self._exploit_available = exploit_available
        self._exploitability_details = exploitability_details
        self._finding_arn = finding_arn
        self._first_observed_at = first_observed_at
        self._fix_available = fix_available
        self._inspector_score = inspector_score
        self._inspector_score_details = inspector_score_details
        self._last_observed_at = last_observed_at
        self._network_reachability_details = network_reachability_details
        self._package_vulnerability_details = package_vulnerability_details
        self._remediation = remediation
        self._resources = resources
        self._severity = severity
        self._status = status
        self._title = title
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Finding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Finding of this Finding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aws_account_id(self):
        """Gets the aws_account_id of this Finding.


        :return: The aws_account_id of this Finding.
        :rtype: str
        """
        return self._aws_account_id

    @aws_account_id.setter
    def aws_account_id(self, aws_account_id):
        """Sets the aws_account_id of this Finding.


        :param aws_account_id: The aws_account_id of this Finding.
        :type aws_account_id: str
        """
        if aws_account_id is None:
            raise ValueError("Invalid value for `aws_account_id`, must not be `None`")

        self._aws_account_id = aws_account_id

    @property
    def code_vulnerability_details(self):
        """Gets the code_vulnerability_details of this Finding.


        :return: The code_vulnerability_details of this Finding.
        :rtype: FindingCodeVulnerabilityDetails
        """
        return self._code_vulnerability_details

    @code_vulnerability_details.setter
    def code_vulnerability_details(self, code_vulnerability_details):
        """Sets the code_vulnerability_details of this Finding.


        :param code_vulnerability_details: The code_vulnerability_details of this Finding.
        :type code_vulnerability_details: FindingCodeVulnerabilityDetails
        """

        self._code_vulnerability_details = code_vulnerability_details

    @property
    def description(self):
        """Gets the description of this Finding.


        :return: The description of this Finding.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Finding.


        :param description: The description of this Finding.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def epss(self):
        """Gets the epss of this Finding.


        :return: The epss of this Finding.
        :rtype: FindingEpss
        """
        return self._epss

    @epss.setter
    def epss(self, epss):
        """Sets the epss of this Finding.


        :param epss: The epss of this Finding.
        :type epss: FindingEpss
        """

        self._epss = epss

    @property
    def exploit_available(self):
        """Gets the exploit_available of this Finding.


        :return: The exploit_available of this Finding.
        :rtype: ExploitAvailable
        """
        return self._exploit_available

    @exploit_available.setter
    def exploit_available(self, exploit_available):
        """Sets the exploit_available of this Finding.


        :param exploit_available: The exploit_available of this Finding.
        :type exploit_available: ExploitAvailable
        """

        self._exploit_available = exploit_available

    @property
    def exploitability_details(self):
        """Gets the exploitability_details of this Finding.


        :return: The exploitability_details of this Finding.
        :rtype: FindingExploitabilityDetails
        """
        return self._exploitability_details

    @exploitability_details.setter
    def exploitability_details(self, exploitability_details):
        """Sets the exploitability_details of this Finding.


        :param exploitability_details: The exploitability_details of this Finding.
        :type exploitability_details: FindingExploitabilityDetails
        """

        self._exploitability_details = exploitability_details

    @property
    def finding_arn(self):
        """Gets the finding_arn of this Finding.


        :return: The finding_arn of this Finding.
        :rtype: str
        """
        return self._finding_arn

    @finding_arn.setter
    def finding_arn(self, finding_arn):
        """Sets the finding_arn of this Finding.


        :param finding_arn: The finding_arn of this Finding.
        :type finding_arn: str
        """
        if finding_arn is None:
            raise ValueError("Invalid value for `finding_arn`, must not be `None`")

        self._finding_arn = finding_arn

    @property
    def first_observed_at(self):
        """Gets the first_observed_at of this Finding.


        :return: The first_observed_at of this Finding.
        :rtype: datetime
        """
        return self._first_observed_at

    @first_observed_at.setter
    def first_observed_at(self, first_observed_at):
        """Sets the first_observed_at of this Finding.


        :param first_observed_at: The first_observed_at of this Finding.
        :type first_observed_at: datetime
        """
        if first_observed_at is None:
            raise ValueError("Invalid value for `first_observed_at`, must not be `None`")

        self._first_observed_at = first_observed_at

    @property
    def fix_available(self):
        """Gets the fix_available of this Finding.


        :return: The fix_available of this Finding.
        :rtype: FixAvailable
        """
        return self._fix_available

    @fix_available.setter
    def fix_available(self, fix_available):
        """Sets the fix_available of this Finding.


        :param fix_available: The fix_available of this Finding.
        :type fix_available: FixAvailable
        """

        self._fix_available = fix_available

    @property
    def inspector_score(self):
        """Gets the inspector_score of this Finding.


        :return: The inspector_score of this Finding.
        :rtype: float
        """
        return self._inspector_score

    @inspector_score.setter
    def inspector_score(self, inspector_score):
        """Sets the inspector_score of this Finding.


        :param inspector_score: The inspector_score of this Finding.
        :type inspector_score: float
        """

        self._inspector_score = inspector_score

    @property
    def inspector_score_details(self):
        """Gets the inspector_score_details of this Finding.


        :return: The inspector_score_details of this Finding.
        :rtype: FindingInspectorScoreDetails
        """
        return self._inspector_score_details

    @inspector_score_details.setter
    def inspector_score_details(self, inspector_score_details):
        """Sets the inspector_score_details of this Finding.


        :param inspector_score_details: The inspector_score_details of this Finding.
        :type inspector_score_details: FindingInspectorScoreDetails
        """

        self._inspector_score_details = inspector_score_details

    @property
    def last_observed_at(self):
        """Gets the last_observed_at of this Finding.


        :return: The last_observed_at of this Finding.
        :rtype: datetime
        """
        return self._last_observed_at

    @last_observed_at.setter
    def last_observed_at(self, last_observed_at):
        """Sets the last_observed_at of this Finding.


        :param last_observed_at: The last_observed_at of this Finding.
        :type last_observed_at: datetime
        """
        if last_observed_at is None:
            raise ValueError("Invalid value for `last_observed_at`, must not be `None`")

        self._last_observed_at = last_observed_at

    @property
    def network_reachability_details(self):
        """Gets the network_reachability_details of this Finding.


        :return: The network_reachability_details of this Finding.
        :rtype: FindingNetworkReachabilityDetails
        """
        return self._network_reachability_details

    @network_reachability_details.setter
    def network_reachability_details(self, network_reachability_details):
        """Sets the network_reachability_details of this Finding.


        :param network_reachability_details: The network_reachability_details of this Finding.
        :type network_reachability_details: FindingNetworkReachabilityDetails
        """

        self._network_reachability_details = network_reachability_details

    @property
    def package_vulnerability_details(self):
        """Gets the package_vulnerability_details of this Finding.


        :return: The package_vulnerability_details of this Finding.
        :rtype: FindingPackageVulnerabilityDetails
        """
        return self._package_vulnerability_details

    @package_vulnerability_details.setter
    def package_vulnerability_details(self, package_vulnerability_details):
        """Sets the package_vulnerability_details of this Finding.


        :param package_vulnerability_details: The package_vulnerability_details of this Finding.
        :type package_vulnerability_details: FindingPackageVulnerabilityDetails
        """

        self._package_vulnerability_details = package_vulnerability_details

    @property
    def remediation(self):
        """Gets the remediation of this Finding.


        :return: The remediation of this Finding.
        :rtype: FindingRemediation
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this Finding.


        :param remediation: The remediation of this Finding.
        :type remediation: FindingRemediation
        """
        if remediation is None:
            raise ValueError("Invalid value for `remediation`, must not be `None`")

        self._remediation = remediation

    @property
    def resources(self):
        """Gets the resources of this Finding.


        :return: The resources of this Finding.
        :rtype: List
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Finding.


        :param resources: The resources of this Finding.
        :type resources: List
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources

    @property
    def severity(self):
        """Gets the severity of this Finding.


        :return: The severity of this Finding.
        :rtype: Severity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Finding.


        :param severity: The severity of this Finding.
        :type severity: Severity
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this Finding.


        :return: The status of this Finding.
        :rtype: FindingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Finding.


        :param status: The status of this Finding.
        :type status: FindingStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this Finding.


        :return: The title of this Finding.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Finding.


        :param title: The title of this Finding.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Finding.


        :return: The type of this Finding.
        :rtype: FindingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Finding.


        :param type: The type of this Finding.
        :type type: FindingType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Finding.


        :return: The updated_at of this Finding.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Finding.


        :param updated_at: The updated_at of this Finding.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
