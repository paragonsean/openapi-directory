# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_findings_report_request_s3_destination import CreateFindingsReportRequestS3Destination
from openapi_server.models.create_sbom_export_request_resource_filter_criteria import CreateSbomExportRequestResourceFilterCriteria
from openapi_server import util


class CreateSbomExportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_format: str=None, resource_filter_criteria: CreateSbomExportRequestResourceFilterCriteria=None, s3_destination: CreateFindingsReportRequestS3Destination=None):
        """CreateSbomExportRequest - a model defined in OpenAPI

        :param report_format: The report_format of this CreateSbomExportRequest.
        :param resource_filter_criteria: The resource_filter_criteria of this CreateSbomExportRequest.
        :param s3_destination: The s3_destination of this CreateSbomExportRequest.
        """
        self.openapi_types = {
            'report_format': str,
            'resource_filter_criteria': CreateSbomExportRequestResourceFilterCriteria,
            's3_destination': CreateFindingsReportRequestS3Destination
        }

        self.attribute_map = {
            'report_format': 'reportFormat',
            'resource_filter_criteria': 'resourceFilterCriteria',
            's3_destination': 's3Destination'
        }

        self._report_format = report_format
        self._resource_filter_criteria = resource_filter_criteria
        self._s3_destination = s3_destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSbomExportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSbomExport_request of this CreateSbomExportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_format(self):
        """Gets the report_format of this CreateSbomExportRequest.

        The output format for the software bill of materials (SBOM) report.

        :return: The report_format of this CreateSbomExportRequest.
        :rtype: str
        """
        return self._report_format

    @report_format.setter
    def report_format(self, report_format):
        """Sets the report_format of this CreateSbomExportRequest.

        The output format for the software bill of materials (SBOM) report.

        :param report_format: The report_format of this CreateSbomExportRequest.
        :type report_format: str
        """
        allowed_values = ["CYCLONEDX_1_4", "SPDX_2_3"]  # noqa: E501
        if report_format not in allowed_values:
            raise ValueError(
                "Invalid value for `report_format` ({0}), must be one of {1}"
                .format(report_format, allowed_values)
            )

        self._report_format = report_format

    @property
    def resource_filter_criteria(self):
        """Gets the resource_filter_criteria of this CreateSbomExportRequest.


        :return: The resource_filter_criteria of this CreateSbomExportRequest.
        :rtype: CreateSbomExportRequestResourceFilterCriteria
        """
        return self._resource_filter_criteria

    @resource_filter_criteria.setter
    def resource_filter_criteria(self, resource_filter_criteria):
        """Sets the resource_filter_criteria of this CreateSbomExportRequest.


        :param resource_filter_criteria: The resource_filter_criteria of this CreateSbomExportRequest.
        :type resource_filter_criteria: CreateSbomExportRequestResourceFilterCriteria
        """

        self._resource_filter_criteria = resource_filter_criteria

    @property
    def s3_destination(self):
        """Gets the s3_destination of this CreateSbomExportRequest.


        :return: The s3_destination of this CreateSbomExportRequest.
        :rtype: CreateFindingsReportRequestS3Destination
        """
        return self._s3_destination

    @s3_destination.setter
    def s3_destination(self, s3_destination):
        """Sets the s3_destination of this CreateSbomExportRequest.


        :param s3_destination: The s3_destination of this CreateSbomExportRequest.
        :type s3_destination: CreateFindingsReportRequestS3Destination
        """
        if s3_destination is None:
            raise ValueError("Invalid value for `s3_destination`, must not be `None`")

        self._s3_destination = s3_destination
