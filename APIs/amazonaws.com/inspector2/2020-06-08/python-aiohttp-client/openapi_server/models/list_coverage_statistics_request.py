# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_coverage_request_filter_criteria import ListCoverageRequestFilterCriteria
from openapi_server import util


class ListCoverageStatisticsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_criteria: ListCoverageRequestFilterCriteria=None, group_by: str=None, next_token: str=None):
        """ListCoverageStatisticsRequest - a model defined in OpenAPI

        :param filter_criteria: The filter_criteria of this ListCoverageStatisticsRequest.
        :param group_by: The group_by of this ListCoverageStatisticsRequest.
        :param next_token: The next_token of this ListCoverageStatisticsRequest.
        """
        self.openapi_types = {
            'filter_criteria': ListCoverageRequestFilterCriteria,
            'group_by': str,
            'next_token': str
        }

        self.attribute_map = {
            'filter_criteria': 'filterCriteria',
            'group_by': 'groupBy',
            'next_token': 'nextToken'
        }

        self._filter_criteria = filter_criteria
        self._group_by = group_by
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListCoverageStatisticsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListCoverageStatistics_request of this ListCoverageStatisticsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_criteria(self):
        """Gets the filter_criteria of this ListCoverageStatisticsRequest.


        :return: The filter_criteria of this ListCoverageStatisticsRequest.
        :rtype: ListCoverageRequestFilterCriteria
        """
        return self._filter_criteria

    @filter_criteria.setter
    def filter_criteria(self, filter_criteria):
        """Sets the filter_criteria of this ListCoverageStatisticsRequest.


        :param filter_criteria: The filter_criteria of this ListCoverageStatisticsRequest.
        :type filter_criteria: ListCoverageRequestFilterCriteria
        """

        self._filter_criteria = filter_criteria

    @property
    def group_by(self):
        """Gets the group_by of this ListCoverageStatisticsRequest.

        The value to group the results by.

        :return: The group_by of this ListCoverageStatisticsRequest.
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this ListCoverageStatisticsRequest.

        The value to group the results by.

        :param group_by: The group_by of this ListCoverageStatisticsRequest.
        :type group_by: str
        """
        allowed_values = ["SCAN_STATUS_CODE", "SCAN_STATUS_REASON", "ACCOUNT_ID", "RESOURCE_TYPE", "ECR_REPOSITORY_NAME"]  # noqa: E501
        if group_by not in allowed_values:
            raise ValueError(
                "Invalid value for `group_by` ({0}), must be one of {1}"
                .format(group_by, allowed_values)
            )

        self._group_by = group_by

    @property
    def next_token(self):
        """Gets the next_token of this ListCoverageStatisticsRequest.

        A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.

        :return: The next_token of this ListCoverageStatisticsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListCoverageStatisticsRequest.

        A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.

        :param next_token: The next_token of this ListCoverageStatisticsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1000000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1000000`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")

        self._next_token = next_token
