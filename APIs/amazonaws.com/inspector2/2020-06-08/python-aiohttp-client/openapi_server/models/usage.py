# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.usage_type import UsageType
from openapi_server import util


class Usage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: Currency=None, estimated_monthly_cost: float=None, total: float=None, type: UsageType=None):
        """Usage - a model defined in OpenAPI

        :param currency: The currency of this Usage.
        :param estimated_monthly_cost: The estimated_monthly_cost of this Usage.
        :param total: The total of this Usage.
        :param type: The type of this Usage.
        """
        self.openapi_types = {
            'currency': Currency,
            'estimated_monthly_cost': float,
            'total': float,
            'type': UsageType
        }

        self.attribute_map = {
            'currency': 'currency',
            'estimated_monthly_cost': 'estimatedMonthlyCost',
            'total': 'total',
            'type': 'type'
        }

        self._currency = currency
        self._estimated_monthly_cost = estimated_monthly_cost
        self._total = total
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Usage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Usage of this Usage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this Usage.


        :return: The currency of this Usage.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Usage.


        :param currency: The currency of this Usage.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def estimated_monthly_cost(self):
        """Gets the estimated_monthly_cost of this Usage.


        :return: The estimated_monthly_cost of this Usage.
        :rtype: float
        """
        return self._estimated_monthly_cost

    @estimated_monthly_cost.setter
    def estimated_monthly_cost(self, estimated_monthly_cost):
        """Sets the estimated_monthly_cost of this Usage.


        :param estimated_monthly_cost: The estimated_monthly_cost of this Usage.
        :type estimated_monthly_cost: float
        """

        self._estimated_monthly_cost = estimated_monthly_cost

    @property
    def total(self):
        """Gets the total of this Usage.


        :return: The total of this Usage.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Usage.


        :param total: The total of this Usage.
        :type total: float
        """

        self._total = total

    @property
    def type(self):
        """Gets the type of this Usage.


        :return: The type of this Usage.
        :rtype: UsageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Usage.


        :param type: The type of this Usage.
        :type type: UsageType
        """

        self._type = type
