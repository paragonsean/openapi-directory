# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_aggregation_response_severity_counts import RepositoryAggregationResponseSeverityCounts
from openapi_server import util


class RepositoryAggregationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, affected_images: int=None, repository: str=None, severity_counts: RepositoryAggregationResponseSeverityCounts=None):
        """RepositoryAggregationResponse - a model defined in OpenAPI

        :param account_id: The account_id of this RepositoryAggregationResponse.
        :param affected_images: The affected_images of this RepositoryAggregationResponse.
        :param repository: The repository of this RepositoryAggregationResponse.
        :param severity_counts: The severity_counts of this RepositoryAggregationResponse.
        """
        self.openapi_types = {
            'account_id': str,
            'affected_images': int,
            'repository': str,
            'severity_counts': RepositoryAggregationResponseSeverityCounts
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'affected_images': 'affectedImages',
            'repository': 'repository',
            'severity_counts': 'severityCounts'
        }

        self._account_id = account_id
        self._affected_images = affected_images
        self._repository = repository
        self._severity_counts = severity_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryAggregationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositoryAggregationResponse of this RepositoryAggregationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this RepositoryAggregationResponse.


        :return: The account_id of this RepositoryAggregationResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RepositoryAggregationResponse.


        :param account_id: The account_id of this RepositoryAggregationResponse.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def affected_images(self):
        """Gets the affected_images of this RepositoryAggregationResponse.


        :return: The affected_images of this RepositoryAggregationResponse.
        :rtype: int
        """
        return self._affected_images

    @affected_images.setter
    def affected_images(self, affected_images):
        """Sets the affected_images of this RepositoryAggregationResponse.


        :param affected_images: The affected_images of this RepositoryAggregationResponse.
        :type affected_images: int
        """

        self._affected_images = affected_images

    @property
    def repository(self):
        """Gets the repository of this RepositoryAggregationResponse.


        :return: The repository of this RepositoryAggregationResponse.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this RepositoryAggregationResponse.


        :param repository: The repository of this RepositoryAggregationResponse.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def severity_counts(self):
        """Gets the severity_counts of this RepositoryAggregationResponse.


        :return: The severity_counts of this RepositoryAggregationResponse.
        :rtype: RepositoryAggregationResponseSeverityCounts
        """
        return self._severity_counts

    @severity_counts.setter
    def severity_counts(self, severity_counts):
        """Sets the severity_counts of this RepositoryAggregationResponse.


        :param severity_counts: The severity_counts of this RepositoryAggregationResponse.
        :type severity_counts: RepositoryAggregationResponseSeverityCounts
        """

        self._severity_counts = severity_counts
