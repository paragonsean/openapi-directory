# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_scan_metadata_ec2 import ResourceScanMetadataEc2
from openapi_server.models.resource_scan_metadata_ecr_image import ResourceScanMetadataEcrImage
from openapi_server.models.resource_scan_metadata_ecr_repository import ResourceScanMetadataEcrRepository
from openapi_server.models.resource_scan_metadata_lambda_function import ResourceScanMetadataLambdaFunction
from openapi_server import util


class ResourceScanMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ec2: ResourceScanMetadataEc2=None, ecr_image: ResourceScanMetadataEcrImage=None, ecr_repository: ResourceScanMetadataEcrRepository=None, lambda_function: ResourceScanMetadataLambdaFunction=None):
        """ResourceScanMetadata - a model defined in OpenAPI

        :param ec2: The ec2 of this ResourceScanMetadata.
        :param ecr_image: The ecr_image of this ResourceScanMetadata.
        :param ecr_repository: The ecr_repository of this ResourceScanMetadata.
        :param lambda_function: The lambda_function of this ResourceScanMetadata.
        """
        self.openapi_types = {
            'ec2': ResourceScanMetadataEc2,
            'ecr_image': ResourceScanMetadataEcrImage,
            'ecr_repository': ResourceScanMetadataEcrRepository,
            'lambda_function': ResourceScanMetadataLambdaFunction
        }

        self.attribute_map = {
            'ec2': 'ec2',
            'ecr_image': 'ecrImage',
            'ecr_repository': 'ecrRepository',
            'lambda_function': 'lambdaFunction'
        }

        self._ec2 = ec2
        self._ecr_image = ecr_image
        self._ecr_repository = ecr_repository
        self._lambda_function = lambda_function

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceScanMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceScanMetadata of this ResourceScanMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ec2(self):
        """Gets the ec2 of this ResourceScanMetadata.


        :return: The ec2 of this ResourceScanMetadata.
        :rtype: ResourceScanMetadataEc2
        """
        return self._ec2

    @ec2.setter
    def ec2(self, ec2):
        """Sets the ec2 of this ResourceScanMetadata.


        :param ec2: The ec2 of this ResourceScanMetadata.
        :type ec2: ResourceScanMetadataEc2
        """

        self._ec2 = ec2

    @property
    def ecr_image(self):
        """Gets the ecr_image of this ResourceScanMetadata.


        :return: The ecr_image of this ResourceScanMetadata.
        :rtype: ResourceScanMetadataEcrImage
        """
        return self._ecr_image

    @ecr_image.setter
    def ecr_image(self, ecr_image):
        """Sets the ecr_image of this ResourceScanMetadata.


        :param ecr_image: The ecr_image of this ResourceScanMetadata.
        :type ecr_image: ResourceScanMetadataEcrImage
        """

        self._ecr_image = ecr_image

    @property
    def ecr_repository(self):
        """Gets the ecr_repository of this ResourceScanMetadata.


        :return: The ecr_repository of this ResourceScanMetadata.
        :rtype: ResourceScanMetadataEcrRepository
        """
        return self._ecr_repository

    @ecr_repository.setter
    def ecr_repository(self, ecr_repository):
        """Sets the ecr_repository of this ResourceScanMetadata.


        :param ecr_repository: The ecr_repository of this ResourceScanMetadata.
        :type ecr_repository: ResourceScanMetadataEcrRepository
        """

        self._ecr_repository = ecr_repository

    @property
    def lambda_function(self):
        """Gets the lambda_function of this ResourceScanMetadata.


        :return: The lambda_function of this ResourceScanMetadata.
        :rtype: ResourceScanMetadataLambdaFunction
        """
        return self._lambda_function

    @lambda_function.setter
    def lambda_function(self, lambda_function):
        """Sets the lambda_function of this ResourceScanMetadata.


        :param lambda_function: The lambda_function of this ResourceScanMetadata.
        :type lambda_function: ResourceScanMetadataLambdaFunction
        """

        self._lambda_function = lambda_function
