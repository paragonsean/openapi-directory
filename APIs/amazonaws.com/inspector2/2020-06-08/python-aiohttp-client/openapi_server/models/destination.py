# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, key_prefix: str=None, kms_key_arn: str=None):
        """Destination - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this Destination.
        :param key_prefix: The key_prefix of this Destination.
        :param kms_key_arn: The kms_key_arn of this Destination.
        """
        self.openapi_types = {
            'bucket_name': str,
            'key_prefix': str,
            'kms_key_arn': str
        }

        self.attribute_map = {
            'bucket_name': 'bucketName',
            'key_prefix': 'keyPrefix',
            'kms_key_arn': 'kmsKeyArn'
        }

        self._bucket_name = bucket_name
        self._key_prefix = key_prefix
        self._kms_key_arn = kms_key_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destination of this Destination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this Destination.


        :return: The bucket_name of this Destination.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this Destination.


        :param bucket_name: The bucket_name of this Destination.
        :type bucket_name: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")

        self._bucket_name = bucket_name

    @property
    def key_prefix(self):
        """Gets the key_prefix of this Destination.


        :return: The key_prefix of this Destination.
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix):
        """Sets the key_prefix of this Destination.


        :param key_prefix: The key_prefix of this Destination.
        :type key_prefix: str
        """

        self._key_prefix = key_prefix

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this Destination.


        :return: The kms_key_arn of this Destination.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this Destination.


        :param kms_key_arn: The kms_key_arn of this Destination.
        :type kms_key_arn: str
        """
        if kms_key_arn is None:
            raise ValueError("Invalid value for `kms_key_arn`, must not be `None`")

        self._kms_key_arn = kms_key_arn
