# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation import Operation
from openapi_server.models.service import Service
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation: Operation=None, service: Service=None):
        """Permission - a model defined in OpenAPI

        :param operation: The operation of this Permission.
        :param service: The service of this Permission.
        """
        self.openapi_types = {
            'operation': Operation,
            'service': Service
        }

        self.attribute_map = {
            'operation': 'operation',
            'service': 'service'
        }

        self._operation = operation
        self._service = service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this Permission.


        :return: The operation of this Permission.
        :rtype: Operation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Permission.


        :param operation: The operation of this Permission.
        :type operation: Operation
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def service(self):
        """Gets the service of this Permission.


        :return: The service of this Permission.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Permission.


        :param service: The service of this Permission.
        :type service: Service
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service
