# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_vulnerability_details_file_path import CodeVulnerabilityDetailsFilePath
from openapi_server import util


class CodeVulnerabilityDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cwes: List=None, detector_id: str=None, detector_name: str=None, detector_tags: List=None, file_path: CodeVulnerabilityDetailsFilePath=None, reference_urls: List=None, rule_id: str=None, source_lambda_layer_arn: str=None):
        """CodeVulnerabilityDetails - a model defined in OpenAPI

        :param cwes: The cwes of this CodeVulnerabilityDetails.
        :param detector_id: The detector_id of this CodeVulnerabilityDetails.
        :param detector_name: The detector_name of this CodeVulnerabilityDetails.
        :param detector_tags: The detector_tags of this CodeVulnerabilityDetails.
        :param file_path: The file_path of this CodeVulnerabilityDetails.
        :param reference_urls: The reference_urls of this CodeVulnerabilityDetails.
        :param rule_id: The rule_id of this CodeVulnerabilityDetails.
        :param source_lambda_layer_arn: The source_lambda_layer_arn of this CodeVulnerabilityDetails.
        """
        self.openapi_types = {
            'cwes': List,
            'detector_id': str,
            'detector_name': str,
            'detector_tags': List,
            'file_path': CodeVulnerabilityDetailsFilePath,
            'reference_urls': List,
            'rule_id': str,
            'source_lambda_layer_arn': str
        }

        self.attribute_map = {
            'cwes': 'cwes',
            'detector_id': 'detectorId',
            'detector_name': 'detectorName',
            'detector_tags': 'detectorTags',
            'file_path': 'filePath',
            'reference_urls': 'referenceUrls',
            'rule_id': 'ruleId',
            'source_lambda_layer_arn': 'sourceLambdaLayerArn'
        }

        self._cwes = cwes
        self._detector_id = detector_id
        self._detector_name = detector_name
        self._detector_tags = detector_tags
        self._file_path = file_path
        self._reference_urls = reference_urls
        self._rule_id = rule_id
        self._source_lambda_layer_arn = source_lambda_layer_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeVulnerabilityDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeVulnerabilityDetails of this CodeVulnerabilityDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cwes(self):
        """Gets the cwes of this CodeVulnerabilityDetails.


        :return: The cwes of this CodeVulnerabilityDetails.
        :rtype: List
        """
        return self._cwes

    @cwes.setter
    def cwes(self, cwes):
        """Sets the cwes of this CodeVulnerabilityDetails.


        :param cwes: The cwes of this CodeVulnerabilityDetails.
        :type cwes: List
        """
        if cwes is None:
            raise ValueError("Invalid value for `cwes`, must not be `None`")

        self._cwes = cwes

    @property
    def detector_id(self):
        """Gets the detector_id of this CodeVulnerabilityDetails.


        :return: The detector_id of this CodeVulnerabilityDetails.
        :rtype: str
        """
        return self._detector_id

    @detector_id.setter
    def detector_id(self, detector_id):
        """Sets the detector_id of this CodeVulnerabilityDetails.


        :param detector_id: The detector_id of this CodeVulnerabilityDetails.
        :type detector_id: str
        """
        if detector_id is None:
            raise ValueError("Invalid value for `detector_id`, must not be `None`")

        self._detector_id = detector_id

    @property
    def detector_name(self):
        """Gets the detector_name of this CodeVulnerabilityDetails.


        :return: The detector_name of this CodeVulnerabilityDetails.
        :rtype: str
        """
        return self._detector_name

    @detector_name.setter
    def detector_name(self, detector_name):
        """Sets the detector_name of this CodeVulnerabilityDetails.


        :param detector_name: The detector_name of this CodeVulnerabilityDetails.
        :type detector_name: str
        """
        if detector_name is None:
            raise ValueError("Invalid value for `detector_name`, must not be `None`")

        self._detector_name = detector_name

    @property
    def detector_tags(self):
        """Gets the detector_tags of this CodeVulnerabilityDetails.


        :return: The detector_tags of this CodeVulnerabilityDetails.
        :rtype: List
        """
        return self._detector_tags

    @detector_tags.setter
    def detector_tags(self, detector_tags):
        """Sets the detector_tags of this CodeVulnerabilityDetails.


        :param detector_tags: The detector_tags of this CodeVulnerabilityDetails.
        :type detector_tags: List
        """

        self._detector_tags = detector_tags

    @property
    def file_path(self):
        """Gets the file_path of this CodeVulnerabilityDetails.


        :return: The file_path of this CodeVulnerabilityDetails.
        :rtype: CodeVulnerabilityDetailsFilePath
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this CodeVulnerabilityDetails.


        :param file_path: The file_path of this CodeVulnerabilityDetails.
        :type file_path: CodeVulnerabilityDetailsFilePath
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def reference_urls(self):
        """Gets the reference_urls of this CodeVulnerabilityDetails.


        :return: The reference_urls of this CodeVulnerabilityDetails.
        :rtype: List
        """
        return self._reference_urls

    @reference_urls.setter
    def reference_urls(self, reference_urls):
        """Sets the reference_urls of this CodeVulnerabilityDetails.


        :param reference_urls: The reference_urls of this CodeVulnerabilityDetails.
        :type reference_urls: List
        """

        self._reference_urls = reference_urls

    @property
    def rule_id(self):
        """Gets the rule_id of this CodeVulnerabilityDetails.


        :return: The rule_id of this CodeVulnerabilityDetails.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this CodeVulnerabilityDetails.


        :param rule_id: The rule_id of this CodeVulnerabilityDetails.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def source_lambda_layer_arn(self):
        """Gets the source_lambda_layer_arn of this CodeVulnerabilityDetails.


        :return: The source_lambda_layer_arn of this CodeVulnerabilityDetails.
        :rtype: str
        """
        return self._source_lambda_layer_arn

    @source_lambda_layer_arn.setter
    def source_lambda_layer_arn(self, source_lambda_layer_arn):
        """Sets the source_lambda_layer_arn of this CodeVulnerabilityDetails.


        :param source_lambda_layer_arn: The source_lambda_layer_arn of this CodeVulnerabilityDetails.
        :type source_lambda_layer_arn: str
        """

        self._source_lambda_layer_arn = source_lambda_layer_arn
