# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResetEncryptionKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_type: str=None, scan_type: str=None):
        """ResetEncryptionKeyRequest - a model defined in OpenAPI

        :param resource_type: The resource_type of this ResetEncryptionKeyRequest.
        :param scan_type: The scan_type of this ResetEncryptionKeyRequest.
        """
        self.openapi_types = {
            'resource_type': str,
            'scan_type': str
        }

        self.attribute_map = {
            'resource_type': 'resourceType',
            'scan_type': 'scanType'
        }

        self._resource_type = resource_type
        self._scan_type = scan_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResetEncryptionKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResetEncryptionKey_request of this ResetEncryptionKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_type(self):
        """Gets the resource_type of this ResetEncryptionKeyRequest.

        The resource type the key encrypts.

        :return: The resource_type of this ResetEncryptionKeyRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResetEncryptionKeyRequest.

        The resource type the key encrypts.

        :param resource_type: The resource_type of this ResetEncryptionKeyRequest.
        :type resource_type: str
        """
        allowed_values = ["AWS_EC2_INSTANCE", "AWS_ECR_CONTAINER_IMAGE", "AWS_ECR_REPOSITORY", "AWS_LAMBDA_FUNCTION"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def scan_type(self):
        """Gets the scan_type of this ResetEncryptionKeyRequest.

        The scan type the key encrypts.

        :return: The scan_type of this ResetEncryptionKeyRequest.
        :rtype: str
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this ResetEncryptionKeyRequest.

        The scan type the key encrypts.

        :param scan_type: The scan_type of this ResetEncryptionKeyRequest.
        :type scan_type: str
        """
        allowed_values = ["NETWORK", "PACKAGE", "CODE"]  # noqa: E501
        if scan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scan_type` ({0}), must be one of {1}"
                .format(scan_type, allowed_values)
            )

        self._scan_type = scan_type
