# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchVulnerabilitiesRequestFilterCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vulnerability_ids: List=None):
        """SearchVulnerabilitiesRequestFilterCriteria - a model defined in OpenAPI

        :param vulnerability_ids: The vulnerability_ids of this SearchVulnerabilitiesRequestFilterCriteria.
        """
        self.openapi_types = {
            'vulnerability_ids': List
        }

        self.attribute_map = {
            'vulnerability_ids': 'vulnerabilityIds'
        }

        self._vulnerability_ids = vulnerability_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchVulnerabilitiesRequestFilterCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchVulnerabilitiesRequest_filterCriteria of this SearchVulnerabilitiesRequestFilterCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vulnerability_ids(self):
        """Gets the vulnerability_ids of this SearchVulnerabilitiesRequestFilterCriteria.


        :return: The vulnerability_ids of this SearchVulnerabilitiesRequestFilterCriteria.
        :rtype: List
        """
        return self._vulnerability_ids

    @vulnerability_ids.setter
    def vulnerability_ids(self, vulnerability_ids):
        """Sets the vulnerability_ids of this SearchVulnerabilitiesRequestFilterCriteria.


        :param vulnerability_ids: The vulnerability_ids of this SearchVulnerabilitiesRequestFilterCriteria.
        :type vulnerability_ids: List
        """
        if vulnerability_ids is None:
            raise ValueError("Invalid value for `vulnerability_ids`, must not be `None`")

        self._vulnerability_ids = vulnerability_ids
