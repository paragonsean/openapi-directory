# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class FailedMemberAccountEc2DeepInspectionStatusState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, ec2_scan_status: Status=None, error_message: str=None):
        """FailedMemberAccountEc2DeepInspectionStatusState - a model defined in OpenAPI

        :param account_id: The account_id of this FailedMemberAccountEc2DeepInspectionStatusState.
        :param ec2_scan_status: The ec2_scan_status of this FailedMemberAccountEc2DeepInspectionStatusState.
        :param error_message: The error_message of this FailedMemberAccountEc2DeepInspectionStatusState.
        """
        self.openapi_types = {
            'account_id': str,
            'ec2_scan_status': Status,
            'error_message': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'ec2_scan_status': 'ec2ScanStatus',
            'error_message': 'errorMessage'
        }

        self._account_id = account_id
        self._ec2_scan_status = ec2_scan_status
        self._error_message = error_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailedMemberAccountEc2DeepInspectionStatusState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailedMemberAccountEc2DeepInspectionStatusState of this FailedMemberAccountEc2DeepInspectionStatusState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this FailedMemberAccountEc2DeepInspectionStatusState.


        :return: The account_id of this FailedMemberAccountEc2DeepInspectionStatusState.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this FailedMemberAccountEc2DeepInspectionStatusState.


        :param account_id: The account_id of this FailedMemberAccountEc2DeepInspectionStatusState.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def ec2_scan_status(self):
        """Gets the ec2_scan_status of this FailedMemberAccountEc2DeepInspectionStatusState.


        :return: The ec2_scan_status of this FailedMemberAccountEc2DeepInspectionStatusState.
        :rtype: Status
        """
        return self._ec2_scan_status

    @ec2_scan_status.setter
    def ec2_scan_status(self, ec2_scan_status):
        """Sets the ec2_scan_status of this FailedMemberAccountEc2DeepInspectionStatusState.


        :param ec2_scan_status: The ec2_scan_status of this FailedMemberAccountEc2DeepInspectionStatusState.
        :type ec2_scan_status: Status
        """

        self._ec2_scan_status = ec2_scan_status

    @property
    def error_message(self):
        """Gets the error_message of this FailedMemberAccountEc2DeepInspectionStatusState.


        :return: The error_message of this FailedMemberAccountEc2DeepInspectionStatusState.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this FailedMemberAccountEc2DeepInspectionStatusState.


        :param error_message: The error_message of this FailedMemberAccountEc2DeepInspectionStatusState.
        :type error_message: str
        """

        self._error_message = error_message
