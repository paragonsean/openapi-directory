# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PackageFilterEpoch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lower_inclusive: float=None, upper_inclusive: float=None):
        """PackageFilterEpoch - a model defined in OpenAPI

        :param lower_inclusive: The lower_inclusive of this PackageFilterEpoch.
        :param upper_inclusive: The upper_inclusive of this PackageFilterEpoch.
        """
        self.openapi_types = {
            'lower_inclusive': float,
            'upper_inclusive': float
        }

        self.attribute_map = {
            'lower_inclusive': 'lowerInclusive',
            'upper_inclusive': 'upperInclusive'
        }

        self._lower_inclusive = lower_inclusive
        self._upper_inclusive = upper_inclusive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageFilterEpoch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageFilter_epoch of this PackageFilterEpoch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lower_inclusive(self):
        """Gets the lower_inclusive of this PackageFilterEpoch.


        :return: The lower_inclusive of this PackageFilterEpoch.
        :rtype: float
        """
        return self._lower_inclusive

    @lower_inclusive.setter
    def lower_inclusive(self, lower_inclusive):
        """Sets the lower_inclusive of this PackageFilterEpoch.


        :param lower_inclusive: The lower_inclusive of this PackageFilterEpoch.
        :type lower_inclusive: float
        """

        self._lower_inclusive = lower_inclusive

    @property
    def upper_inclusive(self):
        """Gets the upper_inclusive of this PackageFilterEpoch.


        :return: The upper_inclusive of this PackageFilterEpoch.
        :rtype: float
        """
        return self._upper_inclusive

    @upper_inclusive.setter
    def upper_inclusive(self, upper_inclusive):
        """Sets the upper_inclusive of this PackageFilterEpoch.


        :param upper_inclusive: The upper_inclusive of this PackageFilterEpoch.
        :type upper_inclusive: float
        """

        self._upper_inclusive = upper_inclusive
