# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Evidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evidence_detail: str=None, evidence_rule: str=None, severity: str=None):
        """Evidence - a model defined in OpenAPI

        :param evidence_detail: The evidence_detail of this Evidence.
        :param evidence_rule: The evidence_rule of this Evidence.
        :param severity: The severity of this Evidence.
        """
        self.openapi_types = {
            'evidence_detail': str,
            'evidence_rule': str,
            'severity': str
        }

        self.attribute_map = {
            'evidence_detail': 'evidenceDetail',
            'evidence_rule': 'evidenceRule',
            'severity': 'severity'
        }

        self._evidence_detail = evidence_detail
        self._evidence_rule = evidence_rule
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Evidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Evidence of this Evidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evidence_detail(self):
        """Gets the evidence_detail of this Evidence.


        :return: The evidence_detail of this Evidence.
        :rtype: str
        """
        return self._evidence_detail

    @evidence_detail.setter
    def evidence_detail(self, evidence_detail):
        """Sets the evidence_detail of this Evidence.


        :param evidence_detail: The evidence_detail of this Evidence.
        :type evidence_detail: str
        """

        self._evidence_detail = evidence_detail

    @property
    def evidence_rule(self):
        """Gets the evidence_rule of this Evidence.


        :return: The evidence_rule of this Evidence.
        :rtype: str
        """
        return self._evidence_rule

    @evidence_rule.setter
    def evidence_rule(self, evidence_rule):
        """Sets the evidence_rule of this Evidence.


        :param evidence_rule: The evidence_rule of this Evidence.
        :type evidence_rule: str
        """

        self._evidence_rule = evidence_rule

    @property
    def severity(self):
        """Gets the severity of this Evidence.


        :return: The severity of this Evidence.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Evidence.


        :param severity: The severity of this Evidence.
        :type severity: str
        """

        self._severity = severity
