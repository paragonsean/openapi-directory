# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ami_aggregation_response_severity_counts import AmiAggregationResponseSeverityCounts
from openapi_server import util


class AggregationResponsePackageAggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, package_name: str=None, severity_counts: AmiAggregationResponseSeverityCounts=None):
        """AggregationResponsePackageAggregation - a model defined in OpenAPI

        :param account_id: The account_id of this AggregationResponsePackageAggregation.
        :param package_name: The package_name of this AggregationResponsePackageAggregation.
        :param severity_counts: The severity_counts of this AggregationResponsePackageAggregation.
        """
        self.openapi_types = {
            'account_id': str,
            'package_name': str,
            'severity_counts': AmiAggregationResponseSeverityCounts
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'package_name': 'packageName',
            'severity_counts': 'severityCounts'
        }

        self._account_id = account_id
        self._package_name = package_name
        self._severity_counts = severity_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationResponsePackageAggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationResponse_packageAggregation of this AggregationResponsePackageAggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AggregationResponsePackageAggregation.


        :return: The account_id of this AggregationResponsePackageAggregation.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AggregationResponsePackageAggregation.


        :param account_id: The account_id of this AggregationResponsePackageAggregation.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def package_name(self):
        """Gets the package_name of this AggregationResponsePackageAggregation.


        :return: The package_name of this AggregationResponsePackageAggregation.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this AggregationResponsePackageAggregation.


        :param package_name: The package_name of this AggregationResponsePackageAggregation.
        :type package_name: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")

        self._package_name = package_name

    @property
    def severity_counts(self):
        """Gets the severity_counts of this AggregationResponsePackageAggregation.


        :return: The severity_counts of this AggregationResponsePackageAggregation.
        :rtype: AmiAggregationResponseSeverityCounts
        """
        return self._severity_counts

    @severity_counts.setter
    def severity_counts(self, severity_counts):
        """Sets the severity_counts of this AggregationResponsePackageAggregation.


        :param severity_counts: The severity_counts of this AggregationResponsePackageAggregation.
        :type severity_counts: AmiAggregationResponseSeverityCounts
        """

        self._severity_counts = severity_counts
