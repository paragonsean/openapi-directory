# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_snippet_error_code import CodeSnippetErrorCode
from openapi_server import util


class CodeSnippetError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: CodeSnippetErrorCode=None, error_message: str=None, finding_arn: str=None):
        """CodeSnippetError - a model defined in OpenAPI

        :param error_code: The error_code of this CodeSnippetError.
        :param error_message: The error_message of this CodeSnippetError.
        :param finding_arn: The finding_arn of this CodeSnippetError.
        """
        self.openapi_types = {
            'error_code': CodeSnippetErrorCode,
            'error_message': str,
            'finding_arn': str
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'finding_arn': 'findingArn'
        }

        self._error_code = error_code
        self._error_message = error_message
        self._finding_arn = finding_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeSnippetError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeSnippetError of this CodeSnippetError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this CodeSnippetError.


        :return: The error_code of this CodeSnippetError.
        :rtype: CodeSnippetErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this CodeSnippetError.


        :param error_code: The error_code of this CodeSnippetError.
        :type error_code: CodeSnippetErrorCode
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this CodeSnippetError.


        :return: The error_message of this CodeSnippetError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CodeSnippetError.


        :param error_message: The error_message of this CodeSnippetError.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message

    @property
    def finding_arn(self):
        """Gets the finding_arn of this CodeSnippetError.


        :return: The finding_arn of this CodeSnippetError.
        :rtype: str
        """
        return self._finding_arn

    @finding_arn.setter
    def finding_arn(self, finding_arn):
        """Sets the finding_arn of this CodeSnippetError.


        :param finding_arn: The finding_arn of this CodeSnippetError.
        :type finding_arn: str
        """
        if finding_arn is None:
            raise ValueError("Invalid value for `finding_arn`, must not be `None`")

        self._finding_arn = finding_arn
