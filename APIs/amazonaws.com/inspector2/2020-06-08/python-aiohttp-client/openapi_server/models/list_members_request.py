# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListMembersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, next_token: str=None, only_associated: bool=None):
        """ListMembersRequest - a model defined in OpenAPI

        :param max_results: The max_results of this ListMembersRequest.
        :param next_token: The next_token of this ListMembersRequest.
        :param only_associated: The only_associated of this ListMembersRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'next_token': str,
            'only_associated': bool
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'only_associated': 'onlyAssociated'
        }

        self._max_results = max_results
        self._next_token = next_token
        self._only_associated = only_associated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListMembersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListMembers_request of this ListMembersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this ListMembersRequest.

        The maximum number of results to return in the response.

        :return: The max_results of this ListMembersRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListMembersRequest.

        The maximum number of results to return in the response.

        :param max_results: The max_results of this ListMembersRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListMembersRequest.

        A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.

        :return: The next_token of this ListMembersRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListMembersRequest.

        A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.

        :param next_token: The next_token of this ListMembersRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1000000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1000000`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")

        self._next_token = next_token

    @property
    def only_associated(self):
        """Gets the only_associated of this ListMembersRequest.

        Specifies whether to list only currently associated members if <code>True</code> or to list all members within the organization if <code>False</code>.

        :return: The only_associated of this ListMembersRequest.
        :rtype: bool
        """
        return self._only_associated

    @only_associated.setter
    def only_associated(self, only_associated):
        """Sets the only_associated of this ListMembersRequest.

        Specifies whether to list only currently associated members if <code>True</code> or to list all members within the organization if <code>False</code>.

        :param only_associated: The only_associated of this ListMembersRequest.
        :type only_associated: bool
        """

        self._only_associated = only_associated
