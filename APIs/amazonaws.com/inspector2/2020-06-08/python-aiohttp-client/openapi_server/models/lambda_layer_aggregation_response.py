# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.severity_counts import SeverityCounts
from openapi_server import util


class LambdaLayerAggregationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, function_name: str=None, layer_arn: str=None, resource_id: str=None, severity_counts: SeverityCounts=None):
        """LambdaLayerAggregationResponse - a model defined in OpenAPI

        :param account_id: The account_id of this LambdaLayerAggregationResponse.
        :param function_name: The function_name of this LambdaLayerAggregationResponse.
        :param layer_arn: The layer_arn of this LambdaLayerAggregationResponse.
        :param resource_id: The resource_id of this LambdaLayerAggregationResponse.
        :param severity_counts: The severity_counts of this LambdaLayerAggregationResponse.
        """
        self.openapi_types = {
            'account_id': str,
            'function_name': str,
            'layer_arn': str,
            'resource_id': str,
            'severity_counts': SeverityCounts
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'function_name': 'functionName',
            'layer_arn': 'layerArn',
            'resource_id': 'resourceId',
            'severity_counts': 'severityCounts'
        }

        self._account_id = account_id
        self._function_name = function_name
        self._layer_arn = layer_arn
        self._resource_id = resource_id
        self._severity_counts = severity_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LambdaLayerAggregationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LambdaLayerAggregationResponse of this LambdaLayerAggregationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this LambdaLayerAggregationResponse.


        :return: The account_id of this LambdaLayerAggregationResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this LambdaLayerAggregationResponse.


        :param account_id: The account_id of this LambdaLayerAggregationResponse.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def function_name(self):
        """Gets the function_name of this LambdaLayerAggregationResponse.


        :return: The function_name of this LambdaLayerAggregationResponse.
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this LambdaLayerAggregationResponse.


        :param function_name: The function_name of this LambdaLayerAggregationResponse.
        :type function_name: str
        """
        if function_name is None:
            raise ValueError("Invalid value for `function_name`, must not be `None`")

        self._function_name = function_name

    @property
    def layer_arn(self):
        """Gets the layer_arn of this LambdaLayerAggregationResponse.


        :return: The layer_arn of this LambdaLayerAggregationResponse.
        :rtype: str
        """
        return self._layer_arn

    @layer_arn.setter
    def layer_arn(self, layer_arn):
        """Sets the layer_arn of this LambdaLayerAggregationResponse.


        :param layer_arn: The layer_arn of this LambdaLayerAggregationResponse.
        :type layer_arn: str
        """
        if layer_arn is None:
            raise ValueError("Invalid value for `layer_arn`, must not be `None`")

        self._layer_arn = layer_arn

    @property
    def resource_id(self):
        """Gets the resource_id of this LambdaLayerAggregationResponse.


        :return: The resource_id of this LambdaLayerAggregationResponse.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this LambdaLayerAggregationResponse.


        :param resource_id: The resource_id of this LambdaLayerAggregationResponse.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def severity_counts(self):
        """Gets the severity_counts of this LambdaLayerAggregationResponse.


        :return: The severity_counts of this LambdaLayerAggregationResponse.
        :rtype: SeverityCounts
        """
        return self._severity_counts

    @severity_counts.setter
    def severity_counts(self, severity_counts):
        """Sets the severity_counts of this LambdaLayerAggregationResponse.


        :param severity_counts: The severity_counts of this LambdaLayerAggregationResponse.
        :type severity_counts: SeverityCounts
        """

        self._severity_counts = severity_counts
