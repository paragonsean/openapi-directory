# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetFindingDetailsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, finding_arns: List[str]=None):
        """BatchGetFindingDetailsRequest - a model defined in OpenAPI

        :param finding_arns: The finding_arns of this BatchGetFindingDetailsRequest.
        """
        self.openapi_types = {
            'finding_arns': List[str]
        }

        self.attribute_map = {
            'finding_arns': 'findingArns'
        }

        self._finding_arns = finding_arns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetFindingDetailsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetFindingDetails_request of this BatchGetFindingDetailsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def finding_arns(self):
        """Gets the finding_arns of this BatchGetFindingDetailsRequest.

        A list of finding ARNs.

        :return: The finding_arns of this BatchGetFindingDetailsRequest.
        :rtype: List[str]
        """
        return self._finding_arns

    @finding_arns.setter
    def finding_arns(self, finding_arns):
        """Sets the finding_arns of this BatchGetFindingDetailsRequest.

        A list of finding ARNs.

        :param finding_arns: The finding_arns of this BatchGetFindingDetailsRequest.
        :type finding_arns: List[str]
        """
        if finding_arns is None:
            raise ValueError("Invalid value for `finding_arns`, must not be `None`")
        if finding_arns is not None and len(finding_arns) > 10:
            raise ValueError("Invalid value for `finding_arns`, number of items must be less than or equal to `10`")
        if finding_arns is not None and len(finding_arns) < 1:
            raise ValueError("Invalid value for `finding_arns`, number of items must be greater than or equal to `1`")

        self._finding_arns = finding_arns
