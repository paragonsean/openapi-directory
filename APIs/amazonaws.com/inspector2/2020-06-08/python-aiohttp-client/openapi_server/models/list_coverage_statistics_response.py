# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListCoverageStatisticsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts_by_group: List=None, next_token: str=None, total_counts: int=None):
        """ListCoverageStatisticsResponse - a model defined in OpenAPI

        :param counts_by_group: The counts_by_group of this ListCoverageStatisticsResponse.
        :param next_token: The next_token of this ListCoverageStatisticsResponse.
        :param total_counts: The total_counts of this ListCoverageStatisticsResponse.
        """
        self.openapi_types = {
            'counts_by_group': List,
            'next_token': str,
            'total_counts': int
        }

        self.attribute_map = {
            'counts_by_group': 'countsByGroup',
            'next_token': 'nextToken',
            'total_counts': 'totalCounts'
        }

        self._counts_by_group = counts_by_group
        self._next_token = next_token
        self._total_counts = total_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListCoverageStatisticsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListCoverageStatisticsResponse of this ListCoverageStatisticsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts_by_group(self):
        """Gets the counts_by_group of this ListCoverageStatisticsResponse.


        :return: The counts_by_group of this ListCoverageStatisticsResponse.
        :rtype: List
        """
        return self._counts_by_group

    @counts_by_group.setter
    def counts_by_group(self, counts_by_group):
        """Sets the counts_by_group of this ListCoverageStatisticsResponse.


        :param counts_by_group: The counts_by_group of this ListCoverageStatisticsResponse.
        :type counts_by_group: List
        """

        self._counts_by_group = counts_by_group

    @property
    def next_token(self):
        """Gets the next_token of this ListCoverageStatisticsResponse.


        :return: The next_token of this ListCoverageStatisticsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListCoverageStatisticsResponse.


        :param next_token: The next_token of this ListCoverageStatisticsResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def total_counts(self):
        """Gets the total_counts of this ListCoverageStatisticsResponse.


        :return: The total_counts of this ListCoverageStatisticsResponse.
        :rtype: int
        """
        return self._total_counts

    @total_counts.setter
    def total_counts(self, total_counts):
        """Sets the total_counts of this ListCoverageStatisticsResponse.


        :param total_counts: The total_counts of this ListCoverageStatisticsResponse.
        :type total_counts: int
        """
        if total_counts is None:
            raise ValueError("Invalid value for `total_counts`, must not be `None`")

        self._total_counts = total_counts
