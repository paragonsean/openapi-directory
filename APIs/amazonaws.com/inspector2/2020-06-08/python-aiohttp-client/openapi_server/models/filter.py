# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_action import FilterAction
from openapi_server.models.filter_criteria import FilterCriteria
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: FilterAction=None, arn: str=None, created_at: datetime=None, criteria: FilterCriteria=None, description: str=None, name: str=None, owner_id: str=None, reason: str=None, tags: Dict=None, updated_at: datetime=None):
        """Filter - a model defined in OpenAPI

        :param action: The action of this Filter.
        :param arn: The arn of this Filter.
        :param created_at: The created_at of this Filter.
        :param criteria: The criteria of this Filter.
        :param description: The description of this Filter.
        :param name: The name of this Filter.
        :param owner_id: The owner_id of this Filter.
        :param reason: The reason of this Filter.
        :param tags: The tags of this Filter.
        :param updated_at: The updated_at of this Filter.
        """
        self.openapi_types = {
            'action': FilterAction,
            'arn': str,
            'created_at': datetime,
            'criteria': FilterCriteria,
            'description': str,
            'name': str,
            'owner_id': str,
            'reason': str,
            'tags': Dict,
            'updated_at': datetime
        }

        self.attribute_map = {
            'action': 'action',
            'arn': 'arn',
            'created_at': 'createdAt',
            'criteria': 'criteria',
            'description': 'description',
            'name': 'name',
            'owner_id': 'ownerId',
            'reason': 'reason',
            'tags': 'tags',
            'updated_at': 'updatedAt'
        }

        self._action = action
        self._arn = arn
        self._created_at = created_at
        self._criteria = criteria
        self._description = description
        self._name = name
        self._owner_id = owner_id
        self._reason = reason
        self._tags = tags
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Filter.


        :return: The action of this Filter.
        :rtype: FilterAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Filter.


        :param action: The action of this Filter.
        :type action: FilterAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def arn(self):
        """Gets the arn of this Filter.


        :return: The arn of this Filter.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Filter.


        :param arn: The arn of this Filter.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_at(self):
        """Gets the created_at of this Filter.


        :return: The created_at of this Filter.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Filter.


        :param created_at: The created_at of this Filter.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def criteria(self):
        """Gets the criteria of this Filter.


        :return: The criteria of this Filter.
        :rtype: FilterCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this Filter.


        :param criteria: The criteria of this Filter.
        :type criteria: FilterCriteria
        """
        if criteria is None:
            raise ValueError("Invalid value for `criteria`, must not be `None`")

        self._criteria = criteria

    @property
    def description(self):
        """Gets the description of this Filter.


        :return: The description of this Filter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Filter.


        :param description: The description of this Filter.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this Filter.


        :return: The name of this Filter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Filter.


        :param name: The name of this Filter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this Filter.


        :return: The owner_id of this Filter.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Filter.


        :param owner_id: The owner_id of this Filter.
        :type owner_id: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")

        self._owner_id = owner_id

    @property
    def reason(self):
        """Gets the reason of this Filter.


        :return: The reason of this Filter.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Filter.


        :param reason: The reason of this Filter.
        :type reason: str
        """

        self._reason = reason

    @property
    def tags(self):
        """Gets the tags of this Filter.


        :return: The tags of this Filter.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Filter.


        :param tags: The tags of this Filter.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def updated_at(self):
        """Gets the updated_at of this Filter.


        :return: The updated_at of this Filter.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Filter.


        :param updated_at: The updated_at of this Filter.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
