# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ami_aggregation_response_severity_counts import AmiAggregationResponseSeverityCounts
from openapi_server import util


class Ec2InstanceAggregationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, ami: str=None, instance_id: str=None, instance_tags: Dict=None, network_findings: int=None, operating_system: str=None, severity_counts: AmiAggregationResponseSeverityCounts=None):
        """Ec2InstanceAggregationResponse - a model defined in OpenAPI

        :param account_id: The account_id of this Ec2InstanceAggregationResponse.
        :param ami: The ami of this Ec2InstanceAggregationResponse.
        :param instance_id: The instance_id of this Ec2InstanceAggregationResponse.
        :param instance_tags: The instance_tags of this Ec2InstanceAggregationResponse.
        :param network_findings: The network_findings of this Ec2InstanceAggregationResponse.
        :param operating_system: The operating_system of this Ec2InstanceAggregationResponse.
        :param severity_counts: The severity_counts of this Ec2InstanceAggregationResponse.
        """
        self.openapi_types = {
            'account_id': str,
            'ami': str,
            'instance_id': str,
            'instance_tags': Dict,
            'network_findings': int,
            'operating_system': str,
            'severity_counts': AmiAggregationResponseSeverityCounts
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'ami': 'ami',
            'instance_id': 'instanceId',
            'instance_tags': 'instanceTags',
            'network_findings': 'networkFindings',
            'operating_system': 'operatingSystem',
            'severity_counts': 'severityCounts'
        }

        self._account_id = account_id
        self._ami = ami
        self._instance_id = instance_id
        self._instance_tags = instance_tags
        self._network_findings = network_findings
        self._operating_system = operating_system
        self._severity_counts = severity_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ec2InstanceAggregationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ec2InstanceAggregationResponse of this Ec2InstanceAggregationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Ec2InstanceAggregationResponse.


        :return: The account_id of this Ec2InstanceAggregationResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Ec2InstanceAggregationResponse.


        :param account_id: The account_id of this Ec2InstanceAggregationResponse.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def ami(self):
        """Gets the ami of this Ec2InstanceAggregationResponse.


        :return: The ami of this Ec2InstanceAggregationResponse.
        :rtype: str
        """
        return self._ami

    @ami.setter
    def ami(self, ami):
        """Sets the ami of this Ec2InstanceAggregationResponse.


        :param ami: The ami of this Ec2InstanceAggregationResponse.
        :type ami: str
        """

        self._ami = ami

    @property
    def instance_id(self):
        """Gets the instance_id of this Ec2InstanceAggregationResponse.


        :return: The instance_id of this Ec2InstanceAggregationResponse.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Ec2InstanceAggregationResponse.


        :param instance_id: The instance_id of this Ec2InstanceAggregationResponse.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def instance_tags(self):
        """Gets the instance_tags of this Ec2InstanceAggregationResponse.


        :return: The instance_tags of this Ec2InstanceAggregationResponse.
        :rtype: Dict
        """
        return self._instance_tags

    @instance_tags.setter
    def instance_tags(self, instance_tags):
        """Sets the instance_tags of this Ec2InstanceAggregationResponse.


        :param instance_tags: The instance_tags of this Ec2InstanceAggregationResponse.
        :type instance_tags: Dict
        """

        self._instance_tags = instance_tags

    @property
    def network_findings(self):
        """Gets the network_findings of this Ec2InstanceAggregationResponse.


        :return: The network_findings of this Ec2InstanceAggregationResponse.
        :rtype: int
        """
        return self._network_findings

    @network_findings.setter
    def network_findings(self, network_findings):
        """Sets the network_findings of this Ec2InstanceAggregationResponse.


        :param network_findings: The network_findings of this Ec2InstanceAggregationResponse.
        :type network_findings: int
        """

        self._network_findings = network_findings

    @property
    def operating_system(self):
        """Gets the operating_system of this Ec2InstanceAggregationResponse.


        :return: The operating_system of this Ec2InstanceAggregationResponse.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this Ec2InstanceAggregationResponse.


        :param operating_system: The operating_system of this Ec2InstanceAggregationResponse.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def severity_counts(self):
        """Gets the severity_counts of this Ec2InstanceAggregationResponse.


        :return: The severity_counts of this Ec2InstanceAggregationResponse.
        :rtype: AmiAggregationResponseSeverityCounts
        """
        return self._severity_counts

    @severity_counts.setter
    def severity_counts(self, severity_counts):
        """Sets the severity_counts of this Ec2InstanceAggregationResponse.


        :param severity_counts: The severity_counts of this Ec2InstanceAggregationResponse.
        :type severity_counts: AmiAggregationResponseSeverityCounts
        """

        self._severity_counts = severity_counts
