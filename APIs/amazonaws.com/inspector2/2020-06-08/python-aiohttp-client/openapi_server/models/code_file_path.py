# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeFilePath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_line: int=None, file_name: str=None, file_path: str=None, start_line: int=None):
        """CodeFilePath - a model defined in OpenAPI

        :param end_line: The end_line of this CodeFilePath.
        :param file_name: The file_name of this CodeFilePath.
        :param file_path: The file_path of this CodeFilePath.
        :param start_line: The start_line of this CodeFilePath.
        """
        self.openapi_types = {
            'end_line': int,
            'file_name': str,
            'file_path': str,
            'start_line': int
        }

        self.attribute_map = {
            'end_line': 'endLine',
            'file_name': 'fileName',
            'file_path': 'filePath',
            'start_line': 'startLine'
        }

        self._end_line = end_line
        self._file_name = file_name
        self._file_path = file_path
        self._start_line = start_line

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeFilePath':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeFilePath of this CodeFilePath.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_line(self):
        """Gets the end_line of this CodeFilePath.


        :return: The end_line of this CodeFilePath.
        :rtype: int
        """
        return self._end_line

    @end_line.setter
    def end_line(self, end_line):
        """Sets the end_line of this CodeFilePath.


        :param end_line: The end_line of this CodeFilePath.
        :type end_line: int
        """
        if end_line is None:
            raise ValueError("Invalid value for `end_line`, must not be `None`")

        self._end_line = end_line

    @property
    def file_name(self):
        """Gets the file_name of this CodeFilePath.


        :return: The file_name of this CodeFilePath.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this CodeFilePath.


        :param file_name: The file_name of this CodeFilePath.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def file_path(self):
        """Gets the file_path of this CodeFilePath.


        :return: The file_path of this CodeFilePath.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this CodeFilePath.


        :param file_path: The file_path of this CodeFilePath.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def start_line(self):
        """Gets the start_line of this CodeFilePath.


        :return: The start_line of this CodeFilePath.
        :rtype: int
        """
        return self._start_line

    @start_line.setter
    def start_line(self, start_line):
        """Sets the start_line of this CodeFilePath.


        :param start_line: The start_line of this CodeFilePath.
        :type start_line: int
        """
        if start_line is None:
            raise ValueError("Invalid value for `start_line`, must not be `None`")

        self._start_line = start_line
