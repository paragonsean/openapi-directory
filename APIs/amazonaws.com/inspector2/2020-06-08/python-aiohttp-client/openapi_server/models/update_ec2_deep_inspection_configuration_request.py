# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateEc2DeepInspectionConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activate_deep_inspection: bool=None, package_paths: List[str]=None):
        """UpdateEc2DeepInspectionConfigurationRequest - a model defined in OpenAPI

        :param activate_deep_inspection: The activate_deep_inspection of this UpdateEc2DeepInspectionConfigurationRequest.
        :param package_paths: The package_paths of this UpdateEc2DeepInspectionConfigurationRequest.
        """
        self.openapi_types = {
            'activate_deep_inspection': bool,
            'package_paths': List[str]
        }

        self.attribute_map = {
            'activate_deep_inspection': 'activateDeepInspection',
            'package_paths': 'packagePaths'
        }

        self._activate_deep_inspection = activate_deep_inspection
        self._package_paths = package_paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateEc2DeepInspectionConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateEc2DeepInspectionConfiguration_request of this UpdateEc2DeepInspectionConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activate_deep_inspection(self):
        """Gets the activate_deep_inspection of this UpdateEc2DeepInspectionConfigurationRequest.

        Specify <code>TRUE</code> to activate Amazon Inspector deep inspection in your account, or <code>FALSE</code> to deactivate. Member accounts in an organization cannot deactivate deep inspection, instead the delegated administrator for the organization can deactivate a member account using <a href=\"https://docs.aws.amazon.com/inspector/v2/APIReference/API_BatchUpdateMemberEc2DeepInspectionStatus.html\">BatchUpdateMemberEc2DeepInspectionStatus</a>.

        :return: The activate_deep_inspection of this UpdateEc2DeepInspectionConfigurationRequest.
        :rtype: bool
        """
        return self._activate_deep_inspection

    @activate_deep_inspection.setter
    def activate_deep_inspection(self, activate_deep_inspection):
        """Sets the activate_deep_inspection of this UpdateEc2DeepInspectionConfigurationRequest.

        Specify <code>TRUE</code> to activate Amazon Inspector deep inspection in your account, or <code>FALSE</code> to deactivate. Member accounts in an organization cannot deactivate deep inspection, instead the delegated administrator for the organization can deactivate a member account using <a href=\"https://docs.aws.amazon.com/inspector/v2/APIReference/API_BatchUpdateMemberEc2DeepInspectionStatus.html\">BatchUpdateMemberEc2DeepInspectionStatus</a>.

        :param activate_deep_inspection: The activate_deep_inspection of this UpdateEc2DeepInspectionConfigurationRequest.
        :type activate_deep_inspection: bool
        """

        self._activate_deep_inspection = activate_deep_inspection

    @property
    def package_paths(self):
        """Gets the package_paths of this UpdateEc2DeepInspectionConfigurationRequest.

        The Amazon Inspector deep inspection custom paths you are adding for your account.

        :return: The package_paths of this UpdateEc2DeepInspectionConfigurationRequest.
        :rtype: List[str]
        """
        return self._package_paths

    @package_paths.setter
    def package_paths(self, package_paths):
        """Sets the package_paths of this UpdateEc2DeepInspectionConfigurationRequest.

        The Amazon Inspector deep inspection custom paths you are adding for your account.

        :param package_paths: The package_paths of this UpdateEc2DeepInspectionConfigurationRequest.
        :type package_paths: List[str]
        """
        if package_paths is not None and len(package_paths) > 5:
            raise ValueError("Invalid value for `package_paths`, number of items must be less than or equal to `5`")
        if package_paths is not None and len(package_paths) < 0:
            raise ValueError("Invalid value for `package_paths`, number of items must be greater than or equal to `0`")

        self._package_paths = package_paths
