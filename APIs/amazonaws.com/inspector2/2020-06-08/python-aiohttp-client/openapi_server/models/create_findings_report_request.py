# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_filter_request_filter_criteria import CreateFilterRequestFilterCriteria
from openapi_server.models.create_findings_report_request_s3_destination import CreateFindingsReportRequestS3Destination
from openapi_server import util


class CreateFindingsReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_criteria: CreateFilterRequestFilterCriteria=None, report_format: str=None, s3_destination: CreateFindingsReportRequestS3Destination=None):
        """CreateFindingsReportRequest - a model defined in OpenAPI

        :param filter_criteria: The filter_criteria of this CreateFindingsReportRequest.
        :param report_format: The report_format of this CreateFindingsReportRequest.
        :param s3_destination: The s3_destination of this CreateFindingsReportRequest.
        """
        self.openapi_types = {
            'filter_criteria': CreateFilterRequestFilterCriteria,
            'report_format': str,
            's3_destination': CreateFindingsReportRequestS3Destination
        }

        self.attribute_map = {
            'filter_criteria': 'filterCriteria',
            'report_format': 'reportFormat',
            's3_destination': 's3Destination'
        }

        self._filter_criteria = filter_criteria
        self._report_format = report_format
        self._s3_destination = s3_destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFindingsReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFindingsReport_request of this CreateFindingsReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_criteria(self):
        """Gets the filter_criteria of this CreateFindingsReportRequest.


        :return: The filter_criteria of this CreateFindingsReportRequest.
        :rtype: CreateFilterRequestFilterCriteria
        """
        return self._filter_criteria

    @filter_criteria.setter
    def filter_criteria(self, filter_criteria):
        """Sets the filter_criteria of this CreateFindingsReportRequest.


        :param filter_criteria: The filter_criteria of this CreateFindingsReportRequest.
        :type filter_criteria: CreateFilterRequestFilterCriteria
        """

        self._filter_criteria = filter_criteria

    @property
    def report_format(self):
        """Gets the report_format of this CreateFindingsReportRequest.

        The format to generate the report in.

        :return: The report_format of this CreateFindingsReportRequest.
        :rtype: str
        """
        return self._report_format

    @report_format.setter
    def report_format(self, report_format):
        """Sets the report_format of this CreateFindingsReportRequest.

        The format to generate the report in.

        :param report_format: The report_format of this CreateFindingsReportRequest.
        :type report_format: str
        """
        allowed_values = ["CSV", "JSON"]  # noqa: E501
        if report_format not in allowed_values:
            raise ValueError(
                "Invalid value for `report_format` ({0}), must be one of {1}"
                .format(report_format, allowed_values)
            )

        self._report_format = report_format

    @property
    def s3_destination(self):
        """Gets the s3_destination of this CreateFindingsReportRequest.


        :return: The s3_destination of this CreateFindingsReportRequest.
        :rtype: CreateFindingsReportRequestS3Destination
        """
        return self._s3_destination

    @s3_destination.setter
    def s3_destination(self, s3_destination):
        """Sets the s3_destination of this CreateFindingsReportRequest.


        :param s3_destination: The s3_destination of this CreateFindingsReportRequest.
        :type s3_destination: CreateFindingsReportRequestS3Destination
        """
        if s3_destination is None:
            raise ValueError("Invalid value for `s3_destination`, must not be `None`")

        self._s3_destination = s3_destination
