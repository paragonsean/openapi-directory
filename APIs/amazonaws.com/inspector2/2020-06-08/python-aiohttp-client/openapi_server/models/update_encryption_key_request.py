# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateEncryptionKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kms_key_id: str=None, resource_type: str=None, scan_type: str=None):
        """UpdateEncryptionKeyRequest - a model defined in OpenAPI

        :param kms_key_id: The kms_key_id of this UpdateEncryptionKeyRequest.
        :param resource_type: The resource_type of this UpdateEncryptionKeyRequest.
        :param scan_type: The scan_type of this UpdateEncryptionKeyRequest.
        """
        self.openapi_types = {
            'kms_key_id': str,
            'resource_type': str,
            'scan_type': str
        }

        self.attribute_map = {
            'kms_key_id': 'kmsKeyId',
            'resource_type': 'resourceType',
            'scan_type': 'scanType'
        }

        self._kms_key_id = kms_key_id
        self._resource_type = resource_type
        self._scan_type = scan_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateEncryptionKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateEncryptionKey_request of this UpdateEncryptionKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this UpdateEncryptionKeyRequest.

        A KMS key ID for the encryption key.

        :return: The kms_key_id of this UpdateEncryptionKeyRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this UpdateEncryptionKeyRequest.

        A KMS key ID for the encryption key.

        :param kms_key_id: The kms_key_id of this UpdateEncryptionKeyRequest.
        :type kms_key_id: str
        """
        if kms_key_id is None:
            raise ValueError("Invalid value for `kms_key_id`, must not be `None`")
        if kms_key_id is not None and not re.search(r'^arn:aws(-(us-gov|cn))?:kms:([a-z0-9][-.a-z0-9]{0,62})?:[0-9]{12}?:key\/(([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})|(mrk-[0-9a-zA-Z]{32}))$', kms_key_id):
            raise ValueError("Invalid value for `kms_key_id`, must be a follow pattern or equal to `/^arn:aws(-(us-gov|cn))?:kms:([a-z0-9][-.a-z0-9]{0,62})?:[0-9]{12}?:key\/(([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})|(mrk-[0-9a-zA-Z]{32}))$/`")

        self._kms_key_id = kms_key_id

    @property
    def resource_type(self):
        """Gets the resource_type of this UpdateEncryptionKeyRequest.

        The resource type for the encryption key.

        :return: The resource_type of this UpdateEncryptionKeyRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this UpdateEncryptionKeyRequest.

        The resource type for the encryption key.

        :param resource_type: The resource_type of this UpdateEncryptionKeyRequest.
        :type resource_type: str
        """
        allowed_values = ["AWS_EC2_INSTANCE", "AWS_ECR_CONTAINER_IMAGE", "AWS_ECR_REPOSITORY", "AWS_LAMBDA_FUNCTION"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def scan_type(self):
        """Gets the scan_type of this UpdateEncryptionKeyRequest.

        The scan type for the encryption key.

        :return: The scan_type of this UpdateEncryptionKeyRequest.
        :rtype: str
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this UpdateEncryptionKeyRequest.

        The scan type for the encryption key.

        :param scan_type: The scan_type of this UpdateEncryptionKeyRequest.
        :type scan_type: str
        """
        allowed_values = ["NETWORK", "PACKAGE", "CODE"]  # noqa: E501
        if scan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scan_type` ({0}), must be one of {1}"
                .format(scan_type, allowed_values)
            )

        self._scan_type = scan_type
