# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeSnippetResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_snippet: List=None, end_line: int=None, finding_arn: str=None, start_line: int=None, suggested_fixes: List=None):
        """CodeSnippetResult - a model defined in OpenAPI

        :param code_snippet: The code_snippet of this CodeSnippetResult.
        :param end_line: The end_line of this CodeSnippetResult.
        :param finding_arn: The finding_arn of this CodeSnippetResult.
        :param start_line: The start_line of this CodeSnippetResult.
        :param suggested_fixes: The suggested_fixes of this CodeSnippetResult.
        """
        self.openapi_types = {
            'code_snippet': List,
            'end_line': int,
            'finding_arn': str,
            'start_line': int,
            'suggested_fixes': List
        }

        self.attribute_map = {
            'code_snippet': 'codeSnippet',
            'end_line': 'endLine',
            'finding_arn': 'findingArn',
            'start_line': 'startLine',
            'suggested_fixes': 'suggestedFixes'
        }

        self._code_snippet = code_snippet
        self._end_line = end_line
        self._finding_arn = finding_arn
        self._start_line = start_line
        self._suggested_fixes = suggested_fixes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeSnippetResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeSnippetResult of this CodeSnippetResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_snippet(self):
        """Gets the code_snippet of this CodeSnippetResult.


        :return: The code_snippet of this CodeSnippetResult.
        :rtype: List
        """
        return self._code_snippet

    @code_snippet.setter
    def code_snippet(self, code_snippet):
        """Sets the code_snippet of this CodeSnippetResult.


        :param code_snippet: The code_snippet of this CodeSnippetResult.
        :type code_snippet: List
        """

        self._code_snippet = code_snippet

    @property
    def end_line(self):
        """Gets the end_line of this CodeSnippetResult.


        :return: The end_line of this CodeSnippetResult.
        :rtype: int
        """
        return self._end_line

    @end_line.setter
    def end_line(self, end_line):
        """Sets the end_line of this CodeSnippetResult.


        :param end_line: The end_line of this CodeSnippetResult.
        :type end_line: int
        """

        self._end_line = end_line

    @property
    def finding_arn(self):
        """Gets the finding_arn of this CodeSnippetResult.


        :return: The finding_arn of this CodeSnippetResult.
        :rtype: str
        """
        return self._finding_arn

    @finding_arn.setter
    def finding_arn(self, finding_arn):
        """Sets the finding_arn of this CodeSnippetResult.


        :param finding_arn: The finding_arn of this CodeSnippetResult.
        :type finding_arn: str
        """

        self._finding_arn = finding_arn

    @property
    def start_line(self):
        """Gets the start_line of this CodeSnippetResult.


        :return: The start_line of this CodeSnippetResult.
        :rtype: int
        """
        return self._start_line

    @start_line.setter
    def start_line(self, start_line):
        """Sets the start_line of this CodeSnippetResult.


        :param start_line: The start_line of this CodeSnippetResult.
        :type start_line: int
        """

        self._start_line = start_line

    @property
    def suggested_fixes(self):
        """Gets the suggested_fixes of this CodeSnippetResult.


        :return: The suggested_fixes of this CodeSnippetResult.
        :rtype: List
        """
        return self._suggested_fixes

    @suggested_fixes.setter
    def suggested_fixes(self, suggested_fixes):
        """Sets the suggested_fixes of this CodeSnippetResult.


        :param suggested_fixes: The suggested_fixes of this CodeSnippetResult.
        :type suggested_fixes: List
        """

        self._suggested_fixes = suggested_fixes
