# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_type import AggregationType
from openapi_server import util


class ListFindingAggregationsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_type: AggregationType=None, next_token: str=None, responses: List=None):
        """ListFindingAggregationsResponse - a model defined in OpenAPI

        :param aggregation_type: The aggregation_type of this ListFindingAggregationsResponse.
        :param next_token: The next_token of this ListFindingAggregationsResponse.
        :param responses: The responses of this ListFindingAggregationsResponse.
        """
        self.openapi_types = {
            'aggregation_type': AggregationType,
            'next_token': str,
            'responses': List
        }

        self.attribute_map = {
            'aggregation_type': 'aggregationType',
            'next_token': 'nextToken',
            'responses': 'responses'
        }

        self._aggregation_type = aggregation_type
        self._next_token = next_token
        self._responses = responses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListFindingAggregationsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListFindingAggregationsResponse of this ListFindingAggregationsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this ListFindingAggregationsResponse.


        :return: The aggregation_type of this ListFindingAggregationsResponse.
        :rtype: AggregationType
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this ListFindingAggregationsResponse.


        :param aggregation_type: The aggregation_type of this ListFindingAggregationsResponse.
        :type aggregation_type: AggregationType
        """
        if aggregation_type is None:
            raise ValueError("Invalid value for `aggregation_type`, must not be `None`")

        self._aggregation_type = aggregation_type

    @property
    def next_token(self):
        """Gets the next_token of this ListFindingAggregationsResponse.


        :return: The next_token of this ListFindingAggregationsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListFindingAggregationsResponse.


        :param next_token: The next_token of this ListFindingAggregationsResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def responses(self):
        """Gets the responses of this ListFindingAggregationsResponse.


        :return: The responses of this ListFindingAggregationsResponse.
        :rtype: List
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this ListFindingAggregationsResponse.


        :param responses: The responses of this ListFindingAggregationsResponse.
        :type responses: List
        """

        self._responses = responses
