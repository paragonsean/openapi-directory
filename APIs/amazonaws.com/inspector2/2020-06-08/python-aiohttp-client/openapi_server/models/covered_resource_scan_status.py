# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scan_status_code import ScanStatusCode
from openapi_server.models.scan_status_reason import ScanStatusReason
from openapi_server import util


class CoveredResourceScanStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reason: ScanStatusReason=None, status_code: ScanStatusCode=None):
        """CoveredResourceScanStatus - a model defined in OpenAPI

        :param reason: The reason of this CoveredResourceScanStatus.
        :param status_code: The status_code of this CoveredResourceScanStatus.
        """
        self.openapi_types = {
            'reason': ScanStatusReason,
            'status_code': ScanStatusCode
        }

        self.attribute_map = {
            'reason': 'reason',
            'status_code': 'statusCode'
        }

        self._reason = reason
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CoveredResourceScanStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CoveredResource_scanStatus of this CoveredResourceScanStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason(self):
        """Gets the reason of this CoveredResourceScanStatus.


        :return: The reason of this CoveredResourceScanStatus.
        :rtype: ScanStatusReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CoveredResourceScanStatus.


        :param reason: The reason of this CoveredResourceScanStatus.
        :type reason: ScanStatusReason
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def status_code(self):
        """Gets the status_code of this CoveredResourceScanStatus.


        :return: The status_code of this CoveredResourceScanStatus.
        :rtype: ScanStatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this CoveredResourceScanStatus.


        :param status_code: The status_code of this CoveredResourceScanStatus.
        :type status_code: ScanStatusCode
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code
