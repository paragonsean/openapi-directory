# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_filter_request_filter_criteria import CreateFilterRequestFilterCriteria
from openapi_server import util


class CreateFilterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, description: str=None, filter_criteria: CreateFilterRequestFilterCriteria=None, name: str=None, reason: str=None, tags: Dict[str, str]=None):
        """CreateFilterRequest - a model defined in OpenAPI

        :param action: The action of this CreateFilterRequest.
        :param description: The description of this CreateFilterRequest.
        :param filter_criteria: The filter_criteria of this CreateFilterRequest.
        :param name: The name of this CreateFilterRequest.
        :param reason: The reason of this CreateFilterRequest.
        :param tags: The tags of this CreateFilterRequest.
        """
        self.openapi_types = {
            'action': str,
            'description': str,
            'filter_criteria': CreateFilterRequestFilterCriteria,
            'name': str,
            'reason': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'action': 'action',
            'description': 'description',
            'filter_criteria': 'filterCriteria',
            'name': 'name',
            'reason': 'reason',
            'tags': 'tags'
        }

        self._action = action
        self._description = description
        self._filter_criteria = filter_criteria
        self._name = name
        self._reason = reason
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFilterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFilter_request of this CreateFilterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this CreateFilterRequest.

        Defines the action that is to be applied to the findings that match the filter.

        :return: The action of this CreateFilterRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateFilterRequest.

        Defines the action that is to be applied to the findings that match the filter.

        :param action: The action of this CreateFilterRequest.
        :type action: str
        """
        allowed_values = ["NONE", "SUPPRESS"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def description(self):
        """Gets the description of this CreateFilterRequest.

        A description of the filter.

        :return: The description of this CreateFilterRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFilterRequest.

        A description of the filter.

        :param description: The description of this CreateFilterRequest.
        :type description: str
        """
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def filter_criteria(self):
        """Gets the filter_criteria of this CreateFilterRequest.


        :return: The filter_criteria of this CreateFilterRequest.
        :rtype: CreateFilterRequestFilterCriteria
        """
        return self._filter_criteria

    @filter_criteria.setter
    def filter_criteria(self, filter_criteria):
        """Sets the filter_criteria of this CreateFilterRequest.


        :param filter_criteria: The filter_criteria of this CreateFilterRequest.
        :type filter_criteria: CreateFilterRequestFilterCriteria
        """
        if filter_criteria is None:
            raise ValueError("Invalid value for `filter_criteria`, must not be `None`")

        self._filter_criteria = filter_criteria

    @property
    def name(self):
        """Gets the name of this CreateFilterRequest.

        The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.

        :return: The name of this CreateFilterRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFilterRequest.

        The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.

        :param name: The name of this CreateFilterRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this CreateFilterRequest.

        The reason for creating the filter.

        :return: The reason of this CreateFilterRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CreateFilterRequest.

        The reason for creating the filter.

        :param reason: The reason of this CreateFilterRequest.
        :type reason: str
        """
        if reason is not None and len(reason) > 512:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `512`")
        if reason is not None and len(reason) < 1:
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `1`")

        self._reason = reason

    @property
    def tags(self):
        """Gets the tags of this CreateFilterRequest.

        A list of tags for the filter.

        :return: The tags of this CreateFilterRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFilterRequest.

        A list of tags for the filter.

        :param tags: The tags of this CreateFilterRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
