# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_state_resource_state import AccountStateResourceState
from openapi_server.models.account_state_state import AccountStateState
from openapi_server import util


class AccountState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, resource_state: AccountStateResourceState=None, state: AccountStateState=None):
        """AccountState - a model defined in OpenAPI

        :param account_id: The account_id of this AccountState.
        :param resource_state: The resource_state of this AccountState.
        :param state: The state of this AccountState.
        """
        self.openapi_types = {
            'account_id': str,
            'resource_state': AccountStateResourceState,
            'state': AccountStateState
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'resource_state': 'resourceState',
            'state': 'state'
        }

        self._account_id = account_id
        self._resource_state = resource_state
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountState of this AccountState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountState.


        :return: The account_id of this AccountState.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountState.


        :param account_id: The account_id of this AccountState.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def resource_state(self):
        """Gets the resource_state of this AccountState.


        :return: The resource_state of this AccountState.
        :rtype: AccountStateResourceState
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this AccountState.


        :param resource_state: The resource_state of this AccountState.
        :type resource_state: AccountStateResourceState
        """
        if resource_state is None:
            raise ValueError("Invalid value for `resource_state`, must not be `None`")

        self._resource_state = resource_state

    @property
    def state(self):
        """Gets the state of this AccountState.


        :return: The state of this AccountState.
        :rtype: AccountStateState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AccountState.


        :param state: The state of this AccountState.
        :type state: AccountStateState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
