# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_layer_aggregation_response_severity_counts import ImageLayerAggregationResponseSeverityCounts
from openapi_server import util


class AggregationResponseImageLayerAggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, layer_hash: str=None, repository: str=None, resource_id: str=None, severity_counts: ImageLayerAggregationResponseSeverityCounts=None):
        """AggregationResponseImageLayerAggregation - a model defined in OpenAPI

        :param account_id: The account_id of this AggregationResponseImageLayerAggregation.
        :param layer_hash: The layer_hash of this AggregationResponseImageLayerAggregation.
        :param repository: The repository of this AggregationResponseImageLayerAggregation.
        :param resource_id: The resource_id of this AggregationResponseImageLayerAggregation.
        :param severity_counts: The severity_counts of this AggregationResponseImageLayerAggregation.
        """
        self.openapi_types = {
            'account_id': str,
            'layer_hash': str,
            'repository': str,
            'resource_id': str,
            'severity_counts': ImageLayerAggregationResponseSeverityCounts
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'layer_hash': 'layerHash',
            'repository': 'repository',
            'resource_id': 'resourceId',
            'severity_counts': 'severityCounts'
        }

        self._account_id = account_id
        self._layer_hash = layer_hash
        self._repository = repository
        self._resource_id = resource_id
        self._severity_counts = severity_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationResponseImageLayerAggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationResponse_imageLayerAggregation of this AggregationResponseImageLayerAggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AggregationResponseImageLayerAggregation.


        :return: The account_id of this AggregationResponseImageLayerAggregation.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AggregationResponseImageLayerAggregation.


        :param account_id: The account_id of this AggregationResponseImageLayerAggregation.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def layer_hash(self):
        """Gets the layer_hash of this AggregationResponseImageLayerAggregation.


        :return: The layer_hash of this AggregationResponseImageLayerAggregation.
        :rtype: str
        """
        return self._layer_hash

    @layer_hash.setter
    def layer_hash(self, layer_hash):
        """Sets the layer_hash of this AggregationResponseImageLayerAggregation.


        :param layer_hash: The layer_hash of this AggregationResponseImageLayerAggregation.
        :type layer_hash: str
        """
        if layer_hash is None:
            raise ValueError("Invalid value for `layer_hash`, must not be `None`")

        self._layer_hash = layer_hash

    @property
    def repository(self):
        """Gets the repository of this AggregationResponseImageLayerAggregation.


        :return: The repository of this AggregationResponseImageLayerAggregation.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this AggregationResponseImageLayerAggregation.


        :param repository: The repository of this AggregationResponseImageLayerAggregation.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def resource_id(self):
        """Gets the resource_id of this AggregationResponseImageLayerAggregation.


        :return: The resource_id of this AggregationResponseImageLayerAggregation.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AggregationResponseImageLayerAggregation.


        :param resource_id: The resource_id of this AggregationResponseImageLayerAggregation.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def severity_counts(self):
        """Gets the severity_counts of this AggregationResponseImageLayerAggregation.


        :return: The severity_counts of this AggregationResponseImageLayerAggregation.
        :rtype: ImageLayerAggregationResponseSeverityCounts
        """
        return self._severity_counts

    @severity_counts.setter
    def severity_counts(self, severity_counts):
        """Sets the severity_counts of this AggregationResponseImageLayerAggregation.


        :param severity_counts: The severity_counts of this AggregationResponseImageLayerAggregation.
        :type severity_counts: ImageLayerAggregationResponseSeverityCounts
        """

        self._severity_counts = severity_counts
