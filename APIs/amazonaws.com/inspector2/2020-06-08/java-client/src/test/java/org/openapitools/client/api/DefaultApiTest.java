/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateMemberRequest;
import org.openapitools.client.model.AssociateMemberResponse;
import org.openapitools.client.model.BatchGetAccountStatusRequest;
import org.openapitools.client.model.BatchGetAccountStatusResponse;
import org.openapitools.client.model.BatchGetCodeSnippetRequest;
import org.openapitools.client.model.BatchGetCodeSnippetResponse;
import org.openapitools.client.model.BatchGetFindingDetailsRequest;
import org.openapitools.client.model.BatchGetFindingDetailsResponse;
import org.openapitools.client.model.BatchGetFreeTrialInfoRequest;
import org.openapitools.client.model.BatchGetFreeTrialInfoResponse;
import org.openapitools.client.model.BatchGetMemberEc2DeepInspectionStatusRequest;
import org.openapitools.client.model.BatchGetMemberEc2DeepInspectionStatusResponse;
import org.openapitools.client.model.BatchUpdateMemberEc2DeepInspectionStatusRequest;
import org.openapitools.client.model.BatchUpdateMemberEc2DeepInspectionStatusResponse;
import org.openapitools.client.model.CancelFindingsReportRequest;
import org.openapitools.client.model.CancelFindingsReportResponse;
import org.openapitools.client.model.CancelSbomExportRequest;
import org.openapitools.client.model.CancelSbomExportResponse;
import org.openapitools.client.model.CreateFilterRequest;
import org.openapitools.client.model.CreateFilterResponse;
import org.openapitools.client.model.CreateFindingsReportRequest;
import org.openapitools.client.model.CreateFindingsReportResponse;
import org.openapitools.client.model.CreateSbomExportRequest;
import org.openapitools.client.model.CreateSbomExportResponse;
import org.openapitools.client.model.DeleteFilterRequest;
import org.openapitools.client.model.DeleteFilterResponse;
import org.openapitools.client.model.DescribeOrganizationConfigurationResponse;
import org.openapitools.client.model.DisableDelegatedAdminAccountRequest;
import org.openapitools.client.model.DisableDelegatedAdminAccountResponse;
import org.openapitools.client.model.DisableRequest;
import org.openapitools.client.model.DisableResponse;
import org.openapitools.client.model.DisassociateMemberRequest;
import org.openapitools.client.model.DisassociateMemberResponse;
import org.openapitools.client.model.EnableDelegatedAdminAccountRequest;
import org.openapitools.client.model.EnableDelegatedAdminAccountResponse;
import org.openapitools.client.model.EnableRequest;
import org.openapitools.client.model.EnableResponse;
import org.openapitools.client.model.GetConfigurationResponse;
import org.openapitools.client.model.GetDelegatedAdminAccountResponse;
import org.openapitools.client.model.GetEc2DeepInspectionConfigurationResponse;
import org.openapitools.client.model.GetEncryptionKeyResponse;
import org.openapitools.client.model.GetFindingsReportStatusRequest;
import org.openapitools.client.model.GetFindingsReportStatusResponse;
import org.openapitools.client.model.GetMemberRequest;
import org.openapitools.client.model.GetMemberResponse;
import org.openapitools.client.model.GetSbomExportRequest;
import org.openapitools.client.model.GetSbomExportResponse;
import org.openapitools.client.model.ListAccountPermissionsRequest;
import org.openapitools.client.model.ListAccountPermissionsResponse;
import org.openapitools.client.model.ListCoverageRequest;
import org.openapitools.client.model.ListCoverageResponse;
import org.openapitools.client.model.ListCoverageStatisticsRequest;
import org.openapitools.client.model.ListCoverageStatisticsResponse;
import org.openapitools.client.model.ListDelegatedAdminAccountsRequest;
import org.openapitools.client.model.ListDelegatedAdminAccountsResponse;
import org.openapitools.client.model.ListFiltersRequest;
import org.openapitools.client.model.ListFiltersResponse;
import org.openapitools.client.model.ListFindingAggregationsRequest;
import org.openapitools.client.model.ListFindingAggregationsResponse;
import org.openapitools.client.model.ListFindingsRequest;
import org.openapitools.client.model.ListFindingsResponse;
import org.openapitools.client.model.ListMembersRequest;
import org.openapitools.client.model.ListMembersResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListUsageTotalsRequest;
import org.openapitools.client.model.ListUsageTotalsResponse;
import org.openapitools.client.model.ResetEncryptionKeyRequest;
import org.openapitools.client.model.SearchVulnerabilitiesRequest;
import org.openapitools.client.model.SearchVulnerabilitiesResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateConfigurationRequest;
import org.openapitools.client.model.UpdateEc2DeepInspectionConfigurationRequest;
import org.openapitools.client.model.UpdateEc2DeepInspectionConfigurationResponse;
import org.openapitools.client.model.UpdateEncryptionKeyRequest;
import org.openapitools.client.model.UpdateFilterRequest;
import org.openapitools.client.model.UpdateFilterResponse;
import org.openapitools.client.model.UpdateOrgEc2DeepInspectionConfigurationRequest;
import org.openapitools.client.model.UpdateOrganizationConfigurationRequest;
import org.openapitools.client.model.UpdateOrganizationConfigurationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Associates an Amazon Web Services account with an Amazon Inspector delegated administrator. An HTTP 200 response indicates the association was successfully started, but doesnâ€™t indicate whether it was completed. You can check if the association completed by using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/inspector/v2/APIReference/API_ListMembers.html\&quot;&gt;ListMembers&lt;/a&gt; for multiple accounts or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/inspector/v2/APIReference/API_GetMember.html\&quot;&gt;GetMembers&lt;/a&gt; for a single account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateMemberTest() throws ApiException {
        AssociateMemberRequest associateMemberRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateMemberResponse response = api.associateMember(associateMemberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the Amazon Inspector status of multiple Amazon Web Services accounts within your environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetAccountStatusTest() throws ApiException {
        BatchGetAccountStatusRequest batchGetAccountStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetAccountStatusResponse response = api.batchGetAccountStatus(batchGetAccountStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves code snippets from findings that Amazon Inspector detected code vulnerabilities in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetCodeSnippetTest() throws ApiException {
        BatchGetCodeSnippetRequest batchGetCodeSnippetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetCodeSnippetResponse response = api.batchGetCodeSnippet(batchGetCodeSnippetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets vulnerability details for findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetFindingDetailsTest() throws ApiException {
        BatchGetFindingDetailsRequest batchGetFindingDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetFindingDetailsResponse response = api.batchGetFindingDetails(batchGetFindingDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets free trial status for multiple Amazon Web Services accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetFreeTrialInfoTest() throws ApiException {
        BatchGetFreeTrialInfoRequest batchGetFreeTrialInfoRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetFreeTrialInfoResponse response = api.batchGetFreeTrialInfo(batchGetFreeTrialInfoRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves Amazon Inspector deep inspection activation status of multiple member accounts within your organization. You must be the delegated administrator of an organization in Amazon Inspector to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetMemberEc2DeepInspectionStatusTest() throws ApiException {
        BatchGetMemberEc2DeepInspectionStatusRequest batchGetMemberEc2DeepInspectionStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetMemberEc2DeepInspectionStatusResponse response = api.batchGetMemberEc2DeepInspectionStatus(batchGetMemberEc2DeepInspectionStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Activates or deactivates Amazon Inspector deep inspection for the provided member accounts in your organization. You must be the delegated administrator of an organization in Amazon Inspector to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateMemberEc2DeepInspectionStatusTest() throws ApiException {
        BatchUpdateMemberEc2DeepInspectionStatusRequest batchUpdateMemberEc2DeepInspectionStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdateMemberEc2DeepInspectionStatusResponse response = api.batchUpdateMemberEc2DeepInspectionStatus(batchUpdateMemberEc2DeepInspectionStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels the given findings report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelFindingsReportTest() throws ApiException {
        CancelFindingsReportRequest cancelFindingsReportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelFindingsReportResponse response = api.cancelFindingsReport(cancelFindingsReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels a software bill of materials (SBOM) report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSbomExportTest() throws ApiException {
        CancelSbomExportRequest cancelSbomExportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelSbomExportResponse response = api.cancelSbomExport(cancelSbomExportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a filter resource using specified filter criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFilterTest() throws ApiException {
        CreateFilterRequest createFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFilterResponse response = api.createFilter(createFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a finding report. By default only &lt;code&gt;ACTIVE&lt;/code&gt; findings are returned in the report. To see &lt;code&gt;SUPRESSED&lt;/code&gt; or &lt;code&gt;CLOSED&lt;/code&gt; findings you must specify a value for the &lt;code&gt;findingStatus&lt;/code&gt; filter criteria. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFindingsReportTest() throws ApiException {
        CreateFindingsReportRequest createFindingsReportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFindingsReportResponse response = api.createFindingsReport(createFindingsReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a software bill of materials (SBOM) report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSbomExportTest() throws ApiException {
        CreateSbomExportRequest createSbomExportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSbomExportResponse response = api.createSbomExport(createSbomExportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a filter resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFilterTest() throws ApiException {
        DeleteFilterRequest deleteFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteFilterResponse response = api.deleteFilter(deleteFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describe Amazon Inspector configuration settings for an Amazon Web Services organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOrganizationConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeOrganizationConfigurationResponse response = api.describeOrganizationConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables Amazon Inspector scans for one or more Amazon Web Services accounts. Disabling all scan types in an account disables the Amazon Inspector service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableTest() throws ApiException {
        DisableRequest disableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisableResponse response = api.disable(disableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the Amazon Inspector delegated administrator for your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableDelegatedAdminAccountTest() throws ApiException {
        DisableDelegatedAdminAccountRequest disableDelegatedAdminAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisableDelegatedAdminAccountResponse response = api.disableDelegatedAdminAccount(disableDelegatedAdminAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a member account from an Amazon Inspector delegated administrator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateMemberTest() throws ApiException {
        DisassociateMemberRequest disassociateMemberRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateMemberResponse response = api.disassociateMember(disassociateMemberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables Amazon Inspector scans for one or more Amazon Web Services accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableTest() throws ApiException {
        EnableRequest enableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnableResponse response = api.enable(enableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the Amazon Inspector delegated administrator for your Organizations organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableDelegatedAdminAccountTest() throws ApiException {
        EnableDelegatedAdminAccountRequest enableDelegatedAdminAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnableDelegatedAdminAccountResponse response = api.enableDelegatedAdminAccount(enableDelegatedAdminAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves setting configurations for Inspector scans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConfigurationResponse response = api.getConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the Amazon Inspector delegated administrator for your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDelegatedAdminAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDelegatedAdminAccountResponse response = api.getDelegatedAdminAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the activation status of Amazon Inspector deep inspection and custom paths associated with your account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEc2DeepInspectionConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEc2DeepInspectionConfigurationResponse response = api.getEc2DeepInspectionConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets an encryption key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEncryptionKeyTest() throws ApiException {
        String resourceType = null;
        String scanType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEncryptionKeyResponse response = api.getEncryptionKey(resourceType, scanType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the status of a findings report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingsReportStatusTest() throws ApiException {
        GetFindingsReportStatusRequest getFindingsReportStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFindingsReportStatusResponse response = api.getFindingsReportStatus(getFindingsReportStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets member information for your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberTest() throws ApiException {
        GetMemberRequest getMemberRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMemberResponse response = api.getMember(getMemberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details of a software bill of materials (SBOM) report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSbomExportTest() throws ApiException {
        GetSbomExportRequest getSbomExportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSbomExportResponse response = api.getSbomExport(getSbomExportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the permissions an account has to configure Amazon Inspector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountPermissionsTest() throws ApiException {
        ListAccountPermissionsRequest listAccountPermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAccountPermissionsResponse response = api.listAccountPermissions(listAccountPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists coverage details for you environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCoverageTest() throws ApiException {
        ListCoverageRequest listCoverageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCoverageResponse response = api.listCoverage(listCoverageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists Amazon Inspector coverage statistics for your environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCoverageStatisticsTest() throws ApiException {
        ListCoverageStatisticsRequest listCoverageStatisticsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListCoverageStatisticsResponse response = api.listCoverageStatistics(listCoverageStatisticsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Lists information about the Amazon Inspector delegated administrator of your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDelegatedAdminAccountsTest() throws ApiException {
        ListDelegatedAdminAccountsRequest listDelegatedAdminAccountsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDelegatedAdminAccountsResponse response = api.listDelegatedAdminAccounts(listDelegatedAdminAccountsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the filters associated with your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFiltersTest() throws ApiException {
        ListFiltersRequest listFiltersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFiltersResponse response = api.listFilters(listFiltersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists aggregated finding data for your environment based on specific criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFindingAggregationsTest() throws ApiException {
        ListFindingAggregationsRequest listFindingAggregationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFindingAggregationsResponse response = api.listFindingAggregations(listFindingAggregationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists findings for your environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFindingsTest() throws ApiException {
        ListFindingsRequest listFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFindingsResponse response = api.listFindings(listFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List members associated with the Amazon Inspector delegated administrator for your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembersTest() throws ApiException {
        ListMembersRequest listMembersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMembersResponse response = api.listMembers(listMembersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all tags attached to a given resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the Amazon Inspector usage totals over the last 30 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsageTotalsTest() throws ApiException {
        ListUsageTotalsRequest listUsageTotalsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListUsageTotalsResponse response = api.listUsageTotals(listUsageTotalsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Resets an encryption key. After the key is reset your resources will be encrypted by an Amazon Web Services owned key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetEncryptionKeyTest() throws ApiException {
        ResetEncryptionKeyRequest resetEncryptionKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.resetEncryptionKey(resetEncryptionKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists Amazon Inspector coverage details for a specific vulnerability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchVulnerabilitiesTest() throws ApiException {
        SearchVulnerabilitiesRequest searchVulnerabilitiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        SearchVulnerabilitiesResponse response = api.searchVulnerabilities(searchVulnerabilitiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Adds tags to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates setting configurations for your Amazon Inspector account. When you use this API as an Amazon Inspector delegated administrator this updates the setting for all accounts you manage. Member accounts in an organization cannot update this setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigurationTest() throws ApiException {
        UpdateConfigurationRequest updateConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateConfiguration(updateConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Activates, deactivates Amazon Inspector deep inspection, or updates custom paths for your account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEc2DeepInspectionConfigurationTest() throws ApiException {
        UpdateEc2DeepInspectionConfigurationRequest updateEc2DeepInspectionConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEc2DeepInspectionConfigurationResponse response = api.updateEc2DeepInspectionConfiguration(updateEc2DeepInspectionConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an encryption key. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; means that an AWS owned key is being used for encryption.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEncryptionKeyTest() throws ApiException {
        UpdateEncryptionKeyRequest updateEncryptionKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateEncryptionKey(updateEncryptionKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Specifies the action that is to be applied to the findings that match the filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFilterTest() throws ApiException {
        UpdateFilterRequest updateFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFilterResponse response = api.updateFilter(updateFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the Amazon Inspector deep inspection custom paths for your organization. You must be an Amazon Inspector delegated administrator to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrgEc2DeepInspectionConfigurationTest() throws ApiException {
        UpdateOrgEc2DeepInspectionConfigurationRequest updateOrgEc2DeepInspectionConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateOrgEc2DeepInspectionConfiguration(updateOrgEc2DeepInspectionConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configurations for your Amazon Inspector organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationConfigurationTest() throws ApiException {
        UpdateOrganizationConfigurationRequest updateOrganizationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateOrganizationConfigurationResponse response = api.updateOrganizationConfiguration(updateOrganizationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
