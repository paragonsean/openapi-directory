/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CoverageResourceType;
import org.openapitools.client.model.CoveredResourceResourceMetadata;
import org.openapitools.client.model.CoveredResourceScanStatus;
import org.openapitools.client.model.ScanType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that contains details about a resource covered by Amazon Inspector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CoveredResource {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_LAST_SCANNED_AT = "lastScannedAt";
  @SerializedName(SERIALIZED_NAME_LAST_SCANNED_AT)
  private OffsetDateTime lastScannedAt;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_METADATA = "resourceMetadata";
  @SerializedName(SERIALIZED_NAME_RESOURCE_METADATA)
  private CoveredResourceResourceMetadata resourceMetadata;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private CoverageResourceType resourceType;

  public static final String SERIALIZED_NAME_SCAN_STATUS = "scanStatus";
  @SerializedName(SERIALIZED_NAME_SCAN_STATUS)
  private CoveredResourceScanStatus scanStatus;

  public static final String SERIALIZED_NAME_SCAN_TYPE = "scanType";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE)
  private ScanType scanType;

  public CoveredResource() {
  }

  public CoveredResource accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CoveredResource lastScannedAt(OffsetDateTime lastScannedAt) {
    this.lastScannedAt = lastScannedAt;
    return this;
  }

  /**
   * Get lastScannedAt
   * @return lastScannedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastScannedAt() {
    return lastScannedAt;
  }

  public void setLastScannedAt(OffsetDateTime lastScannedAt) {
    this.lastScannedAt = lastScannedAt;
  }


  public CoveredResource resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nonnull
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public CoveredResource resourceMetadata(CoveredResourceResourceMetadata resourceMetadata) {
    this.resourceMetadata = resourceMetadata;
    return this;
  }

  /**
   * Get resourceMetadata
   * @return resourceMetadata
   */
  @javax.annotation.Nullable
  public CoveredResourceResourceMetadata getResourceMetadata() {
    return resourceMetadata;
  }

  public void setResourceMetadata(CoveredResourceResourceMetadata resourceMetadata) {
    this.resourceMetadata = resourceMetadata;
  }


  public CoveredResource resourceType(CoverageResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public CoverageResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(CoverageResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public CoveredResource scanStatus(CoveredResourceScanStatus scanStatus) {
    this.scanStatus = scanStatus;
    return this;
  }

  /**
   * Get scanStatus
   * @return scanStatus
   */
  @javax.annotation.Nullable
  public CoveredResourceScanStatus getScanStatus() {
    return scanStatus;
  }

  public void setScanStatus(CoveredResourceScanStatus scanStatus) {
    this.scanStatus = scanStatus;
  }


  public CoveredResource scanType(ScanType scanType) {
    this.scanType = scanType;
    return this;
  }

  /**
   * Get scanType
   * @return scanType
   */
  @javax.annotation.Nonnull
  public ScanType getScanType() {
    return scanType;
  }

  public void setScanType(ScanType scanType) {
    this.scanType = scanType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoveredResource coveredResource = (CoveredResource) o;
    return Objects.equals(this.accountId, coveredResource.accountId) &&
        Objects.equals(this.lastScannedAt, coveredResource.lastScannedAt) &&
        Objects.equals(this.resourceId, coveredResource.resourceId) &&
        Objects.equals(this.resourceMetadata, coveredResource.resourceMetadata) &&
        Objects.equals(this.resourceType, coveredResource.resourceType) &&
        Objects.equals(this.scanStatus, coveredResource.scanStatus) &&
        Objects.equals(this.scanType, coveredResource.scanType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, lastScannedAt, resourceId, resourceMetadata, resourceType, scanStatus, scanType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoveredResource {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    lastScannedAt: ").append(toIndentedString(lastScannedAt)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceMetadata: ").append(toIndentedString(resourceMetadata)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    scanStatus: ").append(toIndentedString(scanStatus)).append("\n");
    sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("lastScannedAt");
    openapiFields.add("resourceId");
    openapiFields.add("resourceMetadata");
    openapiFields.add("resourceType");
    openapiFields.add("scanStatus");
    openapiFields.add("scanType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("resourceId");
    openapiRequiredFields.add("resourceType");
    openapiRequiredFields.add("scanType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CoveredResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoveredResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoveredResource is not found in the empty JSON string", CoveredResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoveredResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoveredResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CoveredResource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `accountId`
      String.validateJsonElement(jsonObj.get("accountId"));
      // validate the optional field `lastScannedAt`
      if (jsonObj.get("lastScannedAt") != null && !jsonObj.get("lastScannedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastScannedAt"));
      }
      // validate the required field `resourceId`
      String.validateJsonElement(jsonObj.get("resourceId"));
      // validate the optional field `resourceMetadata`
      if (jsonObj.get("resourceMetadata") != null && !jsonObj.get("resourceMetadata").isJsonNull()) {
        CoveredResourceResourceMetadata.validateJsonElement(jsonObj.get("resourceMetadata"));
      }
      // validate the required field `resourceType`
      CoverageResourceType.validateJsonElement(jsonObj.get("resourceType"));
      // validate the optional field `scanStatus`
      if (jsonObj.get("scanStatus") != null && !jsonObj.get("scanStatus").isJsonNull()) {
        CoveredResourceScanStatus.validateJsonElement(jsonObj.get("scanStatus"));
      }
      // validate the required field `scanType`
      ScanType.validateJsonElement(jsonObj.get("scanType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoveredResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoveredResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoveredResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoveredResource.class));

       return (TypeAdapter<T>) new TypeAdapter<CoveredResource>() {
           @Override
           public void write(JsonWriter out, CoveredResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoveredResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CoveredResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CoveredResource
   * @throws IOException if the JSON string is invalid with respect to CoveredResource
   */
  public static CoveredResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoveredResource.class);
  }

  /**
   * Convert an instance of CoveredResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

