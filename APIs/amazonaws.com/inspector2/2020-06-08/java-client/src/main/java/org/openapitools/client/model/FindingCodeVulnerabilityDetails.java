/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CodeVulnerabilityDetailsFilePath;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FindingCodeVulnerabilityDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindingCodeVulnerabilityDetails {
  public static final String SERIALIZED_NAME_CWES = "cwes";
  @SerializedName(SERIALIZED_NAME_CWES)
  private List cwes;

  public static final String SERIALIZED_NAME_DETECTOR_ID = "detectorId";
  @SerializedName(SERIALIZED_NAME_DETECTOR_ID)
  private String detectorId;

  public static final String SERIALIZED_NAME_DETECTOR_NAME = "detectorName";
  @SerializedName(SERIALIZED_NAME_DETECTOR_NAME)
  private String detectorName;

  public static final String SERIALIZED_NAME_DETECTOR_TAGS = "detectorTags";
  @SerializedName(SERIALIZED_NAME_DETECTOR_TAGS)
  private List detectorTags;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private CodeVulnerabilityDetailsFilePath filePath;

  public static final String SERIALIZED_NAME_REFERENCE_URLS = "referenceUrls";
  @SerializedName(SERIALIZED_NAME_REFERENCE_URLS)
  private List referenceUrls;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_SOURCE_LAMBDA_LAYER_ARN = "sourceLambdaLayerArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_LAMBDA_LAYER_ARN)
  private String sourceLambdaLayerArn;

  public FindingCodeVulnerabilityDetails() {
  }

  public FindingCodeVulnerabilityDetails cwes(List cwes) {
    this.cwes = cwes;
    return this;
  }

  /**
   * Get cwes
   * @return cwes
   */
  @javax.annotation.Nonnull
  public List getCwes() {
    return cwes;
  }

  public void setCwes(List cwes) {
    this.cwes = cwes;
  }


  public FindingCodeVulnerabilityDetails detectorId(String detectorId) {
    this.detectorId = detectorId;
    return this;
  }

  /**
   * Get detectorId
   * @return detectorId
   */
  @javax.annotation.Nonnull
  public String getDetectorId() {
    return detectorId;
  }

  public void setDetectorId(String detectorId) {
    this.detectorId = detectorId;
  }


  public FindingCodeVulnerabilityDetails detectorName(String detectorName) {
    this.detectorName = detectorName;
    return this;
  }

  /**
   * Get detectorName
   * @return detectorName
   */
  @javax.annotation.Nonnull
  public String getDetectorName() {
    return detectorName;
  }

  public void setDetectorName(String detectorName) {
    this.detectorName = detectorName;
  }


  public FindingCodeVulnerabilityDetails detectorTags(List detectorTags) {
    this.detectorTags = detectorTags;
    return this;
  }

  /**
   * Get detectorTags
   * @return detectorTags
   */
  @javax.annotation.Nullable
  public List getDetectorTags() {
    return detectorTags;
  }

  public void setDetectorTags(List detectorTags) {
    this.detectorTags = detectorTags;
  }


  public FindingCodeVulnerabilityDetails filePath(CodeVulnerabilityDetailsFilePath filePath) {
    this.filePath = filePath;
    return this;
  }

  /**
   * Get filePath
   * @return filePath
   */
  @javax.annotation.Nonnull
  public CodeVulnerabilityDetailsFilePath getFilePath() {
    return filePath;
  }

  public void setFilePath(CodeVulnerabilityDetailsFilePath filePath) {
    this.filePath = filePath;
  }


  public FindingCodeVulnerabilityDetails referenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
    return this;
  }

  /**
   * Get referenceUrls
   * @return referenceUrls
   */
  @javax.annotation.Nullable
  public List getReferenceUrls() {
    return referenceUrls;
  }

  public void setReferenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
  }


  public FindingCodeVulnerabilityDetails ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * Get ruleId
   * @return ruleId
   */
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public FindingCodeVulnerabilityDetails sourceLambdaLayerArn(String sourceLambdaLayerArn) {
    this.sourceLambdaLayerArn = sourceLambdaLayerArn;
    return this;
  }

  /**
   * Get sourceLambdaLayerArn
   * @return sourceLambdaLayerArn
   */
  @javax.annotation.Nullable
  public String getSourceLambdaLayerArn() {
    return sourceLambdaLayerArn;
  }

  public void setSourceLambdaLayerArn(String sourceLambdaLayerArn) {
    this.sourceLambdaLayerArn = sourceLambdaLayerArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindingCodeVulnerabilityDetails findingCodeVulnerabilityDetails = (FindingCodeVulnerabilityDetails) o;
    return Objects.equals(this.cwes, findingCodeVulnerabilityDetails.cwes) &&
        Objects.equals(this.detectorId, findingCodeVulnerabilityDetails.detectorId) &&
        Objects.equals(this.detectorName, findingCodeVulnerabilityDetails.detectorName) &&
        Objects.equals(this.detectorTags, findingCodeVulnerabilityDetails.detectorTags) &&
        Objects.equals(this.filePath, findingCodeVulnerabilityDetails.filePath) &&
        Objects.equals(this.referenceUrls, findingCodeVulnerabilityDetails.referenceUrls) &&
        Objects.equals(this.ruleId, findingCodeVulnerabilityDetails.ruleId) &&
        Objects.equals(this.sourceLambdaLayerArn, findingCodeVulnerabilityDetails.sourceLambdaLayerArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cwes, detectorId, detectorName, detectorTags, filePath, referenceUrls, ruleId, sourceLambdaLayerArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindingCodeVulnerabilityDetails {\n");
    sb.append("    cwes: ").append(toIndentedString(cwes)).append("\n");
    sb.append("    detectorId: ").append(toIndentedString(detectorId)).append("\n");
    sb.append("    detectorName: ").append(toIndentedString(detectorName)).append("\n");
    sb.append("    detectorTags: ").append(toIndentedString(detectorTags)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    referenceUrls: ").append(toIndentedString(referenceUrls)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    sourceLambdaLayerArn: ").append(toIndentedString(sourceLambdaLayerArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cwes");
    openapiFields.add("detectorId");
    openapiFields.add("detectorName");
    openapiFields.add("detectorTags");
    openapiFields.add("filePath");
    openapiFields.add("referenceUrls");
    openapiFields.add("ruleId");
    openapiFields.add("sourceLambdaLayerArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cwes");
    openapiRequiredFields.add("detectorId");
    openapiRequiredFields.add("detectorName");
    openapiRequiredFields.add("filePath");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindingCodeVulnerabilityDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindingCodeVulnerabilityDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindingCodeVulnerabilityDetails is not found in the empty JSON string", FindingCodeVulnerabilityDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindingCodeVulnerabilityDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindingCodeVulnerabilityDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FindingCodeVulnerabilityDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `cwes`
      List.validateJsonElement(jsonObj.get("cwes"));
      // validate the required field `detectorId`
      String.validateJsonElement(jsonObj.get("detectorId"));
      // validate the required field `detectorName`
      String.validateJsonElement(jsonObj.get("detectorName"));
      // validate the optional field `detectorTags`
      if (jsonObj.get("detectorTags") != null && !jsonObj.get("detectorTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("detectorTags"));
      }
      // validate the required field `filePath`
      CodeVulnerabilityDetailsFilePath.validateJsonElement(jsonObj.get("filePath"));
      // validate the optional field `referenceUrls`
      if (jsonObj.get("referenceUrls") != null && !jsonObj.get("referenceUrls").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("referenceUrls"));
      }
      // validate the optional field `ruleId`
      if (jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ruleId"));
      }
      // validate the optional field `sourceLambdaLayerArn`
      if (jsonObj.get("sourceLambdaLayerArn") != null && !jsonObj.get("sourceLambdaLayerArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceLambdaLayerArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindingCodeVulnerabilityDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindingCodeVulnerabilityDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindingCodeVulnerabilityDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindingCodeVulnerabilityDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FindingCodeVulnerabilityDetails>() {
           @Override
           public void write(JsonWriter out, FindingCodeVulnerabilityDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindingCodeVulnerabilityDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindingCodeVulnerabilityDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindingCodeVulnerabilityDetails
   * @throws IOException if the JSON string is invalid with respect to FindingCodeVulnerabilityDetails
   */
  public static FindingCodeVulnerabilityDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindingCodeVulnerabilityDetails.class);
  }

  /**
   * Convert an instance of FindingCodeVulnerabilityDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

