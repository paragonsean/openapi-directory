/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AmiAggregationResponseSeverityCounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response that contains the results of a finding aggregation by Amazon EC2 instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ec2InstanceAggregationResponse {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AMI = "ami";
  @SerializedName(SERIALIZED_NAME_AMI)
  private String ami;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_TAGS = "instanceTags";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TAGS)
  private Map instanceTags;

  public static final String SERIALIZED_NAME_NETWORK_FINDINGS = "networkFindings";
  @SerializedName(SERIALIZED_NAME_NETWORK_FINDINGS)
  private Integer networkFindings;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_SEVERITY_COUNTS = "severityCounts";
  @SerializedName(SERIALIZED_NAME_SEVERITY_COUNTS)
  private AmiAggregationResponseSeverityCounts severityCounts;

  public Ec2InstanceAggregationResponse() {
  }

  public Ec2InstanceAggregationResponse accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Ec2InstanceAggregationResponse ami(String ami) {
    this.ami = ami;
    return this;
  }

  /**
   * Get ami
   * @return ami
   */
  @javax.annotation.Nullable
  public String getAmi() {
    return ami;
  }

  public void setAmi(String ami) {
    this.ami = ami;
  }


  public Ec2InstanceAggregationResponse instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public Ec2InstanceAggregationResponse instanceTags(Map instanceTags) {
    this.instanceTags = instanceTags;
    return this;
  }

  /**
   * Get instanceTags
   * @return instanceTags
   */
  @javax.annotation.Nullable
  public Map getInstanceTags() {
    return instanceTags;
  }

  public void setInstanceTags(Map instanceTags) {
    this.instanceTags = instanceTags;
  }


  public Ec2InstanceAggregationResponse networkFindings(Integer networkFindings) {
    this.networkFindings = networkFindings;
    return this;
  }

  /**
   * Get networkFindings
   * @return networkFindings
   */
  @javax.annotation.Nullable
  public Integer getNetworkFindings() {
    return networkFindings;
  }

  public void setNetworkFindings(Integer networkFindings) {
    this.networkFindings = networkFindings;
  }


  public Ec2InstanceAggregationResponse operatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Get operatingSystem
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public String getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public Ec2InstanceAggregationResponse severityCounts(AmiAggregationResponseSeverityCounts severityCounts) {
    this.severityCounts = severityCounts;
    return this;
  }

  /**
   * Get severityCounts
   * @return severityCounts
   */
  @javax.annotation.Nullable
  public AmiAggregationResponseSeverityCounts getSeverityCounts() {
    return severityCounts;
  }

  public void setSeverityCounts(AmiAggregationResponseSeverityCounts severityCounts) {
    this.severityCounts = severityCounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ec2InstanceAggregationResponse ec2InstanceAggregationResponse = (Ec2InstanceAggregationResponse) o;
    return Objects.equals(this.accountId, ec2InstanceAggregationResponse.accountId) &&
        Objects.equals(this.ami, ec2InstanceAggregationResponse.ami) &&
        Objects.equals(this.instanceId, ec2InstanceAggregationResponse.instanceId) &&
        Objects.equals(this.instanceTags, ec2InstanceAggregationResponse.instanceTags) &&
        Objects.equals(this.networkFindings, ec2InstanceAggregationResponse.networkFindings) &&
        Objects.equals(this.operatingSystem, ec2InstanceAggregationResponse.operatingSystem) &&
        Objects.equals(this.severityCounts, ec2InstanceAggregationResponse.severityCounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, ami, instanceId, instanceTags, networkFindings, operatingSystem, severityCounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ec2InstanceAggregationResponse {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    ami: ").append(toIndentedString(ami)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceTags: ").append(toIndentedString(instanceTags)).append("\n");
    sb.append("    networkFindings: ").append(toIndentedString(networkFindings)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    severityCounts: ").append(toIndentedString(severityCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("ami");
    openapiFields.add("instanceId");
    openapiFields.add("instanceTags");
    openapiFields.add("networkFindings");
    openapiFields.add("operatingSystem");
    openapiFields.add("severityCounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instanceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ec2InstanceAggregationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ec2InstanceAggregationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ec2InstanceAggregationResponse is not found in the empty JSON string", Ec2InstanceAggregationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ec2InstanceAggregationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ec2InstanceAggregationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Ec2InstanceAggregationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountId`
      if (jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("accountId"));
      }
      // validate the optional field `ami`
      if (jsonObj.get("ami") != null && !jsonObj.get("ami").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ami"));
      }
      // validate the required field `instanceId`
      String.validateJsonElement(jsonObj.get("instanceId"));
      // validate the optional field `instanceTags`
      if (jsonObj.get("instanceTags") != null && !jsonObj.get("instanceTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("instanceTags"));
      }
      // validate the optional field `networkFindings`
      if (jsonObj.get("networkFindings") != null && !jsonObj.get("networkFindings").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("networkFindings"));
      }
      // validate the optional field `operatingSystem`
      if (jsonObj.get("operatingSystem") != null && !jsonObj.get("operatingSystem").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("operatingSystem"));
      }
      // validate the optional field `severityCounts`
      if (jsonObj.get("severityCounts") != null && !jsonObj.get("severityCounts").isJsonNull()) {
        AmiAggregationResponseSeverityCounts.validateJsonElement(jsonObj.get("severityCounts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ec2InstanceAggregationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ec2InstanceAggregationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ec2InstanceAggregationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ec2InstanceAggregationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Ec2InstanceAggregationResponse>() {
           @Override
           public void write(JsonWriter out, Ec2InstanceAggregationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ec2InstanceAggregationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ec2InstanceAggregationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ec2InstanceAggregationResponse
   * @throws IOException if the JSON string is invalid with respect to Ec2InstanceAggregationResponse
   */
  public static Ec2InstanceAggregationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ec2InstanceAggregationResponse.class);
  }

  /**
   * Convert an instance of Ec2InstanceAggregationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

