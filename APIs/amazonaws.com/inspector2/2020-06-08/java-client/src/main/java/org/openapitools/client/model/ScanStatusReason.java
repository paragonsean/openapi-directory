/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ScanStatusReason
 */
@JsonAdapter(ScanStatusReason.Adapter.class)
public enum ScanStatusReason {
  
  PENDING_INITIAL_SCAN("PENDING_INITIAL_SCAN"),
  
  ACCESS_DENIED("ACCESS_DENIED"),
  
  INTERNAL_ERROR("INTERNAL_ERROR"),
  
  UNMANAGED_EC2_INSTANCE("UNMANAGED_EC2_INSTANCE"),
  
  UNSUPPORTED_OS("UNSUPPORTED_OS"),
  
  SCAN_ELIGIBILITY_EXPIRED("SCAN_ELIGIBILITY_EXPIRED"),
  
  RESOURCE_TERMINATED("RESOURCE_TERMINATED"),
  
  SUCCESSFUL("SUCCESSFUL"),
  
  NO_RESOURCES_FOUND("NO_RESOURCES_FOUND"),
  
  IMAGE_SIZE_EXCEEDED("IMAGE_SIZE_EXCEEDED"),
  
  SCAN_FREQUENCY_MANUAL("SCAN_FREQUENCY_MANUAL"),
  
  SCAN_FREQUENCY_SCAN_ON_PUSH("SCAN_FREQUENCY_SCAN_ON_PUSH"),
  
  EC2_INSTANCE_STOPPED("EC2_INSTANCE_STOPPED"),
  
  PENDING_DISABLE("PENDING_DISABLE"),
  
  NO_INVENTORY("NO_INVENTORY"),
  
  STALE_INVENTORY("STALE_INVENTORY"),
  
  EXCLUDED_BY_TAG("EXCLUDED_BY_TAG"),
  
  UNSUPPORTED_RUNTIME("UNSUPPORTED_RUNTIME"),
  
  UNSUPPORTED_MEDIA_TYPE("UNSUPPORTED_MEDIA_TYPE"),
  
  UNSUPPORTED_CONFIG_FILE("UNSUPPORTED_CONFIG_FILE"),
  
  DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED("DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED"),
  
  DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED("DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED"),
  
  DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED("DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED"),
  
  DEEP_INSPECTION_NO_INVENTORY("DEEP_INSPECTION_NO_INVENTORY");

  private String value;

  ScanStatusReason(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ScanStatusReason fromValue(String value) {
    for (ScanStatusReason b : ScanStatusReason.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ScanStatusReason> {
    @Override
    public void write(final JsonWriter jsonWriter, final ScanStatusReason enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ScanStatusReason read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ScanStatusReason.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ScanStatusReason.fromValue(value);
  }
}

