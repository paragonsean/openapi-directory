/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResourceScanMetadataEc2;
import org.openapitools.client.model.ResourceScanMetadataEcrImage;
import org.openapitools.client.model.ResourceScanMetadataEcrRepository;
import org.openapitools.client.model.ResourceScanMetadataLambdaFunction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that contains details about the metadata for an Amazon ECR resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceScanMetadata {
  public static final String SERIALIZED_NAME_EC2 = "ec2";
  @SerializedName(SERIALIZED_NAME_EC2)
  private ResourceScanMetadataEc2 ec2;

  public static final String SERIALIZED_NAME_ECR_IMAGE = "ecrImage";
  @SerializedName(SERIALIZED_NAME_ECR_IMAGE)
  private ResourceScanMetadataEcrImage ecrImage;

  public static final String SERIALIZED_NAME_ECR_REPOSITORY = "ecrRepository";
  @SerializedName(SERIALIZED_NAME_ECR_REPOSITORY)
  private ResourceScanMetadataEcrRepository ecrRepository;

  public static final String SERIALIZED_NAME_LAMBDA_FUNCTION = "lambdaFunction";
  @SerializedName(SERIALIZED_NAME_LAMBDA_FUNCTION)
  private ResourceScanMetadataLambdaFunction lambdaFunction;

  public ResourceScanMetadata() {
  }

  public ResourceScanMetadata ec2(ResourceScanMetadataEc2 ec2) {
    this.ec2 = ec2;
    return this;
  }

  /**
   * Get ec2
   * @return ec2
   */
  @javax.annotation.Nullable
  public ResourceScanMetadataEc2 getEc2() {
    return ec2;
  }

  public void setEc2(ResourceScanMetadataEc2 ec2) {
    this.ec2 = ec2;
  }


  public ResourceScanMetadata ecrImage(ResourceScanMetadataEcrImage ecrImage) {
    this.ecrImage = ecrImage;
    return this;
  }

  /**
   * Get ecrImage
   * @return ecrImage
   */
  @javax.annotation.Nullable
  public ResourceScanMetadataEcrImage getEcrImage() {
    return ecrImage;
  }

  public void setEcrImage(ResourceScanMetadataEcrImage ecrImage) {
    this.ecrImage = ecrImage;
  }


  public ResourceScanMetadata ecrRepository(ResourceScanMetadataEcrRepository ecrRepository) {
    this.ecrRepository = ecrRepository;
    return this;
  }

  /**
   * Get ecrRepository
   * @return ecrRepository
   */
  @javax.annotation.Nullable
  public ResourceScanMetadataEcrRepository getEcrRepository() {
    return ecrRepository;
  }

  public void setEcrRepository(ResourceScanMetadataEcrRepository ecrRepository) {
    this.ecrRepository = ecrRepository;
  }


  public ResourceScanMetadata lambdaFunction(ResourceScanMetadataLambdaFunction lambdaFunction) {
    this.lambdaFunction = lambdaFunction;
    return this;
  }

  /**
   * Get lambdaFunction
   * @return lambdaFunction
   */
  @javax.annotation.Nullable
  public ResourceScanMetadataLambdaFunction getLambdaFunction() {
    return lambdaFunction;
  }

  public void setLambdaFunction(ResourceScanMetadataLambdaFunction lambdaFunction) {
    this.lambdaFunction = lambdaFunction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceScanMetadata resourceScanMetadata = (ResourceScanMetadata) o;
    return Objects.equals(this.ec2, resourceScanMetadata.ec2) &&
        Objects.equals(this.ecrImage, resourceScanMetadata.ecrImage) &&
        Objects.equals(this.ecrRepository, resourceScanMetadata.ecrRepository) &&
        Objects.equals(this.lambdaFunction, resourceScanMetadata.lambdaFunction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ec2, ecrImage, ecrRepository, lambdaFunction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceScanMetadata {\n");
    sb.append("    ec2: ").append(toIndentedString(ec2)).append("\n");
    sb.append("    ecrImage: ").append(toIndentedString(ecrImage)).append("\n");
    sb.append("    ecrRepository: ").append(toIndentedString(ecrRepository)).append("\n");
    sb.append("    lambdaFunction: ").append(toIndentedString(lambdaFunction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ec2");
    openapiFields.add("ecrImage");
    openapiFields.add("ecrRepository");
    openapiFields.add("lambdaFunction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceScanMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceScanMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceScanMetadata is not found in the empty JSON string", ResourceScanMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceScanMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceScanMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ec2`
      if (jsonObj.get("ec2") != null && !jsonObj.get("ec2").isJsonNull()) {
        ResourceScanMetadataEc2.validateJsonElement(jsonObj.get("ec2"));
      }
      // validate the optional field `ecrImage`
      if (jsonObj.get("ecrImage") != null && !jsonObj.get("ecrImage").isJsonNull()) {
        ResourceScanMetadataEcrImage.validateJsonElement(jsonObj.get("ecrImage"));
      }
      // validate the optional field `ecrRepository`
      if (jsonObj.get("ecrRepository") != null && !jsonObj.get("ecrRepository").isJsonNull()) {
        ResourceScanMetadataEcrRepository.validateJsonElement(jsonObj.get("ecrRepository"));
      }
      // validate the optional field `lambdaFunction`
      if (jsonObj.get("lambdaFunction") != null && !jsonObj.get("lambdaFunction").isJsonNull()) {
        ResourceScanMetadataLambdaFunction.validateJsonElement(jsonObj.get("lambdaFunction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceScanMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceScanMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceScanMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceScanMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceScanMetadata>() {
           @Override
           public void write(JsonWriter out, ResourceScanMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceScanMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceScanMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceScanMetadata
   * @throws IOException if the JSON string is invalid with respect to ResourceScanMetadata
   */
  public static ResourceScanMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceScanMetadata.class);
  }

  /**
   * Convert an instance of ResourceScanMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

