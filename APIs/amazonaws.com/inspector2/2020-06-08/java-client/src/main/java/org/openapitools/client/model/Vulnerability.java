/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VulnerabilityAtigData;
import org.openapitools.client.model.VulnerabilityCisaData;
import org.openapitools.client.model.VulnerabilityCvss2;
import org.openapitools.client.model.VulnerabilityCvss3;
import org.openapitools.client.model.VulnerabilityEpss;
import org.openapitools.client.model.VulnerabilityExploitObserved;
import org.openapitools.client.model.VulnerabilitySource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details about a specific vulnerability Amazon Inspector can detect.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Vulnerability {
  public static final String SERIALIZED_NAME_ATIG_DATA = "atigData";
  @SerializedName(SERIALIZED_NAME_ATIG_DATA)
  private VulnerabilityAtigData atigData;

  public static final String SERIALIZED_NAME_CISA_DATA = "cisaData";
  @SerializedName(SERIALIZED_NAME_CISA_DATA)
  private VulnerabilityCisaData cisaData;

  public static final String SERIALIZED_NAME_CVSS2 = "cvss2";
  @SerializedName(SERIALIZED_NAME_CVSS2)
  private VulnerabilityCvss2 cvss2;

  public static final String SERIALIZED_NAME_CVSS3 = "cvss3";
  @SerializedName(SERIALIZED_NAME_CVSS3)
  private VulnerabilityCvss3 cvss3;

  public static final String SERIALIZED_NAME_CWES = "cwes";
  @SerializedName(SERIALIZED_NAME_CWES)
  private List cwes;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETECTION_PLATFORMS = "detectionPlatforms";
  @SerializedName(SERIALIZED_NAME_DETECTION_PLATFORMS)
  private List detectionPlatforms;

  public static final String SERIALIZED_NAME_EPSS = "epss";
  @SerializedName(SERIALIZED_NAME_EPSS)
  private VulnerabilityEpss epss;

  public static final String SERIALIZED_NAME_EXPLOIT_OBSERVED = "exploitObserved";
  @SerializedName(SERIALIZED_NAME_EXPLOIT_OBSERVED)
  private VulnerabilityExploitObserved exploitObserved;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REFERENCE_URLS = "referenceUrls";
  @SerializedName(SERIALIZED_NAME_REFERENCE_URLS)
  private List referenceUrls;

  public static final String SERIALIZED_NAME_RELATED_VULNERABILITIES = "relatedVulnerabilities";
  @SerializedName(SERIALIZED_NAME_RELATED_VULNERABILITIES)
  private List relatedVulnerabilities;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private VulnerabilitySource source;

  public static final String SERIALIZED_NAME_SOURCE_URL = "sourceUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_VENDOR_CREATED_AT = "vendorCreatedAt";
  @SerializedName(SERIALIZED_NAME_VENDOR_CREATED_AT)
  private OffsetDateTime vendorCreatedAt;

  public static final String SERIALIZED_NAME_VENDOR_SEVERITY = "vendorSeverity";
  @SerializedName(SERIALIZED_NAME_VENDOR_SEVERITY)
  private String vendorSeverity;

  public static final String SERIALIZED_NAME_VENDOR_UPDATED_AT = "vendorUpdatedAt";
  @SerializedName(SERIALIZED_NAME_VENDOR_UPDATED_AT)
  private OffsetDateTime vendorUpdatedAt;

  public Vulnerability() {
  }

  public Vulnerability atigData(VulnerabilityAtigData atigData) {
    this.atigData = atigData;
    return this;
  }

  /**
   * Get atigData
   * @return atigData
   */
  @javax.annotation.Nullable
  public VulnerabilityAtigData getAtigData() {
    return atigData;
  }

  public void setAtigData(VulnerabilityAtigData atigData) {
    this.atigData = atigData;
  }


  public Vulnerability cisaData(VulnerabilityCisaData cisaData) {
    this.cisaData = cisaData;
    return this;
  }

  /**
   * Get cisaData
   * @return cisaData
   */
  @javax.annotation.Nullable
  public VulnerabilityCisaData getCisaData() {
    return cisaData;
  }

  public void setCisaData(VulnerabilityCisaData cisaData) {
    this.cisaData = cisaData;
  }


  public Vulnerability cvss2(VulnerabilityCvss2 cvss2) {
    this.cvss2 = cvss2;
    return this;
  }

  /**
   * Get cvss2
   * @return cvss2
   */
  @javax.annotation.Nullable
  public VulnerabilityCvss2 getCvss2() {
    return cvss2;
  }

  public void setCvss2(VulnerabilityCvss2 cvss2) {
    this.cvss2 = cvss2;
  }


  public Vulnerability cvss3(VulnerabilityCvss3 cvss3) {
    this.cvss3 = cvss3;
    return this;
  }

  /**
   * Get cvss3
   * @return cvss3
   */
  @javax.annotation.Nullable
  public VulnerabilityCvss3 getCvss3() {
    return cvss3;
  }

  public void setCvss3(VulnerabilityCvss3 cvss3) {
    this.cvss3 = cvss3;
  }


  public Vulnerability cwes(List cwes) {
    this.cwes = cwes;
    return this;
  }

  /**
   * Get cwes
   * @return cwes
   */
  @javax.annotation.Nullable
  public List getCwes() {
    return cwes;
  }

  public void setCwes(List cwes) {
    this.cwes = cwes;
  }


  public Vulnerability description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Vulnerability detectionPlatforms(List detectionPlatforms) {
    this.detectionPlatforms = detectionPlatforms;
    return this;
  }

  /**
   * Get detectionPlatforms
   * @return detectionPlatforms
   */
  @javax.annotation.Nullable
  public List getDetectionPlatforms() {
    return detectionPlatforms;
  }

  public void setDetectionPlatforms(List detectionPlatforms) {
    this.detectionPlatforms = detectionPlatforms;
  }


  public Vulnerability epss(VulnerabilityEpss epss) {
    this.epss = epss;
    return this;
  }

  /**
   * Get epss
   * @return epss
   */
  @javax.annotation.Nullable
  public VulnerabilityEpss getEpss() {
    return epss;
  }

  public void setEpss(VulnerabilityEpss epss) {
    this.epss = epss;
  }


  public Vulnerability exploitObserved(VulnerabilityExploitObserved exploitObserved) {
    this.exploitObserved = exploitObserved;
    return this;
  }

  /**
   * Get exploitObserved
   * @return exploitObserved
   */
  @javax.annotation.Nullable
  public VulnerabilityExploitObserved getExploitObserved() {
    return exploitObserved;
  }

  public void setExploitObserved(VulnerabilityExploitObserved exploitObserved) {
    this.exploitObserved = exploitObserved;
  }


  public Vulnerability id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Vulnerability referenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
    return this;
  }

  /**
   * Get referenceUrls
   * @return referenceUrls
   */
  @javax.annotation.Nullable
  public List getReferenceUrls() {
    return referenceUrls;
  }

  public void setReferenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
  }


  public Vulnerability relatedVulnerabilities(List relatedVulnerabilities) {
    this.relatedVulnerabilities = relatedVulnerabilities;
    return this;
  }

  /**
   * Get relatedVulnerabilities
   * @return relatedVulnerabilities
   */
  @javax.annotation.Nullable
  public List getRelatedVulnerabilities() {
    return relatedVulnerabilities;
  }

  public void setRelatedVulnerabilities(List relatedVulnerabilities) {
    this.relatedVulnerabilities = relatedVulnerabilities;
  }


  public Vulnerability source(VulnerabilitySource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public VulnerabilitySource getSource() {
    return source;
  }

  public void setSource(VulnerabilitySource source) {
    this.source = source;
  }


  public Vulnerability sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Get sourceUrl
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public Vulnerability vendorCreatedAt(OffsetDateTime vendorCreatedAt) {
    this.vendorCreatedAt = vendorCreatedAt;
    return this;
  }

  /**
   * Get vendorCreatedAt
   * @return vendorCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVendorCreatedAt() {
    return vendorCreatedAt;
  }

  public void setVendorCreatedAt(OffsetDateTime vendorCreatedAt) {
    this.vendorCreatedAt = vendorCreatedAt;
  }


  public Vulnerability vendorSeverity(String vendorSeverity) {
    this.vendorSeverity = vendorSeverity;
    return this;
  }

  /**
   * Get vendorSeverity
   * @return vendorSeverity
   */
  @javax.annotation.Nullable
  public String getVendorSeverity() {
    return vendorSeverity;
  }

  public void setVendorSeverity(String vendorSeverity) {
    this.vendorSeverity = vendorSeverity;
  }


  public Vulnerability vendorUpdatedAt(OffsetDateTime vendorUpdatedAt) {
    this.vendorUpdatedAt = vendorUpdatedAt;
    return this;
  }

  /**
   * Get vendorUpdatedAt
   * @return vendorUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVendorUpdatedAt() {
    return vendorUpdatedAt;
  }

  public void setVendorUpdatedAt(OffsetDateTime vendorUpdatedAt) {
    this.vendorUpdatedAt = vendorUpdatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vulnerability vulnerability = (Vulnerability) o;
    return Objects.equals(this.atigData, vulnerability.atigData) &&
        Objects.equals(this.cisaData, vulnerability.cisaData) &&
        Objects.equals(this.cvss2, vulnerability.cvss2) &&
        Objects.equals(this.cvss3, vulnerability.cvss3) &&
        Objects.equals(this.cwes, vulnerability.cwes) &&
        Objects.equals(this.description, vulnerability.description) &&
        Objects.equals(this.detectionPlatforms, vulnerability.detectionPlatforms) &&
        Objects.equals(this.epss, vulnerability.epss) &&
        Objects.equals(this.exploitObserved, vulnerability.exploitObserved) &&
        Objects.equals(this.id, vulnerability.id) &&
        Objects.equals(this.referenceUrls, vulnerability.referenceUrls) &&
        Objects.equals(this.relatedVulnerabilities, vulnerability.relatedVulnerabilities) &&
        Objects.equals(this.source, vulnerability.source) &&
        Objects.equals(this.sourceUrl, vulnerability.sourceUrl) &&
        Objects.equals(this.vendorCreatedAt, vulnerability.vendorCreatedAt) &&
        Objects.equals(this.vendorSeverity, vulnerability.vendorSeverity) &&
        Objects.equals(this.vendorUpdatedAt, vulnerability.vendorUpdatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atigData, cisaData, cvss2, cvss3, cwes, description, detectionPlatforms, epss, exploitObserved, id, referenceUrls, relatedVulnerabilities, source, sourceUrl, vendorCreatedAt, vendorSeverity, vendorUpdatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vulnerability {\n");
    sb.append("    atigData: ").append(toIndentedString(atigData)).append("\n");
    sb.append("    cisaData: ").append(toIndentedString(cisaData)).append("\n");
    sb.append("    cvss2: ").append(toIndentedString(cvss2)).append("\n");
    sb.append("    cvss3: ").append(toIndentedString(cvss3)).append("\n");
    sb.append("    cwes: ").append(toIndentedString(cwes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detectionPlatforms: ").append(toIndentedString(detectionPlatforms)).append("\n");
    sb.append("    epss: ").append(toIndentedString(epss)).append("\n");
    sb.append("    exploitObserved: ").append(toIndentedString(exploitObserved)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    referenceUrls: ").append(toIndentedString(referenceUrls)).append("\n");
    sb.append("    relatedVulnerabilities: ").append(toIndentedString(relatedVulnerabilities)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    vendorCreatedAt: ").append(toIndentedString(vendorCreatedAt)).append("\n");
    sb.append("    vendorSeverity: ").append(toIndentedString(vendorSeverity)).append("\n");
    sb.append("    vendorUpdatedAt: ").append(toIndentedString(vendorUpdatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("atigData");
    openapiFields.add("cisaData");
    openapiFields.add("cvss2");
    openapiFields.add("cvss3");
    openapiFields.add("cwes");
    openapiFields.add("description");
    openapiFields.add("detectionPlatforms");
    openapiFields.add("epss");
    openapiFields.add("exploitObserved");
    openapiFields.add("id");
    openapiFields.add("referenceUrls");
    openapiFields.add("relatedVulnerabilities");
    openapiFields.add("source");
    openapiFields.add("sourceUrl");
    openapiFields.add("vendorCreatedAt");
    openapiFields.add("vendorSeverity");
    openapiFields.add("vendorUpdatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vulnerability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vulnerability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vulnerability is not found in the empty JSON string", Vulnerability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vulnerability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vulnerability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Vulnerability.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `atigData`
      if (jsonObj.get("atigData") != null && !jsonObj.get("atigData").isJsonNull()) {
        VulnerabilityAtigData.validateJsonElement(jsonObj.get("atigData"));
      }
      // validate the optional field `cisaData`
      if (jsonObj.get("cisaData") != null && !jsonObj.get("cisaData").isJsonNull()) {
        VulnerabilityCisaData.validateJsonElement(jsonObj.get("cisaData"));
      }
      // validate the optional field `cvss2`
      if (jsonObj.get("cvss2") != null && !jsonObj.get("cvss2").isJsonNull()) {
        VulnerabilityCvss2.validateJsonElement(jsonObj.get("cvss2"));
      }
      // validate the optional field `cvss3`
      if (jsonObj.get("cvss3") != null && !jsonObj.get("cvss3").isJsonNull()) {
        VulnerabilityCvss3.validateJsonElement(jsonObj.get("cvss3"));
      }
      // validate the optional field `cwes`
      if (jsonObj.get("cwes") != null && !jsonObj.get("cwes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("cwes"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `detectionPlatforms`
      if (jsonObj.get("detectionPlatforms") != null && !jsonObj.get("detectionPlatforms").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("detectionPlatforms"));
      }
      // validate the optional field `epss`
      if (jsonObj.get("epss") != null && !jsonObj.get("epss").isJsonNull()) {
        VulnerabilityEpss.validateJsonElement(jsonObj.get("epss"));
      }
      // validate the optional field `exploitObserved`
      if (jsonObj.get("exploitObserved") != null && !jsonObj.get("exploitObserved").isJsonNull()) {
        VulnerabilityExploitObserved.validateJsonElement(jsonObj.get("exploitObserved"));
      }
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `referenceUrls`
      if (jsonObj.get("referenceUrls") != null && !jsonObj.get("referenceUrls").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("referenceUrls"));
      }
      // validate the optional field `relatedVulnerabilities`
      if (jsonObj.get("relatedVulnerabilities") != null && !jsonObj.get("relatedVulnerabilities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("relatedVulnerabilities"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        VulnerabilitySource.validateJsonElement(jsonObj.get("source"));
      }
      // validate the optional field `sourceUrl`
      if (jsonObj.get("sourceUrl") != null && !jsonObj.get("sourceUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceUrl"));
      }
      // validate the optional field `vendorCreatedAt`
      if (jsonObj.get("vendorCreatedAt") != null && !jsonObj.get("vendorCreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("vendorCreatedAt"));
      }
      // validate the optional field `vendorSeverity`
      if (jsonObj.get("vendorSeverity") != null && !jsonObj.get("vendorSeverity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vendorSeverity"));
      }
      // validate the optional field `vendorUpdatedAt`
      if (jsonObj.get("vendorUpdatedAt") != null && !jsonObj.get("vendorUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("vendorUpdatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vulnerability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vulnerability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vulnerability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vulnerability.class));

       return (TypeAdapter<T>) new TypeAdapter<Vulnerability>() {
           @Override
           public void write(JsonWriter out, Vulnerability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vulnerability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vulnerability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vulnerability
   * @throws IOException if the JSON string is invalid with respect to Vulnerability
   */
  public static Vulnerability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vulnerability.class);
  }

  /**
   * Convert an instance of Vulnerability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

