/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Runtime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceScanMetadataLambdaFunction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceScanMetadataLambdaFunction {
  public static final String SERIALIZED_NAME_FUNCTION_NAME = "functionName";
  @SerializedName(SERIALIZED_NAME_FUNCTION_NAME)
  private String functionName;

  public static final String SERIALIZED_NAME_FUNCTION_TAGS = "functionTags";
  @SerializedName(SERIALIZED_NAME_FUNCTION_TAGS)
  private Map functionTags;

  public static final String SERIALIZED_NAME_LAYERS = "layers";
  @SerializedName(SERIALIZED_NAME_LAYERS)
  private List layers;

  public static final String SERIALIZED_NAME_RUNTIME = "runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private Runtime runtime;

  public ResourceScanMetadataLambdaFunction() {
  }

  public ResourceScanMetadataLambdaFunction functionName(String functionName) {
    this.functionName = functionName;
    return this;
  }

  /**
   * Get functionName
   * @return functionName
   */
  @javax.annotation.Nullable
  public String getFunctionName() {
    return functionName;
  }

  public void setFunctionName(String functionName) {
    this.functionName = functionName;
  }


  public ResourceScanMetadataLambdaFunction functionTags(Map functionTags) {
    this.functionTags = functionTags;
    return this;
  }

  /**
   * Get functionTags
   * @return functionTags
   */
  @javax.annotation.Nullable
  public Map getFunctionTags() {
    return functionTags;
  }

  public void setFunctionTags(Map functionTags) {
    this.functionTags = functionTags;
  }


  public ResourceScanMetadataLambdaFunction layers(List layers) {
    this.layers = layers;
    return this;
  }

  /**
   * Get layers
   * @return layers
   */
  @javax.annotation.Nullable
  public List getLayers() {
    return layers;
  }

  public void setLayers(List layers) {
    this.layers = layers;
  }


  public ResourceScanMetadataLambdaFunction runtime(Runtime runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nullable
  public Runtime getRuntime() {
    return runtime;
  }

  public void setRuntime(Runtime runtime) {
    this.runtime = runtime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceScanMetadataLambdaFunction resourceScanMetadataLambdaFunction = (ResourceScanMetadataLambdaFunction) o;
    return Objects.equals(this.functionName, resourceScanMetadataLambdaFunction.functionName) &&
        Objects.equals(this.functionTags, resourceScanMetadataLambdaFunction.functionTags) &&
        Objects.equals(this.layers, resourceScanMetadataLambdaFunction.layers) &&
        Objects.equals(this.runtime, resourceScanMetadataLambdaFunction.runtime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionName, functionTags, layers, runtime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceScanMetadataLambdaFunction {\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    functionTags: ").append(toIndentedString(functionTags)).append("\n");
    sb.append("    layers: ").append(toIndentedString(layers)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("functionName");
    openapiFields.add("functionTags");
    openapiFields.add("layers");
    openapiFields.add("runtime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceScanMetadataLambdaFunction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceScanMetadataLambdaFunction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceScanMetadataLambdaFunction is not found in the empty JSON string", ResourceScanMetadataLambdaFunction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceScanMetadataLambdaFunction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceScanMetadataLambdaFunction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `functionName`
      if (jsonObj.get("functionName") != null && !jsonObj.get("functionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("functionName"));
      }
      // validate the optional field `functionTags`
      if (jsonObj.get("functionTags") != null && !jsonObj.get("functionTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("functionTags"));
      }
      // validate the optional field `layers`
      if (jsonObj.get("layers") != null && !jsonObj.get("layers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("layers"));
      }
      // validate the optional field `runtime`
      if (jsonObj.get("runtime") != null && !jsonObj.get("runtime").isJsonNull()) {
        Runtime.validateJsonElement(jsonObj.get("runtime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceScanMetadataLambdaFunction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceScanMetadataLambdaFunction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceScanMetadataLambdaFunction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceScanMetadataLambdaFunction.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceScanMetadataLambdaFunction>() {
           @Override
           public void write(JsonWriter out, ResourceScanMetadataLambdaFunction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceScanMetadataLambdaFunction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceScanMetadataLambdaFunction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceScanMetadataLambdaFunction
   * @throws IOException if the JSON string is invalid with respect to ResourceScanMetadataLambdaFunction
   */
  public static ResourceScanMetadataLambdaFunction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceScanMetadataLambdaFunction.class);
  }

  /**
   * Convert an instance of ResourceScanMetadataLambdaFunction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

