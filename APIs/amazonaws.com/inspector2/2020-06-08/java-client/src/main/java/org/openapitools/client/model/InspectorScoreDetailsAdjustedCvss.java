/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InspectorScoreDetailsAdjustedCvss
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InspectorScoreDetailsAdjustedCvss {
  public static final String SERIALIZED_NAME_ADJUSTMENTS = "adjustments";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENTS)
  private List adjustments;

  public static final String SERIALIZED_NAME_CVSS_SOURCE = "cvssSource";
  @SerializedName(SERIALIZED_NAME_CVSS_SOURCE)
  private String cvssSource;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_SCORE_SOURCE = "scoreSource";
  @SerializedName(SERIALIZED_NAME_SCORE_SOURCE)
  private String scoreSource;

  public static final String SERIALIZED_NAME_SCORING_VECTOR = "scoringVector";
  @SerializedName(SERIALIZED_NAME_SCORING_VECTOR)
  private String scoringVector;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public InspectorScoreDetailsAdjustedCvss() {
  }

  public InspectorScoreDetailsAdjustedCvss adjustments(List adjustments) {
    this.adjustments = adjustments;
    return this;
  }

  /**
   * Get adjustments
   * @return adjustments
   */
  @javax.annotation.Nullable
  public List getAdjustments() {
    return adjustments;
  }

  public void setAdjustments(List adjustments) {
    this.adjustments = adjustments;
  }


  public InspectorScoreDetailsAdjustedCvss cvssSource(String cvssSource) {
    this.cvssSource = cvssSource;
    return this;
  }

  /**
   * Get cvssSource
   * @return cvssSource
   */
  @javax.annotation.Nullable
  public String getCvssSource() {
    return cvssSource;
  }

  public void setCvssSource(String cvssSource) {
    this.cvssSource = cvssSource;
  }


  public InspectorScoreDetailsAdjustedCvss score(Double score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }


  public InspectorScoreDetailsAdjustedCvss scoreSource(String scoreSource) {
    this.scoreSource = scoreSource;
    return this;
  }

  /**
   * Get scoreSource
   * @return scoreSource
   */
  @javax.annotation.Nonnull
  public String getScoreSource() {
    return scoreSource;
  }

  public void setScoreSource(String scoreSource) {
    this.scoreSource = scoreSource;
  }


  public InspectorScoreDetailsAdjustedCvss scoringVector(String scoringVector) {
    this.scoringVector = scoringVector;
    return this;
  }

  /**
   * Get scoringVector
   * @return scoringVector
   */
  @javax.annotation.Nonnull
  public String getScoringVector() {
    return scoringVector;
  }

  public void setScoringVector(String scoringVector) {
    this.scoringVector = scoringVector;
  }


  public InspectorScoreDetailsAdjustedCvss version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InspectorScoreDetailsAdjustedCvss inspectorScoreDetailsAdjustedCvss = (InspectorScoreDetailsAdjustedCvss) o;
    return Objects.equals(this.adjustments, inspectorScoreDetailsAdjustedCvss.adjustments) &&
        Objects.equals(this.cvssSource, inspectorScoreDetailsAdjustedCvss.cvssSource) &&
        Objects.equals(this.score, inspectorScoreDetailsAdjustedCvss.score) &&
        Objects.equals(this.scoreSource, inspectorScoreDetailsAdjustedCvss.scoreSource) &&
        Objects.equals(this.scoringVector, inspectorScoreDetailsAdjustedCvss.scoringVector) &&
        Objects.equals(this.version, inspectorScoreDetailsAdjustedCvss.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustments, cvssSource, score, scoreSource, scoringVector, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InspectorScoreDetailsAdjustedCvss {\n");
    sb.append("    adjustments: ").append(toIndentedString(adjustments)).append("\n");
    sb.append("    cvssSource: ").append(toIndentedString(cvssSource)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    scoreSource: ").append(toIndentedString(scoreSource)).append("\n");
    sb.append("    scoringVector: ").append(toIndentedString(scoringVector)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustments");
    openapiFields.add("cvssSource");
    openapiFields.add("score");
    openapiFields.add("scoreSource");
    openapiFields.add("scoringVector");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("scoreSource");
    openapiRequiredFields.add("scoringVector");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InspectorScoreDetailsAdjustedCvss
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InspectorScoreDetailsAdjustedCvss.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InspectorScoreDetailsAdjustedCvss is not found in the empty JSON string", InspectorScoreDetailsAdjustedCvss.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InspectorScoreDetailsAdjustedCvss.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InspectorScoreDetailsAdjustedCvss` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InspectorScoreDetailsAdjustedCvss.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adjustments`
      if (jsonObj.get("adjustments") != null && !jsonObj.get("adjustments").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("adjustments"));
      }
      // validate the optional field `cvssSource`
      if (jsonObj.get("cvssSource") != null && !jsonObj.get("cvssSource").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cvssSource"));
      }
      // validate the required field `score`
      Double.validateJsonElement(jsonObj.get("score"));
      // validate the required field `scoreSource`
      String.validateJsonElement(jsonObj.get("scoreSource"));
      // validate the required field `scoringVector`
      String.validateJsonElement(jsonObj.get("scoringVector"));
      // validate the required field `version`
      String.validateJsonElement(jsonObj.get("version"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InspectorScoreDetailsAdjustedCvss.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InspectorScoreDetailsAdjustedCvss' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InspectorScoreDetailsAdjustedCvss> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InspectorScoreDetailsAdjustedCvss.class));

       return (TypeAdapter<T>) new TypeAdapter<InspectorScoreDetailsAdjustedCvss>() {
           @Override
           public void write(JsonWriter out, InspectorScoreDetailsAdjustedCvss value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InspectorScoreDetailsAdjustedCvss read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InspectorScoreDetailsAdjustedCvss given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InspectorScoreDetailsAdjustedCvss
   * @throws IOException if the JSON string is invalid with respect to InspectorScoreDetailsAdjustedCvss
   */
  public static InspectorScoreDetailsAdjustedCvss fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InspectorScoreDetailsAdjustedCvss.class);
  }

  /**
   * Convert an instance of InspectorScoreDetailsAdjustedCvss to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

