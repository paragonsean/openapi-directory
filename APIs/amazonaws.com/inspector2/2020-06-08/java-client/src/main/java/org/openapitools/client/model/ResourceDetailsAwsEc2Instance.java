/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceDetailsAwsEc2Instance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceDetailsAwsEc2Instance {
  public static final String SERIALIZED_NAME_IAM_INSTANCE_PROFILE_ARN = "iamInstanceProfileArn";
  @SerializedName(SERIALIZED_NAME_IAM_INSTANCE_PROFILE_ARN)
  private String iamInstanceProfileArn;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_IP_V4_ADDRESSES = "ipV4Addresses";
  @SerializedName(SERIALIZED_NAME_IP_V4_ADDRESSES)
  private List ipV4Addresses;

  public static final String SERIALIZED_NAME_IP_V6_ADDRESSES = "ipV6Addresses";
  @SerializedName(SERIALIZED_NAME_IP_V6_ADDRESSES)
  private List ipV6Addresses;

  public static final String SERIALIZED_NAME_KEY_NAME = "keyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_LAUNCHED_AT = "launchedAt";
  @SerializedName(SERIALIZED_NAME_LAUNCHED_AT)
  private OffsetDateTime launchedAt;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VPC_ID = "vpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public ResourceDetailsAwsEc2Instance() {
  }

  public ResourceDetailsAwsEc2Instance iamInstanceProfileArn(String iamInstanceProfileArn) {
    this.iamInstanceProfileArn = iamInstanceProfileArn;
    return this;
  }

  /**
   * Get iamInstanceProfileArn
   * @return iamInstanceProfileArn
   */
  @javax.annotation.Nullable
  public String getIamInstanceProfileArn() {
    return iamInstanceProfileArn;
  }

  public void setIamInstanceProfileArn(String iamInstanceProfileArn) {
    this.iamInstanceProfileArn = iamInstanceProfileArn;
  }


  public ResourceDetailsAwsEc2Instance imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Get imageId
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public ResourceDetailsAwsEc2Instance ipV4Addresses(List ipV4Addresses) {
    this.ipV4Addresses = ipV4Addresses;
    return this;
  }

  /**
   * Get ipV4Addresses
   * @return ipV4Addresses
   */
  @javax.annotation.Nullable
  public List getIpV4Addresses() {
    return ipV4Addresses;
  }

  public void setIpV4Addresses(List ipV4Addresses) {
    this.ipV4Addresses = ipV4Addresses;
  }


  public ResourceDetailsAwsEc2Instance ipV6Addresses(List ipV6Addresses) {
    this.ipV6Addresses = ipV6Addresses;
    return this;
  }

  /**
   * Get ipV6Addresses
   * @return ipV6Addresses
   */
  @javax.annotation.Nullable
  public List getIpV6Addresses() {
    return ipV6Addresses;
  }

  public void setIpV6Addresses(List ipV6Addresses) {
    this.ipV6Addresses = ipV6Addresses;
  }


  public ResourceDetailsAwsEc2Instance keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * Get keyName
   * @return keyName
   */
  @javax.annotation.Nullable
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public ResourceDetailsAwsEc2Instance launchedAt(OffsetDateTime launchedAt) {
    this.launchedAt = launchedAt;
    return this;
  }

  /**
   * Get launchedAt
   * @return launchedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLaunchedAt() {
    return launchedAt;
  }

  public void setLaunchedAt(OffsetDateTime launchedAt) {
    this.launchedAt = launchedAt;
  }


  public ResourceDetailsAwsEc2Instance platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public ResourceDetailsAwsEc2Instance subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Get subnetId
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public ResourceDetailsAwsEc2Instance type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ResourceDetailsAwsEc2Instance vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceDetailsAwsEc2Instance resourceDetailsAwsEc2Instance = (ResourceDetailsAwsEc2Instance) o;
    return Objects.equals(this.iamInstanceProfileArn, resourceDetailsAwsEc2Instance.iamInstanceProfileArn) &&
        Objects.equals(this.imageId, resourceDetailsAwsEc2Instance.imageId) &&
        Objects.equals(this.ipV4Addresses, resourceDetailsAwsEc2Instance.ipV4Addresses) &&
        Objects.equals(this.ipV6Addresses, resourceDetailsAwsEc2Instance.ipV6Addresses) &&
        Objects.equals(this.keyName, resourceDetailsAwsEc2Instance.keyName) &&
        Objects.equals(this.launchedAt, resourceDetailsAwsEc2Instance.launchedAt) &&
        Objects.equals(this.platform, resourceDetailsAwsEc2Instance.platform) &&
        Objects.equals(this.subnetId, resourceDetailsAwsEc2Instance.subnetId) &&
        Objects.equals(this.type, resourceDetailsAwsEc2Instance.type) &&
        Objects.equals(this.vpcId, resourceDetailsAwsEc2Instance.vpcId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iamInstanceProfileArn, imageId, ipV4Addresses, ipV6Addresses, keyName, launchedAt, platform, subnetId, type, vpcId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceDetailsAwsEc2Instance {\n");
    sb.append("    iamInstanceProfileArn: ").append(toIndentedString(iamInstanceProfileArn)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    ipV4Addresses: ").append(toIndentedString(ipV4Addresses)).append("\n");
    sb.append("    ipV6Addresses: ").append(toIndentedString(ipV6Addresses)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    launchedAt: ").append(toIndentedString(launchedAt)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iamInstanceProfileArn");
    openapiFields.add("imageId");
    openapiFields.add("ipV4Addresses");
    openapiFields.add("ipV6Addresses");
    openapiFields.add("keyName");
    openapiFields.add("launchedAt");
    openapiFields.add("platform");
    openapiFields.add("subnetId");
    openapiFields.add("type");
    openapiFields.add("vpcId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceDetailsAwsEc2Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceDetailsAwsEc2Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceDetailsAwsEc2Instance is not found in the empty JSON string", ResourceDetailsAwsEc2Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceDetailsAwsEc2Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceDetailsAwsEc2Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `iamInstanceProfileArn`
      if (jsonObj.get("iamInstanceProfileArn") != null && !jsonObj.get("iamInstanceProfileArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("iamInstanceProfileArn"));
      }
      // validate the optional field `imageId`
      if (jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageId"));
      }
      // validate the optional field `ipV4Addresses`
      if (jsonObj.get("ipV4Addresses") != null && !jsonObj.get("ipV4Addresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ipV4Addresses"));
      }
      // validate the optional field `ipV6Addresses`
      if (jsonObj.get("ipV6Addresses") != null && !jsonObj.get("ipV6Addresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ipV6Addresses"));
      }
      // validate the optional field `keyName`
      if (jsonObj.get("keyName") != null && !jsonObj.get("keyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("keyName"));
      }
      // validate the optional field `launchedAt`
      if (jsonObj.get("launchedAt") != null && !jsonObj.get("launchedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("launchedAt"));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platform"));
      }
      // validate the optional field `subnetId`
      if (jsonObj.get("subnetId") != null && !jsonObj.get("subnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("subnetId"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `vpcId`
      if (jsonObj.get("vpcId") != null && !jsonObj.get("vpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vpcId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceDetailsAwsEc2Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceDetailsAwsEc2Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceDetailsAwsEc2Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceDetailsAwsEc2Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceDetailsAwsEc2Instance>() {
           @Override
           public void write(JsonWriter out, ResourceDetailsAwsEc2Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceDetailsAwsEc2Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceDetailsAwsEc2Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceDetailsAwsEc2Instance
   * @throws IOException if the JSON string is invalid with respect to ResourceDetailsAwsEc2Instance
   */
  public static ResourceDetailsAwsEc2Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceDetailsAwsEc2Instance.class);
  }

  /**
   * Convert an instance of ResourceDetailsAwsEc2Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

