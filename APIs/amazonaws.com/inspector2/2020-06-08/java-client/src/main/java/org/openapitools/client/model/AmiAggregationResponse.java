/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AmiAggregationResponseSeverityCounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response that contains the results of a finding aggregation by AMI.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AmiAggregationResponse {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AFFECTED_INSTANCES = "affectedInstances";
  @SerializedName(SERIALIZED_NAME_AFFECTED_INSTANCES)
  private Integer affectedInstances;

  public static final String SERIALIZED_NAME_AMI = "ami";
  @SerializedName(SERIALIZED_NAME_AMI)
  private String ami;

  public static final String SERIALIZED_NAME_SEVERITY_COUNTS = "severityCounts";
  @SerializedName(SERIALIZED_NAME_SEVERITY_COUNTS)
  private AmiAggregationResponseSeverityCounts severityCounts;

  public AmiAggregationResponse() {
  }

  public AmiAggregationResponse accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public AmiAggregationResponse affectedInstances(Integer affectedInstances) {
    this.affectedInstances = affectedInstances;
    return this;
  }

  /**
   * Get affectedInstances
   * @return affectedInstances
   */
  @javax.annotation.Nullable
  public Integer getAffectedInstances() {
    return affectedInstances;
  }

  public void setAffectedInstances(Integer affectedInstances) {
    this.affectedInstances = affectedInstances;
  }


  public AmiAggregationResponse ami(String ami) {
    this.ami = ami;
    return this;
  }

  /**
   * Get ami
   * @return ami
   */
  @javax.annotation.Nonnull
  public String getAmi() {
    return ami;
  }

  public void setAmi(String ami) {
    this.ami = ami;
  }


  public AmiAggregationResponse severityCounts(AmiAggregationResponseSeverityCounts severityCounts) {
    this.severityCounts = severityCounts;
    return this;
  }

  /**
   * Get severityCounts
   * @return severityCounts
   */
  @javax.annotation.Nullable
  public AmiAggregationResponseSeverityCounts getSeverityCounts() {
    return severityCounts;
  }

  public void setSeverityCounts(AmiAggregationResponseSeverityCounts severityCounts) {
    this.severityCounts = severityCounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmiAggregationResponse amiAggregationResponse = (AmiAggregationResponse) o;
    return Objects.equals(this.accountId, amiAggregationResponse.accountId) &&
        Objects.equals(this.affectedInstances, amiAggregationResponse.affectedInstances) &&
        Objects.equals(this.ami, amiAggregationResponse.ami) &&
        Objects.equals(this.severityCounts, amiAggregationResponse.severityCounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, affectedInstances, ami, severityCounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmiAggregationResponse {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    affectedInstances: ").append(toIndentedString(affectedInstances)).append("\n");
    sb.append("    ami: ").append(toIndentedString(ami)).append("\n");
    sb.append("    severityCounts: ").append(toIndentedString(severityCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("affectedInstances");
    openapiFields.add("ami");
    openapiFields.add("severityCounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ami");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmiAggregationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmiAggregationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmiAggregationResponse is not found in the empty JSON string", AmiAggregationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AmiAggregationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AmiAggregationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AmiAggregationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountId`
      if (jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("accountId"));
      }
      // validate the optional field `affectedInstances`
      if (jsonObj.get("affectedInstances") != null && !jsonObj.get("affectedInstances").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("affectedInstances"));
      }
      // validate the required field `ami`
      String.validateJsonElement(jsonObj.get("ami"));
      // validate the optional field `severityCounts`
      if (jsonObj.get("severityCounts") != null && !jsonObj.get("severityCounts").isJsonNull()) {
        AmiAggregationResponseSeverityCounts.validateJsonElement(jsonObj.get("severityCounts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmiAggregationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmiAggregationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmiAggregationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmiAggregationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AmiAggregationResponse>() {
           @Override
           public void write(JsonWriter out, AmiAggregationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmiAggregationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmiAggregationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmiAggregationResponse
   * @throws IOException if the JSON string is invalid with respect to AmiAggregationResponse
   */
  public static AmiAggregationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmiAggregationResponse.class);
  }

  /**
   * Convert an instance of AmiAggregationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

