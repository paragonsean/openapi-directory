/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListFindingAggregationsRequestAggregationRequest;
import org.openapitools.client.model.StringFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListFindingAggregationsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListFindingAggregationsRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_IDS = "accountIds";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IDS)
  private List<StringFilter> accountIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_AGGREGATION_REQUEST = "aggregationRequest";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_REQUEST)
  private ListFindingAggregationsRequestAggregationRequest aggregationRequest;

  /**
   * The type of the aggregation request.
   */
  @JsonAdapter(AggregationTypeEnum.Adapter.class)
  public enum AggregationTypeEnum {
    FINDING_TYPE("FINDING_TYPE"),
    
    PACKAGE("PACKAGE"),
    
    TITLE("TITLE"),
    
    REPOSITORY("REPOSITORY"),
    
    AMI("AMI"),
    
    AWS_EC2_INSTANCE("AWS_EC2_INSTANCE"),
    
    AWS_ECR_CONTAINER("AWS_ECR_CONTAINER"),
    
    IMAGE_LAYER("IMAGE_LAYER"),
    
    ACCOUNT("ACCOUNT"),
    
    AWS_LAMBDA_FUNCTION("AWS_LAMBDA_FUNCTION"),
    
    LAMBDA_LAYER("LAMBDA_LAYER");

    private String value;

    AggregationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationTypeEnum fromValue(String value) {
      for (AggregationTypeEnum b : AggregationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION_TYPE = "aggregationType";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_TYPE)
  private AggregationTypeEnum aggregationType;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListFindingAggregationsRequest() {
  }

  public ListFindingAggregationsRequest accountIds(List<StringFilter> accountIds) {
    this.accountIds = accountIds;
    return this;
  }

  public ListFindingAggregationsRequest addAccountIdsItem(StringFilter accountIdsItem) {
    if (this.accountIds == null) {
      this.accountIds = new ArrayList<>();
    }
    this.accountIds.add(accountIdsItem);
    return this;
  }

  /**
   * The Amazon Web Services account IDs to retrieve finding aggregation data for.
   * @return accountIds
   */
  @javax.annotation.Nullable
  public List<StringFilter> getAccountIds() {
    return accountIds;
  }

  public void setAccountIds(List<StringFilter> accountIds) {
    this.accountIds = accountIds;
  }


  public ListFindingAggregationsRequest aggregationRequest(ListFindingAggregationsRequestAggregationRequest aggregationRequest) {
    this.aggregationRequest = aggregationRequest;
    return this;
  }

  /**
   * Get aggregationRequest
   * @return aggregationRequest
   */
  @javax.annotation.Nullable
  public ListFindingAggregationsRequestAggregationRequest getAggregationRequest() {
    return aggregationRequest;
  }

  public void setAggregationRequest(ListFindingAggregationsRequestAggregationRequest aggregationRequest) {
    this.aggregationRequest = aggregationRequest;
  }


  public ListFindingAggregationsRequest aggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

  /**
   * The type of the aggregation request.
   * @return aggregationType
   */
  @javax.annotation.Nonnull
  public AggregationTypeEnum getAggregationType() {
    return aggregationType;
  }

  public void setAggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
  }


  public ListFindingAggregationsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return in the response.
   * minimum: 1
   * maximum: 100
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListFindingAggregationsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the &lt;code&gt;NextToken&lt;/code&gt; value returned from the previous request to continue listing results after the first page.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListFindingAggregationsRequest listFindingAggregationsRequest = (ListFindingAggregationsRequest) o;
    return Objects.equals(this.accountIds, listFindingAggregationsRequest.accountIds) &&
        Objects.equals(this.aggregationRequest, listFindingAggregationsRequest.aggregationRequest) &&
        Objects.equals(this.aggregationType, listFindingAggregationsRequest.aggregationType) &&
        Objects.equals(this.maxResults, listFindingAggregationsRequest.maxResults) &&
        Objects.equals(this.nextToken, listFindingAggregationsRequest.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountIds, aggregationRequest, aggregationType, maxResults, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListFindingAggregationsRequest {\n");
    sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
    sb.append("    aggregationRequest: ").append(toIndentedString(aggregationRequest)).append("\n");
    sb.append("    aggregationType: ").append(toIndentedString(aggregationType)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountIds");
    openapiFields.add("aggregationRequest");
    openapiFields.add("aggregationType");
    openapiFields.add("maxResults");
    openapiFields.add("nextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aggregationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListFindingAggregationsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListFindingAggregationsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListFindingAggregationsRequest is not found in the empty JSON string", ListFindingAggregationsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListFindingAggregationsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListFindingAggregationsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListFindingAggregationsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accountIds") != null && !jsonObj.get("accountIds").isJsonNull()) {
        JsonArray jsonArrayaccountIds = jsonObj.getAsJsonArray("accountIds");
        if (jsonArrayaccountIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accountIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accountIds` to be an array in the JSON string but got `%s`", jsonObj.get("accountIds").toString()));
          }

          // validate the optional field `accountIds` (array)
          for (int i = 0; i < jsonArrayaccountIds.size(); i++) {
            StringFilter.validateJsonElement(jsonArrayaccountIds.get(i));
          };
        }
      }
      // validate the optional field `aggregationRequest`
      if (jsonObj.get("aggregationRequest") != null && !jsonObj.get("aggregationRequest").isJsonNull()) {
        ListFindingAggregationsRequestAggregationRequest.validateJsonElement(jsonObj.get("aggregationRequest"));
      }
      if (!jsonObj.get("aggregationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationType").toString()));
      }
      // validate the required field `aggregationType`
      AggregationTypeEnum.validateJsonElement(jsonObj.get("aggregationType"));
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListFindingAggregationsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListFindingAggregationsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListFindingAggregationsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListFindingAggregationsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListFindingAggregationsRequest>() {
           @Override
           public void write(JsonWriter out, ListFindingAggregationsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListFindingAggregationsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListFindingAggregationsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListFindingAggregationsRequest
   * @throws IOException if the JSON string is invalid with respect to ListFindingAggregationsRequest
   */
  public static ListFindingAggregationsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListFindingAggregationsRequest.class);
  }

  /**
   * Convert an instance of ListFindingAggregationsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

