/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CisaData;
import org.openapitools.client.model.ExploitObserved;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the vulnerability identified in a finding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindingDetail {
  public static final String SERIALIZED_NAME_CISA_DATA = "cisaData";
  @SerializedName(SERIALIZED_NAME_CISA_DATA)
  private CisaData cisaData;

  public static final String SERIALIZED_NAME_CWES = "cwes";
  @SerializedName(SERIALIZED_NAME_CWES)
  private List cwes;

  public static final String SERIALIZED_NAME_EPSS_SCORE = "epssScore";
  @SerializedName(SERIALIZED_NAME_EPSS_SCORE)
  private Double epssScore;

  public static final String SERIALIZED_NAME_EVIDENCES = "evidences";
  @SerializedName(SERIALIZED_NAME_EVIDENCES)
  private List evidences;

  public static final String SERIALIZED_NAME_EXPLOIT_OBSERVED = "exploitObserved";
  @SerializedName(SERIALIZED_NAME_EXPLOIT_OBSERVED)
  private ExploitObserved exploitObserved;

  public static final String SERIALIZED_NAME_FINDING_ARN = "findingArn";
  @SerializedName(SERIALIZED_NAME_FINDING_ARN)
  private String findingArn;

  public static final String SERIALIZED_NAME_REFERENCE_URLS = "referenceUrls";
  @SerializedName(SERIALIZED_NAME_REFERENCE_URLS)
  private List referenceUrls;

  public static final String SERIALIZED_NAME_RISK_SCORE = "riskScore";
  @SerializedName(SERIALIZED_NAME_RISK_SCORE)
  private Integer riskScore;

  public static final String SERIALIZED_NAME_TOOLS = "tools";
  @SerializedName(SERIALIZED_NAME_TOOLS)
  private List tools;

  public static final String SERIALIZED_NAME_TTPS = "ttps";
  @SerializedName(SERIALIZED_NAME_TTPS)
  private List ttps;

  public FindingDetail() {
  }

  public FindingDetail cisaData(CisaData cisaData) {
    this.cisaData = cisaData;
    return this;
  }

  /**
   * Get cisaData
   * @return cisaData
   */
  @javax.annotation.Nullable
  public CisaData getCisaData() {
    return cisaData;
  }

  public void setCisaData(CisaData cisaData) {
    this.cisaData = cisaData;
  }


  public FindingDetail cwes(List cwes) {
    this.cwes = cwes;
    return this;
  }

  /**
   * Get cwes
   * @return cwes
   */
  @javax.annotation.Nullable
  public List getCwes() {
    return cwes;
  }

  public void setCwes(List cwes) {
    this.cwes = cwes;
  }


  public FindingDetail epssScore(Double epssScore) {
    this.epssScore = epssScore;
    return this;
  }

  /**
   * Get epssScore
   * @return epssScore
   */
  @javax.annotation.Nullable
  public Double getEpssScore() {
    return epssScore;
  }

  public void setEpssScore(Double epssScore) {
    this.epssScore = epssScore;
  }


  public FindingDetail evidences(List evidences) {
    this.evidences = evidences;
    return this;
  }

  /**
   * Get evidences
   * @return evidences
   */
  @javax.annotation.Nullable
  public List getEvidences() {
    return evidences;
  }

  public void setEvidences(List evidences) {
    this.evidences = evidences;
  }


  public FindingDetail exploitObserved(ExploitObserved exploitObserved) {
    this.exploitObserved = exploitObserved;
    return this;
  }

  /**
   * Get exploitObserved
   * @return exploitObserved
   */
  @javax.annotation.Nullable
  public ExploitObserved getExploitObserved() {
    return exploitObserved;
  }

  public void setExploitObserved(ExploitObserved exploitObserved) {
    this.exploitObserved = exploitObserved;
  }


  public FindingDetail findingArn(String findingArn) {
    this.findingArn = findingArn;
    return this;
  }

  /**
   * Get findingArn
   * @return findingArn
   */
  @javax.annotation.Nullable
  public String getFindingArn() {
    return findingArn;
  }

  public void setFindingArn(String findingArn) {
    this.findingArn = findingArn;
  }


  public FindingDetail referenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
    return this;
  }

  /**
   * Get referenceUrls
   * @return referenceUrls
   */
  @javax.annotation.Nullable
  public List getReferenceUrls() {
    return referenceUrls;
  }

  public void setReferenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
  }


  public FindingDetail riskScore(Integer riskScore) {
    this.riskScore = riskScore;
    return this;
  }

  /**
   * Get riskScore
   * @return riskScore
   */
  @javax.annotation.Nullable
  public Integer getRiskScore() {
    return riskScore;
  }

  public void setRiskScore(Integer riskScore) {
    this.riskScore = riskScore;
  }


  public FindingDetail tools(List tools) {
    this.tools = tools;
    return this;
  }

  /**
   * Get tools
   * @return tools
   */
  @javax.annotation.Nullable
  public List getTools() {
    return tools;
  }

  public void setTools(List tools) {
    this.tools = tools;
  }


  public FindingDetail ttps(List ttps) {
    this.ttps = ttps;
    return this;
  }

  /**
   * Get ttps
   * @return ttps
   */
  @javax.annotation.Nullable
  public List getTtps() {
    return ttps;
  }

  public void setTtps(List ttps) {
    this.ttps = ttps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindingDetail findingDetail = (FindingDetail) o;
    return Objects.equals(this.cisaData, findingDetail.cisaData) &&
        Objects.equals(this.cwes, findingDetail.cwes) &&
        Objects.equals(this.epssScore, findingDetail.epssScore) &&
        Objects.equals(this.evidences, findingDetail.evidences) &&
        Objects.equals(this.exploitObserved, findingDetail.exploitObserved) &&
        Objects.equals(this.findingArn, findingDetail.findingArn) &&
        Objects.equals(this.referenceUrls, findingDetail.referenceUrls) &&
        Objects.equals(this.riskScore, findingDetail.riskScore) &&
        Objects.equals(this.tools, findingDetail.tools) &&
        Objects.equals(this.ttps, findingDetail.ttps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cisaData, cwes, epssScore, evidences, exploitObserved, findingArn, referenceUrls, riskScore, tools, ttps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindingDetail {\n");
    sb.append("    cisaData: ").append(toIndentedString(cisaData)).append("\n");
    sb.append("    cwes: ").append(toIndentedString(cwes)).append("\n");
    sb.append("    epssScore: ").append(toIndentedString(epssScore)).append("\n");
    sb.append("    evidences: ").append(toIndentedString(evidences)).append("\n");
    sb.append("    exploitObserved: ").append(toIndentedString(exploitObserved)).append("\n");
    sb.append("    findingArn: ").append(toIndentedString(findingArn)).append("\n");
    sb.append("    referenceUrls: ").append(toIndentedString(referenceUrls)).append("\n");
    sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    ttps: ").append(toIndentedString(ttps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cisaData");
    openapiFields.add("cwes");
    openapiFields.add("epssScore");
    openapiFields.add("evidences");
    openapiFields.add("exploitObserved");
    openapiFields.add("findingArn");
    openapiFields.add("referenceUrls");
    openapiFields.add("riskScore");
    openapiFields.add("tools");
    openapiFields.add("ttps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindingDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindingDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindingDetail is not found in the empty JSON string", FindingDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindingDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindingDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cisaData`
      if (jsonObj.get("cisaData") != null && !jsonObj.get("cisaData").isJsonNull()) {
        CisaData.validateJsonElement(jsonObj.get("cisaData"));
      }
      // validate the optional field `cwes`
      if (jsonObj.get("cwes") != null && !jsonObj.get("cwes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("cwes"));
      }
      // validate the optional field `epssScore`
      if (jsonObj.get("epssScore") != null && !jsonObj.get("epssScore").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("epssScore"));
      }
      // validate the optional field `evidences`
      if (jsonObj.get("evidences") != null && !jsonObj.get("evidences").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("evidences"));
      }
      // validate the optional field `exploitObserved`
      if (jsonObj.get("exploitObserved") != null && !jsonObj.get("exploitObserved").isJsonNull()) {
        ExploitObserved.validateJsonElement(jsonObj.get("exploitObserved"));
      }
      // validate the optional field `findingArn`
      if (jsonObj.get("findingArn") != null && !jsonObj.get("findingArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("findingArn"));
      }
      // validate the optional field `referenceUrls`
      if (jsonObj.get("referenceUrls") != null && !jsonObj.get("referenceUrls").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("referenceUrls"));
      }
      // validate the optional field `riskScore`
      if (jsonObj.get("riskScore") != null && !jsonObj.get("riskScore").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("riskScore"));
      }
      // validate the optional field `tools`
      if (jsonObj.get("tools") != null && !jsonObj.get("tools").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tools"));
      }
      // validate the optional field `ttps`
      if (jsonObj.get("ttps") != null && !jsonObj.get("ttps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ttps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindingDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindingDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindingDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindingDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<FindingDetail>() {
           @Override
           public void write(JsonWriter out, FindingDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindingDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindingDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindingDetail
   * @throws IOException if the JSON string is invalid with respect to FindingDetail
   */
  public static FindingDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindingDetail.class);
  }

  /**
   * Convert an instance of FindingDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

