/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResourceStateEc2;
import org.openapitools.client.model.ResourceStateEcr;
import org.openapitools.client.model.State;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details the state of Amazon Inspector for each resource type Amazon Inspector scans.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceState {
  public static final String SERIALIZED_NAME_EC2 = "ec2";
  @SerializedName(SERIALIZED_NAME_EC2)
  private ResourceStateEc2 ec2;

  public static final String SERIALIZED_NAME_ECR = "ecr";
  @SerializedName(SERIALIZED_NAME_ECR)
  private ResourceStateEcr ecr;

  public static final String SERIALIZED_NAME_LAMBDA = "lambda";
  @SerializedName(SERIALIZED_NAME_LAMBDA)
  private State lambda;

  public static final String SERIALIZED_NAME_LAMBDA_CODE = "lambdaCode";
  @SerializedName(SERIALIZED_NAME_LAMBDA_CODE)
  private State lambdaCode;

  public ResourceState() {
  }

  public ResourceState ec2(ResourceStateEc2 ec2) {
    this.ec2 = ec2;
    return this;
  }

  /**
   * Get ec2
   * @return ec2
   */
  @javax.annotation.Nonnull
  public ResourceStateEc2 getEc2() {
    return ec2;
  }

  public void setEc2(ResourceStateEc2 ec2) {
    this.ec2 = ec2;
  }


  public ResourceState ecr(ResourceStateEcr ecr) {
    this.ecr = ecr;
    return this;
  }

  /**
   * Get ecr
   * @return ecr
   */
  @javax.annotation.Nonnull
  public ResourceStateEcr getEcr() {
    return ecr;
  }

  public void setEcr(ResourceStateEcr ecr) {
    this.ecr = ecr;
  }


  public ResourceState lambda(State lambda) {
    this.lambda = lambda;
    return this;
  }

  /**
   * Get lambda
   * @return lambda
   */
  @javax.annotation.Nullable
  public State getLambda() {
    return lambda;
  }

  public void setLambda(State lambda) {
    this.lambda = lambda;
  }


  public ResourceState lambdaCode(State lambdaCode) {
    this.lambdaCode = lambdaCode;
    return this;
  }

  /**
   * Get lambdaCode
   * @return lambdaCode
   */
  @javax.annotation.Nullable
  public State getLambdaCode() {
    return lambdaCode;
  }

  public void setLambdaCode(State lambdaCode) {
    this.lambdaCode = lambdaCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceState resourceState = (ResourceState) o;
    return Objects.equals(this.ec2, resourceState.ec2) &&
        Objects.equals(this.ecr, resourceState.ecr) &&
        Objects.equals(this.lambda, resourceState.lambda) &&
        Objects.equals(this.lambdaCode, resourceState.lambdaCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ec2, ecr, lambda, lambdaCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceState {\n");
    sb.append("    ec2: ").append(toIndentedString(ec2)).append("\n");
    sb.append("    ecr: ").append(toIndentedString(ecr)).append("\n");
    sb.append("    lambda: ").append(toIndentedString(lambda)).append("\n");
    sb.append("    lambdaCode: ").append(toIndentedString(lambdaCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ec2");
    openapiFields.add("ecr");
    openapiFields.add("lambda");
    openapiFields.add("lambdaCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ec2");
    openapiRequiredFields.add("ecr");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceState is not found in the empty JSON string", ResourceState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResourceState.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ec2`
      ResourceStateEc2.validateJsonElement(jsonObj.get("ec2"));
      // validate the required field `ecr`
      ResourceStateEcr.validateJsonElement(jsonObj.get("ecr"));
      // validate the optional field `lambda`
      if (jsonObj.get("lambda") != null && !jsonObj.get("lambda").isJsonNull()) {
        State.validateJsonElement(jsonObj.get("lambda"));
      }
      // validate the optional field `lambdaCode`
      if (jsonObj.get("lambdaCode") != null && !jsonObj.get("lambdaCode").isJsonNull()) {
        State.validateJsonElement(jsonObj.get("lambdaCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceState.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceState>() {
           @Override
           public void write(JsonWriter out, ResourceState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceState
   * @throws IOException if the JSON string is invalid with respect to ResourceState
   */
  public static ResourceState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceState.class);
  }

  /**
   * Convert an instance of ResourceState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

