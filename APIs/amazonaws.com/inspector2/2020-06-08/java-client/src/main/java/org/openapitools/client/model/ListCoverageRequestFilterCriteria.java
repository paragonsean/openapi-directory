/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListCoverageRequestFilterCriteria
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListCoverageRequestFilterCriteria {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private List accountId;

  public static final String SERIALIZED_NAME_EC2_INSTANCE_TAGS = "ec2InstanceTags";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_TAGS)
  private List ec2InstanceTags;

  public static final String SERIALIZED_NAME_ECR_IMAGE_TAGS = "ecrImageTags";
  @SerializedName(SERIALIZED_NAME_ECR_IMAGE_TAGS)
  private List ecrImageTags;

  public static final String SERIALIZED_NAME_ECR_REPOSITORY_NAME = "ecrRepositoryName";
  @SerializedName(SERIALIZED_NAME_ECR_REPOSITORY_NAME)
  private List ecrRepositoryName;

  public static final String SERIALIZED_NAME_LAMBDA_FUNCTION_NAME = "lambdaFunctionName";
  @SerializedName(SERIALIZED_NAME_LAMBDA_FUNCTION_NAME)
  private List lambdaFunctionName;

  public static final String SERIALIZED_NAME_LAMBDA_FUNCTION_RUNTIME = "lambdaFunctionRuntime";
  @SerializedName(SERIALIZED_NAME_LAMBDA_FUNCTION_RUNTIME)
  private List lambdaFunctionRuntime;

  public static final String SERIALIZED_NAME_LAMBDA_FUNCTION_TAGS = "lambdaFunctionTags";
  @SerializedName(SERIALIZED_NAME_LAMBDA_FUNCTION_TAGS)
  private List lambdaFunctionTags;

  public static final String SERIALIZED_NAME_LAST_SCANNED_AT = "lastScannedAt";
  @SerializedName(SERIALIZED_NAME_LAST_SCANNED_AT)
  private List lastScannedAt;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private List resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private List resourceType;

  public static final String SERIALIZED_NAME_SCAN_STATUS_CODE = "scanStatusCode";
  @SerializedName(SERIALIZED_NAME_SCAN_STATUS_CODE)
  private List scanStatusCode;

  public static final String SERIALIZED_NAME_SCAN_STATUS_REASON = "scanStatusReason";
  @SerializedName(SERIALIZED_NAME_SCAN_STATUS_REASON)
  private List scanStatusReason;

  public static final String SERIALIZED_NAME_SCAN_TYPE = "scanType";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE)
  private List scanType;

  public ListCoverageRequestFilterCriteria() {
  }

  public ListCoverageRequestFilterCriteria accountId(List accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public List getAccountId() {
    return accountId;
  }

  public void setAccountId(List accountId) {
    this.accountId = accountId;
  }


  public ListCoverageRequestFilterCriteria ec2InstanceTags(List ec2InstanceTags) {
    this.ec2InstanceTags = ec2InstanceTags;
    return this;
  }

  /**
   * Get ec2InstanceTags
   * @return ec2InstanceTags
   */
  @javax.annotation.Nullable
  public List getEc2InstanceTags() {
    return ec2InstanceTags;
  }

  public void setEc2InstanceTags(List ec2InstanceTags) {
    this.ec2InstanceTags = ec2InstanceTags;
  }


  public ListCoverageRequestFilterCriteria ecrImageTags(List ecrImageTags) {
    this.ecrImageTags = ecrImageTags;
    return this;
  }

  /**
   * Get ecrImageTags
   * @return ecrImageTags
   */
  @javax.annotation.Nullable
  public List getEcrImageTags() {
    return ecrImageTags;
  }

  public void setEcrImageTags(List ecrImageTags) {
    this.ecrImageTags = ecrImageTags;
  }


  public ListCoverageRequestFilterCriteria ecrRepositoryName(List ecrRepositoryName) {
    this.ecrRepositoryName = ecrRepositoryName;
    return this;
  }

  /**
   * Get ecrRepositoryName
   * @return ecrRepositoryName
   */
  @javax.annotation.Nullable
  public List getEcrRepositoryName() {
    return ecrRepositoryName;
  }

  public void setEcrRepositoryName(List ecrRepositoryName) {
    this.ecrRepositoryName = ecrRepositoryName;
  }


  public ListCoverageRequestFilterCriteria lambdaFunctionName(List lambdaFunctionName) {
    this.lambdaFunctionName = lambdaFunctionName;
    return this;
  }

  /**
   * Get lambdaFunctionName
   * @return lambdaFunctionName
   */
  @javax.annotation.Nullable
  public List getLambdaFunctionName() {
    return lambdaFunctionName;
  }

  public void setLambdaFunctionName(List lambdaFunctionName) {
    this.lambdaFunctionName = lambdaFunctionName;
  }


  public ListCoverageRequestFilterCriteria lambdaFunctionRuntime(List lambdaFunctionRuntime) {
    this.lambdaFunctionRuntime = lambdaFunctionRuntime;
    return this;
  }

  /**
   * Get lambdaFunctionRuntime
   * @return lambdaFunctionRuntime
   */
  @javax.annotation.Nullable
  public List getLambdaFunctionRuntime() {
    return lambdaFunctionRuntime;
  }

  public void setLambdaFunctionRuntime(List lambdaFunctionRuntime) {
    this.lambdaFunctionRuntime = lambdaFunctionRuntime;
  }


  public ListCoverageRequestFilterCriteria lambdaFunctionTags(List lambdaFunctionTags) {
    this.lambdaFunctionTags = lambdaFunctionTags;
    return this;
  }

  /**
   * Get lambdaFunctionTags
   * @return lambdaFunctionTags
   */
  @javax.annotation.Nullable
  public List getLambdaFunctionTags() {
    return lambdaFunctionTags;
  }

  public void setLambdaFunctionTags(List lambdaFunctionTags) {
    this.lambdaFunctionTags = lambdaFunctionTags;
  }


  public ListCoverageRequestFilterCriteria lastScannedAt(List lastScannedAt) {
    this.lastScannedAt = lastScannedAt;
    return this;
  }

  /**
   * Get lastScannedAt
   * @return lastScannedAt
   */
  @javax.annotation.Nullable
  public List getLastScannedAt() {
    return lastScannedAt;
  }

  public void setLastScannedAt(List lastScannedAt) {
    this.lastScannedAt = lastScannedAt;
  }


  public ListCoverageRequestFilterCriteria resourceId(List resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public List getResourceId() {
    return resourceId;
  }

  public void setResourceId(List resourceId) {
    this.resourceId = resourceId;
  }


  public ListCoverageRequestFilterCriteria resourceType(List resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public List getResourceType() {
    return resourceType;
  }

  public void setResourceType(List resourceType) {
    this.resourceType = resourceType;
  }


  public ListCoverageRequestFilterCriteria scanStatusCode(List scanStatusCode) {
    this.scanStatusCode = scanStatusCode;
    return this;
  }

  /**
   * Get scanStatusCode
   * @return scanStatusCode
   */
  @javax.annotation.Nullable
  public List getScanStatusCode() {
    return scanStatusCode;
  }

  public void setScanStatusCode(List scanStatusCode) {
    this.scanStatusCode = scanStatusCode;
  }


  public ListCoverageRequestFilterCriteria scanStatusReason(List scanStatusReason) {
    this.scanStatusReason = scanStatusReason;
    return this;
  }

  /**
   * Get scanStatusReason
   * @return scanStatusReason
   */
  @javax.annotation.Nullable
  public List getScanStatusReason() {
    return scanStatusReason;
  }

  public void setScanStatusReason(List scanStatusReason) {
    this.scanStatusReason = scanStatusReason;
  }


  public ListCoverageRequestFilterCriteria scanType(List scanType) {
    this.scanType = scanType;
    return this;
  }

  /**
   * Get scanType
   * @return scanType
   */
  @javax.annotation.Nullable
  public List getScanType() {
    return scanType;
  }

  public void setScanType(List scanType) {
    this.scanType = scanType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListCoverageRequestFilterCriteria listCoverageRequestFilterCriteria = (ListCoverageRequestFilterCriteria) o;
    return Objects.equals(this.accountId, listCoverageRequestFilterCriteria.accountId) &&
        Objects.equals(this.ec2InstanceTags, listCoverageRequestFilterCriteria.ec2InstanceTags) &&
        Objects.equals(this.ecrImageTags, listCoverageRequestFilterCriteria.ecrImageTags) &&
        Objects.equals(this.ecrRepositoryName, listCoverageRequestFilterCriteria.ecrRepositoryName) &&
        Objects.equals(this.lambdaFunctionName, listCoverageRequestFilterCriteria.lambdaFunctionName) &&
        Objects.equals(this.lambdaFunctionRuntime, listCoverageRequestFilterCriteria.lambdaFunctionRuntime) &&
        Objects.equals(this.lambdaFunctionTags, listCoverageRequestFilterCriteria.lambdaFunctionTags) &&
        Objects.equals(this.lastScannedAt, listCoverageRequestFilterCriteria.lastScannedAt) &&
        Objects.equals(this.resourceId, listCoverageRequestFilterCriteria.resourceId) &&
        Objects.equals(this.resourceType, listCoverageRequestFilterCriteria.resourceType) &&
        Objects.equals(this.scanStatusCode, listCoverageRequestFilterCriteria.scanStatusCode) &&
        Objects.equals(this.scanStatusReason, listCoverageRequestFilterCriteria.scanStatusReason) &&
        Objects.equals(this.scanType, listCoverageRequestFilterCriteria.scanType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, ec2InstanceTags, ecrImageTags, ecrRepositoryName, lambdaFunctionName, lambdaFunctionRuntime, lambdaFunctionTags, lastScannedAt, resourceId, resourceType, scanStatusCode, scanStatusReason, scanType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListCoverageRequestFilterCriteria {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    ec2InstanceTags: ").append(toIndentedString(ec2InstanceTags)).append("\n");
    sb.append("    ecrImageTags: ").append(toIndentedString(ecrImageTags)).append("\n");
    sb.append("    ecrRepositoryName: ").append(toIndentedString(ecrRepositoryName)).append("\n");
    sb.append("    lambdaFunctionName: ").append(toIndentedString(lambdaFunctionName)).append("\n");
    sb.append("    lambdaFunctionRuntime: ").append(toIndentedString(lambdaFunctionRuntime)).append("\n");
    sb.append("    lambdaFunctionTags: ").append(toIndentedString(lambdaFunctionTags)).append("\n");
    sb.append("    lastScannedAt: ").append(toIndentedString(lastScannedAt)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    scanStatusCode: ").append(toIndentedString(scanStatusCode)).append("\n");
    sb.append("    scanStatusReason: ").append(toIndentedString(scanStatusReason)).append("\n");
    sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("ec2InstanceTags");
    openapiFields.add("ecrImageTags");
    openapiFields.add("ecrRepositoryName");
    openapiFields.add("lambdaFunctionName");
    openapiFields.add("lambdaFunctionRuntime");
    openapiFields.add("lambdaFunctionTags");
    openapiFields.add("lastScannedAt");
    openapiFields.add("resourceId");
    openapiFields.add("resourceType");
    openapiFields.add("scanStatusCode");
    openapiFields.add("scanStatusReason");
    openapiFields.add("scanType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListCoverageRequestFilterCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListCoverageRequestFilterCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListCoverageRequestFilterCriteria is not found in the empty JSON string", ListCoverageRequestFilterCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListCoverageRequestFilterCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListCoverageRequestFilterCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountId`
      if (jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("accountId"));
      }
      // validate the optional field `ec2InstanceTags`
      if (jsonObj.get("ec2InstanceTags") != null && !jsonObj.get("ec2InstanceTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ec2InstanceTags"));
      }
      // validate the optional field `ecrImageTags`
      if (jsonObj.get("ecrImageTags") != null && !jsonObj.get("ecrImageTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ecrImageTags"));
      }
      // validate the optional field `ecrRepositoryName`
      if (jsonObj.get("ecrRepositoryName") != null && !jsonObj.get("ecrRepositoryName").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ecrRepositoryName"));
      }
      // validate the optional field `lambdaFunctionName`
      if (jsonObj.get("lambdaFunctionName") != null && !jsonObj.get("lambdaFunctionName").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("lambdaFunctionName"));
      }
      // validate the optional field `lambdaFunctionRuntime`
      if (jsonObj.get("lambdaFunctionRuntime") != null && !jsonObj.get("lambdaFunctionRuntime").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("lambdaFunctionRuntime"));
      }
      // validate the optional field `lambdaFunctionTags`
      if (jsonObj.get("lambdaFunctionTags") != null && !jsonObj.get("lambdaFunctionTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("lambdaFunctionTags"));
      }
      // validate the optional field `lastScannedAt`
      if (jsonObj.get("lastScannedAt") != null && !jsonObj.get("lastScannedAt").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("lastScannedAt"));
      }
      // validate the optional field `resourceId`
      if (jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("resourceId"));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("resourceType"));
      }
      // validate the optional field `scanStatusCode`
      if (jsonObj.get("scanStatusCode") != null && !jsonObj.get("scanStatusCode").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("scanStatusCode"));
      }
      // validate the optional field `scanStatusReason`
      if (jsonObj.get("scanStatusReason") != null && !jsonObj.get("scanStatusReason").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("scanStatusReason"));
      }
      // validate the optional field `scanType`
      if (jsonObj.get("scanType") != null && !jsonObj.get("scanType").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("scanType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListCoverageRequestFilterCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListCoverageRequestFilterCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListCoverageRequestFilterCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListCoverageRequestFilterCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<ListCoverageRequestFilterCriteria>() {
           @Override
           public void write(JsonWriter out, ListCoverageRequestFilterCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListCoverageRequestFilterCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListCoverageRequestFilterCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListCoverageRequestFilterCriteria
   * @throws IOException if the JSON string is invalid with respect to ListCoverageRequestFilterCriteria
   */
  public static ListCoverageRequestFilterCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListCoverageRequestFilterCriteria.class);
  }

  /**
   * Convert an instance of ListCoverageRequestFilterCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

