/*
 * Inspector2
 * Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.
 *
 * The version of the OpenAPI document: 2020-06-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.SeverityCounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response that contains the results of an AWS Lambda function finding aggregation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:02.844521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LambdaFunctionAggregationResponse {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_FUNCTION_NAME = "functionName";
  @SerializedName(SERIALIZED_NAME_FUNCTION_NAME)
  private String functionName;

  public static final String SERIALIZED_NAME_LAMBDA_TAGS = "lambdaTags";
  @SerializedName(SERIALIZED_NAME_LAMBDA_TAGS)
  private Map lambdaTags;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_AT = "lastModifiedAt";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_AT)
  private OffsetDateTime lastModifiedAt;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RUNTIME = "runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private String runtime;

  public static final String SERIALIZED_NAME_SEVERITY_COUNTS = "severityCounts";
  @SerializedName(SERIALIZED_NAME_SEVERITY_COUNTS)
  private SeverityCounts severityCounts;

  public LambdaFunctionAggregationResponse() {
  }

  public LambdaFunctionAggregationResponse accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public LambdaFunctionAggregationResponse functionName(String functionName) {
    this.functionName = functionName;
    return this;
  }

  /**
   * Get functionName
   * @return functionName
   */
  @javax.annotation.Nullable
  public String getFunctionName() {
    return functionName;
  }

  public void setFunctionName(String functionName) {
    this.functionName = functionName;
  }


  public LambdaFunctionAggregationResponse lambdaTags(Map lambdaTags) {
    this.lambdaTags = lambdaTags;
    return this;
  }

  /**
   * Get lambdaTags
   * @return lambdaTags
   */
  @javax.annotation.Nullable
  public Map getLambdaTags() {
    return lambdaTags;
  }

  public void setLambdaTags(Map lambdaTags) {
    this.lambdaTags = lambdaTags;
  }


  public LambdaFunctionAggregationResponse lastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

  /**
   * Get lastModifiedAt
   * @return lastModifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedAt() {
    return lastModifiedAt;
  }

  public void setLastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
  }


  public LambdaFunctionAggregationResponse resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nonnull
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public LambdaFunctionAggregationResponse runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nullable
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }


  public LambdaFunctionAggregationResponse severityCounts(SeverityCounts severityCounts) {
    this.severityCounts = severityCounts;
    return this;
  }

  /**
   * Get severityCounts
   * @return severityCounts
   */
  @javax.annotation.Nullable
  public SeverityCounts getSeverityCounts() {
    return severityCounts;
  }

  public void setSeverityCounts(SeverityCounts severityCounts) {
    this.severityCounts = severityCounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LambdaFunctionAggregationResponse lambdaFunctionAggregationResponse = (LambdaFunctionAggregationResponse) o;
    return Objects.equals(this.accountId, lambdaFunctionAggregationResponse.accountId) &&
        Objects.equals(this.functionName, lambdaFunctionAggregationResponse.functionName) &&
        Objects.equals(this.lambdaTags, lambdaFunctionAggregationResponse.lambdaTags) &&
        Objects.equals(this.lastModifiedAt, lambdaFunctionAggregationResponse.lastModifiedAt) &&
        Objects.equals(this.resourceId, lambdaFunctionAggregationResponse.resourceId) &&
        Objects.equals(this.runtime, lambdaFunctionAggregationResponse.runtime) &&
        Objects.equals(this.severityCounts, lambdaFunctionAggregationResponse.severityCounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, functionName, lambdaTags, lastModifiedAt, resourceId, runtime, severityCounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LambdaFunctionAggregationResponse {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    lambdaTags: ").append(toIndentedString(lambdaTags)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    severityCounts: ").append(toIndentedString(severityCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("functionName");
    openapiFields.add("lambdaTags");
    openapiFields.add("lastModifiedAt");
    openapiFields.add("resourceId");
    openapiFields.add("runtime");
    openapiFields.add("severityCounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LambdaFunctionAggregationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LambdaFunctionAggregationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LambdaFunctionAggregationResponse is not found in the empty JSON string", LambdaFunctionAggregationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LambdaFunctionAggregationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LambdaFunctionAggregationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LambdaFunctionAggregationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountId`
      if (jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("accountId"));
      }
      // validate the optional field `functionName`
      if (jsonObj.get("functionName") != null && !jsonObj.get("functionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("functionName"));
      }
      // validate the optional field `lambdaTags`
      if (jsonObj.get("lambdaTags") != null && !jsonObj.get("lambdaTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("lambdaTags"));
      }
      // validate the optional field `lastModifiedAt`
      if (jsonObj.get("lastModifiedAt") != null && !jsonObj.get("lastModifiedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastModifiedAt"));
      }
      // validate the required field `resourceId`
      String.validateJsonElement(jsonObj.get("resourceId"));
      // validate the optional field `runtime`
      if (jsonObj.get("runtime") != null && !jsonObj.get("runtime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("runtime"));
      }
      // validate the optional field `severityCounts`
      if (jsonObj.get("severityCounts") != null && !jsonObj.get("severityCounts").isJsonNull()) {
        SeverityCounts.validateJsonElement(jsonObj.get("severityCounts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LambdaFunctionAggregationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LambdaFunctionAggregationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LambdaFunctionAggregationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LambdaFunctionAggregationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LambdaFunctionAggregationResponse>() {
           @Override
           public void write(JsonWriter out, LambdaFunctionAggregationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LambdaFunctionAggregationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LambdaFunctionAggregationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LambdaFunctionAggregationResponse
   * @throws IOException if the JSON string is invalid with respect to LambdaFunctionAggregationResponse
   */
  public static LambdaFunctionAggregationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LambdaFunctionAggregationResponse.class);
  }

  /**
   * Convert an instance of LambdaFunctionAggregationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

