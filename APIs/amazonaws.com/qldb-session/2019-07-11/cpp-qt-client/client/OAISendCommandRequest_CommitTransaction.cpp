/**
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendCommandRequest_CommitTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendCommandRequest_CommitTransaction::OAISendCommandRequest_CommitTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendCommandRequest_CommitTransaction::OAISendCommandRequest_CommitTransaction() {
    this->initializeModel();
}

OAISendCommandRequest_CommitTransaction::~OAISendCommandRequest_CommitTransaction() {}

void OAISendCommandRequest_CommitTransaction::initializeModel() {

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_commit_digest_isSet = false;
    m_commit_digest_isValid = false;
}

void OAISendCommandRequest_CommitTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendCommandRequest_CommitTransaction::fromJsonObject(QJsonObject json) {

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("TransactionId")]);
    m_transaction_id_isSet = !json[QString("TransactionId")].isNull() && m_transaction_id_isValid;

    m_commit_digest_isValid = ::OpenAPI::fromJsonValue(m_commit_digest, json[QString("CommitDigest")]);
    m_commit_digest_isSet = !json[QString("CommitDigest")].isNull() && m_commit_digest_isValid;
}

QString OAISendCommandRequest_CommitTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendCommandRequest_CommitTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_transaction_id_isSet) {
        obj.insert(QString("TransactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_commit_digest_isSet) {
        obj.insert(QString("CommitDigest"), ::OpenAPI::toJsonValue(m_commit_digest));
    }
    return obj;
}

QString OAISendCommandRequest_CommitTransaction::getTransactionId() const {
    return m_transaction_id;
}
void OAISendCommandRequest_CommitTransaction::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAISendCommandRequest_CommitTransaction::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAISendCommandRequest_CommitTransaction::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAISendCommandRequest_CommitTransaction::getCommitDigest() const {
    return m_commit_digest;
}
void OAISendCommandRequest_CommitTransaction::setCommitDigest(const QString &commit_digest) {
    m_commit_digest = commit_digest;
    m_commit_digest_isSet = true;
}

bool OAISendCommandRequest_CommitTransaction::is_commit_digest_Set() const{
    return m_commit_digest_isSet;
}

bool OAISendCommandRequest_CommitTransaction::is_commit_digest_Valid() const{
    return m_commit_digest_isValid;
}

bool OAISendCommandRequest_CommitTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_digest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendCommandRequest_CommitTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transaction_id_isValid && m_commit_digest_isValid && true;
}

} // namespace OpenAPI
