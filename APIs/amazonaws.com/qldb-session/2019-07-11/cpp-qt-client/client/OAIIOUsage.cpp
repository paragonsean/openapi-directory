/**
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIOUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIOUsage::OAIIOUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIOUsage::OAIIOUsage() {
    this->initializeModel();
}

OAIIOUsage::~OAIIOUsage() {}

void OAIIOUsage::initializeModel() {

    m_read_ios_isSet = false;
    m_read_ios_isValid = false;

    m_write_ios_isSet = false;
    m_write_ios_isValid = false;
}

void OAIIOUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIOUsage::fromJsonObject(QJsonObject json) {

    m_read_ios_isValid = ::OpenAPI::fromJsonValue(m_read_ios, json[QString("ReadIOs")]);
    m_read_ios_isSet = !json[QString("ReadIOs")].isNull() && m_read_ios_isValid;

    m_write_ios_isValid = ::OpenAPI::fromJsonValue(m_write_ios, json[QString("WriteIOs")]);
    m_write_ios_isSet = !json[QString("WriteIOs")].isNull() && m_write_ios_isValid;
}

QString OAIIOUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIOUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_read_ios_isSet) {
        obj.insert(QString("ReadIOs"), ::OpenAPI::toJsonValue(m_read_ios));
    }
    if (m_write_ios_isSet) {
        obj.insert(QString("WriteIOs"), ::OpenAPI::toJsonValue(m_write_ios));
    }
    return obj;
}

qint32 OAIIOUsage::getReadIos() const {
    return m_read_ios;
}
void OAIIOUsage::setReadIos(const qint32 &read_ios) {
    m_read_ios = read_ios;
    m_read_ios_isSet = true;
}

bool OAIIOUsage::is_read_ios_Set() const{
    return m_read_ios_isSet;
}

bool OAIIOUsage::is_read_ios_Valid() const{
    return m_read_ios_isValid;
}

qint32 OAIIOUsage::getWriteIos() const {
    return m_write_ios;
}
void OAIIOUsage::setWriteIos(const qint32 &write_ios) {
    m_write_ios = write_ios;
    m_write_ios_isSet = true;
}

bool OAIIOUsage::is_write_ios_Set() const{
    return m_write_ios_isSet;
}

bool OAIIOUsage::is_write_ios_Valid() const{
    return m_write_ios_isValid;
}

bool OAIIOUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_read_ios_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_ios_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIOUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
