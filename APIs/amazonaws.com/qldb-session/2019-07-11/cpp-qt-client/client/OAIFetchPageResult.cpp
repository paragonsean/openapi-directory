/**
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFetchPageResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFetchPageResult::OAIFetchPageResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFetchPageResult::OAIFetchPageResult() {
    this->initializeModel();
}

OAIFetchPageResult::~OAIFetchPageResult() {}

void OAIFetchPageResult::initializeModel() {

    m_page_isSet = false;
    m_page_isValid = false;

    m_timing_information_isSet = false;
    m_timing_information_isValid = false;

    m_consumed_ios_isSet = false;
    m_consumed_ios_isValid = false;
}

void OAIFetchPageResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFetchPageResult::fromJsonObject(QJsonObject json) {

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("Page")]);
    m_page_isSet = !json[QString("Page")].isNull() && m_page_isValid;

    m_timing_information_isValid = ::OpenAPI::fromJsonValue(m_timing_information, json[QString("TimingInformation")]);
    m_timing_information_isSet = !json[QString("TimingInformation")].isNull() && m_timing_information_isValid;

    m_consumed_ios_isValid = ::OpenAPI::fromJsonValue(m_consumed_ios, json[QString("ConsumedIOs")]);
    m_consumed_ios_isSet = !json[QString("ConsumedIOs")].isNull() && m_consumed_ios_isValid;
}

QString OAIFetchPageResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFetchPageResult::asJsonObject() const {
    QJsonObject obj;
    if (m_page.isSet()) {
        obj.insert(QString("Page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_timing_information.isSet()) {
        obj.insert(QString("TimingInformation"), ::OpenAPI::toJsonValue(m_timing_information));
    }
    if (m_consumed_ios.isSet()) {
        obj.insert(QString("ConsumedIOs"), ::OpenAPI::toJsonValue(m_consumed_ios));
    }
    return obj;
}

OAIFetchPageResult_Page OAIFetchPageResult::getPage() const {
    return m_page;
}
void OAIFetchPageResult::setPage(const OAIFetchPageResult_Page &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIFetchPageResult::is_page_Set() const{
    return m_page_isSet;
}

bool OAIFetchPageResult::is_page_Valid() const{
    return m_page_isValid;
}

OAIAbortTransactionResult_TimingInformation OAIFetchPageResult::getTimingInformation() const {
    return m_timing_information;
}
void OAIFetchPageResult::setTimingInformation(const OAIAbortTransactionResult_TimingInformation &timing_information) {
    m_timing_information = timing_information;
    m_timing_information_isSet = true;
}

bool OAIFetchPageResult::is_timing_information_Set() const{
    return m_timing_information_isSet;
}

bool OAIFetchPageResult::is_timing_information_Valid() const{
    return m_timing_information_isValid;
}

OAICommitTransactionResult_ConsumedIOs OAIFetchPageResult::getConsumedIos() const {
    return m_consumed_ios;
}
void OAIFetchPageResult::setConsumedIos(const OAICommitTransactionResult_ConsumedIOs &consumed_ios) {
    m_consumed_ios = consumed_ios;
    m_consumed_ios_isSet = true;
}

bool OAIFetchPageResult::is_consumed_ios_Set() const{
    return m_consumed_ios_isSet;
}

bool OAIFetchPageResult::is_consumed_ios_Valid() const{
    return m_consumed_ios_isValid;
}

bool OAIFetchPageResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_page.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timing_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_ios.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFetchPageResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
