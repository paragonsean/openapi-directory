/**
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendCommandRequest_StartSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendCommandRequest_StartSession::OAISendCommandRequest_StartSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendCommandRequest_StartSession::OAISendCommandRequest_StartSession() {
    this->initializeModel();
}

OAISendCommandRequest_StartSession::~OAISendCommandRequest_StartSession() {}

void OAISendCommandRequest_StartSession::initializeModel() {

    m_ledger_name_isSet = false;
    m_ledger_name_isValid = false;
}

void OAISendCommandRequest_StartSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendCommandRequest_StartSession::fromJsonObject(QJsonObject json) {

    m_ledger_name_isValid = ::OpenAPI::fromJsonValue(m_ledger_name, json[QString("LedgerName")]);
    m_ledger_name_isSet = !json[QString("LedgerName")].isNull() && m_ledger_name_isValid;
}

QString OAISendCommandRequest_StartSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendCommandRequest_StartSession::asJsonObject() const {
    QJsonObject obj;
    if (m_ledger_name_isSet) {
        obj.insert(QString("LedgerName"), ::OpenAPI::toJsonValue(m_ledger_name));
    }
    return obj;
}

QString OAISendCommandRequest_StartSession::getLedgerName() const {
    return m_ledger_name;
}
void OAISendCommandRequest_StartSession::setLedgerName(const QString &ledger_name) {
    m_ledger_name = ledger_name;
    m_ledger_name_isSet = true;
}

bool OAISendCommandRequest_StartSession::is_ledger_name_Set() const{
    return m_ledger_name_isSet;
}

bool OAISendCommandRequest_StartSession::is_ledger_name_Valid() const{
    return m_ledger_name_isValid;
}

bool OAISendCommandRequest_StartSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ledger_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendCommandRequest_StartSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ledger_name_isValid && true;
}

} // namespace OpenAPI
