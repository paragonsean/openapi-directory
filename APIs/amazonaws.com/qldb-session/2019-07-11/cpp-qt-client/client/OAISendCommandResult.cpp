/**
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendCommandResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendCommandResult::OAISendCommandResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendCommandResult::OAISendCommandResult() {
    this->initializeModel();
}

OAISendCommandResult::~OAISendCommandResult() {}

void OAISendCommandResult::initializeModel() {

    m_start_session_isSet = false;
    m_start_session_isValid = false;

    m_start_transaction_isSet = false;
    m_start_transaction_isValid = false;

    m_end_session_isSet = false;
    m_end_session_isValid = false;

    m_commit_transaction_isSet = false;
    m_commit_transaction_isValid = false;

    m_abort_transaction_isSet = false;
    m_abort_transaction_isValid = false;

    m_execute_statement_isSet = false;
    m_execute_statement_isValid = false;

    m_fetch_page_isSet = false;
    m_fetch_page_isValid = false;
}

void OAISendCommandResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendCommandResult::fromJsonObject(QJsonObject json) {

    m_start_session_isValid = ::OpenAPI::fromJsonValue(m_start_session, json[QString("StartSession")]);
    m_start_session_isSet = !json[QString("StartSession")].isNull() && m_start_session_isValid;

    m_start_transaction_isValid = ::OpenAPI::fromJsonValue(m_start_transaction, json[QString("StartTransaction")]);
    m_start_transaction_isSet = !json[QString("StartTransaction")].isNull() && m_start_transaction_isValid;

    m_end_session_isValid = ::OpenAPI::fromJsonValue(m_end_session, json[QString("EndSession")]);
    m_end_session_isSet = !json[QString("EndSession")].isNull() && m_end_session_isValid;

    m_commit_transaction_isValid = ::OpenAPI::fromJsonValue(m_commit_transaction, json[QString("CommitTransaction")]);
    m_commit_transaction_isSet = !json[QString("CommitTransaction")].isNull() && m_commit_transaction_isValid;

    m_abort_transaction_isValid = ::OpenAPI::fromJsonValue(m_abort_transaction, json[QString("AbortTransaction")]);
    m_abort_transaction_isSet = !json[QString("AbortTransaction")].isNull() && m_abort_transaction_isValid;

    m_execute_statement_isValid = ::OpenAPI::fromJsonValue(m_execute_statement, json[QString("ExecuteStatement")]);
    m_execute_statement_isSet = !json[QString("ExecuteStatement")].isNull() && m_execute_statement_isValid;

    m_fetch_page_isValid = ::OpenAPI::fromJsonValue(m_fetch_page, json[QString("FetchPage")]);
    m_fetch_page_isSet = !json[QString("FetchPage")].isNull() && m_fetch_page_isValid;
}

QString OAISendCommandResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendCommandResult::asJsonObject() const {
    QJsonObject obj;
    if (m_start_session.isSet()) {
        obj.insert(QString("StartSession"), ::OpenAPI::toJsonValue(m_start_session));
    }
    if (m_start_transaction.isSet()) {
        obj.insert(QString("StartTransaction"), ::OpenAPI::toJsonValue(m_start_transaction));
    }
    if (m_end_session.isSet()) {
        obj.insert(QString("EndSession"), ::OpenAPI::toJsonValue(m_end_session));
    }
    if (m_commit_transaction.isSet()) {
        obj.insert(QString("CommitTransaction"), ::OpenAPI::toJsonValue(m_commit_transaction));
    }
    if (m_abort_transaction.isSet()) {
        obj.insert(QString("AbortTransaction"), ::OpenAPI::toJsonValue(m_abort_transaction));
    }
    if (m_execute_statement.isSet()) {
        obj.insert(QString("ExecuteStatement"), ::OpenAPI::toJsonValue(m_execute_statement));
    }
    if (m_fetch_page.isSet()) {
        obj.insert(QString("FetchPage"), ::OpenAPI::toJsonValue(m_fetch_page));
    }
    return obj;
}

OAISendCommandResult_StartSession OAISendCommandResult::getStartSession() const {
    return m_start_session;
}
void OAISendCommandResult::setStartSession(const OAISendCommandResult_StartSession &start_session) {
    m_start_session = start_session;
    m_start_session_isSet = true;
}

bool OAISendCommandResult::is_start_session_Set() const{
    return m_start_session_isSet;
}

bool OAISendCommandResult::is_start_session_Valid() const{
    return m_start_session_isValid;
}

OAISendCommandResult_StartTransaction OAISendCommandResult::getStartTransaction() const {
    return m_start_transaction;
}
void OAISendCommandResult::setStartTransaction(const OAISendCommandResult_StartTransaction &start_transaction) {
    m_start_transaction = start_transaction;
    m_start_transaction_isSet = true;
}

bool OAISendCommandResult::is_start_transaction_Set() const{
    return m_start_transaction_isSet;
}

bool OAISendCommandResult::is_start_transaction_Valid() const{
    return m_start_transaction_isValid;
}

OAISendCommandResult_EndSession OAISendCommandResult::getEndSession() const {
    return m_end_session;
}
void OAISendCommandResult::setEndSession(const OAISendCommandResult_EndSession &end_session) {
    m_end_session = end_session;
    m_end_session_isSet = true;
}

bool OAISendCommandResult::is_end_session_Set() const{
    return m_end_session_isSet;
}

bool OAISendCommandResult::is_end_session_Valid() const{
    return m_end_session_isValid;
}

OAISendCommandResult_CommitTransaction OAISendCommandResult::getCommitTransaction() const {
    return m_commit_transaction;
}
void OAISendCommandResult::setCommitTransaction(const OAISendCommandResult_CommitTransaction &commit_transaction) {
    m_commit_transaction = commit_transaction;
    m_commit_transaction_isSet = true;
}

bool OAISendCommandResult::is_commit_transaction_Set() const{
    return m_commit_transaction_isSet;
}

bool OAISendCommandResult::is_commit_transaction_Valid() const{
    return m_commit_transaction_isValid;
}

OAISendCommandResult_AbortTransaction OAISendCommandResult::getAbortTransaction() const {
    return m_abort_transaction;
}
void OAISendCommandResult::setAbortTransaction(const OAISendCommandResult_AbortTransaction &abort_transaction) {
    m_abort_transaction = abort_transaction;
    m_abort_transaction_isSet = true;
}

bool OAISendCommandResult::is_abort_transaction_Set() const{
    return m_abort_transaction_isSet;
}

bool OAISendCommandResult::is_abort_transaction_Valid() const{
    return m_abort_transaction_isValid;
}

OAISendCommandResult_ExecuteStatement OAISendCommandResult::getExecuteStatement() const {
    return m_execute_statement;
}
void OAISendCommandResult::setExecuteStatement(const OAISendCommandResult_ExecuteStatement &execute_statement) {
    m_execute_statement = execute_statement;
    m_execute_statement_isSet = true;
}

bool OAISendCommandResult::is_execute_statement_Set() const{
    return m_execute_statement_isSet;
}

bool OAISendCommandResult::is_execute_statement_Valid() const{
    return m_execute_statement_isValid;
}

OAISendCommandResult_FetchPage OAISendCommandResult::getFetchPage() const {
    return m_fetch_page;
}
void OAISendCommandResult::setFetchPage(const OAISendCommandResult_FetchPage &fetch_page) {
    m_fetch_page = fetch_page;
    m_fetch_page_isSet = true;
}

bool OAISendCommandResult::is_fetch_page_Set() const{
    return m_fetch_page_isSet;
}

bool OAISendCommandResult::is_fetch_page_Valid() const{
    return m_fetch_page_isValid;
}

bool OAISendCommandResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_abort_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execute_statement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_page.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendCommandResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
