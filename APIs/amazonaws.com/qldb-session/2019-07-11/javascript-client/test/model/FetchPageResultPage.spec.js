/**
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonQldbSession);
  }
}(this, function(expect, AmazonQldbSession) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonQldbSession.FetchPageResultPage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FetchPageResultPage', function() {
    it('should create an instance of FetchPageResultPage', function() {
      // uncomment below and update the code to test FetchPageResultPage
      //var instance = new AmazonQldbSession.FetchPageResultPage();
      //expect(instance).to.be.a(AmazonQldbSession.FetchPageResultPage);
    });

    it('should have the property values (base name: "Values")', function() {
      // uncomment below and update the code to test the property values
      //var instance = new AmazonQldbSession.FetchPageResultPage();
      //expect(instance).to.be();
    });

    it('should have the property nextPageToken (base name: "NextPageToken")', function() {
      // uncomment below and update the code to test the property nextPageToken
      //var instance = new AmazonQldbSession.FetchPageResultPage();
      //expect(instance).to.be();
    });

  });

}));
