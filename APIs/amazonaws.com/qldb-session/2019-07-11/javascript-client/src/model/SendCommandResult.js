/**
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SendCommandResultAbortTransaction from './SendCommandResultAbortTransaction';
import SendCommandResultCommitTransaction from './SendCommandResultCommitTransaction';
import SendCommandResultEndSession from './SendCommandResultEndSession';
import SendCommandResultExecuteStatement from './SendCommandResultExecuteStatement';
import SendCommandResultFetchPage from './SendCommandResultFetchPage';
import SendCommandResultStartSession from './SendCommandResultStartSession';
import SendCommandResultStartTransaction from './SendCommandResultStartTransaction';

/**
 * The SendCommandResult model module.
 * @module model/SendCommandResult
 * @version 2019-07-11
 */
class SendCommandResult {
    /**
     * Constructs a new <code>SendCommandResult</code>.
     * @alias module:model/SendCommandResult
     */
    constructor() { 
        
        SendCommandResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SendCommandResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendCommandResult} obj Optional instance to populate.
     * @return {module:model/SendCommandResult} The populated <code>SendCommandResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendCommandResult();

            if (data.hasOwnProperty('StartSession')) {
                obj['StartSession'] = SendCommandResultStartSession.constructFromObject(data['StartSession']);
            }
            if (data.hasOwnProperty('StartTransaction')) {
                obj['StartTransaction'] = SendCommandResultStartTransaction.constructFromObject(data['StartTransaction']);
            }
            if (data.hasOwnProperty('EndSession')) {
                obj['EndSession'] = SendCommandResultEndSession.constructFromObject(data['EndSession']);
            }
            if (data.hasOwnProperty('CommitTransaction')) {
                obj['CommitTransaction'] = SendCommandResultCommitTransaction.constructFromObject(data['CommitTransaction']);
            }
            if (data.hasOwnProperty('AbortTransaction')) {
                obj['AbortTransaction'] = SendCommandResultAbortTransaction.constructFromObject(data['AbortTransaction']);
            }
            if (data.hasOwnProperty('ExecuteStatement')) {
                obj['ExecuteStatement'] = SendCommandResultExecuteStatement.constructFromObject(data['ExecuteStatement']);
            }
            if (data.hasOwnProperty('FetchPage')) {
                obj['FetchPage'] = SendCommandResultFetchPage.constructFromObject(data['FetchPage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendCommandResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendCommandResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `StartSession`
        if (data['StartSession']) { // data not null
          SendCommandResultStartSession.validateJSON(data['StartSession']);
        }
        // validate the optional field `StartTransaction`
        if (data['StartTransaction']) { // data not null
          SendCommandResultStartTransaction.validateJSON(data['StartTransaction']);
        }
        // validate the optional field `EndSession`
        if (data['EndSession']) { // data not null
          SendCommandResultEndSession.validateJSON(data['EndSession']);
        }
        // validate the optional field `CommitTransaction`
        if (data['CommitTransaction']) { // data not null
          SendCommandResultCommitTransaction.validateJSON(data['CommitTransaction']);
        }
        // validate the optional field `AbortTransaction`
        if (data['AbortTransaction']) { // data not null
          SendCommandResultAbortTransaction.validateJSON(data['AbortTransaction']);
        }
        // validate the optional field `ExecuteStatement`
        if (data['ExecuteStatement']) { // data not null
          SendCommandResultExecuteStatement.validateJSON(data['ExecuteStatement']);
        }
        // validate the optional field `FetchPage`
        if (data['FetchPage']) { // data not null
          SendCommandResultFetchPage.validateJSON(data['FetchPage']);
        }

        return true;
    }


}



/**
 * @member {module:model/SendCommandResultStartSession} StartSession
 */
SendCommandResult.prototype['StartSession'] = undefined;

/**
 * @member {module:model/SendCommandResultStartTransaction} StartTransaction
 */
SendCommandResult.prototype['StartTransaction'] = undefined;

/**
 * @member {module:model/SendCommandResultEndSession} EndSession
 */
SendCommandResult.prototype['EndSession'] = undefined;

/**
 * @member {module:model/SendCommandResultCommitTransaction} CommitTransaction
 */
SendCommandResult.prototype['CommitTransaction'] = undefined;

/**
 * @member {module:model/SendCommandResultAbortTransaction} AbortTransaction
 */
SendCommandResult.prototype['AbortTransaction'] = undefined;

/**
 * @member {module:model/SendCommandResultExecuteStatement} ExecuteStatement
 */
SendCommandResult.prototype['ExecuteStatement'] = undefined;

/**
 * @member {module:model/SendCommandResultFetchPage} FetchPage
 */
SendCommandResult.prototype['FetchPage'] = undefined;






export default SendCommandResult;

