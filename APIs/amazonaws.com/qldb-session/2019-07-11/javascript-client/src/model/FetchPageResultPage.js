/**
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Page from './Page';

/**
 * The FetchPageResultPage model module.
 * @module model/FetchPageResultPage
 * @version 2019-07-11
 */
class FetchPageResultPage {
    /**
     * Constructs a new <code>FetchPageResultPage</code>.
     * @alias module:model/FetchPageResultPage
     * @implements module:model/Page
     */
    constructor() { 
        Page.initialize(this);
        FetchPageResultPage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FetchPageResultPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FetchPageResultPage} obj Optional instance to populate.
     * @return {module:model/FetchPageResultPage} The populated <code>FetchPageResultPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FetchPageResultPage();
            Page.constructFromObject(data, obj);

            if (data.hasOwnProperty('Values')) {
                obj['Values'] = ApiClient.convertToType(data['Values'], Array);
            }
            if (data.hasOwnProperty('NextPageToken')) {
                obj['NextPageToken'] = ApiClient.convertToType(data['NextPageToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FetchPageResultPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FetchPageResultPage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Values`
        if (data['Values']) { // data not null
          Array.validateJSON(data['Values']);
        }
        // validate the optional field `NextPageToken`
        if (data['NextPageToken']) { // data not null
          String.validateJSON(data['NextPageToken']);
        }

        return true;
    }


}



/**
 * @member {Array} Values
 */
FetchPageResultPage.prototype['Values'] = undefined;

/**
 * @member {String} NextPageToken
 */
FetchPageResultPage.prototype['NextPageToken'] = undefined;


// Implement Page interface:
/**
 * @member {Array} Values
 */
Page.prototype['Values'] = undefined;
/**
 * @member {String} NextPageToken
 */
Page.prototype['NextPageToken'] = undefined;




export default FetchPageResultPage;

