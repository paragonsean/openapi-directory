# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendCommandRequestExecuteStatement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_id: str=None, statement: str=None, parameters: List=None):
        """SendCommandRequestExecuteStatement - a model defined in OpenAPI

        :param transaction_id: The transaction_id of this SendCommandRequestExecuteStatement.
        :param statement: The statement of this SendCommandRequestExecuteStatement.
        :param parameters: The parameters of this SendCommandRequestExecuteStatement.
        """
        self.openapi_types = {
            'transaction_id': str,
            'statement': str,
            'parameters': List
        }

        self.attribute_map = {
            'transaction_id': 'TransactionId',
            'statement': 'Statement',
            'parameters': 'Parameters'
        }

        self._transaction_id = transaction_id
        self._statement = statement
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendCommandRequestExecuteStatement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendCommandRequest_ExecuteStatement of this SendCommandRequestExecuteStatement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_id(self):
        """Gets the transaction_id of this SendCommandRequestExecuteStatement.


        :return: The transaction_id of this SendCommandRequestExecuteStatement.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this SendCommandRequestExecuteStatement.


        :param transaction_id: The transaction_id of this SendCommandRequestExecuteStatement.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def statement(self):
        """Gets the statement of this SendCommandRequestExecuteStatement.


        :return: The statement of this SendCommandRequestExecuteStatement.
        :rtype: str
        """
        return self._statement

    @statement.setter
    def statement(self, statement):
        """Sets the statement of this SendCommandRequestExecuteStatement.


        :param statement: The statement of this SendCommandRequestExecuteStatement.
        :type statement: str
        """
        if statement is None:
            raise ValueError("Invalid value for `statement`, must not be `None`")

        self._statement = statement

    @property
    def parameters(self):
        """Gets the parameters of this SendCommandRequestExecuteStatement.


        :return: The parameters of this SendCommandRequestExecuteStatement.
        :rtype: List
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SendCommandRequestExecuteStatement.


        :param parameters: The parameters of this SendCommandRequestExecuteStatement.
        :type parameters: List
        """

        self._parameters = parameters
