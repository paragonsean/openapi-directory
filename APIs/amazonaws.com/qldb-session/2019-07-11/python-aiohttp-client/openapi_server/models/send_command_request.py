# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.send_command_request_commit_transaction import SendCommandRequestCommitTransaction
from openapi_server.models.send_command_request_execute_statement import SendCommandRequestExecuteStatement
from openapi_server.models.send_command_request_fetch_page import SendCommandRequestFetchPage
from openapi_server.models.send_command_request_start_session import SendCommandRequestStartSession
from openapi_server import util


class SendCommandRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_token: str=None, start_session: SendCommandRequestStartSession=None, start_transaction: object=None, end_session: object=None, commit_transaction: SendCommandRequestCommitTransaction=None, abort_transaction: object=None, execute_statement: SendCommandRequestExecuteStatement=None, fetch_page: SendCommandRequestFetchPage=None):
        """SendCommandRequest - a model defined in OpenAPI

        :param session_token: The session_token of this SendCommandRequest.
        :param start_session: The start_session of this SendCommandRequest.
        :param start_transaction: The start_transaction of this SendCommandRequest.
        :param end_session: The end_session of this SendCommandRequest.
        :param commit_transaction: The commit_transaction of this SendCommandRequest.
        :param abort_transaction: The abort_transaction of this SendCommandRequest.
        :param execute_statement: The execute_statement of this SendCommandRequest.
        :param fetch_page: The fetch_page of this SendCommandRequest.
        """
        self.openapi_types = {
            'session_token': str,
            'start_session': SendCommandRequestStartSession,
            'start_transaction': object,
            'end_session': object,
            'commit_transaction': SendCommandRequestCommitTransaction,
            'abort_transaction': object,
            'execute_statement': SendCommandRequestExecuteStatement,
            'fetch_page': SendCommandRequestFetchPage
        }

        self.attribute_map = {
            'session_token': 'SessionToken',
            'start_session': 'StartSession',
            'start_transaction': 'StartTransaction',
            'end_session': 'EndSession',
            'commit_transaction': 'CommitTransaction',
            'abort_transaction': 'AbortTransaction',
            'execute_statement': 'ExecuteStatement',
            'fetch_page': 'FetchPage'
        }

        self._session_token = session_token
        self._start_session = start_session
        self._start_transaction = start_transaction
        self._end_session = end_session
        self._commit_transaction = commit_transaction
        self._abort_transaction = abort_transaction
        self._execute_statement = execute_statement
        self._fetch_page = fetch_page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendCommandRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendCommandRequest of this SendCommandRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_token(self):
        """Gets the session_token of this SendCommandRequest.


        :return: The session_token of this SendCommandRequest.
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this SendCommandRequest.


        :param session_token: The session_token of this SendCommandRequest.
        :type session_token: str
        """

        self._session_token = session_token

    @property
    def start_session(self):
        """Gets the start_session of this SendCommandRequest.


        :return: The start_session of this SendCommandRequest.
        :rtype: SendCommandRequestStartSession
        """
        return self._start_session

    @start_session.setter
    def start_session(self, start_session):
        """Sets the start_session of this SendCommandRequest.


        :param start_session: The start_session of this SendCommandRequest.
        :type start_session: SendCommandRequestStartSession
        """

        self._start_session = start_session

    @property
    def start_transaction(self):
        """Gets the start_transaction of this SendCommandRequest.


        :return: The start_transaction of this SendCommandRequest.
        :rtype: object
        """
        return self._start_transaction

    @start_transaction.setter
    def start_transaction(self, start_transaction):
        """Sets the start_transaction of this SendCommandRequest.


        :param start_transaction: The start_transaction of this SendCommandRequest.
        :type start_transaction: object
        """

        self._start_transaction = start_transaction

    @property
    def end_session(self):
        """Gets the end_session of this SendCommandRequest.


        :return: The end_session of this SendCommandRequest.
        :rtype: object
        """
        return self._end_session

    @end_session.setter
    def end_session(self, end_session):
        """Sets the end_session of this SendCommandRequest.


        :param end_session: The end_session of this SendCommandRequest.
        :type end_session: object
        """

        self._end_session = end_session

    @property
    def commit_transaction(self):
        """Gets the commit_transaction of this SendCommandRequest.


        :return: The commit_transaction of this SendCommandRequest.
        :rtype: SendCommandRequestCommitTransaction
        """
        return self._commit_transaction

    @commit_transaction.setter
    def commit_transaction(self, commit_transaction):
        """Sets the commit_transaction of this SendCommandRequest.


        :param commit_transaction: The commit_transaction of this SendCommandRequest.
        :type commit_transaction: SendCommandRequestCommitTransaction
        """

        self._commit_transaction = commit_transaction

    @property
    def abort_transaction(self):
        """Gets the abort_transaction of this SendCommandRequest.


        :return: The abort_transaction of this SendCommandRequest.
        :rtype: object
        """
        return self._abort_transaction

    @abort_transaction.setter
    def abort_transaction(self, abort_transaction):
        """Sets the abort_transaction of this SendCommandRequest.


        :param abort_transaction: The abort_transaction of this SendCommandRequest.
        :type abort_transaction: object
        """

        self._abort_transaction = abort_transaction

    @property
    def execute_statement(self):
        """Gets the execute_statement of this SendCommandRequest.


        :return: The execute_statement of this SendCommandRequest.
        :rtype: SendCommandRequestExecuteStatement
        """
        return self._execute_statement

    @execute_statement.setter
    def execute_statement(self, execute_statement):
        """Sets the execute_statement of this SendCommandRequest.


        :param execute_statement: The execute_statement of this SendCommandRequest.
        :type execute_statement: SendCommandRequestExecuteStatement
        """

        self._execute_statement = execute_statement

    @property
    def fetch_page(self):
        """Gets the fetch_page of this SendCommandRequest.


        :return: The fetch_page of this SendCommandRequest.
        :rtype: SendCommandRequestFetchPage
        """
        return self._fetch_page

    @fetch_page.setter
    def fetch_page(self, fetch_page):
        """Sets the fetch_page of this SendCommandRequest.


        :param fetch_page: The fetch_page of this SendCommandRequest.
        :type fetch_page: SendCommandRequestFetchPage
        """

        self._fetch_page = fetch_page
