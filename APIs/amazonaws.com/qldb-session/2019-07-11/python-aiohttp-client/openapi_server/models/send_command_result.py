# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.send_command_result_abort_transaction import SendCommandResultAbortTransaction
from openapi_server.models.send_command_result_commit_transaction import SendCommandResultCommitTransaction
from openapi_server.models.send_command_result_end_session import SendCommandResultEndSession
from openapi_server.models.send_command_result_execute_statement import SendCommandResultExecuteStatement
from openapi_server.models.send_command_result_fetch_page import SendCommandResultFetchPage
from openapi_server.models.send_command_result_start_session import SendCommandResultStartSession
from openapi_server.models.send_command_result_start_transaction import SendCommandResultStartTransaction
from openapi_server import util


class SendCommandResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_session: SendCommandResultStartSession=None, start_transaction: SendCommandResultStartTransaction=None, end_session: SendCommandResultEndSession=None, commit_transaction: SendCommandResultCommitTransaction=None, abort_transaction: SendCommandResultAbortTransaction=None, execute_statement: SendCommandResultExecuteStatement=None, fetch_page: SendCommandResultFetchPage=None):
        """SendCommandResult - a model defined in OpenAPI

        :param start_session: The start_session of this SendCommandResult.
        :param start_transaction: The start_transaction of this SendCommandResult.
        :param end_session: The end_session of this SendCommandResult.
        :param commit_transaction: The commit_transaction of this SendCommandResult.
        :param abort_transaction: The abort_transaction of this SendCommandResult.
        :param execute_statement: The execute_statement of this SendCommandResult.
        :param fetch_page: The fetch_page of this SendCommandResult.
        """
        self.openapi_types = {
            'start_session': SendCommandResultStartSession,
            'start_transaction': SendCommandResultStartTransaction,
            'end_session': SendCommandResultEndSession,
            'commit_transaction': SendCommandResultCommitTransaction,
            'abort_transaction': SendCommandResultAbortTransaction,
            'execute_statement': SendCommandResultExecuteStatement,
            'fetch_page': SendCommandResultFetchPage
        }

        self.attribute_map = {
            'start_session': 'StartSession',
            'start_transaction': 'StartTransaction',
            'end_session': 'EndSession',
            'commit_transaction': 'CommitTransaction',
            'abort_transaction': 'AbortTransaction',
            'execute_statement': 'ExecuteStatement',
            'fetch_page': 'FetchPage'
        }

        self._start_session = start_session
        self._start_transaction = start_transaction
        self._end_session = end_session
        self._commit_transaction = commit_transaction
        self._abort_transaction = abort_transaction
        self._execute_statement = execute_statement
        self._fetch_page = fetch_page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendCommandResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendCommandResult of this SendCommandResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_session(self):
        """Gets the start_session of this SendCommandResult.


        :return: The start_session of this SendCommandResult.
        :rtype: SendCommandResultStartSession
        """
        return self._start_session

    @start_session.setter
    def start_session(self, start_session):
        """Sets the start_session of this SendCommandResult.


        :param start_session: The start_session of this SendCommandResult.
        :type start_session: SendCommandResultStartSession
        """

        self._start_session = start_session

    @property
    def start_transaction(self):
        """Gets the start_transaction of this SendCommandResult.


        :return: The start_transaction of this SendCommandResult.
        :rtype: SendCommandResultStartTransaction
        """
        return self._start_transaction

    @start_transaction.setter
    def start_transaction(self, start_transaction):
        """Sets the start_transaction of this SendCommandResult.


        :param start_transaction: The start_transaction of this SendCommandResult.
        :type start_transaction: SendCommandResultStartTransaction
        """

        self._start_transaction = start_transaction

    @property
    def end_session(self):
        """Gets the end_session of this SendCommandResult.


        :return: The end_session of this SendCommandResult.
        :rtype: SendCommandResultEndSession
        """
        return self._end_session

    @end_session.setter
    def end_session(self, end_session):
        """Sets the end_session of this SendCommandResult.


        :param end_session: The end_session of this SendCommandResult.
        :type end_session: SendCommandResultEndSession
        """

        self._end_session = end_session

    @property
    def commit_transaction(self):
        """Gets the commit_transaction of this SendCommandResult.


        :return: The commit_transaction of this SendCommandResult.
        :rtype: SendCommandResultCommitTransaction
        """
        return self._commit_transaction

    @commit_transaction.setter
    def commit_transaction(self, commit_transaction):
        """Sets the commit_transaction of this SendCommandResult.


        :param commit_transaction: The commit_transaction of this SendCommandResult.
        :type commit_transaction: SendCommandResultCommitTransaction
        """

        self._commit_transaction = commit_transaction

    @property
    def abort_transaction(self):
        """Gets the abort_transaction of this SendCommandResult.


        :return: The abort_transaction of this SendCommandResult.
        :rtype: SendCommandResultAbortTransaction
        """
        return self._abort_transaction

    @abort_transaction.setter
    def abort_transaction(self, abort_transaction):
        """Sets the abort_transaction of this SendCommandResult.


        :param abort_transaction: The abort_transaction of this SendCommandResult.
        :type abort_transaction: SendCommandResultAbortTransaction
        """

        self._abort_transaction = abort_transaction

    @property
    def execute_statement(self):
        """Gets the execute_statement of this SendCommandResult.


        :return: The execute_statement of this SendCommandResult.
        :rtype: SendCommandResultExecuteStatement
        """
        return self._execute_statement

    @execute_statement.setter
    def execute_statement(self, execute_statement):
        """Sets the execute_statement of this SendCommandResult.


        :param execute_statement: The execute_statement of this SendCommandResult.
        :type execute_statement: SendCommandResultExecuteStatement
        """

        self._execute_statement = execute_statement

    @property
    def fetch_page(self):
        """Gets the fetch_page of this SendCommandResult.


        :return: The fetch_page of this SendCommandResult.
        :rtype: SendCommandResultFetchPage
        """
        return self._fetch_page

    @fetch_page.setter
    def fetch_page(self, fetch_page):
        """Sets the fetch_page of this SendCommandResult.


        :param fetch_page: The fetch_page of this SendCommandResult.
        :type fetch_page: SendCommandResultFetchPage
        """

        self._fetch_page = fetch_page
