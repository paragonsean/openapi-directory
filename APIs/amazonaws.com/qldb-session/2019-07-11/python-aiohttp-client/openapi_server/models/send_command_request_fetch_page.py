# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendCommandRequestFetchPage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_id: str=None, next_page_token: str=None):
        """SendCommandRequestFetchPage - a model defined in OpenAPI

        :param transaction_id: The transaction_id of this SendCommandRequestFetchPage.
        :param next_page_token: The next_page_token of this SendCommandRequestFetchPage.
        """
        self.openapi_types = {
            'transaction_id': str,
            'next_page_token': str
        }

        self.attribute_map = {
            'transaction_id': 'TransactionId',
            'next_page_token': 'NextPageToken'
        }

        self._transaction_id = transaction_id
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendCommandRequestFetchPage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendCommandRequest_FetchPage of this SendCommandRequestFetchPage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_id(self):
        """Gets the transaction_id of this SendCommandRequestFetchPage.


        :return: The transaction_id of this SendCommandRequestFetchPage.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this SendCommandRequestFetchPage.


        :param transaction_id: The transaction_id of this SendCommandRequestFetchPage.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def next_page_token(self):
        """Gets the next_page_token of this SendCommandRequestFetchPage.


        :return: The next_page_token of this SendCommandRequestFetchPage.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this SendCommandRequestFetchPage.


        :param next_page_token: The next_page_token of this SendCommandRequestFetchPage.
        :type next_page_token: str
        """
        if next_page_token is None:
            raise ValueError("Invalid value for `next_page_token`, must not be `None`")

        self._next_page_token = next_page_token
