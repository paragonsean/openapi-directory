/*
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SendCommandRequestCommitTransaction;
import org.openapitools.client.model.SendCommandRequestExecuteStatement;
import org.openapitools.client.model.SendCommandRequestFetchPage;
import org.openapitools.client.model.SendCommandRequestStartSession;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendCommandRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:39.377184-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendCommandRequest {
  public static final String SERIALIZED_NAME_SESSION_TOKEN = "SessionToken";
  @SerializedName(SERIALIZED_NAME_SESSION_TOKEN)
  private String sessionToken;

  public static final String SERIALIZED_NAME_START_SESSION = "StartSession";
  @SerializedName(SERIALIZED_NAME_START_SESSION)
  private SendCommandRequestStartSession startSession;

  public static final String SERIALIZED_NAME_START_TRANSACTION = "StartTransaction";
  @SerializedName(SERIALIZED_NAME_START_TRANSACTION)
  private Object startTransaction;

  public static final String SERIALIZED_NAME_END_SESSION = "EndSession";
  @SerializedName(SERIALIZED_NAME_END_SESSION)
  private Object endSession;

  public static final String SERIALIZED_NAME_COMMIT_TRANSACTION = "CommitTransaction";
  @SerializedName(SERIALIZED_NAME_COMMIT_TRANSACTION)
  private SendCommandRequestCommitTransaction commitTransaction;

  public static final String SERIALIZED_NAME_ABORT_TRANSACTION = "AbortTransaction";
  @SerializedName(SERIALIZED_NAME_ABORT_TRANSACTION)
  private Object abortTransaction;

  public static final String SERIALIZED_NAME_EXECUTE_STATEMENT = "ExecuteStatement";
  @SerializedName(SERIALIZED_NAME_EXECUTE_STATEMENT)
  private SendCommandRequestExecuteStatement executeStatement;

  public static final String SERIALIZED_NAME_FETCH_PAGE = "FetchPage";
  @SerializedName(SERIALIZED_NAME_FETCH_PAGE)
  private SendCommandRequestFetchPage fetchPage;

  public SendCommandRequest() {
  }

  public SendCommandRequest sessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
    return this;
  }

  /**
   * Get sessionToken
   * @return sessionToken
   */
  @javax.annotation.Nullable
  public String getSessionToken() {
    return sessionToken;
  }

  public void setSessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
  }


  public SendCommandRequest startSession(SendCommandRequestStartSession startSession) {
    this.startSession = startSession;
    return this;
  }

  /**
   * Get startSession
   * @return startSession
   */
  @javax.annotation.Nullable
  public SendCommandRequestStartSession getStartSession() {
    return startSession;
  }

  public void setStartSession(SendCommandRequestStartSession startSession) {
    this.startSession = startSession;
  }


  public SendCommandRequest startTransaction(Object startTransaction) {
    this.startTransaction = startTransaction;
    return this;
  }

  /**
   * Get startTransaction
   * @return startTransaction
   */
  @javax.annotation.Nullable
  public Object getStartTransaction() {
    return startTransaction;
  }

  public void setStartTransaction(Object startTransaction) {
    this.startTransaction = startTransaction;
  }


  public SendCommandRequest endSession(Object endSession) {
    this.endSession = endSession;
    return this;
  }

  /**
   * Get endSession
   * @return endSession
   */
  @javax.annotation.Nullable
  public Object getEndSession() {
    return endSession;
  }

  public void setEndSession(Object endSession) {
    this.endSession = endSession;
  }


  public SendCommandRequest commitTransaction(SendCommandRequestCommitTransaction commitTransaction) {
    this.commitTransaction = commitTransaction;
    return this;
  }

  /**
   * Get commitTransaction
   * @return commitTransaction
   */
  @javax.annotation.Nullable
  public SendCommandRequestCommitTransaction getCommitTransaction() {
    return commitTransaction;
  }

  public void setCommitTransaction(SendCommandRequestCommitTransaction commitTransaction) {
    this.commitTransaction = commitTransaction;
  }


  public SendCommandRequest abortTransaction(Object abortTransaction) {
    this.abortTransaction = abortTransaction;
    return this;
  }

  /**
   * Get abortTransaction
   * @return abortTransaction
   */
  @javax.annotation.Nullable
  public Object getAbortTransaction() {
    return abortTransaction;
  }

  public void setAbortTransaction(Object abortTransaction) {
    this.abortTransaction = abortTransaction;
  }


  public SendCommandRequest executeStatement(SendCommandRequestExecuteStatement executeStatement) {
    this.executeStatement = executeStatement;
    return this;
  }

  /**
   * Get executeStatement
   * @return executeStatement
   */
  @javax.annotation.Nullable
  public SendCommandRequestExecuteStatement getExecuteStatement() {
    return executeStatement;
  }

  public void setExecuteStatement(SendCommandRequestExecuteStatement executeStatement) {
    this.executeStatement = executeStatement;
  }


  public SendCommandRequest fetchPage(SendCommandRequestFetchPage fetchPage) {
    this.fetchPage = fetchPage;
    return this;
  }

  /**
   * Get fetchPage
   * @return fetchPage
   */
  @javax.annotation.Nullable
  public SendCommandRequestFetchPage getFetchPage() {
    return fetchPage;
  }

  public void setFetchPage(SendCommandRequestFetchPage fetchPage) {
    this.fetchPage = fetchPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendCommandRequest sendCommandRequest = (SendCommandRequest) o;
    return Objects.equals(this.sessionToken, sendCommandRequest.sessionToken) &&
        Objects.equals(this.startSession, sendCommandRequest.startSession) &&
        Objects.equals(this.startTransaction, sendCommandRequest.startTransaction) &&
        Objects.equals(this.endSession, sendCommandRequest.endSession) &&
        Objects.equals(this.commitTransaction, sendCommandRequest.commitTransaction) &&
        Objects.equals(this.abortTransaction, sendCommandRequest.abortTransaction) &&
        Objects.equals(this.executeStatement, sendCommandRequest.executeStatement) &&
        Objects.equals(this.fetchPage, sendCommandRequest.fetchPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionToken, startSession, startTransaction, endSession, commitTransaction, abortTransaction, executeStatement, fetchPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendCommandRequest {\n");
    sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
    sb.append("    startSession: ").append(toIndentedString(startSession)).append("\n");
    sb.append("    startTransaction: ").append(toIndentedString(startTransaction)).append("\n");
    sb.append("    endSession: ").append(toIndentedString(endSession)).append("\n");
    sb.append("    commitTransaction: ").append(toIndentedString(commitTransaction)).append("\n");
    sb.append("    abortTransaction: ").append(toIndentedString(abortTransaction)).append("\n");
    sb.append("    executeStatement: ").append(toIndentedString(executeStatement)).append("\n");
    sb.append("    fetchPage: ").append(toIndentedString(fetchPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SessionToken");
    openapiFields.add("StartSession");
    openapiFields.add("StartTransaction");
    openapiFields.add("EndSession");
    openapiFields.add("CommitTransaction");
    openapiFields.add("AbortTransaction");
    openapiFields.add("ExecuteStatement");
    openapiFields.add("FetchPage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendCommandRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendCommandRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendCommandRequest is not found in the empty JSON string", SendCommandRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendCommandRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendCommandRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SessionToken`
      if (jsonObj.get("SessionToken") != null && !jsonObj.get("SessionToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SessionToken"));
      }
      // validate the optional field `StartSession`
      if (jsonObj.get("StartSession") != null && !jsonObj.get("StartSession").isJsonNull()) {
        SendCommandRequestStartSession.validateJsonElement(jsonObj.get("StartSession"));
      }
      // validate the optional field `StartTransaction`
      if (jsonObj.get("StartTransaction") != null && !jsonObj.get("StartTransaction").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("StartTransaction"));
      }
      // validate the optional field `EndSession`
      if (jsonObj.get("EndSession") != null && !jsonObj.get("EndSession").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("EndSession"));
      }
      // validate the optional field `CommitTransaction`
      if (jsonObj.get("CommitTransaction") != null && !jsonObj.get("CommitTransaction").isJsonNull()) {
        SendCommandRequestCommitTransaction.validateJsonElement(jsonObj.get("CommitTransaction"));
      }
      // validate the optional field `AbortTransaction`
      if (jsonObj.get("AbortTransaction") != null && !jsonObj.get("AbortTransaction").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("AbortTransaction"));
      }
      // validate the optional field `ExecuteStatement`
      if (jsonObj.get("ExecuteStatement") != null && !jsonObj.get("ExecuteStatement").isJsonNull()) {
        SendCommandRequestExecuteStatement.validateJsonElement(jsonObj.get("ExecuteStatement"));
      }
      // validate the optional field `FetchPage`
      if (jsonObj.get("FetchPage") != null && !jsonObj.get("FetchPage").isJsonNull()) {
        SendCommandRequestFetchPage.validateJsonElement(jsonObj.get("FetchPage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendCommandRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendCommandRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendCommandRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendCommandRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendCommandRequest>() {
           @Override
           public void write(JsonWriter out, SendCommandRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendCommandRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendCommandRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendCommandRequest
   * @throws IOException if the JSON string is invalid with respect to SendCommandRequest
   */
  public static SendCommandRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendCommandRequest.class);
  }

  /**
   * Convert an instance of SendCommandRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

