/*
 * Amazon QLDB Session
 * <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2019-07-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AbortTransactionResultTimingInformation;
import org.openapitools.client.model.CommitTransactionResultConsumedIOs;
import org.openapitools.client.model.FetchPageResultPage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the page that was fetched.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:39.377184-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FetchPageResult {
  public static final String SERIALIZED_NAME_PAGE = "Page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private FetchPageResultPage page;

  public static final String SERIALIZED_NAME_TIMING_INFORMATION = "TimingInformation";
  @SerializedName(SERIALIZED_NAME_TIMING_INFORMATION)
  private AbortTransactionResultTimingInformation timingInformation;

  public static final String SERIALIZED_NAME_CONSUMED_I_OS = "ConsumedIOs";
  @SerializedName(SERIALIZED_NAME_CONSUMED_I_OS)
  private CommitTransactionResultConsumedIOs consumedIOs;

  public FetchPageResult() {
  }

  public FetchPageResult page(FetchPageResultPage page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public FetchPageResultPage getPage() {
    return page;
  }

  public void setPage(FetchPageResultPage page) {
    this.page = page;
  }


  public FetchPageResult timingInformation(AbortTransactionResultTimingInformation timingInformation) {
    this.timingInformation = timingInformation;
    return this;
  }

  /**
   * Get timingInformation
   * @return timingInformation
   */
  @javax.annotation.Nullable
  public AbortTransactionResultTimingInformation getTimingInformation() {
    return timingInformation;
  }

  public void setTimingInformation(AbortTransactionResultTimingInformation timingInformation) {
    this.timingInformation = timingInformation;
  }


  public FetchPageResult consumedIOs(CommitTransactionResultConsumedIOs consumedIOs) {
    this.consumedIOs = consumedIOs;
    return this;
  }

  /**
   * Get consumedIOs
   * @return consumedIOs
   */
  @javax.annotation.Nullable
  public CommitTransactionResultConsumedIOs getConsumedIOs() {
    return consumedIOs;
  }

  public void setConsumedIOs(CommitTransactionResultConsumedIOs consumedIOs) {
    this.consumedIOs = consumedIOs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchPageResult fetchPageResult = (FetchPageResult) o;
    return Objects.equals(this.page, fetchPageResult.page) &&
        Objects.equals(this.timingInformation, fetchPageResult.timingInformation) &&
        Objects.equals(this.consumedIOs, fetchPageResult.consumedIOs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, timingInformation, consumedIOs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchPageResult {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    timingInformation: ").append(toIndentedString(timingInformation)).append("\n");
    sb.append("    consumedIOs: ").append(toIndentedString(consumedIOs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Page");
    openapiFields.add("TimingInformation");
    openapiFields.add("ConsumedIOs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FetchPageResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FetchPageResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FetchPageResult is not found in the empty JSON string", FetchPageResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FetchPageResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FetchPageResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Page`
      if (jsonObj.get("Page") != null && !jsonObj.get("Page").isJsonNull()) {
        FetchPageResultPage.validateJsonElement(jsonObj.get("Page"));
      }
      // validate the optional field `TimingInformation`
      if (jsonObj.get("TimingInformation") != null && !jsonObj.get("TimingInformation").isJsonNull()) {
        AbortTransactionResultTimingInformation.validateJsonElement(jsonObj.get("TimingInformation"));
      }
      // validate the optional field `ConsumedIOs`
      if (jsonObj.get("ConsumedIOs") != null && !jsonObj.get("ConsumedIOs").isJsonNull()) {
        CommitTransactionResultConsumedIOs.validateJsonElement(jsonObj.get("ConsumedIOs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FetchPageResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FetchPageResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FetchPageResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FetchPageResult.class));

       return (TypeAdapter<T>) new TypeAdapter<FetchPageResult>() {
           @Override
           public void write(JsonWriter out, FetchPageResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FetchPageResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FetchPageResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FetchPageResult
   * @throws IOException if the JSON string is invalid with respect to FetchPageResult
   */
  public static FetchPageResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FetchPageResult.class);
  }

  /**
   * Convert an instance of FetchPageResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

