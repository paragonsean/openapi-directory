# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_arn: str=None, priority: str=None, conditions: List=None, actions: List=None, is_default: bool=None):
        """Rule - a model defined in OpenAPI

        :param rule_arn: The rule_arn of this Rule.
        :param priority: The priority of this Rule.
        :param conditions: The conditions of this Rule.
        :param actions: The actions of this Rule.
        :param is_default: The is_default of this Rule.
        """
        self.openapi_types = {
            'rule_arn': str,
            'priority': str,
            'conditions': List,
            'actions': List,
            'is_default': bool
        }

        self.attribute_map = {
            'rule_arn': 'RuleArn',
            'priority': 'Priority',
            'conditions': 'Conditions',
            'actions': 'Actions',
            'is_default': 'IsDefault'
        }

        self._rule_arn = rule_arn
        self._priority = priority
        self._conditions = conditions
        self._actions = actions
        self._is_default = is_default

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_arn(self):
        """Gets the rule_arn of this Rule.


        :return: The rule_arn of this Rule.
        :rtype: str
        """
        return self._rule_arn

    @rule_arn.setter
    def rule_arn(self, rule_arn):
        """Sets the rule_arn of this Rule.


        :param rule_arn: The rule_arn of this Rule.
        :type rule_arn: str
        """

        self._rule_arn = rule_arn

    @property
    def priority(self):
        """Gets the priority of this Rule.


        :return: The priority of this Rule.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Rule.


        :param priority: The priority of this Rule.
        :type priority: str
        """

        self._priority = priority

    @property
    def conditions(self):
        """Gets the conditions of this Rule.


        :return: The conditions of this Rule.
        :rtype: List
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Rule.


        :param conditions: The conditions of this Rule.
        :type conditions: List
        """

        self._conditions = conditions

    @property
    def actions(self):
        """Gets the actions of this Rule.


        :return: The actions of this Rule.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Rule.


        :param actions: The actions of this Rule.
        :type actions: List
        """

        self._actions = actions

    @property
    def is_default(self):
        """Gets the is_default of this Rule.


        :return: The is_default of this Rule.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Rule.


        :param is_default: The is_default of this Rule.
        :type is_default: bool
        """

        self._is_default = is_default
