# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateRuleInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, listener_arn: str=None, conditions: List=None, priority: int=None, actions: List=None, tags: List=None):
        """CreateRuleInput - a model defined in OpenAPI

        :param listener_arn: The listener_arn of this CreateRuleInput.
        :param conditions: The conditions of this CreateRuleInput.
        :param priority: The priority of this CreateRuleInput.
        :param actions: The actions of this CreateRuleInput.
        :param tags: The tags of this CreateRuleInput.
        """
        self.openapi_types = {
            'listener_arn': str,
            'conditions': List,
            'priority': int,
            'actions': List,
            'tags': List
        }

        self.attribute_map = {
            'listener_arn': 'ListenerArn',
            'conditions': 'Conditions',
            'priority': 'Priority',
            'actions': 'Actions',
            'tags': 'Tags'
        }

        self._listener_arn = listener_arn
        self._conditions = conditions
        self._priority = priority
        self._actions = actions
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRuleInput of this CreateRuleInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def listener_arn(self):
        """Gets the listener_arn of this CreateRuleInput.


        :return: The listener_arn of this CreateRuleInput.
        :rtype: str
        """
        return self._listener_arn

    @listener_arn.setter
    def listener_arn(self, listener_arn):
        """Sets the listener_arn of this CreateRuleInput.


        :param listener_arn: The listener_arn of this CreateRuleInput.
        :type listener_arn: str
        """
        if listener_arn is None:
            raise ValueError("Invalid value for `listener_arn`, must not be `None`")

        self._listener_arn = listener_arn

    @property
    def conditions(self):
        """Gets the conditions of this CreateRuleInput.


        :return: The conditions of this CreateRuleInput.
        :rtype: List
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this CreateRuleInput.


        :param conditions: The conditions of this CreateRuleInput.
        :type conditions: List
        """
        if conditions is None:
            raise ValueError("Invalid value for `conditions`, must not be `None`")

        self._conditions = conditions

    @property
    def priority(self):
        """Gets the priority of this CreateRuleInput.


        :return: The priority of this CreateRuleInput.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateRuleInput.


        :param priority: The priority of this CreateRuleInput.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def actions(self):
        """Gets the actions of this CreateRuleInput.


        :return: The actions of this CreateRuleInput.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CreateRuleInput.


        :param actions: The actions of this CreateRuleInput.
        :type actions: List
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def tags(self):
        """Gets the tags of this CreateRuleInput.


        :return: The tags of this CreateRuleInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRuleInput.


        :param tags: The tags of this CreateRuleInput.
        :type tags: List
        """

        self._tags = tags
