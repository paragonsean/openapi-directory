# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_address_type import IpAddressType
from openapi_server import util


class SetSubnetsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_balancer_arn: str=None, subnets: List=None, subnet_mappings: List=None, ip_address_type: IpAddressType=None):
        """SetSubnetsInput - a model defined in OpenAPI

        :param load_balancer_arn: The load_balancer_arn of this SetSubnetsInput.
        :param subnets: The subnets of this SetSubnetsInput.
        :param subnet_mappings: The subnet_mappings of this SetSubnetsInput.
        :param ip_address_type: The ip_address_type of this SetSubnetsInput.
        """
        self.openapi_types = {
            'load_balancer_arn': str,
            'subnets': List,
            'subnet_mappings': List,
            'ip_address_type': IpAddressType
        }

        self.attribute_map = {
            'load_balancer_arn': 'LoadBalancerArn',
            'subnets': 'Subnets',
            'subnet_mappings': 'SubnetMappings',
            'ip_address_type': 'IpAddressType'
        }

        self._load_balancer_arn = load_balancer_arn
        self._subnets = subnets
        self._subnet_mappings = subnet_mappings
        self._ip_address_type = ip_address_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetSubnetsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetSubnetsInput of this SetSubnetsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_balancer_arn(self):
        """Gets the load_balancer_arn of this SetSubnetsInput.


        :return: The load_balancer_arn of this SetSubnetsInput.
        :rtype: str
        """
        return self._load_balancer_arn

    @load_balancer_arn.setter
    def load_balancer_arn(self, load_balancer_arn):
        """Sets the load_balancer_arn of this SetSubnetsInput.


        :param load_balancer_arn: The load_balancer_arn of this SetSubnetsInput.
        :type load_balancer_arn: str
        """
        if load_balancer_arn is None:
            raise ValueError("Invalid value for `load_balancer_arn`, must not be `None`")

        self._load_balancer_arn = load_balancer_arn

    @property
    def subnets(self):
        """Gets the subnets of this SetSubnetsInput.


        :return: The subnets of this SetSubnetsInput.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this SetSubnetsInput.


        :param subnets: The subnets of this SetSubnetsInput.
        :type subnets: List
        """

        self._subnets = subnets

    @property
    def subnet_mappings(self):
        """Gets the subnet_mappings of this SetSubnetsInput.


        :return: The subnet_mappings of this SetSubnetsInput.
        :rtype: List
        """
        return self._subnet_mappings

    @subnet_mappings.setter
    def subnet_mappings(self, subnet_mappings):
        """Sets the subnet_mappings of this SetSubnetsInput.


        :param subnet_mappings: The subnet_mappings of this SetSubnetsInput.
        :type subnet_mappings: List
        """

        self._subnet_mappings = subnet_mappings

    @property
    def ip_address_type(self):
        """Gets the ip_address_type of this SetSubnetsInput.


        :return: The ip_address_type of this SetSubnetsInput.
        :rtype: IpAddressType
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type):
        """Sets the ip_address_type of this SetSubnetsInput.


        :param ip_address_type: The ip_address_type of this SetSubnetsInput.
        :type ip_address_type: IpAddressType
        """

        self._ip_address_type = ip_address_type
