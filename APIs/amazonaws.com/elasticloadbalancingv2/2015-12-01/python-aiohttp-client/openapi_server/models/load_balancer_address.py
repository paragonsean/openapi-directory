# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoadBalancerAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, allocation_id: str=None, private_ipv4_address: str=None, ipv6_address: str=None):
        """LoadBalancerAddress - a model defined in OpenAPI

        :param ip_address: The ip_address of this LoadBalancerAddress.
        :param allocation_id: The allocation_id of this LoadBalancerAddress.
        :param private_ipv4_address: The private_ipv4_address of this LoadBalancerAddress.
        :param ipv6_address: The ipv6_address of this LoadBalancerAddress.
        """
        self.openapi_types = {
            'ip_address': str,
            'allocation_id': str,
            'private_ipv4_address': str,
            'ipv6_address': str
        }

        self.attribute_map = {
            'ip_address': 'IpAddress',
            'allocation_id': 'AllocationId',
            'private_ipv4_address': 'PrivateIPv4Address',
            'ipv6_address': 'IPv6Address'
        }

        self._ip_address = ip_address
        self._allocation_id = allocation_id
        self._private_ipv4_address = private_ipv4_address
        self._ipv6_address = ipv6_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerAddress of this LoadBalancerAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this LoadBalancerAddress.


        :return: The ip_address of this LoadBalancerAddress.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this LoadBalancerAddress.


        :param ip_address: The ip_address of this LoadBalancerAddress.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def allocation_id(self):
        """Gets the allocation_id of this LoadBalancerAddress.


        :return: The allocation_id of this LoadBalancerAddress.
        :rtype: str
        """
        return self._allocation_id

    @allocation_id.setter
    def allocation_id(self, allocation_id):
        """Sets the allocation_id of this LoadBalancerAddress.


        :param allocation_id: The allocation_id of this LoadBalancerAddress.
        :type allocation_id: str
        """

        self._allocation_id = allocation_id

    @property
    def private_ipv4_address(self):
        """Gets the private_ipv4_address of this LoadBalancerAddress.


        :return: The private_ipv4_address of this LoadBalancerAddress.
        :rtype: str
        """
        return self._private_ipv4_address

    @private_ipv4_address.setter
    def private_ipv4_address(self, private_ipv4_address):
        """Sets the private_ipv4_address of this LoadBalancerAddress.


        :param private_ipv4_address: The private_ipv4_address of this LoadBalancerAddress.
        :type private_ipv4_address: str
        """

        self._private_ipv4_address = private_ipv4_address

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this LoadBalancerAddress.


        :return: The ipv6_address of this LoadBalancerAddress.
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this LoadBalancerAddress.


        :param ipv6_address: The ipv6_address of this LoadBalancerAddress.
        :type ipv6_address: str
        """

        self._ipv6_address = ipv6_address
