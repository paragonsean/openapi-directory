# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoveTagsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arns: List=None, tag_keys: List=None):
        """RemoveTagsInput - a model defined in OpenAPI

        :param resource_arns: The resource_arns of this RemoveTagsInput.
        :param tag_keys: The tag_keys of this RemoveTagsInput.
        """
        self.openapi_types = {
            'resource_arns': List,
            'tag_keys': List
        }

        self.attribute_map = {
            'resource_arns': 'ResourceArns',
            'tag_keys': 'TagKeys'
        }

        self._resource_arns = resource_arns
        self._tag_keys = tag_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveTagsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveTagsInput of this RemoveTagsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arns(self):
        """Gets the resource_arns of this RemoveTagsInput.


        :return: The resource_arns of this RemoveTagsInput.
        :rtype: List
        """
        return self._resource_arns

    @resource_arns.setter
    def resource_arns(self, resource_arns):
        """Sets the resource_arns of this RemoveTagsInput.


        :param resource_arns: The resource_arns of this RemoveTagsInput.
        :type resource_arns: List
        """
        if resource_arns is None:
            raise ValueError("Invalid value for `resource_arns`, must not be `None`")

        self._resource_arns = resource_arns

    @property
    def tag_keys(self):
        """Gets the tag_keys of this RemoveTagsInput.


        :return: The tag_keys of this RemoveTagsInput.
        :rtype: List
        """
        return self._tag_keys

    @tag_keys.setter
    def tag_keys(self, tag_keys):
        """Sets the tag_keys of this RemoveTagsInput.


        :param tag_keys: The tag_keys of this RemoveTagsInput.
        :type tag_keys: List
        """
        if tag_keys is None:
            raise ValueError("Invalid value for `tag_keys`, must not be `None`")

        self._tag_keys = tag_keys
