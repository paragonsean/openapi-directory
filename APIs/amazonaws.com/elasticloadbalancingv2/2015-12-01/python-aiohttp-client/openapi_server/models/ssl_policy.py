# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SslPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ssl_protocols: List=None, ciphers: List=None, name: str=None, supported_load_balancer_types: List=None):
        """SslPolicy - a model defined in OpenAPI

        :param ssl_protocols: The ssl_protocols of this SslPolicy.
        :param ciphers: The ciphers of this SslPolicy.
        :param name: The name of this SslPolicy.
        :param supported_load_balancer_types: The supported_load_balancer_types of this SslPolicy.
        """
        self.openapi_types = {
            'ssl_protocols': List,
            'ciphers': List,
            'name': str,
            'supported_load_balancer_types': List
        }

        self.attribute_map = {
            'ssl_protocols': 'SslProtocols',
            'ciphers': 'Ciphers',
            'name': 'Name',
            'supported_load_balancer_types': 'SupportedLoadBalancerTypes'
        }

        self._ssl_protocols = ssl_protocols
        self._ciphers = ciphers
        self._name = name
        self._supported_load_balancer_types = supported_load_balancer_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SslPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SslPolicy of this SslPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ssl_protocols(self):
        """Gets the ssl_protocols of this SslPolicy.


        :return: The ssl_protocols of this SslPolicy.
        :rtype: List
        """
        return self._ssl_protocols

    @ssl_protocols.setter
    def ssl_protocols(self, ssl_protocols):
        """Sets the ssl_protocols of this SslPolicy.


        :param ssl_protocols: The ssl_protocols of this SslPolicy.
        :type ssl_protocols: List
        """

        self._ssl_protocols = ssl_protocols

    @property
    def ciphers(self):
        """Gets the ciphers of this SslPolicy.


        :return: The ciphers of this SslPolicy.
        :rtype: List
        """
        return self._ciphers

    @ciphers.setter
    def ciphers(self, ciphers):
        """Sets the ciphers of this SslPolicy.


        :param ciphers: The ciphers of this SslPolicy.
        :type ciphers: List
        """

        self._ciphers = ciphers

    @property
    def name(self):
        """Gets the name of this SslPolicy.


        :return: The name of this SslPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SslPolicy.


        :param name: The name of this SslPolicy.
        :type name: str
        """

        self._name = name

    @property
    def supported_load_balancer_types(self):
        """Gets the supported_load_balancer_types of this SslPolicy.


        :return: The supported_load_balancer_types of this SslPolicy.
        :rtype: List
        """
        return self._supported_load_balancer_types

    @supported_load_balancer_types.setter
    def supported_load_balancer_types(self, supported_load_balancer_types):
        """Sets the supported_load_balancer_types of this SslPolicy.


        :param supported_load_balancer_types: The supported_load_balancer_types of this SslPolicy.
        :type supported_load_balancer_types: List
        """

        self._supported_load_balancer_types = supported_load_balancer_types
