# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protocol_enum import ProtocolEnum
from openapi_server import util


class CreateListenerInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_balancer_arn: str=None, protocol: ProtocolEnum=None, port: int=None, ssl_policy: str=None, certificates: List=None, default_actions: List=None, alpn_policy: List=None, tags: List=None):
        """CreateListenerInput - a model defined in OpenAPI

        :param load_balancer_arn: The load_balancer_arn of this CreateListenerInput.
        :param protocol: The protocol of this CreateListenerInput.
        :param port: The port of this CreateListenerInput.
        :param ssl_policy: The ssl_policy of this CreateListenerInput.
        :param certificates: The certificates of this CreateListenerInput.
        :param default_actions: The default_actions of this CreateListenerInput.
        :param alpn_policy: The alpn_policy of this CreateListenerInput.
        :param tags: The tags of this CreateListenerInput.
        """
        self.openapi_types = {
            'load_balancer_arn': str,
            'protocol': ProtocolEnum,
            'port': int,
            'ssl_policy': str,
            'certificates': List,
            'default_actions': List,
            'alpn_policy': List,
            'tags': List
        }

        self.attribute_map = {
            'load_balancer_arn': 'LoadBalancerArn',
            'protocol': 'Protocol',
            'port': 'Port',
            'ssl_policy': 'SslPolicy',
            'certificates': 'Certificates',
            'default_actions': 'DefaultActions',
            'alpn_policy': 'AlpnPolicy',
            'tags': 'Tags'
        }

        self._load_balancer_arn = load_balancer_arn
        self._protocol = protocol
        self._port = port
        self._ssl_policy = ssl_policy
        self._certificates = certificates
        self._default_actions = default_actions
        self._alpn_policy = alpn_policy
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateListenerInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateListenerInput of this CreateListenerInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_balancer_arn(self):
        """Gets the load_balancer_arn of this CreateListenerInput.


        :return: The load_balancer_arn of this CreateListenerInput.
        :rtype: str
        """
        return self._load_balancer_arn

    @load_balancer_arn.setter
    def load_balancer_arn(self, load_balancer_arn):
        """Sets the load_balancer_arn of this CreateListenerInput.


        :param load_balancer_arn: The load_balancer_arn of this CreateListenerInput.
        :type load_balancer_arn: str
        """
        if load_balancer_arn is None:
            raise ValueError("Invalid value for `load_balancer_arn`, must not be `None`")

        self._load_balancer_arn = load_balancer_arn

    @property
    def protocol(self):
        """Gets the protocol of this CreateListenerInput.


        :return: The protocol of this CreateListenerInput.
        :rtype: ProtocolEnum
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CreateListenerInput.


        :param protocol: The protocol of this CreateListenerInput.
        :type protocol: ProtocolEnum
        """

        self._protocol = protocol

    @property
    def port(self):
        """Gets the port of this CreateListenerInput.


        :return: The port of this CreateListenerInput.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateListenerInput.


        :param port: The port of this CreateListenerInput.
        :type port: int
        """

        self._port = port

    @property
    def ssl_policy(self):
        """Gets the ssl_policy of this CreateListenerInput.


        :return: The ssl_policy of this CreateListenerInput.
        :rtype: str
        """
        return self._ssl_policy

    @ssl_policy.setter
    def ssl_policy(self, ssl_policy):
        """Sets the ssl_policy of this CreateListenerInput.


        :param ssl_policy: The ssl_policy of this CreateListenerInput.
        :type ssl_policy: str
        """

        self._ssl_policy = ssl_policy

    @property
    def certificates(self):
        """Gets the certificates of this CreateListenerInput.


        :return: The certificates of this CreateListenerInput.
        :rtype: List
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this CreateListenerInput.


        :param certificates: The certificates of this CreateListenerInput.
        :type certificates: List
        """

        self._certificates = certificates

    @property
    def default_actions(self):
        """Gets the default_actions of this CreateListenerInput.


        :return: The default_actions of this CreateListenerInput.
        :rtype: List
        """
        return self._default_actions

    @default_actions.setter
    def default_actions(self, default_actions):
        """Sets the default_actions of this CreateListenerInput.


        :param default_actions: The default_actions of this CreateListenerInput.
        :type default_actions: List
        """
        if default_actions is None:
            raise ValueError("Invalid value for `default_actions`, must not be `None`")

        self._default_actions = default_actions

    @property
    def alpn_policy(self):
        """Gets the alpn_policy of this CreateListenerInput.


        :return: The alpn_policy of this CreateListenerInput.
        :rtype: List
        """
        return self._alpn_policy

    @alpn_policy.setter
    def alpn_policy(self, alpn_policy):
        """Sets the alpn_policy of this CreateListenerInput.


        :param alpn_policy: The alpn_policy of this CreateListenerInput.
        :type alpn_policy: List
        """

        self._alpn_policy = alpn_policy

    @property
    def tags(self):
        """Gets the tags of this CreateListenerInput.


        :return: The tags of this CreateListenerInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateListenerInput.


        :param tags: The tags of this CreateListenerInput.
        :type tags: List
        """

        self._tags = tags
