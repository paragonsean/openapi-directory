# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeRulesOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rules: List=None, next_marker: str=None):
        """DescribeRulesOutput - a model defined in OpenAPI

        :param rules: The rules of this DescribeRulesOutput.
        :param next_marker: The next_marker of this DescribeRulesOutput.
        """
        self.openapi_types = {
            'rules': List,
            'next_marker': str
        }

        self.attribute_map = {
            'rules': 'Rules',
            'next_marker': 'NextMarker'
        }

        self._rules = rules
        self._next_marker = next_marker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeRulesOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeRulesOutput of this DescribeRulesOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rules(self):
        """Gets the rules of this DescribeRulesOutput.


        :return: The rules of this DescribeRulesOutput.
        :rtype: List
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this DescribeRulesOutput.


        :param rules: The rules of this DescribeRulesOutput.
        :type rules: List
        """

        self._rules = rules

    @property
    def next_marker(self):
        """Gets the next_marker of this DescribeRulesOutput.


        :return: The next_marker of this DescribeRulesOutput.
        :rtype: str
        """
        return self._next_marker

    @next_marker.setter
    def next_marker(self, next_marker):
        """Sets the next_marker of this DescribeRulesOutput.


        :param next_marker: The next_marker of this DescribeRulesOutput.
        :type next_marker: str
        """

        self._next_marker = next_marker
