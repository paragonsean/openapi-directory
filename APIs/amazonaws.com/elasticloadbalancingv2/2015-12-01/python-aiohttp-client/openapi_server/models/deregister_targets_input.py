# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeregisterTargetsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_group_arn: str=None, targets: List=None):
        """DeregisterTargetsInput - a model defined in OpenAPI

        :param target_group_arn: The target_group_arn of this DeregisterTargetsInput.
        :param targets: The targets of this DeregisterTargetsInput.
        """
        self.openapi_types = {
            'target_group_arn': str,
            'targets': List
        }

        self.attribute_map = {
            'target_group_arn': 'TargetGroupArn',
            'targets': 'Targets'
        }

        self._target_group_arn = target_group_arn
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeregisterTargetsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeregisterTargetsInput of this DeregisterTargetsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_group_arn(self):
        """Gets the target_group_arn of this DeregisterTargetsInput.


        :return: The target_group_arn of this DeregisterTargetsInput.
        :rtype: str
        """
        return self._target_group_arn

    @target_group_arn.setter
    def target_group_arn(self, target_group_arn):
        """Sets the target_group_arn of this DeregisterTargetsInput.


        :param target_group_arn: The target_group_arn of this DeregisterTargetsInput.
        :type target_group_arn: str
        """
        if target_group_arn is None:
            raise ValueError("Invalid value for `target_group_arn`, must not be `None`")

        self._target_group_arn = target_group_arn

    @property
    def targets(self):
        """Gets the targets of this DeregisterTargetsInput.


        :return: The targets of this DeregisterTargetsInput.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this DeregisterTargetsInput.


        :param targets: The targets of this DeregisterTargetsInput.
        :type targets: List
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets
