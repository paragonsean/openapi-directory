# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authenticate_cognito_action_conditional_behavior_enum import AuthenticateCognitoActionConditionalBehaviorEnum
from openapi_server import util


class AuthenticateCognitoActionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_arn: str=None, user_pool_client_id: str=None, user_pool_domain: str=None, session_cookie_name: str=None, scope: str=None, session_timeout: int=None, authentication_request_extra_params: Dict=None, on_unauthenticated_request: AuthenticateCognitoActionConditionalBehaviorEnum=None):
        """AuthenticateCognitoActionConfig - a model defined in OpenAPI

        :param user_pool_arn: The user_pool_arn of this AuthenticateCognitoActionConfig.
        :param user_pool_client_id: The user_pool_client_id of this AuthenticateCognitoActionConfig.
        :param user_pool_domain: The user_pool_domain of this AuthenticateCognitoActionConfig.
        :param session_cookie_name: The session_cookie_name of this AuthenticateCognitoActionConfig.
        :param scope: The scope of this AuthenticateCognitoActionConfig.
        :param session_timeout: The session_timeout of this AuthenticateCognitoActionConfig.
        :param authentication_request_extra_params: The authentication_request_extra_params of this AuthenticateCognitoActionConfig.
        :param on_unauthenticated_request: The on_unauthenticated_request of this AuthenticateCognitoActionConfig.
        """
        self.openapi_types = {
            'user_pool_arn': str,
            'user_pool_client_id': str,
            'user_pool_domain': str,
            'session_cookie_name': str,
            'scope': str,
            'session_timeout': int,
            'authentication_request_extra_params': Dict,
            'on_unauthenticated_request': AuthenticateCognitoActionConditionalBehaviorEnum
        }

        self.attribute_map = {
            'user_pool_arn': 'UserPoolArn',
            'user_pool_client_id': 'UserPoolClientId',
            'user_pool_domain': 'UserPoolDomain',
            'session_cookie_name': 'SessionCookieName',
            'scope': 'Scope',
            'session_timeout': 'SessionTimeout',
            'authentication_request_extra_params': 'AuthenticationRequestExtraParams',
            'on_unauthenticated_request': 'OnUnauthenticatedRequest'
        }

        self._user_pool_arn = user_pool_arn
        self._user_pool_client_id = user_pool_client_id
        self._user_pool_domain = user_pool_domain
        self._session_cookie_name = session_cookie_name
        self._scope = scope
        self._session_timeout = session_timeout
        self._authentication_request_extra_params = authentication_request_extra_params
        self._on_unauthenticated_request = on_unauthenticated_request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticateCognitoActionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticateCognitoActionConfig of this AuthenticateCognitoActionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_arn(self):
        """Gets the user_pool_arn of this AuthenticateCognitoActionConfig.


        :return: The user_pool_arn of this AuthenticateCognitoActionConfig.
        :rtype: str
        """
        return self._user_pool_arn

    @user_pool_arn.setter
    def user_pool_arn(self, user_pool_arn):
        """Sets the user_pool_arn of this AuthenticateCognitoActionConfig.


        :param user_pool_arn: The user_pool_arn of this AuthenticateCognitoActionConfig.
        :type user_pool_arn: str
        """
        if user_pool_arn is None:
            raise ValueError("Invalid value for `user_pool_arn`, must not be `None`")

        self._user_pool_arn = user_pool_arn

    @property
    def user_pool_client_id(self):
        """Gets the user_pool_client_id of this AuthenticateCognitoActionConfig.


        :return: The user_pool_client_id of this AuthenticateCognitoActionConfig.
        :rtype: str
        """
        return self._user_pool_client_id

    @user_pool_client_id.setter
    def user_pool_client_id(self, user_pool_client_id):
        """Sets the user_pool_client_id of this AuthenticateCognitoActionConfig.


        :param user_pool_client_id: The user_pool_client_id of this AuthenticateCognitoActionConfig.
        :type user_pool_client_id: str
        """
        if user_pool_client_id is None:
            raise ValueError("Invalid value for `user_pool_client_id`, must not be `None`")

        self._user_pool_client_id = user_pool_client_id

    @property
    def user_pool_domain(self):
        """Gets the user_pool_domain of this AuthenticateCognitoActionConfig.


        :return: The user_pool_domain of this AuthenticateCognitoActionConfig.
        :rtype: str
        """
        return self._user_pool_domain

    @user_pool_domain.setter
    def user_pool_domain(self, user_pool_domain):
        """Sets the user_pool_domain of this AuthenticateCognitoActionConfig.


        :param user_pool_domain: The user_pool_domain of this AuthenticateCognitoActionConfig.
        :type user_pool_domain: str
        """
        if user_pool_domain is None:
            raise ValueError("Invalid value for `user_pool_domain`, must not be `None`")

        self._user_pool_domain = user_pool_domain

    @property
    def session_cookie_name(self):
        """Gets the session_cookie_name of this AuthenticateCognitoActionConfig.


        :return: The session_cookie_name of this AuthenticateCognitoActionConfig.
        :rtype: str
        """
        return self._session_cookie_name

    @session_cookie_name.setter
    def session_cookie_name(self, session_cookie_name):
        """Sets the session_cookie_name of this AuthenticateCognitoActionConfig.


        :param session_cookie_name: The session_cookie_name of this AuthenticateCognitoActionConfig.
        :type session_cookie_name: str
        """

        self._session_cookie_name = session_cookie_name

    @property
    def scope(self):
        """Gets the scope of this AuthenticateCognitoActionConfig.


        :return: The scope of this AuthenticateCognitoActionConfig.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AuthenticateCognitoActionConfig.


        :param scope: The scope of this AuthenticateCognitoActionConfig.
        :type scope: str
        """

        self._scope = scope

    @property
    def session_timeout(self):
        """Gets the session_timeout of this AuthenticateCognitoActionConfig.


        :return: The session_timeout of this AuthenticateCognitoActionConfig.
        :rtype: int
        """
        return self._session_timeout

    @session_timeout.setter
    def session_timeout(self, session_timeout):
        """Sets the session_timeout of this AuthenticateCognitoActionConfig.


        :param session_timeout: The session_timeout of this AuthenticateCognitoActionConfig.
        :type session_timeout: int
        """

        self._session_timeout = session_timeout

    @property
    def authentication_request_extra_params(self):
        """Gets the authentication_request_extra_params of this AuthenticateCognitoActionConfig.


        :return: The authentication_request_extra_params of this AuthenticateCognitoActionConfig.
        :rtype: Dict
        """
        return self._authentication_request_extra_params

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, authentication_request_extra_params):
        """Sets the authentication_request_extra_params of this AuthenticateCognitoActionConfig.


        :param authentication_request_extra_params: The authentication_request_extra_params of this AuthenticateCognitoActionConfig.
        :type authentication_request_extra_params: Dict
        """

        self._authentication_request_extra_params = authentication_request_extra_params

    @property
    def on_unauthenticated_request(self):
        """Gets the on_unauthenticated_request of this AuthenticateCognitoActionConfig.


        :return: The on_unauthenticated_request of this AuthenticateCognitoActionConfig.
        :rtype: AuthenticateCognitoActionConditionalBehaviorEnum
        """
        return self._on_unauthenticated_request

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, on_unauthenticated_request):
        """Sets the on_unauthenticated_request of this AuthenticateCognitoActionConfig.


        :param on_unauthenticated_request: The on_unauthenticated_request of this AuthenticateCognitoActionConfig.
        :type on_unauthenticated_request: AuthenticateCognitoActionConditionalBehaviorEnum
        """

        self._on_unauthenticated_request = on_unauthenticated_request
