# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModifyRuleInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_arn: str=None, conditions: List=None, actions: List=None):
        """ModifyRuleInput - a model defined in OpenAPI

        :param rule_arn: The rule_arn of this ModifyRuleInput.
        :param conditions: The conditions of this ModifyRuleInput.
        :param actions: The actions of this ModifyRuleInput.
        """
        self.openapi_types = {
            'rule_arn': str,
            'conditions': List,
            'actions': List
        }

        self.attribute_map = {
            'rule_arn': 'RuleArn',
            'conditions': 'Conditions',
            'actions': 'Actions'
        }

        self._rule_arn = rule_arn
        self._conditions = conditions
        self._actions = actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifyRuleInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifyRuleInput of this ModifyRuleInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_arn(self):
        """Gets the rule_arn of this ModifyRuleInput.


        :return: The rule_arn of this ModifyRuleInput.
        :rtype: str
        """
        return self._rule_arn

    @rule_arn.setter
    def rule_arn(self, rule_arn):
        """Sets the rule_arn of this ModifyRuleInput.


        :param rule_arn: The rule_arn of this ModifyRuleInput.
        :type rule_arn: str
        """
        if rule_arn is None:
            raise ValueError("Invalid value for `rule_arn`, must not be `None`")

        self._rule_arn = rule_arn

    @property
    def conditions(self):
        """Gets the conditions of this ModifyRuleInput.


        :return: The conditions of this ModifyRuleInput.
        :rtype: List
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ModifyRuleInput.


        :param conditions: The conditions of this ModifyRuleInput.
        :type conditions: List
        """

        self._conditions = conditions

    @property
    def actions(self):
        """Gets the actions of this ModifyRuleInput.


        :return: The actions of this ModifyRuleInput.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ModifyRuleInput.


        :param actions: The actions of this ModifyRuleInput.
        :type actions: List
        """

        self._actions = actions
