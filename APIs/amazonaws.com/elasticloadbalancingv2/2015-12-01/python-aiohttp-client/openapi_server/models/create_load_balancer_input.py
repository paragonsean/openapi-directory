# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_address_type import IpAddressType
from openapi_server.models.load_balancer_scheme_enum import LoadBalancerSchemeEnum
from openapi_server.models.load_balancer_type_enum import LoadBalancerTypeEnum
from openapi_server import util


class CreateLoadBalancerInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, subnets: List=None, subnet_mappings: List=None, security_groups: List=None, scheme: LoadBalancerSchemeEnum=None, tags: List=None, type: LoadBalancerTypeEnum=None, ip_address_type: IpAddressType=None, customer_owned_ipv4_pool: str=None):
        """CreateLoadBalancerInput - a model defined in OpenAPI

        :param name: The name of this CreateLoadBalancerInput.
        :param subnets: The subnets of this CreateLoadBalancerInput.
        :param subnet_mappings: The subnet_mappings of this CreateLoadBalancerInput.
        :param security_groups: The security_groups of this CreateLoadBalancerInput.
        :param scheme: The scheme of this CreateLoadBalancerInput.
        :param tags: The tags of this CreateLoadBalancerInput.
        :param type: The type of this CreateLoadBalancerInput.
        :param ip_address_type: The ip_address_type of this CreateLoadBalancerInput.
        :param customer_owned_ipv4_pool: The customer_owned_ipv4_pool of this CreateLoadBalancerInput.
        """
        self.openapi_types = {
            'name': str,
            'subnets': List,
            'subnet_mappings': List,
            'security_groups': List,
            'scheme': LoadBalancerSchemeEnum,
            'tags': List,
            'type': LoadBalancerTypeEnum,
            'ip_address_type': IpAddressType,
            'customer_owned_ipv4_pool': str
        }

        self.attribute_map = {
            'name': 'Name',
            'subnets': 'Subnets',
            'subnet_mappings': 'SubnetMappings',
            'security_groups': 'SecurityGroups',
            'scheme': 'Scheme',
            'tags': 'Tags',
            'type': 'Type',
            'ip_address_type': 'IpAddressType',
            'customer_owned_ipv4_pool': 'CustomerOwnedIpv4Pool'
        }

        self._name = name
        self._subnets = subnets
        self._subnet_mappings = subnet_mappings
        self._security_groups = security_groups
        self._scheme = scheme
        self._tags = tags
        self._type = type
        self._ip_address_type = ip_address_type
        self._customer_owned_ipv4_pool = customer_owned_ipv4_pool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLoadBalancerInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLoadBalancerInput of this CreateLoadBalancerInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateLoadBalancerInput.


        :return: The name of this CreateLoadBalancerInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLoadBalancerInput.


        :param name: The name of this CreateLoadBalancerInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def subnets(self):
        """Gets the subnets of this CreateLoadBalancerInput.


        :return: The subnets of this CreateLoadBalancerInput.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this CreateLoadBalancerInput.


        :param subnets: The subnets of this CreateLoadBalancerInput.
        :type subnets: List
        """

        self._subnets = subnets

    @property
    def subnet_mappings(self):
        """Gets the subnet_mappings of this CreateLoadBalancerInput.


        :return: The subnet_mappings of this CreateLoadBalancerInput.
        :rtype: List
        """
        return self._subnet_mappings

    @subnet_mappings.setter
    def subnet_mappings(self, subnet_mappings):
        """Sets the subnet_mappings of this CreateLoadBalancerInput.


        :param subnet_mappings: The subnet_mappings of this CreateLoadBalancerInput.
        :type subnet_mappings: List
        """

        self._subnet_mappings = subnet_mappings

    @property
    def security_groups(self):
        """Gets the security_groups of this CreateLoadBalancerInput.


        :return: The security_groups of this CreateLoadBalancerInput.
        :rtype: List
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this CreateLoadBalancerInput.


        :param security_groups: The security_groups of this CreateLoadBalancerInput.
        :type security_groups: List
        """

        self._security_groups = security_groups

    @property
    def scheme(self):
        """Gets the scheme of this CreateLoadBalancerInput.


        :return: The scheme of this CreateLoadBalancerInput.
        :rtype: LoadBalancerSchemeEnum
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this CreateLoadBalancerInput.


        :param scheme: The scheme of this CreateLoadBalancerInput.
        :type scheme: LoadBalancerSchemeEnum
        """

        self._scheme = scheme

    @property
    def tags(self):
        """Gets the tags of this CreateLoadBalancerInput.


        :return: The tags of this CreateLoadBalancerInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLoadBalancerInput.


        :param tags: The tags of this CreateLoadBalancerInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this CreateLoadBalancerInput.


        :return: The type of this CreateLoadBalancerInput.
        :rtype: LoadBalancerTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateLoadBalancerInput.


        :param type: The type of this CreateLoadBalancerInput.
        :type type: LoadBalancerTypeEnum
        """

        self._type = type

    @property
    def ip_address_type(self):
        """Gets the ip_address_type of this CreateLoadBalancerInput.


        :return: The ip_address_type of this CreateLoadBalancerInput.
        :rtype: IpAddressType
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type):
        """Sets the ip_address_type of this CreateLoadBalancerInput.


        :param ip_address_type: The ip_address_type of this CreateLoadBalancerInput.
        :type ip_address_type: IpAddressType
        """

        self._ip_address_type = ip_address_type

    @property
    def customer_owned_ipv4_pool(self):
        """Gets the customer_owned_ipv4_pool of this CreateLoadBalancerInput.


        :return: The customer_owned_ipv4_pool of this CreateLoadBalancerInput.
        :rtype: str
        """
        return self._customer_owned_ipv4_pool

    @customer_owned_ipv4_pool.setter
    def customer_owned_ipv4_pool(self, customer_owned_ipv4_pool):
        """Sets the customer_owned_ipv4_pool of this CreateLoadBalancerInput.


        :param customer_owned_ipv4_pool: The customer_owned_ipv4_pool of this CreateLoadBalancerInput.
        :type customer_owned_ipv4_pool: str
        """

        self._customer_owned_ipv4_pool = customer_owned_ipv4_pool
