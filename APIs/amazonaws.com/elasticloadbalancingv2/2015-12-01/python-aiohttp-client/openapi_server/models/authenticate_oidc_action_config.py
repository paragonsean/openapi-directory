# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authenticate_oidc_action_conditional_behavior_enum import AuthenticateOidcActionConditionalBehaviorEnum
from openapi_server import util


class AuthenticateOidcActionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issuer: str=None, authorization_endpoint: str=None, token_endpoint: str=None, user_info_endpoint: str=None, client_id: str=None, client_secret: str=None, session_cookie_name: str=None, scope: str=None, session_timeout: int=None, authentication_request_extra_params: Dict=None, on_unauthenticated_request: AuthenticateOidcActionConditionalBehaviorEnum=None, use_existing_client_secret: bool=None):
        """AuthenticateOidcActionConfig - a model defined in OpenAPI

        :param issuer: The issuer of this AuthenticateOidcActionConfig.
        :param authorization_endpoint: The authorization_endpoint of this AuthenticateOidcActionConfig.
        :param token_endpoint: The token_endpoint of this AuthenticateOidcActionConfig.
        :param user_info_endpoint: The user_info_endpoint of this AuthenticateOidcActionConfig.
        :param client_id: The client_id of this AuthenticateOidcActionConfig.
        :param client_secret: The client_secret of this AuthenticateOidcActionConfig.
        :param session_cookie_name: The session_cookie_name of this AuthenticateOidcActionConfig.
        :param scope: The scope of this AuthenticateOidcActionConfig.
        :param session_timeout: The session_timeout of this AuthenticateOidcActionConfig.
        :param authentication_request_extra_params: The authentication_request_extra_params of this AuthenticateOidcActionConfig.
        :param on_unauthenticated_request: The on_unauthenticated_request of this AuthenticateOidcActionConfig.
        :param use_existing_client_secret: The use_existing_client_secret of this AuthenticateOidcActionConfig.
        """
        self.openapi_types = {
            'issuer': str,
            'authorization_endpoint': str,
            'token_endpoint': str,
            'user_info_endpoint': str,
            'client_id': str,
            'client_secret': str,
            'session_cookie_name': str,
            'scope': str,
            'session_timeout': int,
            'authentication_request_extra_params': Dict,
            'on_unauthenticated_request': AuthenticateOidcActionConditionalBehaviorEnum,
            'use_existing_client_secret': bool
        }

        self.attribute_map = {
            'issuer': 'Issuer',
            'authorization_endpoint': 'AuthorizationEndpoint',
            'token_endpoint': 'TokenEndpoint',
            'user_info_endpoint': 'UserInfoEndpoint',
            'client_id': 'ClientId',
            'client_secret': 'ClientSecret',
            'session_cookie_name': 'SessionCookieName',
            'scope': 'Scope',
            'session_timeout': 'SessionTimeout',
            'authentication_request_extra_params': 'AuthenticationRequestExtraParams',
            'on_unauthenticated_request': 'OnUnauthenticatedRequest',
            'use_existing_client_secret': 'UseExistingClientSecret'
        }

        self._issuer = issuer
        self._authorization_endpoint = authorization_endpoint
        self._token_endpoint = token_endpoint
        self._user_info_endpoint = user_info_endpoint
        self._client_id = client_id
        self._client_secret = client_secret
        self._session_cookie_name = session_cookie_name
        self._scope = scope
        self._session_timeout = session_timeout
        self._authentication_request_extra_params = authentication_request_extra_params
        self._on_unauthenticated_request = on_unauthenticated_request
        self._use_existing_client_secret = use_existing_client_secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticateOidcActionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticateOidcActionConfig of this AuthenticateOidcActionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer(self):
        """Gets the issuer of this AuthenticateOidcActionConfig.


        :return: The issuer of this AuthenticateOidcActionConfig.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this AuthenticateOidcActionConfig.


        :param issuer: The issuer of this AuthenticateOidcActionConfig.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this AuthenticateOidcActionConfig.


        :return: The authorization_endpoint of this AuthenticateOidcActionConfig.
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this AuthenticateOidcActionConfig.


        :param authorization_endpoint: The authorization_endpoint of this AuthenticateOidcActionConfig.
        :type authorization_endpoint: str
        """
        if authorization_endpoint is None:
            raise ValueError("Invalid value for `authorization_endpoint`, must not be `None`")

        self._authorization_endpoint = authorization_endpoint

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this AuthenticateOidcActionConfig.


        :return: The token_endpoint of this AuthenticateOidcActionConfig.
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this AuthenticateOidcActionConfig.


        :param token_endpoint: The token_endpoint of this AuthenticateOidcActionConfig.
        :type token_endpoint: str
        """
        if token_endpoint is None:
            raise ValueError("Invalid value for `token_endpoint`, must not be `None`")

        self._token_endpoint = token_endpoint

    @property
    def user_info_endpoint(self):
        """Gets the user_info_endpoint of this AuthenticateOidcActionConfig.


        :return: The user_info_endpoint of this AuthenticateOidcActionConfig.
        :rtype: str
        """
        return self._user_info_endpoint

    @user_info_endpoint.setter
    def user_info_endpoint(self, user_info_endpoint):
        """Sets the user_info_endpoint of this AuthenticateOidcActionConfig.


        :param user_info_endpoint: The user_info_endpoint of this AuthenticateOidcActionConfig.
        :type user_info_endpoint: str
        """
        if user_info_endpoint is None:
            raise ValueError("Invalid value for `user_info_endpoint`, must not be `None`")

        self._user_info_endpoint = user_info_endpoint

    @property
    def client_id(self):
        """Gets the client_id of this AuthenticateOidcActionConfig.


        :return: The client_id of this AuthenticateOidcActionConfig.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AuthenticateOidcActionConfig.


        :param client_id: The client_id of this AuthenticateOidcActionConfig.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this AuthenticateOidcActionConfig.


        :return: The client_secret of this AuthenticateOidcActionConfig.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this AuthenticateOidcActionConfig.


        :param client_secret: The client_secret of this AuthenticateOidcActionConfig.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def session_cookie_name(self):
        """Gets the session_cookie_name of this AuthenticateOidcActionConfig.


        :return: The session_cookie_name of this AuthenticateOidcActionConfig.
        :rtype: str
        """
        return self._session_cookie_name

    @session_cookie_name.setter
    def session_cookie_name(self, session_cookie_name):
        """Sets the session_cookie_name of this AuthenticateOidcActionConfig.


        :param session_cookie_name: The session_cookie_name of this AuthenticateOidcActionConfig.
        :type session_cookie_name: str
        """

        self._session_cookie_name = session_cookie_name

    @property
    def scope(self):
        """Gets the scope of this AuthenticateOidcActionConfig.


        :return: The scope of this AuthenticateOidcActionConfig.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AuthenticateOidcActionConfig.


        :param scope: The scope of this AuthenticateOidcActionConfig.
        :type scope: str
        """

        self._scope = scope

    @property
    def session_timeout(self):
        """Gets the session_timeout of this AuthenticateOidcActionConfig.


        :return: The session_timeout of this AuthenticateOidcActionConfig.
        :rtype: int
        """
        return self._session_timeout

    @session_timeout.setter
    def session_timeout(self, session_timeout):
        """Sets the session_timeout of this AuthenticateOidcActionConfig.


        :param session_timeout: The session_timeout of this AuthenticateOidcActionConfig.
        :type session_timeout: int
        """

        self._session_timeout = session_timeout

    @property
    def authentication_request_extra_params(self):
        """Gets the authentication_request_extra_params of this AuthenticateOidcActionConfig.


        :return: The authentication_request_extra_params of this AuthenticateOidcActionConfig.
        :rtype: Dict
        """
        return self._authentication_request_extra_params

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, authentication_request_extra_params):
        """Sets the authentication_request_extra_params of this AuthenticateOidcActionConfig.


        :param authentication_request_extra_params: The authentication_request_extra_params of this AuthenticateOidcActionConfig.
        :type authentication_request_extra_params: Dict
        """

        self._authentication_request_extra_params = authentication_request_extra_params

    @property
    def on_unauthenticated_request(self):
        """Gets the on_unauthenticated_request of this AuthenticateOidcActionConfig.


        :return: The on_unauthenticated_request of this AuthenticateOidcActionConfig.
        :rtype: AuthenticateOidcActionConditionalBehaviorEnum
        """
        return self._on_unauthenticated_request

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, on_unauthenticated_request):
        """Sets the on_unauthenticated_request of this AuthenticateOidcActionConfig.


        :param on_unauthenticated_request: The on_unauthenticated_request of this AuthenticateOidcActionConfig.
        :type on_unauthenticated_request: AuthenticateOidcActionConditionalBehaviorEnum
        """

        self._on_unauthenticated_request = on_unauthenticated_request

    @property
    def use_existing_client_secret(self):
        """Gets the use_existing_client_secret of this AuthenticateOidcActionConfig.


        :return: The use_existing_client_secret of this AuthenticateOidcActionConfig.
        :rtype: bool
        """
        return self._use_existing_client_secret

    @use_existing_client_secret.setter
    def use_existing_client_secret(self, use_existing_client_secret):
        """Sets the use_existing_client_secret of this AuthenticateOidcActionConfig.


        :param use_existing_client_secret: The use_existing_client_secret of this AuthenticateOidcActionConfig.
        :type use_existing_client_secret: bool
        """

        self._use_existing_client_secret = use_existing_client_secret
