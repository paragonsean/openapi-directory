# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetHealthDescriptionTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, port: int=None, availability_zone: str=None):
        """TargetHealthDescriptionTarget - a model defined in OpenAPI

        :param id: The id of this TargetHealthDescriptionTarget.
        :param port: The port of this TargetHealthDescriptionTarget.
        :param availability_zone: The availability_zone of this TargetHealthDescriptionTarget.
        """
        self.openapi_types = {
            'id': str,
            'port': int,
            'availability_zone': str
        }

        self.attribute_map = {
            'id': 'Id',
            'port': 'Port',
            'availability_zone': 'AvailabilityZone'
        }

        self._id = id
        self._port = port
        self._availability_zone = availability_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetHealthDescriptionTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetHealthDescription_Target of this TargetHealthDescriptionTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TargetHealthDescriptionTarget.


        :return: The id of this TargetHealthDescriptionTarget.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TargetHealthDescriptionTarget.


        :param id: The id of this TargetHealthDescriptionTarget.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def port(self):
        """Gets the port of this TargetHealthDescriptionTarget.


        :return: The port of this TargetHealthDescriptionTarget.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this TargetHealthDescriptionTarget.


        :param port: The port of this TargetHealthDescriptionTarget.
        :type port: int
        """

        self._port = port

    @property
    def availability_zone(self):
        """Gets the availability_zone of this TargetHealthDescriptionTarget.


        :return: The availability_zone of this TargetHealthDescriptionTarget.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this TargetHealthDescriptionTarget.


        :param availability_zone: The availability_zone of this TargetHealthDescriptionTarget.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone
