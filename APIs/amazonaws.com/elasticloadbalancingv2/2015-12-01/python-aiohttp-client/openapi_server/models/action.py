# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_authenticate_cognito_config import ActionAuthenticateCognitoConfig
from openapi_server.models.action_authenticate_oidc_config import ActionAuthenticateOidcConfig
from openapi_server.models.action_fixed_response_config import ActionFixedResponseConfig
from openapi_server.models.action_forward_config import ActionForwardConfig
from openapi_server.models.action_redirect_config import ActionRedirectConfig
from openapi_server.models.action_type_enum import ActionTypeEnum
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ActionTypeEnum=None, target_group_arn: str=None, authenticate_oidc_config: ActionAuthenticateOidcConfig=None, authenticate_cognito_config: ActionAuthenticateCognitoConfig=None, order: int=None, redirect_config: ActionRedirectConfig=None, fixed_response_config: ActionFixedResponseConfig=None, forward_config: ActionForwardConfig=None):
        """Action - a model defined in OpenAPI

        :param type: The type of this Action.
        :param target_group_arn: The target_group_arn of this Action.
        :param authenticate_oidc_config: The authenticate_oidc_config of this Action.
        :param authenticate_cognito_config: The authenticate_cognito_config of this Action.
        :param order: The order of this Action.
        :param redirect_config: The redirect_config of this Action.
        :param fixed_response_config: The fixed_response_config of this Action.
        :param forward_config: The forward_config of this Action.
        """
        self.openapi_types = {
            'type': ActionTypeEnum,
            'target_group_arn': str,
            'authenticate_oidc_config': ActionAuthenticateOidcConfig,
            'authenticate_cognito_config': ActionAuthenticateCognitoConfig,
            'order': int,
            'redirect_config': ActionRedirectConfig,
            'fixed_response_config': ActionFixedResponseConfig,
            'forward_config': ActionForwardConfig
        }

        self.attribute_map = {
            'type': 'Type',
            'target_group_arn': 'TargetGroupArn',
            'authenticate_oidc_config': 'AuthenticateOidcConfig',
            'authenticate_cognito_config': 'AuthenticateCognitoConfig',
            'order': 'Order',
            'redirect_config': 'RedirectConfig',
            'fixed_response_config': 'FixedResponseConfig',
            'forward_config': 'ForwardConfig'
        }

        self._type = type
        self._target_group_arn = target_group_arn
        self._authenticate_oidc_config = authenticate_oidc_config
        self._authenticate_cognito_config = authenticate_cognito_config
        self._order = order
        self._redirect_config = redirect_config
        self._fixed_response_config = fixed_response_config
        self._forward_config = forward_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this Action.


        :return: The type of this Action.
        :rtype: ActionTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Action.


        :param type: The type of this Action.
        :type type: ActionTypeEnum
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def target_group_arn(self):
        """Gets the target_group_arn of this Action.


        :return: The target_group_arn of this Action.
        :rtype: str
        """
        return self._target_group_arn

    @target_group_arn.setter
    def target_group_arn(self, target_group_arn):
        """Sets the target_group_arn of this Action.


        :param target_group_arn: The target_group_arn of this Action.
        :type target_group_arn: str
        """

        self._target_group_arn = target_group_arn

    @property
    def authenticate_oidc_config(self):
        """Gets the authenticate_oidc_config of this Action.


        :return: The authenticate_oidc_config of this Action.
        :rtype: ActionAuthenticateOidcConfig
        """
        return self._authenticate_oidc_config

    @authenticate_oidc_config.setter
    def authenticate_oidc_config(self, authenticate_oidc_config):
        """Sets the authenticate_oidc_config of this Action.


        :param authenticate_oidc_config: The authenticate_oidc_config of this Action.
        :type authenticate_oidc_config: ActionAuthenticateOidcConfig
        """

        self._authenticate_oidc_config = authenticate_oidc_config

    @property
    def authenticate_cognito_config(self):
        """Gets the authenticate_cognito_config of this Action.


        :return: The authenticate_cognito_config of this Action.
        :rtype: ActionAuthenticateCognitoConfig
        """
        return self._authenticate_cognito_config

    @authenticate_cognito_config.setter
    def authenticate_cognito_config(self, authenticate_cognito_config):
        """Sets the authenticate_cognito_config of this Action.


        :param authenticate_cognito_config: The authenticate_cognito_config of this Action.
        :type authenticate_cognito_config: ActionAuthenticateCognitoConfig
        """

        self._authenticate_cognito_config = authenticate_cognito_config

    @property
    def order(self):
        """Gets the order of this Action.


        :return: The order of this Action.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Action.


        :param order: The order of this Action.
        :type order: int
        """

        self._order = order

    @property
    def redirect_config(self):
        """Gets the redirect_config of this Action.


        :return: The redirect_config of this Action.
        :rtype: ActionRedirectConfig
        """
        return self._redirect_config

    @redirect_config.setter
    def redirect_config(self, redirect_config):
        """Sets the redirect_config of this Action.


        :param redirect_config: The redirect_config of this Action.
        :type redirect_config: ActionRedirectConfig
        """

        self._redirect_config = redirect_config

    @property
    def fixed_response_config(self):
        """Gets the fixed_response_config of this Action.


        :return: The fixed_response_config of this Action.
        :rtype: ActionFixedResponseConfig
        """
        return self._fixed_response_config

    @fixed_response_config.setter
    def fixed_response_config(self, fixed_response_config):
        """Sets the fixed_response_config of this Action.


        :param fixed_response_config: The fixed_response_config of this Action.
        :type fixed_response_config: ActionFixedResponseConfig
        """

        self._fixed_response_config = fixed_response_config

    @property
    def forward_config(self):
        """Gets the forward_config of this Action.


        :return: The forward_config of this Action.
        :rtype: ActionForwardConfig
        """
        return self._forward_config

    @forward_config.setter
    def forward_config(self, forward_config):
        """Sets the forward_config of this Action.


        :param forward_config: The forward_config of this Action.
        :type forward_config: ActionForwardConfig
        """

        self._forward_config = forward_config
