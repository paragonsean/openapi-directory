/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITargetHealthDescription.h
 *
 * Information about the health of a target.
 */

#ifndef OAITargetHealthDescription_H
#define OAITargetHealthDescription_H

#include <QJsonObject>

#include "OAITargetHealthDescription_Target.h"
#include "OAITargetHealthDescription_TargetHealth.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITargetHealthDescription_Target;
class OAITargetHealthDescription_TargetHealth;

class OAITargetHealthDescription : public OAIObject {
public:
    OAITargetHealthDescription();
    OAITargetHealthDescription(QString json);
    ~OAITargetHealthDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITargetHealthDescription_Target getTarget() const;
    void setTarget(const OAITargetHealthDescription_Target &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    QString getHealthCheckPort() const;
    void setHealthCheckPort(const QString &health_check_port);
    bool is_health_check_port_Set() const;
    bool is_health_check_port_Valid() const;

    OAITargetHealthDescription_TargetHealth getTargetHealth() const;
    void setTargetHealth(const OAITargetHealthDescription_TargetHealth &target_health);
    bool is_target_health_Set() const;
    bool is_target_health_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITargetHealthDescription_Target m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    QString m_health_check_port;
    bool m_health_check_port_isSet;
    bool m_health_check_port_isValid;

    OAITargetHealthDescription_TargetHealth m_target_health;
    bool m_target_health_isSet;
    bool m_target_health_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITargetHealthDescription)

#endif // OAITargetHealthDescription_H
