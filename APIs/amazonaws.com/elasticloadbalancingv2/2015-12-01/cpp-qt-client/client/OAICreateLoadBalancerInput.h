/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLoadBalancerInput.h
 *
 * 
 */

#ifndef OAICreateLoadBalancerInput_H
#define OAICreateLoadBalancerInput_H

#include <QJsonObject>

#include "OAIIpAddressType.h"
#include "OAILoadBalancerSchemeEnum.h"
#include "OAILoadBalancerTypeEnum.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateLoadBalancerInput : public OAIObject {
public:
    OAICreateLoadBalancerInput();
    OAICreateLoadBalancerInput(QString json);
    ~OAICreateLoadBalancerInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getSubnets() const;
    void setSubnets(const QList &subnets);
    bool is_subnets_Set() const;
    bool is_subnets_Valid() const;

    QList getSubnetMappings() const;
    void setSubnetMappings(const QList &subnet_mappings);
    bool is_subnet_mappings_Set() const;
    bool is_subnet_mappings_Valid() const;

    QList getSecurityGroups() const;
    void setSecurityGroups(const QList &security_groups);
    bool is_security_groups_Set() const;
    bool is_security_groups_Valid() const;

    OAILoadBalancerSchemeEnum getScheme() const;
    void setScheme(const OAILoadBalancerSchemeEnum &scheme);
    bool is_scheme_Set() const;
    bool is_scheme_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAILoadBalancerTypeEnum getType() const;
    void setType(const OAILoadBalancerTypeEnum &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIIpAddressType getIpAddressType() const;
    void setIpAddressType(const OAIIpAddressType &ip_address_type);
    bool is_ip_address_type_Set() const;
    bool is_ip_address_type_Valid() const;

    QString getCustomerOwnedIpv4Pool() const;
    void setCustomerOwnedIpv4Pool(const QString &customer_owned_ipv4_pool);
    bool is_customer_owned_ipv4_pool_Set() const;
    bool is_customer_owned_ipv4_pool_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_subnets;
    bool m_subnets_isSet;
    bool m_subnets_isValid;

    QList m_subnet_mappings;
    bool m_subnet_mappings_isSet;
    bool m_subnet_mappings_isValid;

    QList m_security_groups;
    bool m_security_groups_isSet;
    bool m_security_groups_isValid;

    OAILoadBalancerSchemeEnum m_scheme;
    bool m_scheme_isSet;
    bool m_scheme_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAILoadBalancerTypeEnum m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIIpAddressType m_ip_address_type;
    bool m_ip_address_type_isSet;
    bool m_ip_address_type_isValid;

    QString m_customer_owned_ipv4_pool;
    bool m_customer_owned_ipv4_pool_isSet;
    bool m_customer_owned_ipv4_pool_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLoadBalancerInput)

#endif // OAICreateLoadBalancerInput_H
