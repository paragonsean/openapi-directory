/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAction.h
 *
 * &lt;p&gt;Information about an action.&lt;/p&gt; &lt;p&gt;Each rule must include exactly one of the following types of actions: &lt;code&gt;forward&lt;/code&gt;, &lt;code&gt;fixed-response&lt;/code&gt;, or &lt;code&gt;redirect&lt;/code&gt;, and it must be the last action to be performed.&lt;/p&gt;
 */

#ifndef OAIAction_H
#define OAIAction_H

#include <QJsonObject>

#include "OAIActionTypeEnum.h"
#include "OAIAction_AuthenticateCognitoConfig.h"
#include "OAIAction_AuthenticateOidcConfig.h"
#include "OAIAction_FixedResponseConfig.h"
#include "OAIAction_ForwardConfig.h"
#include "OAIAction_RedirectConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAction_AuthenticateOidcConfig;
class OAIAction_AuthenticateCognitoConfig;
class OAIAction_RedirectConfig;
class OAIAction_FixedResponseConfig;
class OAIAction_ForwardConfig;

class OAIAction : public OAIObject {
public:
    OAIAction();
    OAIAction(QString json);
    ~OAIAction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIActionTypeEnum getType() const;
    void setType(const OAIActionTypeEnum &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getTargetGroupArn() const;
    void setTargetGroupArn(const QString &target_group_arn);
    bool is_target_group_arn_Set() const;
    bool is_target_group_arn_Valid() const;

    OAIAction_AuthenticateOidcConfig getAuthenticateOidcConfig() const;
    void setAuthenticateOidcConfig(const OAIAction_AuthenticateOidcConfig &authenticate_oidc_config);
    bool is_authenticate_oidc_config_Set() const;
    bool is_authenticate_oidc_config_Valid() const;

    OAIAction_AuthenticateCognitoConfig getAuthenticateCognitoConfig() const;
    void setAuthenticateCognitoConfig(const OAIAction_AuthenticateCognitoConfig &authenticate_cognito_config);
    bool is_authenticate_cognito_config_Set() const;
    bool is_authenticate_cognito_config_Valid() const;

    qint32 getOrder() const;
    void setOrder(const qint32 &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    OAIAction_RedirectConfig getRedirectConfig() const;
    void setRedirectConfig(const OAIAction_RedirectConfig &redirect_config);
    bool is_redirect_config_Set() const;
    bool is_redirect_config_Valid() const;

    OAIAction_FixedResponseConfig getFixedResponseConfig() const;
    void setFixedResponseConfig(const OAIAction_FixedResponseConfig &fixed_response_config);
    bool is_fixed_response_config_Set() const;
    bool is_fixed_response_config_Valid() const;

    OAIAction_ForwardConfig getForwardConfig() const;
    void setForwardConfig(const OAIAction_ForwardConfig &forward_config);
    bool is_forward_config_Set() const;
    bool is_forward_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIActionTypeEnum m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_target_group_arn;
    bool m_target_group_arn_isSet;
    bool m_target_group_arn_isValid;

    OAIAction_AuthenticateOidcConfig m_authenticate_oidc_config;
    bool m_authenticate_oidc_config_isSet;
    bool m_authenticate_oidc_config_isValid;

    OAIAction_AuthenticateCognitoConfig m_authenticate_cognito_config;
    bool m_authenticate_cognito_config_isSet;
    bool m_authenticate_cognito_config_isValid;

    qint32 m_order;
    bool m_order_isSet;
    bool m_order_isValid;

    OAIAction_RedirectConfig m_redirect_config;
    bool m_redirect_config_isSet;
    bool m_redirect_config_isValid;

    OAIAction_FixedResponseConfig m_fixed_response_config;
    bool m_fixed_response_config_isSet;
    bool m_fixed_response_config_isValid;

    OAIAction_ForwardConfig m_forward_config;
    bool m_forward_config_isSet;
    bool m_forward_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAction)

#endif // OAIAction_H
