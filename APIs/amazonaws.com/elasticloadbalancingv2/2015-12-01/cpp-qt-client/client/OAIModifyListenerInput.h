/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModifyListenerInput.h
 *
 * 
 */

#ifndef OAIModifyListenerInput_H
#define OAIModifyListenerInput_H

#include <QJsonObject>

#include "OAIProtocolEnum.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIModifyListenerInput : public OAIObject {
public:
    OAIModifyListenerInput();
    OAIModifyListenerInput(QString json);
    ~OAIModifyListenerInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getListenerArn() const;
    void setListenerArn(const QString &listener_arn);
    bool is_listener_arn_Set() const;
    bool is_listener_arn_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    OAIProtocolEnum getProtocol() const;
    void setProtocol(const OAIProtocolEnum &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getSslPolicy() const;
    void setSslPolicy(const QString &ssl_policy);
    bool is_ssl_policy_Set() const;
    bool is_ssl_policy_Valid() const;

    QList getCertificates() const;
    void setCertificates(const QList &certificates);
    bool is_certificates_Set() const;
    bool is_certificates_Valid() const;

    QList getDefaultActions() const;
    void setDefaultActions(const QList &default_actions);
    bool is_default_actions_Set() const;
    bool is_default_actions_Valid() const;

    QList getAlpnPolicy() const;
    void setAlpnPolicy(const QList &alpn_policy);
    bool is_alpn_policy_Set() const;
    bool is_alpn_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_listener_arn;
    bool m_listener_arn_isSet;
    bool m_listener_arn_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    OAIProtocolEnum m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_ssl_policy;
    bool m_ssl_policy_isSet;
    bool m_ssl_policy_isValid;

    QList m_certificates;
    bool m_certificates_isSet;
    bool m_certificates_isValid;

    QList m_default_actions;
    bool m_default_actions_isSet;
    bool m_default_actions_isValid;

    QList m_alpn_policy;
    bool m_alpn_policy_isSet;
    bool m_alpn_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModifyListenerInput)

#endif // OAIModifyListenerInput_H
