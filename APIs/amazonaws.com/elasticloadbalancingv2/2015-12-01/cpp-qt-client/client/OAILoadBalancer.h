/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILoadBalancer.h
 *
 * Information about a load balancer.
 */

#ifndef OAILoadBalancer_H
#define OAILoadBalancer_H

#include <QJsonObject>

#include "OAIIpAddressType.h"
#include "OAILoadBalancerSchemeEnum.h"
#include "OAILoadBalancerTypeEnum.h"
#include "OAILoadBalancer_State.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILoadBalancer_State;

class OAILoadBalancer : public OAIObject {
public:
    OAILoadBalancer();
    OAILoadBalancer(QString json);
    ~OAILoadBalancer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLoadBalancerArn() const;
    void setLoadBalancerArn(const QString &load_balancer_arn);
    bool is_load_balancer_arn_Set() const;
    bool is_load_balancer_arn_Valid() const;

    QString getDnsName() const;
    void setDnsName(const QString &dns_name);
    bool is_dns_name_Set() const;
    bool is_dns_name_Valid() const;

    QString getCanonicalHostedZoneId() const;
    void setCanonicalHostedZoneId(const QString &canonical_hosted_zone_id);
    bool is_canonical_hosted_zone_id_Set() const;
    bool is_canonical_hosted_zone_id_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QString getLoadBalancerName() const;
    void setLoadBalancerName(const QString &load_balancer_name);
    bool is_load_balancer_name_Set() const;
    bool is_load_balancer_name_Valid() const;

    OAILoadBalancerSchemeEnum getScheme() const;
    void setScheme(const OAILoadBalancerSchemeEnum &scheme);
    bool is_scheme_Set() const;
    bool is_scheme_Valid() const;

    QString getVpcId() const;
    void setVpcId(const QString &vpc_id);
    bool is_vpc_id_Set() const;
    bool is_vpc_id_Valid() const;

    OAILoadBalancer_State getState() const;
    void setState(const OAILoadBalancer_State &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAILoadBalancerTypeEnum getType() const;
    void setType(const OAILoadBalancerTypeEnum &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList getAvailabilityZones() const;
    void setAvailabilityZones(const QList &availability_zones);
    bool is_availability_zones_Set() const;
    bool is_availability_zones_Valid() const;

    QList getSecurityGroups() const;
    void setSecurityGroups(const QList &security_groups);
    bool is_security_groups_Set() const;
    bool is_security_groups_Valid() const;

    OAIIpAddressType getIpAddressType() const;
    void setIpAddressType(const OAIIpAddressType &ip_address_type);
    bool is_ip_address_type_Set() const;
    bool is_ip_address_type_Valid() const;

    QString getCustomerOwnedIpv4Pool() const;
    void setCustomerOwnedIpv4Pool(const QString &customer_owned_ipv4_pool);
    bool is_customer_owned_ipv4_pool_Set() const;
    bool is_customer_owned_ipv4_pool_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_load_balancer_arn;
    bool m_load_balancer_arn_isSet;
    bool m_load_balancer_arn_isValid;

    QString m_dns_name;
    bool m_dns_name_isSet;
    bool m_dns_name_isValid;

    QString m_canonical_hosted_zone_id;
    bool m_canonical_hosted_zone_id_isSet;
    bool m_canonical_hosted_zone_id_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QString m_load_balancer_name;
    bool m_load_balancer_name_isSet;
    bool m_load_balancer_name_isValid;

    OAILoadBalancerSchemeEnum m_scheme;
    bool m_scheme_isSet;
    bool m_scheme_isValid;

    QString m_vpc_id;
    bool m_vpc_id_isSet;
    bool m_vpc_id_isValid;

    OAILoadBalancer_State m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAILoadBalancerTypeEnum m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList m_availability_zones;
    bool m_availability_zones_isSet;
    bool m_availability_zones_isValid;

    QList m_security_groups;
    bool m_security_groups_isSet;
    bool m_security_groups_isValid;

    OAIIpAddressType m_ip_address_type;
    bool m_ip_address_type_isSet;
    bool m_ip_address_type_isValid;

    QString m_customer_owned_ipv4_pool;
    bool m_customer_owned_ipv4_pool_isSet;
    bool m_customer_owned_ipv4_pool_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILoadBalancer)

#endif // OAILoadBalancer_H
