/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAction_AuthenticateCognitoConfig.h
 *
 * 
 */

#ifndef OAIAction_AuthenticateCognitoConfig_H
#define OAIAction_AuthenticateCognitoConfig_H

#include <QJsonObject>

#include "OAIAuthenticateCognitoActionConditionalBehaviorEnum.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAction_AuthenticateCognitoConfig : public OAIObject {
public:
    OAIAction_AuthenticateCognitoConfig();
    OAIAction_AuthenticateCognitoConfig(QString json);
    ~OAIAction_AuthenticateCognitoConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getUserPoolArn() const;
    void setUserPoolArn(const QString &user_pool_arn);
    bool is_user_pool_arn_Set() const;
    bool is_user_pool_arn_Valid() const;

    QString getUserPoolClientId() const;
    void setUserPoolClientId(const QString &user_pool_client_id);
    bool is_user_pool_client_id_Set() const;
    bool is_user_pool_client_id_Valid() const;

    QString getUserPoolDomain() const;
    void setUserPoolDomain(const QString &user_pool_domain);
    bool is_user_pool_domain_Set() const;
    bool is_user_pool_domain_Valid() const;

    QString getSessionCookieName() const;
    void setSessionCookieName(const QString &session_cookie_name);
    bool is_session_cookie_name_Set() const;
    bool is_session_cookie_name_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    qint32 getSessionTimeout() const;
    void setSessionTimeout(const qint32 &session_timeout);
    bool is_session_timeout_Set() const;
    bool is_session_timeout_Valid() const;

    QMap getAuthenticationRequestExtraParams() const;
    void setAuthenticationRequestExtraParams(const QMap &authentication_request_extra_params);
    bool is_authentication_request_extra_params_Set() const;
    bool is_authentication_request_extra_params_Valid() const;

    OAIAuthenticateCognitoActionConditionalBehaviorEnum getOnUnauthenticatedRequest() const;
    void setOnUnauthenticatedRequest(const OAIAuthenticateCognitoActionConditionalBehaviorEnum &on_unauthenticated_request);
    bool is_on_unauthenticated_request_Set() const;
    bool is_on_unauthenticated_request_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_user_pool_arn;
    bool m_user_pool_arn_isSet;
    bool m_user_pool_arn_isValid;

    QString m_user_pool_client_id;
    bool m_user_pool_client_id_isSet;
    bool m_user_pool_client_id_isValid;

    QString m_user_pool_domain;
    bool m_user_pool_domain_isSet;
    bool m_user_pool_domain_isValid;

    QString m_session_cookie_name;
    bool m_session_cookie_name_isSet;
    bool m_session_cookie_name_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    qint32 m_session_timeout;
    bool m_session_timeout_isSet;
    bool m_session_timeout_isValid;

    QMap m_authentication_request_extra_params;
    bool m_authentication_request_extra_params_isSet;
    bool m_authentication_request_extra_params_isValid;

    OAIAuthenticateCognitoActionConditionalBehaviorEnum m_on_unauthenticated_request;
    bool m_on_unauthenticated_request_isSet;
    bool m_on_unauthenticated_request_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAction_AuthenticateCognitoConfig)

#endif // OAIAction_AuthenticateCognitoConfig_H
