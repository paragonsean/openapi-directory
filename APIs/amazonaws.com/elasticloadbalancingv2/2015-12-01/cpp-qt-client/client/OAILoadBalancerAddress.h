/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILoadBalancerAddress.h
 *
 * Information about a static IP address for a load balancer.
 */

#ifndef OAILoadBalancerAddress_H
#define OAILoadBalancerAddress_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILoadBalancerAddress : public OAIObject {
public:
    OAILoadBalancerAddress();
    OAILoadBalancerAddress(QString json);
    ~OAILoadBalancerAddress() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QString getAllocationId() const;
    void setAllocationId(const QString &allocation_id);
    bool is_allocation_id_Set() const;
    bool is_allocation_id_Valid() const;

    QString getPrivateIpv4Address() const;
    void setPrivateIpv4Address(const QString &private_ipv4_address);
    bool is_private_ipv4_address_Set() const;
    bool is_private_ipv4_address_Valid() const;

    QString getIpv6Address() const;
    void setIpv6Address(const QString &ipv6_address);
    bool is_ipv6_address_Set() const;
    bool is_ipv6_address_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QString m_allocation_id;
    bool m_allocation_id_isSet;
    bool m_allocation_id_isValid;

    QString m_private_ipv4_address;
    bool m_private_ipv4_address_isSet;
    bool m_private_ipv4_address_isValid;

    QString m_ipv6_address;
    bool m_ipv6_address_isSet;
    bool m_ipv6_address_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILoadBalancerAddress)

#endif // OAILoadBalancerAddress_H
