/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateListenerInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateListenerInput::OAICreateListenerInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateListenerInput::OAICreateListenerInput() {
    this->initializeModel();
}

OAICreateListenerInput::~OAICreateListenerInput() {}

void OAICreateListenerInput::initializeModel() {

    m_load_balancer_arn_isSet = false;
    m_load_balancer_arn_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_ssl_policy_isSet = false;
    m_ssl_policy_isValid = false;

    m_certificates_isSet = false;
    m_certificates_isValid = false;

    m_default_actions_isSet = false;
    m_default_actions_isValid = false;

    m_alpn_policy_isSet = false;
    m_alpn_policy_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateListenerInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateListenerInput::fromJsonObject(QJsonObject json) {

    m_load_balancer_arn_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_arn, json[QString("LoadBalancerArn")]);
    m_load_balancer_arn_isSet = !json[QString("LoadBalancerArn")].isNull() && m_load_balancer_arn_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_ssl_policy_isValid = ::OpenAPI::fromJsonValue(m_ssl_policy, json[QString("SslPolicy")]);
    m_ssl_policy_isSet = !json[QString("SslPolicy")].isNull() && m_ssl_policy_isValid;

    m_certificates_isValid = ::OpenAPI::fromJsonValue(m_certificates, json[QString("Certificates")]);
    m_certificates_isSet = !json[QString("Certificates")].isNull() && m_certificates_isValid;

    m_default_actions_isValid = ::OpenAPI::fromJsonValue(m_default_actions, json[QString("DefaultActions")]);
    m_default_actions_isSet = !json[QString("DefaultActions")].isNull() && m_default_actions_isValid;

    m_alpn_policy_isValid = ::OpenAPI::fromJsonValue(m_alpn_policy, json[QString("AlpnPolicy")]);
    m_alpn_policy_isSet = !json[QString("AlpnPolicy")].isNull() && m_alpn_policy_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateListenerInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateListenerInput::asJsonObject() const {
    QJsonObject obj;
    if (m_load_balancer_arn_isSet) {
        obj.insert(QString("LoadBalancerArn"), ::OpenAPI::toJsonValue(m_load_balancer_arn));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_ssl_policy_isSet) {
        obj.insert(QString("SslPolicy"), ::OpenAPI::toJsonValue(m_ssl_policy));
    }
    if (m_certificates.isSet()) {
        obj.insert(QString("Certificates"), ::OpenAPI::toJsonValue(m_certificates));
    }
    if (m_default_actions.isSet()) {
        obj.insert(QString("DefaultActions"), ::OpenAPI::toJsonValue(m_default_actions));
    }
    if (m_alpn_policy.isSet()) {
        obj.insert(QString("AlpnPolicy"), ::OpenAPI::toJsonValue(m_alpn_policy));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateListenerInput::getLoadBalancerArn() const {
    return m_load_balancer_arn;
}
void OAICreateListenerInput::setLoadBalancerArn(const QString &load_balancer_arn) {
    m_load_balancer_arn = load_balancer_arn;
    m_load_balancer_arn_isSet = true;
}

bool OAICreateListenerInput::is_load_balancer_arn_Set() const{
    return m_load_balancer_arn_isSet;
}

bool OAICreateListenerInput::is_load_balancer_arn_Valid() const{
    return m_load_balancer_arn_isValid;
}

OAIProtocolEnum OAICreateListenerInput::getProtocol() const {
    return m_protocol;
}
void OAICreateListenerInput::setProtocol(const OAIProtocolEnum &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAICreateListenerInput::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAICreateListenerInput::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint32 OAICreateListenerInput::getPort() const {
    return m_port;
}
void OAICreateListenerInput::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateListenerInput::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateListenerInput::is_port_Valid() const{
    return m_port_isValid;
}

QString OAICreateListenerInput::getSslPolicy() const {
    return m_ssl_policy;
}
void OAICreateListenerInput::setSslPolicy(const QString &ssl_policy) {
    m_ssl_policy = ssl_policy;
    m_ssl_policy_isSet = true;
}

bool OAICreateListenerInput::is_ssl_policy_Set() const{
    return m_ssl_policy_isSet;
}

bool OAICreateListenerInput::is_ssl_policy_Valid() const{
    return m_ssl_policy_isValid;
}

QList OAICreateListenerInput::getCertificates() const {
    return m_certificates;
}
void OAICreateListenerInput::setCertificates(const QList &certificates) {
    m_certificates = certificates;
    m_certificates_isSet = true;
}

bool OAICreateListenerInput::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool OAICreateListenerInput::is_certificates_Valid() const{
    return m_certificates_isValid;
}

QList OAICreateListenerInput::getDefaultActions() const {
    return m_default_actions;
}
void OAICreateListenerInput::setDefaultActions(const QList &default_actions) {
    m_default_actions = default_actions;
    m_default_actions_isSet = true;
}

bool OAICreateListenerInput::is_default_actions_Set() const{
    return m_default_actions_isSet;
}

bool OAICreateListenerInput::is_default_actions_Valid() const{
    return m_default_actions_isValid;
}

QList OAICreateListenerInput::getAlpnPolicy() const {
    return m_alpn_policy;
}
void OAICreateListenerInput::setAlpnPolicy(const QList &alpn_policy) {
    m_alpn_policy = alpn_policy;
    m_alpn_policy_isSet = true;
}

bool OAICreateListenerInput::is_alpn_policy_Set() const{
    return m_alpn_policy_isSet;
}

bool OAICreateListenerInput::is_alpn_policy_Valid() const{
    return m_alpn_policy_isValid;
}

QList OAICreateListenerInput::getTags() const {
    return m_tags;
}
void OAICreateListenerInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateListenerInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateListenerInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateListenerInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_load_balancer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alpn_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateListenerInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_load_balancer_arn_isValid && m_default_actions_isValid && true;
}

} // namespace OpenAPI
