/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISslPolicy.h
 *
 * Information about a policy used for SSL negotiation.
 */

#ifndef OAISslPolicy_H
#define OAISslPolicy_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISslPolicy : public OAIObject {
public:
    OAISslPolicy();
    OAISslPolicy(QString json);
    ~OAISslPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getSslProtocols() const;
    void setSslProtocols(const QList &ssl_protocols);
    bool is_ssl_protocols_Set() const;
    bool is_ssl_protocols_Valid() const;

    QList getCiphers() const;
    void setCiphers(const QList &ciphers);
    bool is_ciphers_Set() const;
    bool is_ciphers_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getSupportedLoadBalancerTypes() const;
    void setSupportedLoadBalancerTypes(const QList &supported_load_balancer_types);
    bool is_supported_load_balancer_types_Set() const;
    bool is_supported_load_balancer_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_ssl_protocols;
    bool m_ssl_protocols_isSet;
    bool m_ssl_protocols_isValid;

    QList m_ciphers;
    bool m_ciphers_isSet;
    bool m_ciphers_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_supported_load_balancer_types;
    bool m_supported_load_balancer_types_isSet;
    bool m_supported_load_balancer_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISslPolicy)

#endif // OAISslPolicy_H
