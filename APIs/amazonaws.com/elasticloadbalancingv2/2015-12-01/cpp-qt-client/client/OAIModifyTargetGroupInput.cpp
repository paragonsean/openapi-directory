/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyTargetGroupInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyTargetGroupInput::OAIModifyTargetGroupInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyTargetGroupInput::OAIModifyTargetGroupInput() {
    this->initializeModel();
}

OAIModifyTargetGroupInput::~OAIModifyTargetGroupInput() {}

void OAIModifyTargetGroupInput::initializeModel() {

    m_target_group_arn_isSet = false;
    m_target_group_arn_isValid = false;

    m_health_check_protocol_isSet = false;
    m_health_check_protocol_isValid = false;

    m_health_check_port_isSet = false;
    m_health_check_port_isValid = false;

    m_health_check_path_isSet = false;
    m_health_check_path_isValid = false;

    m_health_check_enabled_isSet = false;
    m_health_check_enabled_isValid = false;

    m_health_check_interval_seconds_isSet = false;
    m_health_check_interval_seconds_isValid = false;

    m_health_check_timeout_seconds_isSet = false;
    m_health_check_timeout_seconds_isValid = false;

    m_healthy_threshold_count_isSet = false;
    m_healthy_threshold_count_isValid = false;

    m_unhealthy_threshold_count_isSet = false;
    m_unhealthy_threshold_count_isValid = false;

    m_matcher_isSet = false;
    m_matcher_isValid = false;
}

void OAIModifyTargetGroupInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyTargetGroupInput::fromJsonObject(QJsonObject json) {

    m_target_group_arn_isValid = ::OpenAPI::fromJsonValue(m_target_group_arn, json[QString("TargetGroupArn")]);
    m_target_group_arn_isSet = !json[QString("TargetGroupArn")].isNull() && m_target_group_arn_isValid;

    m_health_check_protocol_isValid = ::OpenAPI::fromJsonValue(m_health_check_protocol, json[QString("HealthCheckProtocol")]);
    m_health_check_protocol_isSet = !json[QString("HealthCheckProtocol")].isNull() && m_health_check_protocol_isValid;

    m_health_check_port_isValid = ::OpenAPI::fromJsonValue(m_health_check_port, json[QString("HealthCheckPort")]);
    m_health_check_port_isSet = !json[QString("HealthCheckPort")].isNull() && m_health_check_port_isValid;

    m_health_check_path_isValid = ::OpenAPI::fromJsonValue(m_health_check_path, json[QString("HealthCheckPath")]);
    m_health_check_path_isSet = !json[QString("HealthCheckPath")].isNull() && m_health_check_path_isValid;

    m_health_check_enabled_isValid = ::OpenAPI::fromJsonValue(m_health_check_enabled, json[QString("HealthCheckEnabled")]);
    m_health_check_enabled_isSet = !json[QString("HealthCheckEnabled")].isNull() && m_health_check_enabled_isValid;

    m_health_check_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_interval_seconds, json[QString("HealthCheckIntervalSeconds")]);
    m_health_check_interval_seconds_isSet = !json[QString("HealthCheckIntervalSeconds")].isNull() && m_health_check_interval_seconds_isValid;

    m_health_check_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_timeout_seconds, json[QString("HealthCheckTimeoutSeconds")]);
    m_health_check_timeout_seconds_isSet = !json[QString("HealthCheckTimeoutSeconds")].isNull() && m_health_check_timeout_seconds_isValid;

    m_healthy_threshold_count_isValid = ::OpenAPI::fromJsonValue(m_healthy_threshold_count, json[QString("HealthyThresholdCount")]);
    m_healthy_threshold_count_isSet = !json[QString("HealthyThresholdCount")].isNull() && m_healthy_threshold_count_isValid;

    m_unhealthy_threshold_count_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_threshold_count, json[QString("UnhealthyThresholdCount")]);
    m_unhealthy_threshold_count_isSet = !json[QString("UnhealthyThresholdCount")].isNull() && m_unhealthy_threshold_count_isValid;

    m_matcher_isValid = ::OpenAPI::fromJsonValue(m_matcher, json[QString("Matcher")]);
    m_matcher_isSet = !json[QString("Matcher")].isNull() && m_matcher_isValid;
}

QString OAIModifyTargetGroupInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyTargetGroupInput::asJsonObject() const {
    QJsonObject obj;
    if (m_target_group_arn_isSet) {
        obj.insert(QString("TargetGroupArn"), ::OpenAPI::toJsonValue(m_target_group_arn));
    }
    if (m_health_check_protocol.isSet()) {
        obj.insert(QString("HealthCheckProtocol"), ::OpenAPI::toJsonValue(m_health_check_protocol));
    }
    if (m_health_check_port_isSet) {
        obj.insert(QString("HealthCheckPort"), ::OpenAPI::toJsonValue(m_health_check_port));
    }
    if (m_health_check_path_isSet) {
        obj.insert(QString("HealthCheckPath"), ::OpenAPI::toJsonValue(m_health_check_path));
    }
    if (m_health_check_enabled_isSet) {
        obj.insert(QString("HealthCheckEnabled"), ::OpenAPI::toJsonValue(m_health_check_enabled));
    }
    if (m_health_check_interval_seconds_isSet) {
        obj.insert(QString("HealthCheckIntervalSeconds"), ::OpenAPI::toJsonValue(m_health_check_interval_seconds));
    }
    if (m_health_check_timeout_seconds_isSet) {
        obj.insert(QString("HealthCheckTimeoutSeconds"), ::OpenAPI::toJsonValue(m_health_check_timeout_seconds));
    }
    if (m_healthy_threshold_count_isSet) {
        obj.insert(QString("HealthyThresholdCount"), ::OpenAPI::toJsonValue(m_healthy_threshold_count));
    }
    if (m_unhealthy_threshold_count_isSet) {
        obj.insert(QString("UnhealthyThresholdCount"), ::OpenAPI::toJsonValue(m_unhealthy_threshold_count));
    }
    if (m_matcher.isSet()) {
        obj.insert(QString("Matcher"), ::OpenAPI::toJsonValue(m_matcher));
    }
    return obj;
}

QString OAIModifyTargetGroupInput::getTargetGroupArn() const {
    return m_target_group_arn;
}
void OAIModifyTargetGroupInput::setTargetGroupArn(const QString &target_group_arn) {
    m_target_group_arn = target_group_arn;
    m_target_group_arn_isSet = true;
}

bool OAIModifyTargetGroupInput::is_target_group_arn_Set() const{
    return m_target_group_arn_isSet;
}

bool OAIModifyTargetGroupInput::is_target_group_arn_Valid() const{
    return m_target_group_arn_isValid;
}

OAIProtocolEnum OAIModifyTargetGroupInput::getHealthCheckProtocol() const {
    return m_health_check_protocol;
}
void OAIModifyTargetGroupInput::setHealthCheckProtocol(const OAIProtocolEnum &health_check_protocol) {
    m_health_check_protocol = health_check_protocol;
    m_health_check_protocol_isSet = true;
}

bool OAIModifyTargetGroupInput::is_health_check_protocol_Set() const{
    return m_health_check_protocol_isSet;
}

bool OAIModifyTargetGroupInput::is_health_check_protocol_Valid() const{
    return m_health_check_protocol_isValid;
}

QString OAIModifyTargetGroupInput::getHealthCheckPort() const {
    return m_health_check_port;
}
void OAIModifyTargetGroupInput::setHealthCheckPort(const QString &health_check_port) {
    m_health_check_port = health_check_port;
    m_health_check_port_isSet = true;
}

bool OAIModifyTargetGroupInput::is_health_check_port_Set() const{
    return m_health_check_port_isSet;
}

bool OAIModifyTargetGroupInput::is_health_check_port_Valid() const{
    return m_health_check_port_isValid;
}

QString OAIModifyTargetGroupInput::getHealthCheckPath() const {
    return m_health_check_path;
}
void OAIModifyTargetGroupInput::setHealthCheckPath(const QString &health_check_path) {
    m_health_check_path = health_check_path;
    m_health_check_path_isSet = true;
}

bool OAIModifyTargetGroupInput::is_health_check_path_Set() const{
    return m_health_check_path_isSet;
}

bool OAIModifyTargetGroupInput::is_health_check_path_Valid() const{
    return m_health_check_path_isValid;
}

bool OAIModifyTargetGroupInput::getHealthCheckEnabled() const {
    return m_health_check_enabled;
}
void OAIModifyTargetGroupInput::setHealthCheckEnabled(const bool &health_check_enabled) {
    m_health_check_enabled = health_check_enabled;
    m_health_check_enabled_isSet = true;
}

bool OAIModifyTargetGroupInput::is_health_check_enabled_Set() const{
    return m_health_check_enabled_isSet;
}

bool OAIModifyTargetGroupInput::is_health_check_enabled_Valid() const{
    return m_health_check_enabled_isValid;
}

qint32 OAIModifyTargetGroupInput::getHealthCheckIntervalSeconds() const {
    return m_health_check_interval_seconds;
}
void OAIModifyTargetGroupInput::setHealthCheckIntervalSeconds(const qint32 &health_check_interval_seconds) {
    m_health_check_interval_seconds = health_check_interval_seconds;
    m_health_check_interval_seconds_isSet = true;
}

bool OAIModifyTargetGroupInput::is_health_check_interval_seconds_Set() const{
    return m_health_check_interval_seconds_isSet;
}

bool OAIModifyTargetGroupInput::is_health_check_interval_seconds_Valid() const{
    return m_health_check_interval_seconds_isValid;
}

qint32 OAIModifyTargetGroupInput::getHealthCheckTimeoutSeconds() const {
    return m_health_check_timeout_seconds;
}
void OAIModifyTargetGroupInput::setHealthCheckTimeoutSeconds(const qint32 &health_check_timeout_seconds) {
    m_health_check_timeout_seconds = health_check_timeout_seconds;
    m_health_check_timeout_seconds_isSet = true;
}

bool OAIModifyTargetGroupInput::is_health_check_timeout_seconds_Set() const{
    return m_health_check_timeout_seconds_isSet;
}

bool OAIModifyTargetGroupInput::is_health_check_timeout_seconds_Valid() const{
    return m_health_check_timeout_seconds_isValid;
}

qint32 OAIModifyTargetGroupInput::getHealthyThresholdCount() const {
    return m_healthy_threshold_count;
}
void OAIModifyTargetGroupInput::setHealthyThresholdCount(const qint32 &healthy_threshold_count) {
    m_healthy_threshold_count = healthy_threshold_count;
    m_healthy_threshold_count_isSet = true;
}

bool OAIModifyTargetGroupInput::is_healthy_threshold_count_Set() const{
    return m_healthy_threshold_count_isSet;
}

bool OAIModifyTargetGroupInput::is_healthy_threshold_count_Valid() const{
    return m_healthy_threshold_count_isValid;
}

qint32 OAIModifyTargetGroupInput::getUnhealthyThresholdCount() const {
    return m_unhealthy_threshold_count;
}
void OAIModifyTargetGroupInput::setUnhealthyThresholdCount(const qint32 &unhealthy_threshold_count) {
    m_unhealthy_threshold_count = unhealthy_threshold_count;
    m_unhealthy_threshold_count_isSet = true;
}

bool OAIModifyTargetGroupInput::is_unhealthy_threshold_count_Set() const{
    return m_unhealthy_threshold_count_isSet;
}

bool OAIModifyTargetGroupInput::is_unhealthy_threshold_count_Valid() const{
    return m_unhealthy_threshold_count_isValid;
}

OAICreateTargetGroupInput_Matcher OAIModifyTargetGroupInput::getMatcher() const {
    return m_matcher;
}
void OAIModifyTargetGroupInput::setMatcher(const OAICreateTargetGroupInput_Matcher &matcher) {
    m_matcher = matcher;
    m_matcher_isSet = true;
}

bool OAIModifyTargetGroupInput::is_matcher_Set() const{
    return m_matcher_isSet;
}

bool OAIModifyTargetGroupInput::is_matcher_Valid() const{
    return m_matcher_isValid;
}

bool OAIModifyTargetGroupInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_healthy_threshold_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_threshold_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matcher.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyTargetGroupInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_group_arn_isValid && true;
}

} // namespace OpenAPI
