/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRedirectActionConfig.h
 *
 * &lt;p&gt;Information about a redirect action.&lt;/p&gt; &lt;p&gt;A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.&lt;/p&gt; &lt;p&gt;You can reuse URI components using the following reserved keywords:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;#{protocol}&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;#{host}&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;#{port}&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;#{path} (the leading \&quot;/\&quot; is removed)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;#{query}&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, you can change the path to \&quot;/new/#{path}\&quot;, the hostname to \&quot;example.#{host}\&quot;, or the query to \&quot;#{query}&amp;amp;value&#x3D;xyz\&quot;.&lt;/p&gt;
 */

#ifndef OAIRedirectActionConfig_H
#define OAIRedirectActionConfig_H

#include <QJsonObject>

#include "OAIRedirectActionStatusCodeEnum.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRedirectActionConfig : public OAIObject {
public:
    OAIRedirectActionConfig();
    OAIRedirectActionConfig(QString json);
    ~OAIRedirectActionConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getPort() const;
    void setPort(const QString &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    OAIRedirectActionStatusCodeEnum getStatusCode() const;
    void setStatusCode(const OAIRedirectActionStatusCodeEnum &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    OAIRedirectActionStatusCodeEnum m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRedirectActionConfig)

#endif // OAIRedirectActionConfig_H
