/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticateOidcActionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticateOidcActionConfig::OAIAuthenticateOidcActionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticateOidcActionConfig::OAIAuthenticateOidcActionConfig() {
    this->initializeModel();
}

OAIAuthenticateOidcActionConfig::~OAIAuthenticateOidcActionConfig() {}

void OAIAuthenticateOidcActionConfig::initializeModel() {

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_authorization_endpoint_isSet = false;
    m_authorization_endpoint_isValid = false;

    m_token_endpoint_isSet = false;
    m_token_endpoint_isValid = false;

    m_user_info_endpoint_isSet = false;
    m_user_info_endpoint_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_session_cookie_name_isSet = false;
    m_session_cookie_name_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_session_timeout_isSet = false;
    m_session_timeout_isValid = false;

    m_authentication_request_extra_params_isSet = false;
    m_authentication_request_extra_params_isValid = false;

    m_on_unauthenticated_request_isSet = false;
    m_on_unauthenticated_request_isValid = false;

    m_use_existing_client_secret_isSet = false;
    m_use_existing_client_secret_isValid = false;
}

void OAIAuthenticateOidcActionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticateOidcActionConfig::fromJsonObject(QJsonObject json) {

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("Issuer")]);
    m_issuer_isSet = !json[QString("Issuer")].isNull() && m_issuer_isValid;

    m_authorization_endpoint_isValid = ::OpenAPI::fromJsonValue(m_authorization_endpoint, json[QString("AuthorizationEndpoint")]);
    m_authorization_endpoint_isSet = !json[QString("AuthorizationEndpoint")].isNull() && m_authorization_endpoint_isValid;

    m_token_endpoint_isValid = ::OpenAPI::fromJsonValue(m_token_endpoint, json[QString("TokenEndpoint")]);
    m_token_endpoint_isSet = !json[QString("TokenEndpoint")].isNull() && m_token_endpoint_isValid;

    m_user_info_endpoint_isValid = ::OpenAPI::fromJsonValue(m_user_info_endpoint, json[QString("UserInfoEndpoint")]);
    m_user_info_endpoint_isSet = !json[QString("UserInfoEndpoint")].isNull() && m_user_info_endpoint_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientId")]);
    m_client_id_isSet = !json[QString("ClientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("ClientSecret")]);
    m_client_secret_isSet = !json[QString("ClientSecret")].isNull() && m_client_secret_isValid;

    m_session_cookie_name_isValid = ::OpenAPI::fromJsonValue(m_session_cookie_name, json[QString("SessionCookieName")]);
    m_session_cookie_name_isSet = !json[QString("SessionCookieName")].isNull() && m_session_cookie_name_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("Scope")]);
    m_scope_isSet = !json[QString("Scope")].isNull() && m_scope_isValid;

    m_session_timeout_isValid = ::OpenAPI::fromJsonValue(m_session_timeout, json[QString("SessionTimeout")]);
    m_session_timeout_isSet = !json[QString("SessionTimeout")].isNull() && m_session_timeout_isValid;

    m_authentication_request_extra_params_isValid = ::OpenAPI::fromJsonValue(m_authentication_request_extra_params, json[QString("AuthenticationRequestExtraParams")]);
    m_authentication_request_extra_params_isSet = !json[QString("AuthenticationRequestExtraParams")].isNull() && m_authentication_request_extra_params_isValid;

    m_on_unauthenticated_request_isValid = ::OpenAPI::fromJsonValue(m_on_unauthenticated_request, json[QString("OnUnauthenticatedRequest")]);
    m_on_unauthenticated_request_isSet = !json[QString("OnUnauthenticatedRequest")].isNull() && m_on_unauthenticated_request_isValid;

    m_use_existing_client_secret_isValid = ::OpenAPI::fromJsonValue(m_use_existing_client_secret, json[QString("UseExistingClientSecret")]);
    m_use_existing_client_secret_isSet = !json[QString("UseExistingClientSecret")].isNull() && m_use_existing_client_secret_isValid;
}

QString OAIAuthenticateOidcActionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticateOidcActionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_issuer_isSet) {
        obj.insert(QString("Issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_authorization_endpoint_isSet) {
        obj.insert(QString("AuthorizationEndpoint"), ::OpenAPI::toJsonValue(m_authorization_endpoint));
    }
    if (m_token_endpoint_isSet) {
        obj.insert(QString("TokenEndpoint"), ::OpenAPI::toJsonValue(m_token_endpoint));
    }
    if (m_user_info_endpoint_isSet) {
        obj.insert(QString("UserInfoEndpoint"), ::OpenAPI::toJsonValue(m_user_info_endpoint));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("ClientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("ClientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_session_cookie_name_isSet) {
        obj.insert(QString("SessionCookieName"), ::OpenAPI::toJsonValue(m_session_cookie_name));
    }
    if (m_scope_isSet) {
        obj.insert(QString("Scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_session_timeout_isSet) {
        obj.insert(QString("SessionTimeout"), ::OpenAPI::toJsonValue(m_session_timeout));
    }
    if (m_authentication_request_extra_params.isSet()) {
        obj.insert(QString("AuthenticationRequestExtraParams"), ::OpenAPI::toJsonValue(m_authentication_request_extra_params));
    }
    if (m_on_unauthenticated_request.isSet()) {
        obj.insert(QString("OnUnauthenticatedRequest"), ::OpenAPI::toJsonValue(m_on_unauthenticated_request));
    }
    if (m_use_existing_client_secret_isSet) {
        obj.insert(QString("UseExistingClientSecret"), ::OpenAPI::toJsonValue(m_use_existing_client_secret));
    }
    return obj;
}

QString OAIAuthenticateOidcActionConfig::getIssuer() const {
    return m_issuer;
}
void OAIAuthenticateOidcActionConfig::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIAuthenticateOidcActionConfig::getAuthorizationEndpoint() const {
    return m_authorization_endpoint;
}
void OAIAuthenticateOidcActionConfig::setAuthorizationEndpoint(const QString &authorization_endpoint) {
    m_authorization_endpoint = authorization_endpoint;
    m_authorization_endpoint_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_authorization_endpoint_Set() const{
    return m_authorization_endpoint_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_authorization_endpoint_Valid() const{
    return m_authorization_endpoint_isValid;
}

QString OAIAuthenticateOidcActionConfig::getTokenEndpoint() const {
    return m_token_endpoint;
}
void OAIAuthenticateOidcActionConfig::setTokenEndpoint(const QString &token_endpoint) {
    m_token_endpoint = token_endpoint;
    m_token_endpoint_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_token_endpoint_Set() const{
    return m_token_endpoint_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_token_endpoint_Valid() const{
    return m_token_endpoint_isValid;
}

QString OAIAuthenticateOidcActionConfig::getUserInfoEndpoint() const {
    return m_user_info_endpoint;
}
void OAIAuthenticateOidcActionConfig::setUserInfoEndpoint(const QString &user_info_endpoint) {
    m_user_info_endpoint = user_info_endpoint;
    m_user_info_endpoint_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_user_info_endpoint_Set() const{
    return m_user_info_endpoint_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_user_info_endpoint_Valid() const{
    return m_user_info_endpoint_isValid;
}

QString OAIAuthenticateOidcActionConfig::getClientId() const {
    return m_client_id;
}
void OAIAuthenticateOidcActionConfig::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAuthenticateOidcActionConfig::getClientSecret() const {
    return m_client_secret;
}
void OAIAuthenticateOidcActionConfig::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIAuthenticateOidcActionConfig::getSessionCookieName() const {
    return m_session_cookie_name;
}
void OAIAuthenticateOidcActionConfig::setSessionCookieName(const QString &session_cookie_name) {
    m_session_cookie_name = session_cookie_name;
    m_session_cookie_name_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_session_cookie_name_Set() const{
    return m_session_cookie_name_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_session_cookie_name_Valid() const{
    return m_session_cookie_name_isValid;
}

QString OAIAuthenticateOidcActionConfig::getScope() const {
    return m_scope;
}
void OAIAuthenticateOidcActionConfig::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_scope_Valid() const{
    return m_scope_isValid;
}

qint32 OAIAuthenticateOidcActionConfig::getSessionTimeout() const {
    return m_session_timeout;
}
void OAIAuthenticateOidcActionConfig::setSessionTimeout(const qint32 &session_timeout) {
    m_session_timeout = session_timeout;
    m_session_timeout_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_session_timeout_Set() const{
    return m_session_timeout_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_session_timeout_Valid() const{
    return m_session_timeout_isValid;
}

QMap OAIAuthenticateOidcActionConfig::getAuthenticationRequestExtraParams() const {
    return m_authentication_request_extra_params;
}
void OAIAuthenticateOidcActionConfig::setAuthenticationRequestExtraParams(const QMap &authentication_request_extra_params) {
    m_authentication_request_extra_params = authentication_request_extra_params;
    m_authentication_request_extra_params_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_authentication_request_extra_params_Set() const{
    return m_authentication_request_extra_params_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_authentication_request_extra_params_Valid() const{
    return m_authentication_request_extra_params_isValid;
}

OAIAuthenticateOidcActionConditionalBehaviorEnum OAIAuthenticateOidcActionConfig::getOnUnauthenticatedRequest() const {
    return m_on_unauthenticated_request;
}
void OAIAuthenticateOidcActionConfig::setOnUnauthenticatedRequest(const OAIAuthenticateOidcActionConditionalBehaviorEnum &on_unauthenticated_request) {
    m_on_unauthenticated_request = on_unauthenticated_request;
    m_on_unauthenticated_request_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_on_unauthenticated_request_Set() const{
    return m_on_unauthenticated_request_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_on_unauthenticated_request_Valid() const{
    return m_on_unauthenticated_request_isValid;
}

bool OAIAuthenticateOidcActionConfig::getUseExistingClientSecret() const {
    return m_use_existing_client_secret;
}
void OAIAuthenticateOidcActionConfig::setUseExistingClientSecret(const bool &use_existing_client_secret) {
    m_use_existing_client_secret = use_existing_client_secret;
    m_use_existing_client_secret_isSet = true;
}

bool OAIAuthenticateOidcActionConfig::is_use_existing_client_secret_Set() const{
    return m_use_existing_client_secret_isSet;
}

bool OAIAuthenticateOidcActionConfig::is_use_existing_client_secret_Valid() const{
    return m_use_existing_client_secret_isValid;
}

bool OAIAuthenticateOidcActionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_cookie_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_request_extra_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_unauthenticated_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_existing_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticateOidcActionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_issuer_isValid && m_authorization_endpoint_isValid && m_token_endpoint_isValid && m_user_info_endpoint_isValid && m_client_id_isValid && true;
}

} // namespace OpenAPI
