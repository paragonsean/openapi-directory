/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModifyTargetGroupInput.h
 *
 * 
 */

#ifndef OAIModifyTargetGroupInput_H
#define OAIModifyTargetGroupInput_H

#include <QJsonObject>

#include "OAICreateTargetGroupInput_Matcher.h"
#include "OAIProtocolEnum.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateTargetGroupInput_Matcher;

class OAIModifyTargetGroupInput : public OAIObject {
public:
    OAIModifyTargetGroupInput();
    OAIModifyTargetGroupInput(QString json);
    ~OAIModifyTargetGroupInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTargetGroupArn() const;
    void setTargetGroupArn(const QString &target_group_arn);
    bool is_target_group_arn_Set() const;
    bool is_target_group_arn_Valid() const;

    OAIProtocolEnum getHealthCheckProtocol() const;
    void setHealthCheckProtocol(const OAIProtocolEnum &health_check_protocol);
    bool is_health_check_protocol_Set() const;
    bool is_health_check_protocol_Valid() const;

    QString getHealthCheckPort() const;
    void setHealthCheckPort(const QString &health_check_port);
    bool is_health_check_port_Set() const;
    bool is_health_check_port_Valid() const;

    QString getHealthCheckPath() const;
    void setHealthCheckPath(const QString &health_check_path);
    bool is_health_check_path_Set() const;
    bool is_health_check_path_Valid() const;

    bool getHealthCheckEnabled() const;
    void setHealthCheckEnabled(const bool &health_check_enabled);
    bool is_health_check_enabled_Set() const;
    bool is_health_check_enabled_Valid() const;

    qint32 getHealthCheckIntervalSeconds() const;
    void setHealthCheckIntervalSeconds(const qint32 &health_check_interval_seconds);
    bool is_health_check_interval_seconds_Set() const;
    bool is_health_check_interval_seconds_Valid() const;

    qint32 getHealthCheckTimeoutSeconds() const;
    void setHealthCheckTimeoutSeconds(const qint32 &health_check_timeout_seconds);
    bool is_health_check_timeout_seconds_Set() const;
    bool is_health_check_timeout_seconds_Valid() const;

    qint32 getHealthyThresholdCount() const;
    void setHealthyThresholdCount(const qint32 &healthy_threshold_count);
    bool is_healthy_threshold_count_Set() const;
    bool is_healthy_threshold_count_Valid() const;

    qint32 getUnhealthyThresholdCount() const;
    void setUnhealthyThresholdCount(const qint32 &unhealthy_threshold_count);
    bool is_unhealthy_threshold_count_Set() const;
    bool is_unhealthy_threshold_count_Valid() const;

    OAICreateTargetGroupInput_Matcher getMatcher() const;
    void setMatcher(const OAICreateTargetGroupInput_Matcher &matcher);
    bool is_matcher_Set() const;
    bool is_matcher_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_target_group_arn;
    bool m_target_group_arn_isSet;
    bool m_target_group_arn_isValid;

    OAIProtocolEnum m_health_check_protocol;
    bool m_health_check_protocol_isSet;
    bool m_health_check_protocol_isValid;

    QString m_health_check_port;
    bool m_health_check_port_isSet;
    bool m_health_check_port_isValid;

    QString m_health_check_path;
    bool m_health_check_path_isSet;
    bool m_health_check_path_isValid;

    bool m_health_check_enabled;
    bool m_health_check_enabled_isSet;
    bool m_health_check_enabled_isValid;

    qint32 m_health_check_interval_seconds;
    bool m_health_check_interval_seconds_isSet;
    bool m_health_check_interval_seconds_isValid;

    qint32 m_health_check_timeout_seconds;
    bool m_health_check_timeout_seconds_isSet;
    bool m_health_check_timeout_seconds_isValid;

    qint32 m_healthy_threshold_count;
    bool m_healthy_threshold_count_isSet;
    bool m_healthy_threshold_count_isValid;

    qint32 m_unhealthy_threshold_count;
    bool m_unhealthy_threshold_count_isSet;
    bool m_unhealthy_threshold_count_isValid;

    OAICreateTargetGroupInput_Matcher m_matcher;
    bool m_matcher_isSet;
    bool m_matcher_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModifyTargetGroupInput)

#endif // OAIModifyTargetGroupInput_H
