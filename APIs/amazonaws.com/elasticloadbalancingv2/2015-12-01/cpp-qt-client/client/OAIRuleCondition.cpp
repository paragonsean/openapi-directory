/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleCondition::OAIRuleCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleCondition::OAIRuleCondition() {
    this->initializeModel();
}

OAIRuleCondition::~OAIRuleCondition() {}

void OAIRuleCondition::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_host_header_config_isSet = false;
    m_host_header_config_isValid = false;

    m_path_pattern_config_isSet = false;
    m_path_pattern_config_isValid = false;

    m_http_header_config_isSet = false;
    m_http_header_config_isValid = false;

    m_query_string_config_isSet = false;
    m_query_string_config_isValid = false;

    m_http_request_method_config_isSet = false;
    m_http_request_method_config_isValid = false;

    m_source_ip_config_isSet = false;
    m_source_ip_config_isValid = false;
}

void OAIRuleCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleCondition::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("Field")]);
    m_field_isSet = !json[QString("Field")].isNull() && m_field_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_host_header_config_isValid = ::OpenAPI::fromJsonValue(m_host_header_config, json[QString("HostHeaderConfig")]);
    m_host_header_config_isSet = !json[QString("HostHeaderConfig")].isNull() && m_host_header_config_isValid;

    m_path_pattern_config_isValid = ::OpenAPI::fromJsonValue(m_path_pattern_config, json[QString("PathPatternConfig")]);
    m_path_pattern_config_isSet = !json[QString("PathPatternConfig")].isNull() && m_path_pattern_config_isValid;

    m_http_header_config_isValid = ::OpenAPI::fromJsonValue(m_http_header_config, json[QString("HttpHeaderConfig")]);
    m_http_header_config_isSet = !json[QString("HttpHeaderConfig")].isNull() && m_http_header_config_isValid;

    m_query_string_config_isValid = ::OpenAPI::fromJsonValue(m_query_string_config, json[QString("QueryStringConfig")]);
    m_query_string_config_isSet = !json[QString("QueryStringConfig")].isNull() && m_query_string_config_isValid;

    m_http_request_method_config_isValid = ::OpenAPI::fromJsonValue(m_http_request_method_config, json[QString("HttpRequestMethodConfig")]);
    m_http_request_method_config_isSet = !json[QString("HttpRequestMethodConfig")].isNull() && m_http_request_method_config_isValid;

    m_source_ip_config_isValid = ::OpenAPI::fromJsonValue(m_source_ip_config, json[QString("SourceIpConfig")]);
    m_source_ip_config_isSet = !json[QString("SourceIpConfig")].isNull() && m_source_ip_config_isValid;
}

QString OAIRuleCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("Field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_host_header_config.isSet()) {
        obj.insert(QString("HostHeaderConfig"), ::OpenAPI::toJsonValue(m_host_header_config));
    }
    if (m_path_pattern_config.isSet()) {
        obj.insert(QString("PathPatternConfig"), ::OpenAPI::toJsonValue(m_path_pattern_config));
    }
    if (m_http_header_config.isSet()) {
        obj.insert(QString("HttpHeaderConfig"), ::OpenAPI::toJsonValue(m_http_header_config));
    }
    if (m_query_string_config.isSet()) {
        obj.insert(QString("QueryStringConfig"), ::OpenAPI::toJsonValue(m_query_string_config));
    }
    if (m_http_request_method_config.isSet()) {
        obj.insert(QString("HttpRequestMethodConfig"), ::OpenAPI::toJsonValue(m_http_request_method_config));
    }
    if (m_source_ip_config.isSet()) {
        obj.insert(QString("SourceIpConfig"), ::OpenAPI::toJsonValue(m_source_ip_config));
    }
    return obj;
}

QString OAIRuleCondition::getField() const {
    return m_field;
}
void OAIRuleCondition::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIRuleCondition::is_field_Set() const{
    return m_field_isSet;
}

bool OAIRuleCondition::is_field_Valid() const{
    return m_field_isValid;
}

QList OAIRuleCondition::getValues() const {
    return m_values;
}
void OAIRuleCondition::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIRuleCondition::is_values_Set() const{
    return m_values_isSet;
}

bool OAIRuleCondition::is_values_Valid() const{
    return m_values_isValid;
}

OAIRuleCondition_HostHeaderConfig OAIRuleCondition::getHostHeaderConfig() const {
    return m_host_header_config;
}
void OAIRuleCondition::setHostHeaderConfig(const OAIRuleCondition_HostHeaderConfig &host_header_config) {
    m_host_header_config = host_header_config;
    m_host_header_config_isSet = true;
}

bool OAIRuleCondition::is_host_header_config_Set() const{
    return m_host_header_config_isSet;
}

bool OAIRuleCondition::is_host_header_config_Valid() const{
    return m_host_header_config_isValid;
}

OAIRuleCondition_PathPatternConfig OAIRuleCondition::getPathPatternConfig() const {
    return m_path_pattern_config;
}
void OAIRuleCondition::setPathPatternConfig(const OAIRuleCondition_PathPatternConfig &path_pattern_config) {
    m_path_pattern_config = path_pattern_config;
    m_path_pattern_config_isSet = true;
}

bool OAIRuleCondition::is_path_pattern_config_Set() const{
    return m_path_pattern_config_isSet;
}

bool OAIRuleCondition::is_path_pattern_config_Valid() const{
    return m_path_pattern_config_isValid;
}

OAIRuleCondition_HttpHeaderConfig OAIRuleCondition::getHttpHeaderConfig() const {
    return m_http_header_config;
}
void OAIRuleCondition::setHttpHeaderConfig(const OAIRuleCondition_HttpHeaderConfig &http_header_config) {
    m_http_header_config = http_header_config;
    m_http_header_config_isSet = true;
}

bool OAIRuleCondition::is_http_header_config_Set() const{
    return m_http_header_config_isSet;
}

bool OAIRuleCondition::is_http_header_config_Valid() const{
    return m_http_header_config_isValid;
}

OAIRuleCondition_QueryStringConfig OAIRuleCondition::getQueryStringConfig() const {
    return m_query_string_config;
}
void OAIRuleCondition::setQueryStringConfig(const OAIRuleCondition_QueryStringConfig &query_string_config) {
    m_query_string_config = query_string_config;
    m_query_string_config_isSet = true;
}

bool OAIRuleCondition::is_query_string_config_Set() const{
    return m_query_string_config_isSet;
}

bool OAIRuleCondition::is_query_string_config_Valid() const{
    return m_query_string_config_isValid;
}

OAIRuleCondition_HttpRequestMethodConfig OAIRuleCondition::getHttpRequestMethodConfig() const {
    return m_http_request_method_config;
}
void OAIRuleCondition::setHttpRequestMethodConfig(const OAIRuleCondition_HttpRequestMethodConfig &http_request_method_config) {
    m_http_request_method_config = http_request_method_config;
    m_http_request_method_config_isSet = true;
}

bool OAIRuleCondition::is_http_request_method_config_Set() const{
    return m_http_request_method_config_isSet;
}

bool OAIRuleCondition::is_http_request_method_config_Valid() const{
    return m_http_request_method_config_isValid;
}

OAIRuleCondition_SourceIpConfig OAIRuleCondition::getSourceIpConfig() const {
    return m_source_ip_config;
}
void OAIRuleCondition::setSourceIpConfig(const OAIRuleCondition_SourceIpConfig &source_ip_config) {
    m_source_ip_config = source_ip_config;
    m_source_ip_config_isSet = true;
}

bool OAIRuleCondition::is_source_ip_config_Set() const{
    return m_source_ip_config_isSet;
}

bool OAIRuleCondition::is_source_ip_config_Valid() const{
    return m_source_ip_config_isValid;
}

bool OAIRuleCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_header_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_pattern_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_header_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_request_method_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
