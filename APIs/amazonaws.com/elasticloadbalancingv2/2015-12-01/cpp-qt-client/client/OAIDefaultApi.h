/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAction.h"
#include "OAIAddListenerCertificatesInput.h"
#include "OAIAddListenerCertificatesOutput.h"
#include "OAIAddTagsInput.h"
#include "OAICertificate.h"
#include "OAICreateListenerInput.h"
#include "OAICreateListenerOutput.h"
#include "OAICreateLoadBalancerInput.h"
#include "OAICreateLoadBalancerOutput.h"
#include "OAICreateRuleInput.h"
#include "OAICreateRuleOutput.h"
#include "OAICreateTargetGroupInput.h"
#include "OAICreateTargetGroupOutput.h"
#include "OAIDeleteListenerInput.h"
#include "OAIDeleteLoadBalancerInput.h"
#include "OAIDeleteRuleInput.h"
#include "OAIDeleteTargetGroupInput.h"
#include "OAIDeregisterTargetsInput.h"
#include "OAIDescribeAccountLimitsInput.h"
#include "OAIDescribeAccountLimitsOutput.h"
#include "OAIDescribeListenerCertificatesInput.h"
#include "OAIDescribeListenerCertificatesOutput.h"
#include "OAIDescribeListenersInput.h"
#include "OAIDescribeListenersOutput.h"
#include "OAIDescribeLoadBalancerAttributesInput.h"
#include "OAIDescribeLoadBalancerAttributesOutput.h"
#include "OAIDescribeLoadBalancersInput.h"
#include "OAIDescribeLoadBalancersOutput.h"
#include "OAIDescribeRulesInput.h"
#include "OAIDescribeRulesOutput.h"
#include "OAIDescribeSSLPoliciesInput.h"
#include "OAIDescribeSSLPoliciesOutput.h"
#include "OAIDescribeTagsInput.h"
#include "OAIDescribeTagsOutput.h"
#include "OAIDescribeTargetGroupAttributesInput.h"
#include "OAIDescribeTargetGroupAttributesOutput.h"
#include "OAIDescribeTargetGroupsInput.h"
#include "OAIDescribeTargetGroupsOutput.h"
#include "OAIDescribeTargetHealthInput.h"
#include "OAIDescribeTargetHealthOutput.h"
#include "OAIGET_CreateTargetGroup_Matcher_parameter.h"
#include "OAILoadBalancerAttribute.h"
#include "OAIModifyListenerInput.h"
#include "OAIModifyListenerOutput.h"
#include "OAIModifyLoadBalancerAttributesInput.h"
#include "OAIModifyLoadBalancerAttributesOutput.h"
#include "OAIModifyRuleInput.h"
#include "OAIModifyRuleOutput.h"
#include "OAIModifyTargetGroupAttributesInput.h"
#include "OAIModifyTargetGroupAttributesOutput.h"
#include "OAIModifyTargetGroupInput.h"
#include "OAIModifyTargetGroupOutput.h"
#include "OAIObject.h"
#include "OAIRegisterTargetsInput.h"
#include "OAIRemoveListenerCertificatesInput.h"
#include "OAIRemoveTagsInput.h"
#include "OAIRuleCondition.h"
#include "OAIRulePriorityPair.h"
#include "OAISetIpAddressTypeInput.h"
#include "OAISetIpAddressTypeOutput.h"
#include "OAISetRulePrioritiesInput.h"
#include "OAISetRulePrioritiesOutput.h"
#include "OAISetSecurityGroupsInput.h"
#include "OAISetSecurityGroupsOutput.h"
#include "OAISetSubnetsInput.h"
#include "OAISetSubnetsOutput.h"
#include "OAISubnetMapping.h"
#include "OAITag.h"
#include "OAITargetDescription.h"
#include "OAITargetGroupAttribute.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  listener_arn QString [required]
    * @param[in]  certificates QList<OAICertificate> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAddListenerCertificates(const QString &listener_arn, const QList<OAICertificate> &certificates, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arns QList<QString> [required]
    * @param[in]  tags QList<OAITag> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAddTags(const QList<QString> &resource_arns, const QList<OAITag> &tags, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_arn QString [required]
    * @param[in]  default_actions QList<OAIAction> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  protocol QString [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  ssl_policy QString [optional]
    * @param[in]  certificates QList<OAICertificate> [optional]
    * @param[in]  alpn_policy QList<QString> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    */
    virtual void gETCreateListener(const QString &load_balancer_arn, const QList<OAIAction> &default_actions, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ssl_policy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAICertificate>> &certificates = ::OpenAPI::OptionalParam<QList<OAICertificate>>(), const ::OpenAPI::OptionalParam<QList<QString>> &alpn_policy = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  subnets QList<QString> [optional]
    * @param[in]  subnet_mappings QList<OAISubnetMapping> [optional]
    * @param[in]  security_groups QList<QString> [optional]
    * @param[in]  scheme QString [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  type QString [optional]
    * @param[in]  ip_address_type QString [optional]
    * @param[in]  customer_owned_ipv4_pool QString [optional]
    */
    virtual void gETCreateLoadBalancer(const QString &name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &subnets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAISubnetMapping>> &subnet_mappings = ::OpenAPI::OptionalParam<QList<OAISubnetMapping>>(), const ::OpenAPI::OptionalParam<QList<QString>> &security_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &scheme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip_address_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_owned_ipv4_pool = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  listener_arn QString [required]
    * @param[in]  conditions QList<OAIRuleCondition> [required]
    * @param[in]  priority qint32 [required]
    * @param[in]  actions QList<OAIAction> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAITag> [optional]
    */
    virtual void gETCreateRule(const QString &listener_arn, const QList<OAIRuleCondition> &conditions, const qint32 &priority, const QList<OAIAction> &actions, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  protocol QString [optional]
    * @param[in]  protocol_version QString [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  vpc_id QString [optional]
    * @param[in]  health_check_protocol QString [optional]
    * @param[in]  health_check_port QString [optional]
    * @param[in]  health_check_enabled bool [optional]
    * @param[in]  health_check_path QString [optional]
    * @param[in]  health_check_interval_seconds qint32 [optional]
    * @param[in]  health_check_timeout_seconds qint32 [optional]
    * @param[in]  healthy_threshold_count qint32 [optional]
    * @param[in]  unhealthy_threshold_count qint32 [optional]
    * @param[in]  matcher OAIGET_CreateTargetGroup_Matcher_parameter [optional]
    * @param[in]  target_type QString [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  ip_address_type QString [optional]
    */
    virtual void gETCreateTargetGroup(const QString &name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &vpc_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &health_check_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &health_check_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &health_check_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &health_check_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &health_check_interval_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &health_check_timeout_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &healthy_threshold_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &unhealthy_threshold_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGET_CreateTargetGroup_Matcher_parameter> &matcher = ::OpenAPI::OptionalParam<OAIGET_CreateTargetGroup_Matcher_parameter>(), const ::OpenAPI::OptionalParam<QString> &target_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QString> &ip_address_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  listener_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteListener(const QString &listener_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteLoadBalancer(const QString &load_balancer_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteRule(const QString &rule_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  target_group_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteTargetGroup(const QString &target_group_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  target_group_arn QString [required]
    * @param[in]  targets QList<OAITargetDescription> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeregisterTargets(const QString &target_group_arn, const QList<OAITargetDescription> &targets, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETDescribeAccountLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  listener_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETDescribeListenerCertificates(const QString &listener_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  load_balancer_arn QString [optional]
    * @param[in]  listener_arns QList<QString> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETDescribeListeners(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &load_balancer_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &listener_arns = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  load_balancer_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeLoadBalancerAttributes(const QString &load_balancer_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  load_balancer_arns QList<QString> [optional]
    * @param[in]  names QList<QString> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETDescribeLoadBalancers(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &load_balancer_arns = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  listener_arn QString [optional]
    * @param[in]  rule_arns QList<QString> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETDescribeRules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listener_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &rule_arns = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  names QList<QString> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  load_balancer_type QString [optional]
    */
    virtual void gETDescribeSSLPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &load_balancer_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arns QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeTags(const QList<QString> &resource_arns, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  target_group_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeTargetGroupAttributes(const QString &target_group_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  load_balancer_arn QString [optional]
    * @param[in]  target_group_arns QList<QString> [optional]
    * @param[in]  names QList<QString> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETDescribeTargetGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &load_balancer_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &target_group_arns = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  target_group_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  targets QList<OAITargetDescription> [optional]
    */
    virtual void gETDescribeTargetHealth(const QString &target_group_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITargetDescription>> &targets = ::OpenAPI::OptionalParam<QList<OAITargetDescription>>());

    /**
    * @param[in]  listener_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  protocol QString [optional]
    * @param[in]  ssl_policy QString [optional]
    * @param[in]  certificates QList<OAICertificate> [optional]
    * @param[in]  default_actions QList<OAIAction> [optional]
    * @param[in]  alpn_policy QList<QString> [optional]
    */
    virtual void gETModifyListener(const QString &listener_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssl_policy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAICertificate>> &certificates = ::OpenAPI::OptionalParam<QList<OAICertificate>>(), const ::OpenAPI::OptionalParam<QList<OAIAction>> &default_actions = ::OpenAPI::OptionalParam<QList<OAIAction>>(), const ::OpenAPI::OptionalParam<QList<QString>> &alpn_policy = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  load_balancer_arn QString [required]
    * @param[in]  attributes QList<OAILoadBalancerAttribute> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETModifyLoadBalancerAttributes(const QString &load_balancer_arn, const QList<OAILoadBalancerAttribute> &attributes, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  conditions QList<OAIRuleCondition> [optional]
    * @param[in]  actions QList<OAIAction> [optional]
    */
    virtual void gETModifyRule(const QString &rule_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIRuleCondition>> &conditions = ::OpenAPI::OptionalParam<QList<OAIRuleCondition>>(), const ::OpenAPI::OptionalParam<QList<OAIAction>> &actions = ::OpenAPI::OptionalParam<QList<OAIAction>>());

    /**
    * @param[in]  target_group_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  health_check_protocol QString [optional]
    * @param[in]  health_check_port QString [optional]
    * @param[in]  health_check_path QString [optional]
    * @param[in]  health_check_enabled bool [optional]
    * @param[in]  health_check_interval_seconds qint32 [optional]
    * @param[in]  health_check_timeout_seconds qint32 [optional]
    * @param[in]  healthy_threshold_count qint32 [optional]
    * @param[in]  unhealthy_threshold_count qint32 [optional]
    * @param[in]  matcher OAIGET_CreateTargetGroup_Matcher_parameter [optional]
    */
    virtual void gETModifyTargetGroup(const QString &target_group_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &health_check_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &health_check_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &health_check_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &health_check_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &health_check_interval_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &health_check_timeout_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &healthy_threshold_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &unhealthy_threshold_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGET_CreateTargetGroup_Matcher_parameter> &matcher = ::OpenAPI::OptionalParam<OAIGET_CreateTargetGroup_Matcher_parameter>());

    /**
    * @param[in]  target_group_arn QString [required]
    * @param[in]  attributes QList<OAITargetGroupAttribute> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETModifyTargetGroupAttributes(const QString &target_group_arn, const QList<OAITargetGroupAttribute> &attributes, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  target_group_arn QString [required]
    * @param[in]  targets QList<OAITargetDescription> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRegisterTargets(const QString &target_group_arn, const QList<OAITargetDescription> &targets, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  listener_arn QString [required]
    * @param[in]  certificates QList<OAICertificate> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRemoveListenerCertificates(const QString &listener_arn, const QList<OAICertificate> &certificates, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arns QList<QString> [required]
    * @param[in]  tag_keys QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRemoveTags(const QList<QString> &resource_arns, const QList<QString> &tag_keys, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_arn QString [required]
    * @param[in]  ip_address_type QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetIpAddressType(const QString &load_balancer_arn, const QString &ip_address_type, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_priorities QList<OAIRulePriorityPair> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetRulePriorities(const QList<OAIRulePriorityPair> &rule_priorities, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_arn QString [required]
    * @param[in]  security_groups QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetSecurityGroups(const QString &load_balancer_arn, const QList<QString> &security_groups, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  load_balancer_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  subnets QList<QString> [optional]
    * @param[in]  subnet_mappings QList<OAISubnetMapping> [optional]
    * @param[in]  ip_address_type QString [optional]
    */
    virtual void gETSetSubnets(const QString &load_balancer_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &subnets = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAISubnetMapping>> &subnet_mappings = ::OpenAPI::OptionalParam<QList<OAISubnetMapping>>(), const ::OpenAPI::OptionalParam<QString> &ip_address_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_add_listener_certificates_input OAIAddListenerCertificatesInput [optional]
    */
    virtual void pOSTAddListenerCertificates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddListenerCertificatesInput> &oai_add_listener_certificates_input = ::OpenAPI::OptionalParam<OAIAddListenerCertificatesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_add_tags_input OAIAddTagsInput [optional]
    */
    virtual void pOSTAddTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddTagsInput> &oai_add_tags_input = ::OpenAPI::OptionalParam<OAIAddTagsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_listener_input OAICreateListenerInput [optional]
    */
    virtual void pOSTCreateListener(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateListenerInput> &oai_create_listener_input = ::OpenAPI::OptionalParam<OAICreateListenerInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_load_balancer_input OAICreateLoadBalancerInput [optional]
    */
    virtual void pOSTCreateLoadBalancer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateLoadBalancerInput> &oai_create_load_balancer_input = ::OpenAPI::OptionalParam<OAICreateLoadBalancerInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_rule_input OAICreateRuleInput [optional]
    */
    virtual void pOSTCreateRule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateRuleInput> &oai_create_rule_input = ::OpenAPI::OptionalParam<OAICreateRuleInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_target_group_input OAICreateTargetGroupInput [optional]
    */
    virtual void pOSTCreateTargetGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateTargetGroupInput> &oai_create_target_group_input = ::OpenAPI::OptionalParam<OAICreateTargetGroupInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_listener_input OAIDeleteListenerInput [optional]
    */
    virtual void pOSTDeleteListener(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteListenerInput> &oai_delete_listener_input = ::OpenAPI::OptionalParam<OAIDeleteListenerInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_load_balancer_input OAIDeleteLoadBalancerInput [optional]
    */
    virtual void pOSTDeleteLoadBalancer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteLoadBalancerInput> &oai_delete_load_balancer_input = ::OpenAPI::OptionalParam<OAIDeleteLoadBalancerInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_rule_input OAIDeleteRuleInput [optional]
    */
    virtual void pOSTDeleteRule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteRuleInput> &oai_delete_rule_input = ::OpenAPI::OptionalParam<OAIDeleteRuleInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_target_group_input OAIDeleteTargetGroupInput [optional]
    */
    virtual void pOSTDeleteTargetGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteTargetGroupInput> &oai_delete_target_group_input = ::OpenAPI::OptionalParam<OAIDeleteTargetGroupInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_deregister_targets_input OAIDeregisterTargetsInput [optional]
    */
    virtual void pOSTDeregisterTargets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeregisterTargetsInput> &oai_deregister_targets_input = ::OpenAPI::OptionalParam<OAIDeregisterTargetsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_account_limits_input OAIDescribeAccountLimitsInput [optional]
    */
    virtual void pOSTDescribeAccountLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAccountLimitsInput> &oai_describe_account_limits_input = ::OpenAPI::OptionalParam<OAIDescribeAccountLimitsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_listener_certificates_input OAIDescribeListenerCertificatesInput [optional]
    */
    virtual void pOSTDescribeListenerCertificates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeListenerCertificatesInput> &oai_describe_listener_certificates_input = ::OpenAPI::OptionalParam<OAIDescribeListenerCertificatesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_listeners_input OAIDescribeListenersInput [optional]
    */
    virtual void pOSTDescribeListeners(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeListenersInput> &oai_describe_listeners_input = ::OpenAPI::OptionalParam<OAIDescribeListenersInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_load_balancer_attributes_input OAIDescribeLoadBalancerAttributesInput [optional]
    */
    virtual void pOSTDescribeLoadBalancerAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerAttributesInput> &oai_describe_load_balancer_attributes_input = ::OpenAPI::OptionalParam<OAIDescribeLoadBalancerAttributesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_load_balancers_input OAIDescribeLoadBalancersInput [optional]
    */
    virtual void pOSTDescribeLoadBalancers(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeLoadBalancersInput> &oai_describe_load_balancers_input = ::OpenAPI::OptionalParam<OAIDescribeLoadBalancersInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_rules_input OAIDescribeRulesInput [optional]
    */
    virtual void pOSTDescribeRules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeRulesInput> &oai_describe_rules_input = ::OpenAPI::OptionalParam<OAIDescribeRulesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_ssl_policies_input OAIDescribeSSLPoliciesInput [optional]
    */
    virtual void pOSTDescribeSSLPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeSSLPoliciesInput> &oai_describe_ssl_policies_input = ::OpenAPI::OptionalParam<OAIDescribeSSLPoliciesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_tags_input OAIDescribeTagsInput [optional]
    */
    virtual void pOSTDescribeTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTagsInput> &oai_describe_tags_input = ::OpenAPI::OptionalParam<OAIDescribeTagsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_target_group_attributes_input OAIDescribeTargetGroupAttributesInput [optional]
    */
    virtual void pOSTDescribeTargetGroupAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTargetGroupAttributesInput> &oai_describe_target_group_attributes_input = ::OpenAPI::OptionalParam<OAIDescribeTargetGroupAttributesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_target_groups_input OAIDescribeTargetGroupsInput [optional]
    */
    virtual void pOSTDescribeTargetGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTargetGroupsInput> &oai_describe_target_groups_input = ::OpenAPI::OptionalParam<OAIDescribeTargetGroupsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_target_health_input OAIDescribeTargetHealthInput [optional]
    */
    virtual void pOSTDescribeTargetHealth(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTargetHealthInput> &oai_describe_target_health_input = ::OpenAPI::OptionalParam<OAIDescribeTargetHealthInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_listener_input OAIModifyListenerInput [optional]
    */
    virtual void pOSTModifyListener(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyListenerInput> &oai_modify_listener_input = ::OpenAPI::OptionalParam<OAIModifyListenerInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_load_balancer_attributes_input OAIModifyLoadBalancerAttributesInput [optional]
    */
    virtual void pOSTModifyLoadBalancerAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyLoadBalancerAttributesInput> &oai_modify_load_balancer_attributes_input = ::OpenAPI::OptionalParam<OAIModifyLoadBalancerAttributesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_rule_input OAIModifyRuleInput [optional]
    */
    virtual void pOSTModifyRule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyRuleInput> &oai_modify_rule_input = ::OpenAPI::OptionalParam<OAIModifyRuleInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_target_group_input OAIModifyTargetGroupInput [optional]
    */
    virtual void pOSTModifyTargetGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyTargetGroupInput> &oai_modify_target_group_input = ::OpenAPI::OptionalParam<OAIModifyTargetGroupInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_target_group_attributes_input OAIModifyTargetGroupAttributesInput [optional]
    */
    virtual void pOSTModifyTargetGroupAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyTargetGroupAttributesInput> &oai_modify_target_group_attributes_input = ::OpenAPI::OptionalParam<OAIModifyTargetGroupAttributesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_register_targets_input OAIRegisterTargetsInput [optional]
    */
    virtual void pOSTRegisterTargets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRegisterTargetsInput> &oai_register_targets_input = ::OpenAPI::OptionalParam<OAIRegisterTargetsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_remove_listener_certificates_input OAIRemoveListenerCertificatesInput [optional]
    */
    virtual void pOSTRemoveListenerCertificates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveListenerCertificatesInput> &oai_remove_listener_certificates_input = ::OpenAPI::OptionalParam<OAIRemoveListenerCertificatesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_remove_tags_input OAIRemoveTagsInput [optional]
    */
    virtual void pOSTRemoveTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveTagsInput> &oai_remove_tags_input = ::OpenAPI::OptionalParam<OAIRemoveTagsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_ip_address_type_input OAISetIpAddressTypeInput [optional]
    */
    virtual void pOSTSetIpAddressType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIpAddressTypeInput> &oai_set_ip_address_type_input = ::OpenAPI::OptionalParam<OAISetIpAddressTypeInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_rule_priorities_input OAISetRulePrioritiesInput [optional]
    */
    virtual void pOSTSetRulePriorities(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetRulePrioritiesInput> &oai_set_rule_priorities_input = ::OpenAPI::OptionalParam<OAISetRulePrioritiesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_security_groups_input OAISetSecurityGroupsInput [optional]
    */
    virtual void pOSTSetSecurityGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetSecurityGroupsInput> &oai_set_security_groups_input = ::OpenAPI::OptionalParam<OAISetSecurityGroupsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_subnets_input OAISetSubnetsInput [optional]
    */
    virtual void pOSTSetSubnets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetSubnetsInput> &oai_set_subnets_input = ::OpenAPI::OptionalParam<OAISetSubnetsInput>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETAddListenerCertificatesCallback(OAIHttpRequestWorker *worker);
    void gETAddTagsCallback(OAIHttpRequestWorker *worker);
    void gETCreateListenerCallback(OAIHttpRequestWorker *worker);
    void gETCreateLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void gETCreateRuleCallback(OAIHttpRequestWorker *worker);
    void gETCreateTargetGroupCallback(OAIHttpRequestWorker *worker);
    void gETDeleteListenerCallback(OAIHttpRequestWorker *worker);
    void gETDeleteLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void gETDeleteRuleCallback(OAIHttpRequestWorker *worker);
    void gETDeleteTargetGroupCallback(OAIHttpRequestWorker *worker);
    void gETDeregisterTargetsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAccountLimitsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeListenerCertificatesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeListenersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLoadBalancerAttributesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeRulesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeSSLPoliciesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTagsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTargetGroupAttributesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTargetHealthCallback(OAIHttpRequestWorker *worker);
    void gETModifyListenerCallback(OAIHttpRequestWorker *worker);
    void gETModifyLoadBalancerAttributesCallback(OAIHttpRequestWorker *worker);
    void gETModifyRuleCallback(OAIHttpRequestWorker *worker);
    void gETModifyTargetGroupCallback(OAIHttpRequestWorker *worker);
    void gETModifyTargetGroupAttributesCallback(OAIHttpRequestWorker *worker);
    void gETRegisterTargetsCallback(OAIHttpRequestWorker *worker);
    void gETRemoveListenerCertificatesCallback(OAIHttpRequestWorker *worker);
    void gETRemoveTagsCallback(OAIHttpRequestWorker *worker);
    void gETSetIpAddressTypeCallback(OAIHttpRequestWorker *worker);
    void gETSetRulePrioritiesCallback(OAIHttpRequestWorker *worker);
    void gETSetSecurityGroupsCallback(OAIHttpRequestWorker *worker);
    void gETSetSubnetsCallback(OAIHttpRequestWorker *worker);
    void pOSTAddListenerCertificatesCallback(OAIHttpRequestWorker *worker);
    void pOSTAddTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateListenerCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateRuleCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateTargetGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteListenerCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteLoadBalancerCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteRuleCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteTargetGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTDeregisterTargetsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAccountLimitsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeListenerCertificatesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeListenersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLoadBalancerAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLoadBalancersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeRulesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeSSLPoliciesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTargetGroupAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTargetGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTargetHealthCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyListenerCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyLoadBalancerAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyRuleCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyTargetGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyTargetGroupAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTRegisterTargetsCallback(OAIHttpRequestWorker *worker);
    void pOSTRemoveListenerCertificatesCallback(OAIHttpRequestWorker *worker);
    void pOSTRemoveTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTSetIpAddressTypeCallback(OAIHttpRequestWorker *worker);
    void pOSTSetRulePrioritiesCallback(OAIHttpRequestWorker *worker);
    void pOSTSetSecurityGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTSetSubnetsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETAddListenerCertificatesSignal(OAIAddListenerCertificatesOutput summary);
    void gETAddTagsSignal(OAIObject summary);
    void gETCreateListenerSignal(OAICreateListenerOutput summary);
    void gETCreateLoadBalancerSignal(OAICreateLoadBalancerOutput summary);
    void gETCreateRuleSignal(OAICreateRuleOutput summary);
    void gETCreateTargetGroupSignal(OAICreateTargetGroupOutput summary);
    void gETDeleteListenerSignal(OAIObject summary);
    void gETDeleteLoadBalancerSignal(OAIObject summary);
    void gETDeleteRuleSignal(OAIObject summary);
    void gETDeleteTargetGroupSignal(OAIObject summary);
    void gETDeregisterTargetsSignal(OAIObject summary);
    void gETDescribeAccountLimitsSignal(OAIDescribeAccountLimitsOutput summary);
    void gETDescribeListenerCertificatesSignal(OAIDescribeListenerCertificatesOutput summary);
    void gETDescribeListenersSignal(OAIDescribeListenersOutput summary);
    void gETDescribeLoadBalancerAttributesSignal(OAIDescribeLoadBalancerAttributesOutput summary);
    void gETDescribeLoadBalancersSignal(OAIDescribeLoadBalancersOutput summary);
    void gETDescribeRulesSignal(OAIDescribeRulesOutput summary);
    void gETDescribeSSLPoliciesSignal(OAIDescribeSSLPoliciesOutput summary);
    void gETDescribeTagsSignal(OAIDescribeTagsOutput summary);
    void gETDescribeTargetGroupAttributesSignal(OAIDescribeTargetGroupAttributesOutput summary);
    void gETDescribeTargetGroupsSignal(OAIDescribeTargetGroupsOutput summary);
    void gETDescribeTargetHealthSignal(OAIDescribeTargetHealthOutput summary);
    void gETModifyListenerSignal(OAIModifyListenerOutput summary);
    void gETModifyLoadBalancerAttributesSignal(OAIModifyLoadBalancerAttributesOutput summary);
    void gETModifyRuleSignal(OAIModifyRuleOutput summary);
    void gETModifyTargetGroupSignal(OAIModifyTargetGroupOutput summary);
    void gETModifyTargetGroupAttributesSignal(OAIModifyTargetGroupAttributesOutput summary);
    void gETRegisterTargetsSignal(OAIObject summary);
    void gETRemoveListenerCertificatesSignal(OAIObject summary);
    void gETRemoveTagsSignal(OAIObject summary);
    void gETSetIpAddressTypeSignal(OAISetIpAddressTypeOutput summary);
    void gETSetRulePrioritiesSignal(OAISetRulePrioritiesOutput summary);
    void gETSetSecurityGroupsSignal(OAISetSecurityGroupsOutput summary);
    void gETSetSubnetsSignal(OAISetSubnetsOutput summary);
    void pOSTAddListenerCertificatesSignal(OAIAddListenerCertificatesOutput summary);
    void pOSTAddTagsSignal(OAIObject summary);
    void pOSTCreateListenerSignal(OAICreateListenerOutput summary);
    void pOSTCreateLoadBalancerSignal(OAICreateLoadBalancerOutput summary);
    void pOSTCreateRuleSignal(OAICreateRuleOutput summary);
    void pOSTCreateTargetGroupSignal(OAICreateTargetGroupOutput summary);
    void pOSTDeleteListenerSignal(OAIObject summary);
    void pOSTDeleteLoadBalancerSignal(OAIObject summary);
    void pOSTDeleteRuleSignal(OAIObject summary);
    void pOSTDeleteTargetGroupSignal(OAIObject summary);
    void pOSTDeregisterTargetsSignal(OAIObject summary);
    void pOSTDescribeAccountLimitsSignal(OAIDescribeAccountLimitsOutput summary);
    void pOSTDescribeListenerCertificatesSignal(OAIDescribeListenerCertificatesOutput summary);
    void pOSTDescribeListenersSignal(OAIDescribeListenersOutput summary);
    void pOSTDescribeLoadBalancerAttributesSignal(OAIDescribeLoadBalancerAttributesOutput summary);
    void pOSTDescribeLoadBalancersSignal(OAIDescribeLoadBalancersOutput summary);
    void pOSTDescribeRulesSignal(OAIDescribeRulesOutput summary);
    void pOSTDescribeSSLPoliciesSignal(OAIDescribeSSLPoliciesOutput summary);
    void pOSTDescribeTagsSignal(OAIDescribeTagsOutput summary);
    void pOSTDescribeTargetGroupAttributesSignal(OAIDescribeTargetGroupAttributesOutput summary);
    void pOSTDescribeTargetGroupsSignal(OAIDescribeTargetGroupsOutput summary);
    void pOSTDescribeTargetHealthSignal(OAIDescribeTargetHealthOutput summary);
    void pOSTModifyListenerSignal(OAIModifyListenerOutput summary);
    void pOSTModifyLoadBalancerAttributesSignal(OAIModifyLoadBalancerAttributesOutput summary);
    void pOSTModifyRuleSignal(OAIModifyRuleOutput summary);
    void pOSTModifyTargetGroupSignal(OAIModifyTargetGroupOutput summary);
    void pOSTModifyTargetGroupAttributesSignal(OAIModifyTargetGroupAttributesOutput summary);
    void pOSTRegisterTargetsSignal(OAIObject summary);
    void pOSTRemoveListenerCertificatesSignal(OAIObject summary);
    void pOSTRemoveTagsSignal(OAIObject summary);
    void pOSTSetIpAddressTypeSignal(OAISetIpAddressTypeOutput summary);
    void pOSTSetRulePrioritiesSignal(OAISetRulePrioritiesOutput summary);
    void pOSTSetSecurityGroupsSignal(OAISetSecurityGroupsOutput summary);
    void pOSTSetSubnetsSignal(OAISetSubnetsOutput summary);


    void gETAddListenerCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIAddListenerCertificatesOutput summary);
    void gETAddTagsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateListenerSignalFull(OAIHttpRequestWorker *worker, OAICreateListenerOutput summary);
    void gETCreateLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAICreateLoadBalancerOutput summary);
    void gETCreateRuleSignalFull(OAIHttpRequestWorker *worker, OAICreateRuleOutput summary);
    void gETCreateTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateTargetGroupOutput summary);
    void gETDeleteListenerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeregisterTargetsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDescribeAccountLimitsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountLimitsOutput summary);
    void gETDescribeListenerCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeListenerCertificatesOutput summary);
    void gETDescribeListenersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeListenersOutput summary);
    void gETDescribeLoadBalancerAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerAttributesOutput summary);
    void gETDescribeLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancersOutput summary);
    void gETDescribeRulesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeRulesOutput summary);
    void gETDescribeSSLPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSSLPoliciesOutput summary);
    void gETDescribeTagsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTagsOutput summary);
    void gETDescribeTargetGroupAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTargetGroupAttributesOutput summary);
    void gETDescribeTargetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTargetGroupsOutput summary);
    void gETDescribeTargetHealthSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTargetHealthOutput summary);
    void gETModifyListenerSignalFull(OAIHttpRequestWorker *worker, OAIModifyListenerOutput summary);
    void gETModifyLoadBalancerAttributesSignalFull(OAIHttpRequestWorker *worker, OAIModifyLoadBalancerAttributesOutput summary);
    void gETModifyRuleSignalFull(OAIHttpRequestWorker *worker, OAIModifyRuleOutput summary);
    void gETModifyTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIModifyTargetGroupOutput summary);
    void gETModifyTargetGroupAttributesSignalFull(OAIHttpRequestWorker *worker, OAIModifyTargetGroupAttributesOutput summary);
    void gETRegisterTargetsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETRemoveListenerCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETRemoveTagsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetIpAddressTypeSignalFull(OAIHttpRequestWorker *worker, OAISetIpAddressTypeOutput summary);
    void gETSetRulePrioritiesSignalFull(OAIHttpRequestWorker *worker, OAISetRulePrioritiesOutput summary);
    void gETSetSecurityGroupsSignalFull(OAIHttpRequestWorker *worker, OAISetSecurityGroupsOutput summary);
    void gETSetSubnetsSignalFull(OAIHttpRequestWorker *worker, OAISetSubnetsOutput summary);
    void pOSTAddListenerCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIAddListenerCertificatesOutput summary);
    void pOSTAddTagsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateListenerSignalFull(OAIHttpRequestWorker *worker, OAICreateListenerOutput summary);
    void pOSTCreateLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAICreateLoadBalancerOutput summary);
    void pOSTCreateRuleSignalFull(OAIHttpRequestWorker *worker, OAICreateRuleOutput summary);
    void pOSTCreateTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateTargetGroupOutput summary);
    void pOSTDeleteListenerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteLoadBalancerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeregisterTargetsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDescribeAccountLimitsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountLimitsOutput summary);
    void pOSTDescribeListenerCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeListenerCertificatesOutput summary);
    void pOSTDescribeListenersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeListenersOutput summary);
    void pOSTDescribeLoadBalancerAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancerAttributesOutput summary);
    void pOSTDescribeLoadBalancersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeLoadBalancersOutput summary);
    void pOSTDescribeRulesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeRulesOutput summary);
    void pOSTDescribeSSLPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSSLPoliciesOutput summary);
    void pOSTDescribeTagsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTagsOutput summary);
    void pOSTDescribeTargetGroupAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTargetGroupAttributesOutput summary);
    void pOSTDescribeTargetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTargetGroupsOutput summary);
    void pOSTDescribeTargetHealthSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTargetHealthOutput summary);
    void pOSTModifyListenerSignalFull(OAIHttpRequestWorker *worker, OAIModifyListenerOutput summary);
    void pOSTModifyLoadBalancerAttributesSignalFull(OAIHttpRequestWorker *worker, OAIModifyLoadBalancerAttributesOutput summary);
    void pOSTModifyRuleSignalFull(OAIHttpRequestWorker *worker, OAIModifyRuleOutput summary);
    void pOSTModifyTargetGroupSignalFull(OAIHttpRequestWorker *worker, OAIModifyTargetGroupOutput summary);
    void pOSTModifyTargetGroupAttributesSignalFull(OAIHttpRequestWorker *worker, OAIModifyTargetGroupAttributesOutput summary);
    void pOSTRegisterTargetsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTRemoveListenerCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTRemoveTagsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetIpAddressTypeSignalFull(OAIHttpRequestWorker *worker, OAISetIpAddressTypeOutput summary);
    void pOSTSetRulePrioritiesSignalFull(OAIHttpRequestWorker *worker, OAISetRulePrioritiesOutput summary);
    void pOSTSetSecurityGroupsSignalFull(OAIHttpRequestWorker *worker, OAISetSecurityGroupsOutput summary);
    void pOSTSetSubnetsSignalFull(OAIHttpRequestWorker *worker, OAISetSubnetsOutput summary);

    Q_DECL_DEPRECATED_X("Use gETAddListenerCertificatesSignalError() instead")
    void gETAddListenerCertificatesSignalE(OAIAddListenerCertificatesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddListenerCertificatesSignalError(OAIAddListenerCertificatesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAddTagsSignalError() instead")
    void gETAddTagsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddTagsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateListenerSignalError() instead")
    void gETCreateListenerSignalE(OAICreateListenerOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateListenerSignalError(OAICreateListenerOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLoadBalancerSignalError() instead")
    void gETCreateLoadBalancerSignalE(OAICreateLoadBalancerOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLoadBalancerSignalError(OAICreateLoadBalancerOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateRuleSignalError() instead")
    void gETCreateRuleSignalE(OAICreateRuleOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateRuleSignalError(OAICreateRuleOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateTargetGroupSignalError() instead")
    void gETCreateTargetGroupSignalE(OAICreateTargetGroupOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateTargetGroupSignalError(OAICreateTargetGroupOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteListenerSignalError() instead")
    void gETDeleteListenerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteListenerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLoadBalancerSignalError() instead")
    void gETDeleteLoadBalancerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLoadBalancerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteRuleSignalError() instead")
    void gETDeleteRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteTargetGroupSignalError() instead")
    void gETDeleteTargetGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteTargetGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeregisterTargetsSignalError() instead")
    void gETDeregisterTargetsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeregisterTargetsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountLimitsSignalError() instead")
    void gETDescribeAccountLimitsSignalE(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountLimitsSignalError(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeListenerCertificatesSignalError() instead")
    void gETDescribeListenerCertificatesSignalE(OAIDescribeListenerCertificatesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeListenerCertificatesSignalError(OAIDescribeListenerCertificatesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeListenersSignalError() instead")
    void gETDescribeListenersSignalE(OAIDescribeListenersOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeListenersSignalError(OAIDescribeListenersOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerAttributesSignalError() instead")
    void gETDescribeLoadBalancerAttributesSignalE(OAIDescribeLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerAttributesSignalError(OAIDescribeLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancersSignalError() instead")
    void gETDescribeLoadBalancersSignalE(OAIDescribeLoadBalancersOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancersSignalError(OAIDescribeLoadBalancersOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeRulesSignalError() instead")
    void gETDescribeRulesSignalE(OAIDescribeRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeRulesSignalError(OAIDescribeRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSSLPoliciesSignalError() instead")
    void gETDescribeSSLPoliciesSignalE(OAIDescribeSSLPoliciesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSSLPoliciesSignalError(OAIDescribeSSLPoliciesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTagsSignalError() instead")
    void gETDescribeTagsSignalE(OAIDescribeTagsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTagsSignalError(OAIDescribeTagsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTargetGroupAttributesSignalError() instead")
    void gETDescribeTargetGroupAttributesSignalE(OAIDescribeTargetGroupAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTargetGroupAttributesSignalError(OAIDescribeTargetGroupAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTargetGroupsSignalError() instead")
    void gETDescribeTargetGroupsSignalE(OAIDescribeTargetGroupsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTargetGroupsSignalError(OAIDescribeTargetGroupsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTargetHealthSignalError() instead")
    void gETDescribeTargetHealthSignalE(OAIDescribeTargetHealthOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTargetHealthSignalError(OAIDescribeTargetHealthOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyListenerSignalError() instead")
    void gETModifyListenerSignalE(OAIModifyListenerOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyListenerSignalError(OAIModifyListenerOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyLoadBalancerAttributesSignalError() instead")
    void gETModifyLoadBalancerAttributesSignalE(OAIModifyLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyLoadBalancerAttributesSignalError(OAIModifyLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyRuleSignalError() instead")
    void gETModifyRuleSignalE(OAIModifyRuleOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyRuleSignalError(OAIModifyRuleOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyTargetGroupSignalError() instead")
    void gETModifyTargetGroupSignalE(OAIModifyTargetGroupOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyTargetGroupSignalError(OAIModifyTargetGroupOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyTargetGroupAttributesSignalError() instead")
    void gETModifyTargetGroupAttributesSignalE(OAIModifyTargetGroupAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyTargetGroupAttributesSignalError(OAIModifyTargetGroupAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRegisterTargetsSignalError() instead")
    void gETRegisterTargetsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRegisterTargetsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveListenerCertificatesSignalError() instead")
    void gETRemoveListenerCertificatesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveListenerCertificatesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveTagsSignalError() instead")
    void gETRemoveTagsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveTagsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIpAddressTypeSignalError() instead")
    void gETSetIpAddressTypeSignalE(OAISetIpAddressTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIpAddressTypeSignalError(OAISetIpAddressTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetRulePrioritiesSignalError() instead")
    void gETSetRulePrioritiesSignalE(OAISetRulePrioritiesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetRulePrioritiesSignalError(OAISetRulePrioritiesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetSecurityGroupsSignalError() instead")
    void gETSetSecurityGroupsSignalE(OAISetSecurityGroupsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetSecurityGroupsSignalError(OAISetSecurityGroupsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetSubnetsSignalError() instead")
    void gETSetSubnetsSignalE(OAISetSubnetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetSubnetsSignalError(OAISetSubnetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddListenerCertificatesSignalError() instead")
    void pOSTAddListenerCertificatesSignalE(OAIAddListenerCertificatesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddListenerCertificatesSignalError(OAIAddListenerCertificatesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddTagsSignalError() instead")
    void pOSTAddTagsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddTagsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateListenerSignalError() instead")
    void pOSTCreateListenerSignalE(OAICreateListenerOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateListenerSignalError(OAICreateListenerOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLoadBalancerSignalError() instead")
    void pOSTCreateLoadBalancerSignalE(OAICreateLoadBalancerOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLoadBalancerSignalError(OAICreateLoadBalancerOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateRuleSignalError() instead")
    void pOSTCreateRuleSignalE(OAICreateRuleOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateRuleSignalError(OAICreateRuleOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateTargetGroupSignalError() instead")
    void pOSTCreateTargetGroupSignalE(OAICreateTargetGroupOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateTargetGroupSignalError(OAICreateTargetGroupOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteListenerSignalError() instead")
    void pOSTDeleteListenerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteListenerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLoadBalancerSignalError() instead")
    void pOSTDeleteLoadBalancerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLoadBalancerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteRuleSignalError() instead")
    void pOSTDeleteRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteTargetGroupSignalError() instead")
    void pOSTDeleteTargetGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteTargetGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeregisterTargetsSignalError() instead")
    void pOSTDeregisterTargetsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeregisterTargetsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountLimitsSignalError() instead")
    void pOSTDescribeAccountLimitsSignalE(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountLimitsSignalError(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeListenerCertificatesSignalError() instead")
    void pOSTDescribeListenerCertificatesSignalE(OAIDescribeListenerCertificatesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeListenerCertificatesSignalError(OAIDescribeListenerCertificatesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeListenersSignalError() instead")
    void pOSTDescribeListenersSignalE(OAIDescribeListenersOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeListenersSignalError(OAIDescribeListenersOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerAttributesSignalError() instead")
    void pOSTDescribeLoadBalancerAttributesSignalE(OAIDescribeLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerAttributesSignalError(OAIDescribeLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancersSignalError() instead")
    void pOSTDescribeLoadBalancersSignalE(OAIDescribeLoadBalancersOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancersSignalError(OAIDescribeLoadBalancersOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeRulesSignalError() instead")
    void pOSTDescribeRulesSignalE(OAIDescribeRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeRulesSignalError(OAIDescribeRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSSLPoliciesSignalError() instead")
    void pOSTDescribeSSLPoliciesSignalE(OAIDescribeSSLPoliciesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSSLPoliciesSignalError(OAIDescribeSSLPoliciesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTagsSignalError() instead")
    void pOSTDescribeTagsSignalE(OAIDescribeTagsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTagsSignalError(OAIDescribeTagsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTargetGroupAttributesSignalError() instead")
    void pOSTDescribeTargetGroupAttributesSignalE(OAIDescribeTargetGroupAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTargetGroupAttributesSignalError(OAIDescribeTargetGroupAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTargetGroupsSignalError() instead")
    void pOSTDescribeTargetGroupsSignalE(OAIDescribeTargetGroupsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTargetGroupsSignalError(OAIDescribeTargetGroupsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTargetHealthSignalError() instead")
    void pOSTDescribeTargetHealthSignalE(OAIDescribeTargetHealthOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTargetHealthSignalError(OAIDescribeTargetHealthOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyListenerSignalError() instead")
    void pOSTModifyListenerSignalE(OAIModifyListenerOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyListenerSignalError(OAIModifyListenerOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyLoadBalancerAttributesSignalError() instead")
    void pOSTModifyLoadBalancerAttributesSignalE(OAIModifyLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyLoadBalancerAttributesSignalError(OAIModifyLoadBalancerAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyRuleSignalError() instead")
    void pOSTModifyRuleSignalE(OAIModifyRuleOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyRuleSignalError(OAIModifyRuleOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyTargetGroupSignalError() instead")
    void pOSTModifyTargetGroupSignalE(OAIModifyTargetGroupOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyTargetGroupSignalError(OAIModifyTargetGroupOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyTargetGroupAttributesSignalError() instead")
    void pOSTModifyTargetGroupAttributesSignalE(OAIModifyTargetGroupAttributesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyTargetGroupAttributesSignalError(OAIModifyTargetGroupAttributesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRegisterTargetsSignalError() instead")
    void pOSTRegisterTargetsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRegisterTargetsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveListenerCertificatesSignalError() instead")
    void pOSTRemoveListenerCertificatesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveListenerCertificatesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveTagsSignalError() instead")
    void pOSTRemoveTagsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveTagsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIpAddressTypeSignalError() instead")
    void pOSTSetIpAddressTypeSignalE(OAISetIpAddressTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIpAddressTypeSignalError(OAISetIpAddressTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetRulePrioritiesSignalError() instead")
    void pOSTSetRulePrioritiesSignalE(OAISetRulePrioritiesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetRulePrioritiesSignalError(OAISetRulePrioritiesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetSecurityGroupsSignalError() instead")
    void pOSTSetSecurityGroupsSignalE(OAISetSecurityGroupsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetSecurityGroupsSignalError(OAISetSecurityGroupsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetSubnetsSignalError() instead")
    void pOSTSetSubnetsSignalE(OAISetSubnetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetSubnetsSignalError(OAISetSubnetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETAddListenerCertificatesSignalErrorFull() instead")
    void gETAddListenerCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddListenerCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAddTagsSignalErrorFull() instead")
    void gETAddTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateListenerSignalErrorFull() instead")
    void gETCreateListenerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateListenerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateLoadBalancerSignalErrorFull() instead")
    void gETCreateLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateRuleSignalErrorFull() instead")
    void gETCreateRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateTargetGroupSignalErrorFull() instead")
    void gETCreateTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteListenerSignalErrorFull() instead")
    void gETDeleteListenerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteListenerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteLoadBalancerSignalErrorFull() instead")
    void gETDeleteLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteRuleSignalErrorFull() instead")
    void gETDeleteRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteTargetGroupSignalErrorFull() instead")
    void gETDeleteTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeregisterTargetsSignalErrorFull() instead")
    void gETDeregisterTargetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeregisterTargetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountLimitsSignalErrorFull() instead")
    void gETDescribeAccountLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeListenerCertificatesSignalErrorFull() instead")
    void gETDescribeListenerCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeListenerCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeListenersSignalErrorFull() instead")
    void gETDescribeListenersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeListenersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancerAttributesSignalErrorFull() instead")
    void gETDescribeLoadBalancerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoadBalancersSignalErrorFull() instead")
    void gETDescribeLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeRulesSignalErrorFull() instead")
    void gETDescribeRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSSLPoliciesSignalErrorFull() instead")
    void gETDescribeSSLPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSSLPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTagsSignalErrorFull() instead")
    void gETDescribeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTargetGroupAttributesSignalErrorFull() instead")
    void gETDescribeTargetGroupAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTargetGroupAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTargetGroupsSignalErrorFull() instead")
    void gETDescribeTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTargetHealthSignalErrorFull() instead")
    void gETDescribeTargetHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTargetHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyListenerSignalErrorFull() instead")
    void gETModifyListenerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyListenerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyLoadBalancerAttributesSignalErrorFull() instead")
    void gETModifyLoadBalancerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyLoadBalancerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyRuleSignalErrorFull() instead")
    void gETModifyRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyTargetGroupSignalErrorFull() instead")
    void gETModifyTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyTargetGroupAttributesSignalErrorFull() instead")
    void gETModifyTargetGroupAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyTargetGroupAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRegisterTargetsSignalErrorFull() instead")
    void gETRegisterTargetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRegisterTargetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveListenerCertificatesSignalErrorFull() instead")
    void gETRemoveListenerCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveListenerCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveTagsSignalErrorFull() instead")
    void gETRemoveTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIpAddressTypeSignalErrorFull() instead")
    void gETSetIpAddressTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIpAddressTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetRulePrioritiesSignalErrorFull() instead")
    void gETSetRulePrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetRulePrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetSecurityGroupsSignalErrorFull() instead")
    void gETSetSecurityGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetSecurityGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetSubnetsSignalErrorFull() instead")
    void gETSetSubnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetSubnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddListenerCertificatesSignalErrorFull() instead")
    void pOSTAddListenerCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddListenerCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddTagsSignalErrorFull() instead")
    void pOSTAddTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateListenerSignalErrorFull() instead")
    void pOSTCreateListenerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateListenerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateLoadBalancerSignalErrorFull() instead")
    void pOSTCreateLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateRuleSignalErrorFull() instead")
    void pOSTCreateRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateTargetGroupSignalErrorFull() instead")
    void pOSTCreateTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteListenerSignalErrorFull() instead")
    void pOSTDeleteListenerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteListenerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteLoadBalancerSignalErrorFull() instead")
    void pOSTDeleteLoadBalancerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteLoadBalancerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteRuleSignalErrorFull() instead")
    void pOSTDeleteRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteTargetGroupSignalErrorFull() instead")
    void pOSTDeleteTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeregisterTargetsSignalErrorFull() instead")
    void pOSTDeregisterTargetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeregisterTargetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountLimitsSignalErrorFull() instead")
    void pOSTDescribeAccountLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeListenerCertificatesSignalErrorFull() instead")
    void pOSTDescribeListenerCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeListenerCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeListenersSignalErrorFull() instead")
    void pOSTDescribeListenersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeListenersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancerAttributesSignalErrorFull() instead")
    void pOSTDescribeLoadBalancerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoadBalancersSignalErrorFull() instead")
    void pOSTDescribeLoadBalancersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoadBalancersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeRulesSignalErrorFull() instead")
    void pOSTDescribeRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSSLPoliciesSignalErrorFull() instead")
    void pOSTDescribeSSLPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSSLPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTagsSignalErrorFull() instead")
    void pOSTDescribeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTargetGroupAttributesSignalErrorFull() instead")
    void pOSTDescribeTargetGroupAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTargetGroupAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTargetGroupsSignalErrorFull() instead")
    void pOSTDescribeTargetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTargetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTargetHealthSignalErrorFull() instead")
    void pOSTDescribeTargetHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTargetHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyListenerSignalErrorFull() instead")
    void pOSTModifyListenerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyListenerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyLoadBalancerAttributesSignalErrorFull() instead")
    void pOSTModifyLoadBalancerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyLoadBalancerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyRuleSignalErrorFull() instead")
    void pOSTModifyRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyTargetGroupSignalErrorFull() instead")
    void pOSTModifyTargetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyTargetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyTargetGroupAttributesSignalErrorFull() instead")
    void pOSTModifyTargetGroupAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyTargetGroupAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRegisterTargetsSignalErrorFull() instead")
    void pOSTRegisterTargetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRegisterTargetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveListenerCertificatesSignalErrorFull() instead")
    void pOSTRemoveListenerCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveListenerCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveTagsSignalErrorFull() instead")
    void pOSTRemoveTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIpAddressTypeSignalErrorFull() instead")
    void pOSTSetIpAddressTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIpAddressTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetRulePrioritiesSignalErrorFull() instead")
    void pOSTSetRulePrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetRulePrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetSecurityGroupsSignalErrorFull() instead")
    void pOSTSetSecurityGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetSecurityGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetSubnetsSignalErrorFull() instead")
    void pOSTSetSubnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetSubnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
