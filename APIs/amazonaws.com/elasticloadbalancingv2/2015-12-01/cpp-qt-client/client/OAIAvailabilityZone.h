/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAvailabilityZone.h
 *
 * Information about an Availability Zone.
 */

#ifndef OAIAvailabilityZone_H
#define OAIAvailabilityZone_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAvailabilityZone : public OAIObject {
public:
    OAIAvailabilityZone();
    OAIAvailabilityZone(QString json);
    ~OAIAvailabilityZone() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getZoneName() const;
    void setZoneName(const QString &zone_name);
    bool is_zone_name_Set() const;
    bool is_zone_name_Valid() const;

    QString getSubnetId() const;
    void setSubnetId(const QString &subnet_id);
    bool is_subnet_id_Set() const;
    bool is_subnet_id_Valid() const;

    QString getOutpostId() const;
    void setOutpostId(const QString &outpost_id);
    bool is_outpost_id_Set() const;
    bool is_outpost_id_Valid() const;

    QList getLoadBalancerAddresses() const;
    void setLoadBalancerAddresses(const QList &load_balancer_addresses);
    bool is_load_balancer_addresses_Set() const;
    bool is_load_balancer_addresses_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_zone_name;
    bool m_zone_name_isSet;
    bool m_zone_name_isValid;

    QString m_subnet_id;
    bool m_subnet_id_isSet;
    bool m_subnet_id_isValid;

    QString m_outpost_id;
    bool m_outpost_id_isSet;
    bool m_outpost_id_isValid;

    QList m_load_balancer_addresses;
    bool m_load_balancer_addresses_isSet;
    bool m_load_balancer_addresses_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAvailabilityZone)

#endif // OAIAvailabilityZone_H
