/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLoadBalancerInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLoadBalancerInput::OAICreateLoadBalancerInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLoadBalancerInput::OAICreateLoadBalancerInput() {
    this->initializeModel();
}

OAICreateLoadBalancerInput::~OAICreateLoadBalancerInput() {}

void OAICreateLoadBalancerInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_subnet_mappings_isSet = false;
    m_subnet_mappings_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_ip_address_type_isSet = false;
    m_ip_address_type_isValid = false;

    m_customer_owned_ipv4_pool_isSet = false;
    m_customer_owned_ipv4_pool_isValid = false;
}

void OAICreateLoadBalancerInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLoadBalancerInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("Subnets")]);
    m_subnets_isSet = !json[QString("Subnets")].isNull() && m_subnets_isValid;

    m_subnet_mappings_isValid = ::OpenAPI::fromJsonValue(m_subnet_mappings, json[QString("SubnetMappings")]);
    m_subnet_mappings_isSet = !json[QString("SubnetMappings")].isNull() && m_subnet_mappings_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("Scheme")]);
    m_scheme_isSet = !json[QString("Scheme")].isNull() && m_scheme_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_ip_address_type_isValid = ::OpenAPI::fromJsonValue(m_ip_address_type, json[QString("IpAddressType")]);
    m_ip_address_type_isSet = !json[QString("IpAddressType")].isNull() && m_ip_address_type_isValid;

    m_customer_owned_ipv4_pool_isValid = ::OpenAPI::fromJsonValue(m_customer_owned_ipv4_pool, json[QString("CustomerOwnedIpv4Pool")]);
    m_customer_owned_ipv4_pool_isSet = !json[QString("CustomerOwnedIpv4Pool")].isNull() && m_customer_owned_ipv4_pool_isValid;
}

QString OAICreateLoadBalancerInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLoadBalancerInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subnets.isSet()) {
        obj.insert(QString("Subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_subnet_mappings.isSet()) {
        obj.insert(QString("SubnetMappings"), ::OpenAPI::toJsonValue(m_subnet_mappings));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_scheme.isSet()) {
        obj.insert(QString("Scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_ip_address_type.isSet()) {
        obj.insert(QString("IpAddressType"), ::OpenAPI::toJsonValue(m_ip_address_type));
    }
    if (m_customer_owned_ipv4_pool_isSet) {
        obj.insert(QString("CustomerOwnedIpv4Pool"), ::OpenAPI::toJsonValue(m_customer_owned_ipv4_pool));
    }
    return obj;
}

QString OAICreateLoadBalancerInput::getName() const {
    return m_name;
}
void OAICreateLoadBalancerInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateLoadBalancerInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateLoadBalancerInput::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICreateLoadBalancerInput::getSubnets() const {
    return m_subnets;
}
void OAICreateLoadBalancerInput::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAICreateLoadBalancerInput::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAICreateLoadBalancerInput::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QList OAICreateLoadBalancerInput::getSubnetMappings() const {
    return m_subnet_mappings;
}
void OAICreateLoadBalancerInput::setSubnetMappings(const QList &subnet_mappings) {
    m_subnet_mappings = subnet_mappings;
    m_subnet_mappings_isSet = true;
}

bool OAICreateLoadBalancerInput::is_subnet_mappings_Set() const{
    return m_subnet_mappings_isSet;
}

bool OAICreateLoadBalancerInput::is_subnet_mappings_Valid() const{
    return m_subnet_mappings_isValid;
}

QList OAICreateLoadBalancerInput::getSecurityGroups() const {
    return m_security_groups;
}
void OAICreateLoadBalancerInput::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAICreateLoadBalancerInput::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAICreateLoadBalancerInput::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

OAILoadBalancerSchemeEnum OAICreateLoadBalancerInput::getScheme() const {
    return m_scheme;
}
void OAICreateLoadBalancerInput::setScheme(const OAILoadBalancerSchemeEnum &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAICreateLoadBalancerInput::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAICreateLoadBalancerInput::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QList OAICreateLoadBalancerInput::getTags() const {
    return m_tags;
}
void OAICreateLoadBalancerInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLoadBalancerInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLoadBalancerInput::is_tags_Valid() const{
    return m_tags_isValid;
}

OAILoadBalancerTypeEnum OAICreateLoadBalancerInput::getType() const {
    return m_type;
}
void OAICreateLoadBalancerInput::setType(const OAILoadBalancerTypeEnum &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateLoadBalancerInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateLoadBalancerInput::is_type_Valid() const{
    return m_type_isValid;
}

OAIIpAddressType OAICreateLoadBalancerInput::getIpAddressType() const {
    return m_ip_address_type;
}
void OAICreateLoadBalancerInput::setIpAddressType(const OAIIpAddressType &ip_address_type) {
    m_ip_address_type = ip_address_type;
    m_ip_address_type_isSet = true;
}

bool OAICreateLoadBalancerInput::is_ip_address_type_Set() const{
    return m_ip_address_type_isSet;
}

bool OAICreateLoadBalancerInput::is_ip_address_type_Valid() const{
    return m_ip_address_type_isValid;
}

QString OAICreateLoadBalancerInput::getCustomerOwnedIpv4Pool() const {
    return m_customer_owned_ipv4_pool;
}
void OAICreateLoadBalancerInput::setCustomerOwnedIpv4Pool(const QString &customer_owned_ipv4_pool) {
    m_customer_owned_ipv4_pool = customer_owned_ipv4_pool;
    m_customer_owned_ipv4_pool_isSet = true;
}

bool OAICreateLoadBalancerInput::is_customer_owned_ipv4_pool_Set() const{
    return m_customer_owned_ipv4_pool_isSet;
}

bool OAICreateLoadBalancerInput::is_customer_owned_ipv4_pool_Valid() const{
    return m_customer_owned_ipv4_pool_isValid;
}

bool OAICreateLoadBalancerInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_owned_ipv4_pool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLoadBalancerInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
