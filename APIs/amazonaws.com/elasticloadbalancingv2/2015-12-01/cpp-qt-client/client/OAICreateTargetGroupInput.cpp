/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTargetGroupInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTargetGroupInput::OAICreateTargetGroupInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTargetGroupInput::OAICreateTargetGroupInput() {
    this->initializeModel();
}

OAICreateTargetGroupInput::~OAICreateTargetGroupInput() {}

void OAICreateTargetGroupInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_protocol_version_isSet = false;
    m_protocol_version_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_health_check_protocol_isSet = false;
    m_health_check_protocol_isValid = false;

    m_health_check_port_isSet = false;
    m_health_check_port_isValid = false;

    m_health_check_enabled_isSet = false;
    m_health_check_enabled_isValid = false;

    m_health_check_path_isSet = false;
    m_health_check_path_isValid = false;

    m_health_check_interval_seconds_isSet = false;
    m_health_check_interval_seconds_isValid = false;

    m_health_check_timeout_seconds_isSet = false;
    m_health_check_timeout_seconds_isValid = false;

    m_healthy_threshold_count_isSet = false;
    m_healthy_threshold_count_isValid = false;

    m_unhealthy_threshold_count_isSet = false;
    m_unhealthy_threshold_count_isValid = false;

    m_matcher_isSet = false;
    m_matcher_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_ip_address_type_isSet = false;
    m_ip_address_type_isValid = false;
}

void OAICreateTargetGroupInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTargetGroupInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;

    m_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_protocol_version, json[QString("ProtocolVersion")]);
    m_protocol_version_isSet = !json[QString("ProtocolVersion")].isNull() && m_protocol_version_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_health_check_protocol_isValid = ::OpenAPI::fromJsonValue(m_health_check_protocol, json[QString("HealthCheckProtocol")]);
    m_health_check_protocol_isSet = !json[QString("HealthCheckProtocol")].isNull() && m_health_check_protocol_isValid;

    m_health_check_port_isValid = ::OpenAPI::fromJsonValue(m_health_check_port, json[QString("HealthCheckPort")]);
    m_health_check_port_isSet = !json[QString("HealthCheckPort")].isNull() && m_health_check_port_isValid;

    m_health_check_enabled_isValid = ::OpenAPI::fromJsonValue(m_health_check_enabled, json[QString("HealthCheckEnabled")]);
    m_health_check_enabled_isSet = !json[QString("HealthCheckEnabled")].isNull() && m_health_check_enabled_isValid;

    m_health_check_path_isValid = ::OpenAPI::fromJsonValue(m_health_check_path, json[QString("HealthCheckPath")]);
    m_health_check_path_isSet = !json[QString("HealthCheckPath")].isNull() && m_health_check_path_isValid;

    m_health_check_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_interval_seconds, json[QString("HealthCheckIntervalSeconds")]);
    m_health_check_interval_seconds_isSet = !json[QString("HealthCheckIntervalSeconds")].isNull() && m_health_check_interval_seconds_isValid;

    m_health_check_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_timeout_seconds, json[QString("HealthCheckTimeoutSeconds")]);
    m_health_check_timeout_seconds_isSet = !json[QString("HealthCheckTimeoutSeconds")].isNull() && m_health_check_timeout_seconds_isValid;

    m_healthy_threshold_count_isValid = ::OpenAPI::fromJsonValue(m_healthy_threshold_count, json[QString("HealthyThresholdCount")]);
    m_healthy_threshold_count_isSet = !json[QString("HealthyThresholdCount")].isNull() && m_healthy_threshold_count_isValid;

    m_unhealthy_threshold_count_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_threshold_count, json[QString("UnhealthyThresholdCount")]);
    m_unhealthy_threshold_count_isSet = !json[QString("UnhealthyThresholdCount")].isNull() && m_unhealthy_threshold_count_isValid;

    m_matcher_isValid = ::OpenAPI::fromJsonValue(m_matcher, json[QString("Matcher")]);
    m_matcher_isSet = !json[QString("Matcher")].isNull() && m_matcher_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("TargetType")]);
    m_target_type_isSet = !json[QString("TargetType")].isNull() && m_target_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_ip_address_type_isValid = ::OpenAPI::fromJsonValue(m_ip_address_type, json[QString("IpAddressType")]);
    m_ip_address_type_isSet = !json[QString("IpAddressType")].isNull() && m_ip_address_type_isValid;
}

QString OAICreateTargetGroupInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTargetGroupInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_protocol_version_isSet) {
        obj.insert(QString("ProtocolVersion"), ::OpenAPI::toJsonValue(m_protocol_version));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_health_check_protocol.isSet()) {
        obj.insert(QString("HealthCheckProtocol"), ::OpenAPI::toJsonValue(m_health_check_protocol));
    }
    if (m_health_check_port_isSet) {
        obj.insert(QString("HealthCheckPort"), ::OpenAPI::toJsonValue(m_health_check_port));
    }
    if (m_health_check_enabled_isSet) {
        obj.insert(QString("HealthCheckEnabled"), ::OpenAPI::toJsonValue(m_health_check_enabled));
    }
    if (m_health_check_path_isSet) {
        obj.insert(QString("HealthCheckPath"), ::OpenAPI::toJsonValue(m_health_check_path));
    }
    if (m_health_check_interval_seconds_isSet) {
        obj.insert(QString("HealthCheckIntervalSeconds"), ::OpenAPI::toJsonValue(m_health_check_interval_seconds));
    }
    if (m_health_check_timeout_seconds_isSet) {
        obj.insert(QString("HealthCheckTimeoutSeconds"), ::OpenAPI::toJsonValue(m_health_check_timeout_seconds));
    }
    if (m_healthy_threshold_count_isSet) {
        obj.insert(QString("HealthyThresholdCount"), ::OpenAPI::toJsonValue(m_healthy_threshold_count));
    }
    if (m_unhealthy_threshold_count_isSet) {
        obj.insert(QString("UnhealthyThresholdCount"), ::OpenAPI::toJsonValue(m_unhealthy_threshold_count));
    }
    if (m_matcher.isSet()) {
        obj.insert(QString("Matcher"), ::OpenAPI::toJsonValue(m_matcher));
    }
    if (m_target_type.isSet()) {
        obj.insert(QString("TargetType"), ::OpenAPI::toJsonValue(m_target_type));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_ip_address_type.isSet()) {
        obj.insert(QString("IpAddressType"), ::OpenAPI::toJsonValue(m_ip_address_type));
    }
    return obj;
}

QString OAICreateTargetGroupInput::getName() const {
    return m_name;
}
void OAICreateTargetGroupInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateTargetGroupInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateTargetGroupInput::is_name_Valid() const{
    return m_name_isValid;
}

OAIProtocolEnum OAICreateTargetGroupInput::getProtocol() const {
    return m_protocol;
}
void OAICreateTargetGroupInput::setProtocol(const OAIProtocolEnum &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAICreateTargetGroupInput::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAICreateTargetGroupInput::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAICreateTargetGroupInput::getProtocolVersion() const {
    return m_protocol_version;
}
void OAICreateTargetGroupInput::setProtocolVersion(const QString &protocol_version) {
    m_protocol_version = protocol_version;
    m_protocol_version_isSet = true;
}

bool OAICreateTargetGroupInput::is_protocol_version_Set() const{
    return m_protocol_version_isSet;
}

bool OAICreateTargetGroupInput::is_protocol_version_Valid() const{
    return m_protocol_version_isValid;
}

qint32 OAICreateTargetGroupInput::getPort() const {
    return m_port;
}
void OAICreateTargetGroupInput::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateTargetGroupInput::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateTargetGroupInput::is_port_Valid() const{
    return m_port_isValid;
}

QString OAICreateTargetGroupInput::getVpcId() const {
    return m_vpc_id;
}
void OAICreateTargetGroupInput::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAICreateTargetGroupInput::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAICreateTargetGroupInput::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

OAIProtocolEnum OAICreateTargetGroupInput::getHealthCheckProtocol() const {
    return m_health_check_protocol;
}
void OAICreateTargetGroupInput::setHealthCheckProtocol(const OAIProtocolEnum &health_check_protocol) {
    m_health_check_protocol = health_check_protocol;
    m_health_check_protocol_isSet = true;
}

bool OAICreateTargetGroupInput::is_health_check_protocol_Set() const{
    return m_health_check_protocol_isSet;
}

bool OAICreateTargetGroupInput::is_health_check_protocol_Valid() const{
    return m_health_check_protocol_isValid;
}

QString OAICreateTargetGroupInput::getHealthCheckPort() const {
    return m_health_check_port;
}
void OAICreateTargetGroupInput::setHealthCheckPort(const QString &health_check_port) {
    m_health_check_port = health_check_port;
    m_health_check_port_isSet = true;
}

bool OAICreateTargetGroupInput::is_health_check_port_Set() const{
    return m_health_check_port_isSet;
}

bool OAICreateTargetGroupInput::is_health_check_port_Valid() const{
    return m_health_check_port_isValid;
}

bool OAICreateTargetGroupInput::getHealthCheckEnabled() const {
    return m_health_check_enabled;
}
void OAICreateTargetGroupInput::setHealthCheckEnabled(const bool &health_check_enabled) {
    m_health_check_enabled = health_check_enabled;
    m_health_check_enabled_isSet = true;
}

bool OAICreateTargetGroupInput::is_health_check_enabled_Set() const{
    return m_health_check_enabled_isSet;
}

bool OAICreateTargetGroupInput::is_health_check_enabled_Valid() const{
    return m_health_check_enabled_isValid;
}

QString OAICreateTargetGroupInput::getHealthCheckPath() const {
    return m_health_check_path;
}
void OAICreateTargetGroupInput::setHealthCheckPath(const QString &health_check_path) {
    m_health_check_path = health_check_path;
    m_health_check_path_isSet = true;
}

bool OAICreateTargetGroupInput::is_health_check_path_Set() const{
    return m_health_check_path_isSet;
}

bool OAICreateTargetGroupInput::is_health_check_path_Valid() const{
    return m_health_check_path_isValid;
}

qint32 OAICreateTargetGroupInput::getHealthCheckIntervalSeconds() const {
    return m_health_check_interval_seconds;
}
void OAICreateTargetGroupInput::setHealthCheckIntervalSeconds(const qint32 &health_check_interval_seconds) {
    m_health_check_interval_seconds = health_check_interval_seconds;
    m_health_check_interval_seconds_isSet = true;
}

bool OAICreateTargetGroupInput::is_health_check_interval_seconds_Set() const{
    return m_health_check_interval_seconds_isSet;
}

bool OAICreateTargetGroupInput::is_health_check_interval_seconds_Valid() const{
    return m_health_check_interval_seconds_isValid;
}

qint32 OAICreateTargetGroupInput::getHealthCheckTimeoutSeconds() const {
    return m_health_check_timeout_seconds;
}
void OAICreateTargetGroupInput::setHealthCheckTimeoutSeconds(const qint32 &health_check_timeout_seconds) {
    m_health_check_timeout_seconds = health_check_timeout_seconds;
    m_health_check_timeout_seconds_isSet = true;
}

bool OAICreateTargetGroupInput::is_health_check_timeout_seconds_Set() const{
    return m_health_check_timeout_seconds_isSet;
}

bool OAICreateTargetGroupInput::is_health_check_timeout_seconds_Valid() const{
    return m_health_check_timeout_seconds_isValid;
}

qint32 OAICreateTargetGroupInput::getHealthyThresholdCount() const {
    return m_healthy_threshold_count;
}
void OAICreateTargetGroupInput::setHealthyThresholdCount(const qint32 &healthy_threshold_count) {
    m_healthy_threshold_count = healthy_threshold_count;
    m_healthy_threshold_count_isSet = true;
}

bool OAICreateTargetGroupInput::is_healthy_threshold_count_Set() const{
    return m_healthy_threshold_count_isSet;
}

bool OAICreateTargetGroupInput::is_healthy_threshold_count_Valid() const{
    return m_healthy_threshold_count_isValid;
}

qint32 OAICreateTargetGroupInput::getUnhealthyThresholdCount() const {
    return m_unhealthy_threshold_count;
}
void OAICreateTargetGroupInput::setUnhealthyThresholdCount(const qint32 &unhealthy_threshold_count) {
    m_unhealthy_threshold_count = unhealthy_threshold_count;
    m_unhealthy_threshold_count_isSet = true;
}

bool OAICreateTargetGroupInput::is_unhealthy_threshold_count_Set() const{
    return m_unhealthy_threshold_count_isSet;
}

bool OAICreateTargetGroupInput::is_unhealthy_threshold_count_Valid() const{
    return m_unhealthy_threshold_count_isValid;
}

OAICreateTargetGroupInput_Matcher OAICreateTargetGroupInput::getMatcher() const {
    return m_matcher;
}
void OAICreateTargetGroupInput::setMatcher(const OAICreateTargetGroupInput_Matcher &matcher) {
    m_matcher = matcher;
    m_matcher_isSet = true;
}

bool OAICreateTargetGroupInput::is_matcher_Set() const{
    return m_matcher_isSet;
}

bool OAICreateTargetGroupInput::is_matcher_Valid() const{
    return m_matcher_isValid;
}

OAITargetTypeEnum OAICreateTargetGroupInput::getTargetType() const {
    return m_target_type;
}
void OAICreateTargetGroupInput::setTargetType(const OAITargetTypeEnum &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAICreateTargetGroupInput::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAICreateTargetGroupInput::is_target_type_Valid() const{
    return m_target_type_isValid;
}

QList OAICreateTargetGroupInput::getTags() const {
    return m_tags;
}
void OAICreateTargetGroupInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTargetGroupInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTargetGroupInput::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITargetGroupIpAddressTypeEnum OAICreateTargetGroupInput::getIpAddressType() const {
    return m_ip_address_type;
}
void OAICreateTargetGroupInput::setIpAddressType(const OAITargetGroupIpAddressTypeEnum &ip_address_type) {
    m_ip_address_type = ip_address_type;
    m_ip_address_type_isSet = true;
}

bool OAICreateTargetGroupInput::is_ip_address_type_Set() const{
    return m_ip_address_type_isSet;
}

bool OAICreateTargetGroupInput::is_ip_address_type_Valid() const{
    return m_ip_address_type_isValid;
}

bool OAICreateTargetGroupInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_healthy_threshold_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_threshold_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matcher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTargetGroupInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
