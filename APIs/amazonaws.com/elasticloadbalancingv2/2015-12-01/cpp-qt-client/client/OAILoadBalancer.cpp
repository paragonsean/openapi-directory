/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancer::OAILoadBalancer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancer::OAILoadBalancer() {
    this->initializeModel();
}

OAILoadBalancer::~OAILoadBalancer() {}

void OAILoadBalancer::initializeModel() {

    m_load_balancer_arn_isSet = false;
    m_load_balancer_arn_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_canonical_hosted_zone_id_isSet = false;
    m_canonical_hosted_zone_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_load_balancer_name_isSet = false;
    m_load_balancer_name_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_ip_address_type_isSet = false;
    m_ip_address_type_isValid = false;

    m_customer_owned_ipv4_pool_isSet = false;
    m_customer_owned_ipv4_pool_isValid = false;
}

void OAILoadBalancer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancer::fromJsonObject(QJsonObject json) {

    m_load_balancer_arn_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_arn, json[QString("LoadBalancerArn")]);
    m_load_balancer_arn_isSet = !json[QString("LoadBalancerArn")].isNull() && m_load_balancer_arn_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("DNSName")]);
    m_dns_name_isSet = !json[QString("DNSName")].isNull() && m_dns_name_isValid;

    m_canonical_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_canonical_hosted_zone_id, json[QString("CanonicalHostedZoneId")]);
    m_canonical_hosted_zone_id_isSet = !json[QString("CanonicalHostedZoneId")].isNull() && m_canonical_hosted_zone_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_load_balancer_name_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_name, json[QString("LoadBalancerName")]);
    m_load_balancer_name_isSet = !json[QString("LoadBalancerName")].isNull() && m_load_balancer_name_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("Scheme")]);
    m_scheme_isSet = !json[QString("Scheme")].isNull() && m_scheme_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_ip_address_type_isValid = ::OpenAPI::fromJsonValue(m_ip_address_type, json[QString("IpAddressType")]);
    m_ip_address_type_isSet = !json[QString("IpAddressType")].isNull() && m_ip_address_type_isValid;

    m_customer_owned_ipv4_pool_isValid = ::OpenAPI::fromJsonValue(m_customer_owned_ipv4_pool, json[QString("CustomerOwnedIpv4Pool")]);
    m_customer_owned_ipv4_pool_isSet = !json[QString("CustomerOwnedIpv4Pool")].isNull() && m_customer_owned_ipv4_pool_isValid;
}

QString OAILoadBalancer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancer::asJsonObject() const {
    QJsonObject obj;
    if (m_load_balancer_arn_isSet) {
        obj.insert(QString("LoadBalancerArn"), ::OpenAPI::toJsonValue(m_load_balancer_arn));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("DNSName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_canonical_hosted_zone_id_isSet) {
        obj.insert(QString("CanonicalHostedZoneId"), ::OpenAPI::toJsonValue(m_canonical_hosted_zone_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_load_balancer_name_isSet) {
        obj.insert(QString("LoadBalancerName"), ::OpenAPI::toJsonValue(m_load_balancer_name));
    }
    if (m_scheme.isSet()) {
        obj.insert(QString("Scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_ip_address_type.isSet()) {
        obj.insert(QString("IpAddressType"), ::OpenAPI::toJsonValue(m_ip_address_type));
    }
    if (m_customer_owned_ipv4_pool_isSet) {
        obj.insert(QString("CustomerOwnedIpv4Pool"), ::OpenAPI::toJsonValue(m_customer_owned_ipv4_pool));
    }
    return obj;
}

QString OAILoadBalancer::getLoadBalancerArn() const {
    return m_load_balancer_arn;
}
void OAILoadBalancer::setLoadBalancerArn(const QString &load_balancer_arn) {
    m_load_balancer_arn = load_balancer_arn;
    m_load_balancer_arn_isSet = true;
}

bool OAILoadBalancer::is_load_balancer_arn_Set() const{
    return m_load_balancer_arn_isSet;
}

bool OAILoadBalancer::is_load_balancer_arn_Valid() const{
    return m_load_balancer_arn_isValid;
}

QString OAILoadBalancer::getDnsName() const {
    return m_dns_name;
}
void OAILoadBalancer::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAILoadBalancer::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAILoadBalancer::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

QString OAILoadBalancer::getCanonicalHostedZoneId() const {
    return m_canonical_hosted_zone_id;
}
void OAILoadBalancer::setCanonicalHostedZoneId(const QString &canonical_hosted_zone_id) {
    m_canonical_hosted_zone_id = canonical_hosted_zone_id;
    m_canonical_hosted_zone_id_isSet = true;
}

bool OAILoadBalancer::is_canonical_hosted_zone_id_Set() const{
    return m_canonical_hosted_zone_id_isSet;
}

bool OAILoadBalancer::is_canonical_hosted_zone_id_Valid() const{
    return m_canonical_hosted_zone_id_isValid;
}

QDateTime OAILoadBalancer::getCreatedTime() const {
    return m_created_time;
}
void OAILoadBalancer::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAILoadBalancer::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAILoadBalancer::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAILoadBalancer::getLoadBalancerName() const {
    return m_load_balancer_name;
}
void OAILoadBalancer::setLoadBalancerName(const QString &load_balancer_name) {
    m_load_balancer_name = load_balancer_name;
    m_load_balancer_name_isSet = true;
}

bool OAILoadBalancer::is_load_balancer_name_Set() const{
    return m_load_balancer_name_isSet;
}

bool OAILoadBalancer::is_load_balancer_name_Valid() const{
    return m_load_balancer_name_isValid;
}

OAILoadBalancerSchemeEnum OAILoadBalancer::getScheme() const {
    return m_scheme;
}
void OAILoadBalancer::setScheme(const OAILoadBalancerSchemeEnum &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAILoadBalancer::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAILoadBalancer::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString OAILoadBalancer::getVpcId() const {
    return m_vpc_id;
}
void OAILoadBalancer::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAILoadBalancer::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAILoadBalancer::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

OAILoadBalancer_State OAILoadBalancer::getState() const {
    return m_state;
}
void OAILoadBalancer::setState(const OAILoadBalancer_State &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAILoadBalancer::is_state_Set() const{
    return m_state_isSet;
}

bool OAILoadBalancer::is_state_Valid() const{
    return m_state_isValid;
}

OAILoadBalancerTypeEnum OAILoadBalancer::getType() const {
    return m_type;
}
void OAILoadBalancer::setType(const OAILoadBalancerTypeEnum &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILoadBalancer::is_type_Set() const{
    return m_type_isSet;
}

bool OAILoadBalancer::is_type_Valid() const{
    return m_type_isValid;
}

QList OAILoadBalancer::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAILoadBalancer::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAILoadBalancer::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAILoadBalancer::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

QList OAILoadBalancer::getSecurityGroups() const {
    return m_security_groups;
}
void OAILoadBalancer::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAILoadBalancer::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAILoadBalancer::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

OAIIpAddressType OAILoadBalancer::getIpAddressType() const {
    return m_ip_address_type;
}
void OAILoadBalancer::setIpAddressType(const OAIIpAddressType &ip_address_type) {
    m_ip_address_type = ip_address_type;
    m_ip_address_type_isSet = true;
}

bool OAILoadBalancer::is_ip_address_type_Set() const{
    return m_ip_address_type_isSet;
}

bool OAILoadBalancer::is_ip_address_type_Valid() const{
    return m_ip_address_type_isValid;
}

QString OAILoadBalancer::getCustomerOwnedIpv4Pool() const {
    return m_customer_owned_ipv4_pool;
}
void OAILoadBalancer::setCustomerOwnedIpv4Pool(const QString &customer_owned_ipv4_pool) {
    m_customer_owned_ipv4_pool = customer_owned_ipv4_pool;
    m_customer_owned_ipv4_pool_isSet = true;
}

bool OAILoadBalancer::is_customer_owned_ipv4_pool_Set() const{
    return m_customer_owned_ipv4_pool_isSet;
}

bool OAILoadBalancer::is_customer_owned_ipv4_pool_Valid() const{
    return m_customer_owned_ipv4_pool_isValid;
}

bool OAILoadBalancer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_load_balancer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_owned_ipv4_pool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
