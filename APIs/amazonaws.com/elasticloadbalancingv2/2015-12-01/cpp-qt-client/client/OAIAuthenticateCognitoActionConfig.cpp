/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticateCognitoActionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticateCognitoActionConfig::OAIAuthenticateCognitoActionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticateCognitoActionConfig::OAIAuthenticateCognitoActionConfig() {
    this->initializeModel();
}

OAIAuthenticateCognitoActionConfig::~OAIAuthenticateCognitoActionConfig() {}

void OAIAuthenticateCognitoActionConfig::initializeModel() {

    m_user_pool_arn_isSet = false;
    m_user_pool_arn_isValid = false;

    m_user_pool_client_id_isSet = false;
    m_user_pool_client_id_isValid = false;

    m_user_pool_domain_isSet = false;
    m_user_pool_domain_isValid = false;

    m_session_cookie_name_isSet = false;
    m_session_cookie_name_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_session_timeout_isSet = false;
    m_session_timeout_isValid = false;

    m_authentication_request_extra_params_isSet = false;
    m_authentication_request_extra_params_isValid = false;

    m_on_unauthenticated_request_isSet = false;
    m_on_unauthenticated_request_isValid = false;
}

void OAIAuthenticateCognitoActionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticateCognitoActionConfig::fromJsonObject(QJsonObject json) {

    m_user_pool_arn_isValid = ::OpenAPI::fromJsonValue(m_user_pool_arn, json[QString("UserPoolArn")]);
    m_user_pool_arn_isSet = !json[QString("UserPoolArn")].isNull() && m_user_pool_arn_isValid;

    m_user_pool_client_id_isValid = ::OpenAPI::fromJsonValue(m_user_pool_client_id, json[QString("UserPoolClientId")]);
    m_user_pool_client_id_isSet = !json[QString("UserPoolClientId")].isNull() && m_user_pool_client_id_isValid;

    m_user_pool_domain_isValid = ::OpenAPI::fromJsonValue(m_user_pool_domain, json[QString("UserPoolDomain")]);
    m_user_pool_domain_isSet = !json[QString("UserPoolDomain")].isNull() && m_user_pool_domain_isValid;

    m_session_cookie_name_isValid = ::OpenAPI::fromJsonValue(m_session_cookie_name, json[QString("SessionCookieName")]);
    m_session_cookie_name_isSet = !json[QString("SessionCookieName")].isNull() && m_session_cookie_name_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("Scope")]);
    m_scope_isSet = !json[QString("Scope")].isNull() && m_scope_isValid;

    m_session_timeout_isValid = ::OpenAPI::fromJsonValue(m_session_timeout, json[QString("SessionTimeout")]);
    m_session_timeout_isSet = !json[QString("SessionTimeout")].isNull() && m_session_timeout_isValid;

    m_authentication_request_extra_params_isValid = ::OpenAPI::fromJsonValue(m_authentication_request_extra_params, json[QString("AuthenticationRequestExtraParams")]);
    m_authentication_request_extra_params_isSet = !json[QString("AuthenticationRequestExtraParams")].isNull() && m_authentication_request_extra_params_isValid;

    m_on_unauthenticated_request_isValid = ::OpenAPI::fromJsonValue(m_on_unauthenticated_request, json[QString("OnUnauthenticatedRequest")]);
    m_on_unauthenticated_request_isSet = !json[QString("OnUnauthenticatedRequest")].isNull() && m_on_unauthenticated_request_isValid;
}

QString OAIAuthenticateCognitoActionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticateCognitoActionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_user_pool_arn_isSet) {
        obj.insert(QString("UserPoolArn"), ::OpenAPI::toJsonValue(m_user_pool_arn));
    }
    if (m_user_pool_client_id_isSet) {
        obj.insert(QString("UserPoolClientId"), ::OpenAPI::toJsonValue(m_user_pool_client_id));
    }
    if (m_user_pool_domain_isSet) {
        obj.insert(QString("UserPoolDomain"), ::OpenAPI::toJsonValue(m_user_pool_domain));
    }
    if (m_session_cookie_name_isSet) {
        obj.insert(QString("SessionCookieName"), ::OpenAPI::toJsonValue(m_session_cookie_name));
    }
    if (m_scope_isSet) {
        obj.insert(QString("Scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_session_timeout_isSet) {
        obj.insert(QString("SessionTimeout"), ::OpenAPI::toJsonValue(m_session_timeout));
    }
    if (m_authentication_request_extra_params.isSet()) {
        obj.insert(QString("AuthenticationRequestExtraParams"), ::OpenAPI::toJsonValue(m_authentication_request_extra_params));
    }
    if (m_on_unauthenticated_request.isSet()) {
        obj.insert(QString("OnUnauthenticatedRequest"), ::OpenAPI::toJsonValue(m_on_unauthenticated_request));
    }
    return obj;
}

QString OAIAuthenticateCognitoActionConfig::getUserPoolArn() const {
    return m_user_pool_arn;
}
void OAIAuthenticateCognitoActionConfig::setUserPoolArn(const QString &user_pool_arn) {
    m_user_pool_arn = user_pool_arn;
    m_user_pool_arn_isSet = true;
}

bool OAIAuthenticateCognitoActionConfig::is_user_pool_arn_Set() const{
    return m_user_pool_arn_isSet;
}

bool OAIAuthenticateCognitoActionConfig::is_user_pool_arn_Valid() const{
    return m_user_pool_arn_isValid;
}

QString OAIAuthenticateCognitoActionConfig::getUserPoolClientId() const {
    return m_user_pool_client_id;
}
void OAIAuthenticateCognitoActionConfig::setUserPoolClientId(const QString &user_pool_client_id) {
    m_user_pool_client_id = user_pool_client_id;
    m_user_pool_client_id_isSet = true;
}

bool OAIAuthenticateCognitoActionConfig::is_user_pool_client_id_Set() const{
    return m_user_pool_client_id_isSet;
}

bool OAIAuthenticateCognitoActionConfig::is_user_pool_client_id_Valid() const{
    return m_user_pool_client_id_isValid;
}

QString OAIAuthenticateCognitoActionConfig::getUserPoolDomain() const {
    return m_user_pool_domain;
}
void OAIAuthenticateCognitoActionConfig::setUserPoolDomain(const QString &user_pool_domain) {
    m_user_pool_domain = user_pool_domain;
    m_user_pool_domain_isSet = true;
}

bool OAIAuthenticateCognitoActionConfig::is_user_pool_domain_Set() const{
    return m_user_pool_domain_isSet;
}

bool OAIAuthenticateCognitoActionConfig::is_user_pool_domain_Valid() const{
    return m_user_pool_domain_isValid;
}

QString OAIAuthenticateCognitoActionConfig::getSessionCookieName() const {
    return m_session_cookie_name;
}
void OAIAuthenticateCognitoActionConfig::setSessionCookieName(const QString &session_cookie_name) {
    m_session_cookie_name = session_cookie_name;
    m_session_cookie_name_isSet = true;
}

bool OAIAuthenticateCognitoActionConfig::is_session_cookie_name_Set() const{
    return m_session_cookie_name_isSet;
}

bool OAIAuthenticateCognitoActionConfig::is_session_cookie_name_Valid() const{
    return m_session_cookie_name_isValid;
}

QString OAIAuthenticateCognitoActionConfig::getScope() const {
    return m_scope;
}
void OAIAuthenticateCognitoActionConfig::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAuthenticateCognitoActionConfig::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAuthenticateCognitoActionConfig::is_scope_Valid() const{
    return m_scope_isValid;
}

qint32 OAIAuthenticateCognitoActionConfig::getSessionTimeout() const {
    return m_session_timeout;
}
void OAIAuthenticateCognitoActionConfig::setSessionTimeout(const qint32 &session_timeout) {
    m_session_timeout = session_timeout;
    m_session_timeout_isSet = true;
}

bool OAIAuthenticateCognitoActionConfig::is_session_timeout_Set() const{
    return m_session_timeout_isSet;
}

bool OAIAuthenticateCognitoActionConfig::is_session_timeout_Valid() const{
    return m_session_timeout_isValid;
}

QMap OAIAuthenticateCognitoActionConfig::getAuthenticationRequestExtraParams() const {
    return m_authentication_request_extra_params;
}
void OAIAuthenticateCognitoActionConfig::setAuthenticationRequestExtraParams(const QMap &authentication_request_extra_params) {
    m_authentication_request_extra_params = authentication_request_extra_params;
    m_authentication_request_extra_params_isSet = true;
}

bool OAIAuthenticateCognitoActionConfig::is_authentication_request_extra_params_Set() const{
    return m_authentication_request_extra_params_isSet;
}

bool OAIAuthenticateCognitoActionConfig::is_authentication_request_extra_params_Valid() const{
    return m_authentication_request_extra_params_isValid;
}

OAIAuthenticateCognitoActionConditionalBehaviorEnum OAIAuthenticateCognitoActionConfig::getOnUnauthenticatedRequest() const {
    return m_on_unauthenticated_request;
}
void OAIAuthenticateCognitoActionConfig::setOnUnauthenticatedRequest(const OAIAuthenticateCognitoActionConditionalBehaviorEnum &on_unauthenticated_request) {
    m_on_unauthenticated_request = on_unauthenticated_request;
    m_on_unauthenticated_request_isSet = true;
}

bool OAIAuthenticateCognitoActionConfig::is_on_unauthenticated_request_Set() const{
    return m_on_unauthenticated_request_isSet;
}

bool OAIAuthenticateCognitoActionConfig::is_on_unauthenticated_request_Valid() const{
    return m_on_unauthenticated_request_isValid;
}

bool OAIAuthenticateCognitoActionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_pool_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_pool_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_pool_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_cookie_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_request_extra_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_unauthenticated_request.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticateCognitoActionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_pool_arn_isValid && m_user_pool_client_id_isValid && m_user_pool_domain_isValid && true;
}

} // namespace OpenAPI
