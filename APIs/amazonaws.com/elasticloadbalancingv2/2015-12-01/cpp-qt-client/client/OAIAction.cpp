/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_target_group_arn_isSet = false;
    m_target_group_arn_isValid = false;

    m_authenticate_oidc_config_isSet = false;
    m_authenticate_oidc_config_isValid = false;

    m_authenticate_cognito_config_isSet = false;
    m_authenticate_cognito_config_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_redirect_config_isSet = false;
    m_redirect_config_isValid = false;

    m_fixed_response_config_isSet = false;
    m_fixed_response_config_isValid = false;

    m_forward_config_isSet = false;
    m_forward_config_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_target_group_arn_isValid = ::OpenAPI::fromJsonValue(m_target_group_arn, json[QString("TargetGroupArn")]);
    m_target_group_arn_isSet = !json[QString("TargetGroupArn")].isNull() && m_target_group_arn_isValid;

    m_authenticate_oidc_config_isValid = ::OpenAPI::fromJsonValue(m_authenticate_oidc_config, json[QString("AuthenticateOidcConfig")]);
    m_authenticate_oidc_config_isSet = !json[QString("AuthenticateOidcConfig")].isNull() && m_authenticate_oidc_config_isValid;

    m_authenticate_cognito_config_isValid = ::OpenAPI::fromJsonValue(m_authenticate_cognito_config, json[QString("AuthenticateCognitoConfig")]);
    m_authenticate_cognito_config_isSet = !json[QString("AuthenticateCognitoConfig")].isNull() && m_authenticate_cognito_config_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("Order")]);
    m_order_isSet = !json[QString("Order")].isNull() && m_order_isValid;

    m_redirect_config_isValid = ::OpenAPI::fromJsonValue(m_redirect_config, json[QString("RedirectConfig")]);
    m_redirect_config_isSet = !json[QString("RedirectConfig")].isNull() && m_redirect_config_isValid;

    m_fixed_response_config_isValid = ::OpenAPI::fromJsonValue(m_fixed_response_config, json[QString("FixedResponseConfig")]);
    m_fixed_response_config_isSet = !json[QString("FixedResponseConfig")].isNull() && m_fixed_response_config_isValid;

    m_forward_config_isValid = ::OpenAPI::fromJsonValue(m_forward_config, json[QString("ForwardConfig")]);
    m_forward_config_isSet = !json[QString("ForwardConfig")].isNull() && m_forward_config_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_target_group_arn_isSet) {
        obj.insert(QString("TargetGroupArn"), ::OpenAPI::toJsonValue(m_target_group_arn));
    }
    if (m_authenticate_oidc_config.isSet()) {
        obj.insert(QString("AuthenticateOidcConfig"), ::OpenAPI::toJsonValue(m_authenticate_oidc_config));
    }
    if (m_authenticate_cognito_config.isSet()) {
        obj.insert(QString("AuthenticateCognitoConfig"), ::OpenAPI::toJsonValue(m_authenticate_cognito_config));
    }
    if (m_order_isSet) {
        obj.insert(QString("Order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_redirect_config.isSet()) {
        obj.insert(QString("RedirectConfig"), ::OpenAPI::toJsonValue(m_redirect_config));
    }
    if (m_fixed_response_config.isSet()) {
        obj.insert(QString("FixedResponseConfig"), ::OpenAPI::toJsonValue(m_fixed_response_config));
    }
    if (m_forward_config.isSet()) {
        obj.insert(QString("ForwardConfig"), ::OpenAPI::toJsonValue(m_forward_config));
    }
    return obj;
}

OAIActionTypeEnum OAIAction::getType() const {
    return m_type;
}
void OAIAction::setType(const OAIActionTypeEnum &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAction::getTargetGroupArn() const {
    return m_target_group_arn;
}
void OAIAction::setTargetGroupArn(const QString &target_group_arn) {
    m_target_group_arn = target_group_arn;
    m_target_group_arn_isSet = true;
}

bool OAIAction::is_target_group_arn_Set() const{
    return m_target_group_arn_isSet;
}

bool OAIAction::is_target_group_arn_Valid() const{
    return m_target_group_arn_isValid;
}

OAIAction_AuthenticateOidcConfig OAIAction::getAuthenticateOidcConfig() const {
    return m_authenticate_oidc_config;
}
void OAIAction::setAuthenticateOidcConfig(const OAIAction_AuthenticateOidcConfig &authenticate_oidc_config) {
    m_authenticate_oidc_config = authenticate_oidc_config;
    m_authenticate_oidc_config_isSet = true;
}

bool OAIAction::is_authenticate_oidc_config_Set() const{
    return m_authenticate_oidc_config_isSet;
}

bool OAIAction::is_authenticate_oidc_config_Valid() const{
    return m_authenticate_oidc_config_isValid;
}

OAIAction_AuthenticateCognitoConfig OAIAction::getAuthenticateCognitoConfig() const {
    return m_authenticate_cognito_config;
}
void OAIAction::setAuthenticateCognitoConfig(const OAIAction_AuthenticateCognitoConfig &authenticate_cognito_config) {
    m_authenticate_cognito_config = authenticate_cognito_config;
    m_authenticate_cognito_config_isSet = true;
}

bool OAIAction::is_authenticate_cognito_config_Set() const{
    return m_authenticate_cognito_config_isSet;
}

bool OAIAction::is_authenticate_cognito_config_Valid() const{
    return m_authenticate_cognito_config_isValid;
}

qint32 OAIAction::getOrder() const {
    return m_order;
}
void OAIAction::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIAction::is_order_Set() const{
    return m_order_isSet;
}

bool OAIAction::is_order_Valid() const{
    return m_order_isValid;
}

OAIAction_RedirectConfig OAIAction::getRedirectConfig() const {
    return m_redirect_config;
}
void OAIAction::setRedirectConfig(const OAIAction_RedirectConfig &redirect_config) {
    m_redirect_config = redirect_config;
    m_redirect_config_isSet = true;
}

bool OAIAction::is_redirect_config_Set() const{
    return m_redirect_config_isSet;
}

bool OAIAction::is_redirect_config_Valid() const{
    return m_redirect_config_isValid;
}

OAIAction_FixedResponseConfig OAIAction::getFixedResponseConfig() const {
    return m_fixed_response_config;
}
void OAIAction::setFixedResponseConfig(const OAIAction_FixedResponseConfig &fixed_response_config) {
    m_fixed_response_config = fixed_response_config;
    m_fixed_response_config_isSet = true;
}

bool OAIAction::is_fixed_response_config_Set() const{
    return m_fixed_response_config_isSet;
}

bool OAIAction::is_fixed_response_config_Valid() const{
    return m_fixed_response_config_isValid;
}

OAIAction_ForwardConfig OAIAction::getForwardConfig() const {
    return m_forward_config;
}
void OAIAction::setForwardConfig(const OAIAction_ForwardConfig &forward_config) {
    m_forward_config = forward_config;
    m_forward_config_isSet = true;
}

bool OAIAction::is_forward_config_Set() const{
    return m_forward_config_isSet;
}

bool OAIAction::is_forward_config_Valid() const{
    return m_forward_config_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticate_oidc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticate_cognito_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_response_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
