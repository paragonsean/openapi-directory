/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRuleCondition.h
 *
 * &lt;p&gt;Information about a condition for a rule.&lt;/p&gt; &lt;p&gt;Each rule can optionally include up to one of each of the following conditions: &lt;code&gt;http-request-method&lt;/code&gt;, &lt;code&gt;host-header&lt;/code&gt;, &lt;code&gt;path-pattern&lt;/code&gt;, and &lt;code&gt;source-ip&lt;/code&gt;. Each rule can also optionally include one or more of each of the following conditions: &lt;code&gt;http-header&lt;/code&gt; and &lt;code&gt;query-string&lt;/code&gt;. Note that the value for a condition cannot be empty.&lt;/p&gt;
 */

#ifndef OAIRuleCondition_H
#define OAIRuleCondition_H

#include <QJsonObject>

#include "OAIRuleCondition_HostHeaderConfig.h"
#include "OAIRuleCondition_HttpHeaderConfig.h"
#include "OAIRuleCondition_HttpRequestMethodConfig.h"
#include "OAIRuleCondition_PathPatternConfig.h"
#include "OAIRuleCondition_QueryStringConfig.h"
#include "OAIRuleCondition_SourceIpConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRuleCondition_HostHeaderConfig;
class OAIRuleCondition_PathPatternConfig;
class OAIRuleCondition_HttpHeaderConfig;
class OAIRuleCondition_QueryStringConfig;
class OAIRuleCondition_HttpRequestMethodConfig;
class OAIRuleCondition_SourceIpConfig;

class OAIRuleCondition : public OAIObject {
public:
    OAIRuleCondition();
    OAIRuleCondition(QString json);
    ~OAIRuleCondition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getField() const;
    void setField(const QString &field);
    bool is_field_Set() const;
    bool is_field_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    OAIRuleCondition_HostHeaderConfig getHostHeaderConfig() const;
    void setHostHeaderConfig(const OAIRuleCondition_HostHeaderConfig &host_header_config);
    bool is_host_header_config_Set() const;
    bool is_host_header_config_Valid() const;

    OAIRuleCondition_PathPatternConfig getPathPatternConfig() const;
    void setPathPatternConfig(const OAIRuleCondition_PathPatternConfig &path_pattern_config);
    bool is_path_pattern_config_Set() const;
    bool is_path_pattern_config_Valid() const;

    OAIRuleCondition_HttpHeaderConfig getHttpHeaderConfig() const;
    void setHttpHeaderConfig(const OAIRuleCondition_HttpHeaderConfig &http_header_config);
    bool is_http_header_config_Set() const;
    bool is_http_header_config_Valid() const;

    OAIRuleCondition_QueryStringConfig getQueryStringConfig() const;
    void setQueryStringConfig(const OAIRuleCondition_QueryStringConfig &query_string_config);
    bool is_query_string_config_Set() const;
    bool is_query_string_config_Valid() const;

    OAIRuleCondition_HttpRequestMethodConfig getHttpRequestMethodConfig() const;
    void setHttpRequestMethodConfig(const OAIRuleCondition_HttpRequestMethodConfig &http_request_method_config);
    bool is_http_request_method_config_Set() const;
    bool is_http_request_method_config_Valid() const;

    OAIRuleCondition_SourceIpConfig getSourceIpConfig() const;
    void setSourceIpConfig(const OAIRuleCondition_SourceIpConfig &source_ip_config);
    bool is_source_ip_config_Set() const;
    bool is_source_ip_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_field;
    bool m_field_isSet;
    bool m_field_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;

    OAIRuleCondition_HostHeaderConfig m_host_header_config;
    bool m_host_header_config_isSet;
    bool m_host_header_config_isValid;

    OAIRuleCondition_PathPatternConfig m_path_pattern_config;
    bool m_path_pattern_config_isSet;
    bool m_path_pattern_config_isValid;

    OAIRuleCondition_HttpHeaderConfig m_http_header_config;
    bool m_http_header_config_isSet;
    bool m_http_header_config_isValid;

    OAIRuleCondition_QueryStringConfig m_query_string_config;
    bool m_query_string_config_isSet;
    bool m_query_string_config_isValid;

    OAIRuleCondition_HttpRequestMethodConfig m_http_request_method_config;
    bool m_http_request_method_config_isSet;
    bool m_http_request_method_config_isValid;

    OAIRuleCondition_SourceIpConfig m_source_ip_config;
    bool m_source_ip_config_isSet;
    bool m_source_ip_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRuleCondition)

#endif // OAIRuleCondition_H
