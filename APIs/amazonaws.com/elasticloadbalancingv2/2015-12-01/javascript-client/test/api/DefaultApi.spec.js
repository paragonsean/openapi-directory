/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ElasticLoadBalancing);
  }
}(this, function(expect, ElasticLoadBalancing) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ElasticLoadBalancing.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('gETAddListenerCertificates', function() {
      it('should call gETAddListenerCertificates successfully', function(done) {
        //uncomment below and update the code to test gETAddListenerCertificates
        //instance.gETAddListenerCertificates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETAddTags', function() {
      it('should call gETAddTags successfully', function(done) {
        //uncomment below and update the code to test gETAddTags
        //instance.gETAddTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETCreateListener', function() {
      it('should call gETCreateListener successfully', function(done) {
        //uncomment below and update the code to test gETCreateListener
        //instance.gETCreateListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETCreateLoadBalancer', function() {
      it('should call gETCreateLoadBalancer successfully', function(done) {
        //uncomment below and update the code to test gETCreateLoadBalancer
        //instance.gETCreateLoadBalancer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETCreateRule', function() {
      it('should call gETCreateRule successfully', function(done) {
        //uncomment below and update the code to test gETCreateRule
        //instance.gETCreateRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETCreateTargetGroup', function() {
      it('should call gETCreateTargetGroup successfully', function(done) {
        //uncomment below and update the code to test gETCreateTargetGroup
        //instance.gETCreateTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeleteListener', function() {
      it('should call gETDeleteListener successfully', function(done) {
        //uncomment below and update the code to test gETDeleteListener
        //instance.gETDeleteListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeleteLoadBalancer', function() {
      it('should call gETDeleteLoadBalancer successfully', function(done) {
        //uncomment below and update the code to test gETDeleteLoadBalancer
        //instance.gETDeleteLoadBalancer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeleteRule', function() {
      it('should call gETDeleteRule successfully', function(done) {
        //uncomment below and update the code to test gETDeleteRule
        //instance.gETDeleteRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeleteTargetGroup', function() {
      it('should call gETDeleteTargetGroup successfully', function(done) {
        //uncomment below and update the code to test gETDeleteTargetGroup
        //instance.gETDeleteTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeregisterTargets', function() {
      it('should call gETDeregisterTargets successfully', function(done) {
        //uncomment below and update the code to test gETDeregisterTargets
        //instance.gETDeregisterTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeAccountLimits', function() {
      it('should call gETDescribeAccountLimits successfully', function(done) {
        //uncomment below and update the code to test gETDescribeAccountLimits
        //instance.gETDescribeAccountLimits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeListenerCertificates', function() {
      it('should call gETDescribeListenerCertificates successfully', function(done) {
        //uncomment below and update the code to test gETDescribeListenerCertificates
        //instance.gETDescribeListenerCertificates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeListeners', function() {
      it('should call gETDescribeListeners successfully', function(done) {
        //uncomment below and update the code to test gETDescribeListeners
        //instance.gETDescribeListeners(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeLoadBalancerAttributes', function() {
      it('should call gETDescribeLoadBalancerAttributes successfully', function(done) {
        //uncomment below and update the code to test gETDescribeLoadBalancerAttributes
        //instance.gETDescribeLoadBalancerAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeLoadBalancers', function() {
      it('should call gETDescribeLoadBalancers successfully', function(done) {
        //uncomment below and update the code to test gETDescribeLoadBalancers
        //instance.gETDescribeLoadBalancers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeRules', function() {
      it('should call gETDescribeRules successfully', function(done) {
        //uncomment below and update the code to test gETDescribeRules
        //instance.gETDescribeRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeSSLPolicies', function() {
      it('should call gETDescribeSSLPolicies successfully', function(done) {
        //uncomment below and update the code to test gETDescribeSSLPolicies
        //instance.gETDescribeSSLPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeTags', function() {
      it('should call gETDescribeTags successfully', function(done) {
        //uncomment below and update the code to test gETDescribeTags
        //instance.gETDescribeTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeTargetGroupAttributes', function() {
      it('should call gETDescribeTargetGroupAttributes successfully', function(done) {
        //uncomment below and update the code to test gETDescribeTargetGroupAttributes
        //instance.gETDescribeTargetGroupAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeTargetGroups', function() {
      it('should call gETDescribeTargetGroups successfully', function(done) {
        //uncomment below and update the code to test gETDescribeTargetGroups
        //instance.gETDescribeTargetGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDescribeTargetHealth', function() {
      it('should call gETDescribeTargetHealth successfully', function(done) {
        //uncomment below and update the code to test gETDescribeTargetHealth
        //instance.gETDescribeTargetHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETModifyListener', function() {
      it('should call gETModifyListener successfully', function(done) {
        //uncomment below and update the code to test gETModifyListener
        //instance.gETModifyListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETModifyLoadBalancerAttributes', function() {
      it('should call gETModifyLoadBalancerAttributes successfully', function(done) {
        //uncomment below and update the code to test gETModifyLoadBalancerAttributes
        //instance.gETModifyLoadBalancerAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETModifyRule', function() {
      it('should call gETModifyRule successfully', function(done) {
        //uncomment below and update the code to test gETModifyRule
        //instance.gETModifyRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETModifyTargetGroup', function() {
      it('should call gETModifyTargetGroup successfully', function(done) {
        //uncomment below and update the code to test gETModifyTargetGroup
        //instance.gETModifyTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETModifyTargetGroupAttributes', function() {
      it('should call gETModifyTargetGroupAttributes successfully', function(done) {
        //uncomment below and update the code to test gETModifyTargetGroupAttributes
        //instance.gETModifyTargetGroupAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETRegisterTargets', function() {
      it('should call gETRegisterTargets successfully', function(done) {
        //uncomment below and update the code to test gETRegisterTargets
        //instance.gETRegisterTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETRemoveListenerCertificates', function() {
      it('should call gETRemoveListenerCertificates successfully', function(done) {
        //uncomment below and update the code to test gETRemoveListenerCertificates
        //instance.gETRemoveListenerCertificates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETRemoveTags', function() {
      it('should call gETRemoveTags successfully', function(done) {
        //uncomment below and update the code to test gETRemoveTags
        //instance.gETRemoveTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETSetIpAddressType', function() {
      it('should call gETSetIpAddressType successfully', function(done) {
        //uncomment below and update the code to test gETSetIpAddressType
        //instance.gETSetIpAddressType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETSetRulePriorities', function() {
      it('should call gETSetRulePriorities successfully', function(done) {
        //uncomment below and update the code to test gETSetRulePriorities
        //instance.gETSetRulePriorities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETSetSecurityGroups', function() {
      it('should call gETSetSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test gETSetSecurityGroups
        //instance.gETSetSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETSetSubnets', function() {
      it('should call gETSetSubnets successfully', function(done) {
        //uncomment below and update the code to test gETSetSubnets
        //instance.gETSetSubnets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTAddListenerCertificates', function() {
      it('should call pOSTAddListenerCertificates successfully', function(done) {
        //uncomment below and update the code to test pOSTAddListenerCertificates
        //instance.pOSTAddListenerCertificates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTAddTags', function() {
      it('should call pOSTAddTags successfully', function(done) {
        //uncomment below and update the code to test pOSTAddTags
        //instance.pOSTAddTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTCreateListener', function() {
      it('should call pOSTCreateListener successfully', function(done) {
        //uncomment below and update the code to test pOSTCreateListener
        //instance.pOSTCreateListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTCreateLoadBalancer', function() {
      it('should call pOSTCreateLoadBalancer successfully', function(done) {
        //uncomment below and update the code to test pOSTCreateLoadBalancer
        //instance.pOSTCreateLoadBalancer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTCreateRule', function() {
      it('should call pOSTCreateRule successfully', function(done) {
        //uncomment below and update the code to test pOSTCreateRule
        //instance.pOSTCreateRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTCreateTargetGroup', function() {
      it('should call pOSTCreateTargetGroup successfully', function(done) {
        //uncomment below and update the code to test pOSTCreateTargetGroup
        //instance.pOSTCreateTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeleteListener', function() {
      it('should call pOSTDeleteListener successfully', function(done) {
        //uncomment below and update the code to test pOSTDeleteListener
        //instance.pOSTDeleteListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeleteLoadBalancer', function() {
      it('should call pOSTDeleteLoadBalancer successfully', function(done) {
        //uncomment below and update the code to test pOSTDeleteLoadBalancer
        //instance.pOSTDeleteLoadBalancer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeleteRule', function() {
      it('should call pOSTDeleteRule successfully', function(done) {
        //uncomment below and update the code to test pOSTDeleteRule
        //instance.pOSTDeleteRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeleteTargetGroup', function() {
      it('should call pOSTDeleteTargetGroup successfully', function(done) {
        //uncomment below and update the code to test pOSTDeleteTargetGroup
        //instance.pOSTDeleteTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeregisterTargets', function() {
      it('should call pOSTDeregisterTargets successfully', function(done) {
        //uncomment below and update the code to test pOSTDeregisterTargets
        //instance.pOSTDeregisterTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeAccountLimits', function() {
      it('should call pOSTDescribeAccountLimits successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeAccountLimits
        //instance.pOSTDescribeAccountLimits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeListenerCertificates', function() {
      it('should call pOSTDescribeListenerCertificates successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeListenerCertificates
        //instance.pOSTDescribeListenerCertificates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeListeners', function() {
      it('should call pOSTDescribeListeners successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeListeners
        //instance.pOSTDescribeListeners(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeLoadBalancerAttributes', function() {
      it('should call pOSTDescribeLoadBalancerAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeLoadBalancerAttributes
        //instance.pOSTDescribeLoadBalancerAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeLoadBalancers', function() {
      it('should call pOSTDescribeLoadBalancers successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeLoadBalancers
        //instance.pOSTDescribeLoadBalancers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeRules', function() {
      it('should call pOSTDescribeRules successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeRules
        //instance.pOSTDescribeRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeSSLPolicies', function() {
      it('should call pOSTDescribeSSLPolicies successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeSSLPolicies
        //instance.pOSTDescribeSSLPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeTags', function() {
      it('should call pOSTDescribeTags successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeTags
        //instance.pOSTDescribeTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeTargetGroupAttributes', function() {
      it('should call pOSTDescribeTargetGroupAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeTargetGroupAttributes
        //instance.pOSTDescribeTargetGroupAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeTargetGroups', function() {
      it('should call pOSTDescribeTargetGroups successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeTargetGroups
        //instance.pOSTDescribeTargetGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDescribeTargetHealth', function() {
      it('should call pOSTDescribeTargetHealth successfully', function(done) {
        //uncomment below and update the code to test pOSTDescribeTargetHealth
        //instance.pOSTDescribeTargetHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTModifyListener', function() {
      it('should call pOSTModifyListener successfully', function(done) {
        //uncomment below and update the code to test pOSTModifyListener
        //instance.pOSTModifyListener(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTModifyLoadBalancerAttributes', function() {
      it('should call pOSTModifyLoadBalancerAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTModifyLoadBalancerAttributes
        //instance.pOSTModifyLoadBalancerAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTModifyRule', function() {
      it('should call pOSTModifyRule successfully', function(done) {
        //uncomment below and update the code to test pOSTModifyRule
        //instance.pOSTModifyRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTModifyTargetGroup', function() {
      it('should call pOSTModifyTargetGroup successfully', function(done) {
        //uncomment below and update the code to test pOSTModifyTargetGroup
        //instance.pOSTModifyTargetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTModifyTargetGroupAttributes', function() {
      it('should call pOSTModifyTargetGroupAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTModifyTargetGroupAttributes
        //instance.pOSTModifyTargetGroupAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTRegisterTargets', function() {
      it('should call pOSTRegisterTargets successfully', function(done) {
        //uncomment below and update the code to test pOSTRegisterTargets
        //instance.pOSTRegisterTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTRemoveListenerCertificates', function() {
      it('should call pOSTRemoveListenerCertificates successfully', function(done) {
        //uncomment below and update the code to test pOSTRemoveListenerCertificates
        //instance.pOSTRemoveListenerCertificates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTRemoveTags', function() {
      it('should call pOSTRemoveTags successfully', function(done) {
        //uncomment below and update the code to test pOSTRemoveTags
        //instance.pOSTRemoveTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTSetIpAddressType', function() {
      it('should call pOSTSetIpAddressType successfully', function(done) {
        //uncomment below and update the code to test pOSTSetIpAddressType
        //instance.pOSTSetIpAddressType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTSetRulePriorities', function() {
      it('should call pOSTSetRulePriorities successfully', function(done) {
        //uncomment below and update the code to test pOSTSetRulePriorities
        //instance.pOSTSetRulePriorities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTSetSecurityGroups', function() {
      it('should call pOSTSetSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test pOSTSetSecurityGroups
        //instance.pOSTSetSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTSetSubnets', function() {
      it('should call pOSTSetSubnets successfully', function(done) {
        //uncomment below and update the code to test pOSTSetSubnets
        //instance.pOSTSetSubnets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
