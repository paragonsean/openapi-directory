/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ElasticLoadBalancing);
  }
}(this, function(expect, ElasticLoadBalancing) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ElasticLoadBalancing.CreateTargetGroupInput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateTargetGroupInput', function() {
    it('should create an instance of CreateTargetGroupInput', function() {
      // uncomment below and update the code to test CreateTargetGroupInput
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be.a(ElasticLoadBalancing.CreateTargetGroupInput);
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "Protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property protocolVersion (base name: "ProtocolVersion")', function() {
      // uncomment below and update the code to test the property protocolVersion
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "Port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property vpcId (base name: "VpcId")', function() {
      // uncomment below and update the code to test the property vpcId
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckProtocol (base name: "HealthCheckProtocol")', function() {
      // uncomment below and update the code to test the property healthCheckProtocol
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckPort (base name: "HealthCheckPort")', function() {
      // uncomment below and update the code to test the property healthCheckPort
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckEnabled (base name: "HealthCheckEnabled")', function() {
      // uncomment below and update the code to test the property healthCheckEnabled
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckPath (base name: "HealthCheckPath")', function() {
      // uncomment below and update the code to test the property healthCheckPath
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckIntervalSeconds (base name: "HealthCheckIntervalSeconds")', function() {
      // uncomment below and update the code to test the property healthCheckIntervalSeconds
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckTimeoutSeconds (base name: "HealthCheckTimeoutSeconds")', function() {
      // uncomment below and update the code to test the property healthCheckTimeoutSeconds
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property healthyThresholdCount (base name: "HealthyThresholdCount")', function() {
      // uncomment below and update the code to test the property healthyThresholdCount
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property unhealthyThresholdCount (base name: "UnhealthyThresholdCount")', function() {
      // uncomment below and update the code to test the property unhealthyThresholdCount
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property matcher (base name: "Matcher")', function() {
      // uncomment below and update the code to test the property matcher
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property targetType (base name: "TargetType")', function() {
      // uncomment below and update the code to test the property targetType
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

    it('should have the property ipAddressType (base name: "IpAddressType")', function() {
      // uncomment below and update the code to test the property ipAddressType
      //var instance = new ElasticLoadBalancing.CreateTargetGroupInput();
      //expect(instance).to.be();
    });

  });

}));
