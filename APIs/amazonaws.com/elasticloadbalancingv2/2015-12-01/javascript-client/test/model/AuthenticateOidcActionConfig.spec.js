/**
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ElasticLoadBalancing);
  }
}(this, function(expect, ElasticLoadBalancing) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuthenticateOidcActionConfig', function() {
    it('should create an instance of AuthenticateOidcActionConfig', function() {
      // uncomment below and update the code to test AuthenticateOidcActionConfig
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be.a(ElasticLoadBalancing.AuthenticateOidcActionConfig);
    });

    it('should have the property issuer (base name: "Issuer")', function() {
      // uncomment below and update the code to test the property issuer
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property authorizationEndpoint (base name: "AuthorizationEndpoint")', function() {
      // uncomment below and update the code to test the property authorizationEndpoint
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property tokenEndpoint (base name: "TokenEndpoint")', function() {
      // uncomment below and update the code to test the property tokenEndpoint
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property userInfoEndpoint (base name: "UserInfoEndpoint")', function() {
      // uncomment below and update the code to test the property userInfoEndpoint
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "ClientId")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property clientSecret (base name: "ClientSecret")', function() {
      // uncomment below and update the code to test the property clientSecret
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property sessionCookieName (base name: "SessionCookieName")', function() {
      // uncomment below and update the code to test the property sessionCookieName
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "Scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property sessionTimeout (base name: "SessionTimeout")', function() {
      // uncomment below and update the code to test the property sessionTimeout
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property authenticationRequestExtraParams (base name: "AuthenticationRequestExtraParams")', function() {
      // uncomment below and update the code to test the property authenticationRequestExtraParams
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property onUnauthenticatedRequest (base name: "OnUnauthenticatedRequest")', function() {
      // uncomment below and update the code to test the property onUnauthenticatedRequest
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

    it('should have the property useExistingClientSecret (base name: "UseExistingClientSecret")', function() {
      // uncomment below and update the code to test the property useExistingClientSecret
      //var instance = new ElasticLoadBalancing.AuthenticateOidcActionConfig();
      //expect(instance).to.be();
    });

  });

}));
