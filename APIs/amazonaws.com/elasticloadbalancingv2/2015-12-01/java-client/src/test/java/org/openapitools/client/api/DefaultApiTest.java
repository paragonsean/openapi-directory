/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.AddListenerCertificatesInput;
import org.openapitools.client.model.AddListenerCertificatesOutput;
import org.openapitools.client.model.AddTagsInput;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CreateListenerInput;
import org.openapitools.client.model.CreateListenerOutput;
import org.openapitools.client.model.CreateLoadBalancerInput;
import org.openapitools.client.model.CreateLoadBalancerOutput;
import org.openapitools.client.model.CreateRuleInput;
import org.openapitools.client.model.CreateRuleOutput;
import org.openapitools.client.model.CreateTargetGroupInput;
import org.openapitools.client.model.CreateTargetGroupOutput;
import org.openapitools.client.model.DeleteListenerInput;
import org.openapitools.client.model.DeleteLoadBalancerInput;
import org.openapitools.client.model.DeleteRuleInput;
import org.openapitools.client.model.DeleteTargetGroupInput;
import org.openapitools.client.model.DeregisterTargetsInput;
import org.openapitools.client.model.DescribeAccountLimitsInput;
import org.openapitools.client.model.DescribeAccountLimitsOutput;
import org.openapitools.client.model.DescribeListenerCertificatesInput;
import org.openapitools.client.model.DescribeListenerCertificatesOutput;
import org.openapitools.client.model.DescribeListenersInput;
import org.openapitools.client.model.DescribeListenersOutput;
import org.openapitools.client.model.DescribeLoadBalancerAttributesInput;
import org.openapitools.client.model.DescribeLoadBalancerAttributesOutput;
import org.openapitools.client.model.DescribeLoadBalancersInput;
import org.openapitools.client.model.DescribeLoadBalancersOutput;
import org.openapitools.client.model.DescribeRulesInput;
import org.openapitools.client.model.DescribeRulesOutput;
import org.openapitools.client.model.DescribeSSLPoliciesInput;
import org.openapitools.client.model.DescribeSSLPoliciesOutput;
import org.openapitools.client.model.DescribeTagsInput;
import org.openapitools.client.model.DescribeTagsOutput;
import org.openapitools.client.model.DescribeTargetGroupAttributesInput;
import org.openapitools.client.model.DescribeTargetGroupAttributesOutput;
import org.openapitools.client.model.DescribeTargetGroupsInput;
import org.openapitools.client.model.DescribeTargetGroupsOutput;
import org.openapitools.client.model.DescribeTargetHealthInput;
import org.openapitools.client.model.DescribeTargetHealthOutput;
import org.openapitools.client.model.GETCreateTargetGroupMatcherParameter;
import org.openapitools.client.model.LoadBalancerAttribute;
import org.openapitools.client.model.ModifyListenerInput;
import org.openapitools.client.model.ModifyListenerOutput;
import org.openapitools.client.model.ModifyLoadBalancerAttributesInput;
import org.openapitools.client.model.ModifyLoadBalancerAttributesOutput;
import org.openapitools.client.model.ModifyRuleInput;
import org.openapitools.client.model.ModifyRuleOutput;
import org.openapitools.client.model.ModifyTargetGroupAttributesInput;
import org.openapitools.client.model.ModifyTargetGroupAttributesOutput;
import org.openapitools.client.model.ModifyTargetGroupInput;
import org.openapitools.client.model.ModifyTargetGroupOutput;
import org.openapitools.client.model.RegisterTargetsInput;
import org.openapitools.client.model.RemoveListenerCertificatesInput;
import org.openapitools.client.model.RemoveTagsInput;
import org.openapitools.client.model.RuleCondition;
import org.openapitools.client.model.RulePriorityPair;
import org.openapitools.client.model.SetIpAddressTypeInput;
import org.openapitools.client.model.SetIpAddressTypeOutput;
import org.openapitools.client.model.SetRulePrioritiesInput;
import org.openapitools.client.model.SetRulePrioritiesOutput;
import org.openapitools.client.model.SetSecurityGroupsInput;
import org.openapitools.client.model.SetSecurityGroupsOutput;
import org.openapitools.client.model.SetSubnetsInput;
import org.openapitools.client.model.SetSubnetsOutput;
import org.openapitools.client.model.SubnetMapping;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TargetDescription;
import org.openapitools.client.model.TargetGroupAttribute;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the certificate in already in the certificate list, the call is successful but the certificate is not added again.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\&quot;&gt;HTTPS listeners&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\&quot;&gt;TLS listeners&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddListenerCertificatesTest() throws ApiException {
        String listenerArn = null;
        List<Certificate> certificates = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddListenerCertificatesOutput response = api.gETAddListenerCertificates(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, and rules.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a resource already has a tag with the same key, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddTagsTest() throws ApiException {
        List<String> resourceArns = null;
        List<Tag> tags = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETAddTags(resourceArns, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\&quot;&gt;Listeners for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\&quot;&gt;Listeners for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html\&quot;&gt;Listeners for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateListenerTest() throws ApiException {
        String loadBalancerArn = null;
        List<Action> defaultActions = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String protocol = null;
        Integer port = null;
        String sslPolicy = null;
        List<Certificate> certificates = null;
        List<String> alpnPolicy = null;
        List<Tag> tags = null;
        CreateListenerOutput response = api.gETCreateListener(loadBalancerArn, defaultActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, port, sslPolicy, certificates, alpnPolicy, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html\&quot;&gt;Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html\&quot;&gt;Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html\&quot;&gt;Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateLoadBalancerTest() throws ApiException {
        String name = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> subnets = null;
        List<SubnetMapping> subnetMappings = null;
        List<String> securityGroups = null;
        String scheme = null;
        List<Tag> tags = null;
        String type = null;
        String ipAddressType = null;
        String customerOwnedIpv4Pool = null;
        CreateLoadBalancerOutput response = api.gETCreateLoadBalancer(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, securityGroups, scheme, tags, type, ipAddressType, customerOwnedIpv4Pool);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.&lt;/p&gt; &lt;p&gt;Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateRuleTest() throws ApiException {
        String listenerArn = null;
        List<RuleCondition> conditions = null;
        Integer priority = null;
        List<Action> actions = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<Tag> tags = null;
        CreateRuleOutput response = api.gETCreateRule(listenerArn, conditions, priority, actions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html\&quot;&gt;Target groups for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html\&quot;&gt;Target groups for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html\&quot;&gt;Target groups for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateTargetGroupTest() throws ApiException {
        String name = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String protocol = null;
        String protocolVersion = null;
        Integer port = null;
        String vpcId = null;
        String healthCheckProtocol = null;
        String healthCheckPort = null;
        Boolean healthCheckEnabled = null;
        String healthCheckPath = null;
        Integer healthCheckIntervalSeconds = null;
        Integer healthCheckTimeoutSeconds = null;
        Integer healthyThresholdCount = null;
        Integer unhealthyThresholdCount = null;
        GETCreateTargetGroupMatcherParameter matcher = null;
        String targetType = null;
        List<Tag> tags = null;
        String ipAddressType = null;
        CreateTargetGroupOutput response = api.gETCreateTargetGroup(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, protocolVersion, port, vpcId, healthCheckProtocol, healthCheckPort, healthCheckEnabled, healthCheckPath, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher, targetType, tags, ipAddressType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified listener.&lt;/p&gt; &lt;p&gt;Alternatively, your listener is deleted when you delete the load balancer to which it is attached.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteListenerTest() throws ApiException {
        String listenerArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDeleteListener(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.&lt;/p&gt; &lt;p&gt;Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteLoadBalancerTest() throws ApiException {
        String loadBalancerArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDeleteLoadBalancer(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified rule.&lt;/p&gt; &lt;p&gt;You can&#39;t delete the default rule.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteRuleTest() throws ApiException {
        String ruleArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDeleteRule(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified target group.&lt;/p&gt; &lt;p&gt;You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteTargetGroupTest() throws ApiException {
        String targetGroupArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDeleteTargetGroup(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeregisterTargetsTest() throws ApiException {
        String targetGroupArn = null;
        List<TargetDescription> targets = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDeregisterTargets(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html\&quot;&gt;Quotas for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html\&quot;&gt;Quotas for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html\&quot;&gt;Quotas for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeAccountLimitsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        Integer pageSize = null;
        DescribeAccountLimitsOutput response = api.gETDescribeAccountLimits(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the default certificate is also in the certificate list, it appears twice in the results (once with &lt;code&gt;IsDefault&lt;/code&gt; set to true and once with &lt;code&gt;IsDefault&lt;/code&gt; set to false).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates\&quot;&gt;SSL certificates&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate\&quot;&gt;Server certificates&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeListenerCertificatesTest() throws ApiException {
        String listenerArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        Integer pageSize = null;
        DescribeListenerCertificatesOutput response = api.gETDescribeListenerCertificates(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize);
        // TODO: test validations
    }

    /**
     * Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeListenersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String loadBalancerArn = null;
        List<String> listenerArns = null;
        String marker = null;
        Integer pageSize = null;
        DescribeListenersOutput response = api.gETDescribeListeners(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, listenerArns, marker, pageSize);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeLoadBalancerAttributesTest() throws ApiException {
        String loadBalancerArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLoadBalancerAttributesOutput response = api.gETDescribeLoadBalancerAttributes(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified load balancers or all of your load balancers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeLoadBalancersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> loadBalancerArns = null;
        List<String> names = null;
        String marker = null;
        Integer pageSize = null;
        DescribeLoadBalancersOutput response = api.gETDescribeLoadBalancers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArns, names, marker, pageSize);
        // TODO: test validations
    }

    /**
     * Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeRulesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String listenerArn = null;
        List<String> ruleArns = null;
        String marker = null;
        Integer pageSize = null;
        DescribeRulesOutput response = api.gETDescribeRules(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listenerArn, ruleArns, marker, pageSize);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the specified policies or all policies used for SSL negotiation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeSSLPoliciesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> names = null;
        String marker = null;
        Integer pageSize = null;
        String loadBalancerType = null;
        DescribeSSLPoliciesOutput response = api.gETDescribeSSLPolicies(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, names, marker, pageSize, loadBalancerType);
        // TODO: test validations
    }

    /**
     * Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeTagsTest() throws ApiException {
        List<String> resourceArns = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTagsOutput response = api.gETDescribeTags(resourceArns, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the attributes for the specified target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeTargetGroupAttributesTest() throws ApiException {
        String targetGroupArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTargetGroupAttributesOutput response = api.gETDescribeTargetGroupAttributes(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeTargetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String loadBalancerArn = null;
        List<String> targetGroupArns = null;
        List<String> names = null;
        String marker = null;
        Integer pageSize = null;
        DescribeTargetGroupsOutput response = api.gETDescribeTargetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, targetGroupArns, names, marker, pageSize);
        // TODO: test validations
    }

    /**
     * Describes the health of the specified targets or all of your targets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeTargetHealthTest() throws ApiException {
        String targetGroupArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<TargetDescription> targets = null;
        DescribeTargetHealthOutput response = api.gETDescribeTargetHealth(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targets);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.&lt;/p&gt; &lt;p&gt;Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyListenerTest() throws ApiException {
        String listenerArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer port = null;
        String protocol = null;
        String sslPolicy = null;
        List<Certificate> certificates = null;
        List<Action> defaultActions = null;
        List<String> alpnPolicy = null;
        ModifyListenerOutput response = api.gETModifyListener(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, port, protocol, sslPolicy, certificates, defaultActions, alpnPolicy);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;If any of the specified attributes can&#39;t be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyLoadBalancerAttributesTest() throws ApiException {
        String loadBalancerArn = null;
        List<LoadBalancerAttribute> attributes = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyLoadBalancerAttributesOutput response = api.gETModifyLoadBalancerAttributes(loadBalancerArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyRuleTest() throws ApiException {
        String ruleArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<RuleCondition> conditions = null;
        List<Action> actions = null;
        ModifyRuleOutput response = api.gETModifyRule(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, conditions, actions);
        // TODO: test validations
    }

    /**
     * Modifies the health checks used when evaluating the health state of the targets in the specified target group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyTargetGroupTest() throws ApiException {
        String targetGroupArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String healthCheckProtocol = null;
        String healthCheckPort = null;
        String healthCheckPath = null;
        Boolean healthCheckEnabled = null;
        Integer healthCheckIntervalSeconds = null;
        Integer healthCheckTimeoutSeconds = null;
        Integer healthyThresholdCount = null;
        Integer unhealthyThresholdCount = null;
        GETCreateTargetGroupMatcherParameter matcher = null;
        ModifyTargetGroupOutput response = api.gETModifyTargetGroup(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, healthCheckProtocol, healthCheckPort, healthCheckPath, healthCheckEnabled, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher);
        // TODO: test validations
    }

    /**
     * Modifies the specified attributes of the specified target group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyTargetGroupAttributesTest() throws ApiException {
        String targetGroupArn = null;
        List<TargetGroupAttribute> attributes = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyTargetGroupAttributesOutput response = api.gETModifyTargetGroupAttributes(targetGroupArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Registers the specified targets with the specified target group.&lt;/p&gt; &lt;p&gt;If the target is an EC2 instance, it must be in the &lt;code&gt;running&lt;/code&gt; state when you register it.&lt;/p&gt; &lt;p&gt;By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.&lt;/p&gt; &lt;p&gt;With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRegisterTargetsTest() throws ApiException {
        String targetGroupArn = null;
        List<TargetDescription> targets = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETRegisterTargets(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveListenerCertificatesTest() throws ApiException {
        String listenerArn = null;
        List<Certificate> certificates = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETRemoveListenerCertificates(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveTagsTest() throws ApiException {
        List<String> resourceArns = null;
        List<String> tagKeys = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETRemoveTags(resourceArns, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets the type of IP addresses used by the subnets of the specified load balancer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetIpAddressTypeTest() throws ApiException {
        String loadBalancerArn = null;
        String ipAddressType = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetIpAddressTypeOutput response = api.gETSetIpAddressType(loadBalancerArn, ipAddressType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the priorities of the specified rules.&lt;/p&gt; &lt;p&gt;You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetRulePrioritiesTest() throws ApiException {
        List<RulePriorityPair> rulePriorities = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetRulePrioritiesOutput response = api.gETSetRulePriorities(rulePriorities, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;You can&#39;t specify a security group for a Network Load Balancer or Gateway Load Balancer.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetSecurityGroupsTest() throws ApiException {
        String loadBalancerArn = null;
        List<String> securityGroups = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetSecurityGroupsOutput response = api.gETSetSecurityGroups(loadBalancerArn, securityGroups, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer or Network Load Balancer. The specified subnets replace the previously enabled subnets.&lt;/p&gt; &lt;p&gt;When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetSubnetsTest() throws ApiException {
        String loadBalancerArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> subnets = null;
        List<SubnetMapping> subnetMappings = null;
        String ipAddressType = null;
        SetSubnetsOutput response = api.gETSetSubnets(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, ipAddressType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the certificate in already in the certificate list, the call is successful but the certificate is not added again.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\&quot;&gt;HTTPS listeners&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\&quot;&gt;TLS listeners&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddListenerCertificatesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddListenerCertificatesInput addListenerCertificatesInput = null;
        AddListenerCertificatesOutput response = api.pOSTAddListenerCertificates(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addListenerCertificatesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, and rules.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a resource already has a tag with the same key, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddTagsInput addTagsInput = null;
        Object response = api.pOSTAddTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\&quot;&gt;Listeners for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\&quot;&gt;Listeners for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html\&quot;&gt;Listeners for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateListenerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateListenerInput createListenerInput = null;
        CreateListenerOutput response = api.pOSTCreateListener(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createListenerInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html\&quot;&gt;Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html\&quot;&gt;Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html\&quot;&gt;Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateLoadBalancerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLoadBalancerInput createLoadBalancerInput = null;
        CreateLoadBalancerOutput response = api.pOSTCreateLoadBalancer(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.&lt;/p&gt; &lt;p&gt;Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateRuleTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRuleInput createRuleInput = null;
        CreateRuleOutput response = api.pOSTCreateRule(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createRuleInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html\&quot;&gt;Target groups for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html\&quot;&gt;Target groups for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html\&quot;&gt;Target groups for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateTargetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTargetGroupInput createTargetGroupInput = null;
        CreateTargetGroupOutput response = api.pOSTCreateTargetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTargetGroupInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified listener.&lt;/p&gt; &lt;p&gt;Alternatively, your listener is deleted when you delete the load balancer to which it is attached.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteListenerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteListenerInput deleteListenerInput = null;
        Object response = api.pOSTDeleteListener(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteListenerInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.&lt;/p&gt; &lt;p&gt;Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteLoadBalancerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteLoadBalancerInput deleteLoadBalancerInput = null;
        Object response = api.pOSTDeleteLoadBalancer(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified rule.&lt;/p&gt; &lt;p&gt;You can&#39;t delete the default rule.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteRuleTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRuleInput deleteRuleInput = null;
        Object response = api.pOSTDeleteRule(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteRuleInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified target group.&lt;/p&gt; &lt;p&gt;You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteTargetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTargetGroupInput deleteTargetGroupInput = null;
        Object response = api.pOSTDeleteTargetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTargetGroupInput);
        // TODO: test validations
    }

    /**
     * Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeregisterTargetsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeregisterTargetsInput deregisterTargetsInput = null;
        Object response = api.pOSTDeregisterTargets(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterTargetsInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html\&quot;&gt;Quotas for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html\&quot;&gt;Quotas for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html\&quot;&gt;Quotas for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeAccountLimitsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountLimitsInput describeAccountLimitsInput = null;
        DescribeAccountLimitsOutput response = api.pOSTDescribeAccountLimits(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountLimitsInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the default certificate is also in the certificate list, it appears twice in the results (once with &lt;code&gt;IsDefault&lt;/code&gt; set to true and once with &lt;code&gt;IsDefault&lt;/code&gt; set to false).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates\&quot;&gt;SSL certificates&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate\&quot;&gt;Server certificates&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeListenerCertificatesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeListenerCertificatesInput describeListenerCertificatesInput = null;
        DescribeListenerCertificatesOutput response = api.pOSTDescribeListenerCertificates(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeListenerCertificatesInput);
        // TODO: test validations
    }

    /**
     * Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeListenersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        DescribeListenersInput describeListenersInput = null;
        DescribeListenersOutput response = api.pOSTDescribeListeners(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeListenersInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeLoadBalancerAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput = null;
        DescribeLoadBalancerAttributesOutput response = api.pOSTDescribeLoadBalancerAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerAttributesInput);
        // TODO: test validations
    }

    /**
     * Describes the specified load balancers or all of your load balancers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeLoadBalancersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        DescribeLoadBalancersInput describeLoadBalancersInput = null;
        DescribeLoadBalancersOutput response = api.pOSTDescribeLoadBalancers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeLoadBalancersInput);
        // TODO: test validations
    }

    /**
     * Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeRulesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRulesInput describeRulesInput = null;
        DescribeRulesOutput response = api.pOSTDescribeRules(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeRulesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the specified policies or all policies used for SSL negotiation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeSSLPoliciesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSSLPoliciesInput describeSSLPoliciesInput = null;
        DescribeSSLPoliciesOutput response = api.pOSTDescribeSSLPolicies(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeSSLPoliciesInput);
        // TODO: test validations
    }

    /**
     * Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTagsInput describeTagsInput = null;
        DescribeTagsOutput response = api.pOSTDescribeTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTagsInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the attributes for the specified target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeTargetGroupAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTargetGroupAttributesInput describeTargetGroupAttributesInput = null;
        DescribeTargetGroupAttributesOutput response = api.pOSTDescribeTargetGroupAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetGroupAttributesInput);
        // TODO: test validations
    }

    /**
     * Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeTargetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        DescribeTargetGroupsInput describeTargetGroupsInput = null;
        DescribeTargetGroupsOutput response = api.pOSTDescribeTargetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeTargetGroupsInput);
        // TODO: test validations
    }

    /**
     * Describes the health of the specified targets or all of your targets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeTargetHealthTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTargetHealthInput describeTargetHealthInput = null;
        DescribeTargetHealthOutput response = api.pOSTDescribeTargetHealth(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetHealthInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.&lt;/p&gt; &lt;p&gt;Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyListenerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyListenerInput modifyListenerInput = null;
        ModifyListenerOutput response = api.pOSTModifyListener(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyListenerInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;If any of the specified attributes can&#39;t be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyLoadBalancerAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput = null;
        ModifyLoadBalancerAttributesOutput response = api.pOSTModifyLoadBalancerAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyLoadBalancerAttributesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyRuleTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyRuleInput modifyRuleInput = null;
        ModifyRuleOutput response = api.pOSTModifyRule(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyRuleInput);
        // TODO: test validations
    }

    /**
     * Modifies the health checks used when evaluating the health state of the targets in the specified target group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyTargetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyTargetGroupInput modifyTargetGroupInput = null;
        ModifyTargetGroupOutput response = api.pOSTModifyTargetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupInput);
        // TODO: test validations
    }

    /**
     * Modifies the specified attributes of the specified target group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyTargetGroupAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyTargetGroupAttributesInput modifyTargetGroupAttributesInput = null;
        ModifyTargetGroupAttributesOutput response = api.pOSTModifyTargetGroupAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupAttributesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Registers the specified targets with the specified target group.&lt;/p&gt; &lt;p&gt;If the target is an EC2 instance, it must be in the &lt;code&gt;running&lt;/code&gt; state when you register it.&lt;/p&gt; &lt;p&gt;By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.&lt;/p&gt; &lt;p&gt;With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRegisterTargetsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterTargetsInput registerTargetsInput = null;
        Object response = api.pOSTRegisterTargets(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerTargetsInput);
        // TODO: test validations
    }

    /**
     * Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveListenerCertificatesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveListenerCertificatesInput removeListenerCertificatesInput = null;
        Object response = api.pOSTRemoveListenerCertificates(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeListenerCertificatesInput);
        // TODO: test validations
    }

    /**
     * Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveTagsInput removeTagsInput = null;
        Object response = api.pOSTRemoveTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsInput);
        // TODO: test validations
    }

    /**
     * Sets the type of IP addresses used by the subnets of the specified load balancer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetIpAddressTypeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetIpAddressTypeInput setIpAddressTypeInput = null;
        SetIpAddressTypeOutput response = api.pOSTSetIpAddressType(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setIpAddressTypeInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the priorities of the specified rules.&lt;/p&gt; &lt;p&gt;You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetRulePrioritiesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetRulePrioritiesInput setRulePrioritiesInput = null;
        SetRulePrioritiesOutput response = api.pOSTSetRulePriorities(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setRulePrioritiesInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;You can&#39;t specify a security group for a Network Load Balancer or Gateway Load Balancer.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetSecurityGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetSecurityGroupsInput setSecurityGroupsInput = null;
        SetSecurityGroupsOutput response = api.pOSTSetSecurityGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSecurityGroupsInput);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer or Network Load Balancer. The specified subnets replace the previously enabled subnets.&lt;/p&gt; &lt;p&gt;When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetSubnetsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetSubnetsInput setSubnetsInput = null;
        SetSubnetsOutput response = api.pOSTSetSubnets(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubnetsInput);
        // TODO: test validations
    }

}
