/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateTargetGroupInputMatcher;
import org.openapitools.client.model.ProtocolEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModifyTargetGroupInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:43.672707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModifyTargetGroupInput {
  public static final String SERIALIZED_NAME_TARGET_GROUP_ARN = "TargetGroupArn";
  @SerializedName(SERIALIZED_NAME_TARGET_GROUP_ARN)
  private String targetGroupArn;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_PROTOCOL = "HealthCheckProtocol";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_PROTOCOL)
  private ProtocolEnum healthCheckProtocol;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_PORT = "HealthCheckPort";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_PORT)
  private String healthCheckPort;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_PATH = "HealthCheckPath";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_PATH)
  private String healthCheckPath;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_ENABLED = "HealthCheckEnabled";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_ENABLED)
  private Boolean healthCheckEnabled;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_INTERVAL_SECONDS = "HealthCheckIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_INTERVAL_SECONDS)
  private Integer healthCheckIntervalSeconds;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_TIMEOUT_SECONDS = "HealthCheckTimeoutSeconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_TIMEOUT_SECONDS)
  private Integer healthCheckTimeoutSeconds;

  public static final String SERIALIZED_NAME_HEALTHY_THRESHOLD_COUNT = "HealthyThresholdCount";
  @SerializedName(SERIALIZED_NAME_HEALTHY_THRESHOLD_COUNT)
  private Integer healthyThresholdCount;

  public static final String SERIALIZED_NAME_UNHEALTHY_THRESHOLD_COUNT = "UnhealthyThresholdCount";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_THRESHOLD_COUNT)
  private Integer unhealthyThresholdCount;

  public static final String SERIALIZED_NAME_MATCHER = "Matcher";
  @SerializedName(SERIALIZED_NAME_MATCHER)
  private CreateTargetGroupInputMatcher matcher;

  public ModifyTargetGroupInput() {
  }

  public ModifyTargetGroupInput targetGroupArn(String targetGroupArn) {
    this.targetGroupArn = targetGroupArn;
    return this;
  }

  /**
   * Get targetGroupArn
   * @return targetGroupArn
   */
  @javax.annotation.Nonnull
  public String getTargetGroupArn() {
    return targetGroupArn;
  }

  public void setTargetGroupArn(String targetGroupArn) {
    this.targetGroupArn = targetGroupArn;
  }


  public ModifyTargetGroupInput healthCheckProtocol(ProtocolEnum healthCheckProtocol) {
    this.healthCheckProtocol = healthCheckProtocol;
    return this;
  }

  /**
   * Get healthCheckProtocol
   * @return healthCheckProtocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getHealthCheckProtocol() {
    return healthCheckProtocol;
  }

  public void setHealthCheckProtocol(ProtocolEnum healthCheckProtocol) {
    this.healthCheckProtocol = healthCheckProtocol;
  }


  public ModifyTargetGroupInput healthCheckPort(String healthCheckPort) {
    this.healthCheckPort = healthCheckPort;
    return this;
  }

  /**
   * Get healthCheckPort
   * @return healthCheckPort
   */
  @javax.annotation.Nullable
  public String getHealthCheckPort() {
    return healthCheckPort;
  }

  public void setHealthCheckPort(String healthCheckPort) {
    this.healthCheckPort = healthCheckPort;
  }


  public ModifyTargetGroupInput healthCheckPath(String healthCheckPath) {
    this.healthCheckPath = healthCheckPath;
    return this;
  }

  /**
   * Get healthCheckPath
   * @return healthCheckPath
   */
  @javax.annotation.Nullable
  public String getHealthCheckPath() {
    return healthCheckPath;
  }

  public void setHealthCheckPath(String healthCheckPath) {
    this.healthCheckPath = healthCheckPath;
  }


  public ModifyTargetGroupInput healthCheckEnabled(Boolean healthCheckEnabled) {
    this.healthCheckEnabled = healthCheckEnabled;
    return this;
  }

  /**
   * Get healthCheckEnabled
   * @return healthCheckEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHealthCheckEnabled() {
    return healthCheckEnabled;
  }

  public void setHealthCheckEnabled(Boolean healthCheckEnabled) {
    this.healthCheckEnabled = healthCheckEnabled;
  }


  public ModifyTargetGroupInput healthCheckIntervalSeconds(Integer healthCheckIntervalSeconds) {
    this.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
    return this;
  }

  /**
   * Get healthCheckIntervalSeconds
   * @return healthCheckIntervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getHealthCheckIntervalSeconds() {
    return healthCheckIntervalSeconds;
  }

  public void setHealthCheckIntervalSeconds(Integer healthCheckIntervalSeconds) {
    this.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
  }


  public ModifyTargetGroupInput healthCheckTimeoutSeconds(Integer healthCheckTimeoutSeconds) {
    this.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds;
    return this;
  }

  /**
   * Get healthCheckTimeoutSeconds
   * @return healthCheckTimeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getHealthCheckTimeoutSeconds() {
    return healthCheckTimeoutSeconds;
  }

  public void setHealthCheckTimeoutSeconds(Integer healthCheckTimeoutSeconds) {
    this.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds;
  }


  public ModifyTargetGroupInput healthyThresholdCount(Integer healthyThresholdCount) {
    this.healthyThresholdCount = healthyThresholdCount;
    return this;
  }

  /**
   * Get healthyThresholdCount
   * @return healthyThresholdCount
   */
  @javax.annotation.Nullable
  public Integer getHealthyThresholdCount() {
    return healthyThresholdCount;
  }

  public void setHealthyThresholdCount(Integer healthyThresholdCount) {
    this.healthyThresholdCount = healthyThresholdCount;
  }


  public ModifyTargetGroupInput unhealthyThresholdCount(Integer unhealthyThresholdCount) {
    this.unhealthyThresholdCount = unhealthyThresholdCount;
    return this;
  }

  /**
   * Get unhealthyThresholdCount
   * @return unhealthyThresholdCount
   */
  @javax.annotation.Nullable
  public Integer getUnhealthyThresholdCount() {
    return unhealthyThresholdCount;
  }

  public void setUnhealthyThresholdCount(Integer unhealthyThresholdCount) {
    this.unhealthyThresholdCount = unhealthyThresholdCount;
  }


  public ModifyTargetGroupInput matcher(CreateTargetGroupInputMatcher matcher) {
    this.matcher = matcher;
    return this;
  }

  /**
   * Get matcher
   * @return matcher
   */
  @javax.annotation.Nullable
  public CreateTargetGroupInputMatcher getMatcher() {
    return matcher;
  }

  public void setMatcher(CreateTargetGroupInputMatcher matcher) {
    this.matcher = matcher;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyTargetGroupInput modifyTargetGroupInput = (ModifyTargetGroupInput) o;
    return Objects.equals(this.targetGroupArn, modifyTargetGroupInput.targetGroupArn) &&
        Objects.equals(this.healthCheckProtocol, modifyTargetGroupInput.healthCheckProtocol) &&
        Objects.equals(this.healthCheckPort, modifyTargetGroupInput.healthCheckPort) &&
        Objects.equals(this.healthCheckPath, modifyTargetGroupInput.healthCheckPath) &&
        Objects.equals(this.healthCheckEnabled, modifyTargetGroupInput.healthCheckEnabled) &&
        Objects.equals(this.healthCheckIntervalSeconds, modifyTargetGroupInput.healthCheckIntervalSeconds) &&
        Objects.equals(this.healthCheckTimeoutSeconds, modifyTargetGroupInput.healthCheckTimeoutSeconds) &&
        Objects.equals(this.healthyThresholdCount, modifyTargetGroupInput.healthyThresholdCount) &&
        Objects.equals(this.unhealthyThresholdCount, modifyTargetGroupInput.unhealthyThresholdCount) &&
        Objects.equals(this.matcher, modifyTargetGroupInput.matcher);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetGroupArn, healthCheckProtocol, healthCheckPort, healthCheckPath, healthCheckEnabled, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyTargetGroupInput {\n");
    sb.append("    targetGroupArn: ").append(toIndentedString(targetGroupArn)).append("\n");
    sb.append("    healthCheckProtocol: ").append(toIndentedString(healthCheckProtocol)).append("\n");
    sb.append("    healthCheckPort: ").append(toIndentedString(healthCheckPort)).append("\n");
    sb.append("    healthCheckPath: ").append(toIndentedString(healthCheckPath)).append("\n");
    sb.append("    healthCheckEnabled: ").append(toIndentedString(healthCheckEnabled)).append("\n");
    sb.append("    healthCheckIntervalSeconds: ").append(toIndentedString(healthCheckIntervalSeconds)).append("\n");
    sb.append("    healthCheckTimeoutSeconds: ").append(toIndentedString(healthCheckTimeoutSeconds)).append("\n");
    sb.append("    healthyThresholdCount: ").append(toIndentedString(healthyThresholdCount)).append("\n");
    sb.append("    unhealthyThresholdCount: ").append(toIndentedString(unhealthyThresholdCount)).append("\n");
    sb.append("    matcher: ").append(toIndentedString(matcher)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TargetGroupArn");
    openapiFields.add("HealthCheckProtocol");
    openapiFields.add("HealthCheckPort");
    openapiFields.add("HealthCheckPath");
    openapiFields.add("HealthCheckEnabled");
    openapiFields.add("HealthCheckIntervalSeconds");
    openapiFields.add("HealthCheckTimeoutSeconds");
    openapiFields.add("HealthyThresholdCount");
    openapiFields.add("UnhealthyThresholdCount");
    openapiFields.add("Matcher");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TargetGroupArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModifyTargetGroupInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyTargetGroupInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyTargetGroupInput is not found in the empty JSON string", ModifyTargetGroupInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModifyTargetGroupInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModifyTargetGroupInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModifyTargetGroupInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TargetGroupArn`
      String.validateJsonElement(jsonObj.get("TargetGroupArn"));
      // validate the optional field `HealthCheckProtocol`
      if (jsonObj.get("HealthCheckProtocol") != null && !jsonObj.get("HealthCheckProtocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("HealthCheckProtocol"));
      }
      // validate the optional field `HealthCheckPort`
      if (jsonObj.get("HealthCheckPort") != null && !jsonObj.get("HealthCheckPort").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HealthCheckPort"));
      }
      // validate the optional field `HealthCheckPath`
      if (jsonObj.get("HealthCheckPath") != null && !jsonObj.get("HealthCheckPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HealthCheckPath"));
      }
      // validate the optional field `HealthCheckEnabled`
      if (jsonObj.get("HealthCheckEnabled") != null && !jsonObj.get("HealthCheckEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HealthCheckEnabled"));
      }
      // validate the optional field `HealthCheckIntervalSeconds`
      if (jsonObj.get("HealthCheckIntervalSeconds") != null && !jsonObj.get("HealthCheckIntervalSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HealthCheckIntervalSeconds"));
      }
      // validate the optional field `HealthCheckTimeoutSeconds`
      if (jsonObj.get("HealthCheckTimeoutSeconds") != null && !jsonObj.get("HealthCheckTimeoutSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HealthCheckTimeoutSeconds"));
      }
      // validate the optional field `HealthyThresholdCount`
      if (jsonObj.get("HealthyThresholdCount") != null && !jsonObj.get("HealthyThresholdCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HealthyThresholdCount"));
      }
      // validate the optional field `UnhealthyThresholdCount`
      if (jsonObj.get("UnhealthyThresholdCount") != null && !jsonObj.get("UnhealthyThresholdCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UnhealthyThresholdCount"));
      }
      // validate the optional field `Matcher`
      if (jsonObj.get("Matcher") != null && !jsonObj.get("Matcher").isJsonNull()) {
        CreateTargetGroupInputMatcher.validateJsonElement(jsonObj.get("Matcher"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyTargetGroupInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyTargetGroupInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyTargetGroupInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyTargetGroupInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyTargetGroupInput>() {
           @Override
           public void write(JsonWriter out, ModifyTargetGroupInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyTargetGroupInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModifyTargetGroupInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModifyTargetGroupInput
   * @throws IOException if the JSON string is invalid with respect to ModifyTargetGroupInput
   */
  public static ModifyTargetGroupInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyTargetGroupInput.class);
  }

  /**
   * Convert an instance of ModifyTargetGroupInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

