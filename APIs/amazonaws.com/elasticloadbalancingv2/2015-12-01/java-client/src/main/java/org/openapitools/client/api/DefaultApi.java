/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Action;
import org.openapitools.client.model.AddListenerCertificatesInput;
import org.openapitools.client.model.AddListenerCertificatesOutput;
import org.openapitools.client.model.AddTagsInput;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CreateListenerInput;
import org.openapitools.client.model.CreateListenerOutput;
import org.openapitools.client.model.CreateLoadBalancerInput;
import org.openapitools.client.model.CreateLoadBalancerOutput;
import org.openapitools.client.model.CreateRuleInput;
import org.openapitools.client.model.CreateRuleOutput;
import org.openapitools.client.model.CreateTargetGroupInput;
import org.openapitools.client.model.CreateTargetGroupOutput;
import org.openapitools.client.model.DeleteListenerInput;
import org.openapitools.client.model.DeleteLoadBalancerInput;
import org.openapitools.client.model.DeleteRuleInput;
import org.openapitools.client.model.DeleteTargetGroupInput;
import org.openapitools.client.model.DeregisterTargetsInput;
import org.openapitools.client.model.DescribeAccountLimitsInput;
import org.openapitools.client.model.DescribeAccountLimitsOutput;
import org.openapitools.client.model.DescribeListenerCertificatesInput;
import org.openapitools.client.model.DescribeListenerCertificatesOutput;
import org.openapitools.client.model.DescribeListenersInput;
import org.openapitools.client.model.DescribeListenersOutput;
import org.openapitools.client.model.DescribeLoadBalancerAttributesInput;
import org.openapitools.client.model.DescribeLoadBalancerAttributesOutput;
import org.openapitools.client.model.DescribeLoadBalancersInput;
import org.openapitools.client.model.DescribeLoadBalancersOutput;
import org.openapitools.client.model.DescribeRulesInput;
import org.openapitools.client.model.DescribeRulesOutput;
import org.openapitools.client.model.DescribeSSLPoliciesInput;
import org.openapitools.client.model.DescribeSSLPoliciesOutput;
import org.openapitools.client.model.DescribeTagsInput;
import org.openapitools.client.model.DescribeTagsOutput;
import org.openapitools.client.model.DescribeTargetGroupAttributesInput;
import org.openapitools.client.model.DescribeTargetGroupAttributesOutput;
import org.openapitools.client.model.DescribeTargetGroupsInput;
import org.openapitools.client.model.DescribeTargetGroupsOutput;
import org.openapitools.client.model.DescribeTargetHealthInput;
import org.openapitools.client.model.DescribeTargetHealthOutput;
import org.openapitools.client.model.GETCreateTargetGroupMatcherParameter;
import org.openapitools.client.model.LoadBalancerAttribute;
import org.openapitools.client.model.ModifyListenerInput;
import org.openapitools.client.model.ModifyListenerOutput;
import org.openapitools.client.model.ModifyLoadBalancerAttributesInput;
import org.openapitools.client.model.ModifyLoadBalancerAttributesOutput;
import org.openapitools.client.model.ModifyRuleInput;
import org.openapitools.client.model.ModifyRuleOutput;
import org.openapitools.client.model.ModifyTargetGroupAttributesInput;
import org.openapitools.client.model.ModifyTargetGroupAttributesOutput;
import org.openapitools.client.model.ModifyTargetGroupInput;
import org.openapitools.client.model.ModifyTargetGroupOutput;
import org.openapitools.client.model.RegisterTargetsInput;
import org.openapitools.client.model.RemoveListenerCertificatesInput;
import org.openapitools.client.model.RemoveTagsInput;
import org.openapitools.client.model.RuleCondition;
import org.openapitools.client.model.RulePriorityPair;
import org.openapitools.client.model.SetIpAddressTypeInput;
import org.openapitools.client.model.SetIpAddressTypeOutput;
import org.openapitools.client.model.SetRulePrioritiesInput;
import org.openapitools.client.model.SetRulePrioritiesOutput;
import org.openapitools.client.model.SetSecurityGroupsInput;
import org.openapitools.client.model.SetSecurityGroupsOutput;
import org.openapitools.client.model.SetSubnetsInput;
import org.openapitools.client.model.SetSubnetsOutput;
import org.openapitools.client.model.SubnetMapping;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TargetDescription;
import org.openapitools.client.model.TargetGroupAttribute;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETAddListenerCertificates
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param certificates The certificate to add. You can specify one certificate per call. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddListenerCertificatesCall(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddListenerCertificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listenerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListenerArn", listenerArn));
        }

        if (certificates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Certificates", certificates));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddListenerCertificatesValidateBeforeCall(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listenerArn' is set
        if (listenerArn == null) {
            throw new ApiException("Missing the required parameter 'listenerArn' when calling gETAddListenerCertificates(Async)");
        }

        // verify the required parameter 'certificates' is set
        if (certificates == null) {
            throw new ApiException("Missing the required parameter 'certificates' when calling gETAddListenerCertificates(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddListenerCertificates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddListenerCertificates(Async)");
        }

        return gETAddListenerCertificatesCall(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the certificate in already in the certificate list, the call is successful but the certificate is not added again.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\&quot;&gt;HTTPS listeners&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\&quot;&gt;TLS listeners&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param certificates The certificate to add. You can specify one certificate per call. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AddListenerCertificatesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public AddListenerCertificatesOutput gETAddListenerCertificates(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AddListenerCertificatesOutput> localVarResp = gETAddListenerCertificatesWithHttpInfo(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the certificate in already in the certificate list, the call is successful but the certificate is not added again.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\&quot;&gt;HTTPS listeners&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\&quot;&gt;TLS listeners&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param certificates The certificate to add. You can specify one certificate per call. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AddListenerCertificatesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddListenerCertificatesOutput> gETAddListenerCertificatesWithHttpInfo(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddListenerCertificatesValidateBeforeCall(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AddListenerCertificatesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the certificate in already in the certificate list, the call is successful but the certificate is not added again.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\&quot;&gt;HTTPS listeners&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\&quot;&gt;TLS listeners&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param certificates The certificate to add. You can specify one certificate per call. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddListenerCertificatesAsync(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AddListenerCertificatesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddListenerCertificatesValidateBeforeCall(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AddListenerCertificatesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAddTags
     * @param resourceArns The Amazon Resource Name (ARN) of the resource. (required)
     * @param tags The tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsCall(List<String> resourceArns, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ResourceArns", resourceArns));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddTagsValidateBeforeCall(List<String> resourceArns, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArns' is set
        if (resourceArns == null) {
            throw new ApiException("Missing the required parameter 'resourceArns' when calling gETAddTags(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETAddTags(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddTags(Async)");
        }

        return gETAddTagsCall(resourceArns, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, and rules.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a resource already has a tag with the same key, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;
     * @param resourceArns The Amazon Resource Name (ARN) of the resource. (required)
     * @param tags The tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETAddTags(List<String> resourceArns, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETAddTagsWithHttpInfo(resourceArns, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, and rules.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a resource already has a tag with the same key, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;
     * @param resourceArns The Amazon Resource Name (ARN) of the resource. (required)
     * @param tags The tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETAddTagsWithHttpInfo(List<String> resourceArns, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddTagsValidateBeforeCall(resourceArns, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, and rules.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a resource already has a tag with the same key, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;
     * @param resourceArns The Amazon Resource Name (ARN) of the resource. (required)
     * @param tags The tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsAsync(List<String> resourceArns, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddTagsValidateBeforeCall(resourceArns, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateListener
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param defaultActions The actions for the default rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param protocol The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer. (optional)
     * @param port The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer. (optional)
     * @param sslPolicy &lt;p&gt;[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param certificates [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (optional)
     * @param alpnPolicy &lt;p&gt;[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP1Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Optional&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Preferred&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;None&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies\&quot;&gt;ALPN policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param tags The tags to assign to the listener. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateListenerCall(String loadBalancerArn, List<Action> defaultActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, Integer port, String sslPolicy, List<Certificate> certificates, List<String> alpnPolicy, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateListener";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerArn", loadBalancerArn));
        }

        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Protocol", protocol));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (sslPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SslPolicy", sslPolicy));
        }

        if (certificates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Certificates", certificates));
        }

        if (defaultActions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "DefaultActions", defaultActions));
        }

        if (alpnPolicy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlpnPolicy", alpnPolicy));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateListenerValidateBeforeCall(String loadBalancerArn, List<Action> defaultActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, Integer port, String sslPolicy, List<Certificate> certificates, List<String> alpnPolicy, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerArn' is set
        if (loadBalancerArn == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerArn' when calling gETCreateListener(Async)");
        }

        // verify the required parameter 'defaultActions' is set
        if (defaultActions == null) {
            throw new ApiException("Missing the required parameter 'defaultActions' when calling gETCreateListener(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateListener(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateListener(Async)");
        }

        return gETCreateListenerCall(loadBalancerArn, defaultActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, port, sslPolicy, certificates, alpnPolicy, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\&quot;&gt;Listeners for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\&quot;&gt;Listeners for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html\&quot;&gt;Listeners for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param defaultActions The actions for the default rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param protocol The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer. (optional)
     * @param port The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer. (optional)
     * @param sslPolicy &lt;p&gt;[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param certificates [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (optional)
     * @param alpnPolicy &lt;p&gt;[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP1Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Optional&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Preferred&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;None&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies\&quot;&gt;ALPN policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param tags The tags to assign to the listener. (optional)
     * @return CreateListenerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public CreateListenerOutput gETCreateListener(String loadBalancerArn, List<Action> defaultActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, Integer port, String sslPolicy, List<Certificate> certificates, List<String> alpnPolicy, List<Tag> tags) throws ApiException {
        ApiResponse<CreateListenerOutput> localVarResp = gETCreateListenerWithHttpInfo(loadBalancerArn, defaultActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, port, sslPolicy, certificates, alpnPolicy, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\&quot;&gt;Listeners for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\&quot;&gt;Listeners for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html\&quot;&gt;Listeners for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param defaultActions The actions for the default rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param protocol The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer. (optional)
     * @param port The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer. (optional)
     * @param sslPolicy &lt;p&gt;[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param certificates [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (optional)
     * @param alpnPolicy &lt;p&gt;[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP1Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Optional&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Preferred&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;None&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies\&quot;&gt;ALPN policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param tags The tags to assign to the listener. (optional)
     * @return ApiResponse&lt;CreateListenerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateListenerOutput> gETCreateListenerWithHttpInfo(String loadBalancerArn, List<Action> defaultActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, Integer port, String sslPolicy, List<Certificate> certificates, List<String> alpnPolicy, List<Tag> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateListenerValidateBeforeCall(loadBalancerArn, defaultActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, port, sslPolicy, certificates, alpnPolicy, tags, null);
        Type localVarReturnType = new TypeToken<CreateListenerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\&quot;&gt;Listeners for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\&quot;&gt;Listeners for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html\&quot;&gt;Listeners for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param defaultActions The actions for the default rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param protocol The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer. (optional)
     * @param port The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer. (optional)
     * @param sslPolicy &lt;p&gt;[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param certificates [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (optional)
     * @param alpnPolicy &lt;p&gt;[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP1Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Optional&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Preferred&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;None&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies\&quot;&gt;ALPN policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param tags The tags to assign to the listener. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateListenerAsync(String loadBalancerArn, List<Action> defaultActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, Integer port, String sslPolicy, List<Certificate> certificates, List<String> alpnPolicy, List<Tag> tags, final ApiCallback<CreateListenerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateListenerValidateBeforeCall(loadBalancerArn, defaultActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, port, sslPolicy, certificates, alpnPolicy, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateListenerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateLoadBalancer
     * @param name &lt;p&gt;The name of the load balancer.&lt;/p&gt; &lt;p&gt;This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with \&quot;internal-\&quot;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subnets &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; &lt;p&gt;[Gateway Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; (optional)
     * @param subnetMappings &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.&lt;/p&gt; &lt;p&gt;[Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; (optional)
     * @param securityGroups [Application Load Balancers] The IDs of the security groups for the load balancer. (optional)
     * @param scheme &lt;p&gt;The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.&lt;/p&gt; &lt;p&gt;The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.&lt;/p&gt; &lt;p&gt;The default is an Internet-facing load balancer.&lt;/p&gt; &lt;p&gt;You cannot specify a scheme for a Gateway Load Balancer.&lt;/p&gt; (optional)
     * @param tags The tags to assign to the load balancer. (optional)
     * @param type The type of load balancer. The default is &lt;code&gt;application&lt;/code&gt;. (optional)
     * @param ipAddressType The type of IP addresses used by the subnets for your load balancer. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses).  (optional)
     * @param customerOwnedIpv4Pool [Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP pool). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateLoadBalancerNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyLoadBalancersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLoadBalancerCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, List<String> securityGroups, String scheme, List<Tag> tags, String type, String ipAddressType, String customerOwnedIpv4Pool, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (subnets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Subnets", subnets));
        }

        if (subnetMappings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SubnetMappings", subnetMappings));
        }

        if (securityGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SecurityGroups", securityGroups));
        }

        if (scheme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Scheme", scheme));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (ipAddressType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IpAddressType", ipAddressType));
        }

        if (customerOwnedIpv4Pool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CustomerOwnedIpv4Pool", customerOwnedIpv4Pool));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateLoadBalancerValidateBeforeCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, List<String> securityGroups, String scheme, List<Tag> tags, String type, String ipAddressType, String customerOwnedIpv4Pool, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling gETCreateLoadBalancer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateLoadBalancer(Async)");
        }

        return gETCreateLoadBalancerCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, securityGroups, scheme, tags, type, ipAddressType, customerOwnedIpv4Pool, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html\&quot;&gt;Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html\&quot;&gt;Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html\&quot;&gt;Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.&lt;/p&gt;
     * @param name &lt;p&gt;The name of the load balancer.&lt;/p&gt; &lt;p&gt;This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with \&quot;internal-\&quot;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subnets &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; &lt;p&gt;[Gateway Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; (optional)
     * @param subnetMappings &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.&lt;/p&gt; &lt;p&gt;[Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; (optional)
     * @param securityGroups [Application Load Balancers] The IDs of the security groups for the load balancer. (optional)
     * @param scheme &lt;p&gt;The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.&lt;/p&gt; &lt;p&gt;The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.&lt;/p&gt; &lt;p&gt;The default is an Internet-facing load balancer.&lt;/p&gt; &lt;p&gt;You cannot specify a scheme for a Gateway Load Balancer.&lt;/p&gt; (optional)
     * @param tags The tags to assign to the load balancer. (optional)
     * @param type The type of load balancer. The default is &lt;code&gt;application&lt;/code&gt;. (optional)
     * @param ipAddressType The type of IP addresses used by the subnets for your load balancer. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses).  (optional)
     * @param customerOwnedIpv4Pool [Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP pool). (optional)
     * @return CreateLoadBalancerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateLoadBalancerNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyLoadBalancersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public CreateLoadBalancerOutput gETCreateLoadBalancer(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, List<String> securityGroups, String scheme, List<Tag> tags, String type, String ipAddressType, String customerOwnedIpv4Pool) throws ApiException {
        ApiResponse<CreateLoadBalancerOutput> localVarResp = gETCreateLoadBalancerWithHttpInfo(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, securityGroups, scheme, tags, type, ipAddressType, customerOwnedIpv4Pool);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html\&quot;&gt;Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html\&quot;&gt;Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html\&quot;&gt;Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.&lt;/p&gt;
     * @param name &lt;p&gt;The name of the load balancer.&lt;/p&gt; &lt;p&gt;This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with \&quot;internal-\&quot;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subnets &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; &lt;p&gt;[Gateway Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; (optional)
     * @param subnetMappings &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.&lt;/p&gt; &lt;p&gt;[Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; (optional)
     * @param securityGroups [Application Load Balancers] The IDs of the security groups for the load balancer. (optional)
     * @param scheme &lt;p&gt;The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.&lt;/p&gt; &lt;p&gt;The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.&lt;/p&gt; &lt;p&gt;The default is an Internet-facing load balancer.&lt;/p&gt; &lt;p&gt;You cannot specify a scheme for a Gateway Load Balancer.&lt;/p&gt; (optional)
     * @param tags The tags to assign to the load balancer. (optional)
     * @param type The type of load balancer. The default is &lt;code&gt;application&lt;/code&gt;. (optional)
     * @param ipAddressType The type of IP addresses used by the subnets for your load balancer. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses).  (optional)
     * @param customerOwnedIpv4Pool [Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP pool). (optional)
     * @return ApiResponse&lt;CreateLoadBalancerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateLoadBalancerNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyLoadBalancersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLoadBalancerOutput> gETCreateLoadBalancerWithHttpInfo(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, List<String> securityGroups, String scheme, List<Tag> tags, String type, String ipAddressType, String customerOwnedIpv4Pool) throws ApiException {
        okhttp3.Call localVarCall = gETCreateLoadBalancerValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, securityGroups, scheme, tags, type, ipAddressType, customerOwnedIpv4Pool, null);
        Type localVarReturnType = new TypeToken<CreateLoadBalancerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html\&quot;&gt;Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html\&quot;&gt;Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html\&quot;&gt;Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.&lt;/p&gt;
     * @param name &lt;p&gt;The name of the load balancer.&lt;/p&gt; &lt;p&gt;This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with \&quot;internal-\&quot;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subnets &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; &lt;p&gt;[Gateway Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; (optional)
     * @param subnetMappings &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.&lt;/p&gt; &lt;p&gt;[Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; (optional)
     * @param securityGroups [Application Load Balancers] The IDs of the security groups for the load balancer. (optional)
     * @param scheme &lt;p&gt;The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.&lt;/p&gt; &lt;p&gt;The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.&lt;/p&gt; &lt;p&gt;The default is an Internet-facing load balancer.&lt;/p&gt; &lt;p&gt;You cannot specify a scheme for a Gateway Load Balancer.&lt;/p&gt; (optional)
     * @param tags The tags to assign to the load balancer. (optional)
     * @param type The type of load balancer. The default is &lt;code&gt;application&lt;/code&gt;. (optional)
     * @param ipAddressType The type of IP addresses used by the subnets for your load balancer. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses).  (optional)
     * @param customerOwnedIpv4Pool [Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP pool). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateLoadBalancerNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyLoadBalancersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLoadBalancerAsync(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, List<String> securityGroups, String scheme, List<Tag> tags, String type, String ipAddressType, String customerOwnedIpv4Pool, final ApiCallback<CreateLoadBalancerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateLoadBalancerValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, securityGroups, scheme, tags, type, ipAddressType, customerOwnedIpv4Pool, _callback);
        Type localVarReturnType = new TypeToken<CreateLoadBalancerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateRule
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param conditions The conditions. (required)
     * @param priority The rule priority. A listener can&#39;t have multiple rules with the same priority. (required)
     * @param actions The actions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to assign to the rule. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRulesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateRuleCall(String listenerArn, List<RuleCondition> conditions, Integer priority, List<Action> actions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listenerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListenerArn", listenerArn));
        }

        if (conditions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Conditions", conditions));
        }

        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Priority", priority));
        }

        if (actions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Actions", actions));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateRuleValidateBeforeCall(String listenerArn, List<RuleCondition> conditions, Integer priority, List<Action> actions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listenerArn' is set
        if (listenerArn == null) {
            throw new ApiException("Missing the required parameter 'listenerArn' when calling gETCreateRule(Async)");
        }

        // verify the required parameter 'conditions' is set
        if (conditions == null) {
            throw new ApiException("Missing the required parameter 'conditions' when calling gETCreateRule(Async)");
        }

        // verify the required parameter 'priority' is set
        if (priority == null) {
            throw new ApiException("Missing the required parameter 'priority' when calling gETCreateRule(Async)");
        }

        // verify the required parameter 'actions' is set
        if (actions == null) {
            throw new ApiException("Missing the required parameter 'actions' when calling gETCreateRule(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateRule(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateRule(Async)");
        }

        return gETCreateRuleCall(listenerArn, conditions, priority, actions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.&lt;/p&gt; &lt;p&gt;Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param conditions The conditions. (required)
     * @param priority The rule priority. A listener can&#39;t have multiple rules with the same priority. (required)
     * @param actions The actions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to assign to the rule. (optional)
     * @return CreateRuleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRulesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRuleOutput gETCreateRule(String listenerArn, List<RuleCondition> conditions, Integer priority, List<Action> actions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tags) throws ApiException {
        ApiResponse<CreateRuleOutput> localVarResp = gETCreateRuleWithHttpInfo(listenerArn, conditions, priority, actions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.&lt;/p&gt; &lt;p&gt;Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param conditions The conditions. (required)
     * @param priority The rule priority. A listener can&#39;t have multiple rules with the same priority. (required)
     * @param actions The actions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to assign to the rule. (optional)
     * @return ApiResponse&lt;CreateRuleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRulesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRuleOutput> gETCreateRuleWithHttpInfo(String listenerArn, List<RuleCondition> conditions, Integer priority, List<Action> actions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateRuleValidateBeforeCall(listenerArn, conditions, priority, actions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateRuleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.&lt;/p&gt; &lt;p&gt;Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param conditions The conditions. (required)
     * @param priority The rule priority. A listener can&#39;t have multiple rules with the same priority. (required)
     * @param actions The actions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to assign to the rule. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRulesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateRuleAsync(String listenerArn, List<RuleCondition> conditions, Integer priority, List<Action> actions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tags, final ApiCallback<CreateRuleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateRuleValidateBeforeCall(listenerArn, conditions, priority, actions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateRuleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateTargetGroup
     * @param name &lt;p&gt;The name of the target group.&lt;/p&gt; &lt;p&gt;This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param protocol The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply. (optional)
     * @param protocolVersion [HTTP/HTTPS protocol] The protocol version. Specify &lt;code&gt;GRPC&lt;/code&gt; to send requests to targets using gRPC. Specify &lt;code&gt;HTTP2&lt;/code&gt; to send requests to targets using HTTP/2. The default is &lt;code&gt;HTTP1&lt;/code&gt;, which sends requests to targets using HTTP/1.1. (optional)
     * @param port The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081. (optional)
     * @param vpcId The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required. (optional)
     * @param healthCheckProtocol The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks. (optional)
     * @param healthCheckPort The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is &lt;code&gt;traffic-port&lt;/code&gt;, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80. (optional)
     * @param healthCheckEnabled Indicates whether health checks are enabled. If the target type is &lt;code&gt;lambda&lt;/code&gt;, health checks are disabled by default but can be enabled. If the target type is &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;ip&lt;/code&gt;, or &lt;code&gt;alb&lt;/code&gt;, health checks are always enabled and cannot be disabled. (optional)
     * @param healthCheckPath &lt;p&gt;[HTTP/HTTPS health checks] The destination for health checks on the targets.&lt;/p&gt; &lt;p&gt;[HTTP1 or HTTP2 protocol version] The ping path. The default is /.&lt;/p&gt; &lt;p&gt;[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.&lt;/p&gt; (optional)
     * @param healthCheckIntervalSeconds The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 35 seconds. (optional)
     * @param healthCheckTimeoutSeconds The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 30 seconds. (optional)
     * @param healthyThresholdCount The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 5. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 5. (optional)
     * @param unhealthyThresholdCount The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 2. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 5. (optional)
     * @param matcher [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399. (optional)
     * @param targetType &lt;p&gt;The type of target that you must specify when registering targets with this target group. You can&#39;t specify targets for a target group using more than one target type.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;instance&lt;/code&gt; - Register targets by instance ID. This is the default value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ip&lt;/code&gt; - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can&#39;t specify publicly routable IP addresses.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lambda&lt;/code&gt; - Register a single Lambda function as a target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;alb&lt;/code&gt; - Register a single Application Load Balancer as a target.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags The tags to assign to the target group. (optional)
     * @param ipAddressType The type of IP address used for this target group. The possible values are &lt;code&gt;ipv4&lt;/code&gt; and &lt;code&gt;ipv6&lt;/code&gt;. This is an optional parameter. If not specified, the IP address type defaults to &lt;code&gt;ipv4&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTargetGroupNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateTargetGroupCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, String protocolVersion, Integer port, String vpcId, String healthCheckProtocol, String healthCheckPort, Boolean healthCheckEnabled, String healthCheckPath, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher, String targetType, List<Tag> tags, String ipAddressType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateTargetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Protocol", protocol));
        }

        if (protocolVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProtocolVersion", protocolVersion));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (vpcId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VpcId", vpcId));
        }

        if (healthCheckProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckProtocol", healthCheckProtocol));
        }

        if (healthCheckPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckPort", healthCheckPort));
        }

        if (healthCheckEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckEnabled", healthCheckEnabled));
        }

        if (healthCheckPath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckPath", healthCheckPath));
        }

        if (healthCheckIntervalSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckIntervalSeconds", healthCheckIntervalSeconds));
        }

        if (healthCheckTimeoutSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckTimeoutSeconds", healthCheckTimeoutSeconds));
        }

        if (healthyThresholdCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthyThresholdCount", healthyThresholdCount));
        }

        if (unhealthyThresholdCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UnhealthyThresholdCount", unhealthyThresholdCount));
        }

        if (matcher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Matcher", matcher));
        }

        if (targetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetType", targetType));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (ipAddressType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IpAddressType", ipAddressType));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateTargetGroupValidateBeforeCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, String protocolVersion, Integer port, String vpcId, String healthCheckProtocol, String healthCheckPort, Boolean healthCheckEnabled, String healthCheckPath, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher, String targetType, List<Tag> tags, String ipAddressType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling gETCreateTargetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateTargetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateTargetGroup(Async)");
        }

        return gETCreateTargetGroupCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, protocolVersion, port, vpcId, healthCheckProtocol, healthCheckPort, healthCheckEnabled, healthCheckPath, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher, targetType, tags, ipAddressType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html\&quot;&gt;Target groups for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html\&quot;&gt;Target groups for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html\&quot;&gt;Target groups for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.&lt;/p&gt;
     * @param name &lt;p&gt;The name of the target group.&lt;/p&gt; &lt;p&gt;This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param protocol The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply. (optional)
     * @param protocolVersion [HTTP/HTTPS protocol] The protocol version. Specify &lt;code&gt;GRPC&lt;/code&gt; to send requests to targets using gRPC. Specify &lt;code&gt;HTTP2&lt;/code&gt; to send requests to targets using HTTP/2. The default is &lt;code&gt;HTTP1&lt;/code&gt;, which sends requests to targets using HTTP/1.1. (optional)
     * @param port The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081. (optional)
     * @param vpcId The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required. (optional)
     * @param healthCheckProtocol The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks. (optional)
     * @param healthCheckPort The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is &lt;code&gt;traffic-port&lt;/code&gt;, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80. (optional)
     * @param healthCheckEnabled Indicates whether health checks are enabled. If the target type is &lt;code&gt;lambda&lt;/code&gt;, health checks are disabled by default but can be enabled. If the target type is &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;ip&lt;/code&gt;, or &lt;code&gt;alb&lt;/code&gt;, health checks are always enabled and cannot be disabled. (optional)
     * @param healthCheckPath &lt;p&gt;[HTTP/HTTPS health checks] The destination for health checks on the targets.&lt;/p&gt; &lt;p&gt;[HTTP1 or HTTP2 protocol version] The ping path. The default is /.&lt;/p&gt; &lt;p&gt;[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.&lt;/p&gt; (optional)
     * @param healthCheckIntervalSeconds The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 35 seconds. (optional)
     * @param healthCheckTimeoutSeconds The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 30 seconds. (optional)
     * @param healthyThresholdCount The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 5. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 5. (optional)
     * @param unhealthyThresholdCount The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 2. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 5. (optional)
     * @param matcher [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399. (optional)
     * @param targetType &lt;p&gt;The type of target that you must specify when registering targets with this target group. You can&#39;t specify targets for a target group using more than one target type.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;instance&lt;/code&gt; - Register targets by instance ID. This is the default value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ip&lt;/code&gt; - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can&#39;t specify publicly routable IP addresses.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lambda&lt;/code&gt; - Register a single Lambda function as a target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;alb&lt;/code&gt; - Register a single Application Load Balancer as a target.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags The tags to assign to the target group. (optional)
     * @param ipAddressType The type of IP address used for this target group. The possible values are &lt;code&gt;ipv4&lt;/code&gt; and &lt;code&gt;ipv6&lt;/code&gt;. This is an optional parameter. If not specified, the IP address type defaults to &lt;code&gt;ipv4&lt;/code&gt;. (optional)
     * @return CreateTargetGroupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTargetGroupNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public CreateTargetGroupOutput gETCreateTargetGroup(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, String protocolVersion, Integer port, String vpcId, String healthCheckProtocol, String healthCheckPort, Boolean healthCheckEnabled, String healthCheckPath, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher, String targetType, List<Tag> tags, String ipAddressType) throws ApiException {
        ApiResponse<CreateTargetGroupOutput> localVarResp = gETCreateTargetGroupWithHttpInfo(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, protocolVersion, port, vpcId, healthCheckProtocol, healthCheckPort, healthCheckEnabled, healthCheckPath, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher, targetType, tags, ipAddressType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html\&quot;&gt;Target groups for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html\&quot;&gt;Target groups for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html\&quot;&gt;Target groups for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.&lt;/p&gt;
     * @param name &lt;p&gt;The name of the target group.&lt;/p&gt; &lt;p&gt;This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param protocol The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply. (optional)
     * @param protocolVersion [HTTP/HTTPS protocol] The protocol version. Specify &lt;code&gt;GRPC&lt;/code&gt; to send requests to targets using gRPC. Specify &lt;code&gt;HTTP2&lt;/code&gt; to send requests to targets using HTTP/2. The default is &lt;code&gt;HTTP1&lt;/code&gt;, which sends requests to targets using HTTP/1.1. (optional)
     * @param port The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081. (optional)
     * @param vpcId The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required. (optional)
     * @param healthCheckProtocol The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks. (optional)
     * @param healthCheckPort The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is &lt;code&gt;traffic-port&lt;/code&gt;, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80. (optional)
     * @param healthCheckEnabled Indicates whether health checks are enabled. If the target type is &lt;code&gt;lambda&lt;/code&gt;, health checks are disabled by default but can be enabled. If the target type is &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;ip&lt;/code&gt;, or &lt;code&gt;alb&lt;/code&gt;, health checks are always enabled and cannot be disabled. (optional)
     * @param healthCheckPath &lt;p&gt;[HTTP/HTTPS health checks] The destination for health checks on the targets.&lt;/p&gt; &lt;p&gt;[HTTP1 or HTTP2 protocol version] The ping path. The default is /.&lt;/p&gt; &lt;p&gt;[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.&lt;/p&gt; (optional)
     * @param healthCheckIntervalSeconds The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 35 seconds. (optional)
     * @param healthCheckTimeoutSeconds The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 30 seconds. (optional)
     * @param healthyThresholdCount The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 5. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 5. (optional)
     * @param unhealthyThresholdCount The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 2. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 5. (optional)
     * @param matcher [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399. (optional)
     * @param targetType &lt;p&gt;The type of target that you must specify when registering targets with this target group. You can&#39;t specify targets for a target group using more than one target type.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;instance&lt;/code&gt; - Register targets by instance ID. This is the default value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ip&lt;/code&gt; - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can&#39;t specify publicly routable IP addresses.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lambda&lt;/code&gt; - Register a single Lambda function as a target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;alb&lt;/code&gt; - Register a single Application Load Balancer as a target.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags The tags to assign to the target group. (optional)
     * @param ipAddressType The type of IP address used for this target group. The possible values are &lt;code&gt;ipv4&lt;/code&gt; and &lt;code&gt;ipv6&lt;/code&gt;. This is an optional parameter. If not specified, the IP address type defaults to &lt;code&gt;ipv4&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;CreateTargetGroupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTargetGroupNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTargetGroupOutput> gETCreateTargetGroupWithHttpInfo(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, String protocolVersion, Integer port, String vpcId, String healthCheckProtocol, String healthCheckPort, Boolean healthCheckEnabled, String healthCheckPath, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher, String targetType, List<Tag> tags, String ipAddressType) throws ApiException {
        okhttp3.Call localVarCall = gETCreateTargetGroupValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, protocolVersion, port, vpcId, healthCheckProtocol, healthCheckPort, healthCheckEnabled, healthCheckPath, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher, targetType, tags, ipAddressType, null);
        Type localVarReturnType = new TypeToken<CreateTargetGroupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html\&quot;&gt;Target groups for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html\&quot;&gt;Target groups for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html\&quot;&gt;Target groups for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.&lt;/p&gt;
     * @param name &lt;p&gt;The name of the target group.&lt;/p&gt; &lt;p&gt;This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param protocol The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply. (optional)
     * @param protocolVersion [HTTP/HTTPS protocol] The protocol version. Specify &lt;code&gt;GRPC&lt;/code&gt; to send requests to targets using gRPC. Specify &lt;code&gt;HTTP2&lt;/code&gt; to send requests to targets using HTTP/2. The default is &lt;code&gt;HTTP1&lt;/code&gt;, which sends requests to targets using HTTP/1.1. (optional)
     * @param port The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081. (optional)
     * @param vpcId The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required. (optional)
     * @param healthCheckProtocol The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks. (optional)
     * @param healthCheckPort The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is &lt;code&gt;traffic-port&lt;/code&gt;, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80. (optional)
     * @param healthCheckEnabled Indicates whether health checks are enabled. If the target type is &lt;code&gt;lambda&lt;/code&gt;, health checks are disabled by default but can be enabled. If the target type is &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;ip&lt;/code&gt;, or &lt;code&gt;alb&lt;/code&gt;, health checks are always enabled and cannot be disabled. (optional)
     * @param healthCheckPath &lt;p&gt;[HTTP/HTTPS health checks] The destination for health checks on the targets.&lt;/p&gt; &lt;p&gt;[HTTP1 or HTTP2 protocol version] The ping path. The default is /.&lt;/p&gt; &lt;p&gt;[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.&lt;/p&gt; (optional)
     * @param healthCheckIntervalSeconds The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 35 seconds. (optional)
     * @param healthCheckTimeoutSeconds The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 30 seconds. (optional)
     * @param healthyThresholdCount The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 5. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 5. (optional)
     * @param unhealthyThresholdCount The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 2. If the target type is &lt;code&gt;lambda&lt;/code&gt;, the default is 5. (optional)
     * @param matcher [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399. (optional)
     * @param targetType &lt;p&gt;The type of target that you must specify when registering targets with this target group. You can&#39;t specify targets for a target group using more than one target type.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;instance&lt;/code&gt; - Register targets by instance ID. This is the default value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ip&lt;/code&gt; - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can&#39;t specify publicly routable IP addresses.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lambda&lt;/code&gt; - Register a single Lambda function as a target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;alb&lt;/code&gt; - Register a single Application Load Balancer as a target.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags The tags to assign to the target group. (optional)
     * @param ipAddressType The type of IP address used for this target group. The possible values are &lt;code&gt;ipv4&lt;/code&gt; and &lt;code&gt;ipv6&lt;/code&gt;. This is an optional parameter. If not specified, the IP address type defaults to &lt;code&gt;ipv4&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTargetGroupNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateTargetGroupAsync(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String protocol, String protocolVersion, Integer port, String vpcId, String healthCheckProtocol, String healthCheckPort, Boolean healthCheckEnabled, String healthCheckPath, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher, String targetType, List<Tag> tags, String ipAddressType, final ApiCallback<CreateTargetGroupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateTargetGroupValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, protocol, protocolVersion, port, vpcId, healthCheckProtocol, healthCheckPort, healthCheckEnabled, healthCheckPath, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher, targetType, tags, ipAddressType, _callback);
        Type localVarReturnType = new TypeToken<CreateTargetGroupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteListener
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteListenerCall(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteListener";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listenerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListenerArn", listenerArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteListenerValidateBeforeCall(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listenerArn' is set
        if (listenerArn == null) {
            throw new ApiException("Missing the required parameter 'listenerArn' when calling gETDeleteListener(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteListener(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteListener(Async)");
        }

        return gETDeleteListenerCall(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified listener.&lt;/p&gt; &lt;p&gt;Alternatively, your listener is deleted when you delete the load balancer to which it is attached.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteListener(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteListenerWithHttpInfo(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified listener.&lt;/p&gt; &lt;p&gt;Alternatively, your listener is deleted when you delete the load balancer to which it is attached.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteListenerWithHttpInfo(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteListenerValidateBeforeCall(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified listener.&lt;/p&gt; &lt;p&gt;Alternatively, your listener is deleted when you delete the load balancer to which it is attached.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteListenerAsync(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteListenerValidateBeforeCall(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteLoadBalancer
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLoadBalancerCall(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerArn", loadBalancerArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteLoadBalancerValidateBeforeCall(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerArn' is set
        if (loadBalancerArn == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerArn' when calling gETDeleteLoadBalancer(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteLoadBalancer(Async)");
        }

        return gETDeleteLoadBalancerCall(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.&lt;/p&gt; &lt;p&gt;Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteLoadBalancer(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteLoadBalancerWithHttpInfo(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.&lt;/p&gt; &lt;p&gt;Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteLoadBalancerWithHttpInfo(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteLoadBalancerValidateBeforeCall(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.&lt;/p&gt; &lt;p&gt;Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLoadBalancerAsync(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteLoadBalancerValidateBeforeCall(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteRule
     * @param ruleArn The Amazon Resource Name (ARN) of the rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteRuleCall(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ruleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RuleArn", ruleArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteRuleValidateBeforeCall(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleArn' is set
        if (ruleArn == null) {
            throw new ApiException("Missing the required parameter 'ruleArn' when calling gETDeleteRule(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteRule(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteRule(Async)");
        }

        return gETDeleteRuleCall(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified rule.&lt;/p&gt; &lt;p&gt;You can&#39;t delete the default rule.&lt;/p&gt;
     * @param ruleArn The Amazon Resource Name (ARN) of the rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteRule(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteRuleWithHttpInfo(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified rule.&lt;/p&gt; &lt;p&gt;You can&#39;t delete the default rule.&lt;/p&gt;
     * @param ruleArn The Amazon Resource Name (ARN) of the rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteRuleWithHttpInfo(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteRuleValidateBeforeCall(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified rule.&lt;/p&gt; &lt;p&gt;You can&#39;t delete the default rule.&lt;/p&gt;
     * @param ruleArn The Amazon Resource Name (ARN) of the rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteRuleAsync(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteRuleValidateBeforeCall(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteTargetGroup
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteTargetGroupCall(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteTargetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetGroupArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetGroupArn", targetGroupArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteTargetGroupValidateBeforeCall(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetGroupArn' is set
        if (targetGroupArn == null) {
            throw new ApiException("Missing the required parameter 'targetGroupArn' when calling gETDeleteTargetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteTargetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteTargetGroup(Async)");
        }

        return gETDeleteTargetGroupCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified target group.&lt;/p&gt; &lt;p&gt;You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.&lt;/p&gt;
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteTargetGroup(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteTargetGroupWithHttpInfo(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified target group.&lt;/p&gt; &lt;p&gt;You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.&lt;/p&gt;
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteTargetGroupWithHttpInfo(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteTargetGroupValidateBeforeCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified target group.&lt;/p&gt; &lt;p&gt;You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.&lt;/p&gt;
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteTargetGroupAsync(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteTargetGroupValidateBeforeCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeregisterTargets
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param targets The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTargetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeregisterTargetsCall(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeregisterTargets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetGroupArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetGroupArn", targetGroupArn));
        }

        if (targets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Targets", targets));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeregisterTargetsValidateBeforeCall(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetGroupArn' is set
        if (targetGroupArn == null) {
            throw new ApiException("Missing the required parameter 'targetGroupArn' when calling gETDeregisterTargets(Async)");
        }

        // verify the required parameter 'targets' is set
        if (targets == null) {
            throw new ApiException("Missing the required parameter 'targets' when calling gETDeregisterTargets(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeregisterTargets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeregisterTargets(Async)");
        }

        return gETDeregisterTargetsCall(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param targets The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTargetException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeregisterTargets(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeregisterTargetsWithHttpInfo(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param targets The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTargetException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeregisterTargetsWithHttpInfo(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeregisterTargetsValidateBeforeCall(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param targets The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTargetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeregisterTargetsAsync(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeregisterTargetsValidateBeforeCall(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAccountLimits
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountLimitsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAccountLimitsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAccountLimits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAccountLimits(Async)");
        }

        return gETDescribeAccountLimitsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html\&quot;&gt;Quotas for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html\&quot;&gt;Quotas for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html\&quot;&gt;Quotas for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return DescribeAccountLimitsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountLimitsOutput gETDescribeAccountLimits(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize) throws ApiException {
        ApiResponse<DescribeAccountLimitsOutput> localVarResp = gETDescribeAccountLimitsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html\&quot;&gt;Quotas for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html\&quot;&gt;Quotas for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html\&quot;&gt;Quotas for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return ApiResponse&lt;DescribeAccountLimitsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountLimitsOutput> gETDescribeAccountLimitsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize, null);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html\&quot;&gt;Quotas for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html\&quot;&gt;Quotas for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html\&quot;&gt;Quotas for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountLimitsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize, final ApiCallback<DescribeAccountLimitsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeListenerCertificates
     * @param listenerArn The Amazon Resource Names (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeListenerCertificatesCall(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeListenerCertificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listenerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListenerArn", listenerArn));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeListenerCertificatesValidateBeforeCall(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listenerArn' is set
        if (listenerArn == null) {
            throw new ApiException("Missing the required parameter 'listenerArn' when calling gETDescribeListenerCertificates(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeListenerCertificates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeListenerCertificates(Async)");
        }

        return gETDescribeListenerCertificatesCall(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the default certificate is also in the certificate list, it appears twice in the results (once with &lt;code&gt;IsDefault&lt;/code&gt; set to true and once with &lt;code&gt;IsDefault&lt;/code&gt; set to false).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates\&quot;&gt;SSL certificates&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate\&quot;&gt;Server certificates&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Names (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return DescribeListenerCertificatesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeListenerCertificatesOutput gETDescribeListenerCertificates(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize) throws ApiException {
        ApiResponse<DescribeListenerCertificatesOutput> localVarResp = gETDescribeListenerCertificatesWithHttpInfo(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the default certificate is also in the certificate list, it appears twice in the results (once with &lt;code&gt;IsDefault&lt;/code&gt; set to true and once with &lt;code&gt;IsDefault&lt;/code&gt; set to false).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates\&quot;&gt;SSL certificates&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate\&quot;&gt;Server certificates&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Names (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return ApiResponse&lt;DescribeListenerCertificatesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeListenerCertificatesOutput> gETDescribeListenerCertificatesWithHttpInfo(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeListenerCertificatesValidateBeforeCall(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize, null);
        Type localVarReturnType = new TypeToken<DescribeListenerCertificatesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the default certificate is also in the certificate list, it appears twice in the results (once with &lt;code&gt;IsDefault&lt;/code&gt; set to true and once with &lt;code&gt;IsDefault&lt;/code&gt; set to false).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates\&quot;&gt;SSL certificates&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate\&quot;&gt;Server certificates&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Names (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeListenerCertificatesAsync(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, Integer pageSize, final ApiCallback<DescribeListenerCertificatesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeListenerCertificatesValidateBeforeCall(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DescribeListenerCertificatesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeListeners
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (optional)
     * @param listenerArns The Amazon Resource Names (ARN) of the listeners. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeListenersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> listenerArns, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeListeners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerArn", loadBalancerArn));
        }

        if (listenerArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ListenerArns", listenerArns));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeListenersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> listenerArns, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeListeners(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeListeners(Async)");
        }

        return gETDescribeListenersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, listenerArns, marker, pageSize, _callback);

    }

    /**
     * 
     * Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (optional)
     * @param listenerArns The Amazon Resource Names (ARN) of the listeners. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return DescribeListenersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeListenersOutput gETDescribeListeners(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> listenerArns, String marker, Integer pageSize) throws ApiException {
        ApiResponse<DescribeListenersOutput> localVarResp = gETDescribeListenersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, listenerArns, marker, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (optional)
     * @param listenerArns The Amazon Resource Names (ARN) of the listeners. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return ApiResponse&lt;DescribeListenersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeListenersOutput> gETDescribeListenersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> listenerArns, String marker, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeListenersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, listenerArns, marker, pageSize, null);
        Type localVarReturnType = new TypeToken<DescribeListenersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (optional)
     * @param listenerArns The Amazon Resource Names (ARN) of the listeners. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeListenersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> listenerArns, String marker, Integer pageSize, final ApiCallback<DescribeListenersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeListenersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, listenerArns, marker, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DescribeListenersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLoadBalancerAttributes
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerAttributesCall(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerArn", loadBalancerArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLoadBalancerAttributesValidateBeforeCall(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerArn' is set
        if (loadBalancerArn == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerArn' when calling gETDescribeLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLoadBalancerAttributes(Async)");
        }

        return gETDescribeLoadBalancerAttributesCall(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeLoadBalancerAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerAttributesOutput gETDescribeLoadBalancerAttributes(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeLoadBalancerAttributesOutput> localVarResp = gETDescribeLoadBalancerAttributesWithHttpInfo(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerAttributesOutput> gETDescribeLoadBalancerAttributesWithHttpInfo(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLoadBalancerAttributesValidateBeforeCall(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerAttributesAsync(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeLoadBalancerAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLoadBalancerAttributesValidateBeforeCall(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLoadBalancers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArns The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call. (optional)
     * @param names The names of the load balancers. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerArns, List<String> names, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LoadBalancerArns", loadBalancerArns));
        }

        if (names != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Names", names));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLoadBalancersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerArns, List<String> names, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLoadBalancers(Async)");
        }

        return gETDescribeLoadBalancersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArns, names, marker, pageSize, _callback);

    }

    /**
     * 
     * Describes the specified load balancers or all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArns The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call. (optional)
     * @param names The names of the load balancers. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return DescribeLoadBalancersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancersOutput gETDescribeLoadBalancers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerArns, List<String> names, String marker, Integer pageSize) throws ApiException {
        ApiResponse<DescribeLoadBalancersOutput> localVarResp = gETDescribeLoadBalancersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArns, names, marker, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified load balancers or all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArns The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call. (optional)
     * @param names The names of the load balancers. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return ApiResponse&lt;DescribeLoadBalancersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancersOutput> gETDescribeLoadBalancersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerArns, List<String> names, String marker, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArns, names, marker, pageSize, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified load balancers or all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArns The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call. (optional)
     * @param names The names of the load balancers. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> loadBalancerArns, List<String> names, String marker, Integer pageSize, final ApiCallback<DescribeLoadBalancersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArns, names, marker, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeRules
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (optional)
     * @param ruleArns The Amazon Resource Names (ARN) of the rules. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeRulesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String listenerArn, List<String> ruleArns, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listenerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListenerArn", listenerArn));
        }

        if (ruleArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "RuleArns", ruleArns));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeRulesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String listenerArn, List<String> ruleArns, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeRules(Async)");
        }

        return gETDescribeRulesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listenerArn, ruleArns, marker, pageSize, _callback);

    }

    /**
     * 
     * Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (optional)
     * @param ruleArns The Amazon Resource Names (ARN) of the rules. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return DescribeRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeRulesOutput gETDescribeRules(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String listenerArn, List<String> ruleArns, String marker, Integer pageSize) throws ApiException {
        ApiResponse<DescribeRulesOutput> localVarResp = gETDescribeRulesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listenerArn, ruleArns, marker, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (optional)
     * @param ruleArns The Amazon Resource Names (ARN) of the rules. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return ApiResponse&lt;DescribeRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeRulesOutput> gETDescribeRulesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String listenerArn, List<String> ruleArns, String marker, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listenerArn, ruleArns, marker, pageSize, null);
        Type localVarReturnType = new TypeToken<DescribeRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (optional)
     * @param ruleArns The Amazon Resource Names (ARN) of the rules. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeRulesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String listenerArn, List<String> ruleArns, String marker, Integer pageSize, final ApiCallback<DescribeRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listenerArn, ruleArns, marker, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DescribeRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeSSLPolicies
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param names The names of the policies. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param loadBalancerType  The type of load balancer. The default lists the SSL policies for all load balancers. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeSSLPoliciesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> names, String marker, Integer pageSize, String loadBalancerType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeSSLPolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (names != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Names", names));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (loadBalancerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerType", loadBalancerType));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeSSLPoliciesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> names, String marker, Integer pageSize, String loadBalancerType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeSSLPolicies(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeSSLPolicies(Async)");
        }

        return gETDescribeSSLPoliciesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, names, marker, pageSize, loadBalancerType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the specified policies or all policies used for SSL negotiation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param names The names of the policies. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param loadBalancerType  The type of load balancer. The default lists the SSL policies for all load balancers. (optional)
     * @return DescribeSSLPoliciesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSSLPoliciesOutput gETDescribeSSLPolicies(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> names, String marker, Integer pageSize, String loadBalancerType) throws ApiException {
        ApiResponse<DescribeSSLPoliciesOutput> localVarResp = gETDescribeSSLPoliciesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, names, marker, pageSize, loadBalancerType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the specified policies or all policies used for SSL negotiation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param names The names of the policies. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param loadBalancerType  The type of load balancer. The default lists the SSL policies for all load balancers. (optional)
     * @return ApiResponse&lt;DescribeSSLPoliciesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSSLPoliciesOutput> gETDescribeSSLPoliciesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> names, String marker, Integer pageSize, String loadBalancerType) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeSSLPoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, names, marker, pageSize, loadBalancerType, null);
        Type localVarReturnType = new TypeToken<DescribeSSLPoliciesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the specified policies or all policies used for SSL negotiation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param names The names of the policies. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param loadBalancerType  The type of load balancer. The default lists the SSL policies for all load balancers. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeSSLPoliciesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> names, String marker, Integer pageSize, String loadBalancerType, final ApiCallback<DescribeSSLPoliciesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeSSLPoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, names, marker, pageSize, loadBalancerType, _callback);
        Type localVarReturnType = new TypeToken<DescribeSSLPoliciesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeTags
     * @param resourceArns The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTagsCall(List<String> resourceArns, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ResourceArns", resourceArns));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTagsValidateBeforeCall(List<String> resourceArns, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArns' is set
        if (resourceArns == null) {
            throw new ApiException("Missing the required parameter 'resourceArns' when calling gETDescribeTags(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeTags(Async)");
        }

        return gETDescribeTagsCall(resourceArns, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param resourceArns The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTagsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTagsOutput gETDescribeTags(List<String> resourceArns, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTagsOutput> localVarResp = gETDescribeTagsWithHttpInfo(resourceArns, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param resourceArns The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTagsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTagsOutput> gETDescribeTagsWithHttpInfo(List<String> resourceArns, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTagsValidateBeforeCall(resourceArns, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTagsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param resourceArns The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTagsAsync(List<String> resourceArns, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTagsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTagsValidateBeforeCall(resourceArns, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTagsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeTargetGroupAttributes
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTargetGroupAttributesCall(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTargetGroupAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetGroupArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetGroupArn", targetGroupArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTargetGroupAttributesValidateBeforeCall(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetGroupArn' is set
        if (targetGroupArn == null) {
            throw new ApiException("Missing the required parameter 'targetGroupArn' when calling gETDescribeTargetGroupAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeTargetGroupAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeTargetGroupAttributes(Async)");
        }

        return gETDescribeTargetGroupAttributesCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the attributes for the specified target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTargetGroupAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTargetGroupAttributesOutput gETDescribeTargetGroupAttributes(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTargetGroupAttributesOutput> localVarResp = gETDescribeTargetGroupAttributesWithHttpInfo(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the attributes for the specified target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTargetGroupAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTargetGroupAttributesOutput> gETDescribeTargetGroupAttributesWithHttpInfo(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTargetGroupAttributesValidateBeforeCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTargetGroupAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the attributes for the specified target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTargetGroupAttributesAsync(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTargetGroupAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTargetGroupAttributesValidateBeforeCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTargetGroupAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeTargetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (optional)
     * @param targetGroupArns The Amazon Resource Names (ARN) of the target groups. (optional)
     * @param names The names of the target groups. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTargetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> targetGroupArns, List<String> names, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTargetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerArn", loadBalancerArn));
        }

        if (targetGroupArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TargetGroupArns", targetGroupArns));
        }

        if (names != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Names", names));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTargetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> targetGroupArns, List<String> names, String marker, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeTargetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeTargetGroups(Async)");
        }

        return gETDescribeTargetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, targetGroupArns, names, marker, pageSize, _callback);

    }

    /**
     * 
     * Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (optional)
     * @param targetGroupArns The Amazon Resource Names (ARN) of the target groups. (optional)
     * @param names The names of the target groups. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return DescribeTargetGroupsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTargetGroupsOutput gETDescribeTargetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> targetGroupArns, List<String> names, String marker, Integer pageSize) throws ApiException {
        ApiResponse<DescribeTargetGroupsOutput> localVarResp = gETDescribeTargetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, targetGroupArns, names, marker, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (optional)
     * @param targetGroupArns The Amazon Resource Names (ARN) of the target groups. (optional)
     * @param names The names of the target groups. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @return ApiResponse&lt;DescribeTargetGroupsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTargetGroupsOutput> gETDescribeTargetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> targetGroupArns, List<String> names, String marker, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, targetGroupArns, names, marker, pageSize, null);
        Type localVarReturnType = new TypeToken<DescribeTargetGroupsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (optional)
     * @param targetGroupArns The Amazon Resource Names (ARN) of the target groups. (optional)
     * @param names The names of the target groups. (optional)
     * @param marker The marker for the next set of results. (You received this marker from a previous call.) (optional)
     * @param pageSize The maximum number of results to return with this call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTargetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String loadBalancerArn, List<String> targetGroupArns, List<String> names, String marker, Integer pageSize, final ApiCallback<DescribeTargetGroupsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, loadBalancerArn, targetGroupArns, names, marker, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DescribeTargetGroupsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeTargetHealth
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targets The targets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTargetHealthCall(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetDescription> targets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTargetHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetGroupArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetGroupArn", targetGroupArn));
        }

        if (targets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Targets", targets));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTargetHealthValidateBeforeCall(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetDescription> targets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetGroupArn' is set
        if (targetGroupArn == null) {
            throw new ApiException("Missing the required parameter 'targetGroupArn' when calling gETDescribeTargetHealth(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeTargetHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeTargetHealth(Async)");
        }

        return gETDescribeTargetHealthCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targets, _callback);

    }

    /**
     * 
     * Describes the health of the specified targets or all of your targets.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targets The targets. (optional)
     * @return DescribeTargetHealthOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTargetHealthOutput gETDescribeTargetHealth(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetDescription> targets) throws ApiException {
        ApiResponse<DescribeTargetHealthOutput> localVarResp = gETDescribeTargetHealthWithHttpInfo(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targets);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the health of the specified targets or all of your targets.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targets The targets. (optional)
     * @return ApiResponse&lt;DescribeTargetHealthOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTargetHealthOutput> gETDescribeTargetHealthWithHttpInfo(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetDescription> targets) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTargetHealthValidateBeforeCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targets, null);
        Type localVarReturnType = new TypeToken<DescribeTargetHealthOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the health of the specified targets or all of your targets.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targets The targets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTargetHealthAsync(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetDescription> targets, final ApiCallback<DescribeTargetHealthOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTargetHealthValidateBeforeCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targets, _callback);
        Type localVarReturnType = new TypeToken<DescribeTargetHealthOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyListener
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param port The port for connections from clients to the load balancer. You cannot specify a port for a Gateway Load Balancer. (optional)
     * @param protocol The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You can’t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer. (optional)
     * @param sslPolicy &lt;p&gt;[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param certificates [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (optional)
     * @param defaultActions The actions for the default rule. (optional)
     * @param alpnPolicy &lt;p&gt;[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP1Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Optional&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Preferred&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;None&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies\&quot;&gt;ALPN policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyListenerCall(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer port, String protocol, String sslPolicy, List<Certificate> certificates, List<Action> defaultActions, List<String> alpnPolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyListener";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listenerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListenerArn", listenerArn));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Protocol", protocol));
        }

        if (sslPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SslPolicy", sslPolicy));
        }

        if (certificates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Certificates", certificates));
        }

        if (defaultActions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "DefaultActions", defaultActions));
        }

        if (alpnPolicy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlpnPolicy", alpnPolicy));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyListenerValidateBeforeCall(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer port, String protocol, String sslPolicy, List<Certificate> certificates, List<Action> defaultActions, List<String> alpnPolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listenerArn' is set
        if (listenerArn == null) {
            throw new ApiException("Missing the required parameter 'listenerArn' when calling gETModifyListener(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyListener(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyListener(Async)");
        }

        return gETModifyListenerCall(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, port, protocol, sslPolicy, certificates, defaultActions, alpnPolicy, _callback);

    }

    /**
     * 
     * &lt;p&gt;Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.&lt;/p&gt; &lt;p&gt;Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param port The port for connections from clients to the load balancer. You cannot specify a port for a Gateway Load Balancer. (optional)
     * @param protocol The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You can’t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer. (optional)
     * @param sslPolicy &lt;p&gt;[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param certificates [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (optional)
     * @param defaultActions The actions for the default rule. (optional)
     * @param alpnPolicy &lt;p&gt;[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP1Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Optional&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Preferred&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;None&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies\&quot;&gt;ALPN policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ModifyListenerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyListenerOutput gETModifyListener(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer port, String protocol, String sslPolicy, List<Certificate> certificates, List<Action> defaultActions, List<String> alpnPolicy) throws ApiException {
        ApiResponse<ModifyListenerOutput> localVarResp = gETModifyListenerWithHttpInfo(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, port, protocol, sslPolicy, certificates, defaultActions, alpnPolicy);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.&lt;/p&gt; &lt;p&gt;Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param port The port for connections from clients to the load balancer. You cannot specify a port for a Gateway Load Balancer. (optional)
     * @param protocol The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You can’t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer. (optional)
     * @param sslPolicy &lt;p&gt;[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param certificates [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (optional)
     * @param defaultActions The actions for the default rule. (optional)
     * @param alpnPolicy &lt;p&gt;[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP1Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Optional&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Preferred&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;None&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies\&quot;&gt;ALPN policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ModifyListenerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyListenerOutput> gETModifyListenerWithHttpInfo(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer port, String protocol, String sslPolicy, List<Certificate> certificates, List<Action> defaultActions, List<String> alpnPolicy) throws ApiException {
        okhttp3.Call localVarCall = gETModifyListenerValidateBeforeCall(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, port, protocol, sslPolicy, certificates, defaultActions, alpnPolicy, null);
        Type localVarReturnType = new TypeToken<ModifyListenerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.&lt;/p&gt; &lt;p&gt;Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param port The port for connections from clients to the load balancer. You cannot specify a port for a Gateway Load Balancer. (optional)
     * @param protocol The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You can’t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer. (optional)
     * @param sslPolicy &lt;p&gt;[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param certificates [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (optional)
     * @param defaultActions The actions for the default rule. (optional)
     * @param alpnPolicy &lt;p&gt;[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP1Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Only&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Optional&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTP2Preferred&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;None&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies\&quot;&gt;ALPN policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyListenerAsync(String listenerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer port, String protocol, String sslPolicy, List<Certificate> certificates, List<Action> defaultActions, List<String> alpnPolicy, final ApiCallback<ModifyListenerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyListenerValidateBeforeCall(listenerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, port, protocol, sslPolicy, certificates, defaultActions, alpnPolicy, _callback);
        Type localVarReturnType = new TypeToken<ModifyListenerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyLoadBalancerAttributes
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param attributes The load balancer attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyLoadBalancerAttributesCall(String loadBalancerArn, List<LoadBalancerAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyLoadBalancerAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerArn", loadBalancerArn));
        }

        if (attributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Attributes", attributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyLoadBalancerAttributesValidateBeforeCall(String loadBalancerArn, List<LoadBalancerAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerArn' is set
        if (loadBalancerArn == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerArn' when calling gETModifyLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling gETModifyLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyLoadBalancerAttributes(Async)");
        }

        return gETModifyLoadBalancerAttributesCall(loadBalancerArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;If any of the specified attributes can&#39;t be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param attributes The load balancer attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ModifyLoadBalancerAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyLoadBalancerAttributesOutput gETModifyLoadBalancerAttributes(String loadBalancerArn, List<LoadBalancerAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ModifyLoadBalancerAttributesOutput> localVarResp = gETModifyLoadBalancerAttributesWithHttpInfo(loadBalancerArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;If any of the specified attributes can&#39;t be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param attributes The load balancer attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ModifyLoadBalancerAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyLoadBalancerAttributesOutput> gETModifyLoadBalancerAttributesWithHttpInfo(String loadBalancerArn, List<LoadBalancerAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETModifyLoadBalancerAttributesValidateBeforeCall(loadBalancerArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ModifyLoadBalancerAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;If any of the specified attributes can&#39;t be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param attributes The load balancer attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyLoadBalancerAttributesAsync(String loadBalancerArn, List<LoadBalancerAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ModifyLoadBalancerAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyLoadBalancerAttributesValidateBeforeCall(loadBalancerArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ModifyLoadBalancerAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyRule
     * @param ruleArn The Amazon Resource Name (ARN) of the rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param conditions The conditions. (optional)
     * @param actions The actions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyRuleCall(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<RuleCondition> conditions, List<Action> actions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ruleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RuleArn", ruleArn));
        }

        if (conditions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Conditions", conditions));
        }

        if (actions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Actions", actions));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyRuleValidateBeforeCall(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<RuleCondition> conditions, List<Action> actions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleArn' is set
        if (ruleArn == null) {
            throw new ApiException("Missing the required parameter 'ruleArn' when calling gETModifyRule(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyRule(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyRule(Async)");
        }

        return gETModifyRuleCall(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, conditions, actions, _callback);

    }

    /**
     * 
     * &lt;p&gt;Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param ruleArn The Amazon Resource Name (ARN) of the rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param conditions The conditions. (optional)
     * @param actions The actions. (optional)
     * @return ModifyRuleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyRuleOutput gETModifyRule(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<RuleCondition> conditions, List<Action> actions) throws ApiException {
        ApiResponse<ModifyRuleOutput> localVarResp = gETModifyRuleWithHttpInfo(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, conditions, actions);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param ruleArn The Amazon Resource Name (ARN) of the rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param conditions The conditions. (optional)
     * @param actions The actions. (optional)
     * @return ApiResponse&lt;ModifyRuleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyRuleOutput> gETModifyRuleWithHttpInfo(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<RuleCondition> conditions, List<Action> actions) throws ApiException {
        okhttp3.Call localVarCall = gETModifyRuleValidateBeforeCall(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, conditions, actions, null);
        Type localVarReturnType = new TypeToken<ModifyRuleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param ruleArn The Amazon Resource Name (ARN) of the rule. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param conditions The conditions. (optional)
     * @param actions The actions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyRuleAsync(String ruleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<RuleCondition> conditions, List<Action> actions, final ApiCallback<ModifyRuleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyRuleValidateBeforeCall(ruleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, conditions, actions, _callback);
        Type localVarReturnType = new TypeToken<ModifyRuleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyTargetGroup
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param healthCheckProtocol The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks. (optional)
     * @param healthCheckPort The port the load balancer uses when performing health checks on targets. (optional)
     * @param healthCheckPath &lt;p&gt;[HTTP/HTTPS health checks] The destination for health checks on the targets.&lt;/p&gt; &lt;p&gt;[HTTP1 or HTTP2 protocol version] The ping path. The default is /.&lt;/p&gt; &lt;p&gt;[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.&lt;/p&gt; (optional)
     * @param healthCheckEnabled Indicates whether health checks are enabled. (optional)
     * @param healthCheckIntervalSeconds The approximate amount of time, in seconds, between health checks of an individual target. (optional)
     * @param healthCheckTimeoutSeconds [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check. (optional)
     * @param healthyThresholdCount The number of consecutive health checks successes required before considering an unhealthy target healthy. (optional)
     * @param unhealthyThresholdCount The number of consecutive health check failures required before considering the target unhealthy. (optional)
     * @param matcher [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyTargetGroupCall(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String healthCheckProtocol, String healthCheckPort, String healthCheckPath, Boolean healthCheckEnabled, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyTargetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetGroupArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetGroupArn", targetGroupArn));
        }

        if (healthCheckProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckProtocol", healthCheckProtocol));
        }

        if (healthCheckPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckPort", healthCheckPort));
        }

        if (healthCheckPath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckPath", healthCheckPath));
        }

        if (healthCheckEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckEnabled", healthCheckEnabled));
        }

        if (healthCheckIntervalSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckIntervalSeconds", healthCheckIntervalSeconds));
        }

        if (healthCheckTimeoutSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckTimeoutSeconds", healthCheckTimeoutSeconds));
        }

        if (healthyThresholdCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthyThresholdCount", healthyThresholdCount));
        }

        if (unhealthyThresholdCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UnhealthyThresholdCount", unhealthyThresholdCount));
        }

        if (matcher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Matcher", matcher));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyTargetGroupValidateBeforeCall(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String healthCheckProtocol, String healthCheckPort, String healthCheckPath, Boolean healthCheckEnabled, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetGroupArn' is set
        if (targetGroupArn == null) {
            throw new ApiException("Missing the required parameter 'targetGroupArn' when calling gETModifyTargetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyTargetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyTargetGroup(Async)");
        }

        return gETModifyTargetGroupCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, healthCheckProtocol, healthCheckPort, healthCheckPath, healthCheckEnabled, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher, _callback);

    }

    /**
     * 
     * Modifies the health checks used when evaluating the health state of the targets in the specified target group.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param healthCheckProtocol The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks. (optional)
     * @param healthCheckPort The port the load balancer uses when performing health checks on targets. (optional)
     * @param healthCheckPath &lt;p&gt;[HTTP/HTTPS health checks] The destination for health checks on the targets.&lt;/p&gt; &lt;p&gt;[HTTP1 or HTTP2 protocol version] The ping path. The default is /.&lt;/p&gt; &lt;p&gt;[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.&lt;/p&gt; (optional)
     * @param healthCheckEnabled Indicates whether health checks are enabled. (optional)
     * @param healthCheckIntervalSeconds The approximate amount of time, in seconds, between health checks of an individual target. (optional)
     * @param healthCheckTimeoutSeconds [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check. (optional)
     * @param healthyThresholdCount The number of consecutive health checks successes required before considering an unhealthy target healthy. (optional)
     * @param unhealthyThresholdCount The number of consecutive health check failures required before considering the target unhealthy. (optional)
     * @param matcher [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399. (optional)
     * @return ModifyTargetGroupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyTargetGroupOutput gETModifyTargetGroup(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String healthCheckProtocol, String healthCheckPort, String healthCheckPath, Boolean healthCheckEnabled, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher) throws ApiException {
        ApiResponse<ModifyTargetGroupOutput> localVarResp = gETModifyTargetGroupWithHttpInfo(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, healthCheckProtocol, healthCheckPort, healthCheckPath, healthCheckEnabled, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the health checks used when evaluating the health state of the targets in the specified target group.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param healthCheckProtocol The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks. (optional)
     * @param healthCheckPort The port the load balancer uses when performing health checks on targets. (optional)
     * @param healthCheckPath &lt;p&gt;[HTTP/HTTPS health checks] The destination for health checks on the targets.&lt;/p&gt; &lt;p&gt;[HTTP1 or HTTP2 protocol version] The ping path. The default is /.&lt;/p&gt; &lt;p&gt;[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.&lt;/p&gt; (optional)
     * @param healthCheckEnabled Indicates whether health checks are enabled. (optional)
     * @param healthCheckIntervalSeconds The approximate amount of time, in seconds, between health checks of an individual target. (optional)
     * @param healthCheckTimeoutSeconds [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check. (optional)
     * @param healthyThresholdCount The number of consecutive health checks successes required before considering an unhealthy target healthy. (optional)
     * @param unhealthyThresholdCount The number of consecutive health check failures required before considering the target unhealthy. (optional)
     * @param matcher [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399. (optional)
     * @return ApiResponse&lt;ModifyTargetGroupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyTargetGroupOutput> gETModifyTargetGroupWithHttpInfo(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String healthCheckProtocol, String healthCheckPort, String healthCheckPath, Boolean healthCheckEnabled, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher) throws ApiException {
        okhttp3.Call localVarCall = gETModifyTargetGroupValidateBeforeCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, healthCheckProtocol, healthCheckPort, healthCheckPath, healthCheckEnabled, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher, null);
        Type localVarReturnType = new TypeToken<ModifyTargetGroupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the health checks used when evaluating the health state of the targets in the specified target group.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param healthCheckProtocol The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks. (optional)
     * @param healthCheckPort The port the load balancer uses when performing health checks on targets. (optional)
     * @param healthCheckPath &lt;p&gt;[HTTP/HTTPS health checks] The destination for health checks on the targets.&lt;/p&gt; &lt;p&gt;[HTTP1 or HTTP2 protocol version] The ping path. The default is /.&lt;/p&gt; &lt;p&gt;[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.&lt;/p&gt; (optional)
     * @param healthCheckEnabled Indicates whether health checks are enabled. (optional)
     * @param healthCheckIntervalSeconds The approximate amount of time, in seconds, between health checks of an individual target. (optional)
     * @param healthCheckTimeoutSeconds [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check. (optional)
     * @param healthyThresholdCount The number of consecutive health checks successes required before considering an unhealthy target healthy. (optional)
     * @param unhealthyThresholdCount The number of consecutive health check failures required before considering the target unhealthy. (optional)
     * @param matcher [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyTargetGroupAsync(String targetGroupArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String healthCheckProtocol, String healthCheckPort, String healthCheckPath, Boolean healthCheckEnabled, Integer healthCheckIntervalSeconds, Integer healthCheckTimeoutSeconds, Integer healthyThresholdCount, Integer unhealthyThresholdCount, GETCreateTargetGroupMatcherParameter matcher, final ApiCallback<ModifyTargetGroupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyTargetGroupValidateBeforeCall(targetGroupArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, healthCheckProtocol, healthCheckPort, healthCheckPath, healthCheckEnabled, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher, _callback);
        Type localVarReturnType = new TypeToken<ModifyTargetGroupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyTargetGroupAttributes
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param attributes The attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyTargetGroupAttributesCall(String targetGroupArn, List<TargetGroupAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyTargetGroupAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetGroupArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetGroupArn", targetGroupArn));
        }

        if (attributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Attributes", attributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyTargetGroupAttributesValidateBeforeCall(String targetGroupArn, List<TargetGroupAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetGroupArn' is set
        if (targetGroupArn == null) {
            throw new ApiException("Missing the required parameter 'targetGroupArn' when calling gETModifyTargetGroupAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling gETModifyTargetGroupAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyTargetGroupAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyTargetGroupAttributes(Async)");
        }

        return gETModifyTargetGroupAttributesCall(targetGroupArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies the specified attributes of the specified target group.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param attributes The attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ModifyTargetGroupAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyTargetGroupAttributesOutput gETModifyTargetGroupAttributes(String targetGroupArn, List<TargetGroupAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ModifyTargetGroupAttributesOutput> localVarResp = gETModifyTargetGroupAttributesWithHttpInfo(targetGroupArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the specified attributes of the specified target group.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param attributes The attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ModifyTargetGroupAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyTargetGroupAttributesOutput> gETModifyTargetGroupAttributesWithHttpInfo(String targetGroupArn, List<TargetGroupAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETModifyTargetGroupAttributesValidateBeforeCall(targetGroupArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ModifyTargetGroupAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the specified attributes of the specified target group.
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param attributes The attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyTargetGroupAttributesAsync(String targetGroupArn, List<TargetGroupAttribute> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ModifyTargetGroupAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyTargetGroupAttributesValidateBeforeCall(targetGroupArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ModifyTargetGroupAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRegisterTargets
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param targets The targets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRegisterTargetsCall(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RegisterTargets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetGroupArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetGroupArn", targetGroupArn));
        }

        if (targets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Targets", targets));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRegisterTargetsValidateBeforeCall(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetGroupArn' is set
        if (targetGroupArn == null) {
            throw new ApiException("Missing the required parameter 'targetGroupArn' when calling gETRegisterTargets(Async)");
        }

        // verify the required parameter 'targets' is set
        if (targets == null) {
            throw new ApiException("Missing the required parameter 'targets' when calling gETRegisterTargets(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRegisterTargets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRegisterTargets(Async)");
        }

        return gETRegisterTargetsCall(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Registers the specified targets with the specified target group.&lt;/p&gt; &lt;p&gt;If the target is an EC2 instance, it must be in the &lt;code&gt;running&lt;/code&gt; state when you register it.&lt;/p&gt; &lt;p&gt;By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.&lt;/p&gt; &lt;p&gt;With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.&lt;/p&gt;
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param targets The targets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETRegisterTargets(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETRegisterTargetsWithHttpInfo(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Registers the specified targets with the specified target group.&lt;/p&gt; &lt;p&gt;If the target is an EC2 instance, it must be in the &lt;code&gt;running&lt;/code&gt; state when you register it.&lt;/p&gt; &lt;p&gt;By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.&lt;/p&gt; &lt;p&gt;With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.&lt;/p&gt;
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param targets The targets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETRegisterTargetsWithHttpInfo(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRegisterTargetsValidateBeforeCall(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Registers the specified targets with the specified target group.&lt;/p&gt; &lt;p&gt;If the target is an EC2 instance, it must be in the &lt;code&gt;running&lt;/code&gt; state when you register it.&lt;/p&gt; &lt;p&gt;By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.&lt;/p&gt; &lt;p&gt;With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.&lt;/p&gt;
     * @param targetGroupArn The Amazon Resource Name (ARN) of the target group. (required)
     * @param targets The targets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRegisterTargetsAsync(String targetGroupArn, List<TargetDescription> targets, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRegisterTargetsValidateBeforeCall(targetGroupArn, targets, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveListenerCertificates
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param certificates The certificate to remove. You can specify one certificate per call. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveListenerCertificatesCall(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveListenerCertificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listenerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListenerArn", listenerArn));
        }

        if (certificates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Certificates", certificates));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveListenerCertificatesValidateBeforeCall(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listenerArn' is set
        if (listenerArn == null) {
            throw new ApiException("Missing the required parameter 'listenerArn' when calling gETRemoveListenerCertificates(Async)");
        }

        // verify the required parameter 'certificates' is set
        if (certificates == null) {
            throw new ApiException("Missing the required parameter 'certificates' when calling gETRemoveListenerCertificates(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveListenerCertificates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveListenerCertificates(Async)");
        }

        return gETRemoveListenerCertificatesCall(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param certificates The certificate to remove. You can specify one certificate per call. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETRemoveListenerCertificates(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETRemoveListenerCertificatesWithHttpInfo(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param certificates The certificate to remove. You can specify one certificate per call. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETRemoveListenerCertificatesWithHttpInfo(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveListenerCertificatesValidateBeforeCall(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
     * @param listenerArn The Amazon Resource Name (ARN) of the listener. (required)
     * @param certificates The certificate to remove. You can specify one certificate per call. Set &lt;code&gt;CertificateArn&lt;/code&gt; to the certificate ARN but do not set &lt;code&gt;IsDefault&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveListenerCertificatesAsync(String listenerArn, List<Certificate> certificates, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveListenerCertificatesValidateBeforeCall(listenerArn, certificates, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveTags
     * @param resourceArns The Amazon Resource Name (ARN) of the resource. (required)
     * @param tagKeys The tag keys for the tags to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsCall(List<String> resourceArns, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ResourceArns", resourceArns));
        }

        if (tagKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TagKeys", tagKeys));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveTagsValidateBeforeCall(List<String> resourceArns, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArns' is set
        if (resourceArns == null) {
            throw new ApiException("Missing the required parameter 'resourceArns' when calling gETRemoveTags(Async)");
        }

        // verify the required parameter 'tagKeys' is set
        if (tagKeys == null) {
            throw new ApiException("Missing the required parameter 'tagKeys' when calling gETRemoveTags(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveTags(Async)");
        }

        return gETRemoveTagsCall(resourceArns, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param resourceArns The Amazon Resource Name (ARN) of the resource. (required)
     * @param tagKeys The tag keys for the tags to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETRemoveTags(List<String> resourceArns, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETRemoveTagsWithHttpInfo(resourceArns, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param resourceArns The Amazon Resource Name (ARN) of the resource. (required)
     * @param tagKeys The tag keys for the tags to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETRemoveTagsWithHttpInfo(List<String> resourceArns, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveTagsValidateBeforeCall(resourceArns, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param resourceArns The Amazon Resource Name (ARN) of the resource. (required)
     * @param tagKeys The tag keys for the tags to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsAsync(List<String> resourceArns, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveTagsValidateBeforeCall(resourceArns, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetIpAddressType
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param ipAddressType The IP address type. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses). You can’t specify &lt;code&gt;dualstack&lt;/code&gt; for a load balancer with a UDP or TCP_UDP listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetIpAddressTypeCall(String loadBalancerArn, String ipAddressType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetIpAddressType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerArn", loadBalancerArn));
        }

        if (ipAddressType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IpAddressType", ipAddressType));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetIpAddressTypeValidateBeforeCall(String loadBalancerArn, String ipAddressType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerArn' is set
        if (loadBalancerArn == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerArn' when calling gETSetIpAddressType(Async)");
        }

        // verify the required parameter 'ipAddressType' is set
        if (ipAddressType == null) {
            throw new ApiException("Missing the required parameter 'ipAddressType' when calling gETSetIpAddressType(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetIpAddressType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetIpAddressType(Async)");
        }

        return gETSetIpAddressTypeCall(loadBalancerArn, ipAddressType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Sets the type of IP addresses used by the subnets of the specified load balancer.
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param ipAddressType The IP address type. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses). You can’t specify &lt;code&gt;dualstack&lt;/code&gt; for a load balancer with a UDP or TCP_UDP listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SetIpAddressTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public SetIpAddressTypeOutput gETSetIpAddressType(String loadBalancerArn, String ipAddressType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SetIpAddressTypeOutput> localVarResp = gETSetIpAddressTypeWithHttpInfo(loadBalancerArn, ipAddressType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets the type of IP addresses used by the subnets of the specified load balancer.
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param ipAddressType The IP address type. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses). You can’t specify &lt;code&gt;dualstack&lt;/code&gt; for a load balancer with a UDP or TCP_UDP listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SetIpAddressTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetIpAddressTypeOutput> gETSetIpAddressTypeWithHttpInfo(String loadBalancerArn, String ipAddressType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetIpAddressTypeValidateBeforeCall(loadBalancerArn, ipAddressType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SetIpAddressTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets the type of IP addresses used by the subnets of the specified load balancer.
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param ipAddressType The IP address type. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses). You can’t specify &lt;code&gt;dualstack&lt;/code&gt; for a load balancer with a UDP or TCP_UDP listener. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetIpAddressTypeAsync(String loadBalancerArn, String ipAddressType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SetIpAddressTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetIpAddressTypeValidateBeforeCall(loadBalancerArn, ipAddressType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SetIpAddressTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetRulePriorities
     * @param rulePriorities The rule priorities. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetRulePrioritiesCall(List<RulePriorityPair> rulePriorities, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetRulePriorities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rulePriorities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "RulePriorities", rulePriorities));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetRulePrioritiesValidateBeforeCall(List<RulePriorityPair> rulePriorities, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulePriorities' is set
        if (rulePriorities == null) {
            throw new ApiException("Missing the required parameter 'rulePriorities' when calling gETSetRulePriorities(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetRulePriorities(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetRulePriorities(Async)");
        }

        return gETSetRulePrioritiesCall(rulePriorities, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the priorities of the specified rules.&lt;/p&gt; &lt;p&gt;You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.&lt;/p&gt;
     * @param rulePriorities The rule priorities. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SetRulePrioritiesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public SetRulePrioritiesOutput gETSetRulePriorities(List<RulePriorityPair> rulePriorities, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SetRulePrioritiesOutput> localVarResp = gETSetRulePrioritiesWithHttpInfo(rulePriorities, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the priorities of the specified rules.&lt;/p&gt; &lt;p&gt;You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.&lt;/p&gt;
     * @param rulePriorities The rule priorities. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SetRulePrioritiesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetRulePrioritiesOutput> gETSetRulePrioritiesWithHttpInfo(List<RulePriorityPair> rulePriorities, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetRulePrioritiesValidateBeforeCall(rulePriorities, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SetRulePrioritiesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the priorities of the specified rules.&lt;/p&gt; &lt;p&gt;You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.&lt;/p&gt;
     * @param rulePriorities The rule priorities. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetRulePrioritiesAsync(List<RulePriorityPair> rulePriorities, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SetRulePrioritiesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetRulePrioritiesValidateBeforeCall(rulePriorities, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SetRulePrioritiesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetSecurityGroups
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param securityGroups The IDs of the security groups. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetSecurityGroupsCall(String loadBalancerArn, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetSecurityGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerArn", loadBalancerArn));
        }

        if (securityGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SecurityGroups", securityGroups));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetSecurityGroupsValidateBeforeCall(String loadBalancerArn, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerArn' is set
        if (loadBalancerArn == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerArn' when calling gETSetSecurityGroups(Async)");
        }

        // verify the required parameter 'securityGroups' is set
        if (securityGroups == null) {
            throw new ApiException("Missing the required parameter 'securityGroups' when calling gETSetSecurityGroups(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetSecurityGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetSecurityGroups(Async)");
        }

        return gETSetSecurityGroupsCall(loadBalancerArn, securityGroups, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;You can&#39;t specify a security group for a Network Load Balancer or Gateway Load Balancer.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param securityGroups The IDs of the security groups. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SetSecurityGroupsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public SetSecurityGroupsOutput gETSetSecurityGroups(String loadBalancerArn, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SetSecurityGroupsOutput> localVarResp = gETSetSecurityGroupsWithHttpInfo(loadBalancerArn, securityGroups, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;You can&#39;t specify a security group for a Network Load Balancer or Gateway Load Balancer.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param securityGroups The IDs of the security groups. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SetSecurityGroupsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetSecurityGroupsOutput> gETSetSecurityGroupsWithHttpInfo(String loadBalancerArn, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetSecurityGroupsValidateBeforeCall(loadBalancerArn, securityGroups, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SetSecurityGroupsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;You can&#39;t specify a security group for a Network Load Balancer or Gateway Load Balancer.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param securityGroups The IDs of the security groups. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetSecurityGroupsAsync(String loadBalancerArn, List<String> securityGroups, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SetSecurityGroupsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetSecurityGroupsValidateBeforeCall(loadBalancerArn, securityGroups, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SetSecurityGroupsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetSubnets
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subnets &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; (optional)
     * @param subnetMappings &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.&lt;/p&gt; (optional)
     * @param ipAddressType [Network Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses). You can’t specify &lt;code&gt;dualstack&lt;/code&gt; for a load balancer with a UDP or TCP_UDP listener. . (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetSubnetsCall(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, String ipAddressType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetSubnets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loadBalancerArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoadBalancerArn", loadBalancerArn));
        }

        if (subnets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Subnets", subnets));
        }

        if (subnetMappings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SubnetMappings", subnetMappings));
        }

        if (ipAddressType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IpAddressType", ipAddressType));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetSubnetsValidateBeforeCall(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, String ipAddressType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerArn' is set
        if (loadBalancerArn == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerArn' when calling gETSetSubnets(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetSubnets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetSubnets(Async)");
        }

        return gETSetSubnetsCall(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, ipAddressType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer or Network Load Balancer. The specified subnets replace the previously enabled subnets.&lt;/p&gt; &lt;p&gt;When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subnets &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; (optional)
     * @param subnetMappings &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.&lt;/p&gt; (optional)
     * @param ipAddressType [Network Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses). You can’t specify &lt;code&gt;dualstack&lt;/code&gt; for a load balancer with a UDP or TCP_UDP listener. . (optional)
     * @return SetSubnetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public SetSubnetsOutput gETSetSubnets(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, String ipAddressType) throws ApiException {
        ApiResponse<SetSubnetsOutput> localVarResp = gETSetSubnetsWithHttpInfo(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, ipAddressType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer or Network Load Balancer. The specified subnets replace the previously enabled subnets.&lt;/p&gt; &lt;p&gt;When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subnets &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; (optional)
     * @param subnetMappings &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.&lt;/p&gt; (optional)
     * @param ipAddressType [Network Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses). You can’t specify &lt;code&gt;dualstack&lt;/code&gt; for a load balancer with a UDP or TCP_UDP listener. . (optional)
     * @return ApiResponse&lt;SetSubnetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetSubnetsOutput> gETSetSubnetsWithHttpInfo(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, String ipAddressType) throws ApiException {
        okhttp3.Call localVarCall = gETSetSubnetsValidateBeforeCall(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, ipAddressType, null);
        Type localVarReturnType = new TypeToken<SetSubnetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer or Network Load Balancer. The specified subnets replace the previously enabled subnets.&lt;/p&gt; &lt;p&gt;When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.&lt;/p&gt;
     * @param loadBalancerArn The Amazon Resource Name (ARN) of the load balancer. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subnets &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones.&lt;/p&gt; (optional)
     * @param subnetMappings &lt;p&gt;The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.&lt;/p&gt; &lt;p&gt;[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Outposts] You must specify one Outpost subnet.&lt;/p&gt; &lt;p&gt;[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.&lt;/p&gt; &lt;p&gt;[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.&lt;/p&gt; (optional)
     * @param ipAddressType [Network Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are &lt;code&gt;ipv4&lt;/code&gt; (for IPv4 addresses) and &lt;code&gt;dualstack&lt;/code&gt; (for IPv4 and IPv6 addresses). You can’t specify &lt;code&gt;dualstack&lt;/code&gt; for a load balancer with a UDP or TCP_UDP listener. . (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetSubnetsAsync(String loadBalancerArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> subnets, List<SubnetMapping> subnetMappings, String ipAddressType, final ApiCallback<SetSubnetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetSubnetsValidateBeforeCall(loadBalancerArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subnets, subnetMappings, ipAddressType, _callback);
        Type localVarReturnType = new TypeToken<SetSubnetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddListenerCertificates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addListenerCertificatesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddListenerCertificatesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddListenerCertificatesInput addListenerCertificatesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addListenerCertificatesInput;

        // create path and map variables
        String localVarPath = "/#Action=AddListenerCertificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddListenerCertificatesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddListenerCertificatesInput addListenerCertificatesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddListenerCertificates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddListenerCertificates(Async)");
        }

        return pOSTAddListenerCertificatesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addListenerCertificatesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the certificate in already in the certificate list, the call is successful but the certificate is not added again.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\&quot;&gt;HTTPS listeners&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\&quot;&gt;TLS listeners&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addListenerCertificatesInput  (optional)
     * @return AddListenerCertificatesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public AddListenerCertificatesOutput pOSTAddListenerCertificates(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddListenerCertificatesInput addListenerCertificatesInput) throws ApiException {
        ApiResponse<AddListenerCertificatesOutput> localVarResp = pOSTAddListenerCertificatesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addListenerCertificatesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the certificate in already in the certificate list, the call is successful but the certificate is not added again.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\&quot;&gt;HTTPS listeners&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\&quot;&gt;TLS listeners&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addListenerCertificatesInput  (optional)
     * @return ApiResponse&lt;AddListenerCertificatesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddListenerCertificatesOutput> pOSTAddListenerCertificatesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddListenerCertificatesInput addListenerCertificatesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddListenerCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addListenerCertificatesInput, null);
        Type localVarReturnType = new TypeToken<AddListenerCertificatesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the certificate in already in the certificate list, the call is successful but the certificate is not added again.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\&quot;&gt;HTTPS listeners&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\&quot;&gt;TLS listeners&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addListenerCertificatesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddListenerCertificatesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddListenerCertificatesInput addListenerCertificatesInput, final ApiCallback<AddListenerCertificatesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddListenerCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addListenerCertificatesInput, _callback);
        Type localVarReturnType = new TypeToken<AddListenerCertificatesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTagsInput;

        // create path and map variables
        String localVarPath = "/#Action=AddTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddTags(Async)");
        }

        return pOSTAddTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, and rules.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a resource already has a tag with the same key, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTAddTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTAddTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, and rules.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a resource already has a tag with the same key, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTAddTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, and rules.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a resource already has a tag with the same key, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsInput addTagsInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateListener
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createListenerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateListenerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateListenerInput createListenerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createListenerInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateListener";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateListenerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateListenerInput createListenerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateListener(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateListener(Async)");
        }

        return pOSTCreateListenerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createListenerInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\&quot;&gt;Listeners for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\&quot;&gt;Listeners for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html\&quot;&gt;Listeners for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createListenerInput  (optional)
     * @return CreateListenerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public CreateListenerOutput pOSTCreateListener(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateListenerInput createListenerInput) throws ApiException {
        ApiResponse<CreateListenerOutput> localVarResp = pOSTCreateListenerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createListenerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\&quot;&gt;Listeners for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\&quot;&gt;Listeners for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html\&quot;&gt;Listeners for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createListenerInput  (optional)
     * @return ApiResponse&lt;CreateListenerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateListenerOutput> pOSTCreateListenerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateListenerInput createListenerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateListenerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createListenerInput, null);
        Type localVarReturnType = new TypeToken<CreateListenerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\&quot;&gt;Listeners for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\&quot;&gt;Listeners for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html\&quot;&gt;Listeners for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createListenerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateListenerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateListenerInput createListenerInput, final ApiCallback<CreateListenerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateListenerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createListenerInput, _callback);
        Type localVarReturnType = new TypeToken<CreateListenerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateLoadBalancer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateLoadBalancerNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyLoadBalancersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLoadBalancerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerInput createLoadBalancerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLoadBalancerInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateLoadBalancerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerInput createLoadBalancerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateLoadBalancer(Async)");
        }

        return pOSTCreateLoadBalancerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html\&quot;&gt;Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html\&quot;&gt;Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html\&quot;&gt;Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerInput  (optional)
     * @return CreateLoadBalancerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateLoadBalancerNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyLoadBalancersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public CreateLoadBalancerOutput pOSTCreateLoadBalancer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerInput createLoadBalancerInput) throws ApiException {
        ApiResponse<CreateLoadBalancerOutput> localVarResp = pOSTCreateLoadBalancerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html\&quot;&gt;Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html\&quot;&gt;Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html\&quot;&gt;Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerInput  (optional)
     * @return ApiResponse&lt;CreateLoadBalancerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateLoadBalancerNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyLoadBalancersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLoadBalancerOutput> pOSTCreateLoadBalancerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerInput createLoadBalancerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerInput, null);
        Type localVarReturnType = new TypeToken<CreateLoadBalancerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html\&quot;&gt;Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html\&quot;&gt;Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html\&quot;&gt;Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLoadBalancerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateLoadBalancerNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyLoadBalancersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemeException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DuplicateTagKeysException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLoadBalancerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLoadBalancerInput createLoadBalancerInput, final ApiCallback<CreateLoadBalancerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLoadBalancerInput, _callback);
        Type localVarReturnType = new TypeToken<CreateLoadBalancerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateRule
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createRuleInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRulesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateRuleCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateRuleInput createRuleInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRuleInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateRuleValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateRuleInput createRuleInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateRule(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateRule(Async)");
        }

        return pOSTCreateRuleCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createRuleInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.&lt;/p&gt; &lt;p&gt;Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createRuleInput  (optional)
     * @return CreateRuleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRulesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRuleOutput pOSTCreateRule(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateRuleInput createRuleInput) throws ApiException {
        ApiResponse<CreateRuleOutput> localVarResp = pOSTCreateRuleWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createRuleInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.&lt;/p&gt; &lt;p&gt;Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createRuleInput  (optional)
     * @return ApiResponse&lt;CreateRuleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRulesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRuleOutput> pOSTCreateRuleWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateRuleInput createRuleInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateRuleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createRuleInput, null);
        Type localVarReturnType = new TypeToken<CreateRuleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.&lt;/p&gt; &lt;p&gt;Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules\&quot;&gt;Listener rules&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createRuleInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRulesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateRuleAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateRuleInput createRuleInput, final ApiCallback<CreateRuleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateRuleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createRuleInput, _callback);
        Type localVarReturnType = new TypeToken<CreateRuleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateTargetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createTargetGroupInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTargetGroupNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateTargetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTargetGroupInput createTargetGroupInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTargetGroupInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateTargetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateTargetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTargetGroupInput createTargetGroupInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateTargetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateTargetGroup(Async)");
        }

        return pOSTCreateTargetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTargetGroupInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html\&quot;&gt;Target groups for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html\&quot;&gt;Target groups for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html\&quot;&gt;Target groups for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createTargetGroupInput  (optional)
     * @return CreateTargetGroupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTargetGroupNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public CreateTargetGroupOutput pOSTCreateTargetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTargetGroupInput createTargetGroupInput) throws ApiException {
        ApiResponse<CreateTargetGroupOutput> localVarResp = pOSTCreateTargetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTargetGroupInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html\&quot;&gt;Target groups for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html\&quot;&gt;Target groups for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html\&quot;&gt;Target groups for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createTargetGroupInput  (optional)
     * @return ApiResponse&lt;CreateTargetGroupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTargetGroupNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTargetGroupOutput> pOSTCreateTargetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTargetGroupInput createTargetGroupInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateTargetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTargetGroupInput, null);
        Type localVarReturnType = new TypeToken<CreateTargetGroupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html\&quot;&gt;Target groups for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html\&quot;&gt;Target groups for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html\&quot;&gt;Target groups for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createTargetGroupInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateTargetGroupNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetGroupsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateTargetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTargetGroupInput createTargetGroupInput, final ApiCallback<CreateTargetGroupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateTargetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTargetGroupInput, _callback);
        Type localVarReturnType = new TypeToken<CreateTargetGroupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteListener
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteListenerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteListenerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteListenerInput deleteListenerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteListenerInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteListener";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteListenerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteListenerInput deleteListenerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteListener(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteListener(Async)");
        }

        return pOSTDeleteListenerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteListenerInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified listener.&lt;/p&gt; &lt;p&gt;Alternatively, your listener is deleted when you delete the load balancer to which it is attached.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteListenerInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteListener(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteListenerInput deleteListenerInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteListenerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteListenerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified listener.&lt;/p&gt; &lt;p&gt;Alternatively, your listener is deleted when you delete the load balancer to which it is attached.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteListenerInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteListenerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteListenerInput deleteListenerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteListenerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteListenerInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified listener.&lt;/p&gt; &lt;p&gt;Alternatively, your listener is deleted when you delete the load balancer to which it is attached.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteListenerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteListenerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteListenerInput deleteListenerInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteListenerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteListenerInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteLoadBalancer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLoadBalancerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerInput deleteLoadBalancerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteLoadBalancerInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLoadBalancer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteLoadBalancerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerInput deleteLoadBalancerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteLoadBalancer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteLoadBalancer(Async)");
        }

        return pOSTDeleteLoadBalancerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.&lt;/p&gt; &lt;p&gt;Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteLoadBalancer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerInput deleteLoadBalancerInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteLoadBalancerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.&lt;/p&gt; &lt;p&gt;Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteLoadBalancerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerInput deleteLoadBalancerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.&lt;/p&gt; &lt;p&gt;Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLoadBalancerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLoadBalancerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLoadBalancerInput deleteLoadBalancerInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteLoadBalancerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLoadBalancerInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteRule
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteRuleInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteRuleCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteRuleInput deleteRuleInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRuleInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteRuleValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteRuleInput deleteRuleInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteRule(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteRule(Async)");
        }

        return pOSTDeleteRuleCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteRuleInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified rule.&lt;/p&gt; &lt;p&gt;You can&#39;t delete the default rule.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteRuleInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteRule(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteRuleInput deleteRuleInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteRuleWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteRuleInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified rule.&lt;/p&gt; &lt;p&gt;You can&#39;t delete the default rule.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteRuleInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteRuleWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteRuleInput deleteRuleInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteRuleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteRuleInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified rule.&lt;/p&gt; &lt;p&gt;You can&#39;t delete the default rule.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteRuleInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteRuleAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteRuleInput deleteRuleInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteRuleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteRuleInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteTargetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTargetGroupInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteTargetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTargetGroupInput deleteTargetGroupInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTargetGroupInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteTargetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteTargetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTargetGroupInput deleteTargetGroupInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteTargetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteTargetGroup(Async)");
        }

        return pOSTDeleteTargetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTargetGroupInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified target group.&lt;/p&gt; &lt;p&gt;You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTargetGroupInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteTargetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTargetGroupInput deleteTargetGroupInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteTargetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTargetGroupInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified target group.&lt;/p&gt; &lt;p&gt;You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTargetGroupInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteTargetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTargetGroupInput deleteTargetGroupInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteTargetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTargetGroupInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified target group.&lt;/p&gt; &lt;p&gt;You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTargetGroupInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteTargetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTargetGroupInput deleteTargetGroupInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteTargetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTargetGroupInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeregisterTargets
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterTargetsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTargetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeregisterTargetsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTargetsInput deregisterTargetsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deregisterTargetsInput;

        // create path and map variables
        String localVarPath = "/#Action=DeregisterTargets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeregisterTargetsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTargetsInput deregisterTargetsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeregisterTargets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeregisterTargets(Async)");
        }

        return pOSTDeregisterTargetsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterTargetsInput, _callback);

    }

    /**
     * 
     * Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterTargetsInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTargetException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeregisterTargets(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTargetsInput deregisterTargetsInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeregisterTargetsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterTargetsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterTargetsInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTargetException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeregisterTargetsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTargetsInput deregisterTargetsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeregisterTargetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterTargetsInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterTargetsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTargetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeregisterTargetsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTargetsInput deregisterTargetsInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeregisterTargetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterTargetsInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAccountLimits
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAccountLimitsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountLimitsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAccountLimitsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAccountLimitsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAccountLimits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAccountLimits(Async)");
        }

        return pOSTDescribeAccountLimitsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountLimitsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html\&quot;&gt;Quotas for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html\&quot;&gt;Quotas for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html\&quot;&gt;Quotas for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAccountLimitsInput  (optional)
     * @return DescribeAccountLimitsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountLimitsOutput pOSTDescribeAccountLimits(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput) throws ApiException {
        ApiResponse<DescribeAccountLimitsOutput> localVarResp = pOSTDescribeAccountLimitsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountLimitsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html\&quot;&gt;Quotas for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html\&quot;&gt;Quotas for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html\&quot;&gt;Quotas for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAccountLimitsInput  (optional)
     * @return ApiResponse&lt;DescribeAccountLimitsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountLimitsOutput> pOSTDescribeAccountLimitsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountLimitsInput, null);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html\&quot;&gt;Quotas for your Application Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html\&quot;&gt;Quotas for your Network Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html\&quot;&gt;Quotas for your Gateway Load Balancers&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAccountLimitsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountLimitsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAccountLimitsInput describeAccountLimitsInput, final ApiCallback<DescribeAccountLimitsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountLimitsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeListenerCertificates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeListenerCertificatesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeListenerCertificatesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeListenerCertificatesInput describeListenerCertificatesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeListenerCertificatesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeListenerCertificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeListenerCertificatesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeListenerCertificatesInput describeListenerCertificatesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeListenerCertificates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeListenerCertificates(Async)");
        }

        return pOSTDescribeListenerCertificatesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeListenerCertificatesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the default certificate is also in the certificate list, it appears twice in the results (once with &lt;code&gt;IsDefault&lt;/code&gt; set to true and once with &lt;code&gt;IsDefault&lt;/code&gt; set to false).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates\&quot;&gt;SSL certificates&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate\&quot;&gt;Server certificates&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeListenerCertificatesInput  (optional)
     * @return DescribeListenerCertificatesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeListenerCertificatesOutput pOSTDescribeListenerCertificates(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeListenerCertificatesInput describeListenerCertificatesInput) throws ApiException {
        ApiResponse<DescribeListenerCertificatesOutput> localVarResp = pOSTDescribeListenerCertificatesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeListenerCertificatesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the default certificate is also in the certificate list, it appears twice in the results (once with &lt;code&gt;IsDefault&lt;/code&gt; set to true and once with &lt;code&gt;IsDefault&lt;/code&gt; set to false).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates\&quot;&gt;SSL certificates&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate\&quot;&gt;Server certificates&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeListenerCertificatesInput  (optional)
     * @return ApiResponse&lt;DescribeListenerCertificatesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeListenerCertificatesOutput> pOSTDescribeListenerCertificatesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeListenerCertificatesInput describeListenerCertificatesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeListenerCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeListenerCertificatesInput, null);
        Type localVarReturnType = new TypeToken<DescribeListenerCertificatesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.&lt;/p&gt; &lt;p&gt;If the default certificate is also in the certificate list, it appears twice in the results (once with &lt;code&gt;IsDefault&lt;/code&gt; set to true and once with &lt;code&gt;IsDefault&lt;/code&gt; set to false).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates\&quot;&gt;SSL certificates&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate\&quot;&gt;Server certificates&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeListenerCertificatesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeListenerCertificatesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeListenerCertificatesInput describeListenerCertificatesInput, final ApiCallback<DescribeListenerCertificatesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeListenerCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeListenerCertificatesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeListenerCertificatesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeListeners
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeListenersInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeListenersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeListenersInput describeListenersInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeListenersInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeListeners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeListenersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeListenersInput describeListenersInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeListeners(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeListeners(Async)");
        }

        return pOSTDescribeListenersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeListenersInput, _callback);

    }

    /**
     * 
     * Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeListenersInput  (optional)
     * @return DescribeListenersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeListenersOutput pOSTDescribeListeners(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeListenersInput describeListenersInput) throws ApiException {
        ApiResponse<DescribeListenersOutput> localVarResp = pOSTDescribeListenersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeListenersInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeListenersInput  (optional)
     * @return ApiResponse&lt;DescribeListenersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeListenersOutput> pOSTDescribeListenersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeListenersInput describeListenersInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeListenersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeListenersInput, null);
        Type localVarReturnType = new TypeToken<DescribeListenersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeListenersInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeListenersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeListenersInput describeListenersInput, final ApiCallback<DescribeListenersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeListenersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeListenersInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeListenersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLoadBalancerAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeLoadBalancerAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLoadBalancerAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancerAttributes(Async)");
        }

        return pOSTDescribeLoadBalancerAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerAttributesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerAttributesInput  (optional)
     * @return DescribeLoadBalancerAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerAttributesOutput pOSTDescribeLoadBalancerAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput) throws ApiException {
        ApiResponse<DescribeLoadBalancerAttributesOutput> localVarResp = pOSTDescribeLoadBalancerAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerAttributesInput  (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerAttributesOutput> pOSTDescribeLoadBalancerAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerAttributesInput, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes\&quot;&gt;Load balancer attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerAttributesInput describeLoadBalancerAttributesInput, final ApiCallback<DescribeLoadBalancerAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLoadBalancers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeLoadBalancersInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeLoadBalancersInput describeLoadBalancersInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeLoadBalancersInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLoadBalancersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeLoadBalancersInput describeLoadBalancersInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancers(Async)");
        }

        return pOSTDescribeLoadBalancersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeLoadBalancersInput, _callback);

    }

    /**
     * 
     * Describes the specified load balancers or all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeLoadBalancersInput  (optional)
     * @return DescribeLoadBalancersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancersOutput pOSTDescribeLoadBalancers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeLoadBalancersInput describeLoadBalancersInput) throws ApiException {
        ApiResponse<DescribeLoadBalancersOutput> localVarResp = pOSTDescribeLoadBalancersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeLoadBalancersInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified load balancers or all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeLoadBalancersInput  (optional)
     * @return ApiResponse&lt;DescribeLoadBalancersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancersOutput> pOSTDescribeLoadBalancersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeLoadBalancersInput describeLoadBalancersInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeLoadBalancersInput, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified load balancers or all of your load balancers.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeLoadBalancersInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeLoadBalancersInput describeLoadBalancersInput, final ApiCallback<DescribeLoadBalancersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeLoadBalancersInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeRules
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeRulesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeRulesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeRulesInput describeRulesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeRulesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeRulesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeRulesInput describeRulesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeRules(Async)");
        }

        return pOSTDescribeRulesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeRulesInput, _callback);

    }

    /**
     * 
     * Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeRulesInput  (optional)
     * @return DescribeRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeRulesOutput pOSTDescribeRules(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeRulesInput describeRulesInput) throws ApiException {
        ApiResponse<DescribeRulesOutput> localVarResp = pOSTDescribeRulesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeRulesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeRulesInput  (optional)
     * @return ApiResponse&lt;DescribeRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeRulesOutput> pOSTDescribeRulesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeRulesInput describeRulesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeRulesInput, null);
        Type localVarReturnType = new TypeToken<DescribeRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeRulesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeRulesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeRulesInput describeRulesInput, final ApiCallback<DescribeRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeRulesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeSSLPolicies
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeSSLPoliciesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeSSLPoliciesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeSSLPoliciesInput describeSSLPoliciesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeSSLPoliciesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeSSLPolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeSSLPoliciesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeSSLPoliciesInput describeSSLPoliciesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeSSLPolicies(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeSSLPolicies(Async)");
        }

        return pOSTDescribeSSLPoliciesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeSSLPoliciesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the specified policies or all policies used for SSL negotiation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeSSLPoliciesInput  (optional)
     * @return DescribeSSLPoliciesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSSLPoliciesOutput pOSTDescribeSSLPolicies(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeSSLPoliciesInput describeSSLPoliciesInput) throws ApiException {
        ApiResponse<DescribeSSLPoliciesOutput> localVarResp = pOSTDescribeSSLPoliciesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeSSLPoliciesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the specified policies or all policies used for SSL negotiation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeSSLPoliciesInput  (optional)
     * @return ApiResponse&lt;DescribeSSLPoliciesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSSLPoliciesOutput> pOSTDescribeSSLPoliciesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeSSLPoliciesInput describeSSLPoliciesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeSSLPoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeSSLPoliciesInput, null);
        Type localVarReturnType = new TypeToken<DescribeSSLPoliciesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the specified policies or all policies used for SSL negotiation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\&quot;&gt;Security policies&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeSSLPoliciesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeSSLPoliciesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeSSLPoliciesInput describeSSLPoliciesInput, final ApiCallback<DescribeSSLPoliciesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeSSLPoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeSSLPoliciesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeSSLPoliciesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTagsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTagsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeTags(Async)");
        }

        return pOSTDescribeTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTagsInput, _callback);

    }

    /**
     * 
     * Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTagsInput  (optional)
     * @return DescribeTagsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTagsOutput pOSTDescribeTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput) throws ApiException {
        ApiResponse<DescribeTagsOutput> localVarResp = pOSTDescribeTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTagsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTagsInput  (optional)
     * @return ApiResponse&lt;DescribeTagsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTagsOutput> pOSTDescribeTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTagsInput, null);
        Type localVarReturnType = new TypeToken<DescribeTagsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTagsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTagsInput describeTagsInput, final ApiCallback<DescribeTagsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTagsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeTagsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeTargetGroupAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTargetGroupAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTargetGroupAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetGroupAttributesInput describeTargetGroupAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTargetGroupAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTargetGroupAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTargetGroupAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetGroupAttributesInput describeTargetGroupAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeTargetGroupAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeTargetGroupAttributes(Async)");
        }

        return pOSTDescribeTargetGroupAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetGroupAttributesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the attributes for the specified target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTargetGroupAttributesInput  (optional)
     * @return DescribeTargetGroupAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTargetGroupAttributesOutput pOSTDescribeTargetGroupAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetGroupAttributesInput describeTargetGroupAttributesInput) throws ApiException {
        ApiResponse<DescribeTargetGroupAttributesOutput> localVarResp = pOSTDescribeTargetGroupAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetGroupAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the attributes for the specified target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTargetGroupAttributesInput  (optional)
     * @return ApiResponse&lt;DescribeTargetGroupAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTargetGroupAttributesOutput> pOSTDescribeTargetGroupAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetGroupAttributesInput describeTargetGroupAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTargetGroupAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetGroupAttributesInput, null);
        Type localVarReturnType = new TypeToken<DescribeTargetGroupAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the attributes for the specified target group.&lt;/p&gt; &lt;p&gt;For more information, see the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Application Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Network Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes\&quot;&gt;Target group attributes&lt;/a&gt; in the &lt;i&gt;Gateway Load Balancers Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTargetGroupAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTargetGroupAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetGroupAttributesInput describeTargetGroupAttributesInput, final ApiCallback<DescribeTargetGroupAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTargetGroupAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetGroupAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeTargetGroupAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeTargetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeTargetGroupsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTargetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeTargetGroupsInput describeTargetGroupsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTargetGroupsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTargetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTargetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeTargetGroupsInput describeTargetGroupsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeTargetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeTargetGroups(Async)");
        }

        return pOSTDescribeTargetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeTargetGroupsInput, _callback);

    }

    /**
     * 
     * Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeTargetGroupsInput  (optional)
     * @return DescribeTargetGroupsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTargetGroupsOutput pOSTDescribeTargetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeTargetGroupsInput describeTargetGroupsInput) throws ApiException {
        ApiResponse<DescribeTargetGroupsOutput> localVarResp = pOSTDescribeTargetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeTargetGroupsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeTargetGroupsInput  (optional)
     * @return ApiResponse&lt;DescribeTargetGroupsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTargetGroupsOutput> pOSTDescribeTargetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeTargetGroupsInput describeTargetGroupsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeTargetGroupsInput, null);
        Type localVarReturnType = new TypeToken<DescribeTargetGroupsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Pagination token (optional)
     * @param describeTargetGroupsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTargetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, DescribeTargetGroupsInput describeTargetGroupsInput, final ApiCallback<DescribeTargetGroupsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, describeTargetGroupsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeTargetGroupsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeTargetHealth
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTargetHealthInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTargetHealthCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetHealthInput describeTargetHealthInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTargetHealthInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTargetHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTargetHealthValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetHealthInput describeTargetHealthInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeTargetHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeTargetHealth(Async)");
        }

        return pOSTDescribeTargetHealthCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetHealthInput, _callback);

    }

    /**
     * 
     * Describes the health of the specified targets or all of your targets.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTargetHealthInput  (optional)
     * @return DescribeTargetHealthOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTargetHealthOutput pOSTDescribeTargetHealth(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetHealthInput describeTargetHealthInput) throws ApiException {
        ApiResponse<DescribeTargetHealthOutput> localVarResp = pOSTDescribeTargetHealthWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetHealthInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the health of the specified targets or all of your targets.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTargetHealthInput  (optional)
     * @return ApiResponse&lt;DescribeTargetHealthOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTargetHealthOutput> pOSTDescribeTargetHealthWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetHealthInput describeTargetHealthInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTargetHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetHealthInput, null);
        Type localVarReturnType = new TypeToken<DescribeTargetHealthOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the health of the specified targets or all of your targets.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTargetHealthInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> HealthUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTargetHealthAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTargetHealthInput describeTargetHealthInput, final ApiCallback<DescribeTargetHealthOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTargetHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTargetHealthInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeTargetHealthOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyListener
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyListenerInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyListenerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyListenerInput modifyListenerInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyListenerInput;

        // create path and map variables
        String localVarPath = "/#Action=ModifyListener";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyListenerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyListenerInput modifyListenerInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyListener(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyListener(Async)");
        }

        return pOSTModifyListenerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyListenerInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.&lt;/p&gt; &lt;p&gt;Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyListenerInput  (optional)
     * @return ModifyListenerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyListenerOutput pOSTModifyListener(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyListenerInput modifyListenerInput) throws ApiException {
        ApiResponse<ModifyListenerOutput> localVarResp = pOSTModifyListenerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyListenerInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.&lt;/p&gt; &lt;p&gt;Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyListenerInput  (optional)
     * @return ApiResponse&lt;ModifyListenerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyListenerOutput> pOSTModifyListenerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyListenerInput modifyListenerInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyListenerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyListenerInput, null);
        Type localVarReturnType = new TypeToken<ModifyListenerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.&lt;/p&gt; &lt;p&gt;Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyListenerInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateListenerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyListenersException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCertificatesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SSLPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ALPNPolicyNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyListenerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyListenerInput modifyListenerInput, final ApiCallback<ModifyListenerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyListenerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyListenerInput, _callback);
        Type localVarReturnType = new TypeToken<ModifyListenerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyLoadBalancerAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyLoadBalancerAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyLoadBalancerAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyLoadBalancerAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=ModifyLoadBalancerAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyLoadBalancerAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyLoadBalancerAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyLoadBalancerAttributes(Async)");
        }

        return pOSTModifyLoadBalancerAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyLoadBalancerAttributesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;If any of the specified attributes can&#39;t be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyLoadBalancerAttributesInput  (optional)
     * @return ModifyLoadBalancerAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyLoadBalancerAttributesOutput pOSTModifyLoadBalancerAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput) throws ApiException {
        ApiResponse<ModifyLoadBalancerAttributesOutput> localVarResp = pOSTModifyLoadBalancerAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyLoadBalancerAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;If any of the specified attributes can&#39;t be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyLoadBalancerAttributesInput  (optional)
     * @return ApiResponse&lt;ModifyLoadBalancerAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyLoadBalancerAttributesOutput> pOSTModifyLoadBalancerAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyLoadBalancerAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyLoadBalancerAttributesInput, null);
        Type localVarReturnType = new TypeToken<ModifyLoadBalancerAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.&lt;/p&gt; &lt;p&gt;If any of the specified attributes can&#39;t be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyLoadBalancerAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyLoadBalancerAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyLoadBalancerAttributesInput modifyLoadBalancerAttributesInput, final ApiCallback<ModifyLoadBalancerAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyLoadBalancerAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyLoadBalancerAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<ModifyLoadBalancerAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyRule
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyRuleInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyRuleCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyRuleInput modifyRuleInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyRuleInput;

        // create path and map variables
        String localVarPath = "/#Action=ModifyRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyRuleValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyRuleInput modifyRuleInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyRule(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyRule(Async)");
        }

        return pOSTModifyRuleCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyRuleInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyRuleInput  (optional)
     * @return ModifyRuleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyRuleOutput pOSTModifyRule(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyRuleInput modifyRuleInput) throws ApiException {
        ApiResponse<ModifyRuleOutput> localVarResp = pOSTModifyRuleWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyRuleInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyRuleInput  (optional)
     * @return ApiResponse&lt;ModifyRuleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyRuleOutput> pOSTModifyRuleWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyRuleInput modifyRuleInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyRuleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyRuleInput, null);
        Type localVarReturnType = new TypeToken<ModifyRuleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.&lt;/p&gt; &lt;p&gt;To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyRuleInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupAssociationLimitException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IncompatibleProtocolsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedProtocolException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyActionsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLoadBalancerActionException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyUniqueTargetGroupsPerLoadBalancerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyRuleAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyRuleInput modifyRuleInput, final ApiCallback<ModifyRuleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyRuleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyRuleInput, _callback);
        Type localVarReturnType = new TypeToken<ModifyRuleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyTargetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyTargetGroupInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyTargetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupInput modifyTargetGroupInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyTargetGroupInput;

        // create path and map variables
        String localVarPath = "/#Action=ModifyTargetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyTargetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupInput modifyTargetGroupInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyTargetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyTargetGroup(Async)");
        }

        return pOSTModifyTargetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupInput, _callback);

    }

    /**
     * 
     * Modifies the health checks used when evaluating the health state of the targets in the specified target group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyTargetGroupInput  (optional)
     * @return ModifyTargetGroupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyTargetGroupOutput pOSTModifyTargetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupInput modifyTargetGroupInput) throws ApiException {
        ApiResponse<ModifyTargetGroupOutput> localVarResp = pOSTModifyTargetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the health checks used when evaluating the health state of the targets in the specified target group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyTargetGroupInput  (optional)
     * @return ApiResponse&lt;ModifyTargetGroupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyTargetGroupOutput> pOSTModifyTargetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupInput modifyTargetGroupInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyTargetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupInput, null);
        Type localVarReturnType = new TypeToken<ModifyTargetGroupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the health checks used when evaluating the health state of the targets in the specified target group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyTargetGroupInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyTargetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupInput modifyTargetGroupInput, final ApiCallback<ModifyTargetGroupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyTargetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupInput, _callback);
        Type localVarReturnType = new TypeToken<ModifyTargetGroupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyTargetGroupAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyTargetGroupAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyTargetGroupAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupAttributesInput modifyTargetGroupAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyTargetGroupAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=ModifyTargetGroupAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyTargetGroupAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupAttributesInput modifyTargetGroupAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyTargetGroupAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyTargetGroupAttributes(Async)");
        }

        return pOSTModifyTargetGroupAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupAttributesInput, _callback);

    }

    /**
     * 
     * Modifies the specified attributes of the specified target group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyTargetGroupAttributesInput  (optional)
     * @return ModifyTargetGroupAttributesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyTargetGroupAttributesOutput pOSTModifyTargetGroupAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupAttributesInput modifyTargetGroupAttributesInput) throws ApiException {
        ApiResponse<ModifyTargetGroupAttributesOutput> localVarResp = pOSTModifyTargetGroupAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the specified attributes of the specified target group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyTargetGroupAttributesInput  (optional)
     * @return ApiResponse&lt;ModifyTargetGroupAttributesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyTargetGroupAttributesOutput> pOSTModifyTargetGroupAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupAttributesInput modifyTargetGroupAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyTargetGroupAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupAttributesInput, null);
        Type localVarReturnType = new TypeToken<ModifyTargetGroupAttributesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the specified attributes of the specified target group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyTargetGroupAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyTargetGroupAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyTargetGroupAttributesInput modifyTargetGroupAttributesInput, final ApiCallback<ModifyTargetGroupAttributesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyTargetGroupAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyTargetGroupAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<ModifyTargetGroupAttributesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRegisterTargets
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerTargetsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRegisterTargetsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTargetsInput registerTargetsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerTargetsInput;

        // create path and map variables
        String localVarPath = "/#Action=RegisterTargets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRegisterTargetsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTargetsInput registerTargetsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRegisterTargets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRegisterTargets(Async)");
        }

        return pOSTRegisterTargetsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerTargetsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Registers the specified targets with the specified target group.&lt;/p&gt; &lt;p&gt;If the target is an EC2 instance, it must be in the &lt;code&gt;running&lt;/code&gt; state when you register it.&lt;/p&gt; &lt;p&gt;By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.&lt;/p&gt; &lt;p&gt;With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerTargetsInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTRegisterTargets(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTargetsInput registerTargetsInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTRegisterTargetsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerTargetsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Registers the specified targets with the specified target group.&lt;/p&gt; &lt;p&gt;If the target is an EC2 instance, it must be in the &lt;code&gt;running&lt;/code&gt; state when you register it.&lt;/p&gt; &lt;p&gt;By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.&lt;/p&gt; &lt;p&gt;With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerTargetsInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTRegisterTargetsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTargetsInput registerTargetsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRegisterTargetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerTargetsInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Registers the specified targets with the specified target group.&lt;/p&gt; &lt;p&gt;If the target is an EC2 instance, it must be in the &lt;code&gt;running&lt;/code&gt; state when you register it.&lt;/p&gt; &lt;p&gt;By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.&lt;/p&gt; &lt;p&gt;With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerTargetsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyTargetsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTargetException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRegistrationsForTargetIdException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRegisterTargetsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTargetsInput registerTargetsInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRegisterTargetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerTargetsInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveListenerCertificates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeListenerCertificatesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveListenerCertificatesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveListenerCertificatesInput removeListenerCertificatesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeListenerCertificatesInput;

        // create path and map variables
        String localVarPath = "/#Action=RemoveListenerCertificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveListenerCertificatesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveListenerCertificatesInput removeListenerCertificatesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveListenerCertificates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveListenerCertificates(Async)");
        }

        return pOSTRemoveListenerCertificatesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeListenerCertificatesInput, _callback);

    }

    /**
     * 
     * Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeListenerCertificatesInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTRemoveListenerCertificates(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveListenerCertificatesInput removeListenerCertificatesInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTRemoveListenerCertificatesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeListenerCertificatesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeListenerCertificatesInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTRemoveListenerCertificatesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveListenerCertificatesInput removeListenerCertificatesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveListenerCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeListenerCertificatesInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeListenerCertificatesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveListenerCertificatesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveListenerCertificatesInput removeListenerCertificatesInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveListenerCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeListenerCertificatesInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTagsInput;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveTags(Async)");
        }

        return pOSTRemoveTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsInput, _callback);

    }

    /**
     * 
     * Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTRemoveTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTRemoveTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTRemoveTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TargetGroupNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ListenerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsInput removeTagsInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetIpAddressType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setIpAddressTypeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetIpAddressTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetIpAddressTypeInput setIpAddressTypeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setIpAddressTypeInput;

        // create path and map variables
        String localVarPath = "/#Action=SetIpAddressType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetIpAddressTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetIpAddressTypeInput setIpAddressTypeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetIpAddressType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetIpAddressType(Async)");
        }

        return pOSTSetIpAddressTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setIpAddressTypeInput, _callback);

    }

    /**
     * 
     * Sets the type of IP addresses used by the subnets of the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setIpAddressTypeInput  (optional)
     * @return SetIpAddressTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public SetIpAddressTypeOutput pOSTSetIpAddressType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetIpAddressTypeInput setIpAddressTypeInput) throws ApiException {
        ApiResponse<SetIpAddressTypeOutput> localVarResp = pOSTSetIpAddressTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setIpAddressTypeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets the type of IP addresses used by the subnets of the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setIpAddressTypeInput  (optional)
     * @return ApiResponse&lt;SetIpAddressTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetIpAddressTypeOutput> pOSTSetIpAddressTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetIpAddressTypeInput setIpAddressTypeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetIpAddressTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setIpAddressTypeInput, null);
        Type localVarReturnType = new TypeToken<SetIpAddressTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets the type of IP addresses used by the subnets of the specified load balancer.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setIpAddressTypeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetIpAddressTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetIpAddressTypeInput setIpAddressTypeInput, final ApiCallback<SetIpAddressTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetIpAddressTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setIpAddressTypeInput, _callback);
        Type localVarReturnType = new TypeToken<SetIpAddressTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetRulePriorities
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setRulePrioritiesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetRulePrioritiesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetRulePrioritiesInput setRulePrioritiesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setRulePrioritiesInput;

        // create path and map variables
        String localVarPath = "/#Action=SetRulePriorities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetRulePrioritiesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetRulePrioritiesInput setRulePrioritiesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetRulePriorities(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetRulePriorities(Async)");
        }

        return pOSTSetRulePrioritiesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setRulePrioritiesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the priorities of the specified rules.&lt;/p&gt; &lt;p&gt;You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setRulePrioritiesInput  (optional)
     * @return SetRulePrioritiesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public SetRulePrioritiesOutput pOSTSetRulePriorities(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetRulePrioritiesInput setRulePrioritiesInput) throws ApiException {
        ApiResponse<SetRulePrioritiesOutput> localVarResp = pOSTSetRulePrioritiesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setRulePrioritiesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the priorities of the specified rules.&lt;/p&gt; &lt;p&gt;You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setRulePrioritiesInput  (optional)
     * @return ApiResponse&lt;SetRulePrioritiesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetRulePrioritiesOutput> pOSTSetRulePrioritiesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetRulePrioritiesInput setRulePrioritiesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetRulePrioritiesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setRulePrioritiesInput, null);
        Type localVarReturnType = new TypeToken<SetRulePrioritiesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the priorities of the specified rules.&lt;/p&gt; &lt;p&gt;You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setRulePrioritiesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RuleNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PriorityInUseException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetRulePrioritiesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetRulePrioritiesInput setRulePrioritiesInput, final ApiCallback<SetRulePrioritiesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetRulePrioritiesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setRulePrioritiesInput, _callback);
        Type localVarReturnType = new TypeToken<SetRulePrioritiesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetSecurityGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSecurityGroupsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetSecurityGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSecurityGroupsInput setSecurityGroupsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setSecurityGroupsInput;

        // create path and map variables
        String localVarPath = "/#Action=SetSecurityGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetSecurityGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSecurityGroupsInput setSecurityGroupsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetSecurityGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetSecurityGroups(Async)");
        }

        return pOSTSetSecurityGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSecurityGroupsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;You can&#39;t specify a security group for a Network Load Balancer or Gateway Load Balancer.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSecurityGroupsInput  (optional)
     * @return SetSecurityGroupsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public SetSecurityGroupsOutput pOSTSetSecurityGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSecurityGroupsInput setSecurityGroupsInput) throws ApiException {
        ApiResponse<SetSecurityGroupsOutput> localVarResp = pOSTSetSecurityGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSecurityGroupsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;You can&#39;t specify a security group for a Network Load Balancer or Gateway Load Balancer.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSecurityGroupsInput  (optional)
     * @return ApiResponse&lt;SetSecurityGroupsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetSecurityGroupsOutput> pOSTSetSecurityGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSecurityGroupsInput setSecurityGroupsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetSecurityGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSecurityGroupsInput, null);
        Type localVarReturnType = new TypeToken<SetSecurityGroupsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.&lt;/p&gt; &lt;p&gt;You can&#39;t specify a security group for a Network Load Balancer or Gateway Load Balancer.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSecurityGroupsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidSecurityGroupException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetSecurityGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSecurityGroupsInput setSecurityGroupsInput, final ApiCallback<SetSecurityGroupsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetSecurityGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSecurityGroupsInput, _callback);
        Type localVarReturnType = new TypeToken<SetSecurityGroupsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetSubnets
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSubnetsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetSubnetsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubnetsInput setSubnetsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setSubnetsInput;

        // create path and map variables
        String localVarPath = "/#Action=SetSubnets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetSubnetsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubnetsInput setSubnetsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetSubnets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetSubnets(Async)");
        }

        return pOSTSetSubnetsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubnetsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer or Network Load Balancer. The specified subnets replace the previously enabled subnets.&lt;/p&gt; &lt;p&gt;When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSubnetsInput  (optional)
     * @return SetSubnetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public SetSubnetsOutput pOSTSetSubnets(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubnetsInput setSubnetsInput) throws ApiException {
        ApiResponse<SetSubnetsOutput> localVarResp = pOSTSetSubnetsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubnetsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer or Network Load Balancer. The specified subnets replace the previously enabled subnets.&lt;/p&gt; &lt;p&gt;When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSubnetsInput  (optional)
     * @return ApiResponse&lt;SetSubnetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetSubnetsOutput> pOSTSetSubnetsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubnetsInput setSubnetsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetSubnetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubnetsInput, null);
        Type localVarReturnType = new TypeToken<SetSubnetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer or Network Load Balancer. The specified subnets replace the previously enabled subnets.&lt;/p&gt; &lt;p&gt;When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSubnetsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LoadBalancerNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidConfigurationRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AllocationIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AvailabilityZoneNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetSubnetsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubnetsInput setSubnetsInput, final ApiCallback<SetSubnetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetSubnetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubnetsInput, _callback);
        Type localVarReturnType = new TypeToken<SetSubnetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
