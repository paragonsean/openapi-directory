/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ActionAuthenticateCognitoConfig;
import org.openapitools.client.model.ActionAuthenticateOidcConfig;
import org.openapitools.client.model.ActionFixedResponseConfig;
import org.openapitools.client.model.ActionForwardConfig;
import org.openapitools.client.model.ActionRedirectConfig;
import org.openapitools.client.model.ActionTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Information about an action.&lt;/p&gt; &lt;p&gt;Each rule must include exactly one of the following types of actions: &lt;code&gt;forward&lt;/code&gt;, &lt;code&gt;fixed-response&lt;/code&gt;, or &lt;code&gt;redirect&lt;/code&gt;, and it must be the last action to be performed.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:43.672707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Action {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ActionTypeEnum type;

  public static final String SERIALIZED_NAME_TARGET_GROUP_ARN = "TargetGroupArn";
  @SerializedName(SERIALIZED_NAME_TARGET_GROUP_ARN)
  private String targetGroupArn;

  public static final String SERIALIZED_NAME_AUTHENTICATE_OIDC_CONFIG = "AuthenticateOidcConfig";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATE_OIDC_CONFIG)
  private ActionAuthenticateOidcConfig authenticateOidcConfig;

  public static final String SERIALIZED_NAME_AUTHENTICATE_COGNITO_CONFIG = "AuthenticateCognitoConfig";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATE_COGNITO_CONFIG)
  private ActionAuthenticateCognitoConfig authenticateCognitoConfig;

  public static final String SERIALIZED_NAME_ORDER = "Order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_REDIRECT_CONFIG = "RedirectConfig";
  @SerializedName(SERIALIZED_NAME_REDIRECT_CONFIG)
  private ActionRedirectConfig redirectConfig;

  public static final String SERIALIZED_NAME_FIXED_RESPONSE_CONFIG = "FixedResponseConfig";
  @SerializedName(SERIALIZED_NAME_FIXED_RESPONSE_CONFIG)
  private ActionFixedResponseConfig fixedResponseConfig;

  public static final String SERIALIZED_NAME_FORWARD_CONFIG = "ForwardConfig";
  @SerializedName(SERIALIZED_NAME_FORWARD_CONFIG)
  private ActionForwardConfig forwardConfig;

  public Action() {
  }

  public Action type(ActionTypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ActionTypeEnum getType() {
    return type;
  }

  public void setType(ActionTypeEnum type) {
    this.type = type;
  }


  public Action targetGroupArn(String targetGroupArn) {
    this.targetGroupArn = targetGroupArn;
    return this;
  }

  /**
   * Get targetGroupArn
   * @return targetGroupArn
   */
  @javax.annotation.Nullable
  public String getTargetGroupArn() {
    return targetGroupArn;
  }

  public void setTargetGroupArn(String targetGroupArn) {
    this.targetGroupArn = targetGroupArn;
  }


  public Action authenticateOidcConfig(ActionAuthenticateOidcConfig authenticateOidcConfig) {
    this.authenticateOidcConfig = authenticateOidcConfig;
    return this;
  }

  /**
   * Get authenticateOidcConfig
   * @return authenticateOidcConfig
   */
  @javax.annotation.Nullable
  public ActionAuthenticateOidcConfig getAuthenticateOidcConfig() {
    return authenticateOidcConfig;
  }

  public void setAuthenticateOidcConfig(ActionAuthenticateOidcConfig authenticateOidcConfig) {
    this.authenticateOidcConfig = authenticateOidcConfig;
  }


  public Action authenticateCognitoConfig(ActionAuthenticateCognitoConfig authenticateCognitoConfig) {
    this.authenticateCognitoConfig = authenticateCognitoConfig;
    return this;
  }

  /**
   * Get authenticateCognitoConfig
   * @return authenticateCognitoConfig
   */
  @javax.annotation.Nullable
  public ActionAuthenticateCognitoConfig getAuthenticateCognitoConfig() {
    return authenticateCognitoConfig;
  }

  public void setAuthenticateCognitoConfig(ActionAuthenticateCognitoConfig authenticateCognitoConfig) {
    this.authenticateCognitoConfig = authenticateCognitoConfig;
  }


  public Action order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public Action redirectConfig(ActionRedirectConfig redirectConfig) {
    this.redirectConfig = redirectConfig;
    return this;
  }

  /**
   * Get redirectConfig
   * @return redirectConfig
   */
  @javax.annotation.Nullable
  public ActionRedirectConfig getRedirectConfig() {
    return redirectConfig;
  }

  public void setRedirectConfig(ActionRedirectConfig redirectConfig) {
    this.redirectConfig = redirectConfig;
  }


  public Action fixedResponseConfig(ActionFixedResponseConfig fixedResponseConfig) {
    this.fixedResponseConfig = fixedResponseConfig;
    return this;
  }

  /**
   * Get fixedResponseConfig
   * @return fixedResponseConfig
   */
  @javax.annotation.Nullable
  public ActionFixedResponseConfig getFixedResponseConfig() {
    return fixedResponseConfig;
  }

  public void setFixedResponseConfig(ActionFixedResponseConfig fixedResponseConfig) {
    this.fixedResponseConfig = fixedResponseConfig;
  }


  public Action forwardConfig(ActionForwardConfig forwardConfig) {
    this.forwardConfig = forwardConfig;
    return this;
  }

  /**
   * Get forwardConfig
   * @return forwardConfig
   */
  @javax.annotation.Nullable
  public ActionForwardConfig getForwardConfig() {
    return forwardConfig;
  }

  public void setForwardConfig(ActionForwardConfig forwardConfig) {
    this.forwardConfig = forwardConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Action action = (Action) o;
    return Objects.equals(this.type, action.type) &&
        Objects.equals(this.targetGroupArn, action.targetGroupArn) &&
        Objects.equals(this.authenticateOidcConfig, action.authenticateOidcConfig) &&
        Objects.equals(this.authenticateCognitoConfig, action.authenticateCognitoConfig) &&
        Objects.equals(this.order, action.order) &&
        Objects.equals(this.redirectConfig, action.redirectConfig) &&
        Objects.equals(this.fixedResponseConfig, action.fixedResponseConfig) &&
        Objects.equals(this.forwardConfig, action.forwardConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, targetGroupArn, authenticateOidcConfig, authenticateCognitoConfig, order, redirectConfig, fixedResponseConfig, forwardConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Action {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    targetGroupArn: ").append(toIndentedString(targetGroupArn)).append("\n");
    sb.append("    authenticateOidcConfig: ").append(toIndentedString(authenticateOidcConfig)).append("\n");
    sb.append("    authenticateCognitoConfig: ").append(toIndentedString(authenticateCognitoConfig)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    redirectConfig: ").append(toIndentedString(redirectConfig)).append("\n");
    sb.append("    fixedResponseConfig: ").append(toIndentedString(fixedResponseConfig)).append("\n");
    sb.append("    forwardConfig: ").append(toIndentedString(forwardConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("TargetGroupArn");
    openapiFields.add("AuthenticateOidcConfig");
    openapiFields.add("AuthenticateCognitoConfig");
    openapiFields.add("Order");
    openapiFields.add("RedirectConfig");
    openapiFields.add("FixedResponseConfig");
    openapiFields.add("ForwardConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Action
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Action.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Action is not found in the empty JSON string", Action.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Action.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Action` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Action.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Type`
      ActionTypeEnum.validateJsonElement(jsonObj.get("Type"));
      // validate the optional field `TargetGroupArn`
      if (jsonObj.get("TargetGroupArn") != null && !jsonObj.get("TargetGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetGroupArn"));
      }
      // validate the optional field `AuthenticateOidcConfig`
      if (jsonObj.get("AuthenticateOidcConfig") != null && !jsonObj.get("AuthenticateOidcConfig").isJsonNull()) {
        ActionAuthenticateOidcConfig.validateJsonElement(jsonObj.get("AuthenticateOidcConfig"));
      }
      // validate the optional field `AuthenticateCognitoConfig`
      if (jsonObj.get("AuthenticateCognitoConfig") != null && !jsonObj.get("AuthenticateCognitoConfig").isJsonNull()) {
        ActionAuthenticateCognitoConfig.validateJsonElement(jsonObj.get("AuthenticateCognitoConfig"));
      }
      // validate the optional field `Order`
      if (jsonObj.get("Order") != null && !jsonObj.get("Order").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Order"));
      }
      // validate the optional field `RedirectConfig`
      if (jsonObj.get("RedirectConfig") != null && !jsonObj.get("RedirectConfig").isJsonNull()) {
        ActionRedirectConfig.validateJsonElement(jsonObj.get("RedirectConfig"));
      }
      // validate the optional field `FixedResponseConfig`
      if (jsonObj.get("FixedResponseConfig") != null && !jsonObj.get("FixedResponseConfig").isJsonNull()) {
        ActionFixedResponseConfig.validateJsonElement(jsonObj.get("FixedResponseConfig"));
      }
      // validate the optional field `ForwardConfig`
      if (jsonObj.get("ForwardConfig") != null && !jsonObj.get("ForwardConfig").isJsonNull()) {
        ActionForwardConfig.validateJsonElement(jsonObj.get("ForwardConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Action.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Action' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Action> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Action.class));

       return (TypeAdapter<T>) new TypeAdapter<Action>() {
           @Override
           public void write(JsonWriter out, Action value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Action read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Action given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Action
   * @throws IOException if the JSON string is invalid with respect to Action
   */
  public static Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Action.class);
  }

  /**
   * Convert an instance of Action to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

