/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateTargetGroupInputMatcher;
import org.openapitools.client.model.ProtocolEnum;
import org.openapitools.client.model.TargetGroupIpAddressTypeEnum;
import org.openapitools.client.model.TargetTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateTargetGroupInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:43.672707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTargetGroupInput {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTOCOL = "Protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_PROTOCOL_VERSION = "ProtocolVersion";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_VERSION)
  private String protocolVersion;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_PROTOCOL = "HealthCheckProtocol";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_PROTOCOL)
  private ProtocolEnum healthCheckProtocol;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_PORT = "HealthCheckPort";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_PORT)
  private String healthCheckPort;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_ENABLED = "HealthCheckEnabled";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_ENABLED)
  private Boolean healthCheckEnabled;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_PATH = "HealthCheckPath";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_PATH)
  private String healthCheckPath;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_INTERVAL_SECONDS = "HealthCheckIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_INTERVAL_SECONDS)
  private Integer healthCheckIntervalSeconds;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_TIMEOUT_SECONDS = "HealthCheckTimeoutSeconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_TIMEOUT_SECONDS)
  private Integer healthCheckTimeoutSeconds;

  public static final String SERIALIZED_NAME_HEALTHY_THRESHOLD_COUNT = "HealthyThresholdCount";
  @SerializedName(SERIALIZED_NAME_HEALTHY_THRESHOLD_COUNT)
  private Integer healthyThresholdCount;

  public static final String SERIALIZED_NAME_UNHEALTHY_THRESHOLD_COUNT = "UnhealthyThresholdCount";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_THRESHOLD_COUNT)
  private Integer unhealthyThresholdCount;

  public static final String SERIALIZED_NAME_MATCHER = "Matcher";
  @SerializedName(SERIALIZED_NAME_MATCHER)
  private CreateTargetGroupInputMatcher matcher;

  public static final String SERIALIZED_NAME_TARGET_TYPE = "TargetType";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  private TargetTypeEnum targetType;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_IP_ADDRESS_TYPE = "IpAddressType";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_TYPE)
  private TargetGroupIpAddressTypeEnum ipAddressType;

  public CreateTargetGroupInput() {
  }

  public CreateTargetGroupInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateTargetGroupInput protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public CreateTargetGroupInput protocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  /**
   * Get protocolVersion
   * @return protocolVersion
   */
  @javax.annotation.Nullable
  public String getProtocolVersion() {
    return protocolVersion;
  }

  public void setProtocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
  }


  public CreateTargetGroupInput port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public CreateTargetGroupInput vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public CreateTargetGroupInput healthCheckProtocol(ProtocolEnum healthCheckProtocol) {
    this.healthCheckProtocol = healthCheckProtocol;
    return this;
  }

  /**
   * Get healthCheckProtocol
   * @return healthCheckProtocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getHealthCheckProtocol() {
    return healthCheckProtocol;
  }

  public void setHealthCheckProtocol(ProtocolEnum healthCheckProtocol) {
    this.healthCheckProtocol = healthCheckProtocol;
  }


  public CreateTargetGroupInput healthCheckPort(String healthCheckPort) {
    this.healthCheckPort = healthCheckPort;
    return this;
  }

  /**
   * Get healthCheckPort
   * @return healthCheckPort
   */
  @javax.annotation.Nullable
  public String getHealthCheckPort() {
    return healthCheckPort;
  }

  public void setHealthCheckPort(String healthCheckPort) {
    this.healthCheckPort = healthCheckPort;
  }


  public CreateTargetGroupInput healthCheckEnabled(Boolean healthCheckEnabled) {
    this.healthCheckEnabled = healthCheckEnabled;
    return this;
  }

  /**
   * Get healthCheckEnabled
   * @return healthCheckEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHealthCheckEnabled() {
    return healthCheckEnabled;
  }

  public void setHealthCheckEnabled(Boolean healthCheckEnabled) {
    this.healthCheckEnabled = healthCheckEnabled;
  }


  public CreateTargetGroupInput healthCheckPath(String healthCheckPath) {
    this.healthCheckPath = healthCheckPath;
    return this;
  }

  /**
   * Get healthCheckPath
   * @return healthCheckPath
   */
  @javax.annotation.Nullable
  public String getHealthCheckPath() {
    return healthCheckPath;
  }

  public void setHealthCheckPath(String healthCheckPath) {
    this.healthCheckPath = healthCheckPath;
  }


  public CreateTargetGroupInput healthCheckIntervalSeconds(Integer healthCheckIntervalSeconds) {
    this.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
    return this;
  }

  /**
   * Get healthCheckIntervalSeconds
   * @return healthCheckIntervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getHealthCheckIntervalSeconds() {
    return healthCheckIntervalSeconds;
  }

  public void setHealthCheckIntervalSeconds(Integer healthCheckIntervalSeconds) {
    this.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
  }


  public CreateTargetGroupInput healthCheckTimeoutSeconds(Integer healthCheckTimeoutSeconds) {
    this.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds;
    return this;
  }

  /**
   * Get healthCheckTimeoutSeconds
   * @return healthCheckTimeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getHealthCheckTimeoutSeconds() {
    return healthCheckTimeoutSeconds;
  }

  public void setHealthCheckTimeoutSeconds(Integer healthCheckTimeoutSeconds) {
    this.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds;
  }


  public CreateTargetGroupInput healthyThresholdCount(Integer healthyThresholdCount) {
    this.healthyThresholdCount = healthyThresholdCount;
    return this;
  }

  /**
   * Get healthyThresholdCount
   * @return healthyThresholdCount
   */
  @javax.annotation.Nullable
  public Integer getHealthyThresholdCount() {
    return healthyThresholdCount;
  }

  public void setHealthyThresholdCount(Integer healthyThresholdCount) {
    this.healthyThresholdCount = healthyThresholdCount;
  }


  public CreateTargetGroupInput unhealthyThresholdCount(Integer unhealthyThresholdCount) {
    this.unhealthyThresholdCount = unhealthyThresholdCount;
    return this;
  }

  /**
   * Get unhealthyThresholdCount
   * @return unhealthyThresholdCount
   */
  @javax.annotation.Nullable
  public Integer getUnhealthyThresholdCount() {
    return unhealthyThresholdCount;
  }

  public void setUnhealthyThresholdCount(Integer unhealthyThresholdCount) {
    this.unhealthyThresholdCount = unhealthyThresholdCount;
  }


  public CreateTargetGroupInput matcher(CreateTargetGroupInputMatcher matcher) {
    this.matcher = matcher;
    return this;
  }

  /**
   * Get matcher
   * @return matcher
   */
  @javax.annotation.Nullable
  public CreateTargetGroupInputMatcher getMatcher() {
    return matcher;
  }

  public void setMatcher(CreateTargetGroupInputMatcher matcher) {
    this.matcher = matcher;
  }


  public CreateTargetGroupInput targetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * Get targetType
   * @return targetType
   */
  @javax.annotation.Nullable
  public TargetTypeEnum getTargetType() {
    return targetType;
  }

  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }


  public CreateTargetGroupInput tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateTargetGroupInput ipAddressType(TargetGroupIpAddressTypeEnum ipAddressType) {
    this.ipAddressType = ipAddressType;
    return this;
  }

  /**
   * Get ipAddressType
   * @return ipAddressType
   */
  @javax.annotation.Nullable
  public TargetGroupIpAddressTypeEnum getIpAddressType() {
    return ipAddressType;
  }

  public void setIpAddressType(TargetGroupIpAddressTypeEnum ipAddressType) {
    this.ipAddressType = ipAddressType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTargetGroupInput createTargetGroupInput = (CreateTargetGroupInput) o;
    return Objects.equals(this.name, createTargetGroupInput.name) &&
        Objects.equals(this.protocol, createTargetGroupInput.protocol) &&
        Objects.equals(this.protocolVersion, createTargetGroupInput.protocolVersion) &&
        Objects.equals(this.port, createTargetGroupInput.port) &&
        Objects.equals(this.vpcId, createTargetGroupInput.vpcId) &&
        Objects.equals(this.healthCheckProtocol, createTargetGroupInput.healthCheckProtocol) &&
        Objects.equals(this.healthCheckPort, createTargetGroupInput.healthCheckPort) &&
        Objects.equals(this.healthCheckEnabled, createTargetGroupInput.healthCheckEnabled) &&
        Objects.equals(this.healthCheckPath, createTargetGroupInput.healthCheckPath) &&
        Objects.equals(this.healthCheckIntervalSeconds, createTargetGroupInput.healthCheckIntervalSeconds) &&
        Objects.equals(this.healthCheckTimeoutSeconds, createTargetGroupInput.healthCheckTimeoutSeconds) &&
        Objects.equals(this.healthyThresholdCount, createTargetGroupInput.healthyThresholdCount) &&
        Objects.equals(this.unhealthyThresholdCount, createTargetGroupInput.unhealthyThresholdCount) &&
        Objects.equals(this.matcher, createTargetGroupInput.matcher) &&
        Objects.equals(this.targetType, createTargetGroupInput.targetType) &&
        Objects.equals(this.tags, createTargetGroupInput.tags) &&
        Objects.equals(this.ipAddressType, createTargetGroupInput.ipAddressType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, protocol, protocolVersion, port, vpcId, healthCheckProtocol, healthCheckPort, healthCheckEnabled, healthCheckPath, healthCheckIntervalSeconds, healthCheckTimeoutSeconds, healthyThresholdCount, unhealthyThresholdCount, matcher, targetType, tags, ipAddressType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTargetGroupInput {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    protocolVersion: ").append(toIndentedString(protocolVersion)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    healthCheckProtocol: ").append(toIndentedString(healthCheckProtocol)).append("\n");
    sb.append("    healthCheckPort: ").append(toIndentedString(healthCheckPort)).append("\n");
    sb.append("    healthCheckEnabled: ").append(toIndentedString(healthCheckEnabled)).append("\n");
    sb.append("    healthCheckPath: ").append(toIndentedString(healthCheckPath)).append("\n");
    sb.append("    healthCheckIntervalSeconds: ").append(toIndentedString(healthCheckIntervalSeconds)).append("\n");
    sb.append("    healthCheckTimeoutSeconds: ").append(toIndentedString(healthCheckTimeoutSeconds)).append("\n");
    sb.append("    healthyThresholdCount: ").append(toIndentedString(healthyThresholdCount)).append("\n");
    sb.append("    unhealthyThresholdCount: ").append(toIndentedString(unhealthyThresholdCount)).append("\n");
    sb.append("    matcher: ").append(toIndentedString(matcher)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    ipAddressType: ").append(toIndentedString(ipAddressType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Protocol");
    openapiFields.add("ProtocolVersion");
    openapiFields.add("Port");
    openapiFields.add("VpcId");
    openapiFields.add("HealthCheckProtocol");
    openapiFields.add("HealthCheckPort");
    openapiFields.add("HealthCheckEnabled");
    openapiFields.add("HealthCheckPath");
    openapiFields.add("HealthCheckIntervalSeconds");
    openapiFields.add("HealthCheckTimeoutSeconds");
    openapiFields.add("HealthyThresholdCount");
    openapiFields.add("UnhealthyThresholdCount");
    openapiFields.add("Matcher");
    openapiFields.add("TargetType");
    openapiFields.add("Tags");
    openapiFields.add("IpAddressType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTargetGroupInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTargetGroupInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTargetGroupInput is not found in the empty JSON string", CreateTargetGroupInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTargetGroupInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTargetGroupInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTargetGroupInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Protocol`
      if (jsonObj.get("Protocol") != null && !jsonObj.get("Protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("Protocol"));
      }
      // validate the optional field `ProtocolVersion`
      if (jsonObj.get("ProtocolVersion") != null && !jsonObj.get("ProtocolVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProtocolVersion"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
      // validate the optional field `HealthCheckProtocol`
      if (jsonObj.get("HealthCheckProtocol") != null && !jsonObj.get("HealthCheckProtocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("HealthCheckProtocol"));
      }
      // validate the optional field `HealthCheckPort`
      if (jsonObj.get("HealthCheckPort") != null && !jsonObj.get("HealthCheckPort").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HealthCheckPort"));
      }
      // validate the optional field `HealthCheckEnabled`
      if (jsonObj.get("HealthCheckEnabled") != null && !jsonObj.get("HealthCheckEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HealthCheckEnabled"));
      }
      // validate the optional field `HealthCheckPath`
      if (jsonObj.get("HealthCheckPath") != null && !jsonObj.get("HealthCheckPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HealthCheckPath"));
      }
      // validate the optional field `HealthCheckIntervalSeconds`
      if (jsonObj.get("HealthCheckIntervalSeconds") != null && !jsonObj.get("HealthCheckIntervalSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HealthCheckIntervalSeconds"));
      }
      // validate the optional field `HealthCheckTimeoutSeconds`
      if (jsonObj.get("HealthCheckTimeoutSeconds") != null && !jsonObj.get("HealthCheckTimeoutSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HealthCheckTimeoutSeconds"));
      }
      // validate the optional field `HealthyThresholdCount`
      if (jsonObj.get("HealthyThresholdCount") != null && !jsonObj.get("HealthyThresholdCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HealthyThresholdCount"));
      }
      // validate the optional field `UnhealthyThresholdCount`
      if (jsonObj.get("UnhealthyThresholdCount") != null && !jsonObj.get("UnhealthyThresholdCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UnhealthyThresholdCount"));
      }
      // validate the optional field `Matcher`
      if (jsonObj.get("Matcher") != null && !jsonObj.get("Matcher").isJsonNull()) {
        CreateTargetGroupInputMatcher.validateJsonElement(jsonObj.get("Matcher"));
      }
      // validate the optional field `TargetType`
      if (jsonObj.get("TargetType") != null && !jsonObj.get("TargetType").isJsonNull()) {
        TargetTypeEnum.validateJsonElement(jsonObj.get("TargetType"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `IpAddressType`
      if (jsonObj.get("IpAddressType") != null && !jsonObj.get("IpAddressType").isJsonNull()) {
        TargetGroupIpAddressTypeEnum.validateJsonElement(jsonObj.get("IpAddressType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTargetGroupInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTargetGroupInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTargetGroupInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTargetGroupInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTargetGroupInput>() {
           @Override
           public void write(JsonWriter out, CreateTargetGroupInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTargetGroupInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTargetGroupInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTargetGroupInput
   * @throws IOException if the JSON string is invalid with respect to CreateTargetGroupInput
   */
  public static CreateTargetGroupInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTargetGroupInput.class);
  }

  /**
   * Convert an instance of CreateTargetGroupInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

