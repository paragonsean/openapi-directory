/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RuleConditionHostHeaderConfig;
import org.openapitools.client.model.RuleConditionHttpHeaderConfig;
import org.openapitools.client.model.RuleConditionHttpRequestMethodConfig;
import org.openapitools.client.model.RuleConditionPathPatternConfig;
import org.openapitools.client.model.RuleConditionQueryStringConfig;
import org.openapitools.client.model.RuleConditionSourceIpConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Information about a condition for a rule.&lt;/p&gt; &lt;p&gt;Each rule can optionally include up to one of each of the following conditions: &lt;code&gt;http-request-method&lt;/code&gt;, &lt;code&gt;host-header&lt;/code&gt;, &lt;code&gt;path-pattern&lt;/code&gt;, and &lt;code&gt;source-ip&lt;/code&gt;. Each rule can also optionally include one or more of each of the following conditions: &lt;code&gt;http-header&lt;/code&gt; and &lt;code&gt;query-string&lt;/code&gt;. Note that the value for a condition cannot be empty.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:43.672707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleCondition {
  public static final String SERIALIZED_NAME_FIELD = "Field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_VALUES = "Values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List values;

  public static final String SERIALIZED_NAME_HOST_HEADER_CONFIG = "HostHeaderConfig";
  @SerializedName(SERIALIZED_NAME_HOST_HEADER_CONFIG)
  private RuleConditionHostHeaderConfig hostHeaderConfig;

  public static final String SERIALIZED_NAME_PATH_PATTERN_CONFIG = "PathPatternConfig";
  @SerializedName(SERIALIZED_NAME_PATH_PATTERN_CONFIG)
  private RuleConditionPathPatternConfig pathPatternConfig;

  public static final String SERIALIZED_NAME_HTTP_HEADER_CONFIG = "HttpHeaderConfig";
  @SerializedName(SERIALIZED_NAME_HTTP_HEADER_CONFIG)
  private RuleConditionHttpHeaderConfig httpHeaderConfig;

  public static final String SERIALIZED_NAME_QUERY_STRING_CONFIG = "QueryStringConfig";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING_CONFIG)
  private RuleConditionQueryStringConfig queryStringConfig;

  public static final String SERIALIZED_NAME_HTTP_REQUEST_METHOD_CONFIG = "HttpRequestMethodConfig";
  @SerializedName(SERIALIZED_NAME_HTTP_REQUEST_METHOD_CONFIG)
  private RuleConditionHttpRequestMethodConfig httpRequestMethodConfig;

  public static final String SERIALIZED_NAME_SOURCE_IP_CONFIG = "SourceIpConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP_CONFIG)
  private RuleConditionSourceIpConfig sourceIpConfig;

  public RuleCondition() {
  }

  public RuleCondition field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public RuleCondition values(List values) {
    this.values = values;
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public List getValues() {
    return values;
  }

  public void setValues(List values) {
    this.values = values;
  }


  public RuleCondition hostHeaderConfig(RuleConditionHostHeaderConfig hostHeaderConfig) {
    this.hostHeaderConfig = hostHeaderConfig;
    return this;
  }

  /**
   * Get hostHeaderConfig
   * @return hostHeaderConfig
   */
  @javax.annotation.Nullable
  public RuleConditionHostHeaderConfig getHostHeaderConfig() {
    return hostHeaderConfig;
  }

  public void setHostHeaderConfig(RuleConditionHostHeaderConfig hostHeaderConfig) {
    this.hostHeaderConfig = hostHeaderConfig;
  }


  public RuleCondition pathPatternConfig(RuleConditionPathPatternConfig pathPatternConfig) {
    this.pathPatternConfig = pathPatternConfig;
    return this;
  }

  /**
   * Get pathPatternConfig
   * @return pathPatternConfig
   */
  @javax.annotation.Nullable
  public RuleConditionPathPatternConfig getPathPatternConfig() {
    return pathPatternConfig;
  }

  public void setPathPatternConfig(RuleConditionPathPatternConfig pathPatternConfig) {
    this.pathPatternConfig = pathPatternConfig;
  }


  public RuleCondition httpHeaderConfig(RuleConditionHttpHeaderConfig httpHeaderConfig) {
    this.httpHeaderConfig = httpHeaderConfig;
    return this;
  }

  /**
   * Get httpHeaderConfig
   * @return httpHeaderConfig
   */
  @javax.annotation.Nullable
  public RuleConditionHttpHeaderConfig getHttpHeaderConfig() {
    return httpHeaderConfig;
  }

  public void setHttpHeaderConfig(RuleConditionHttpHeaderConfig httpHeaderConfig) {
    this.httpHeaderConfig = httpHeaderConfig;
  }


  public RuleCondition queryStringConfig(RuleConditionQueryStringConfig queryStringConfig) {
    this.queryStringConfig = queryStringConfig;
    return this;
  }

  /**
   * Get queryStringConfig
   * @return queryStringConfig
   */
  @javax.annotation.Nullable
  public RuleConditionQueryStringConfig getQueryStringConfig() {
    return queryStringConfig;
  }

  public void setQueryStringConfig(RuleConditionQueryStringConfig queryStringConfig) {
    this.queryStringConfig = queryStringConfig;
  }


  public RuleCondition httpRequestMethodConfig(RuleConditionHttpRequestMethodConfig httpRequestMethodConfig) {
    this.httpRequestMethodConfig = httpRequestMethodConfig;
    return this;
  }

  /**
   * Get httpRequestMethodConfig
   * @return httpRequestMethodConfig
   */
  @javax.annotation.Nullable
  public RuleConditionHttpRequestMethodConfig getHttpRequestMethodConfig() {
    return httpRequestMethodConfig;
  }

  public void setHttpRequestMethodConfig(RuleConditionHttpRequestMethodConfig httpRequestMethodConfig) {
    this.httpRequestMethodConfig = httpRequestMethodConfig;
  }


  public RuleCondition sourceIpConfig(RuleConditionSourceIpConfig sourceIpConfig) {
    this.sourceIpConfig = sourceIpConfig;
    return this;
  }

  /**
   * Get sourceIpConfig
   * @return sourceIpConfig
   */
  @javax.annotation.Nullable
  public RuleConditionSourceIpConfig getSourceIpConfig() {
    return sourceIpConfig;
  }

  public void setSourceIpConfig(RuleConditionSourceIpConfig sourceIpConfig) {
    this.sourceIpConfig = sourceIpConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleCondition ruleCondition = (RuleCondition) o;
    return Objects.equals(this.field, ruleCondition.field) &&
        Objects.equals(this.values, ruleCondition.values) &&
        Objects.equals(this.hostHeaderConfig, ruleCondition.hostHeaderConfig) &&
        Objects.equals(this.pathPatternConfig, ruleCondition.pathPatternConfig) &&
        Objects.equals(this.httpHeaderConfig, ruleCondition.httpHeaderConfig) &&
        Objects.equals(this.queryStringConfig, ruleCondition.queryStringConfig) &&
        Objects.equals(this.httpRequestMethodConfig, ruleCondition.httpRequestMethodConfig) &&
        Objects.equals(this.sourceIpConfig, ruleCondition.sourceIpConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, values, hostHeaderConfig, pathPatternConfig, httpHeaderConfig, queryStringConfig, httpRequestMethodConfig, sourceIpConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleCondition {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    hostHeaderConfig: ").append(toIndentedString(hostHeaderConfig)).append("\n");
    sb.append("    pathPatternConfig: ").append(toIndentedString(pathPatternConfig)).append("\n");
    sb.append("    httpHeaderConfig: ").append(toIndentedString(httpHeaderConfig)).append("\n");
    sb.append("    queryStringConfig: ").append(toIndentedString(queryStringConfig)).append("\n");
    sb.append("    httpRequestMethodConfig: ").append(toIndentedString(httpRequestMethodConfig)).append("\n");
    sb.append("    sourceIpConfig: ").append(toIndentedString(sourceIpConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Field");
    openapiFields.add("Values");
    openapiFields.add("HostHeaderConfig");
    openapiFields.add("PathPatternConfig");
    openapiFields.add("HttpHeaderConfig");
    openapiFields.add("QueryStringConfig");
    openapiFields.add("HttpRequestMethodConfig");
    openapiFields.add("SourceIpConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleCondition is not found in the empty JSON string", RuleCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Field`
      if (jsonObj.get("Field") != null && !jsonObj.get("Field").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Field"));
      }
      // validate the optional field `Values`
      if (jsonObj.get("Values") != null && !jsonObj.get("Values").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Values"));
      }
      // validate the optional field `HostHeaderConfig`
      if (jsonObj.get("HostHeaderConfig") != null && !jsonObj.get("HostHeaderConfig").isJsonNull()) {
        RuleConditionHostHeaderConfig.validateJsonElement(jsonObj.get("HostHeaderConfig"));
      }
      // validate the optional field `PathPatternConfig`
      if (jsonObj.get("PathPatternConfig") != null && !jsonObj.get("PathPatternConfig").isJsonNull()) {
        RuleConditionPathPatternConfig.validateJsonElement(jsonObj.get("PathPatternConfig"));
      }
      // validate the optional field `HttpHeaderConfig`
      if (jsonObj.get("HttpHeaderConfig") != null && !jsonObj.get("HttpHeaderConfig").isJsonNull()) {
        RuleConditionHttpHeaderConfig.validateJsonElement(jsonObj.get("HttpHeaderConfig"));
      }
      // validate the optional field `QueryStringConfig`
      if (jsonObj.get("QueryStringConfig") != null && !jsonObj.get("QueryStringConfig").isJsonNull()) {
        RuleConditionQueryStringConfig.validateJsonElement(jsonObj.get("QueryStringConfig"));
      }
      // validate the optional field `HttpRequestMethodConfig`
      if (jsonObj.get("HttpRequestMethodConfig") != null && !jsonObj.get("HttpRequestMethodConfig").isJsonNull()) {
        RuleConditionHttpRequestMethodConfig.validateJsonElement(jsonObj.get("HttpRequestMethodConfig"));
      }
      // validate the optional field `SourceIpConfig`
      if (jsonObj.get("SourceIpConfig") != null && !jsonObj.get("SourceIpConfig").isJsonNull()) {
        RuleConditionSourceIpConfig.validateJsonElement(jsonObj.get("SourceIpConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleCondition>() {
           @Override
           public void write(JsonWriter out, RuleCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleCondition
   * @throws IOException if the JSON string is invalid with respect to RuleCondition
   */
  public static RuleCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleCondition.class);
  }

  /**
   * Convert an instance of RuleCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

