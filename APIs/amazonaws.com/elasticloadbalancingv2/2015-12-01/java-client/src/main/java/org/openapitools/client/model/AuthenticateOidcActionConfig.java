/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AuthenticateOidcActionConditionalBehaviorEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:43.672707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthenticateOidcActionConfig {
  public static final String SERIALIZED_NAME_ISSUER = "Issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_AUTHORIZATION_ENDPOINT = "AuthorizationEndpoint";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ENDPOINT)
  private String authorizationEndpoint;

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT = "TokenEndpoint";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT)
  private String tokenEndpoint;

  public static final String SERIALIZED_NAME_USER_INFO_ENDPOINT = "UserInfoEndpoint";
  @SerializedName(SERIALIZED_NAME_USER_INFO_ENDPOINT)
  private String userInfoEndpoint;

  public static final String SERIALIZED_NAME_CLIENT_ID = "ClientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "ClientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_SESSION_COOKIE_NAME = "SessionCookieName";
  @SerializedName(SERIALIZED_NAME_SESSION_COOKIE_NAME)
  private String sessionCookieName;

  public static final String SERIALIZED_NAME_SCOPE = "Scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SESSION_TIMEOUT = "SessionTimeout";
  @SerializedName(SERIALIZED_NAME_SESSION_TIMEOUT)
  private Integer sessionTimeout;

  public static final String SERIALIZED_NAME_AUTHENTICATION_REQUEST_EXTRA_PARAMS = "AuthenticationRequestExtraParams";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_REQUEST_EXTRA_PARAMS)
  private Map authenticationRequestExtraParams;

  public static final String SERIALIZED_NAME_ON_UNAUTHENTICATED_REQUEST = "OnUnauthenticatedRequest";
  @SerializedName(SERIALIZED_NAME_ON_UNAUTHENTICATED_REQUEST)
  private AuthenticateOidcActionConditionalBehaviorEnum onUnauthenticatedRequest;

  public static final String SERIALIZED_NAME_USE_EXISTING_CLIENT_SECRET = "UseExistingClientSecret";
  @SerializedName(SERIALIZED_NAME_USE_EXISTING_CLIENT_SECRET)
  private Boolean useExistingClientSecret;

  public AuthenticateOidcActionConfig() {
  }

  public AuthenticateOidcActionConfig issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nonnull
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public AuthenticateOidcActionConfig authorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
    return this;
  }

  /**
   * Get authorizationEndpoint
   * @return authorizationEndpoint
   */
  @javax.annotation.Nonnull
  public String getAuthorizationEndpoint() {
    return authorizationEndpoint;
  }

  public void setAuthorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
  }


  public AuthenticateOidcActionConfig tokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
    return this;
  }

  /**
   * Get tokenEndpoint
   * @return tokenEndpoint
   */
  @javax.annotation.Nonnull
  public String getTokenEndpoint() {
    return tokenEndpoint;
  }

  public void setTokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
  }


  public AuthenticateOidcActionConfig userInfoEndpoint(String userInfoEndpoint) {
    this.userInfoEndpoint = userInfoEndpoint;
    return this;
  }

  /**
   * Get userInfoEndpoint
   * @return userInfoEndpoint
   */
  @javax.annotation.Nonnull
  public String getUserInfoEndpoint() {
    return userInfoEndpoint;
  }

  public void setUserInfoEndpoint(String userInfoEndpoint) {
    this.userInfoEndpoint = userInfoEndpoint;
  }


  public AuthenticateOidcActionConfig clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public AuthenticateOidcActionConfig clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Get clientSecret
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public AuthenticateOidcActionConfig sessionCookieName(String sessionCookieName) {
    this.sessionCookieName = sessionCookieName;
    return this;
  }

  /**
   * Get sessionCookieName
   * @return sessionCookieName
   */
  @javax.annotation.Nullable
  public String getSessionCookieName() {
    return sessionCookieName;
  }

  public void setSessionCookieName(String sessionCookieName) {
    this.sessionCookieName = sessionCookieName;
  }


  public AuthenticateOidcActionConfig scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public AuthenticateOidcActionConfig sessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
    return this;
  }

  /**
   * Get sessionTimeout
   * @return sessionTimeout
   */
  @javax.annotation.Nullable
  public Integer getSessionTimeout() {
    return sessionTimeout;
  }

  public void setSessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
  }


  public AuthenticateOidcActionConfig authenticationRequestExtraParams(Map authenticationRequestExtraParams) {
    this.authenticationRequestExtraParams = authenticationRequestExtraParams;
    return this;
  }

  /**
   * Get authenticationRequestExtraParams
   * @return authenticationRequestExtraParams
   */
  @javax.annotation.Nullable
  public Map getAuthenticationRequestExtraParams() {
    return authenticationRequestExtraParams;
  }

  public void setAuthenticationRequestExtraParams(Map authenticationRequestExtraParams) {
    this.authenticationRequestExtraParams = authenticationRequestExtraParams;
  }


  public AuthenticateOidcActionConfig onUnauthenticatedRequest(AuthenticateOidcActionConditionalBehaviorEnum onUnauthenticatedRequest) {
    this.onUnauthenticatedRequest = onUnauthenticatedRequest;
    return this;
  }

  /**
   * Get onUnauthenticatedRequest
   * @return onUnauthenticatedRequest
   */
  @javax.annotation.Nullable
  public AuthenticateOidcActionConditionalBehaviorEnum getOnUnauthenticatedRequest() {
    return onUnauthenticatedRequest;
  }

  public void setOnUnauthenticatedRequest(AuthenticateOidcActionConditionalBehaviorEnum onUnauthenticatedRequest) {
    this.onUnauthenticatedRequest = onUnauthenticatedRequest;
  }


  public AuthenticateOidcActionConfig useExistingClientSecret(Boolean useExistingClientSecret) {
    this.useExistingClientSecret = useExistingClientSecret;
    return this;
  }

  /**
   * Get useExistingClientSecret
   * @return useExistingClientSecret
   */
  @javax.annotation.Nullable
  public Boolean getUseExistingClientSecret() {
    return useExistingClientSecret;
  }

  public void setUseExistingClientSecret(Boolean useExistingClientSecret) {
    this.useExistingClientSecret = useExistingClientSecret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticateOidcActionConfig authenticateOidcActionConfig = (AuthenticateOidcActionConfig) o;
    return Objects.equals(this.issuer, authenticateOidcActionConfig.issuer) &&
        Objects.equals(this.authorizationEndpoint, authenticateOidcActionConfig.authorizationEndpoint) &&
        Objects.equals(this.tokenEndpoint, authenticateOidcActionConfig.tokenEndpoint) &&
        Objects.equals(this.userInfoEndpoint, authenticateOidcActionConfig.userInfoEndpoint) &&
        Objects.equals(this.clientId, authenticateOidcActionConfig.clientId) &&
        Objects.equals(this.clientSecret, authenticateOidcActionConfig.clientSecret) &&
        Objects.equals(this.sessionCookieName, authenticateOidcActionConfig.sessionCookieName) &&
        Objects.equals(this.scope, authenticateOidcActionConfig.scope) &&
        Objects.equals(this.sessionTimeout, authenticateOidcActionConfig.sessionTimeout) &&
        Objects.equals(this.authenticationRequestExtraParams, authenticateOidcActionConfig.authenticationRequestExtraParams) &&
        Objects.equals(this.onUnauthenticatedRequest, authenticateOidcActionConfig.onUnauthenticatedRequest) &&
        Objects.equals(this.useExistingClientSecret, authenticateOidcActionConfig.useExistingClientSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuer, authorizationEndpoint, tokenEndpoint, userInfoEndpoint, clientId, clientSecret, sessionCookieName, scope, sessionTimeout, authenticationRequestExtraParams, onUnauthenticatedRequest, useExistingClientSecret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticateOidcActionConfig {\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
    sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
    sb.append("    userInfoEndpoint: ").append(toIndentedString(userInfoEndpoint)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    sessionCookieName: ").append(toIndentedString(sessionCookieName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sessionTimeout: ").append(toIndentedString(sessionTimeout)).append("\n");
    sb.append("    authenticationRequestExtraParams: ").append(toIndentedString(authenticationRequestExtraParams)).append("\n");
    sb.append("    onUnauthenticatedRequest: ").append(toIndentedString(onUnauthenticatedRequest)).append("\n");
    sb.append("    useExistingClientSecret: ").append(toIndentedString(useExistingClientSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Issuer");
    openapiFields.add("AuthorizationEndpoint");
    openapiFields.add("TokenEndpoint");
    openapiFields.add("UserInfoEndpoint");
    openapiFields.add("ClientId");
    openapiFields.add("ClientSecret");
    openapiFields.add("SessionCookieName");
    openapiFields.add("Scope");
    openapiFields.add("SessionTimeout");
    openapiFields.add("AuthenticationRequestExtraParams");
    openapiFields.add("OnUnauthenticatedRequest");
    openapiFields.add("UseExistingClientSecret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Issuer");
    openapiRequiredFields.add("AuthorizationEndpoint");
    openapiRequiredFields.add("TokenEndpoint");
    openapiRequiredFields.add("UserInfoEndpoint");
    openapiRequiredFields.add("ClientId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticateOidcActionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticateOidcActionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticateOidcActionConfig is not found in the empty JSON string", AuthenticateOidcActionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticateOidcActionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticateOidcActionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthenticateOidcActionConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Issuer`
      String.validateJsonElement(jsonObj.get("Issuer"));
      // validate the required field `AuthorizationEndpoint`
      String.validateJsonElement(jsonObj.get("AuthorizationEndpoint"));
      // validate the required field `TokenEndpoint`
      String.validateJsonElement(jsonObj.get("TokenEndpoint"));
      // validate the required field `UserInfoEndpoint`
      String.validateJsonElement(jsonObj.get("UserInfoEndpoint"));
      // validate the required field `ClientId`
      String.validateJsonElement(jsonObj.get("ClientId"));
      // validate the optional field `ClientSecret`
      if (jsonObj.get("ClientSecret") != null && !jsonObj.get("ClientSecret").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientSecret"));
      }
      // validate the optional field `SessionCookieName`
      if (jsonObj.get("SessionCookieName") != null && !jsonObj.get("SessionCookieName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SessionCookieName"));
      }
      // validate the optional field `Scope`
      if (jsonObj.get("Scope") != null && !jsonObj.get("Scope").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Scope"));
      }
      // validate the optional field `SessionTimeout`
      if (jsonObj.get("SessionTimeout") != null && !jsonObj.get("SessionTimeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SessionTimeout"));
      }
      // validate the optional field `AuthenticationRequestExtraParams`
      if (jsonObj.get("AuthenticationRequestExtraParams") != null && !jsonObj.get("AuthenticationRequestExtraParams").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AuthenticationRequestExtraParams"));
      }
      // validate the optional field `OnUnauthenticatedRequest`
      if (jsonObj.get("OnUnauthenticatedRequest") != null && !jsonObj.get("OnUnauthenticatedRequest").isJsonNull()) {
        AuthenticateOidcActionConditionalBehaviorEnum.validateJsonElement(jsonObj.get("OnUnauthenticatedRequest"));
      }
      // validate the optional field `UseExistingClientSecret`
      if (jsonObj.get("UseExistingClientSecret") != null && !jsonObj.get("UseExistingClientSecret").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseExistingClientSecret"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticateOidcActionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticateOidcActionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticateOidcActionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticateOidcActionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticateOidcActionConfig>() {
           @Override
           public void write(JsonWriter out, AuthenticateOidcActionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticateOidcActionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticateOidcActionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticateOidcActionConfig
   * @throws IOException if the JSON string is invalid with respect to AuthenticateOidcActionConfig
   */
  public static AuthenticateOidcActionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticateOidcActionConfig.class);
  }

  /**
   * Convert an instance of AuthenticateOidcActionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

