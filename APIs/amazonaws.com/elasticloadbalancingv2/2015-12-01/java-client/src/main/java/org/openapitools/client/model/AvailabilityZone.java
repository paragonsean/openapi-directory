/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an Availability Zone.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:43.672707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailabilityZone {
  public static final String SERIALIZED_NAME_ZONE_NAME = "ZoneName";
  @SerializedName(SERIALIZED_NAME_ZONE_NAME)
  private String zoneName;

  public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_OUTPOST_ID = "OutpostId";
  @SerializedName(SERIALIZED_NAME_OUTPOST_ID)
  private String outpostId;

  public static final String SERIALIZED_NAME_LOAD_BALANCER_ADDRESSES = "LoadBalancerAddresses";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_ADDRESSES)
  private List loadBalancerAddresses;

  public AvailabilityZone() {
  }

  public AvailabilityZone zoneName(String zoneName) {
    this.zoneName = zoneName;
    return this;
  }

  /**
   * Get zoneName
   * @return zoneName
   */
  @javax.annotation.Nullable
  public String getZoneName() {
    return zoneName;
  }

  public void setZoneName(String zoneName) {
    this.zoneName = zoneName;
  }


  public AvailabilityZone subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Get subnetId
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public AvailabilityZone outpostId(String outpostId) {
    this.outpostId = outpostId;
    return this;
  }

  /**
   * Get outpostId
   * @return outpostId
   */
  @javax.annotation.Nullable
  public String getOutpostId() {
    return outpostId;
  }

  public void setOutpostId(String outpostId) {
    this.outpostId = outpostId;
  }


  public AvailabilityZone loadBalancerAddresses(List loadBalancerAddresses) {
    this.loadBalancerAddresses = loadBalancerAddresses;
    return this;
  }

  /**
   * Get loadBalancerAddresses
   * @return loadBalancerAddresses
   */
  @javax.annotation.Nullable
  public List getLoadBalancerAddresses() {
    return loadBalancerAddresses;
  }

  public void setLoadBalancerAddresses(List loadBalancerAddresses) {
    this.loadBalancerAddresses = loadBalancerAddresses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityZone availabilityZone = (AvailabilityZone) o;
    return Objects.equals(this.zoneName, availabilityZone.zoneName) &&
        Objects.equals(this.subnetId, availabilityZone.subnetId) &&
        Objects.equals(this.outpostId, availabilityZone.outpostId) &&
        Objects.equals(this.loadBalancerAddresses, availabilityZone.loadBalancerAddresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(zoneName, subnetId, outpostId, loadBalancerAddresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityZone {\n");
    sb.append("    zoneName: ").append(toIndentedString(zoneName)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    outpostId: ").append(toIndentedString(outpostId)).append("\n");
    sb.append("    loadBalancerAddresses: ").append(toIndentedString(loadBalancerAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ZoneName");
    openapiFields.add("SubnetId");
    openapiFields.add("OutpostId");
    openapiFields.add("LoadBalancerAddresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailabilityZone
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailabilityZone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailabilityZone is not found in the empty JSON string", AvailabilityZone.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailabilityZone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailabilityZone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ZoneName`
      if (jsonObj.get("ZoneName") != null && !jsonObj.get("ZoneName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ZoneName"));
      }
      // validate the optional field `SubnetId`
      if (jsonObj.get("SubnetId") != null && !jsonObj.get("SubnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetId"));
      }
      // validate the optional field `OutpostId`
      if (jsonObj.get("OutpostId") != null && !jsonObj.get("OutpostId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutpostId"));
      }
      // validate the optional field `LoadBalancerAddresses`
      if (jsonObj.get("LoadBalancerAddresses") != null && !jsonObj.get("LoadBalancerAddresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LoadBalancerAddresses"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailabilityZone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailabilityZone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailabilityZone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailabilityZone.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailabilityZone>() {
           @Override
           public void write(JsonWriter out, AvailabilityZone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailabilityZone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailabilityZone given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailabilityZone
   * @throws IOException if the JSON string is invalid with respect to AvailabilityZone
   */
  public static AvailabilityZone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailabilityZone.class);
  }

  /**
   * Convert an instance of AvailabilityZone to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

