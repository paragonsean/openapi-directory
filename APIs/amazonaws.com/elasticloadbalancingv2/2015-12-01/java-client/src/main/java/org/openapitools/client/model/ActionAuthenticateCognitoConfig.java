/*
 * Elastic Load Balancing
 * <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:</p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/\">Elastic Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>
 *
 * The version of the OpenAPI document: 2015-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AuthenticateCognitoActionConditionalBehaviorEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActionAuthenticateCognitoConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:43.672707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionAuthenticateCognitoConfig {
  public static final String SERIALIZED_NAME_USER_POOL_ARN = "UserPoolArn";
  @SerializedName(SERIALIZED_NAME_USER_POOL_ARN)
  private String userPoolArn;

  public static final String SERIALIZED_NAME_USER_POOL_CLIENT_ID = "UserPoolClientId";
  @SerializedName(SERIALIZED_NAME_USER_POOL_CLIENT_ID)
  private String userPoolClientId;

  public static final String SERIALIZED_NAME_USER_POOL_DOMAIN = "UserPoolDomain";
  @SerializedName(SERIALIZED_NAME_USER_POOL_DOMAIN)
  private String userPoolDomain;

  public static final String SERIALIZED_NAME_SESSION_COOKIE_NAME = "SessionCookieName";
  @SerializedName(SERIALIZED_NAME_SESSION_COOKIE_NAME)
  private String sessionCookieName;

  public static final String SERIALIZED_NAME_SCOPE = "Scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SESSION_TIMEOUT = "SessionTimeout";
  @SerializedName(SERIALIZED_NAME_SESSION_TIMEOUT)
  private Integer sessionTimeout;

  public static final String SERIALIZED_NAME_AUTHENTICATION_REQUEST_EXTRA_PARAMS = "AuthenticationRequestExtraParams";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_REQUEST_EXTRA_PARAMS)
  private Map authenticationRequestExtraParams;

  public static final String SERIALIZED_NAME_ON_UNAUTHENTICATED_REQUEST = "OnUnauthenticatedRequest";
  @SerializedName(SERIALIZED_NAME_ON_UNAUTHENTICATED_REQUEST)
  private AuthenticateCognitoActionConditionalBehaviorEnum onUnauthenticatedRequest;

  public ActionAuthenticateCognitoConfig() {
  }

  public ActionAuthenticateCognitoConfig userPoolArn(String userPoolArn) {
    this.userPoolArn = userPoolArn;
    return this;
  }

  /**
   * Get userPoolArn
   * @return userPoolArn
   */
  @javax.annotation.Nonnull
  public String getUserPoolArn() {
    return userPoolArn;
  }

  public void setUserPoolArn(String userPoolArn) {
    this.userPoolArn = userPoolArn;
  }


  public ActionAuthenticateCognitoConfig userPoolClientId(String userPoolClientId) {
    this.userPoolClientId = userPoolClientId;
    return this;
  }

  /**
   * Get userPoolClientId
   * @return userPoolClientId
   */
  @javax.annotation.Nonnull
  public String getUserPoolClientId() {
    return userPoolClientId;
  }

  public void setUserPoolClientId(String userPoolClientId) {
    this.userPoolClientId = userPoolClientId;
  }


  public ActionAuthenticateCognitoConfig userPoolDomain(String userPoolDomain) {
    this.userPoolDomain = userPoolDomain;
    return this;
  }

  /**
   * Get userPoolDomain
   * @return userPoolDomain
   */
  @javax.annotation.Nonnull
  public String getUserPoolDomain() {
    return userPoolDomain;
  }

  public void setUserPoolDomain(String userPoolDomain) {
    this.userPoolDomain = userPoolDomain;
  }


  public ActionAuthenticateCognitoConfig sessionCookieName(String sessionCookieName) {
    this.sessionCookieName = sessionCookieName;
    return this;
  }

  /**
   * Get sessionCookieName
   * @return sessionCookieName
   */
  @javax.annotation.Nullable
  public String getSessionCookieName() {
    return sessionCookieName;
  }

  public void setSessionCookieName(String sessionCookieName) {
    this.sessionCookieName = sessionCookieName;
  }


  public ActionAuthenticateCognitoConfig scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public ActionAuthenticateCognitoConfig sessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
    return this;
  }

  /**
   * Get sessionTimeout
   * @return sessionTimeout
   */
  @javax.annotation.Nullable
  public Integer getSessionTimeout() {
    return sessionTimeout;
  }

  public void setSessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
  }


  public ActionAuthenticateCognitoConfig authenticationRequestExtraParams(Map authenticationRequestExtraParams) {
    this.authenticationRequestExtraParams = authenticationRequestExtraParams;
    return this;
  }

  /**
   * Get authenticationRequestExtraParams
   * @return authenticationRequestExtraParams
   */
  @javax.annotation.Nullable
  public Map getAuthenticationRequestExtraParams() {
    return authenticationRequestExtraParams;
  }

  public void setAuthenticationRequestExtraParams(Map authenticationRequestExtraParams) {
    this.authenticationRequestExtraParams = authenticationRequestExtraParams;
  }


  public ActionAuthenticateCognitoConfig onUnauthenticatedRequest(AuthenticateCognitoActionConditionalBehaviorEnum onUnauthenticatedRequest) {
    this.onUnauthenticatedRequest = onUnauthenticatedRequest;
    return this;
  }

  /**
   * Get onUnauthenticatedRequest
   * @return onUnauthenticatedRequest
   */
  @javax.annotation.Nullable
  public AuthenticateCognitoActionConditionalBehaviorEnum getOnUnauthenticatedRequest() {
    return onUnauthenticatedRequest;
  }

  public void setOnUnauthenticatedRequest(AuthenticateCognitoActionConditionalBehaviorEnum onUnauthenticatedRequest) {
    this.onUnauthenticatedRequest = onUnauthenticatedRequest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionAuthenticateCognitoConfig actionAuthenticateCognitoConfig = (ActionAuthenticateCognitoConfig) o;
    return Objects.equals(this.userPoolArn, actionAuthenticateCognitoConfig.userPoolArn) &&
        Objects.equals(this.userPoolClientId, actionAuthenticateCognitoConfig.userPoolClientId) &&
        Objects.equals(this.userPoolDomain, actionAuthenticateCognitoConfig.userPoolDomain) &&
        Objects.equals(this.sessionCookieName, actionAuthenticateCognitoConfig.sessionCookieName) &&
        Objects.equals(this.scope, actionAuthenticateCognitoConfig.scope) &&
        Objects.equals(this.sessionTimeout, actionAuthenticateCognitoConfig.sessionTimeout) &&
        Objects.equals(this.authenticationRequestExtraParams, actionAuthenticateCognitoConfig.authenticationRequestExtraParams) &&
        Objects.equals(this.onUnauthenticatedRequest, actionAuthenticateCognitoConfig.onUnauthenticatedRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userPoolArn, userPoolClientId, userPoolDomain, sessionCookieName, scope, sessionTimeout, authenticationRequestExtraParams, onUnauthenticatedRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionAuthenticateCognitoConfig {\n");
    sb.append("    userPoolArn: ").append(toIndentedString(userPoolArn)).append("\n");
    sb.append("    userPoolClientId: ").append(toIndentedString(userPoolClientId)).append("\n");
    sb.append("    userPoolDomain: ").append(toIndentedString(userPoolDomain)).append("\n");
    sb.append("    sessionCookieName: ").append(toIndentedString(sessionCookieName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sessionTimeout: ").append(toIndentedString(sessionTimeout)).append("\n");
    sb.append("    authenticationRequestExtraParams: ").append(toIndentedString(authenticationRequestExtraParams)).append("\n");
    sb.append("    onUnauthenticatedRequest: ").append(toIndentedString(onUnauthenticatedRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UserPoolArn");
    openapiFields.add("UserPoolClientId");
    openapiFields.add("UserPoolDomain");
    openapiFields.add("SessionCookieName");
    openapiFields.add("Scope");
    openapiFields.add("SessionTimeout");
    openapiFields.add("AuthenticationRequestExtraParams");
    openapiFields.add("OnUnauthenticatedRequest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("UserPoolArn");
    openapiRequiredFields.add("UserPoolClientId");
    openapiRequiredFields.add("UserPoolDomain");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionAuthenticateCognitoConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionAuthenticateCognitoConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionAuthenticateCognitoConfig is not found in the empty JSON string", ActionAuthenticateCognitoConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionAuthenticateCognitoConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionAuthenticateCognitoConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActionAuthenticateCognitoConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `UserPoolArn`
      String.validateJsonElement(jsonObj.get("UserPoolArn"));
      // validate the required field `UserPoolClientId`
      String.validateJsonElement(jsonObj.get("UserPoolClientId"));
      // validate the required field `UserPoolDomain`
      String.validateJsonElement(jsonObj.get("UserPoolDomain"));
      // validate the optional field `SessionCookieName`
      if (jsonObj.get("SessionCookieName") != null && !jsonObj.get("SessionCookieName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SessionCookieName"));
      }
      // validate the optional field `Scope`
      if (jsonObj.get("Scope") != null && !jsonObj.get("Scope").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Scope"));
      }
      // validate the optional field `SessionTimeout`
      if (jsonObj.get("SessionTimeout") != null && !jsonObj.get("SessionTimeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SessionTimeout"));
      }
      // validate the optional field `AuthenticationRequestExtraParams`
      if (jsonObj.get("AuthenticationRequestExtraParams") != null && !jsonObj.get("AuthenticationRequestExtraParams").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AuthenticationRequestExtraParams"));
      }
      // validate the optional field `OnUnauthenticatedRequest`
      if (jsonObj.get("OnUnauthenticatedRequest") != null && !jsonObj.get("OnUnauthenticatedRequest").isJsonNull()) {
        AuthenticateCognitoActionConditionalBehaviorEnum.validateJsonElement(jsonObj.get("OnUnauthenticatedRequest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionAuthenticateCognitoConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionAuthenticateCognitoConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionAuthenticateCognitoConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionAuthenticateCognitoConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionAuthenticateCognitoConfig>() {
           @Override
           public void write(JsonWriter out, ActionAuthenticateCognitoConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionAuthenticateCognitoConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionAuthenticateCognitoConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionAuthenticateCognitoConfig
   * @throws IOException if the JSON string is invalid with respect to ActionAuthenticateCognitoConfig
   */
  public static ActionAuthenticateCognitoConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionAuthenticateCognitoConfig.class);
  }

  /**
   * Convert an instance of ActionAuthenticateCognitoConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

