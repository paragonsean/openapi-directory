/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceTargetDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceTargetDefinition::OAIResourceTargetDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceTargetDefinition::OAIResourceTargetDefinition() {
    this->initializeModel();
}

OAIResourceTargetDefinition::~OAIResourceTargetDefinition() {}

void OAIResourceTargetDefinition::initializeModel() {

    m_attribute_isSet = false;
    m_attribute_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_requires_recreation_isSet = false;
    m_requires_recreation_isValid = false;
}

void OAIResourceTargetDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceTargetDefinition::fromJsonObject(QJsonObject json) {

    m_attribute_isValid = ::OpenAPI::fromJsonValue(m_attribute, json[QString("Attribute")]);
    m_attribute_isSet = !json[QString("Attribute")].isNull() && m_attribute_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_requires_recreation_isValid = ::OpenAPI::fromJsonValue(m_requires_recreation, json[QString("RequiresRecreation")]);
    m_requires_recreation_isSet = !json[QString("RequiresRecreation")].isNull() && m_requires_recreation_isValid;
}

QString OAIResourceTargetDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceTargetDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute.isSet()) {
        obj.insert(QString("Attribute"), ::OpenAPI::toJsonValue(m_attribute));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_requires_recreation.isSet()) {
        obj.insert(QString("RequiresRecreation"), ::OpenAPI::toJsonValue(m_requires_recreation));
    }
    return obj;
}

OAIResourceAttribute OAIResourceTargetDefinition::getAttribute() const {
    return m_attribute;
}
void OAIResourceTargetDefinition::setAttribute(const OAIResourceAttribute &attribute) {
    m_attribute = attribute;
    m_attribute_isSet = true;
}

bool OAIResourceTargetDefinition::is_attribute_Set() const{
    return m_attribute_isSet;
}

bool OAIResourceTargetDefinition::is_attribute_Valid() const{
    return m_attribute_isValid;
}

QString OAIResourceTargetDefinition::getName() const {
    return m_name;
}
void OAIResourceTargetDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceTargetDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceTargetDefinition::is_name_Valid() const{
    return m_name_isValid;
}

OAIRequiresRecreation OAIResourceTargetDefinition::getRequiresRecreation() const {
    return m_requires_recreation;
}
void OAIResourceTargetDefinition::setRequiresRecreation(const OAIRequiresRecreation &requires_recreation) {
    m_requires_recreation = requires_recreation;
    m_requires_recreation_isSet = true;
}

bool OAIResourceTargetDefinition::is_requires_recreation_Set() const{
    return m_requires_recreation_isSet;
}

bool OAIResourceTargetDefinition::is_requires_recreation_Valid() const{
    return m_requires_recreation_isValid;
}

bool OAIResourceTargetDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_recreation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceTargetDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
