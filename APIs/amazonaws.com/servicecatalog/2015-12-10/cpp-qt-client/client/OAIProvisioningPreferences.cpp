/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningPreferences::OAIProvisioningPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningPreferences::OAIProvisioningPreferences() {
    this->initializeModel();
}

OAIProvisioningPreferences::~OAIProvisioningPreferences() {}

void OAIProvisioningPreferences::initializeModel() {

    m_stack_set_accounts_isSet = false;
    m_stack_set_accounts_isValid = false;

    m_stack_set_regions_isSet = false;
    m_stack_set_regions_isValid = false;

    m_stack_set_failure_tolerance_count_isSet = false;
    m_stack_set_failure_tolerance_count_isValid = false;

    m_stack_set_failure_tolerance_percentage_isSet = false;
    m_stack_set_failure_tolerance_percentage_isValid = false;

    m_stack_set_max_concurrency_count_isSet = false;
    m_stack_set_max_concurrency_count_isValid = false;

    m_stack_set_max_concurrency_percentage_isSet = false;
    m_stack_set_max_concurrency_percentage_isValid = false;
}

void OAIProvisioningPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningPreferences::fromJsonObject(QJsonObject json) {

    m_stack_set_accounts_isValid = ::OpenAPI::fromJsonValue(m_stack_set_accounts, json[QString("StackSetAccounts")]);
    m_stack_set_accounts_isSet = !json[QString("StackSetAccounts")].isNull() && m_stack_set_accounts_isValid;

    m_stack_set_regions_isValid = ::OpenAPI::fromJsonValue(m_stack_set_regions, json[QString("StackSetRegions")]);
    m_stack_set_regions_isSet = !json[QString("StackSetRegions")].isNull() && m_stack_set_regions_isValid;

    m_stack_set_failure_tolerance_count_isValid = ::OpenAPI::fromJsonValue(m_stack_set_failure_tolerance_count, json[QString("StackSetFailureToleranceCount")]);
    m_stack_set_failure_tolerance_count_isSet = !json[QString("StackSetFailureToleranceCount")].isNull() && m_stack_set_failure_tolerance_count_isValid;

    m_stack_set_failure_tolerance_percentage_isValid = ::OpenAPI::fromJsonValue(m_stack_set_failure_tolerance_percentage, json[QString("StackSetFailureTolerancePercentage")]);
    m_stack_set_failure_tolerance_percentage_isSet = !json[QString("StackSetFailureTolerancePercentage")].isNull() && m_stack_set_failure_tolerance_percentage_isValid;

    m_stack_set_max_concurrency_count_isValid = ::OpenAPI::fromJsonValue(m_stack_set_max_concurrency_count, json[QString("StackSetMaxConcurrencyCount")]);
    m_stack_set_max_concurrency_count_isSet = !json[QString("StackSetMaxConcurrencyCount")].isNull() && m_stack_set_max_concurrency_count_isValid;

    m_stack_set_max_concurrency_percentage_isValid = ::OpenAPI::fromJsonValue(m_stack_set_max_concurrency_percentage, json[QString("StackSetMaxConcurrencyPercentage")]);
    m_stack_set_max_concurrency_percentage_isSet = !json[QString("StackSetMaxConcurrencyPercentage")].isNull() && m_stack_set_max_concurrency_percentage_isValid;
}

QString OAIProvisioningPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_accounts.isSet()) {
        obj.insert(QString("StackSetAccounts"), ::OpenAPI::toJsonValue(m_stack_set_accounts));
    }
    if (m_stack_set_regions.isSet()) {
        obj.insert(QString("StackSetRegions"), ::OpenAPI::toJsonValue(m_stack_set_regions));
    }
    if (m_stack_set_failure_tolerance_count_isSet) {
        obj.insert(QString("StackSetFailureToleranceCount"), ::OpenAPI::toJsonValue(m_stack_set_failure_tolerance_count));
    }
    if (m_stack_set_failure_tolerance_percentage_isSet) {
        obj.insert(QString("StackSetFailureTolerancePercentage"), ::OpenAPI::toJsonValue(m_stack_set_failure_tolerance_percentage));
    }
    if (m_stack_set_max_concurrency_count_isSet) {
        obj.insert(QString("StackSetMaxConcurrencyCount"), ::OpenAPI::toJsonValue(m_stack_set_max_concurrency_count));
    }
    if (m_stack_set_max_concurrency_percentage_isSet) {
        obj.insert(QString("StackSetMaxConcurrencyPercentage"), ::OpenAPI::toJsonValue(m_stack_set_max_concurrency_percentage));
    }
    return obj;
}

QList OAIProvisioningPreferences::getStackSetAccounts() const {
    return m_stack_set_accounts;
}
void OAIProvisioningPreferences::setStackSetAccounts(const QList &stack_set_accounts) {
    m_stack_set_accounts = stack_set_accounts;
    m_stack_set_accounts_isSet = true;
}

bool OAIProvisioningPreferences::is_stack_set_accounts_Set() const{
    return m_stack_set_accounts_isSet;
}

bool OAIProvisioningPreferences::is_stack_set_accounts_Valid() const{
    return m_stack_set_accounts_isValid;
}

QList OAIProvisioningPreferences::getStackSetRegions() const {
    return m_stack_set_regions;
}
void OAIProvisioningPreferences::setStackSetRegions(const QList &stack_set_regions) {
    m_stack_set_regions = stack_set_regions;
    m_stack_set_regions_isSet = true;
}

bool OAIProvisioningPreferences::is_stack_set_regions_Set() const{
    return m_stack_set_regions_isSet;
}

bool OAIProvisioningPreferences::is_stack_set_regions_Valid() const{
    return m_stack_set_regions_isValid;
}

qint32 OAIProvisioningPreferences::getStackSetFailureToleranceCount() const {
    return m_stack_set_failure_tolerance_count;
}
void OAIProvisioningPreferences::setStackSetFailureToleranceCount(const qint32 &stack_set_failure_tolerance_count) {
    m_stack_set_failure_tolerance_count = stack_set_failure_tolerance_count;
    m_stack_set_failure_tolerance_count_isSet = true;
}

bool OAIProvisioningPreferences::is_stack_set_failure_tolerance_count_Set() const{
    return m_stack_set_failure_tolerance_count_isSet;
}

bool OAIProvisioningPreferences::is_stack_set_failure_tolerance_count_Valid() const{
    return m_stack_set_failure_tolerance_count_isValid;
}

qint32 OAIProvisioningPreferences::getStackSetFailureTolerancePercentage() const {
    return m_stack_set_failure_tolerance_percentage;
}
void OAIProvisioningPreferences::setStackSetFailureTolerancePercentage(const qint32 &stack_set_failure_tolerance_percentage) {
    m_stack_set_failure_tolerance_percentage = stack_set_failure_tolerance_percentage;
    m_stack_set_failure_tolerance_percentage_isSet = true;
}

bool OAIProvisioningPreferences::is_stack_set_failure_tolerance_percentage_Set() const{
    return m_stack_set_failure_tolerance_percentage_isSet;
}

bool OAIProvisioningPreferences::is_stack_set_failure_tolerance_percentage_Valid() const{
    return m_stack_set_failure_tolerance_percentage_isValid;
}

qint32 OAIProvisioningPreferences::getStackSetMaxConcurrencyCount() const {
    return m_stack_set_max_concurrency_count;
}
void OAIProvisioningPreferences::setStackSetMaxConcurrencyCount(const qint32 &stack_set_max_concurrency_count) {
    m_stack_set_max_concurrency_count = stack_set_max_concurrency_count;
    m_stack_set_max_concurrency_count_isSet = true;
}

bool OAIProvisioningPreferences::is_stack_set_max_concurrency_count_Set() const{
    return m_stack_set_max_concurrency_count_isSet;
}

bool OAIProvisioningPreferences::is_stack_set_max_concurrency_count_Valid() const{
    return m_stack_set_max_concurrency_count_isValid;
}

qint32 OAIProvisioningPreferences::getStackSetMaxConcurrencyPercentage() const {
    return m_stack_set_max_concurrency_percentage;
}
void OAIProvisioningPreferences::setStackSetMaxConcurrencyPercentage(const qint32 &stack_set_max_concurrency_percentage) {
    m_stack_set_max_concurrency_percentage = stack_set_max_concurrency_percentage;
    m_stack_set_max_concurrency_percentage_isSet = true;
}

bool OAIProvisioningPreferences::is_stack_set_max_concurrency_percentage_Set() const{
    return m_stack_set_max_concurrency_percentage_isSet;
}

bool OAIProvisioningPreferences::is_stack_set_max_concurrency_percentage_Valid() const{
    return m_stack_set_max_concurrency_percentage_isValid;
}

bool OAIProvisioningPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_failure_tolerance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_failure_tolerance_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_max_concurrency_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_max_concurrency_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
