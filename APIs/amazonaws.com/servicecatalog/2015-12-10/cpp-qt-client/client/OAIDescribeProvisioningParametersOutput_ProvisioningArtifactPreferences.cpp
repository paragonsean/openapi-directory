/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences() {
    this->initializeModel();
}

OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::~OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences() {}

void OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::initializeModel() {

    m_stack_set_accounts_isSet = false;
    m_stack_set_accounts_isValid = false;

    m_stack_set_regions_isSet = false;
    m_stack_set_regions_isValid = false;
}

void OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::fromJsonObject(QJsonObject json) {

    m_stack_set_accounts_isValid = ::OpenAPI::fromJsonValue(m_stack_set_accounts, json[QString("StackSetAccounts")]);
    m_stack_set_accounts_isSet = !json[QString("StackSetAccounts")].isNull() && m_stack_set_accounts_isValid;

    m_stack_set_regions_isValid = ::OpenAPI::fromJsonValue(m_stack_set_regions, json[QString("StackSetRegions")]);
    m_stack_set_regions_isSet = !json[QString("StackSetRegions")].isNull() && m_stack_set_regions_isValid;
}

QString OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_accounts.isSet()) {
        obj.insert(QString("StackSetAccounts"), ::OpenAPI::toJsonValue(m_stack_set_accounts));
    }
    if (m_stack_set_regions.isSet()) {
        obj.insert(QString("StackSetRegions"), ::OpenAPI::toJsonValue(m_stack_set_regions));
    }
    return obj;
}

QList OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::getStackSetAccounts() const {
    return m_stack_set_accounts;
}
void OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::setStackSetAccounts(const QList &stack_set_accounts) {
    m_stack_set_accounts = stack_set_accounts;
    m_stack_set_accounts_isSet = true;
}

bool OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::is_stack_set_accounts_Set() const{
    return m_stack_set_accounts_isSet;
}

bool OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::is_stack_set_accounts_Valid() const{
    return m_stack_set_accounts_isValid;
}

QList OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::getStackSetRegions() const {
    return m_stack_set_regions;
}
void OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::setStackSetRegions(const QList &stack_set_regions) {
    m_stack_set_regions = stack_set_regions;
    m_stack_set_regions_isSet = true;
}

bool OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::is_stack_set_regions_Set() const{
    return m_stack_set_regions_isSet;
}

bool OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::is_stack_set_regions_Valid() const{
    return m_stack_set_regions_isValid;
}

bool OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
