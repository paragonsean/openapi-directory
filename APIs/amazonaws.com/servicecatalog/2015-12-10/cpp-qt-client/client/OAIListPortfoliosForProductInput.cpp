/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPortfoliosForProductInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPortfoliosForProductInput::OAIListPortfoliosForProductInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPortfoliosForProductInput::OAIListPortfoliosForProductInput() {
    this->initializeModel();
}

OAIListPortfoliosForProductInput::~OAIListPortfoliosForProductInput() {}

void OAIListPortfoliosForProductInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIListPortfoliosForProductInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPortfoliosForProductInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("PageToken")]);
    m_page_token_isSet = !json[QString("PageToken")].isNull() && m_page_token_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;
}

QString OAIListPortfoliosForProductInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPortfoliosForProductInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("PageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

QString OAIListPortfoliosForProductInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIListPortfoliosForProductInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIListPortfoliosForProductInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIListPortfoliosForProductInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIListPortfoliosForProductInput::getProductId() const {
    return m_product_id;
}
void OAIListPortfoliosForProductInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIListPortfoliosForProductInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIListPortfoliosForProductInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIListPortfoliosForProductInput::getPageToken() const {
    return m_page_token;
}
void OAIListPortfoliosForProductInput::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIListPortfoliosForProductInput::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIListPortfoliosForProductInput::is_page_token_Valid() const{
    return m_page_token_isValid;
}

qint32 OAIListPortfoliosForProductInput::getPageSize() const {
    return m_page_size;
}
void OAIListPortfoliosForProductInput::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListPortfoliosForProductInput::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListPortfoliosForProductInput::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIListPortfoliosForProductInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPortfoliosForProductInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && true;
}

} // namespace OpenAPI
