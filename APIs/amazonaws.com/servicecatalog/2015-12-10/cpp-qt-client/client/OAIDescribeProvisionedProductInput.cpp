/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProvisionedProductInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProvisionedProductInput::OAIDescribeProvisionedProductInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProvisionedProductInput::OAIDescribeProvisionedProductInput() {
    this->initializeModel();
}

OAIDescribeProvisionedProductInput::~OAIDescribeProvisionedProductInput() {}

void OAIDescribeProvisionedProductInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDescribeProvisionedProductInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProvisionedProductInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIDescribeProvisionedProductInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProvisionedProductInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIDescribeProvisionedProductInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDescribeProvisionedProductInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDescribeProvisionedProductInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDescribeProvisionedProductInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIDescribeProvisionedProductInput::getId() const {
    return m_id;
}
void OAIDescribeProvisionedProductInput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeProvisionedProductInput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeProvisionedProductInput::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDescribeProvisionedProductInput::getName() const {
    return m_name;
}
void OAIDescribeProvisionedProductInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeProvisionedProductInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeProvisionedProductInput::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDescribeProvisionedProductInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProvisionedProductInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
