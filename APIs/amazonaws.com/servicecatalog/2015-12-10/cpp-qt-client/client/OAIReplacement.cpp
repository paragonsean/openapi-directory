/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplacement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplacement::OAIReplacement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplacement::OAIReplacement() {
    this->initializeModel();
}

OAIReplacement::~OAIReplacement() {}

void OAIReplacement::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReplacement::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReplacement::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TRUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplacement::TRUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FALSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplacement::FALSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONDITIONAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplacement::CONDITIONAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReplacement::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReplacement::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReplacement::TRUE:
            val = "TRUE";
            break;
        case eOAIReplacement::FALSE:
            val = "FALSE";
            break;
        case eOAIReplacement::CONDITIONAL:
            val = "CONDITIONAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReplacement::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReplacement::eOAIReplacement OAIReplacement::getValue() const {
    return m_value;
}

void OAIReplacement::setValue(const OAIReplacement::eOAIReplacement& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReplacement::isSet() const {
    
    return m_value_isSet;
}

bool OAIReplacement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
