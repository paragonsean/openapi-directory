/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceConnection::OAISourceConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceConnection::OAISourceConnection() {
    this->initializeModel();
}

OAISourceConnection::~OAISourceConnection() {}

void OAISourceConnection::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_connection_parameters_isSet = false;
    m_connection_parameters_isValid = false;
}

void OAISourceConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceConnection::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_connection_parameters_isValid = ::OpenAPI::fromJsonValue(m_connection_parameters, json[QString("ConnectionParameters")]);
    m_connection_parameters_isSet = !json[QString("ConnectionParameters")].isNull() && m_connection_parameters_isValid;
}

QString OAISourceConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_connection_parameters.isSet()) {
        obj.insert(QString("ConnectionParameters"), ::OpenAPI::toJsonValue(m_connection_parameters));
    }
    return obj;
}

OAISourceType OAISourceConnection::getType() const {
    return m_type;
}
void OAISourceConnection::setType(const OAISourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISourceConnection::is_type_Set() const{
    return m_type_isSet;
}

bool OAISourceConnection::is_type_Valid() const{
    return m_type_isValid;
}

OAISourceConnection_ConnectionParameters OAISourceConnection::getConnectionParameters() const {
    return m_connection_parameters;
}
void OAISourceConnection::setConnectionParameters(const OAISourceConnection_ConnectionParameters &connection_parameters) {
    m_connection_parameters = connection_parameters;
    m_connection_parameters_isSet = true;
}

bool OAISourceConnection::is_connection_parameters_Set() const{
    return m_connection_parameters_isSet;
}

bool OAISourceConnection::is_connection_parameters_Valid() const{
    return m_connection_parameters_isValid;
}

bool OAISourceConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_parameters_isValid && true;
}

} // namespace OpenAPI
