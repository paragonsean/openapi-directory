/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProvisionedProductPlanInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProvisionedProductPlanInput::OAICreateProvisionedProductPlanInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProvisionedProductPlanInput::OAICreateProvisionedProductPlanInput() {
    this->initializeModel();
}

OAICreateProvisionedProductPlanInput::~OAICreateProvisionedProductPlanInput() {}

void OAICreateProvisionedProductPlanInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_plan_name_isSet = false;
    m_plan_name_isValid = false;

    m_plan_type_isSet = false;
    m_plan_type_isValid = false;

    m_notification_arns_isSet = false;
    m_notification_arns_isValid = false;

    m_path_id_isSet = false;
    m_path_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_provisioned_product_name_isSet = false;
    m_provisioned_product_name_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_provisioning_parameters_isSet = false;
    m_provisioning_parameters_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateProvisionedProductPlanInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProvisionedProductPlanInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_plan_name_isValid = ::OpenAPI::fromJsonValue(m_plan_name, json[QString("PlanName")]);
    m_plan_name_isSet = !json[QString("PlanName")].isNull() && m_plan_name_isValid;

    m_plan_type_isValid = ::OpenAPI::fromJsonValue(m_plan_type, json[QString("PlanType")]);
    m_plan_type_isSet = !json[QString("PlanType")].isNull() && m_plan_type_isValid;

    m_notification_arns_isValid = ::OpenAPI::fromJsonValue(m_notification_arns, json[QString("NotificationArns")]);
    m_notification_arns_isSet = !json[QString("NotificationArns")].isNull() && m_notification_arns_isValid;

    m_path_id_isValid = ::OpenAPI::fromJsonValue(m_path_id, json[QString("PathId")]);
    m_path_id_isSet = !json[QString("PathId")].isNull() && m_path_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_provisioned_product_name_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_name, json[QString("ProvisionedProductName")]);
    m_provisioned_product_name_isSet = !json[QString("ProvisionedProductName")].isNull() && m_provisioned_product_name_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_provisioning_parameters_isValid = ::OpenAPI::fromJsonValue(m_provisioning_parameters, json[QString("ProvisioningParameters")]);
    m_provisioning_parameters_isSet = !json[QString("ProvisioningParameters")].isNull() && m_provisioning_parameters_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateProvisionedProductPlanInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProvisionedProductPlanInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_plan_name_isSet) {
        obj.insert(QString("PlanName"), ::OpenAPI::toJsonValue(m_plan_name));
    }
    if (m_plan_type.isSet()) {
        obj.insert(QString("PlanType"), ::OpenAPI::toJsonValue(m_plan_type));
    }
    if (m_notification_arns.isSet()) {
        obj.insert(QString("NotificationArns"), ::OpenAPI::toJsonValue(m_notification_arns));
    }
    if (m_path_id_isSet) {
        obj.insert(QString("PathId"), ::OpenAPI::toJsonValue(m_path_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_provisioned_product_name_isSet) {
        obj.insert(QString("ProvisionedProductName"), ::OpenAPI::toJsonValue(m_provisioned_product_name));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_provisioning_parameters.isSet()) {
        obj.insert(QString("ProvisioningParameters"), ::OpenAPI::toJsonValue(m_provisioning_parameters));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateProvisionedProductPlanInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAICreateProvisionedProductPlanInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAICreateProvisionedProductPlanInput::getPlanName() const {
    return m_plan_name;
}
void OAICreateProvisionedProductPlanInput::setPlanName(const QString &plan_name) {
    m_plan_name = plan_name;
    m_plan_name_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_plan_name_Set() const{
    return m_plan_name_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_plan_name_Valid() const{
    return m_plan_name_isValid;
}

OAIProvisionedProductPlanType OAICreateProvisionedProductPlanInput::getPlanType() const {
    return m_plan_type;
}
void OAICreateProvisionedProductPlanInput::setPlanType(const OAIProvisionedProductPlanType &plan_type) {
    m_plan_type = plan_type;
    m_plan_type_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_plan_type_Set() const{
    return m_plan_type_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_plan_type_Valid() const{
    return m_plan_type_isValid;
}

QList OAICreateProvisionedProductPlanInput::getNotificationArns() const {
    return m_notification_arns;
}
void OAICreateProvisionedProductPlanInput::setNotificationArns(const QList &notification_arns) {
    m_notification_arns = notification_arns;
    m_notification_arns_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_notification_arns_Set() const{
    return m_notification_arns_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_notification_arns_Valid() const{
    return m_notification_arns_isValid;
}

QString OAICreateProvisionedProductPlanInput::getPathId() const {
    return m_path_id;
}
void OAICreateProvisionedProductPlanInput::setPathId(const QString &path_id) {
    m_path_id = path_id;
    m_path_id_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_path_id_Set() const{
    return m_path_id_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_path_id_Valid() const{
    return m_path_id_isValid;
}

QString OAICreateProvisionedProductPlanInput::getProductId() const {
    return m_product_id;
}
void OAICreateProvisionedProductPlanInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAICreateProvisionedProductPlanInput::getProvisionedProductName() const {
    return m_provisioned_product_name;
}
void OAICreateProvisionedProductPlanInput::setProvisionedProductName(const QString &provisioned_product_name) {
    m_provisioned_product_name = provisioned_product_name;
    m_provisioned_product_name_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_provisioned_product_name_Set() const{
    return m_provisioned_product_name_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_provisioned_product_name_Valid() const{
    return m_provisioned_product_name_isValid;
}

QString OAICreateProvisionedProductPlanInput::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAICreateProvisionedProductPlanInput::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QList OAICreateProvisionedProductPlanInput::getProvisioningParameters() const {
    return m_provisioning_parameters;
}
void OAICreateProvisionedProductPlanInput::setProvisioningParameters(const QList &provisioning_parameters) {
    m_provisioning_parameters = provisioning_parameters;
    m_provisioning_parameters_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_provisioning_parameters_Set() const{
    return m_provisioning_parameters_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_provisioning_parameters_Valid() const{
    return m_provisioning_parameters_isValid;
}

QString OAICreateProvisionedProductPlanInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateProvisionedProductPlanInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

QList OAICreateProvisionedProductPlanInput::getTags() const {
    return m_tags;
}
void OAICreateProvisionedProductPlanInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateProvisionedProductPlanInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateProvisionedProductPlanInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateProvisionedProductPlanInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProvisionedProductPlanInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_plan_name_isValid && m_plan_type_isValid && m_product_id_isValid && m_provisioned_product_name_isValid && m_provisioning_artifact_id_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
