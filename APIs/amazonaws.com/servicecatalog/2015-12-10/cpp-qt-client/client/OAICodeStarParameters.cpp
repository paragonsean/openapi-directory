/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeStarParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeStarParameters::OAICodeStarParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeStarParameters::OAICodeStarParameters() {
    this->initializeModel();
}

OAICodeStarParameters::~OAICodeStarParameters() {}

void OAICodeStarParameters::initializeModel() {

    m_connection_arn_isSet = false;
    m_connection_arn_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_artifact_path_isSet = false;
    m_artifact_path_isValid = false;
}

void OAICodeStarParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeStarParameters::fromJsonObject(QJsonObject json) {

    m_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_connection_arn, json[QString("ConnectionArn")]);
    m_connection_arn_isSet = !json[QString("ConnectionArn")].isNull() && m_connection_arn_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("Repository")]);
    m_repository_isSet = !json[QString("Repository")].isNull() && m_repository_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("Branch")]);
    m_branch_isSet = !json[QString("Branch")].isNull() && m_branch_isValid;

    m_artifact_path_isValid = ::OpenAPI::fromJsonValue(m_artifact_path, json[QString("ArtifactPath")]);
    m_artifact_path_isSet = !json[QString("ArtifactPath")].isNull() && m_artifact_path_isValid;
}

QString OAICodeStarParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeStarParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_arn_isSet) {
        obj.insert(QString("ConnectionArn"), ::OpenAPI::toJsonValue(m_connection_arn));
    }
    if (m_repository_isSet) {
        obj.insert(QString("Repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_branch_isSet) {
        obj.insert(QString("Branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_artifact_path_isSet) {
        obj.insert(QString("ArtifactPath"), ::OpenAPI::toJsonValue(m_artifact_path));
    }
    return obj;
}

QString OAICodeStarParameters::getConnectionArn() const {
    return m_connection_arn;
}
void OAICodeStarParameters::setConnectionArn(const QString &connection_arn) {
    m_connection_arn = connection_arn;
    m_connection_arn_isSet = true;
}

bool OAICodeStarParameters::is_connection_arn_Set() const{
    return m_connection_arn_isSet;
}

bool OAICodeStarParameters::is_connection_arn_Valid() const{
    return m_connection_arn_isValid;
}

QString OAICodeStarParameters::getRepository() const {
    return m_repository;
}
void OAICodeStarParameters::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICodeStarParameters::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICodeStarParameters::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAICodeStarParameters::getBranch() const {
    return m_branch;
}
void OAICodeStarParameters::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAICodeStarParameters::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAICodeStarParameters::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAICodeStarParameters::getArtifactPath() const {
    return m_artifact_path;
}
void OAICodeStarParameters::setArtifactPath(const QString &artifact_path) {
    m_artifact_path = artifact_path;
    m_artifact_path_isSet = true;
}

bool OAICodeStarParameters::is_artifact_path_Set() const{
    return m_artifact_path_isSet;
}

bool OAICodeStarParameters::is_artifact_path_Valid() const{
    return m_artifact_path_isValid;
}

bool OAICodeStarParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeStarParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_arn_isValid && m_repository_isValid && m_branch_isValid && m_artifact_path_isValid && true;
}

} // namespace OpenAPI
