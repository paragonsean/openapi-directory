/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTagOptionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTagOptionInput::OAIUpdateTagOptionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTagOptionInput::OAIUpdateTagOptionInput() {
    this->initializeModel();
}

OAIUpdateTagOptionInput::~OAIUpdateTagOptionInput() {}

void OAIUpdateTagOptionInput::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;
}

void OAIUpdateTagOptionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTagOptionInput::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;
}

QString OAIUpdateTagOptionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTagOptionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    return obj;
}

QString OAIUpdateTagOptionInput::getId() const {
    return m_id;
}
void OAIUpdateTagOptionInput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateTagOptionInput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateTagOptionInput::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateTagOptionInput::getValue() const {
    return m_value;
}
void OAIUpdateTagOptionInput::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIUpdateTagOptionInput::is_value_Set() const{
    return m_value_isSet;
}

bool OAIUpdateTagOptionInput::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIUpdateTagOptionInput::getActive() const {
    return m_active;
}
void OAIUpdateTagOptionInput::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUpdateTagOptionInput::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUpdateTagOptionInput::is_active_Valid() const{
    return m_active_isValid;
}

bool OAIUpdateTagOptionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTagOptionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
