/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareDetails::OAIShareDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareDetails::OAIShareDetails() {
    this->initializeModel();
}

OAIShareDetails::~OAIShareDetails() {}

void OAIShareDetails::initializeModel() {

    m_successful_shares_isSet = false;
    m_successful_shares_isValid = false;

    m_share_errors_isSet = false;
    m_share_errors_isValid = false;
}

void OAIShareDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareDetails::fromJsonObject(QJsonObject json) {

    m_successful_shares_isValid = ::OpenAPI::fromJsonValue(m_successful_shares, json[QString("SuccessfulShares")]);
    m_successful_shares_isSet = !json[QString("SuccessfulShares")].isNull() && m_successful_shares_isValid;

    m_share_errors_isValid = ::OpenAPI::fromJsonValue(m_share_errors, json[QString("ShareErrors")]);
    m_share_errors_isSet = !json[QString("ShareErrors")].isNull() && m_share_errors_isValid;
}

QString OAIShareDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_successful_shares.isSet()) {
        obj.insert(QString("SuccessfulShares"), ::OpenAPI::toJsonValue(m_successful_shares));
    }
    if (m_share_errors.isSet()) {
        obj.insert(QString("ShareErrors"), ::OpenAPI::toJsonValue(m_share_errors));
    }
    return obj;
}

QList OAIShareDetails::getSuccessfulShares() const {
    return m_successful_shares;
}
void OAIShareDetails::setSuccessfulShares(const QList &successful_shares) {
    m_successful_shares = successful_shares;
    m_successful_shares_isSet = true;
}

bool OAIShareDetails::is_successful_shares_Set() const{
    return m_successful_shares_isSet;
}

bool OAIShareDetails::is_successful_shares_Valid() const{
    return m_successful_shares_isValid;
}

QList OAIShareDetails::getShareErrors() const {
    return m_share_errors;
}
void OAIShareDetails::setShareErrors(const QList &share_errors) {
    m_share_errors = share_errors;
    m_share_errors_isSet = true;
}

bool OAIShareDetails::is_share_errors_Set() const{
    return m_share_errors_isSet;
}

bool OAIShareDetails::is_share_errors_Valid() const{
    return m_share_errors_isValid;
}

bool OAIShareDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_successful_shares.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
