/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningArtifactParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningArtifactParameter::OAIProvisioningArtifactParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningArtifactParameter::OAIProvisioningArtifactParameter() {
    this->initializeModel();
}

OAIProvisioningArtifactParameter::~OAIProvisioningArtifactParameter() {}

void OAIProvisioningArtifactParameter::initializeModel() {

    m_parameter_key_isSet = false;
    m_parameter_key_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_parameter_type_isSet = false;
    m_parameter_type_isValid = false;

    m_is_no_echo_isSet = false;
    m_is_no_echo_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parameter_constraints_isSet = false;
    m_parameter_constraints_isValid = false;
}

void OAIProvisioningArtifactParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningArtifactParameter::fromJsonObject(QJsonObject json) {

    m_parameter_key_isValid = ::OpenAPI::fromJsonValue(m_parameter_key, json[QString("ParameterKey")]);
    m_parameter_key_isSet = !json[QString("ParameterKey")].isNull() && m_parameter_key_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_parameter_type_isValid = ::OpenAPI::fromJsonValue(m_parameter_type, json[QString("ParameterType")]);
    m_parameter_type_isSet = !json[QString("ParameterType")].isNull() && m_parameter_type_isValid;

    m_is_no_echo_isValid = ::OpenAPI::fromJsonValue(m_is_no_echo, json[QString("IsNoEcho")]);
    m_is_no_echo_isSet = !json[QString("IsNoEcho")].isNull() && m_is_no_echo_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_parameter_constraints_isValid = ::OpenAPI::fromJsonValue(m_parameter_constraints, json[QString("ParameterConstraints")]);
    m_parameter_constraints_isSet = !json[QString("ParameterConstraints")].isNull() && m_parameter_constraints_isValid;
}

QString OAIProvisioningArtifactParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningArtifactParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_key_isSet) {
        obj.insert(QString("ParameterKey"), ::OpenAPI::toJsonValue(m_parameter_key));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_parameter_type_isSet) {
        obj.insert(QString("ParameterType"), ::OpenAPI::toJsonValue(m_parameter_type));
    }
    if (m_is_no_echo_isSet) {
        obj.insert(QString("IsNoEcho"), ::OpenAPI::toJsonValue(m_is_no_echo));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parameter_constraints.isSet()) {
        obj.insert(QString("ParameterConstraints"), ::OpenAPI::toJsonValue(m_parameter_constraints));
    }
    return obj;
}

QString OAIProvisioningArtifactParameter::getParameterKey() const {
    return m_parameter_key;
}
void OAIProvisioningArtifactParameter::setParameterKey(const QString &parameter_key) {
    m_parameter_key = parameter_key;
    m_parameter_key_isSet = true;
}

bool OAIProvisioningArtifactParameter::is_parameter_key_Set() const{
    return m_parameter_key_isSet;
}

bool OAIProvisioningArtifactParameter::is_parameter_key_Valid() const{
    return m_parameter_key_isValid;
}

QString OAIProvisioningArtifactParameter::getDefaultValue() const {
    return m_default_value;
}
void OAIProvisioningArtifactParameter::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIProvisioningArtifactParameter::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIProvisioningArtifactParameter::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIProvisioningArtifactParameter::getParameterType() const {
    return m_parameter_type;
}
void OAIProvisioningArtifactParameter::setParameterType(const QString &parameter_type) {
    m_parameter_type = parameter_type;
    m_parameter_type_isSet = true;
}

bool OAIProvisioningArtifactParameter::is_parameter_type_Set() const{
    return m_parameter_type_isSet;
}

bool OAIProvisioningArtifactParameter::is_parameter_type_Valid() const{
    return m_parameter_type_isValid;
}

bool OAIProvisioningArtifactParameter::getIsNoEcho() const {
    return m_is_no_echo;
}
void OAIProvisioningArtifactParameter::setIsNoEcho(const bool &is_no_echo) {
    m_is_no_echo = is_no_echo;
    m_is_no_echo_isSet = true;
}

bool OAIProvisioningArtifactParameter::is_is_no_echo_Set() const{
    return m_is_no_echo_isSet;
}

bool OAIProvisioningArtifactParameter::is_is_no_echo_Valid() const{
    return m_is_no_echo_isValid;
}

QString OAIProvisioningArtifactParameter::getDescription() const {
    return m_description;
}
void OAIProvisioningArtifactParameter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProvisioningArtifactParameter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProvisioningArtifactParameter::is_description_Valid() const{
    return m_description_isValid;
}

OAIProvisioningArtifactParameter_ParameterConstraints OAIProvisioningArtifactParameter::getParameterConstraints() const {
    return m_parameter_constraints;
}
void OAIProvisioningArtifactParameter::setParameterConstraints(const OAIProvisioningArtifactParameter_ParameterConstraints &parameter_constraints) {
    m_parameter_constraints = parameter_constraints;
    m_parameter_constraints_isSet = true;
}

bool OAIProvisioningArtifactParameter::is_parameter_constraints_Set() const{
    return m_parameter_constraints_isSet;
}

bool OAIProvisioningArtifactParameter::is_parameter_constraints_Valid() const{
    return m_parameter_constraints_isValid;
}

bool OAIProvisioningArtifactParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_no_echo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningArtifactParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
