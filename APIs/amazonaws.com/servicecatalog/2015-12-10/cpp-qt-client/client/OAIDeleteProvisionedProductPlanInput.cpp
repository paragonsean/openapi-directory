/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteProvisionedProductPlanInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteProvisionedProductPlanInput::OAIDeleteProvisionedProductPlanInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteProvisionedProductPlanInput::OAIDeleteProvisionedProductPlanInput() {
    this->initializeModel();
}

OAIDeleteProvisionedProductPlanInput::~OAIDeleteProvisionedProductPlanInput() {}

void OAIDeleteProvisionedProductPlanInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_ignore_errors_isSet = false;
    m_ignore_errors_isValid = false;
}

void OAIDeleteProvisionedProductPlanInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteProvisionedProductPlanInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("PlanId")]);
    m_plan_id_isSet = !json[QString("PlanId")].isNull() && m_plan_id_isValid;

    m_ignore_errors_isValid = ::OpenAPI::fromJsonValue(m_ignore_errors, json[QString("IgnoreErrors")]);
    m_ignore_errors_isSet = !json[QString("IgnoreErrors")].isNull() && m_ignore_errors_isValid;
}

QString OAIDeleteProvisionedProductPlanInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteProvisionedProductPlanInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("PlanId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_ignore_errors_isSet) {
        obj.insert(QString("IgnoreErrors"), ::OpenAPI::toJsonValue(m_ignore_errors));
    }
    return obj;
}

QString OAIDeleteProvisionedProductPlanInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDeleteProvisionedProductPlanInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDeleteProvisionedProductPlanInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDeleteProvisionedProductPlanInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIDeleteProvisionedProductPlanInput::getPlanId() const {
    return m_plan_id;
}
void OAIDeleteProvisionedProductPlanInput::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIDeleteProvisionedProductPlanInput::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIDeleteProvisionedProductPlanInput::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

bool OAIDeleteProvisionedProductPlanInput::getIgnoreErrors() const {
    return m_ignore_errors;
}
void OAIDeleteProvisionedProductPlanInput::setIgnoreErrors(const bool &ignore_errors) {
    m_ignore_errors = ignore_errors;
    m_ignore_errors_isSet = true;
}

bool OAIDeleteProvisionedProductPlanInput::is_ignore_errors_Set() const{
    return m_ignore_errors_isSet;
}

bool OAIDeleteProvisionedProductPlanInput::is_ignore_errors_Valid() const{
    return m_ignore_errors_isValid;
}

bool OAIDeleteProvisionedProductPlanInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_errors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteProvisionedProductPlanInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_plan_id_isValid && true;
}

} // namespace OpenAPI
