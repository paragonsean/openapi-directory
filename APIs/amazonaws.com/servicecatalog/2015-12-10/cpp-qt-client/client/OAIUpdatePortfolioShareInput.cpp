/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePortfolioShareInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePortfolioShareInput::OAIUpdatePortfolioShareInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePortfolioShareInput::OAIUpdatePortfolioShareInput() {
    this->initializeModel();
}

OAIUpdatePortfolioShareInput::~OAIUpdatePortfolioShareInput() {}

void OAIUpdatePortfolioShareInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_organization_node_isSet = false;
    m_organization_node_isValid = false;

    m_share_tag_options_isSet = false;
    m_share_tag_options_isValid = false;

    m_share_principals_isSet = false;
    m_share_principals_isValid = false;
}

void OAIUpdatePortfolioShareInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePortfolioShareInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_organization_node_isValid = ::OpenAPI::fromJsonValue(m_organization_node, json[QString("OrganizationNode")]);
    m_organization_node_isSet = !json[QString("OrganizationNode")].isNull() && m_organization_node_isValid;

    m_share_tag_options_isValid = ::OpenAPI::fromJsonValue(m_share_tag_options, json[QString("ShareTagOptions")]);
    m_share_tag_options_isSet = !json[QString("ShareTagOptions")].isNull() && m_share_tag_options_isValid;

    m_share_principals_isValid = ::OpenAPI::fromJsonValue(m_share_principals, json[QString("SharePrincipals")]);
    m_share_principals_isSet = !json[QString("SharePrincipals")].isNull() && m_share_principals_isValid;
}

QString OAIUpdatePortfolioShareInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePortfolioShareInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_organization_node.isSet()) {
        obj.insert(QString("OrganizationNode"), ::OpenAPI::toJsonValue(m_organization_node));
    }
    if (m_share_tag_options_isSet) {
        obj.insert(QString("ShareTagOptions"), ::OpenAPI::toJsonValue(m_share_tag_options));
    }
    if (m_share_principals_isSet) {
        obj.insert(QString("SharePrincipals"), ::OpenAPI::toJsonValue(m_share_principals));
    }
    return obj;
}

QString OAIUpdatePortfolioShareInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIUpdatePortfolioShareInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIUpdatePortfolioShareInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIUpdatePortfolioShareInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIUpdatePortfolioShareInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAIUpdatePortfolioShareInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAIUpdatePortfolioShareInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAIUpdatePortfolioShareInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

QString OAIUpdatePortfolioShareInput::getAccountId() const {
    return m_account_id;
}
void OAIUpdatePortfolioShareInput::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUpdatePortfolioShareInput::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUpdatePortfolioShareInput::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIOrganizationNode OAIUpdatePortfolioShareInput::getOrganizationNode() const {
    return m_organization_node;
}
void OAIUpdatePortfolioShareInput::setOrganizationNode(const OAIOrganizationNode &organization_node) {
    m_organization_node = organization_node;
    m_organization_node_isSet = true;
}

bool OAIUpdatePortfolioShareInput::is_organization_node_Set() const{
    return m_organization_node_isSet;
}

bool OAIUpdatePortfolioShareInput::is_organization_node_Valid() const{
    return m_organization_node_isValid;
}

bool OAIUpdatePortfolioShareInput::getShareTagOptions() const {
    return m_share_tag_options;
}
void OAIUpdatePortfolioShareInput::setShareTagOptions(const bool &share_tag_options) {
    m_share_tag_options = share_tag_options;
    m_share_tag_options_isSet = true;
}

bool OAIUpdatePortfolioShareInput::is_share_tag_options_Set() const{
    return m_share_tag_options_isSet;
}

bool OAIUpdatePortfolioShareInput::is_share_tag_options_Valid() const{
    return m_share_tag_options_isValid;
}

bool OAIUpdatePortfolioShareInput::getSharePrincipals() const {
    return m_share_principals;
}
void OAIUpdatePortfolioShareInput::setSharePrincipals(const bool &share_principals) {
    m_share_principals = share_principals;
    m_share_principals_isSet = true;
}

bool OAIUpdatePortfolioShareInput::is_share_principals_Set() const{
    return m_share_principals_isSet;
}

bool OAIUpdatePortfolioShareInput::is_share_principals_Valid() const{
    return m_share_principals_isValid;
}

bool OAIUpdatePortfolioShareInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_tag_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_principals_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePortfolioShareInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portfolio_id_isValid && true;
}

} // namespace OpenAPI
