/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePortfolioSharesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePortfolioSharesInput::OAIDescribePortfolioSharesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePortfolioSharesInput::OAIDescribePortfolioSharesInput() {
    this->initializeModel();
}

OAIDescribePortfolioSharesInput::~OAIDescribePortfolioSharesInput() {}

void OAIDescribePortfolioSharesInput::initializeModel() {

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIDescribePortfolioSharesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePortfolioSharesInput::fromJsonObject(QJsonObject json) {

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("PageToken")]);
    m_page_token_isSet = !json[QString("PageToken")].isNull() && m_page_token_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;
}

QString OAIDescribePortfolioSharesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePortfolioSharesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("PageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

QString OAIDescribePortfolioSharesInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAIDescribePortfolioSharesInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAIDescribePortfolioSharesInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAIDescribePortfolioSharesInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

OAIDescribePortfolioShareType OAIDescribePortfolioSharesInput::getType() const {
    return m_type;
}
void OAIDescribePortfolioSharesInput::setType(const OAIDescribePortfolioShareType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribePortfolioSharesInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribePortfolioSharesInput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDescribePortfolioSharesInput::getPageToken() const {
    return m_page_token;
}
void OAIDescribePortfolioSharesInput::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIDescribePortfolioSharesInput::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIDescribePortfolioSharesInput::is_page_token_Valid() const{
    return m_page_token_isValid;
}

qint32 OAIDescribePortfolioSharesInput::getPageSize() const {
    return m_page_size;
}
void OAIDescribePortfolioSharesInput::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIDescribePortfolioSharesInput::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIDescribePortfolioSharesInput::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIDescribePortfolioSharesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePortfolioSharesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portfolio_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
