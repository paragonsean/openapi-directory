/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionParameter::OAIExecutionParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionParameter::OAIExecutionParameter() {
    this->initializeModel();
}

OAIExecutionParameter::~OAIExecutionParameter() {}

void OAIExecutionParameter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_default_values_isSet = false;
    m_default_values_isValid = false;
}

void OAIExecutionParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionParameter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_default_values_isValid = ::OpenAPI::fromJsonValue(m_default_values, json[QString("DefaultValues")]);
    m_default_values_isSet = !json[QString("DefaultValues")].isNull() && m_default_values_isValid;
}

QString OAIExecutionParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_default_values.isSet()) {
        obj.insert(QString("DefaultValues"), ::OpenAPI::toJsonValue(m_default_values));
    }
    return obj;
}

QString OAIExecutionParameter::getName() const {
    return m_name;
}
void OAIExecutionParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExecutionParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExecutionParameter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExecutionParameter::getType() const {
    return m_type;
}
void OAIExecutionParameter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExecutionParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExecutionParameter::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIExecutionParameter::getDefaultValues() const {
    return m_default_values;
}
void OAIExecutionParameter::setDefaultValues(const QList &default_values) {
    m_default_values = default_values;
    m_default_values_isSet = true;
}

bool OAIExecutionParameter::is_default_values_Set() const{
    return m_default_values_isSet;
}

bool OAIExecutionParameter::is_default_values_Valid() const{
    return m_default_values_isValid;
}

bool OAIExecutionParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
