/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListResourcesForTagOptionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListResourcesForTagOptionInput::OAIListResourcesForTagOptionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListResourcesForTagOptionInput::OAIListResourcesForTagOptionInput() {
    this->initializeModel();
}

OAIListResourcesForTagOptionInput::~OAIListResourcesForTagOptionInput() {}

void OAIListResourcesForTagOptionInput::initializeModel() {

    m_tag_option_id_isSet = false;
    m_tag_option_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;
}

void OAIListResourcesForTagOptionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListResourcesForTagOptionInput::fromJsonObject(QJsonObject json) {

    m_tag_option_id_isValid = ::OpenAPI::fromJsonValue(m_tag_option_id, json[QString("TagOptionId")]);
    m_tag_option_id_isSet = !json[QString("TagOptionId")].isNull() && m_tag_option_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("PageToken")]);
    m_page_token_isSet = !json[QString("PageToken")].isNull() && m_page_token_isValid;
}

QString OAIListResourcesForTagOptionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListResourcesForTagOptionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_tag_option_id_isSet) {
        obj.insert(QString("TagOptionId"), ::OpenAPI::toJsonValue(m_tag_option_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("PageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    return obj;
}

QString OAIListResourcesForTagOptionInput::getTagOptionId() const {
    return m_tag_option_id;
}
void OAIListResourcesForTagOptionInput::setTagOptionId(const QString &tag_option_id) {
    m_tag_option_id = tag_option_id;
    m_tag_option_id_isSet = true;
}

bool OAIListResourcesForTagOptionInput::is_tag_option_id_Set() const{
    return m_tag_option_id_isSet;
}

bool OAIListResourcesForTagOptionInput::is_tag_option_id_Valid() const{
    return m_tag_option_id_isValid;
}

QString OAIListResourcesForTagOptionInput::getResourceType() const {
    return m_resource_type;
}
void OAIListResourcesForTagOptionInput::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIListResourcesForTagOptionInput::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIListResourcesForTagOptionInput::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

qint32 OAIListResourcesForTagOptionInput::getPageSize() const {
    return m_page_size;
}
void OAIListResourcesForTagOptionInput::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListResourcesForTagOptionInput::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListResourcesForTagOptionInput::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIListResourcesForTagOptionInput::getPageToken() const {
    return m_page_token;
}
void OAIListResourcesForTagOptionInput::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIListResourcesForTagOptionInput::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIListResourcesForTagOptionInput::is_page_token_Valid() const{
    return m_page_token_isValid;
}

bool OAIListResourcesForTagOptionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tag_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListResourcesForTagOptionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tag_option_id_isValid && true;
}

} // namespace OpenAPI
