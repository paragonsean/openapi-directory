/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareError::OAIShareError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareError::OAIShareError() {
    this->initializeModel();
}

OAIShareError::~OAIShareError() {}

void OAIShareError::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIShareError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareError::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("Accounts")]);
    m_accounts_isSet = !json[QString("Accounts")].isNull() && m_accounts_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;
}

QString OAIShareError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareError::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.isSet()) {
        obj.insert(QString("Accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_error_isSet) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

QList OAIShareError::getAccounts() const {
    return m_accounts;
}
void OAIShareError::setAccounts(const QList &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIShareError::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIShareError::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QString OAIShareError::getMessage() const {
    return m_message;
}
void OAIShareError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIShareError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIShareError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIShareError::getError() const {
    return m_error;
}
void OAIShareError::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIShareError::is_error_Set() const{
    return m_error_isSet;
}

bool OAIShareError::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIShareError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
