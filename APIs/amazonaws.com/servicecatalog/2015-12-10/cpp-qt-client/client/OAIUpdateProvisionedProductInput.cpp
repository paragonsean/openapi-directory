/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProvisionedProductInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProvisionedProductInput::OAIUpdateProvisionedProductInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProvisionedProductInput::OAIUpdateProvisionedProductInput() {
    this->initializeModel();
}

OAIUpdateProvisionedProductInput::~OAIUpdateProvisionedProductInput() {}

void OAIUpdateProvisionedProductInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_provisioned_product_name_isSet = false;
    m_provisioned_product_name_isValid = false;

    m_provisioned_product_id_isSet = false;
    m_provisioned_product_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_provisioning_artifact_name_isSet = false;
    m_provisioning_artifact_name_isValid = false;

    m_path_id_isSet = false;
    m_path_id_isValid = false;

    m_path_name_isSet = false;
    m_path_name_isValid = false;

    m_provisioning_parameters_isSet = false;
    m_provisioning_parameters_isValid = false;

    m_provisioning_preferences_isSet = false;
    m_provisioning_preferences_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_update_token_isSet = false;
    m_update_token_isValid = false;
}

void OAIUpdateProvisionedProductInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProvisionedProductInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_provisioned_product_name_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_name, json[QString("ProvisionedProductName")]);
    m_provisioned_product_name_isSet = !json[QString("ProvisionedProductName")].isNull() && m_provisioned_product_name_isValid;

    m_provisioned_product_id_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_id, json[QString("ProvisionedProductId")]);
    m_provisioned_product_id_isSet = !json[QString("ProvisionedProductId")].isNull() && m_provisioned_product_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("ProductName")]);
    m_product_name_isSet = !json[QString("ProductName")].isNull() && m_product_name_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_provisioning_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_name, json[QString("ProvisioningArtifactName")]);
    m_provisioning_artifact_name_isSet = !json[QString("ProvisioningArtifactName")].isNull() && m_provisioning_artifact_name_isValid;

    m_path_id_isValid = ::OpenAPI::fromJsonValue(m_path_id, json[QString("PathId")]);
    m_path_id_isSet = !json[QString("PathId")].isNull() && m_path_id_isValid;

    m_path_name_isValid = ::OpenAPI::fromJsonValue(m_path_name, json[QString("PathName")]);
    m_path_name_isSet = !json[QString("PathName")].isNull() && m_path_name_isValid;

    m_provisioning_parameters_isValid = ::OpenAPI::fromJsonValue(m_provisioning_parameters, json[QString("ProvisioningParameters")]);
    m_provisioning_parameters_isSet = !json[QString("ProvisioningParameters")].isNull() && m_provisioning_parameters_isValid;

    m_provisioning_preferences_isValid = ::OpenAPI::fromJsonValue(m_provisioning_preferences, json[QString("ProvisioningPreferences")]);
    m_provisioning_preferences_isSet = !json[QString("ProvisioningPreferences")].isNull() && m_provisioning_preferences_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_update_token_isValid = ::OpenAPI::fromJsonValue(m_update_token, json[QString("UpdateToken")]);
    m_update_token_isSet = !json[QString("UpdateToken")].isNull() && m_update_token_isValid;
}

QString OAIUpdateProvisionedProductInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProvisionedProductInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_provisioned_product_name_isSet) {
        obj.insert(QString("ProvisionedProductName"), ::OpenAPI::toJsonValue(m_provisioned_product_name));
    }
    if (m_provisioned_product_id_isSet) {
        obj.insert(QString("ProvisionedProductId"), ::OpenAPI::toJsonValue(m_provisioned_product_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("ProductName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_provisioning_artifact_name_isSet) {
        obj.insert(QString("ProvisioningArtifactName"), ::OpenAPI::toJsonValue(m_provisioning_artifact_name));
    }
    if (m_path_id_isSet) {
        obj.insert(QString("PathId"), ::OpenAPI::toJsonValue(m_path_id));
    }
    if (m_path_name_isSet) {
        obj.insert(QString("PathName"), ::OpenAPI::toJsonValue(m_path_name));
    }
    if (m_provisioning_parameters.isSet()) {
        obj.insert(QString("ProvisioningParameters"), ::OpenAPI::toJsonValue(m_provisioning_parameters));
    }
    if (m_provisioning_preferences.isSet()) {
        obj.insert(QString("ProvisioningPreferences"), ::OpenAPI::toJsonValue(m_provisioning_preferences));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_update_token_isSet) {
        obj.insert(QString("UpdateToken"), ::OpenAPI::toJsonValue(m_update_token));
    }
    return obj;
}

QString OAIUpdateProvisionedProductInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIUpdateProvisionedProductInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIUpdateProvisionedProductInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIUpdateProvisionedProductInput::getProvisionedProductName() const {
    return m_provisioned_product_name;
}
void OAIUpdateProvisionedProductInput::setProvisionedProductName(const QString &provisioned_product_name) {
    m_provisioned_product_name = provisioned_product_name;
    m_provisioned_product_name_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_provisioned_product_name_Set() const{
    return m_provisioned_product_name_isSet;
}

bool OAIUpdateProvisionedProductInput::is_provisioned_product_name_Valid() const{
    return m_provisioned_product_name_isValid;
}

QString OAIUpdateProvisionedProductInput::getProvisionedProductId() const {
    return m_provisioned_product_id;
}
void OAIUpdateProvisionedProductInput::setProvisionedProductId(const QString &provisioned_product_id) {
    m_provisioned_product_id = provisioned_product_id;
    m_provisioned_product_id_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_provisioned_product_id_Set() const{
    return m_provisioned_product_id_isSet;
}

bool OAIUpdateProvisionedProductInput::is_provisioned_product_id_Valid() const{
    return m_provisioned_product_id_isValid;
}

QString OAIUpdateProvisionedProductInput::getProductId() const {
    return m_product_id;
}
void OAIUpdateProvisionedProductInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIUpdateProvisionedProductInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIUpdateProvisionedProductInput::getProductName() const {
    return m_product_name;
}
void OAIUpdateProvisionedProductInput::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIUpdateProvisionedProductInput::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAIUpdateProvisionedProductInput::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIUpdateProvisionedProductInput::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIUpdateProvisionedProductInput::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QString OAIUpdateProvisionedProductInput::getProvisioningArtifactName() const {
    return m_provisioning_artifact_name;
}
void OAIUpdateProvisionedProductInput::setProvisioningArtifactName(const QString &provisioning_artifact_name) {
    m_provisioning_artifact_name = provisioning_artifact_name;
    m_provisioning_artifact_name_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_provisioning_artifact_name_Set() const{
    return m_provisioning_artifact_name_isSet;
}

bool OAIUpdateProvisionedProductInput::is_provisioning_artifact_name_Valid() const{
    return m_provisioning_artifact_name_isValid;
}

QString OAIUpdateProvisionedProductInput::getPathId() const {
    return m_path_id;
}
void OAIUpdateProvisionedProductInput::setPathId(const QString &path_id) {
    m_path_id = path_id;
    m_path_id_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_path_id_Set() const{
    return m_path_id_isSet;
}

bool OAIUpdateProvisionedProductInput::is_path_id_Valid() const{
    return m_path_id_isValid;
}

QString OAIUpdateProvisionedProductInput::getPathName() const {
    return m_path_name;
}
void OAIUpdateProvisionedProductInput::setPathName(const QString &path_name) {
    m_path_name = path_name;
    m_path_name_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_path_name_Set() const{
    return m_path_name_isSet;
}

bool OAIUpdateProvisionedProductInput::is_path_name_Valid() const{
    return m_path_name_isValid;
}

QList OAIUpdateProvisionedProductInput::getProvisioningParameters() const {
    return m_provisioning_parameters;
}
void OAIUpdateProvisionedProductInput::setProvisioningParameters(const QList &provisioning_parameters) {
    m_provisioning_parameters = provisioning_parameters;
    m_provisioning_parameters_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_provisioning_parameters_Set() const{
    return m_provisioning_parameters_isSet;
}

bool OAIUpdateProvisionedProductInput::is_provisioning_parameters_Valid() const{
    return m_provisioning_parameters_isValid;
}

OAIUpdateProvisionedProductInput_ProvisioningPreferences OAIUpdateProvisionedProductInput::getProvisioningPreferences() const {
    return m_provisioning_preferences;
}
void OAIUpdateProvisionedProductInput::setProvisioningPreferences(const OAIUpdateProvisionedProductInput_ProvisioningPreferences &provisioning_preferences) {
    m_provisioning_preferences = provisioning_preferences;
    m_provisioning_preferences_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_provisioning_preferences_Set() const{
    return m_provisioning_preferences_isSet;
}

bool OAIUpdateProvisionedProductInput::is_provisioning_preferences_Valid() const{
    return m_provisioning_preferences_isValid;
}

QList OAIUpdateProvisionedProductInput::getTags() const {
    return m_tags;
}
void OAIUpdateProvisionedProductInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateProvisionedProductInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIUpdateProvisionedProductInput::getUpdateToken() const {
    return m_update_token;
}
void OAIUpdateProvisionedProductInput::setUpdateToken(const QString &update_token) {
    m_update_token = update_token;
    m_update_token_isSet = true;
}

bool OAIUpdateProvisionedProductInput::is_update_token_Set() const{
    return m_update_token_isSet;
}

bool OAIUpdateProvisionedProductInput::is_update_token_Valid() const{
    return m_update_token_isValid;
}

bool OAIUpdateProvisionedProductInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProvisionedProductInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_update_token_isValid && true;
}

} // namespace OpenAPI
