/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProductOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProductOutput::OAICreateProductOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProductOutput::OAICreateProductOutput() {
    this->initializeModel();
}

OAICreateProductOutput::~OAICreateProductOutput() {}

void OAICreateProductOutput::initializeModel() {

    m_product_view_detail_isSet = false;
    m_product_view_detail_isValid = false;

    m_provisioning_artifact_detail_isSet = false;
    m_provisioning_artifact_detail_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateProductOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProductOutput::fromJsonObject(QJsonObject json) {

    m_product_view_detail_isValid = ::OpenAPI::fromJsonValue(m_product_view_detail, json[QString("ProductViewDetail")]);
    m_product_view_detail_isSet = !json[QString("ProductViewDetail")].isNull() && m_product_view_detail_isValid;

    m_provisioning_artifact_detail_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_detail, json[QString("ProvisioningArtifactDetail")]);
    m_provisioning_artifact_detail_isSet = !json[QString("ProvisioningArtifactDetail")].isNull() && m_provisioning_artifact_detail_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateProductOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProductOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_product_view_detail.isSet()) {
        obj.insert(QString("ProductViewDetail"), ::OpenAPI::toJsonValue(m_product_view_detail));
    }
    if (m_provisioning_artifact_detail.isSet()) {
        obj.insert(QString("ProvisioningArtifactDetail"), ::OpenAPI::toJsonValue(m_provisioning_artifact_detail));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateProductOutput_ProductViewDetail OAICreateProductOutput::getProductViewDetail() const {
    return m_product_view_detail;
}
void OAICreateProductOutput::setProductViewDetail(const OAICreateProductOutput_ProductViewDetail &product_view_detail) {
    m_product_view_detail = product_view_detail;
    m_product_view_detail_isSet = true;
}

bool OAICreateProductOutput::is_product_view_detail_Set() const{
    return m_product_view_detail_isSet;
}

bool OAICreateProductOutput::is_product_view_detail_Valid() const{
    return m_product_view_detail_isValid;
}

OAICreateProductOutput_ProvisioningArtifactDetail OAICreateProductOutput::getProvisioningArtifactDetail() const {
    return m_provisioning_artifact_detail;
}
void OAICreateProductOutput::setProvisioningArtifactDetail(const OAICreateProductOutput_ProvisioningArtifactDetail &provisioning_artifact_detail) {
    m_provisioning_artifact_detail = provisioning_artifact_detail;
    m_provisioning_artifact_detail_isSet = true;
}

bool OAICreateProductOutput::is_provisioning_artifact_detail_Set() const{
    return m_provisioning_artifact_detail_isSet;
}

bool OAICreateProductOutput::is_provisioning_artifact_detail_Valid() const{
    return m_provisioning_artifact_detail_isValid;
}

QList OAICreateProductOutput::getTags() const {
    return m_tags;
}
void OAICreateProductOutput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateProductOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateProductOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateProductOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_view_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProductOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
