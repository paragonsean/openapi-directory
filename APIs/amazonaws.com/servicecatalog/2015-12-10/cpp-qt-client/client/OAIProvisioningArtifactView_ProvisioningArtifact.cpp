/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningArtifactView_ProvisioningArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningArtifactView_ProvisioningArtifact::OAIProvisioningArtifactView_ProvisioningArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningArtifactView_ProvisioningArtifact::OAIProvisioningArtifactView_ProvisioningArtifact() {
    this->initializeModel();
}

OAIProvisioningArtifactView_ProvisioningArtifact::~OAIProvisioningArtifactView_ProvisioningArtifact() {}

void OAIProvisioningArtifactView_ProvisioningArtifact::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_guidance_isSet = false;
    m_guidance_isValid = false;
}

void OAIProvisioningArtifactView_ProvisioningArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningArtifactView_ProvisioningArtifact::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_guidance_isValid = ::OpenAPI::fromJsonValue(m_guidance, json[QString("Guidance")]);
    m_guidance_isSet = !json[QString("Guidance")].isNull() && m_guidance_isValid;
}

QString OAIProvisioningArtifactView_ProvisioningArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningArtifactView_ProvisioningArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_guidance.isSet()) {
        obj.insert(QString("Guidance"), ::OpenAPI::toJsonValue(m_guidance));
    }
    return obj;
}

QString OAIProvisioningArtifactView_ProvisioningArtifact::getId() const {
    return m_id;
}
void OAIProvisioningArtifactView_ProvisioningArtifact::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProvisioningArtifactView_ProvisioningArtifact::getName() const {
    return m_name;
}
void OAIProvisioningArtifactView_ProvisioningArtifact::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProvisioningArtifactView_ProvisioningArtifact::getDescription() const {
    return m_description;
}
void OAIProvisioningArtifactView_ProvisioningArtifact::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIProvisioningArtifactView_ProvisioningArtifact::getCreatedTime() const {
    return m_created_time;
}
void OAIProvisioningArtifactView_ProvisioningArtifact::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIProvisioningArtifactGuidance OAIProvisioningArtifactView_ProvisioningArtifact::getGuidance() const {
    return m_guidance;
}
void OAIProvisioningArtifactView_ProvisioningArtifact::setGuidance(const OAIProvisioningArtifactGuidance &guidance) {
    m_guidance = guidance;
    m_guidance_isSet = true;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_guidance_Set() const{
    return m_guidance_isSet;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::is_guidance_Valid() const{
    return m_guidance_isValid;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guidance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningArtifactView_ProvisioningArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
