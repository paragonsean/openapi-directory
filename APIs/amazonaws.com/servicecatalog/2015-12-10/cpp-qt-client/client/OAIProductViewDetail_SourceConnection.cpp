/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductViewDetail_SourceConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductViewDetail_SourceConnection::OAIProductViewDetail_SourceConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductViewDetail_SourceConnection::OAIProductViewDetail_SourceConnection() {
    this->initializeModel();
}

OAIProductViewDetail_SourceConnection::~OAIProductViewDetail_SourceConnection() {}

void OAIProductViewDetail_SourceConnection::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_connection_parameters_isSet = false;
    m_connection_parameters_isValid = false;

    m_last_sync_isSet = false;
    m_last_sync_isValid = false;
}

void OAIProductViewDetail_SourceConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductViewDetail_SourceConnection::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_connection_parameters_isValid = ::OpenAPI::fromJsonValue(m_connection_parameters, json[QString("ConnectionParameters")]);
    m_connection_parameters_isSet = !json[QString("ConnectionParameters")].isNull() && m_connection_parameters_isValid;

    m_last_sync_isValid = ::OpenAPI::fromJsonValue(m_last_sync, json[QString("LastSync")]);
    m_last_sync_isSet = !json[QString("LastSync")].isNull() && m_last_sync_isValid;
}

QString OAIProductViewDetail_SourceConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductViewDetail_SourceConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_connection_parameters.isSet()) {
        obj.insert(QString("ConnectionParameters"), ::OpenAPI::toJsonValue(m_connection_parameters));
    }
    if (m_last_sync.isSet()) {
        obj.insert(QString("LastSync"), ::OpenAPI::toJsonValue(m_last_sync));
    }
    return obj;
}

OAISourceType OAIProductViewDetail_SourceConnection::getType() const {
    return m_type;
}
void OAIProductViewDetail_SourceConnection::setType(const OAISourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProductViewDetail_SourceConnection::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProductViewDetail_SourceConnection::is_type_Valid() const{
    return m_type_isValid;
}

OAISourceConnectionDetail_ConnectionParameters OAIProductViewDetail_SourceConnection::getConnectionParameters() const {
    return m_connection_parameters;
}
void OAIProductViewDetail_SourceConnection::setConnectionParameters(const OAISourceConnectionDetail_ConnectionParameters &connection_parameters) {
    m_connection_parameters = connection_parameters;
    m_connection_parameters_isSet = true;
}

bool OAIProductViewDetail_SourceConnection::is_connection_parameters_Set() const{
    return m_connection_parameters_isSet;
}

bool OAIProductViewDetail_SourceConnection::is_connection_parameters_Valid() const{
    return m_connection_parameters_isValid;
}

OAISourceConnectionDetail_LastSync OAIProductViewDetail_SourceConnection::getLastSync() const {
    return m_last_sync;
}
void OAIProductViewDetail_SourceConnection::setLastSync(const OAISourceConnectionDetail_LastSync &last_sync) {
    m_last_sync = last_sync;
    m_last_sync_isSet = true;
}

bool OAIProductViewDetail_SourceConnection::is_last_sync_Set() const{
    return m_last_sync_isSet;
}

bool OAIProductViewDetail_SourceConnection::is_last_sync_Valid() const{
    return m_last_sync_isValid;
}

bool OAIProductViewDetail_SourceConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductViewDetail_SourceConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
