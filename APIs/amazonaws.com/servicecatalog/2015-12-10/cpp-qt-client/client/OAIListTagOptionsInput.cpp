/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTagOptionsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTagOptionsInput::OAIListTagOptionsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTagOptionsInput::OAIListTagOptionsInput() {
    this->initializeModel();
}

OAIListTagOptionsInput::~OAIListTagOptionsInput() {}

void OAIListTagOptionsInput::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;
}

void OAIListTagOptionsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTagOptionsInput::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("PageToken")]);
    m_page_token_isSet = !json[QString("PageToken")].isNull() && m_page_token_isValid;
}

QString OAIListTagOptionsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTagOptionsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("PageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    return obj;
}

OAIListTagOptionsInput_Filters OAIListTagOptionsInput::getFilters() const {
    return m_filters;
}
void OAIListTagOptionsInput::setFilters(const OAIListTagOptionsInput_Filters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIListTagOptionsInput::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIListTagOptionsInput::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIListTagOptionsInput::getPageSize() const {
    return m_page_size;
}
void OAIListTagOptionsInput::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListTagOptionsInput::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListTagOptionsInput::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIListTagOptionsInput::getPageToken() const {
    return m_page_token;
}
void OAIListTagOptionsInput::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIListTagOptionsInput::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIListTagOptionsInput::is_page_token_Valid() const{
    return m_page_token_isValid;
}

bool OAIListTagOptionsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTagOptionsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
