/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConstraintOutput_ConstraintDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConstraintOutput_ConstraintDetail::OAICreateConstraintOutput_ConstraintDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConstraintOutput_ConstraintDetail::OAICreateConstraintOutput_ConstraintDetail() {
    this->initializeModel();
}

OAICreateConstraintOutput_ConstraintDetail::~OAICreateConstraintOutput_ConstraintDetail() {}

void OAICreateConstraintOutput_ConstraintDetail::initializeModel() {

    m_constraint_id_isSet = false;
    m_constraint_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;
}

void OAICreateConstraintOutput_ConstraintDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConstraintOutput_ConstraintDetail::fromJsonObject(QJsonObject json) {

    m_constraint_id_isValid = ::OpenAPI::fromJsonValue(m_constraint_id, json[QString("ConstraintId")]);
    m_constraint_id_isSet = !json[QString("ConstraintId")].isNull() && m_constraint_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;
}

QString OAICreateConstraintOutput_ConstraintDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConstraintOutput_ConstraintDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_constraint_id_isSet) {
        obj.insert(QString("ConstraintId"), ::OpenAPI::toJsonValue(m_constraint_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    return obj;
}

QString OAICreateConstraintOutput_ConstraintDetail::getConstraintId() const {
    return m_constraint_id;
}
void OAICreateConstraintOutput_ConstraintDetail::setConstraintId(const QString &constraint_id) {
    m_constraint_id = constraint_id;
    m_constraint_id_isSet = true;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_constraint_id_Set() const{
    return m_constraint_id_isSet;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_constraint_id_Valid() const{
    return m_constraint_id_isValid;
}

QString OAICreateConstraintOutput_ConstraintDetail::getType() const {
    return m_type;
}
void OAICreateConstraintOutput_ConstraintDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateConstraintOutput_ConstraintDetail::getDescription() const {
    return m_description;
}
void OAICreateConstraintOutput_ConstraintDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateConstraintOutput_ConstraintDetail::getOwner() const {
    return m_owner;
}
void OAICreateConstraintOutput_ConstraintDetail::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAICreateConstraintOutput_ConstraintDetail::getProductId() const {
    return m_product_id;
}
void OAICreateConstraintOutput_ConstraintDetail::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAICreateConstraintOutput_ConstraintDetail::getPortfolioId() const {
    return m_portfolio_id;
}
void OAICreateConstraintOutput_ConstraintDetail::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAICreateConstraintOutput_ConstraintDetail::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

bool OAICreateConstraintOutput_ConstraintDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConstraintOutput_ConstraintDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
