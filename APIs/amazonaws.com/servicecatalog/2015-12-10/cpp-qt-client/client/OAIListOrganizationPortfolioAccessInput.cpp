/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListOrganizationPortfolioAccessInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListOrganizationPortfolioAccessInput::OAIListOrganizationPortfolioAccessInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListOrganizationPortfolioAccessInput::OAIListOrganizationPortfolioAccessInput() {
    this->initializeModel();
}

OAIListOrganizationPortfolioAccessInput::~OAIListOrganizationPortfolioAccessInput() {}

void OAIListOrganizationPortfolioAccessInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_organization_node_type_isSet = false;
    m_organization_node_type_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIListOrganizationPortfolioAccessInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListOrganizationPortfolioAccessInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_organization_node_type_isValid = ::OpenAPI::fromJsonValue(m_organization_node_type, json[QString("OrganizationNodeType")]);
    m_organization_node_type_isSet = !json[QString("OrganizationNodeType")].isNull() && m_organization_node_type_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("PageToken")]);
    m_page_token_isSet = !json[QString("PageToken")].isNull() && m_page_token_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;
}

QString OAIListOrganizationPortfolioAccessInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListOrganizationPortfolioAccessInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_organization_node_type.isSet()) {
        obj.insert(QString("OrganizationNodeType"), ::OpenAPI::toJsonValue(m_organization_node_type));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("PageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

QString OAIListOrganizationPortfolioAccessInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIListOrganizationPortfolioAccessInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIListOrganizationPortfolioAccessInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIListOrganizationPortfolioAccessInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIListOrganizationPortfolioAccessInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAIListOrganizationPortfolioAccessInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAIListOrganizationPortfolioAccessInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAIListOrganizationPortfolioAccessInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

OAIOrganizationNodeType OAIListOrganizationPortfolioAccessInput::getOrganizationNodeType() const {
    return m_organization_node_type;
}
void OAIListOrganizationPortfolioAccessInput::setOrganizationNodeType(const OAIOrganizationNodeType &organization_node_type) {
    m_organization_node_type = organization_node_type;
    m_organization_node_type_isSet = true;
}

bool OAIListOrganizationPortfolioAccessInput::is_organization_node_type_Set() const{
    return m_organization_node_type_isSet;
}

bool OAIListOrganizationPortfolioAccessInput::is_organization_node_type_Valid() const{
    return m_organization_node_type_isValid;
}

QString OAIListOrganizationPortfolioAccessInput::getPageToken() const {
    return m_page_token;
}
void OAIListOrganizationPortfolioAccessInput::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIListOrganizationPortfolioAccessInput::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIListOrganizationPortfolioAccessInput::is_page_token_Valid() const{
    return m_page_token_isValid;
}

qint32 OAIListOrganizationPortfolioAccessInput::getPageSize() const {
    return m_page_size;
}
void OAIListOrganizationPortfolioAccessInput::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListOrganizationPortfolioAccessInput::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListOrganizationPortfolioAccessInput::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIListOrganizationPortfolioAccessInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_node_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListOrganizationPortfolioAccessInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portfolio_id_isValid && m_organization_node_type_isValid && true;
}

} // namespace OpenAPI
