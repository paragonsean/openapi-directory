/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProductViewOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProductViewOutput::OAIDescribeProductViewOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProductViewOutput::OAIDescribeProductViewOutput() {
    this->initializeModel();
}

OAIDescribeProductViewOutput::~OAIDescribeProductViewOutput() {}

void OAIDescribeProductViewOutput::initializeModel() {

    m_product_view_summary_isSet = false;
    m_product_view_summary_isValid = false;

    m_provisioning_artifacts_isSet = false;
    m_provisioning_artifacts_isValid = false;
}

void OAIDescribeProductViewOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProductViewOutput::fromJsonObject(QJsonObject json) {

    m_product_view_summary_isValid = ::OpenAPI::fromJsonValue(m_product_view_summary, json[QString("ProductViewSummary")]);
    m_product_view_summary_isSet = !json[QString("ProductViewSummary")].isNull() && m_product_view_summary_isValid;

    m_provisioning_artifacts_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifacts, json[QString("ProvisioningArtifacts")]);
    m_provisioning_artifacts_isSet = !json[QString("ProvisioningArtifacts")].isNull() && m_provisioning_artifacts_isValid;
}

QString OAIDescribeProductViewOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProductViewOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_product_view_summary.isSet()) {
        obj.insert(QString("ProductViewSummary"), ::OpenAPI::toJsonValue(m_product_view_summary));
    }
    if (m_provisioning_artifacts.isSet()) {
        obj.insert(QString("ProvisioningArtifacts"), ::OpenAPI::toJsonValue(m_provisioning_artifacts));
    }
    return obj;
}

OAIDescribeProductViewOutput_ProductViewSummary OAIDescribeProductViewOutput::getProductViewSummary() const {
    return m_product_view_summary;
}
void OAIDescribeProductViewOutput::setProductViewSummary(const OAIDescribeProductViewOutput_ProductViewSummary &product_view_summary) {
    m_product_view_summary = product_view_summary;
    m_product_view_summary_isSet = true;
}

bool OAIDescribeProductViewOutput::is_product_view_summary_Set() const{
    return m_product_view_summary_isSet;
}

bool OAIDescribeProductViewOutput::is_product_view_summary_Valid() const{
    return m_product_view_summary_isValid;
}

QList OAIDescribeProductViewOutput::getProvisioningArtifacts() const {
    return m_provisioning_artifacts;
}
void OAIDescribeProductViewOutput::setProvisioningArtifacts(const QList &provisioning_artifacts) {
    m_provisioning_artifacts = provisioning_artifacts;
    m_provisioning_artifacts_isSet = true;
}

bool OAIDescribeProductViewOutput::is_provisioning_artifacts_Set() const{
    return m_provisioning_artifacts_isSet;
}

bool OAIDescribeProductViewOutput::is_provisioning_artifacts_Valid() const{
    return m_provisioning_artifacts_isValid;
}

bool OAIDescribeProductViewOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_view_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProductViewOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
