/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminateProvisionedProductInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminateProvisionedProductInput::OAITerminateProvisionedProductInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminateProvisionedProductInput::OAITerminateProvisionedProductInput() {
    this->initializeModel();
}

OAITerminateProvisionedProductInput::~OAITerminateProvisionedProductInput() {}

void OAITerminateProvisionedProductInput::initializeModel() {

    m_provisioned_product_name_isSet = false;
    m_provisioned_product_name_isValid = false;

    m_provisioned_product_id_isSet = false;
    m_provisioned_product_id_isValid = false;

    m_terminate_token_isSet = false;
    m_terminate_token_isValid = false;

    m_ignore_errors_isSet = false;
    m_ignore_errors_isValid = false;

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_retain_physical_resources_isSet = false;
    m_retain_physical_resources_isValid = false;
}

void OAITerminateProvisionedProductInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminateProvisionedProductInput::fromJsonObject(QJsonObject json) {

    m_provisioned_product_name_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_name, json[QString("ProvisionedProductName")]);
    m_provisioned_product_name_isSet = !json[QString("ProvisionedProductName")].isNull() && m_provisioned_product_name_isValid;

    m_provisioned_product_id_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_id, json[QString("ProvisionedProductId")]);
    m_provisioned_product_id_isSet = !json[QString("ProvisionedProductId")].isNull() && m_provisioned_product_id_isValid;

    m_terminate_token_isValid = ::OpenAPI::fromJsonValue(m_terminate_token, json[QString("TerminateToken")]);
    m_terminate_token_isSet = !json[QString("TerminateToken")].isNull() && m_terminate_token_isValid;

    m_ignore_errors_isValid = ::OpenAPI::fromJsonValue(m_ignore_errors, json[QString("IgnoreErrors")]);
    m_ignore_errors_isSet = !json[QString("IgnoreErrors")].isNull() && m_ignore_errors_isValid;

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_retain_physical_resources_isValid = ::OpenAPI::fromJsonValue(m_retain_physical_resources, json[QString("RetainPhysicalResources")]);
    m_retain_physical_resources_isSet = !json[QString("RetainPhysicalResources")].isNull() && m_retain_physical_resources_isValid;
}

QString OAITerminateProvisionedProductInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminateProvisionedProductInput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioned_product_name_isSet) {
        obj.insert(QString("ProvisionedProductName"), ::OpenAPI::toJsonValue(m_provisioned_product_name));
    }
    if (m_provisioned_product_id_isSet) {
        obj.insert(QString("ProvisionedProductId"), ::OpenAPI::toJsonValue(m_provisioned_product_id));
    }
    if (m_terminate_token_isSet) {
        obj.insert(QString("TerminateToken"), ::OpenAPI::toJsonValue(m_terminate_token));
    }
    if (m_ignore_errors_isSet) {
        obj.insert(QString("IgnoreErrors"), ::OpenAPI::toJsonValue(m_ignore_errors));
    }
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_retain_physical_resources_isSet) {
        obj.insert(QString("RetainPhysicalResources"), ::OpenAPI::toJsonValue(m_retain_physical_resources));
    }
    return obj;
}

QString OAITerminateProvisionedProductInput::getProvisionedProductName() const {
    return m_provisioned_product_name;
}
void OAITerminateProvisionedProductInput::setProvisionedProductName(const QString &provisioned_product_name) {
    m_provisioned_product_name = provisioned_product_name;
    m_provisioned_product_name_isSet = true;
}

bool OAITerminateProvisionedProductInput::is_provisioned_product_name_Set() const{
    return m_provisioned_product_name_isSet;
}

bool OAITerminateProvisionedProductInput::is_provisioned_product_name_Valid() const{
    return m_provisioned_product_name_isValid;
}

QString OAITerminateProvisionedProductInput::getProvisionedProductId() const {
    return m_provisioned_product_id;
}
void OAITerminateProvisionedProductInput::setProvisionedProductId(const QString &provisioned_product_id) {
    m_provisioned_product_id = provisioned_product_id;
    m_provisioned_product_id_isSet = true;
}

bool OAITerminateProvisionedProductInput::is_provisioned_product_id_Set() const{
    return m_provisioned_product_id_isSet;
}

bool OAITerminateProvisionedProductInput::is_provisioned_product_id_Valid() const{
    return m_provisioned_product_id_isValid;
}

QString OAITerminateProvisionedProductInput::getTerminateToken() const {
    return m_terminate_token;
}
void OAITerminateProvisionedProductInput::setTerminateToken(const QString &terminate_token) {
    m_terminate_token = terminate_token;
    m_terminate_token_isSet = true;
}

bool OAITerminateProvisionedProductInput::is_terminate_token_Set() const{
    return m_terminate_token_isSet;
}

bool OAITerminateProvisionedProductInput::is_terminate_token_Valid() const{
    return m_terminate_token_isValid;
}

bool OAITerminateProvisionedProductInput::getIgnoreErrors() const {
    return m_ignore_errors;
}
void OAITerminateProvisionedProductInput::setIgnoreErrors(const bool &ignore_errors) {
    m_ignore_errors = ignore_errors;
    m_ignore_errors_isSet = true;
}

bool OAITerminateProvisionedProductInput::is_ignore_errors_Set() const{
    return m_ignore_errors_isSet;
}

bool OAITerminateProvisionedProductInput::is_ignore_errors_Valid() const{
    return m_ignore_errors_isValid;
}

QString OAITerminateProvisionedProductInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAITerminateProvisionedProductInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAITerminateProvisionedProductInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAITerminateProvisionedProductInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

bool OAITerminateProvisionedProductInput::getRetainPhysicalResources() const {
    return m_retain_physical_resources;
}
void OAITerminateProvisionedProductInput::setRetainPhysicalResources(const bool &retain_physical_resources) {
    m_retain_physical_resources = retain_physical_resources;
    m_retain_physical_resources_isSet = true;
}

bool OAITerminateProvisionedProductInput::is_retain_physical_resources_Set() const{
    return m_retain_physical_resources_isSet;
}

bool OAITerminateProvisionedProductInput::is_retain_physical_resources_Valid() const{
    return m_retain_physical_resources_isValid;
}

bool OAITerminateProvisionedProductInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioned_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminate_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_physical_resources_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminateProvisionedProductInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_terminate_token_isValid && true;
}

} // namespace OpenAPI
