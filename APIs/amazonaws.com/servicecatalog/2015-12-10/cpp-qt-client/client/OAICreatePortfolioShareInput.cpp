/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePortfolioShareInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePortfolioShareInput::OAICreatePortfolioShareInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePortfolioShareInput::OAICreatePortfolioShareInput() {
    this->initializeModel();
}

OAICreatePortfolioShareInput::~OAICreatePortfolioShareInput() {}

void OAICreatePortfolioShareInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_organization_node_isSet = false;
    m_organization_node_isValid = false;

    m_share_tag_options_isSet = false;
    m_share_tag_options_isValid = false;

    m_share_principals_isSet = false;
    m_share_principals_isValid = false;
}

void OAICreatePortfolioShareInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePortfolioShareInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_organization_node_isValid = ::OpenAPI::fromJsonValue(m_organization_node, json[QString("OrganizationNode")]);
    m_organization_node_isSet = !json[QString("OrganizationNode")].isNull() && m_organization_node_isValid;

    m_share_tag_options_isValid = ::OpenAPI::fromJsonValue(m_share_tag_options, json[QString("ShareTagOptions")]);
    m_share_tag_options_isSet = !json[QString("ShareTagOptions")].isNull() && m_share_tag_options_isValid;

    m_share_principals_isValid = ::OpenAPI::fromJsonValue(m_share_principals, json[QString("SharePrincipals")]);
    m_share_principals_isSet = !json[QString("SharePrincipals")].isNull() && m_share_principals_isValid;
}

QString OAICreatePortfolioShareInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePortfolioShareInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_organization_node.isSet()) {
        obj.insert(QString("OrganizationNode"), ::OpenAPI::toJsonValue(m_organization_node));
    }
    if (m_share_tag_options_isSet) {
        obj.insert(QString("ShareTagOptions"), ::OpenAPI::toJsonValue(m_share_tag_options));
    }
    if (m_share_principals_isSet) {
        obj.insert(QString("SharePrincipals"), ::OpenAPI::toJsonValue(m_share_principals));
    }
    return obj;
}

QString OAICreatePortfolioShareInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAICreatePortfolioShareInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAICreatePortfolioShareInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAICreatePortfolioShareInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAICreatePortfolioShareInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAICreatePortfolioShareInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAICreatePortfolioShareInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAICreatePortfolioShareInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

QString OAICreatePortfolioShareInput::getAccountId() const {
    return m_account_id;
}
void OAICreatePortfolioShareInput::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICreatePortfolioShareInput::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICreatePortfolioShareInput::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAICreatePortfolioShareInput_OrganizationNode OAICreatePortfolioShareInput::getOrganizationNode() const {
    return m_organization_node;
}
void OAICreatePortfolioShareInput::setOrganizationNode(const OAICreatePortfolioShareInput_OrganizationNode &organization_node) {
    m_organization_node = organization_node;
    m_organization_node_isSet = true;
}

bool OAICreatePortfolioShareInput::is_organization_node_Set() const{
    return m_organization_node_isSet;
}

bool OAICreatePortfolioShareInput::is_organization_node_Valid() const{
    return m_organization_node_isValid;
}

bool OAICreatePortfolioShareInput::getShareTagOptions() const {
    return m_share_tag_options;
}
void OAICreatePortfolioShareInput::setShareTagOptions(const bool &share_tag_options) {
    m_share_tag_options = share_tag_options;
    m_share_tag_options_isSet = true;
}

bool OAICreatePortfolioShareInput::is_share_tag_options_Set() const{
    return m_share_tag_options_isSet;
}

bool OAICreatePortfolioShareInput::is_share_tag_options_Valid() const{
    return m_share_tag_options_isValid;
}

bool OAICreatePortfolioShareInput::getSharePrincipals() const {
    return m_share_principals;
}
void OAICreatePortfolioShareInput::setSharePrincipals(const bool &share_principals) {
    m_share_principals = share_principals;
    m_share_principals_isSet = true;
}

bool OAICreatePortfolioShareInput::is_share_principals_Set() const{
    return m_share_principals_isSet;
}

bool OAICreatePortfolioShareInput::is_share_principals_Valid() const{
    return m_share_principals_isValid;
}

bool OAICreatePortfolioShareInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_tag_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_principals_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePortfolioShareInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portfolio_id_isValid && true;
}

} // namespace OpenAPI
