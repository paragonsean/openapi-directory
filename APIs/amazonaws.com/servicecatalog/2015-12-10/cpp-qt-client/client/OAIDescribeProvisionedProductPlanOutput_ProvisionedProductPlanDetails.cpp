/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails() {
    this->initializeModel();
}

OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::~OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails() {}

void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_path_id_isSet = false;
    m_path_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_plan_name_isSet = false;
    m_plan_name_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_provision_product_id_isSet = false;
    m_provision_product_id_isValid = false;

    m_provision_product_name_isSet = false;
    m_provision_product_name_isValid = false;

    m_plan_type_isSet = false;
    m_plan_type_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_notification_arns_isSet = false;
    m_notification_arns_isValid = false;

    m_provisioning_parameters_isSet = false;
    m_provisioning_parameters_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_path_id_isValid = ::OpenAPI::fromJsonValue(m_path_id, json[QString("PathId")]);
    m_path_id_isSet = !json[QString("PathId")].isNull() && m_path_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_plan_name_isValid = ::OpenAPI::fromJsonValue(m_plan_name, json[QString("PlanName")]);
    m_plan_name_isSet = !json[QString("PlanName")].isNull() && m_plan_name_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("PlanId")]);
    m_plan_id_isSet = !json[QString("PlanId")].isNull() && m_plan_id_isValid;

    m_provision_product_id_isValid = ::OpenAPI::fromJsonValue(m_provision_product_id, json[QString("ProvisionProductId")]);
    m_provision_product_id_isSet = !json[QString("ProvisionProductId")].isNull() && m_provision_product_id_isValid;

    m_provision_product_name_isValid = ::OpenAPI::fromJsonValue(m_provision_product_name, json[QString("ProvisionProductName")]);
    m_provision_product_name_isSet = !json[QString("ProvisionProductName")].isNull() && m_provision_product_name_isValid;

    m_plan_type_isValid = ::OpenAPI::fromJsonValue(m_plan_type, json[QString("PlanType")]);
    m_plan_type_isSet = !json[QString("PlanType")].isNull() && m_plan_type_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("UpdatedTime")]);
    m_updated_time_isSet = !json[QString("UpdatedTime")].isNull() && m_updated_time_isValid;

    m_notification_arns_isValid = ::OpenAPI::fromJsonValue(m_notification_arns, json[QString("NotificationArns")]);
    m_notification_arns_isSet = !json[QString("NotificationArns")].isNull() && m_notification_arns_isValid;

    m_provisioning_parameters_isValid = ::OpenAPI::fromJsonValue(m_provisioning_parameters, json[QString("ProvisioningParameters")]);
    m_provisioning_parameters_isSet = !json[QString("ProvisioningParameters")].isNull() && m_provisioning_parameters_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_path_id_isSet) {
        obj.insert(QString("PathId"), ::OpenAPI::toJsonValue(m_path_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_plan_name_isSet) {
        obj.insert(QString("PlanName"), ::OpenAPI::toJsonValue(m_plan_name));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("PlanId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_provision_product_id_isSet) {
        obj.insert(QString("ProvisionProductId"), ::OpenAPI::toJsonValue(m_provision_product_id));
    }
    if (m_provision_product_name_isSet) {
        obj.insert(QString("ProvisionProductName"), ::OpenAPI::toJsonValue(m_provision_product_name));
    }
    if (m_plan_type.isSet()) {
        obj.insert(QString("PlanType"), ::OpenAPI::toJsonValue(m_plan_type));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("UpdatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_notification_arns.isSet()) {
        obj.insert(QString("NotificationArns"), ::OpenAPI::toJsonValue(m_notification_arns));
    }
    if (m_provisioning_parameters.isSet()) {
        obj.insert(QString("ProvisioningParameters"), ::OpenAPI::toJsonValue(m_provisioning_parameters));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

QDateTime OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getPathId() const {
    return m_path_id;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setPathId(const QString &path_id) {
    m_path_id = path_id;
    m_path_id_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_path_id_Set() const{
    return m_path_id_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_path_id_Valid() const{
    return m_path_id_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getProductId() const {
    return m_product_id;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getPlanName() const {
    return m_plan_name;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setPlanName(const QString &plan_name) {
    m_plan_name = plan_name;
    m_plan_name_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_plan_name_Set() const{
    return m_plan_name_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_plan_name_Valid() const{
    return m_plan_name_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getPlanId() const {
    return m_plan_id;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getProvisionProductId() const {
    return m_provision_product_id;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setProvisionProductId(const QString &provision_product_id) {
    m_provision_product_id = provision_product_id;
    m_provision_product_id_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_provision_product_id_Set() const{
    return m_provision_product_id_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_provision_product_id_Valid() const{
    return m_provision_product_id_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getProvisionProductName() const {
    return m_provision_product_name;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setProvisionProductName(const QString &provision_product_name) {
    m_provision_product_name = provision_product_name;
    m_provision_product_name_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_provision_product_name_Set() const{
    return m_provision_product_name_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_provision_product_name_Valid() const{
    return m_provision_product_name_isValid;
}

OAIProvisionedProductPlanType OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getPlanType() const {
    return m_plan_type;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setPlanType(const OAIProvisionedProductPlanType &plan_type) {
    m_plan_type = plan_type;
    m_plan_type_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_plan_type_Set() const{
    return m_plan_type_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_plan_type_Valid() const{
    return m_plan_type_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

OAIProvisionedProductPlanStatus OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getStatus() const {
    return m_status;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setStatus(const OAIProvisionedProductPlanStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getUpdatedTime() const {
    return m_updated_time;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QList OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getNotificationArns() const {
    return m_notification_arns;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setNotificationArns(const QList &notification_arns) {
    m_notification_arns = notification_arns;
    m_notification_arns_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_notification_arns_Set() const{
    return m_notification_arns_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_notification_arns_Valid() const{
    return m_notification_arns_isValid;
}

QList OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getProvisioningParameters() const {
    return m_provisioning_parameters;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setProvisioningParameters(const QList &provisioning_parameters) {
    m_provisioning_parameters = provisioning_parameters;
    m_provisioning_parameters_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_provisioning_parameters_Set() const{
    return m_provisioning_parameters_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_provisioning_parameters_Valid() const{
    return m_provisioning_parameters_isValid;
}

QList OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getTags() const {
    return m_tags;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::getStatusMessage() const {
    return m_status_message;
}
void OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
