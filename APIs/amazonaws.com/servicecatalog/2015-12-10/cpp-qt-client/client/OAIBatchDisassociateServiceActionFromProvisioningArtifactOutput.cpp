/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput() {
    this->initializeModel();
}

OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::~OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput() {}

void OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::initializeModel() {

    m_failed_service_action_associations_isSet = false;
    m_failed_service_action_associations_isValid = false;
}

void OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::fromJsonObject(QJsonObject json) {

    m_failed_service_action_associations_isValid = ::OpenAPI::fromJsonValue(m_failed_service_action_associations, json[QString("FailedServiceActionAssociations")]);
    m_failed_service_action_associations_isSet = !json[QString("FailedServiceActionAssociations")].isNull() && m_failed_service_action_associations_isValid;
}

QString OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_service_action_associations.isSet()) {
        obj.insert(QString("FailedServiceActionAssociations"), ::OpenAPI::toJsonValue(m_failed_service_action_associations));
    }
    return obj;
}

QList OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::getFailedServiceActionAssociations() const {
    return m_failed_service_action_associations;
}
void OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::setFailedServiceActionAssociations(const QList &failed_service_action_associations) {
    m_failed_service_action_associations = failed_service_action_associations;
    m_failed_service_action_associations_isSet = true;
}

bool OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::is_failed_service_action_associations_Set() const{
    return m_failed_service_action_associations_isSet;
}

bool OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::is_failed_service_action_associations_Valid() const{
    return m_failed_service_action_associations_isValid;
}

bool OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_service_action_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
