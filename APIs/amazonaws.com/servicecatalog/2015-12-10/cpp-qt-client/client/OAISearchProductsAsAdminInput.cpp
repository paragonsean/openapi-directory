/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchProductsAsAdminInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchProductsAsAdminInput::OAISearchProductsAsAdminInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchProductsAsAdminInput::OAISearchProductsAsAdminInput() {
    this->initializeModel();
}

OAISearchProductsAsAdminInput::~OAISearchProductsAsAdminInput() {}

void OAISearchProductsAsAdminInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_product_source_isSet = false;
    m_product_source_isValid = false;
}

void OAISearchProductsAsAdminInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchProductsAsAdminInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("PageToken")]);
    m_page_token_isSet = !json[QString("PageToken")].isNull() && m_page_token_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_product_source_isValid = ::OpenAPI::fromJsonValue(m_product_source, json[QString("ProductSource")]);
    m_product_source_isSet = !json[QString("ProductSource")].isNull() && m_product_source_isValid;
}

QString OAISearchProductsAsAdminInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchProductsAsAdminInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("PageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_product_source.isSet()) {
        obj.insert(QString("ProductSource"), ::OpenAPI::toJsonValue(m_product_source));
    }
    return obj;
}

QString OAISearchProductsAsAdminInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAISearchProductsAsAdminInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAISearchProductsAsAdminInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAISearchProductsAsAdminInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAISearchProductsAsAdminInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAISearchProductsAsAdminInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAISearchProductsAsAdminInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAISearchProductsAsAdminInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

QMap OAISearchProductsAsAdminInput::getFilters() const {
    return m_filters;
}
void OAISearchProductsAsAdminInput::setFilters(const QMap &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchProductsAsAdminInput::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchProductsAsAdminInput::is_filters_Valid() const{
    return m_filters_isValid;
}

OAIProductViewSortBy OAISearchProductsAsAdminInput::getSortBy() const {
    return m_sort_by;
}
void OAISearchProductsAsAdminInput::setSortBy(const OAIProductViewSortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAISearchProductsAsAdminInput::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAISearchProductsAsAdminInput::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAISearchProductsAsAdminInput::getSortOrder() const {
    return m_sort_order;
}
void OAISearchProductsAsAdminInput::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISearchProductsAsAdminInput::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISearchProductsAsAdminInput::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAISearchProductsAsAdminInput::getPageToken() const {
    return m_page_token;
}
void OAISearchProductsAsAdminInput::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAISearchProductsAsAdminInput::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAISearchProductsAsAdminInput::is_page_token_Valid() const{
    return m_page_token_isValid;
}

qint32 OAISearchProductsAsAdminInput::getPageSize() const {
    return m_page_size;
}
void OAISearchProductsAsAdminInput::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAISearchProductsAsAdminInput::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAISearchProductsAsAdminInput::is_page_size_Valid() const{
    return m_page_size_isValid;
}

OAIProductSource OAISearchProductsAsAdminInput::getProductSource() const {
    return m_product_source;
}
void OAISearchProductsAsAdminInput::setProductSource(const OAIProductSource &product_source) {
    m_product_source = product_source;
    m_product_source_isSet = true;
}

bool OAISearchProductsAsAdminInput::is_product_source_Set() const{
    return m_product_source_isSet;
}

bool OAISearchProductsAsAdminInput::is_product_source_Valid() const{
    return m_product_source_isValid;
}

bool OAISearchProductsAsAdminInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchProductsAsAdminInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
