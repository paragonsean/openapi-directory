/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptPortfolioShareInput.h"
#include "OAIAssociateBudgetWithResourceInput.h"
#include "OAIAssociatePrincipalWithPortfolioInput.h"
#include "OAIAssociateProductWithPortfolioInput.h"
#include "OAIAssociateServiceActionWithProvisioningArtifactInput.h"
#include "OAIAssociateTagOptionWithResourceInput.h"
#include "OAIBatchAssociateServiceActionWithProvisioningArtifactInput.h"
#include "OAIBatchAssociateServiceActionWithProvisioningArtifactOutput.h"
#include "OAIBatchDisassociateServiceActionFromProvisioningArtifactInput.h"
#include "OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput.h"
#include "OAICopyProductInput.h"
#include "OAICopyProductOutput.h"
#include "OAICreateConstraintInput.h"
#include "OAICreateConstraintOutput.h"
#include "OAICreatePortfolioInput.h"
#include "OAICreatePortfolioOutput.h"
#include "OAICreatePortfolioShareInput.h"
#include "OAICreatePortfolioShareOutput.h"
#include "OAICreateProductInput.h"
#include "OAICreateProductOutput.h"
#include "OAICreateProvisionedProductPlanInput.h"
#include "OAICreateProvisionedProductPlanOutput.h"
#include "OAICreateProvisioningArtifactInput.h"
#include "OAICreateProvisioningArtifactOutput.h"
#include "OAICreateServiceActionInput.h"
#include "OAICreateServiceActionOutput.h"
#include "OAICreateTagOptionInput.h"
#include "OAICreateTagOptionOutput.h"
#include "OAIDeleteConstraintInput.h"
#include "OAIDeletePortfolioInput.h"
#include "OAIDeletePortfolioShareInput.h"
#include "OAIDeletePortfolioShareOutput.h"
#include "OAIDeleteProductInput.h"
#include "OAIDeleteProvisionedProductPlanInput.h"
#include "OAIDeleteProvisioningArtifactInput.h"
#include "OAIDeleteServiceActionInput.h"
#include "OAIDeleteTagOptionInput.h"
#include "OAIDescribeConstraintInput.h"
#include "OAIDescribeConstraintOutput.h"
#include "OAIDescribeCopyProductStatusInput.h"
#include "OAIDescribeCopyProductStatusOutput.h"
#include "OAIDescribePortfolioInput.h"
#include "OAIDescribePortfolioOutput.h"
#include "OAIDescribePortfolioShareStatusInput.h"
#include "OAIDescribePortfolioShareStatusOutput.h"
#include "OAIDescribePortfolioSharesInput.h"
#include "OAIDescribePortfolioSharesOutput.h"
#include "OAIDescribeProductAsAdminInput.h"
#include "OAIDescribeProductAsAdminOutput.h"
#include "OAIDescribeProductInput.h"
#include "OAIDescribeProductOutput.h"
#include "OAIDescribeProductViewInput.h"
#include "OAIDescribeProductViewOutput.h"
#include "OAIDescribeProvisionedProductInput.h"
#include "OAIDescribeProvisionedProductOutput.h"
#include "OAIDescribeProvisionedProductPlanInput.h"
#include "OAIDescribeProvisionedProductPlanOutput.h"
#include "OAIDescribeProvisioningArtifactInput.h"
#include "OAIDescribeProvisioningArtifactOutput.h"
#include "OAIDescribeProvisioningParametersInput.h"
#include "OAIDescribeProvisioningParametersOutput.h"
#include "OAIDescribeRecordInput.h"
#include "OAIDescribeRecordOutput.h"
#include "OAIDescribeServiceActionExecutionParametersInput.h"
#include "OAIDescribeServiceActionExecutionParametersOutput.h"
#include "OAIDescribeServiceActionInput.h"
#include "OAIDescribeServiceActionOutput.h"
#include "OAIDescribeTagOptionInput.h"
#include "OAIDescribeTagOptionOutput.h"
#include "OAIDisassociateBudgetFromResourceInput.h"
#include "OAIDisassociatePrincipalFromPortfolioInput.h"
#include "OAIDisassociateProductFromPortfolioInput.h"
#include "OAIDisassociateServiceActionFromProvisioningArtifactInput.h"
#include "OAIDisassociateTagOptionFromResourceInput.h"
#include "OAIExecuteProvisionedProductPlanInput.h"
#include "OAIExecuteProvisionedProductPlanOutput.h"
#include "OAIExecuteProvisionedProductServiceActionInput.h"
#include "OAIExecuteProvisionedProductServiceActionOutput.h"
#include "OAIGetAWSOrganizationsAccessStatusOutput.h"
#include "OAIGetProvisionedProductOutputsInput.h"
#include "OAIGetProvisionedProductOutputsOutput.h"
#include "OAIImportAsProvisionedProductInput.h"
#include "OAIImportAsProvisionedProductOutput.h"
#include "OAIListAcceptedPortfolioSharesInput.h"
#include "OAIListAcceptedPortfolioSharesOutput.h"
#include "OAIListBudgetsForResourceInput.h"
#include "OAIListBudgetsForResourceOutput.h"
#include "OAIListConstraintsForPortfolioInput.h"
#include "OAIListConstraintsForPortfolioOutput.h"
#include "OAIListLaunchPathsInput.h"
#include "OAIListLaunchPathsOutput.h"
#include "OAIListOrganizationPortfolioAccessInput.h"
#include "OAIListOrganizationPortfolioAccessOutput.h"
#include "OAIListPortfolioAccessInput.h"
#include "OAIListPortfolioAccessOutput.h"
#include "OAIListPortfoliosForProductInput.h"
#include "OAIListPortfoliosForProductOutput.h"
#include "OAIListPortfoliosInput.h"
#include "OAIListPortfoliosOutput.h"
#include "OAIListPrincipalsForPortfolioInput.h"
#include "OAIListPrincipalsForPortfolioOutput.h"
#include "OAIListProvisionedProductPlansInput.h"
#include "OAIListProvisionedProductPlansOutput.h"
#include "OAIListProvisioningArtifactsForServiceActionInput.h"
#include "OAIListProvisioningArtifactsForServiceActionOutput.h"
#include "OAIListProvisioningArtifactsInput.h"
#include "OAIListProvisioningArtifactsOutput.h"
#include "OAIListRecordHistoryInput.h"
#include "OAIListRecordHistoryOutput.h"
#include "OAIListResourcesForTagOptionInput.h"
#include "OAIListResourcesForTagOptionOutput.h"
#include "OAIListServiceActionsForProvisioningArtifactInput.h"
#include "OAIListServiceActionsForProvisioningArtifactOutput.h"
#include "OAIListServiceActionsInput.h"
#include "OAIListServiceActionsOutput.h"
#include "OAIListStackInstancesForProvisionedProductInput.h"
#include "OAIListStackInstancesForProvisionedProductOutput.h"
#include "OAIListTagOptionsInput.h"
#include "OAIListTagOptionsOutput.h"
#include "OAINotifyProvisionProductEngineWorkflowResultInput.h"
#include "OAINotifyTerminateProvisionedProductEngineWorkflowResultInput.h"
#include "OAINotifyUpdateProvisionedProductEngineWorkflowResultInput.h"
#include "OAIObject.h"
#include "OAIProvisionProductInput.h"
#include "OAIProvisionProductOutput.h"
#include "OAIRejectPortfolioShareInput.h"
#include "OAIScanProvisionedProductsInput.h"
#include "OAIScanProvisionedProductsOutput.h"
#include "OAISearchProductsAsAdminInput.h"
#include "OAISearchProductsAsAdminOutput.h"
#include "OAISearchProductsInput.h"
#include "OAISearchProductsOutput.h"
#include "OAISearchProvisionedProductsInput.h"
#include "OAISearchProvisionedProductsOutput.h"
#include "OAITerminateProvisionedProductInput.h"
#include "OAITerminateProvisionedProductOutput.h"
#include "OAIUpdateConstraintInput.h"
#include "OAIUpdateConstraintOutput.h"
#include "OAIUpdatePortfolioInput.h"
#include "OAIUpdatePortfolioOutput.h"
#include "OAIUpdatePortfolioShareInput.h"
#include "OAIUpdatePortfolioShareOutput.h"
#include "OAIUpdateProductInput.h"
#include "OAIUpdateProductOutput.h"
#include "OAIUpdateProvisionedProductInput.h"
#include "OAIUpdateProvisionedProductOutput.h"
#include "OAIUpdateProvisionedProductPropertiesInput.h"
#include "OAIUpdateProvisionedProductPropertiesOutput.h"
#include "OAIUpdateProvisioningArtifactInput.h"
#include "OAIUpdateProvisioningArtifactOutput.h"
#include "OAIUpdateServiceActionInput.h"
#include "OAIUpdateServiceActionOutput.h"
#include "OAIUpdateTagOptionInput.h"
#include "OAIUpdateTagOptionOutput.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_accept_portfolio_share_input OAIAcceptPortfolioShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void acceptPortfolioShare(const QString &x_amz_target, const OAIAcceptPortfolioShareInput &oai_accept_portfolio_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_budget_with_resource_input OAIAssociateBudgetWithResourceInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateBudgetWithResource(const QString &x_amz_target, const OAIAssociateBudgetWithResourceInput &oai_associate_budget_with_resource_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_principal_with_portfolio_input OAIAssociatePrincipalWithPortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associatePrincipalWithPortfolio(const QString &x_amz_target, const OAIAssociatePrincipalWithPortfolioInput &oai_associate_principal_with_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_product_with_portfolio_input OAIAssociateProductWithPortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateProductWithPortfolio(const QString &x_amz_target, const OAIAssociateProductWithPortfolioInput &oai_associate_product_with_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_service_action_with_provisioning_artifact_input OAIAssociateServiceActionWithProvisioningArtifactInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateServiceActionWithProvisioningArtifact(const QString &x_amz_target, const OAIAssociateServiceActionWithProvisioningArtifactInput &oai_associate_service_action_with_provisioning_artifact_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_tag_option_with_resource_input OAIAssociateTagOptionWithResourceInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateTagOptionWithResource(const QString &x_amz_target, const OAIAssociateTagOptionWithResourceInput &oai_associate_tag_option_with_resource_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_batch_associate_service_action_with_provisioning_artifact_input OAIBatchAssociateServiceActionWithProvisioningArtifactInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchAssociateServiceActionWithProvisioningArtifact(const QString &x_amz_target, const OAIBatchAssociateServiceActionWithProvisioningArtifactInput &oai_batch_associate_service_action_with_provisioning_artifact_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_batch_disassociate_service_action_from_provisioning_artifact_input OAIBatchDisassociateServiceActionFromProvisioningArtifactInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchDisassociateServiceActionFromProvisioningArtifact(const QString &x_amz_target, const OAIBatchDisassociateServiceActionFromProvisioningArtifactInput &oai_batch_disassociate_service_action_from_provisioning_artifact_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_copy_product_input OAICopyProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void copyProduct(const QString &x_amz_target, const OAICopyProductInput &oai_copy_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_constraint_input OAICreateConstraintInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createConstraint(const QString &x_amz_target, const OAICreateConstraintInput &oai_create_constraint_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_portfolio_input OAICreatePortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createPortfolio(const QString &x_amz_target, const OAICreatePortfolioInput &oai_create_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_portfolio_share_input OAICreatePortfolioShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createPortfolioShare(const QString &x_amz_target, const OAICreatePortfolioShareInput &oai_create_portfolio_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_product_input OAICreateProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createProduct(const QString &x_amz_target, const OAICreateProductInput &oai_create_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_provisioned_product_plan_input OAICreateProvisionedProductPlanInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createProvisionedProductPlan(const QString &x_amz_target, const OAICreateProvisionedProductPlanInput &oai_create_provisioned_product_plan_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_provisioning_artifact_input OAICreateProvisioningArtifactInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createProvisioningArtifact(const QString &x_amz_target, const OAICreateProvisioningArtifactInput &oai_create_provisioning_artifact_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_service_action_input OAICreateServiceActionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createServiceAction(const QString &x_amz_target, const OAICreateServiceActionInput &oai_create_service_action_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_tag_option_input OAICreateTagOptionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTagOption(const QString &x_amz_target, const OAICreateTagOptionInput &oai_create_tag_option_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_constraint_input OAIDeleteConstraintInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteConstraint(const QString &x_amz_target, const OAIDeleteConstraintInput &oai_delete_constraint_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_portfolio_input OAIDeletePortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deletePortfolio(const QString &x_amz_target, const OAIDeletePortfolioInput &oai_delete_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_portfolio_share_input OAIDeletePortfolioShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deletePortfolioShare(const QString &x_amz_target, const OAIDeletePortfolioShareInput &oai_delete_portfolio_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_product_input OAIDeleteProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteProduct(const QString &x_amz_target, const OAIDeleteProductInput &oai_delete_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_provisioned_product_plan_input OAIDeleteProvisionedProductPlanInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteProvisionedProductPlan(const QString &x_amz_target, const OAIDeleteProvisionedProductPlanInput &oai_delete_provisioned_product_plan_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_provisioning_artifact_input OAIDeleteProvisioningArtifactInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteProvisioningArtifact(const QString &x_amz_target, const OAIDeleteProvisioningArtifactInput &oai_delete_provisioning_artifact_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_service_action_input OAIDeleteServiceActionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteServiceAction(const QString &x_amz_target, const OAIDeleteServiceActionInput &oai_delete_service_action_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_tag_option_input OAIDeleteTagOptionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTagOption(const QString &x_amz_target, const OAIDeleteTagOptionInput &oai_delete_tag_option_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_constraint_input OAIDescribeConstraintInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeConstraint(const QString &x_amz_target, const OAIDescribeConstraintInput &oai_describe_constraint_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_copy_product_status_input OAIDescribeCopyProductStatusInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeCopyProductStatus(const QString &x_amz_target, const OAIDescribeCopyProductStatusInput &oai_describe_copy_product_status_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_portfolio_input OAIDescribePortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describePortfolio(const QString &x_amz_target, const OAIDescribePortfolioInput &oai_describe_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_portfolio_share_status_input OAIDescribePortfolioShareStatusInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describePortfolioShareStatus(const QString &x_amz_target, const OAIDescribePortfolioShareStatusInput &oai_describe_portfolio_share_status_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_portfolio_shares_input OAIDescribePortfolioSharesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void describePortfolioShares(const QString &x_amz_target, const OAIDescribePortfolioSharesInput &oai_describe_portfolio_shares_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_product_input OAIDescribeProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeProduct(const QString &x_amz_target, const OAIDescribeProductInput &oai_describe_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_product_as_admin_input OAIDescribeProductAsAdminInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeProductAsAdmin(const QString &x_amz_target, const OAIDescribeProductAsAdminInput &oai_describe_product_as_admin_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_product_view_input OAIDescribeProductViewInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeProductView(const QString &x_amz_target, const OAIDescribeProductViewInput &oai_describe_product_view_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_provisioned_product_input OAIDescribeProvisionedProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeProvisionedProduct(const QString &x_amz_target, const OAIDescribeProvisionedProductInput &oai_describe_provisioned_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_provisioned_product_plan_input OAIDescribeProvisionedProductPlanInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeProvisionedProductPlan(const QString &x_amz_target, const OAIDescribeProvisionedProductPlanInput &oai_describe_provisioned_product_plan_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_provisioning_artifact_input OAIDescribeProvisioningArtifactInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeProvisioningArtifact(const QString &x_amz_target, const OAIDescribeProvisioningArtifactInput &oai_describe_provisioning_artifact_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_provisioning_parameters_input OAIDescribeProvisioningParametersInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeProvisioningParameters(const QString &x_amz_target, const OAIDescribeProvisioningParametersInput &oai_describe_provisioning_parameters_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_record_input OAIDescribeRecordInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeRecord(const QString &x_amz_target, const OAIDescribeRecordInput &oai_describe_record_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_service_action_input OAIDescribeServiceActionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeServiceAction(const QString &x_amz_target, const OAIDescribeServiceActionInput &oai_describe_service_action_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_service_action_execution_parameters_input OAIDescribeServiceActionExecutionParametersInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeServiceActionExecutionParameters(const QString &x_amz_target, const OAIDescribeServiceActionExecutionParametersInput &oai_describe_service_action_execution_parameters_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_tag_option_input OAIDescribeTagOptionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTagOption(const QString &x_amz_target, const OAIDescribeTagOptionInput &oai_describe_tag_option_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disableAWSOrganizationsAccess(const QString &x_amz_target, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_budget_from_resource_input OAIDisassociateBudgetFromResourceInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateBudgetFromResource(const QString &x_amz_target, const OAIDisassociateBudgetFromResourceInput &oai_disassociate_budget_from_resource_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_principal_from_portfolio_input OAIDisassociatePrincipalFromPortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociatePrincipalFromPortfolio(const QString &x_amz_target, const OAIDisassociatePrincipalFromPortfolioInput &oai_disassociate_principal_from_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_product_from_portfolio_input OAIDisassociateProductFromPortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateProductFromPortfolio(const QString &x_amz_target, const OAIDisassociateProductFromPortfolioInput &oai_disassociate_product_from_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_service_action_from_provisioning_artifact_input OAIDisassociateServiceActionFromProvisioningArtifactInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateServiceActionFromProvisioningArtifact(const QString &x_amz_target, const OAIDisassociateServiceActionFromProvisioningArtifactInput &oai_disassociate_service_action_from_provisioning_artifact_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_tag_option_from_resource_input OAIDisassociateTagOptionFromResourceInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateTagOptionFromResource(const QString &x_amz_target, const OAIDisassociateTagOptionFromResourceInput &oai_disassociate_tag_option_from_resource_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void enableAWSOrganizationsAccess(const QString &x_amz_target, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_execute_provisioned_product_plan_input OAIExecuteProvisionedProductPlanInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void executeProvisionedProductPlan(const QString &x_amz_target, const OAIExecuteProvisionedProductPlanInput &oai_execute_provisioned_product_plan_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_execute_provisioned_product_service_action_input OAIExecuteProvisionedProductServiceActionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void executeProvisionedProductServiceAction(const QString &x_amz_target, const OAIExecuteProvisionedProductServiceActionInput &oai_execute_provisioned_product_service_action_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAWSOrganizationsAccessStatus(const QString &x_amz_target, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_provisioned_product_outputs_input OAIGetProvisionedProductOutputsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void getProvisionedProductOutputs(const QString &x_amz_target, const OAIGetProvisionedProductOutputsInput &oai_get_provisioned_product_outputs_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_import_as_provisioned_product_input OAIImportAsProvisionedProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void importAsProvisionedProduct(const QString &x_amz_target, const OAIImportAsProvisionedProductInput &oai_import_as_provisioned_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_accepted_portfolio_shares_input OAIListAcceptedPortfolioSharesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listAcceptedPortfolioShares(const QString &x_amz_target, const OAIListAcceptedPortfolioSharesInput &oai_list_accepted_portfolio_shares_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_budgets_for_resource_input OAIListBudgetsForResourceInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listBudgetsForResource(const QString &x_amz_target, const OAIListBudgetsForResourceInput &oai_list_budgets_for_resource_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_constraints_for_portfolio_input OAIListConstraintsForPortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConstraintsForPortfolio(const QString &x_amz_target, const OAIListConstraintsForPortfolioInput &oai_list_constraints_for_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_launch_paths_input OAIListLaunchPathsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listLaunchPaths(const QString &x_amz_target, const OAIListLaunchPathsInput &oai_list_launch_paths_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_organization_portfolio_access_input OAIListOrganizationPortfolioAccessInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listOrganizationPortfolioAccess(const QString &x_amz_target, const OAIListOrganizationPortfolioAccessInput &oai_list_organization_portfolio_access_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_portfolio_access_input OAIListPortfolioAccessInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listPortfolioAccess(const QString &x_amz_target, const OAIListPortfolioAccessInput &oai_list_portfolio_access_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_portfolios_input OAIListPortfoliosInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listPortfolios(const QString &x_amz_target, const OAIListPortfoliosInput &oai_list_portfolios_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_portfolios_for_product_input OAIListPortfoliosForProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listPortfoliosForProduct(const QString &x_amz_target, const OAIListPortfoliosForProductInput &oai_list_portfolios_for_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_principals_for_portfolio_input OAIListPrincipalsForPortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listPrincipalsForPortfolio(const QString &x_amz_target, const OAIListPrincipalsForPortfolioInput &oai_list_principals_for_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_provisioned_product_plans_input OAIListProvisionedProductPlansInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listProvisionedProductPlans(const QString &x_amz_target, const OAIListProvisionedProductPlansInput &oai_list_provisioned_product_plans_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_provisioning_artifacts_input OAIListProvisioningArtifactsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listProvisioningArtifacts(const QString &x_amz_target, const OAIListProvisioningArtifactsInput &oai_list_provisioning_artifacts_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_provisioning_artifacts_for_service_action_input OAIListProvisioningArtifactsForServiceActionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listProvisioningArtifactsForServiceAction(const QString &x_amz_target, const OAIListProvisioningArtifactsForServiceActionInput &oai_list_provisioning_artifacts_for_service_action_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_record_history_input OAIListRecordHistoryInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listRecordHistory(const QString &x_amz_target, const OAIListRecordHistoryInput &oai_list_record_history_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_resources_for_tag_option_input OAIListResourcesForTagOptionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listResourcesForTagOption(const QString &x_amz_target, const OAIListResourcesForTagOptionInput &oai_list_resources_for_tag_option_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_service_actions_input OAIListServiceActionsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listServiceActions(const QString &x_amz_target, const OAIListServiceActionsInput &oai_list_service_actions_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_service_actions_for_provisioning_artifact_input OAIListServiceActionsForProvisioningArtifactInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listServiceActionsForProvisioningArtifact(const QString &x_amz_target, const OAIListServiceActionsForProvisioningArtifactInput &oai_list_service_actions_for_provisioning_artifact_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_stack_instances_for_provisioned_product_input OAIListStackInstancesForProvisionedProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listStackInstancesForProvisionedProduct(const QString &x_amz_target, const OAIListStackInstancesForProvisionedProductInput &oai_list_stack_instances_for_provisioned_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tag_options_input OAIListTagOptionsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTagOptions(const QString &x_amz_target, const OAIListTagOptionsInput &oai_list_tag_options_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_notify_provision_product_engine_workflow_result_input OAINotifyProvisionProductEngineWorkflowResultInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void notifyProvisionProductEngineWorkflowResult(const QString &x_amz_target, const OAINotifyProvisionProductEngineWorkflowResultInput &oai_notify_provision_product_engine_workflow_result_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_notify_terminate_provisioned_product_engine_workflow_result_input OAINotifyTerminateProvisionedProductEngineWorkflowResultInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void notifyTerminateProvisionedProductEngineWorkflowResult(const QString &x_amz_target, const OAINotifyTerminateProvisionedProductEngineWorkflowResultInput &oai_notify_terminate_provisioned_product_engine_workflow_result_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_notify_update_provisioned_product_engine_workflow_result_input OAINotifyUpdateProvisionedProductEngineWorkflowResultInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void notifyUpdateProvisionedProductEngineWorkflowResult(const QString &x_amz_target, const OAINotifyUpdateProvisionedProductEngineWorkflowResultInput &oai_notify_update_provisioned_product_engine_workflow_result_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_provision_product_input OAIProvisionProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void provisionProduct(const QString &x_amz_target, const OAIProvisionProductInput &oai_provision_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_reject_portfolio_share_input OAIRejectPortfolioShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void rejectPortfolioShare(const QString &x_amz_target, const OAIRejectPortfolioShareInput &oai_reject_portfolio_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_scan_provisioned_products_input OAIScanProvisionedProductsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void scanProvisionedProducts(const QString &x_amz_target, const OAIScanProvisionedProductsInput &oai_scan_provisioned_products_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_search_products_input OAISearchProductsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void searchProducts(const QString &x_amz_target, const OAISearchProductsInput &oai_search_products_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_search_products_as_admin_input OAISearchProductsAsAdminInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void searchProductsAsAdmin(const QString &x_amz_target, const OAISearchProductsAsAdminInput &oai_search_products_as_admin_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_search_provisioned_products_input OAISearchProvisionedProductsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void searchProvisionedProducts(const QString &x_amz_target, const OAISearchProvisionedProductsInput &oai_search_provisioned_products_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_terminate_provisioned_product_input OAITerminateProvisionedProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void terminateProvisionedProduct(const QString &x_amz_target, const OAITerminateProvisionedProductInput &oai_terminate_provisioned_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_constraint_input OAIUpdateConstraintInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateConstraint(const QString &x_amz_target, const OAIUpdateConstraintInput &oai_update_constraint_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_portfolio_input OAIUpdatePortfolioInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updatePortfolio(const QString &x_amz_target, const OAIUpdatePortfolioInput &oai_update_portfolio_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_portfolio_share_input OAIUpdatePortfolioShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updatePortfolioShare(const QString &x_amz_target, const OAIUpdatePortfolioShareInput &oai_update_portfolio_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_product_input OAIUpdateProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateProduct(const QString &x_amz_target, const OAIUpdateProductInput &oai_update_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_provisioned_product_input OAIUpdateProvisionedProductInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateProvisionedProduct(const QString &x_amz_target, const OAIUpdateProvisionedProductInput &oai_update_provisioned_product_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_provisioned_product_properties_input OAIUpdateProvisionedProductPropertiesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateProvisionedProductProperties(const QString &x_amz_target, const OAIUpdateProvisionedProductPropertiesInput &oai_update_provisioned_product_properties_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_provisioning_artifact_input OAIUpdateProvisioningArtifactInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateProvisioningArtifact(const QString &x_amz_target, const OAIUpdateProvisioningArtifactInput &oai_update_provisioning_artifact_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_service_action_input OAIUpdateServiceActionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateServiceAction(const QString &x_amz_target, const OAIUpdateServiceActionInput &oai_update_service_action_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_tag_option_input OAIUpdateTagOptionInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTagOption(const QString &x_amz_target, const OAIUpdateTagOptionInput &oai_update_tag_option_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acceptPortfolioShareCallback(OAIHttpRequestWorker *worker);
    void associateBudgetWithResourceCallback(OAIHttpRequestWorker *worker);
    void associatePrincipalWithPortfolioCallback(OAIHttpRequestWorker *worker);
    void associateProductWithPortfolioCallback(OAIHttpRequestWorker *worker);
    void associateServiceActionWithProvisioningArtifactCallback(OAIHttpRequestWorker *worker);
    void associateTagOptionWithResourceCallback(OAIHttpRequestWorker *worker);
    void batchAssociateServiceActionWithProvisioningArtifactCallback(OAIHttpRequestWorker *worker);
    void batchDisassociateServiceActionFromProvisioningArtifactCallback(OAIHttpRequestWorker *worker);
    void copyProductCallback(OAIHttpRequestWorker *worker);
    void createConstraintCallback(OAIHttpRequestWorker *worker);
    void createPortfolioCallback(OAIHttpRequestWorker *worker);
    void createPortfolioShareCallback(OAIHttpRequestWorker *worker);
    void createProductCallback(OAIHttpRequestWorker *worker);
    void createProvisionedProductPlanCallback(OAIHttpRequestWorker *worker);
    void createProvisioningArtifactCallback(OAIHttpRequestWorker *worker);
    void createServiceActionCallback(OAIHttpRequestWorker *worker);
    void createTagOptionCallback(OAIHttpRequestWorker *worker);
    void deleteConstraintCallback(OAIHttpRequestWorker *worker);
    void deletePortfolioCallback(OAIHttpRequestWorker *worker);
    void deletePortfolioShareCallback(OAIHttpRequestWorker *worker);
    void deleteProductCallback(OAIHttpRequestWorker *worker);
    void deleteProvisionedProductPlanCallback(OAIHttpRequestWorker *worker);
    void deleteProvisioningArtifactCallback(OAIHttpRequestWorker *worker);
    void deleteServiceActionCallback(OAIHttpRequestWorker *worker);
    void deleteTagOptionCallback(OAIHttpRequestWorker *worker);
    void describeConstraintCallback(OAIHttpRequestWorker *worker);
    void describeCopyProductStatusCallback(OAIHttpRequestWorker *worker);
    void describePortfolioCallback(OAIHttpRequestWorker *worker);
    void describePortfolioShareStatusCallback(OAIHttpRequestWorker *worker);
    void describePortfolioSharesCallback(OAIHttpRequestWorker *worker);
    void describeProductCallback(OAIHttpRequestWorker *worker);
    void describeProductAsAdminCallback(OAIHttpRequestWorker *worker);
    void describeProductViewCallback(OAIHttpRequestWorker *worker);
    void describeProvisionedProductCallback(OAIHttpRequestWorker *worker);
    void describeProvisionedProductPlanCallback(OAIHttpRequestWorker *worker);
    void describeProvisioningArtifactCallback(OAIHttpRequestWorker *worker);
    void describeProvisioningParametersCallback(OAIHttpRequestWorker *worker);
    void describeRecordCallback(OAIHttpRequestWorker *worker);
    void describeServiceActionCallback(OAIHttpRequestWorker *worker);
    void describeServiceActionExecutionParametersCallback(OAIHttpRequestWorker *worker);
    void describeTagOptionCallback(OAIHttpRequestWorker *worker);
    void disableAWSOrganizationsAccessCallback(OAIHttpRequestWorker *worker);
    void disassociateBudgetFromResourceCallback(OAIHttpRequestWorker *worker);
    void disassociatePrincipalFromPortfolioCallback(OAIHttpRequestWorker *worker);
    void disassociateProductFromPortfolioCallback(OAIHttpRequestWorker *worker);
    void disassociateServiceActionFromProvisioningArtifactCallback(OAIHttpRequestWorker *worker);
    void disassociateTagOptionFromResourceCallback(OAIHttpRequestWorker *worker);
    void enableAWSOrganizationsAccessCallback(OAIHttpRequestWorker *worker);
    void executeProvisionedProductPlanCallback(OAIHttpRequestWorker *worker);
    void executeProvisionedProductServiceActionCallback(OAIHttpRequestWorker *worker);
    void getAWSOrganizationsAccessStatusCallback(OAIHttpRequestWorker *worker);
    void getProvisionedProductOutputsCallback(OAIHttpRequestWorker *worker);
    void importAsProvisionedProductCallback(OAIHttpRequestWorker *worker);
    void listAcceptedPortfolioSharesCallback(OAIHttpRequestWorker *worker);
    void listBudgetsForResourceCallback(OAIHttpRequestWorker *worker);
    void listConstraintsForPortfolioCallback(OAIHttpRequestWorker *worker);
    void listLaunchPathsCallback(OAIHttpRequestWorker *worker);
    void listOrganizationPortfolioAccessCallback(OAIHttpRequestWorker *worker);
    void listPortfolioAccessCallback(OAIHttpRequestWorker *worker);
    void listPortfoliosCallback(OAIHttpRequestWorker *worker);
    void listPortfoliosForProductCallback(OAIHttpRequestWorker *worker);
    void listPrincipalsForPortfolioCallback(OAIHttpRequestWorker *worker);
    void listProvisionedProductPlansCallback(OAIHttpRequestWorker *worker);
    void listProvisioningArtifactsCallback(OAIHttpRequestWorker *worker);
    void listProvisioningArtifactsForServiceActionCallback(OAIHttpRequestWorker *worker);
    void listRecordHistoryCallback(OAIHttpRequestWorker *worker);
    void listResourcesForTagOptionCallback(OAIHttpRequestWorker *worker);
    void listServiceActionsCallback(OAIHttpRequestWorker *worker);
    void listServiceActionsForProvisioningArtifactCallback(OAIHttpRequestWorker *worker);
    void listStackInstancesForProvisionedProductCallback(OAIHttpRequestWorker *worker);
    void listTagOptionsCallback(OAIHttpRequestWorker *worker);
    void notifyProvisionProductEngineWorkflowResultCallback(OAIHttpRequestWorker *worker);
    void notifyTerminateProvisionedProductEngineWorkflowResultCallback(OAIHttpRequestWorker *worker);
    void notifyUpdateProvisionedProductEngineWorkflowResultCallback(OAIHttpRequestWorker *worker);
    void provisionProductCallback(OAIHttpRequestWorker *worker);
    void rejectPortfolioShareCallback(OAIHttpRequestWorker *worker);
    void scanProvisionedProductsCallback(OAIHttpRequestWorker *worker);
    void searchProductsCallback(OAIHttpRequestWorker *worker);
    void searchProductsAsAdminCallback(OAIHttpRequestWorker *worker);
    void searchProvisionedProductsCallback(OAIHttpRequestWorker *worker);
    void terminateProvisionedProductCallback(OAIHttpRequestWorker *worker);
    void updateConstraintCallback(OAIHttpRequestWorker *worker);
    void updatePortfolioCallback(OAIHttpRequestWorker *worker);
    void updatePortfolioShareCallback(OAIHttpRequestWorker *worker);
    void updateProductCallback(OAIHttpRequestWorker *worker);
    void updateProvisionedProductCallback(OAIHttpRequestWorker *worker);
    void updateProvisionedProductPropertiesCallback(OAIHttpRequestWorker *worker);
    void updateProvisioningArtifactCallback(OAIHttpRequestWorker *worker);
    void updateServiceActionCallback(OAIHttpRequestWorker *worker);
    void updateTagOptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acceptPortfolioShareSignal(OAIObject summary);
    void associateBudgetWithResourceSignal(OAIObject summary);
    void associatePrincipalWithPortfolioSignal(OAIObject summary);
    void associateProductWithPortfolioSignal(OAIObject summary);
    void associateServiceActionWithProvisioningArtifactSignal(OAIObject summary);
    void associateTagOptionWithResourceSignal(OAIObject summary);
    void batchAssociateServiceActionWithProvisioningArtifactSignal(OAIBatchAssociateServiceActionWithProvisioningArtifactOutput summary);
    void batchDisassociateServiceActionFromProvisioningArtifactSignal(OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput summary);
    void copyProductSignal(OAICopyProductOutput summary);
    void createConstraintSignal(OAICreateConstraintOutput summary);
    void createPortfolioSignal(OAICreatePortfolioOutput summary);
    void createPortfolioShareSignal(OAICreatePortfolioShareOutput summary);
    void createProductSignal(OAICreateProductOutput summary);
    void createProvisionedProductPlanSignal(OAICreateProvisionedProductPlanOutput summary);
    void createProvisioningArtifactSignal(OAICreateProvisioningArtifactOutput summary);
    void createServiceActionSignal(OAICreateServiceActionOutput summary);
    void createTagOptionSignal(OAICreateTagOptionOutput summary);
    void deleteConstraintSignal(OAIObject summary);
    void deletePortfolioSignal(OAIObject summary);
    void deletePortfolioShareSignal(OAIDeletePortfolioShareOutput summary);
    void deleteProductSignal(OAIObject summary);
    void deleteProvisionedProductPlanSignal(OAIObject summary);
    void deleteProvisioningArtifactSignal(OAIObject summary);
    void deleteServiceActionSignal(OAIObject summary);
    void deleteTagOptionSignal(OAIObject summary);
    void describeConstraintSignal(OAIDescribeConstraintOutput summary);
    void describeCopyProductStatusSignal(OAIDescribeCopyProductStatusOutput summary);
    void describePortfolioSignal(OAIDescribePortfolioOutput summary);
    void describePortfolioShareStatusSignal(OAIDescribePortfolioShareStatusOutput summary);
    void describePortfolioSharesSignal(OAIDescribePortfolioSharesOutput summary);
    void describeProductSignal(OAIDescribeProductOutput summary);
    void describeProductAsAdminSignal(OAIDescribeProductAsAdminOutput summary);
    void describeProductViewSignal(OAIDescribeProductViewOutput summary);
    void describeProvisionedProductSignal(OAIDescribeProvisionedProductOutput summary);
    void describeProvisionedProductPlanSignal(OAIDescribeProvisionedProductPlanOutput summary);
    void describeProvisioningArtifactSignal(OAIDescribeProvisioningArtifactOutput summary);
    void describeProvisioningParametersSignal(OAIDescribeProvisioningParametersOutput summary);
    void describeRecordSignal(OAIDescribeRecordOutput summary);
    void describeServiceActionSignal(OAIDescribeServiceActionOutput summary);
    void describeServiceActionExecutionParametersSignal(OAIDescribeServiceActionExecutionParametersOutput summary);
    void describeTagOptionSignal(OAIDescribeTagOptionOutput summary);
    void disableAWSOrganizationsAccessSignal(OAIObject summary);
    void disassociateBudgetFromResourceSignal(OAIObject summary);
    void disassociatePrincipalFromPortfolioSignal(OAIObject summary);
    void disassociateProductFromPortfolioSignal(OAIObject summary);
    void disassociateServiceActionFromProvisioningArtifactSignal(OAIObject summary);
    void disassociateTagOptionFromResourceSignal(OAIObject summary);
    void enableAWSOrganizationsAccessSignal(OAIObject summary);
    void executeProvisionedProductPlanSignal(OAIExecuteProvisionedProductPlanOutput summary);
    void executeProvisionedProductServiceActionSignal(OAIExecuteProvisionedProductServiceActionOutput summary);
    void getAWSOrganizationsAccessStatusSignal(OAIGetAWSOrganizationsAccessStatusOutput summary);
    void getProvisionedProductOutputsSignal(OAIGetProvisionedProductOutputsOutput summary);
    void importAsProvisionedProductSignal(OAIImportAsProvisionedProductOutput summary);
    void listAcceptedPortfolioSharesSignal(OAIListAcceptedPortfolioSharesOutput summary);
    void listBudgetsForResourceSignal(OAIListBudgetsForResourceOutput summary);
    void listConstraintsForPortfolioSignal(OAIListConstraintsForPortfolioOutput summary);
    void listLaunchPathsSignal(OAIListLaunchPathsOutput summary);
    void listOrganizationPortfolioAccessSignal(OAIListOrganizationPortfolioAccessOutput summary);
    void listPortfolioAccessSignal(OAIListPortfolioAccessOutput summary);
    void listPortfoliosSignal(OAIListPortfoliosOutput summary);
    void listPortfoliosForProductSignal(OAIListPortfoliosForProductOutput summary);
    void listPrincipalsForPortfolioSignal(OAIListPrincipalsForPortfolioOutput summary);
    void listProvisionedProductPlansSignal(OAIListProvisionedProductPlansOutput summary);
    void listProvisioningArtifactsSignal(OAIListProvisioningArtifactsOutput summary);
    void listProvisioningArtifactsForServiceActionSignal(OAIListProvisioningArtifactsForServiceActionOutput summary);
    void listRecordHistorySignal(OAIListRecordHistoryOutput summary);
    void listResourcesForTagOptionSignal(OAIListResourcesForTagOptionOutput summary);
    void listServiceActionsSignal(OAIListServiceActionsOutput summary);
    void listServiceActionsForProvisioningArtifactSignal(OAIListServiceActionsForProvisioningArtifactOutput summary);
    void listStackInstancesForProvisionedProductSignal(OAIListStackInstancesForProvisionedProductOutput summary);
    void listTagOptionsSignal(OAIListTagOptionsOutput summary);
    void notifyProvisionProductEngineWorkflowResultSignal(OAIObject summary);
    void notifyTerminateProvisionedProductEngineWorkflowResultSignal(OAIObject summary);
    void notifyUpdateProvisionedProductEngineWorkflowResultSignal(OAIObject summary);
    void provisionProductSignal(OAIProvisionProductOutput summary);
    void rejectPortfolioShareSignal(OAIObject summary);
    void scanProvisionedProductsSignal(OAIScanProvisionedProductsOutput summary);
    void searchProductsSignal(OAISearchProductsOutput summary);
    void searchProductsAsAdminSignal(OAISearchProductsAsAdminOutput summary);
    void searchProvisionedProductsSignal(OAISearchProvisionedProductsOutput summary);
    void terminateProvisionedProductSignal(OAITerminateProvisionedProductOutput summary);
    void updateConstraintSignal(OAIUpdateConstraintOutput summary);
    void updatePortfolioSignal(OAIUpdatePortfolioOutput summary);
    void updatePortfolioShareSignal(OAIUpdatePortfolioShareOutput summary);
    void updateProductSignal(OAIUpdateProductOutput summary);
    void updateProvisionedProductSignal(OAIUpdateProvisionedProductOutput summary);
    void updateProvisionedProductPropertiesSignal(OAIUpdateProvisionedProductPropertiesOutput summary);
    void updateProvisioningArtifactSignal(OAIUpdateProvisioningArtifactOutput summary);
    void updateServiceActionSignal(OAIUpdateServiceActionOutput summary);
    void updateTagOptionSignal(OAIUpdateTagOptionOutput summary);


    void acceptPortfolioShareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void associateBudgetWithResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void associatePrincipalWithPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void associateProductWithPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void associateServiceActionWithProvisioningArtifactSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void associateTagOptionWithResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void batchAssociateServiceActionWithProvisioningArtifactSignalFull(OAIHttpRequestWorker *worker, OAIBatchAssociateServiceActionWithProvisioningArtifactOutput summary);
    void batchDisassociateServiceActionFromProvisioningArtifactSignalFull(OAIHttpRequestWorker *worker, OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput summary);
    void copyProductSignalFull(OAIHttpRequestWorker *worker, OAICopyProductOutput summary);
    void createConstraintSignalFull(OAIHttpRequestWorker *worker, OAICreateConstraintOutput summary);
    void createPortfolioSignalFull(OAIHttpRequestWorker *worker, OAICreatePortfolioOutput summary);
    void createPortfolioShareSignalFull(OAIHttpRequestWorker *worker, OAICreatePortfolioShareOutput summary);
    void createProductSignalFull(OAIHttpRequestWorker *worker, OAICreateProductOutput summary);
    void createProvisionedProductPlanSignalFull(OAIHttpRequestWorker *worker, OAICreateProvisionedProductPlanOutput summary);
    void createProvisioningArtifactSignalFull(OAIHttpRequestWorker *worker, OAICreateProvisioningArtifactOutput summary);
    void createServiceActionSignalFull(OAIHttpRequestWorker *worker, OAICreateServiceActionOutput summary);
    void createTagOptionSignalFull(OAIHttpRequestWorker *worker, OAICreateTagOptionOutput summary);
    void deleteConstraintSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deletePortfolioSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deletePortfolioShareSignalFull(OAIHttpRequestWorker *worker, OAIDeletePortfolioShareOutput summary);
    void deleteProductSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteProvisionedProductPlanSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteProvisioningArtifactSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteServiceActionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteTagOptionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void describeConstraintSignalFull(OAIHttpRequestWorker *worker, OAIDescribeConstraintOutput summary);
    void describeCopyProductStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribeCopyProductStatusOutput summary);
    void describePortfolioSignalFull(OAIHttpRequestWorker *worker, OAIDescribePortfolioOutput summary);
    void describePortfolioShareStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribePortfolioShareStatusOutput summary);
    void describePortfolioSharesSignalFull(OAIHttpRequestWorker *worker, OAIDescribePortfolioSharesOutput summary);
    void describeProductSignalFull(OAIHttpRequestWorker *worker, OAIDescribeProductOutput summary);
    void describeProductAsAdminSignalFull(OAIHttpRequestWorker *worker, OAIDescribeProductAsAdminOutput summary);
    void describeProductViewSignalFull(OAIHttpRequestWorker *worker, OAIDescribeProductViewOutput summary);
    void describeProvisionedProductSignalFull(OAIHttpRequestWorker *worker, OAIDescribeProvisionedProductOutput summary);
    void describeProvisionedProductPlanSignalFull(OAIHttpRequestWorker *worker, OAIDescribeProvisionedProductPlanOutput summary);
    void describeProvisioningArtifactSignalFull(OAIHttpRequestWorker *worker, OAIDescribeProvisioningArtifactOutput summary);
    void describeProvisioningParametersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeProvisioningParametersOutput summary);
    void describeRecordSignalFull(OAIHttpRequestWorker *worker, OAIDescribeRecordOutput summary);
    void describeServiceActionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeServiceActionOutput summary);
    void describeServiceActionExecutionParametersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeServiceActionExecutionParametersOutput summary);
    void describeTagOptionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTagOptionOutput summary);
    void disableAWSOrganizationsAccessSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disassociateBudgetFromResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disassociatePrincipalFromPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disassociateProductFromPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disassociateServiceActionFromProvisioningArtifactSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disassociateTagOptionFromResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void enableAWSOrganizationsAccessSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void executeProvisionedProductPlanSignalFull(OAIHttpRequestWorker *worker, OAIExecuteProvisionedProductPlanOutput summary);
    void executeProvisionedProductServiceActionSignalFull(OAIHttpRequestWorker *worker, OAIExecuteProvisionedProductServiceActionOutput summary);
    void getAWSOrganizationsAccessStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetAWSOrganizationsAccessStatusOutput summary);
    void getProvisionedProductOutputsSignalFull(OAIHttpRequestWorker *worker, OAIGetProvisionedProductOutputsOutput summary);
    void importAsProvisionedProductSignalFull(OAIHttpRequestWorker *worker, OAIImportAsProvisionedProductOutput summary);
    void listAcceptedPortfolioSharesSignalFull(OAIHttpRequestWorker *worker, OAIListAcceptedPortfolioSharesOutput summary);
    void listBudgetsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListBudgetsForResourceOutput summary);
    void listConstraintsForPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIListConstraintsForPortfolioOutput summary);
    void listLaunchPathsSignalFull(OAIHttpRequestWorker *worker, OAIListLaunchPathsOutput summary);
    void listOrganizationPortfolioAccessSignalFull(OAIHttpRequestWorker *worker, OAIListOrganizationPortfolioAccessOutput summary);
    void listPortfolioAccessSignalFull(OAIHttpRequestWorker *worker, OAIListPortfolioAccessOutput summary);
    void listPortfoliosSignalFull(OAIHttpRequestWorker *worker, OAIListPortfoliosOutput summary);
    void listPortfoliosForProductSignalFull(OAIHttpRequestWorker *worker, OAIListPortfoliosForProductOutput summary);
    void listPrincipalsForPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIListPrincipalsForPortfolioOutput summary);
    void listProvisionedProductPlansSignalFull(OAIHttpRequestWorker *worker, OAIListProvisionedProductPlansOutput summary);
    void listProvisioningArtifactsSignalFull(OAIHttpRequestWorker *worker, OAIListProvisioningArtifactsOutput summary);
    void listProvisioningArtifactsForServiceActionSignalFull(OAIHttpRequestWorker *worker, OAIListProvisioningArtifactsForServiceActionOutput summary);
    void listRecordHistorySignalFull(OAIHttpRequestWorker *worker, OAIListRecordHistoryOutput summary);
    void listResourcesForTagOptionSignalFull(OAIHttpRequestWorker *worker, OAIListResourcesForTagOptionOutput summary);
    void listServiceActionsSignalFull(OAIHttpRequestWorker *worker, OAIListServiceActionsOutput summary);
    void listServiceActionsForProvisioningArtifactSignalFull(OAIHttpRequestWorker *worker, OAIListServiceActionsForProvisioningArtifactOutput summary);
    void listStackInstancesForProvisionedProductSignalFull(OAIHttpRequestWorker *worker, OAIListStackInstancesForProvisionedProductOutput summary);
    void listTagOptionsSignalFull(OAIHttpRequestWorker *worker, OAIListTagOptionsOutput summary);
    void notifyProvisionProductEngineWorkflowResultSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void notifyTerminateProvisionedProductEngineWorkflowResultSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void notifyUpdateProvisionedProductEngineWorkflowResultSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void provisionProductSignalFull(OAIHttpRequestWorker *worker, OAIProvisionProductOutput summary);
    void rejectPortfolioShareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void scanProvisionedProductsSignalFull(OAIHttpRequestWorker *worker, OAIScanProvisionedProductsOutput summary);
    void searchProductsSignalFull(OAIHttpRequestWorker *worker, OAISearchProductsOutput summary);
    void searchProductsAsAdminSignalFull(OAIHttpRequestWorker *worker, OAISearchProductsAsAdminOutput summary);
    void searchProvisionedProductsSignalFull(OAIHttpRequestWorker *worker, OAISearchProvisionedProductsOutput summary);
    void terminateProvisionedProductSignalFull(OAIHttpRequestWorker *worker, OAITerminateProvisionedProductOutput summary);
    void updateConstraintSignalFull(OAIHttpRequestWorker *worker, OAIUpdateConstraintOutput summary);
    void updatePortfolioSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePortfolioOutput summary);
    void updatePortfolioShareSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePortfolioShareOutput summary);
    void updateProductSignalFull(OAIHttpRequestWorker *worker, OAIUpdateProductOutput summary);
    void updateProvisionedProductSignalFull(OAIHttpRequestWorker *worker, OAIUpdateProvisionedProductOutput summary);
    void updateProvisionedProductPropertiesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateProvisionedProductPropertiesOutput summary);
    void updateProvisioningArtifactSignalFull(OAIHttpRequestWorker *worker, OAIUpdateProvisioningArtifactOutput summary);
    void updateServiceActionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateServiceActionOutput summary);
    void updateTagOptionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTagOptionOutput summary);

    Q_DECL_DEPRECATED_X("Use acceptPortfolioShareSignalError() instead")
    void acceptPortfolioShareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptPortfolioShareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateBudgetWithResourceSignalError() instead")
    void associateBudgetWithResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateBudgetWithResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associatePrincipalWithPortfolioSignalError() instead")
    void associatePrincipalWithPortfolioSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePrincipalWithPortfolioSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateProductWithPortfolioSignalError() instead")
    void associateProductWithPortfolioSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateProductWithPortfolioSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateServiceActionWithProvisioningArtifactSignalError() instead")
    void associateServiceActionWithProvisioningArtifactSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateServiceActionWithProvisioningArtifactSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateTagOptionWithResourceSignalError() instead")
    void associateTagOptionWithResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateTagOptionWithResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchAssociateServiceActionWithProvisioningArtifactSignalError() instead")
    void batchAssociateServiceActionWithProvisioningArtifactSignalE(OAIBatchAssociateServiceActionWithProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchAssociateServiceActionWithProvisioningArtifactSignalError(OAIBatchAssociateServiceActionWithProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchDisassociateServiceActionFromProvisioningArtifactSignalError() instead")
    void batchDisassociateServiceActionFromProvisioningArtifactSignalE(OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDisassociateServiceActionFromProvisioningArtifactSignalError(OAIBatchDisassociateServiceActionFromProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyProductSignalError() instead")
    void copyProductSignalE(OAICopyProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyProductSignalError(OAICopyProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createConstraintSignalError() instead")
    void createConstraintSignalE(OAICreateConstraintOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConstraintSignalError(OAICreateConstraintOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPortfolioSignalError() instead")
    void createPortfolioSignalE(OAICreatePortfolioOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPortfolioSignalError(OAICreatePortfolioOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPortfolioShareSignalError() instead")
    void createPortfolioShareSignalE(OAICreatePortfolioShareOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPortfolioShareSignalError(OAICreatePortfolioShareOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProductSignalError() instead")
    void createProductSignalE(OAICreateProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProductSignalError(OAICreateProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProvisionedProductPlanSignalError() instead")
    void createProvisionedProductPlanSignalE(OAICreateProvisionedProductPlanOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProvisionedProductPlanSignalError(OAICreateProvisionedProductPlanOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProvisioningArtifactSignalError() instead")
    void createProvisioningArtifactSignalE(OAICreateProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProvisioningArtifactSignalError(OAICreateProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceActionSignalError() instead")
    void createServiceActionSignalE(OAICreateServiceActionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceActionSignalError(OAICreateServiceActionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTagOptionSignalError() instead")
    void createTagOptionSignalE(OAICreateTagOptionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTagOptionSignalError(OAICreateTagOptionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConstraintSignalError() instead")
    void deleteConstraintSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConstraintSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePortfolioSignalError() instead")
    void deletePortfolioSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePortfolioSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePortfolioShareSignalError() instead")
    void deletePortfolioShareSignalE(OAIDeletePortfolioShareOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePortfolioShareSignalError(OAIDeletePortfolioShareOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductSignalError() instead")
    void deleteProductSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProvisionedProductPlanSignalError() instead")
    void deleteProvisionedProductPlanSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProvisionedProductPlanSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProvisioningArtifactSignalError() instead")
    void deleteProvisioningArtifactSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProvisioningArtifactSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceActionSignalError() instead")
    void deleteServiceActionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceActionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTagOptionSignalError() instead")
    void deleteTagOptionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTagOptionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeConstraintSignalError() instead")
    void describeConstraintSignalE(OAIDescribeConstraintOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeConstraintSignalError(OAIDescribeConstraintOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCopyProductStatusSignalError() instead")
    void describeCopyProductStatusSignalE(OAIDescribeCopyProductStatusOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCopyProductStatusSignalError(OAIDescribeCopyProductStatusOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePortfolioSignalError() instead")
    void describePortfolioSignalE(OAIDescribePortfolioOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describePortfolioSignalError(OAIDescribePortfolioOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePortfolioShareStatusSignalError() instead")
    void describePortfolioShareStatusSignalE(OAIDescribePortfolioShareStatusOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describePortfolioShareStatusSignalError(OAIDescribePortfolioShareStatusOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePortfolioSharesSignalError() instead")
    void describePortfolioSharesSignalE(OAIDescribePortfolioSharesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describePortfolioSharesSignalError(OAIDescribePortfolioSharesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProductSignalError() instead")
    void describeProductSignalE(OAIDescribeProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProductSignalError(OAIDescribeProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProductAsAdminSignalError() instead")
    void describeProductAsAdminSignalE(OAIDescribeProductAsAdminOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProductAsAdminSignalError(OAIDescribeProductAsAdminOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProductViewSignalError() instead")
    void describeProductViewSignalE(OAIDescribeProductViewOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProductViewSignalError(OAIDescribeProductViewOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProvisionedProductSignalError() instead")
    void describeProvisionedProductSignalE(OAIDescribeProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProvisionedProductSignalError(OAIDescribeProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProvisionedProductPlanSignalError() instead")
    void describeProvisionedProductPlanSignalE(OAIDescribeProvisionedProductPlanOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProvisionedProductPlanSignalError(OAIDescribeProvisionedProductPlanOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProvisioningArtifactSignalError() instead")
    void describeProvisioningArtifactSignalE(OAIDescribeProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProvisioningArtifactSignalError(OAIDescribeProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProvisioningParametersSignalError() instead")
    void describeProvisioningParametersSignalE(OAIDescribeProvisioningParametersOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProvisioningParametersSignalError(OAIDescribeProvisioningParametersOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeRecordSignalError() instead")
    void describeRecordSignalE(OAIDescribeRecordOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeRecordSignalError(OAIDescribeRecordOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeServiceActionSignalError() instead")
    void describeServiceActionSignalE(OAIDescribeServiceActionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeServiceActionSignalError(OAIDescribeServiceActionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeServiceActionExecutionParametersSignalError() instead")
    void describeServiceActionExecutionParametersSignalE(OAIDescribeServiceActionExecutionParametersOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeServiceActionExecutionParametersSignalError(OAIDescribeServiceActionExecutionParametersOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTagOptionSignalError() instead")
    void describeTagOptionSignalE(OAIDescribeTagOptionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTagOptionSignalError(OAIDescribeTagOptionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableAWSOrganizationsAccessSignalError() instead")
    void disableAWSOrganizationsAccessSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableAWSOrganizationsAccessSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateBudgetFromResourceSignalError() instead")
    void disassociateBudgetFromResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateBudgetFromResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociatePrincipalFromPortfolioSignalError() instead")
    void disassociatePrincipalFromPortfolioSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociatePrincipalFromPortfolioSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateProductFromPortfolioSignalError() instead")
    void disassociateProductFromPortfolioSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateProductFromPortfolioSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateServiceActionFromProvisioningArtifactSignalError() instead")
    void disassociateServiceActionFromProvisioningArtifactSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateServiceActionFromProvisioningArtifactSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateTagOptionFromResourceSignalError() instead")
    void disassociateTagOptionFromResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateTagOptionFromResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAWSOrganizationsAccessSignalError() instead")
    void enableAWSOrganizationsAccessSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableAWSOrganizationsAccessSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeProvisionedProductPlanSignalError() instead")
    void executeProvisionedProductPlanSignalE(OAIExecuteProvisionedProductPlanOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void executeProvisionedProductPlanSignalError(OAIExecuteProvisionedProductPlanOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeProvisionedProductServiceActionSignalError() instead")
    void executeProvisionedProductServiceActionSignalE(OAIExecuteProvisionedProductServiceActionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void executeProvisionedProductServiceActionSignalError(OAIExecuteProvisionedProductServiceActionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAWSOrganizationsAccessStatusSignalError() instead")
    void getAWSOrganizationsAccessStatusSignalE(OAIGetAWSOrganizationsAccessStatusOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAWSOrganizationsAccessStatusSignalError(OAIGetAWSOrganizationsAccessStatusOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvisionedProductOutputsSignalError() instead")
    void getProvisionedProductOutputsSignalE(OAIGetProvisionedProductOutputsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvisionedProductOutputsSignalError(OAIGetProvisionedProductOutputsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importAsProvisionedProductSignalError() instead")
    void importAsProvisionedProductSignalE(OAIImportAsProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importAsProvisionedProductSignalError(OAIImportAsProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAcceptedPortfolioSharesSignalError() instead")
    void listAcceptedPortfolioSharesSignalE(OAIListAcceptedPortfolioSharesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAcceptedPortfolioSharesSignalError(OAIListAcceptedPortfolioSharesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBudgetsForResourceSignalError() instead")
    void listBudgetsForResourceSignalE(OAIListBudgetsForResourceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBudgetsForResourceSignalError(OAIListBudgetsForResourceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConstraintsForPortfolioSignalError() instead")
    void listConstraintsForPortfolioSignalE(OAIListConstraintsForPortfolioOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConstraintsForPortfolioSignalError(OAIListConstraintsForPortfolioOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLaunchPathsSignalError() instead")
    void listLaunchPathsSignalE(OAIListLaunchPathsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLaunchPathsSignalError(OAIListLaunchPathsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrganizationPortfolioAccessSignalError() instead")
    void listOrganizationPortfolioAccessSignalE(OAIListOrganizationPortfolioAccessOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationPortfolioAccessSignalError(OAIListOrganizationPortfolioAccessOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPortfolioAccessSignalError() instead")
    void listPortfolioAccessSignalE(OAIListPortfolioAccessOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPortfolioAccessSignalError(OAIListPortfolioAccessOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPortfoliosSignalError() instead")
    void listPortfoliosSignalE(OAIListPortfoliosOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPortfoliosSignalError(OAIListPortfoliosOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPortfoliosForProductSignalError() instead")
    void listPortfoliosForProductSignalE(OAIListPortfoliosForProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPortfoliosForProductSignalError(OAIListPortfoliosForProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPrincipalsForPortfolioSignalError() instead")
    void listPrincipalsForPortfolioSignalE(OAIListPrincipalsForPortfolioOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPrincipalsForPortfolioSignalError(OAIListPrincipalsForPortfolioOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProvisionedProductPlansSignalError() instead")
    void listProvisionedProductPlansSignalE(OAIListProvisionedProductPlansOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listProvisionedProductPlansSignalError(OAIListProvisionedProductPlansOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProvisioningArtifactsSignalError() instead")
    void listProvisioningArtifactsSignalE(OAIListProvisioningArtifactsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listProvisioningArtifactsSignalError(OAIListProvisioningArtifactsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProvisioningArtifactsForServiceActionSignalError() instead")
    void listProvisioningArtifactsForServiceActionSignalE(OAIListProvisioningArtifactsForServiceActionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listProvisioningArtifactsForServiceActionSignalError(OAIListProvisioningArtifactsForServiceActionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecordHistorySignalError() instead")
    void listRecordHistorySignalE(OAIListRecordHistoryOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecordHistorySignalError(OAIListRecordHistoryOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResourcesForTagOptionSignalError() instead")
    void listResourcesForTagOptionSignalE(OAIListResourcesForTagOptionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourcesForTagOptionSignalError(OAIListResourcesForTagOptionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceActionsSignalError() instead")
    void listServiceActionsSignalE(OAIListServiceActionsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceActionsSignalError(OAIListServiceActionsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceActionsForProvisioningArtifactSignalError() instead")
    void listServiceActionsForProvisioningArtifactSignalE(OAIListServiceActionsForProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceActionsForProvisioningArtifactSignalError(OAIListServiceActionsForProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStackInstancesForProvisionedProductSignalError() instead")
    void listStackInstancesForProvisionedProductSignalE(OAIListStackInstancesForProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStackInstancesForProvisionedProductSignalError(OAIListStackInstancesForProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagOptionsSignalError() instead")
    void listTagOptionsSignalE(OAIListTagOptionsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagOptionsSignalError(OAIListTagOptionsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyProvisionProductEngineWorkflowResultSignalError() instead")
    void notifyProvisionProductEngineWorkflowResultSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyProvisionProductEngineWorkflowResultSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyTerminateProvisionedProductEngineWorkflowResultSignalError() instead")
    void notifyTerminateProvisionedProductEngineWorkflowResultSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyTerminateProvisionedProductEngineWorkflowResultSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyUpdateProvisionedProductEngineWorkflowResultSignalError() instead")
    void notifyUpdateProvisionedProductEngineWorkflowResultSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyUpdateProvisionedProductEngineWorkflowResultSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionProductSignalError() instead")
    void provisionProductSignalE(OAIProvisionProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionProductSignalError(OAIProvisionProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectPortfolioShareSignalError() instead")
    void rejectPortfolioShareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectPortfolioShareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scanProvisionedProductsSignalError() instead")
    void scanProvisionedProductsSignalE(OAIScanProvisionedProductsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scanProvisionedProductsSignalError(OAIScanProvisionedProductsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProductsSignalError() instead")
    void searchProductsSignalE(OAISearchProductsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProductsSignalError(OAISearchProductsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProductsAsAdminSignalError() instead")
    void searchProductsAsAdminSignalE(OAISearchProductsAsAdminOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProductsAsAdminSignalError(OAISearchProductsAsAdminOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProvisionedProductsSignalError() instead")
    void searchProvisionedProductsSignalE(OAISearchProvisionedProductsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProvisionedProductsSignalError(OAISearchProvisionedProductsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use terminateProvisionedProductSignalError() instead")
    void terminateProvisionedProductSignalE(OAITerminateProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void terminateProvisionedProductSignalError(OAITerminateProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConstraintSignalError() instead")
    void updateConstraintSignalE(OAIUpdateConstraintOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConstraintSignalError(OAIUpdateConstraintOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePortfolioSignalError() instead")
    void updatePortfolioSignalE(OAIUpdatePortfolioOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePortfolioSignalError(OAIUpdatePortfolioOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePortfolioShareSignalError() instead")
    void updatePortfolioShareSignalE(OAIUpdatePortfolioShareOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePortfolioShareSignalError(OAIUpdatePortfolioShareOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProductSignalError() instead")
    void updateProductSignalE(OAIUpdateProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProductSignalError(OAIUpdateProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProvisionedProductSignalError() instead")
    void updateProvisionedProductSignalE(OAIUpdateProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProvisionedProductSignalError(OAIUpdateProvisionedProductOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProvisionedProductPropertiesSignalError() instead")
    void updateProvisionedProductPropertiesSignalE(OAIUpdateProvisionedProductPropertiesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProvisionedProductPropertiesSignalError(OAIUpdateProvisionedProductPropertiesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProvisioningArtifactSignalError() instead")
    void updateProvisioningArtifactSignalE(OAIUpdateProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProvisioningArtifactSignalError(OAIUpdateProvisioningArtifactOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceActionSignalError() instead")
    void updateServiceActionSignalE(OAIUpdateServiceActionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceActionSignalError(OAIUpdateServiceActionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTagOptionSignalError() instead")
    void updateTagOptionSignalE(OAIUpdateTagOptionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTagOptionSignalError(OAIUpdateTagOptionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acceptPortfolioShareSignalErrorFull() instead")
    void acceptPortfolioShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptPortfolioShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateBudgetWithResourceSignalErrorFull() instead")
    void associateBudgetWithResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateBudgetWithResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associatePrincipalWithPortfolioSignalErrorFull() instead")
    void associatePrincipalWithPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePrincipalWithPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateProductWithPortfolioSignalErrorFull() instead")
    void associateProductWithPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateProductWithPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateServiceActionWithProvisioningArtifactSignalErrorFull() instead")
    void associateServiceActionWithProvisioningArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateServiceActionWithProvisioningArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateTagOptionWithResourceSignalErrorFull() instead")
    void associateTagOptionWithResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateTagOptionWithResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchAssociateServiceActionWithProvisioningArtifactSignalErrorFull() instead")
    void batchAssociateServiceActionWithProvisioningArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchAssociateServiceActionWithProvisioningArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchDisassociateServiceActionFromProvisioningArtifactSignalErrorFull() instead")
    void batchDisassociateServiceActionFromProvisioningArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDisassociateServiceActionFromProvisioningArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyProductSignalErrorFull() instead")
    void copyProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createConstraintSignalErrorFull() instead")
    void createConstraintSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConstraintSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPortfolioSignalErrorFull() instead")
    void createPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPortfolioShareSignalErrorFull() instead")
    void createPortfolioShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPortfolioShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProductSignalErrorFull() instead")
    void createProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProvisionedProductPlanSignalErrorFull() instead")
    void createProvisionedProductPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProvisionedProductPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProvisioningArtifactSignalErrorFull() instead")
    void createProvisioningArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProvisioningArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceActionSignalErrorFull() instead")
    void createServiceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTagOptionSignalErrorFull() instead")
    void createTagOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTagOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConstraintSignalErrorFull() instead")
    void deleteConstraintSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConstraintSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePortfolioSignalErrorFull() instead")
    void deletePortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePortfolioShareSignalErrorFull() instead")
    void deletePortfolioShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePortfolioShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductSignalErrorFull() instead")
    void deleteProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProvisionedProductPlanSignalErrorFull() instead")
    void deleteProvisionedProductPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProvisionedProductPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProvisioningArtifactSignalErrorFull() instead")
    void deleteProvisioningArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProvisioningArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceActionSignalErrorFull() instead")
    void deleteServiceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTagOptionSignalErrorFull() instead")
    void deleteTagOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTagOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeConstraintSignalErrorFull() instead")
    void describeConstraintSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeConstraintSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCopyProductStatusSignalErrorFull() instead")
    void describeCopyProductStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCopyProductStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePortfolioSignalErrorFull() instead")
    void describePortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describePortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePortfolioShareStatusSignalErrorFull() instead")
    void describePortfolioShareStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describePortfolioShareStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePortfolioSharesSignalErrorFull() instead")
    void describePortfolioSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describePortfolioSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProductSignalErrorFull() instead")
    void describeProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProductAsAdminSignalErrorFull() instead")
    void describeProductAsAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProductAsAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProductViewSignalErrorFull() instead")
    void describeProductViewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProductViewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProvisionedProductSignalErrorFull() instead")
    void describeProvisionedProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProvisionedProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProvisionedProductPlanSignalErrorFull() instead")
    void describeProvisionedProductPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProvisionedProductPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProvisioningArtifactSignalErrorFull() instead")
    void describeProvisioningArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProvisioningArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeProvisioningParametersSignalErrorFull() instead")
    void describeProvisioningParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeProvisioningParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeRecordSignalErrorFull() instead")
    void describeRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeServiceActionSignalErrorFull() instead")
    void describeServiceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeServiceActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeServiceActionExecutionParametersSignalErrorFull() instead")
    void describeServiceActionExecutionParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeServiceActionExecutionParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTagOptionSignalErrorFull() instead")
    void describeTagOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTagOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableAWSOrganizationsAccessSignalErrorFull() instead")
    void disableAWSOrganizationsAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableAWSOrganizationsAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateBudgetFromResourceSignalErrorFull() instead")
    void disassociateBudgetFromResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateBudgetFromResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociatePrincipalFromPortfolioSignalErrorFull() instead")
    void disassociatePrincipalFromPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociatePrincipalFromPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateProductFromPortfolioSignalErrorFull() instead")
    void disassociateProductFromPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateProductFromPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateServiceActionFromProvisioningArtifactSignalErrorFull() instead")
    void disassociateServiceActionFromProvisioningArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateServiceActionFromProvisioningArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateTagOptionFromResourceSignalErrorFull() instead")
    void disassociateTagOptionFromResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateTagOptionFromResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAWSOrganizationsAccessSignalErrorFull() instead")
    void enableAWSOrganizationsAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableAWSOrganizationsAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeProvisionedProductPlanSignalErrorFull() instead")
    void executeProvisionedProductPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void executeProvisionedProductPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeProvisionedProductServiceActionSignalErrorFull() instead")
    void executeProvisionedProductServiceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void executeProvisionedProductServiceActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAWSOrganizationsAccessStatusSignalErrorFull() instead")
    void getAWSOrganizationsAccessStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAWSOrganizationsAccessStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvisionedProductOutputsSignalErrorFull() instead")
    void getProvisionedProductOutputsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvisionedProductOutputsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importAsProvisionedProductSignalErrorFull() instead")
    void importAsProvisionedProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importAsProvisionedProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAcceptedPortfolioSharesSignalErrorFull() instead")
    void listAcceptedPortfolioSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAcceptedPortfolioSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBudgetsForResourceSignalErrorFull() instead")
    void listBudgetsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBudgetsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConstraintsForPortfolioSignalErrorFull() instead")
    void listConstraintsForPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConstraintsForPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLaunchPathsSignalErrorFull() instead")
    void listLaunchPathsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLaunchPathsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrganizationPortfolioAccessSignalErrorFull() instead")
    void listOrganizationPortfolioAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationPortfolioAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPortfolioAccessSignalErrorFull() instead")
    void listPortfolioAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPortfolioAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPortfoliosSignalErrorFull() instead")
    void listPortfoliosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPortfoliosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPortfoliosForProductSignalErrorFull() instead")
    void listPortfoliosForProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPortfoliosForProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPrincipalsForPortfolioSignalErrorFull() instead")
    void listPrincipalsForPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPrincipalsForPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProvisionedProductPlansSignalErrorFull() instead")
    void listProvisionedProductPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProvisionedProductPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProvisioningArtifactsSignalErrorFull() instead")
    void listProvisioningArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProvisioningArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProvisioningArtifactsForServiceActionSignalErrorFull() instead")
    void listProvisioningArtifactsForServiceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProvisioningArtifactsForServiceActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecordHistorySignalErrorFull() instead")
    void listRecordHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecordHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResourcesForTagOptionSignalErrorFull() instead")
    void listResourcesForTagOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourcesForTagOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceActionsSignalErrorFull() instead")
    void listServiceActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceActionsForProvisioningArtifactSignalErrorFull() instead")
    void listServiceActionsForProvisioningArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceActionsForProvisioningArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStackInstancesForProvisionedProductSignalErrorFull() instead")
    void listStackInstancesForProvisionedProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStackInstancesForProvisionedProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagOptionsSignalErrorFull() instead")
    void listTagOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyProvisionProductEngineWorkflowResultSignalErrorFull() instead")
    void notifyProvisionProductEngineWorkflowResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyProvisionProductEngineWorkflowResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyTerminateProvisionedProductEngineWorkflowResultSignalErrorFull() instead")
    void notifyTerminateProvisionedProductEngineWorkflowResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyTerminateProvisionedProductEngineWorkflowResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyUpdateProvisionedProductEngineWorkflowResultSignalErrorFull() instead")
    void notifyUpdateProvisionedProductEngineWorkflowResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyUpdateProvisionedProductEngineWorkflowResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionProductSignalErrorFull() instead")
    void provisionProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectPortfolioShareSignalErrorFull() instead")
    void rejectPortfolioShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectPortfolioShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scanProvisionedProductsSignalErrorFull() instead")
    void scanProvisionedProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scanProvisionedProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProductsSignalErrorFull() instead")
    void searchProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProductsAsAdminSignalErrorFull() instead")
    void searchProductsAsAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProductsAsAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchProvisionedProductsSignalErrorFull() instead")
    void searchProvisionedProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchProvisionedProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use terminateProvisionedProductSignalErrorFull() instead")
    void terminateProvisionedProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void terminateProvisionedProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConstraintSignalErrorFull() instead")
    void updateConstraintSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConstraintSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePortfolioSignalErrorFull() instead")
    void updatePortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePortfolioShareSignalErrorFull() instead")
    void updatePortfolioShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePortfolioShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProductSignalErrorFull() instead")
    void updateProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProvisionedProductSignalErrorFull() instead")
    void updateProvisionedProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProvisionedProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProvisionedProductPropertiesSignalErrorFull() instead")
    void updateProvisionedProductPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProvisionedProductPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProvisioningArtifactSignalErrorFull() instead")
    void updateProvisioningArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProvisioningArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceActionSignalErrorFull() instead")
    void updateServiceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTagOptionSignalErrorFull() instead")
    void updateTagOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTagOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
