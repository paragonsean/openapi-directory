/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePortfolioShareStatusOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePortfolioShareStatusOutput::OAIDescribePortfolioShareStatusOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePortfolioShareStatusOutput::OAIDescribePortfolioShareStatusOutput() {
    this->initializeModel();
}

OAIDescribePortfolioShareStatusOutput::~OAIDescribePortfolioShareStatusOutput() {}

void OAIDescribePortfolioShareStatusOutput::initializeModel() {

    m_portfolio_share_token_isSet = false;
    m_portfolio_share_token_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_organization_node_value_isSet = false;
    m_organization_node_value_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_share_details_isSet = false;
    m_share_details_isValid = false;
}

void OAIDescribePortfolioShareStatusOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePortfolioShareStatusOutput::fromJsonObject(QJsonObject json) {

    m_portfolio_share_token_isValid = ::OpenAPI::fromJsonValue(m_portfolio_share_token, json[QString("PortfolioShareToken")]);
    m_portfolio_share_token_isSet = !json[QString("PortfolioShareToken")].isNull() && m_portfolio_share_token_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_organization_node_value_isValid = ::OpenAPI::fromJsonValue(m_organization_node_value, json[QString("OrganizationNodeValue")]);
    m_organization_node_value_isSet = !json[QString("OrganizationNodeValue")].isNull() && m_organization_node_value_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_share_details_isValid = ::OpenAPI::fromJsonValue(m_share_details, json[QString("ShareDetails")]);
    m_share_details_isSet = !json[QString("ShareDetails")].isNull() && m_share_details_isValid;
}

QString OAIDescribePortfolioShareStatusOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePortfolioShareStatusOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_portfolio_share_token_isSet) {
        obj.insert(QString("PortfolioShareToken"), ::OpenAPI::toJsonValue(m_portfolio_share_token));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_organization_node_value_isSet) {
        obj.insert(QString("OrganizationNodeValue"), ::OpenAPI::toJsonValue(m_organization_node_value));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_share_details.isSet()) {
        obj.insert(QString("ShareDetails"), ::OpenAPI::toJsonValue(m_share_details));
    }
    return obj;
}

QString OAIDescribePortfolioShareStatusOutput::getPortfolioShareToken() const {
    return m_portfolio_share_token;
}
void OAIDescribePortfolioShareStatusOutput::setPortfolioShareToken(const QString &portfolio_share_token) {
    m_portfolio_share_token = portfolio_share_token;
    m_portfolio_share_token_isSet = true;
}

bool OAIDescribePortfolioShareStatusOutput::is_portfolio_share_token_Set() const{
    return m_portfolio_share_token_isSet;
}

bool OAIDescribePortfolioShareStatusOutput::is_portfolio_share_token_Valid() const{
    return m_portfolio_share_token_isValid;
}

QString OAIDescribePortfolioShareStatusOutput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAIDescribePortfolioShareStatusOutput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAIDescribePortfolioShareStatusOutput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAIDescribePortfolioShareStatusOutput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

QString OAIDescribePortfolioShareStatusOutput::getOrganizationNodeValue() const {
    return m_organization_node_value;
}
void OAIDescribePortfolioShareStatusOutput::setOrganizationNodeValue(const QString &organization_node_value) {
    m_organization_node_value = organization_node_value;
    m_organization_node_value_isSet = true;
}

bool OAIDescribePortfolioShareStatusOutput::is_organization_node_value_Set() const{
    return m_organization_node_value_isSet;
}

bool OAIDescribePortfolioShareStatusOutput::is_organization_node_value_Valid() const{
    return m_organization_node_value_isValid;
}

OAIShareStatus OAIDescribePortfolioShareStatusOutput::getStatus() const {
    return m_status;
}
void OAIDescribePortfolioShareStatusOutput::setStatus(const OAIShareStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribePortfolioShareStatusOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribePortfolioShareStatusOutput::is_status_Valid() const{
    return m_status_isValid;
}

OAIDescribePortfolioShareStatusOutput_ShareDetails OAIDescribePortfolioShareStatusOutput::getShareDetails() const {
    return m_share_details;
}
void OAIDescribePortfolioShareStatusOutput::setShareDetails(const OAIDescribePortfolioShareStatusOutput_ShareDetails &share_details) {
    m_share_details = share_details;
    m_share_details_isSet = true;
}

bool OAIDescribePortfolioShareStatusOutput::is_share_details_Set() const{
    return m_share_details_isSet;
}

bool OAIDescribePortfolioShareStatusOutput::is_share_details_Valid() const{
    return m_share_details_isValid;
}

bool OAIDescribePortfolioShareStatusOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_portfolio_share_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_node_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePortfolioShareStatusOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
