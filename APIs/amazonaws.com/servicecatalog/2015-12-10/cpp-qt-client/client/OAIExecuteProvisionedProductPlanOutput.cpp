/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteProvisionedProductPlanOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteProvisionedProductPlanOutput::OAIExecuteProvisionedProductPlanOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteProvisionedProductPlanOutput::OAIExecuteProvisionedProductPlanOutput() {
    this->initializeModel();
}

OAIExecuteProvisionedProductPlanOutput::~OAIExecuteProvisionedProductPlanOutput() {}

void OAIExecuteProvisionedProductPlanOutput::initializeModel() {

    m_record_detail_isSet = false;
    m_record_detail_isValid = false;
}

void OAIExecuteProvisionedProductPlanOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteProvisionedProductPlanOutput::fromJsonObject(QJsonObject json) {

    m_record_detail_isValid = ::OpenAPI::fromJsonValue(m_record_detail, json[QString("RecordDetail")]);
    m_record_detail_isSet = !json[QString("RecordDetail")].isNull() && m_record_detail_isValid;
}

QString OAIExecuteProvisionedProductPlanOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteProvisionedProductPlanOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_record_detail.isSet()) {
        obj.insert(QString("RecordDetail"), ::OpenAPI::toJsonValue(m_record_detail));
    }
    return obj;
}

OAIExecuteProvisionedProductPlanOutput_RecordDetail OAIExecuteProvisionedProductPlanOutput::getRecordDetail() const {
    return m_record_detail;
}
void OAIExecuteProvisionedProductPlanOutput::setRecordDetail(const OAIExecuteProvisionedProductPlanOutput_RecordDetail &record_detail) {
    m_record_detail = record_detail;
    m_record_detail_isSet = true;
}

bool OAIExecuteProvisionedProductPlanOutput::is_record_detail_Set() const{
    return m_record_detail_isSet;
}

bool OAIExecuteProvisionedProductPlanOutput::is_record_detail_Valid() const{
    return m_record_detail_isValid;
}

bool OAIExecuteProvisionedProductPlanOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteProvisionedProductPlanOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
