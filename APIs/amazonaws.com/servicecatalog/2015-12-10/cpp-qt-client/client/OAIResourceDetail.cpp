/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceDetail::OAIResourceDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceDetail::OAIResourceDetail() {
    this->initializeModel();
}

OAIResourceDetail::~OAIResourceDetail() {}

void OAIResourceDetail::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;
}

void OAIResourceDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceDetail::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("ARN")]);
    m_arn_isSet = !json[QString("ARN")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;
}

QString OAIResourceDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("ARN"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    return obj;
}

QString OAIResourceDetail::getId() const {
    return m_id;
}
void OAIResourceDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResourceDetail::getArn() const {
    return m_arn;
}
void OAIResourceDetail::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIResourceDetail::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIResourceDetail::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIResourceDetail::getName() const {
    return m_name;
}
void OAIResourceDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResourceDetail::getDescription() const {
    return m_description;
}
void OAIResourceDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIResourceDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIResourceDetail::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIResourceDetail::getCreatedTime() const {
    return m_created_time;
}
void OAIResourceDetail::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIResourceDetail::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIResourceDetail::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAIResourceDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
