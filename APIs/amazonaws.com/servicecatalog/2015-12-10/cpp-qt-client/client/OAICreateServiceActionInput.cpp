/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceActionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceActionInput::OAICreateServiceActionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceActionInput::OAICreateServiceActionInput() {
    this->initializeModel();
}

OAICreateServiceActionInput::~OAICreateServiceActionInput() {}

void OAICreateServiceActionInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_definition_type_isSet = false;
    m_definition_type_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAICreateServiceActionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceActionInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_definition_type_isValid = ::OpenAPI::fromJsonValue(m_definition_type, json[QString("DefinitionType")]);
    m_definition_type_isSet = !json[QString("DefinitionType")].isNull() && m_definition_type_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAICreateServiceActionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceActionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_definition_type.isSet()) {
        obj.insert(QString("DefinitionType"), ::OpenAPI::toJsonValue(m_definition_type));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAICreateServiceActionInput::getName() const {
    return m_name;
}
void OAICreateServiceActionInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateServiceActionInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateServiceActionInput::is_name_Valid() const{
    return m_name_isValid;
}

OAIServiceActionDefinitionType OAICreateServiceActionInput::getDefinitionType() const {
    return m_definition_type;
}
void OAICreateServiceActionInput::setDefinitionType(const OAIServiceActionDefinitionType &definition_type) {
    m_definition_type = definition_type;
    m_definition_type_isSet = true;
}

bool OAICreateServiceActionInput::is_definition_type_Set() const{
    return m_definition_type_isSet;
}

bool OAICreateServiceActionInput::is_definition_type_Valid() const{
    return m_definition_type_isValid;
}

QMap OAICreateServiceActionInput::getDefinition() const {
    return m_definition;
}
void OAICreateServiceActionInput::setDefinition(const QMap &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAICreateServiceActionInput::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAICreateServiceActionInput::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAICreateServiceActionInput::getDescription() const {
    return m_description;
}
void OAICreateServiceActionInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateServiceActionInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateServiceActionInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateServiceActionInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAICreateServiceActionInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAICreateServiceActionInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAICreateServiceActionInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAICreateServiceActionInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateServiceActionInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateServiceActionInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateServiceActionInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAICreateServiceActionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceActionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_definition_type_isValid && m_definition_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
