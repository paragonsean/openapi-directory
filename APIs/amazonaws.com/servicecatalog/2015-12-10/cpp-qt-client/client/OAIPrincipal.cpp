/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrincipal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrincipal::OAIPrincipal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrincipal::OAIPrincipal() {
    this->initializeModel();
}

OAIPrincipal::~OAIPrincipal() {}

void OAIPrincipal::initializeModel() {

    m_principal_arn_isSet = false;
    m_principal_arn_isValid = false;

    m_principal_type_isSet = false;
    m_principal_type_isValid = false;
}

void OAIPrincipal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrincipal::fromJsonObject(QJsonObject json) {

    m_principal_arn_isValid = ::OpenAPI::fromJsonValue(m_principal_arn, json[QString("PrincipalARN")]);
    m_principal_arn_isSet = !json[QString("PrincipalARN")].isNull() && m_principal_arn_isValid;

    m_principal_type_isValid = ::OpenAPI::fromJsonValue(m_principal_type, json[QString("PrincipalType")]);
    m_principal_type_isSet = !json[QString("PrincipalType")].isNull() && m_principal_type_isValid;
}

QString OAIPrincipal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrincipal::asJsonObject() const {
    QJsonObject obj;
    if (m_principal_arn_isSet) {
        obj.insert(QString("PrincipalARN"), ::OpenAPI::toJsonValue(m_principal_arn));
    }
    if (m_principal_type.isSet()) {
        obj.insert(QString("PrincipalType"), ::OpenAPI::toJsonValue(m_principal_type));
    }
    return obj;
}

QString OAIPrincipal::getPrincipalArn() const {
    return m_principal_arn;
}
void OAIPrincipal::setPrincipalArn(const QString &principal_arn) {
    m_principal_arn = principal_arn;
    m_principal_arn_isSet = true;
}

bool OAIPrincipal::is_principal_arn_Set() const{
    return m_principal_arn_isSet;
}

bool OAIPrincipal::is_principal_arn_Valid() const{
    return m_principal_arn_isValid;
}

OAIPrincipalType OAIPrincipal::getPrincipalType() const {
    return m_principal_type;
}
void OAIPrincipal::setPrincipalType(const OAIPrincipalType &principal_type) {
    m_principal_type = principal_type;
    m_principal_type_isSet = true;
}

bool OAIPrincipal::is_principal_type_Set() const{
    return m_principal_type_isSet;
}

bool OAIPrincipal::is_principal_type_Valid() const{
    return m_principal_type_isValid;
}

bool OAIPrincipal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrincipal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
