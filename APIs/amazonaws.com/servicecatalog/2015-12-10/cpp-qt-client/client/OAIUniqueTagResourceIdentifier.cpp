/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUniqueTagResourceIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUniqueTagResourceIdentifier::OAIUniqueTagResourceIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUniqueTagResourceIdentifier::OAIUniqueTagResourceIdentifier() {
    this->initializeModel();
}

OAIUniqueTagResourceIdentifier::~OAIUniqueTagResourceIdentifier() {}

void OAIUniqueTagResourceIdentifier::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIUniqueTagResourceIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUniqueTagResourceIdentifier::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIUniqueTagResourceIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUniqueTagResourceIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIUniqueTagResourceIdentifier::getKey() const {
    return m_key;
}
void OAIUniqueTagResourceIdentifier::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIUniqueTagResourceIdentifier::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUniqueTagResourceIdentifier::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIUniqueTagResourceIdentifier::getValue() const {
    return m_value;
}
void OAIUniqueTagResourceIdentifier::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIUniqueTagResourceIdentifier::is_value_Set() const{
    return m_value_isSet;
}

bool OAIUniqueTagResourceIdentifier::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIUniqueTagResourceIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUniqueTagResourceIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
