/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScanProvisionedProductsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScanProvisionedProductsOutput::OAIScanProvisionedProductsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScanProvisionedProductsOutput::OAIScanProvisionedProductsOutput() {
    this->initializeModel();
}

OAIScanProvisionedProductsOutput::~OAIScanProvisionedProductsOutput() {}

void OAIScanProvisionedProductsOutput::initializeModel() {

    m_provisioned_products_isSet = false;
    m_provisioned_products_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIScanProvisionedProductsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScanProvisionedProductsOutput::fromJsonObject(QJsonObject json) {

    m_provisioned_products_isValid = ::OpenAPI::fromJsonValue(m_provisioned_products, json[QString("ProvisionedProducts")]);
    m_provisioned_products_isSet = !json[QString("ProvisionedProducts")].isNull() && m_provisioned_products_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIScanProvisionedProductsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScanProvisionedProductsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioned_products.isSet()) {
        obj.insert(QString("ProvisionedProducts"), ::OpenAPI::toJsonValue(m_provisioned_products));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIScanProvisionedProductsOutput::getProvisionedProducts() const {
    return m_provisioned_products;
}
void OAIScanProvisionedProductsOutput::setProvisionedProducts(const QList &provisioned_products) {
    m_provisioned_products = provisioned_products;
    m_provisioned_products_isSet = true;
}

bool OAIScanProvisionedProductsOutput::is_provisioned_products_Set() const{
    return m_provisioned_products_isSet;
}

bool OAIScanProvisionedProductsOutput::is_provisioned_products_Valid() const{
    return m_provisioned_products_isValid;
}

QString OAIScanProvisionedProductsOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIScanProvisionedProductsOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIScanProvisionedProductsOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIScanProvisionedProductsOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIScanProvisionedProductsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioned_products.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScanProvisionedProductsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
