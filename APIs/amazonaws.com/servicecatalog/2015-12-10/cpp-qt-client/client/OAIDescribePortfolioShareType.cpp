/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePortfolioShareType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePortfolioShareType::OAIDescribePortfolioShareType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePortfolioShareType::OAIDescribePortfolioShareType() {
    this->initializeModel();
}

OAIDescribePortfolioShareType::~OAIDescribePortfolioShareType() {}

void OAIDescribePortfolioShareType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDescribePortfolioShareType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDescribePortfolioShareType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACCOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDescribePortfolioShareType::ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ORGANIZATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDescribePortfolioShareType::ORGANIZATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ORGANIZATIONAL_UNIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDescribePortfolioShareType::ORGANIZATIONAL_UNIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ORGANIZATION_MEMBER_ACCOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDescribePortfolioShareType::ORGANIZATION_MEMBER_ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDescribePortfolioShareType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDescribePortfolioShareType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDescribePortfolioShareType::ACCOUNT:
            val = "ACCOUNT";
            break;
        case eOAIDescribePortfolioShareType::ORGANIZATION:
            val = "ORGANIZATION";
            break;
        case eOAIDescribePortfolioShareType::ORGANIZATIONAL_UNIT:
            val = "ORGANIZATIONAL_UNIT";
            break;
        case eOAIDescribePortfolioShareType::ORGANIZATION_MEMBER_ACCOUNT:
            val = "ORGANIZATION_MEMBER_ACCOUNT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDescribePortfolioShareType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDescribePortfolioShareType::eOAIDescribePortfolioShareType OAIDescribePortfolioShareType::getValue() const {
    return m_value;
}

void OAIDescribePortfolioShareType::setValue(const OAIDescribePortfolioShareType::eOAIDescribePortfolioShareType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDescribePortfolioShareType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDescribePortfolioShareType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
