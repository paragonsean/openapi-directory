/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisionProductInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisionProductInput::OAIProvisionProductInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisionProductInput::OAIProvisionProductInput() {
    this->initializeModel();
}

OAIProvisionProductInput::~OAIProvisionProductInput() {}

void OAIProvisionProductInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_provisioning_artifact_name_isSet = false;
    m_provisioning_artifact_name_isValid = false;

    m_path_id_isSet = false;
    m_path_id_isValid = false;

    m_path_name_isSet = false;
    m_path_name_isValid = false;

    m_provisioned_product_name_isSet = false;
    m_provisioned_product_name_isValid = false;

    m_provisioning_parameters_isSet = false;
    m_provisioning_parameters_isValid = false;

    m_provisioning_preferences_isSet = false;
    m_provisioning_preferences_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_notification_arns_isSet = false;
    m_notification_arns_isValid = false;

    m_provision_token_isSet = false;
    m_provision_token_isValid = false;
}

void OAIProvisionProductInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisionProductInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("ProductName")]);
    m_product_name_isSet = !json[QString("ProductName")].isNull() && m_product_name_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_provisioning_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_name, json[QString("ProvisioningArtifactName")]);
    m_provisioning_artifact_name_isSet = !json[QString("ProvisioningArtifactName")].isNull() && m_provisioning_artifact_name_isValid;

    m_path_id_isValid = ::OpenAPI::fromJsonValue(m_path_id, json[QString("PathId")]);
    m_path_id_isSet = !json[QString("PathId")].isNull() && m_path_id_isValid;

    m_path_name_isValid = ::OpenAPI::fromJsonValue(m_path_name, json[QString("PathName")]);
    m_path_name_isSet = !json[QString("PathName")].isNull() && m_path_name_isValid;

    m_provisioned_product_name_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_name, json[QString("ProvisionedProductName")]);
    m_provisioned_product_name_isSet = !json[QString("ProvisionedProductName")].isNull() && m_provisioned_product_name_isValid;

    m_provisioning_parameters_isValid = ::OpenAPI::fromJsonValue(m_provisioning_parameters, json[QString("ProvisioningParameters")]);
    m_provisioning_parameters_isSet = !json[QString("ProvisioningParameters")].isNull() && m_provisioning_parameters_isValid;

    m_provisioning_preferences_isValid = ::OpenAPI::fromJsonValue(m_provisioning_preferences, json[QString("ProvisioningPreferences")]);
    m_provisioning_preferences_isSet = !json[QString("ProvisioningPreferences")].isNull() && m_provisioning_preferences_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_notification_arns_isValid = ::OpenAPI::fromJsonValue(m_notification_arns, json[QString("NotificationArns")]);
    m_notification_arns_isSet = !json[QString("NotificationArns")].isNull() && m_notification_arns_isValid;

    m_provision_token_isValid = ::OpenAPI::fromJsonValue(m_provision_token, json[QString("ProvisionToken")]);
    m_provision_token_isSet = !json[QString("ProvisionToken")].isNull() && m_provision_token_isValid;
}

QString OAIProvisionProductInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisionProductInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("ProductName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_provisioning_artifact_name_isSet) {
        obj.insert(QString("ProvisioningArtifactName"), ::OpenAPI::toJsonValue(m_provisioning_artifact_name));
    }
    if (m_path_id_isSet) {
        obj.insert(QString("PathId"), ::OpenAPI::toJsonValue(m_path_id));
    }
    if (m_path_name_isSet) {
        obj.insert(QString("PathName"), ::OpenAPI::toJsonValue(m_path_name));
    }
    if (m_provisioned_product_name_isSet) {
        obj.insert(QString("ProvisionedProductName"), ::OpenAPI::toJsonValue(m_provisioned_product_name));
    }
    if (m_provisioning_parameters.isSet()) {
        obj.insert(QString("ProvisioningParameters"), ::OpenAPI::toJsonValue(m_provisioning_parameters));
    }
    if (m_provisioning_preferences.isSet()) {
        obj.insert(QString("ProvisioningPreferences"), ::OpenAPI::toJsonValue(m_provisioning_preferences));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_notification_arns.isSet()) {
        obj.insert(QString("NotificationArns"), ::OpenAPI::toJsonValue(m_notification_arns));
    }
    if (m_provision_token_isSet) {
        obj.insert(QString("ProvisionToken"), ::OpenAPI::toJsonValue(m_provision_token));
    }
    return obj;
}

QString OAIProvisionProductInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIProvisionProductInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIProvisionProductInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIProvisionProductInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIProvisionProductInput::getProductId() const {
    return m_product_id;
}
void OAIProvisionProductInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProvisionProductInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProvisionProductInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProvisionProductInput::getProductName() const {
    return m_product_name;
}
void OAIProvisionProductInput::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIProvisionProductInput::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIProvisionProductInput::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAIProvisionProductInput::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIProvisionProductInput::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIProvisionProductInput::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIProvisionProductInput::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QString OAIProvisionProductInput::getProvisioningArtifactName() const {
    return m_provisioning_artifact_name;
}
void OAIProvisionProductInput::setProvisioningArtifactName(const QString &provisioning_artifact_name) {
    m_provisioning_artifact_name = provisioning_artifact_name;
    m_provisioning_artifact_name_isSet = true;
}

bool OAIProvisionProductInput::is_provisioning_artifact_name_Set() const{
    return m_provisioning_artifact_name_isSet;
}

bool OAIProvisionProductInput::is_provisioning_artifact_name_Valid() const{
    return m_provisioning_artifact_name_isValid;
}

QString OAIProvisionProductInput::getPathId() const {
    return m_path_id;
}
void OAIProvisionProductInput::setPathId(const QString &path_id) {
    m_path_id = path_id;
    m_path_id_isSet = true;
}

bool OAIProvisionProductInput::is_path_id_Set() const{
    return m_path_id_isSet;
}

bool OAIProvisionProductInput::is_path_id_Valid() const{
    return m_path_id_isValid;
}

QString OAIProvisionProductInput::getPathName() const {
    return m_path_name;
}
void OAIProvisionProductInput::setPathName(const QString &path_name) {
    m_path_name = path_name;
    m_path_name_isSet = true;
}

bool OAIProvisionProductInput::is_path_name_Set() const{
    return m_path_name_isSet;
}

bool OAIProvisionProductInput::is_path_name_Valid() const{
    return m_path_name_isValid;
}

QString OAIProvisionProductInput::getProvisionedProductName() const {
    return m_provisioned_product_name;
}
void OAIProvisionProductInput::setProvisionedProductName(const QString &provisioned_product_name) {
    m_provisioned_product_name = provisioned_product_name;
    m_provisioned_product_name_isSet = true;
}

bool OAIProvisionProductInput::is_provisioned_product_name_Set() const{
    return m_provisioned_product_name_isSet;
}

bool OAIProvisionProductInput::is_provisioned_product_name_Valid() const{
    return m_provisioned_product_name_isValid;
}

QList OAIProvisionProductInput::getProvisioningParameters() const {
    return m_provisioning_parameters;
}
void OAIProvisionProductInput::setProvisioningParameters(const QList &provisioning_parameters) {
    m_provisioning_parameters = provisioning_parameters;
    m_provisioning_parameters_isSet = true;
}

bool OAIProvisionProductInput::is_provisioning_parameters_Set() const{
    return m_provisioning_parameters_isSet;
}

bool OAIProvisionProductInput::is_provisioning_parameters_Valid() const{
    return m_provisioning_parameters_isValid;
}

OAIProvisionProductInput_ProvisioningPreferences OAIProvisionProductInput::getProvisioningPreferences() const {
    return m_provisioning_preferences;
}
void OAIProvisionProductInput::setProvisioningPreferences(const OAIProvisionProductInput_ProvisioningPreferences &provisioning_preferences) {
    m_provisioning_preferences = provisioning_preferences;
    m_provisioning_preferences_isSet = true;
}

bool OAIProvisionProductInput::is_provisioning_preferences_Set() const{
    return m_provisioning_preferences_isSet;
}

bool OAIProvisionProductInput::is_provisioning_preferences_Valid() const{
    return m_provisioning_preferences_isValid;
}

QList OAIProvisionProductInput::getTags() const {
    return m_tags;
}
void OAIProvisionProductInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProvisionProductInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProvisionProductInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIProvisionProductInput::getNotificationArns() const {
    return m_notification_arns;
}
void OAIProvisionProductInput::setNotificationArns(const QList &notification_arns) {
    m_notification_arns = notification_arns;
    m_notification_arns_isSet = true;
}

bool OAIProvisionProductInput::is_notification_arns_Set() const{
    return m_notification_arns_isSet;
}

bool OAIProvisionProductInput::is_notification_arns_Valid() const{
    return m_notification_arns_isValid;
}

QString OAIProvisionProductInput::getProvisionToken() const {
    return m_provision_token;
}
void OAIProvisionProductInput::setProvisionToken(const QString &provision_token) {
    m_provision_token = provision_token;
    m_provision_token_isSet = true;
}

bool OAIProvisionProductInput::is_provision_token_Set() const{
    return m_provision_token_isSet;
}

bool OAIProvisionProductInput::is_provision_token_Valid() const{
    return m_provision_token_isValid;
}

bool OAIProvisionProductInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisionProductInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_provisioned_product_name_isValid && m_provision_token_isValid && true;
}

} // namespace OpenAPI
