/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProvisionedProductOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProvisionedProductOutput::OAIDescribeProvisionedProductOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProvisionedProductOutput::OAIDescribeProvisionedProductOutput() {
    this->initializeModel();
}

OAIDescribeProvisionedProductOutput::~OAIDescribeProvisionedProductOutput() {}

void OAIDescribeProvisionedProductOutput::initializeModel() {

    m_provisioned_product_detail_isSet = false;
    m_provisioned_product_detail_isValid = false;

    m_cloud_watch_dashboards_isSet = false;
    m_cloud_watch_dashboards_isValid = false;
}

void OAIDescribeProvisionedProductOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProvisionedProductOutput::fromJsonObject(QJsonObject json) {

    m_provisioned_product_detail_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_detail, json[QString("ProvisionedProductDetail")]);
    m_provisioned_product_detail_isSet = !json[QString("ProvisionedProductDetail")].isNull() && m_provisioned_product_detail_isValid;

    m_cloud_watch_dashboards_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_dashboards, json[QString("CloudWatchDashboards")]);
    m_cloud_watch_dashboards_isSet = !json[QString("CloudWatchDashboards")].isNull() && m_cloud_watch_dashboards_isValid;
}

QString OAIDescribeProvisionedProductOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProvisionedProductOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioned_product_detail.isSet()) {
        obj.insert(QString("ProvisionedProductDetail"), ::OpenAPI::toJsonValue(m_provisioned_product_detail));
    }
    if (m_cloud_watch_dashboards.isSet()) {
        obj.insert(QString("CloudWatchDashboards"), ::OpenAPI::toJsonValue(m_cloud_watch_dashboards));
    }
    return obj;
}

OAIDescribeProvisionedProductOutput_ProvisionedProductDetail OAIDescribeProvisionedProductOutput::getProvisionedProductDetail() const {
    return m_provisioned_product_detail;
}
void OAIDescribeProvisionedProductOutput::setProvisionedProductDetail(const OAIDescribeProvisionedProductOutput_ProvisionedProductDetail &provisioned_product_detail) {
    m_provisioned_product_detail = provisioned_product_detail;
    m_provisioned_product_detail_isSet = true;
}

bool OAIDescribeProvisionedProductOutput::is_provisioned_product_detail_Set() const{
    return m_provisioned_product_detail_isSet;
}

bool OAIDescribeProvisionedProductOutput::is_provisioned_product_detail_Valid() const{
    return m_provisioned_product_detail_isValid;
}

QList OAIDescribeProvisionedProductOutput::getCloudWatchDashboards() const {
    return m_cloud_watch_dashboards;
}
void OAIDescribeProvisionedProductOutput::setCloudWatchDashboards(const QList &cloud_watch_dashboards) {
    m_cloud_watch_dashboards = cloud_watch_dashboards;
    m_cloud_watch_dashboards_isSet = true;
}

bool OAIDescribeProvisionedProductOutput::is_cloud_watch_dashboards_Set() const{
    return m_cloud_watch_dashboards_isSet;
}

bool OAIDescribeProvisionedProductOutput::is_cloud_watch_dashboards_Valid() const{
    return m_cloud_watch_dashboards_isValid;
}

bool OAIDescribeProvisionedProductOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioned_product_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_dashboards.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProvisionedProductOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
