/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProductInput_SourceConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProductInput_SourceConnection::OAIUpdateProductInput_SourceConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProductInput_SourceConnection::OAIUpdateProductInput_SourceConnection() {
    this->initializeModel();
}

OAIUpdateProductInput_SourceConnection::~OAIUpdateProductInput_SourceConnection() {}

void OAIUpdateProductInput_SourceConnection::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_connection_parameters_isSet = false;
    m_connection_parameters_isValid = false;
}

void OAIUpdateProductInput_SourceConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProductInput_SourceConnection::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_connection_parameters_isValid = ::OpenAPI::fromJsonValue(m_connection_parameters, json[QString("ConnectionParameters")]);
    m_connection_parameters_isSet = !json[QString("ConnectionParameters")].isNull() && m_connection_parameters_isValid;
}

QString OAIUpdateProductInput_SourceConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProductInput_SourceConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_connection_parameters.isSet()) {
        obj.insert(QString("ConnectionParameters"), ::OpenAPI::toJsonValue(m_connection_parameters));
    }
    return obj;
}

OAISourceType OAIUpdateProductInput_SourceConnection::getType() const {
    return m_type;
}
void OAIUpdateProductInput_SourceConnection::setType(const OAISourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateProductInput_SourceConnection::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateProductInput_SourceConnection::is_type_Valid() const{
    return m_type_isValid;
}

OAISourceConnection_ConnectionParameters OAIUpdateProductInput_SourceConnection::getConnectionParameters() const {
    return m_connection_parameters;
}
void OAIUpdateProductInput_SourceConnection::setConnectionParameters(const OAISourceConnection_ConnectionParameters &connection_parameters) {
    m_connection_parameters = connection_parameters;
    m_connection_parameters_isSet = true;
}

bool OAIUpdateProductInput_SourceConnection::is_connection_parameters_Set() const{
    return m_connection_parameters_isSet;
}

bool OAIUpdateProductInput_SourceConnection::is_connection_parameters_Valid() const{
    return m_connection_parameters_isValid;
}

bool OAIUpdateProductInput_SourceConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProductInput_SourceConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_parameters_isValid && true;
}

} // namespace OpenAPI
