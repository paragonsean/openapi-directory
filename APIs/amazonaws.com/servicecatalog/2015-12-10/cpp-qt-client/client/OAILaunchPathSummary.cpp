/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchPathSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchPathSummary::OAILaunchPathSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchPathSummary::OAILaunchPathSummary() {
    this->initializeModel();
}

OAILaunchPathSummary::~OAILaunchPathSummary() {}

void OAILaunchPathSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_constraint_summaries_isSet = false;
    m_constraint_summaries_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAILaunchPathSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaunchPathSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_constraint_summaries_isValid = ::OpenAPI::fromJsonValue(m_constraint_summaries, json[QString("ConstraintSummaries")]);
    m_constraint_summaries_isSet = !json[QString("ConstraintSummaries")].isNull() && m_constraint_summaries_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAILaunchPathSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaunchPathSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_constraint_summaries.isSet()) {
        obj.insert(QString("ConstraintSummaries"), ::OpenAPI::toJsonValue(m_constraint_summaries));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAILaunchPathSummary::getId() const {
    return m_id;
}
void OAILaunchPathSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILaunchPathSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAILaunchPathSummary::is_id_Valid() const{
    return m_id_isValid;
}

QList OAILaunchPathSummary::getConstraintSummaries() const {
    return m_constraint_summaries;
}
void OAILaunchPathSummary::setConstraintSummaries(const QList &constraint_summaries) {
    m_constraint_summaries = constraint_summaries;
    m_constraint_summaries_isSet = true;
}

bool OAILaunchPathSummary::is_constraint_summaries_Set() const{
    return m_constraint_summaries_isSet;
}

bool OAILaunchPathSummary::is_constraint_summaries_Valid() const{
    return m_constraint_summaries_isValid;
}

QList OAILaunchPathSummary::getTags() const {
    return m_tags;
}
void OAILaunchPathSummary::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAILaunchPathSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAILaunchPathSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAILaunchPathSummary::getName() const {
    return m_name;
}
void OAILaunchPathSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILaunchPathSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAILaunchPathSummary::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILaunchPathSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaunchPathSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
