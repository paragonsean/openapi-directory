/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordOutput::OAIRecordOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordOutput::OAIRecordOutput() {
    this->initializeModel();
}

OAIRecordOutput::~OAIRecordOutput() {}

void OAIRecordOutput::initializeModel() {

    m_output_key_isSet = false;
    m_output_key_isValid = false;

    m_output_value_isSet = false;
    m_output_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIRecordOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordOutput::fromJsonObject(QJsonObject json) {

    m_output_key_isValid = ::OpenAPI::fromJsonValue(m_output_key, json[QString("OutputKey")]);
    m_output_key_isSet = !json[QString("OutputKey")].isNull() && m_output_key_isValid;

    m_output_value_isValid = ::OpenAPI::fromJsonValue(m_output_value, json[QString("OutputValue")]);
    m_output_value_isSet = !json[QString("OutputValue")].isNull() && m_output_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIRecordOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_output_key_isSet) {
        obj.insert(QString("OutputKey"), ::OpenAPI::toJsonValue(m_output_key));
    }
    if (m_output_value_isSet) {
        obj.insert(QString("OutputValue"), ::OpenAPI::toJsonValue(m_output_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIRecordOutput::getOutputKey() const {
    return m_output_key;
}
void OAIRecordOutput::setOutputKey(const QString &output_key) {
    m_output_key = output_key;
    m_output_key_isSet = true;
}

bool OAIRecordOutput::is_output_key_Set() const{
    return m_output_key_isSet;
}

bool OAIRecordOutput::is_output_key_Valid() const{
    return m_output_key_isValid;
}

QString OAIRecordOutput::getOutputValue() const {
    return m_output_value;
}
void OAIRecordOutput::setOutputValue(const QString &output_value) {
    m_output_value = output_value;
    m_output_value_isSet = true;
}

bool OAIRecordOutput::is_output_value_Set() const{
    return m_output_value_isSet;
}

bool OAIRecordOutput::is_output_value_Valid() const{
    return m_output_value_isValid;
}

QString OAIRecordOutput::getDescription() const {
    return m_description;
}
void OAIRecordOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRecordOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRecordOutput::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIRecordOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
