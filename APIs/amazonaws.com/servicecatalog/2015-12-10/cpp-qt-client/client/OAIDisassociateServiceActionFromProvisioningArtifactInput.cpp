/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisassociateServiceActionFromProvisioningArtifactInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisassociateServiceActionFromProvisioningArtifactInput::OAIDisassociateServiceActionFromProvisioningArtifactInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisassociateServiceActionFromProvisioningArtifactInput::OAIDisassociateServiceActionFromProvisioningArtifactInput() {
    this->initializeModel();
}

OAIDisassociateServiceActionFromProvisioningArtifactInput::~OAIDisassociateServiceActionFromProvisioningArtifactInput() {}

void OAIDisassociateServiceActionFromProvisioningArtifactInput::initializeModel() {

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_service_action_id_isSet = false;
    m_service_action_id_isValid = false;

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;
}

void OAIDisassociateServiceActionFromProvisioningArtifactInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisassociateServiceActionFromProvisioningArtifactInput::fromJsonObject(QJsonObject json) {

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_service_action_id_isValid = ::OpenAPI::fromJsonValue(m_service_action_id, json[QString("ServiceActionId")]);
    m_service_action_id_isSet = !json[QString("ServiceActionId")].isNull() && m_service_action_id_isValid;

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;
}

QString OAIDisassociateServiceActionFromProvisioningArtifactInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisassociateServiceActionFromProvisioningArtifactInput::asJsonObject() const {
    QJsonObject obj;
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_service_action_id_isSet) {
        obj.insert(QString("ServiceActionId"), ::OpenAPI::toJsonValue(m_service_action_id));
    }
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    return obj;
}

QString OAIDisassociateServiceActionFromProvisioningArtifactInput::getProductId() const {
    return m_product_id;
}
void OAIDisassociateServiceActionFromProvisioningArtifactInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIDisassociateServiceActionFromProvisioningArtifactInput::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIDisassociateServiceActionFromProvisioningArtifactInput::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QString OAIDisassociateServiceActionFromProvisioningArtifactInput::getServiceActionId() const {
    return m_service_action_id;
}
void OAIDisassociateServiceActionFromProvisioningArtifactInput::setServiceActionId(const QString &service_action_id) {
    m_service_action_id = service_action_id;
    m_service_action_id_isSet = true;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::is_service_action_id_Set() const{
    return m_service_action_id_isSet;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::is_service_action_id_Valid() const{
    return m_service_action_id_isValid;
}

QString OAIDisassociateServiceActionFromProvisioningArtifactInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDisassociateServiceActionFromProvisioningArtifactInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisassociateServiceActionFromProvisioningArtifactInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_provisioning_artifact_id_isValid && m_service_action_id_isValid && true;
}

} // namespace OpenAPI
