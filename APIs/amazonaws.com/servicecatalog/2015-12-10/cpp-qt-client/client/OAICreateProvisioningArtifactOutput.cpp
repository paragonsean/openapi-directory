/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProvisioningArtifactOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProvisioningArtifactOutput::OAICreateProvisioningArtifactOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProvisioningArtifactOutput::OAICreateProvisioningArtifactOutput() {
    this->initializeModel();
}

OAICreateProvisioningArtifactOutput::~OAICreateProvisioningArtifactOutput() {}

void OAICreateProvisioningArtifactOutput::initializeModel() {

    m_provisioning_artifact_detail_isSet = false;
    m_provisioning_artifact_detail_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICreateProvisioningArtifactOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProvisioningArtifactOutput::fromJsonObject(QJsonObject json) {

    m_provisioning_artifact_detail_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_detail, json[QString("ProvisioningArtifactDetail")]);
    m_provisioning_artifact_detail_isSet = !json[QString("ProvisioningArtifactDetail")].isNull() && m_provisioning_artifact_detail_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("Info")]);
    m_info_isSet = !json[QString("Info")].isNull() && m_info_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAICreateProvisioningArtifactOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProvisioningArtifactOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_artifact_detail.isSet()) {
        obj.insert(QString("ProvisioningArtifactDetail"), ::OpenAPI::toJsonValue(m_provisioning_artifact_detail));
    }
    if (m_info.isSet()) {
        obj.insert(QString("Info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail OAICreateProvisioningArtifactOutput::getProvisioningArtifactDetail() const {
    return m_provisioning_artifact_detail;
}
void OAICreateProvisioningArtifactOutput::setProvisioningArtifactDetail(const OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail &provisioning_artifact_detail) {
    m_provisioning_artifact_detail = provisioning_artifact_detail;
    m_provisioning_artifact_detail_isSet = true;
}

bool OAICreateProvisioningArtifactOutput::is_provisioning_artifact_detail_Set() const{
    return m_provisioning_artifact_detail_isSet;
}

bool OAICreateProvisioningArtifactOutput::is_provisioning_artifact_detail_Valid() const{
    return m_provisioning_artifact_detail_isValid;
}

QMap OAICreateProvisioningArtifactOutput::getInfo() const {
    return m_info;
}
void OAICreateProvisioningArtifactOutput::setInfo(const QMap &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAICreateProvisioningArtifactOutput::is_info_Set() const{
    return m_info_isSet;
}

bool OAICreateProvisioningArtifactOutput::is_info_Valid() const{
    return m_info_isValid;
}

OAIStatus OAICreateProvisioningArtifactOutput::getStatus() const {
    return m_status;
}
void OAICreateProvisioningArtifactOutput::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateProvisioningArtifactOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateProvisioningArtifactOutput::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateProvisioningArtifactOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_artifact_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProvisioningArtifactOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
