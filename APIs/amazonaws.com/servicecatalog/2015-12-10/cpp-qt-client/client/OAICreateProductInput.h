/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateProductInput.h
 *
 * 
 */

#ifndef OAICreateProductInput_H
#define OAICreateProductInput_H

#include <QJsonObject>

#include "OAICreateProductInput_ProvisioningArtifactParameters.h"
#include "OAICreateProductInput_SourceConnection.h"
#include "OAIProductType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateProductInput_ProvisioningArtifactParameters;
class OAICreateProductInput_SourceConnection;

class OAICreateProductInput : public OAIObject {
public:
    OAICreateProductInput();
    OAICreateProductInput(QString json);
    ~OAICreateProductInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcceptLanguage() const;
    void setAcceptLanguage(const QString &accept_language);
    bool is_accept_language_Set() const;
    bool is_accept_language_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDistributor() const;
    void setDistributor(const QString &distributor);
    bool is_distributor_Set() const;
    bool is_distributor_Valid() const;

    QString getSupportDescription() const;
    void setSupportDescription(const QString &support_description);
    bool is_support_description_Set() const;
    bool is_support_description_Valid() const;

    QString getSupportEmail() const;
    void setSupportEmail(const QString &support_email);
    bool is_support_email_Set() const;
    bool is_support_email_Valid() const;

    QString getSupportUrl() const;
    void setSupportUrl(const QString &support_url);
    bool is_support_url_Set() const;
    bool is_support_url_Valid() const;

    OAIProductType getProductType() const;
    void setProductType(const OAIProductType &product_type);
    bool is_product_type_Set() const;
    bool is_product_type_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAICreateProductInput_ProvisioningArtifactParameters getProvisioningArtifactParameters() const;
    void setProvisioningArtifactParameters(const OAICreateProductInput_ProvisioningArtifactParameters &provisioning_artifact_parameters);
    bool is_provisioning_artifact_parameters_Set() const;
    bool is_provisioning_artifact_parameters_Valid() const;

    QString getIdempotencyToken() const;
    void setIdempotencyToken(const QString &idempotency_token);
    bool is_idempotency_token_Set() const;
    bool is_idempotency_token_Valid() const;

    OAICreateProductInput_SourceConnection getSourceConnection() const;
    void setSourceConnection(const OAICreateProductInput_SourceConnection &source_connection);
    bool is_source_connection_Set() const;
    bool is_source_connection_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_accept_language;
    bool m_accept_language_isSet;
    bool m_accept_language_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_distributor;
    bool m_distributor_isSet;
    bool m_distributor_isValid;

    QString m_support_description;
    bool m_support_description_isSet;
    bool m_support_description_isValid;

    QString m_support_email;
    bool m_support_email_isSet;
    bool m_support_email_isValid;

    QString m_support_url;
    bool m_support_url_isSet;
    bool m_support_url_isValid;

    OAIProductType m_product_type;
    bool m_product_type_isSet;
    bool m_product_type_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAICreateProductInput_ProvisioningArtifactParameters m_provisioning_artifact_parameters;
    bool m_provisioning_artifact_parameters_isSet;
    bool m_provisioning_artifact_parameters_isValid;

    QString m_idempotency_token;
    bool m_idempotency_token_isSet;
    bool m_idempotency_token_isValid;

    OAICreateProductInput_SourceConnection m_source_connection;
    bool m_source_connection_isSet;
    bool m_source_connection_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateProductInput)

#endif // OAICreateProductInput_H
