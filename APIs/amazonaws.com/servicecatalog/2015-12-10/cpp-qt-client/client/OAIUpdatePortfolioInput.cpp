/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePortfolioInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePortfolioInput::OAIUpdatePortfolioInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePortfolioInput::OAIUpdatePortfolioInput() {
    this->initializeModel();
}

OAIUpdatePortfolioInput::~OAIUpdatePortfolioInput() {}

void OAIUpdatePortfolioInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_add_tags_isSet = false;
    m_add_tags_isValid = false;

    m_remove_tags_isSet = false;
    m_remove_tags_isValid = false;
}

void OAIUpdatePortfolioInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePortfolioInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("ProviderName")]);
    m_provider_name_isSet = !json[QString("ProviderName")].isNull() && m_provider_name_isValid;

    m_add_tags_isValid = ::OpenAPI::fromJsonValue(m_add_tags, json[QString("AddTags")]);
    m_add_tags_isSet = !json[QString("AddTags")].isNull() && m_add_tags_isValid;

    m_remove_tags_isValid = ::OpenAPI::fromJsonValue(m_remove_tags, json[QString("RemoveTags")]);
    m_remove_tags_isSet = !json[QString("RemoveTags")].isNull() && m_remove_tags_isValid;
}

QString OAIUpdatePortfolioInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePortfolioInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("ProviderName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_add_tags.isSet()) {
        obj.insert(QString("AddTags"), ::OpenAPI::toJsonValue(m_add_tags));
    }
    if (m_remove_tags.isSet()) {
        obj.insert(QString("RemoveTags"), ::OpenAPI::toJsonValue(m_remove_tags));
    }
    return obj;
}

QString OAIUpdatePortfolioInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIUpdatePortfolioInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIUpdatePortfolioInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIUpdatePortfolioInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIUpdatePortfolioInput::getId() const {
    return m_id;
}
void OAIUpdatePortfolioInput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdatePortfolioInput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdatePortfolioInput::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdatePortfolioInput::getDisplayName() const {
    return m_display_name;
}
void OAIUpdatePortfolioInput::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUpdatePortfolioInput::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUpdatePortfolioInput::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUpdatePortfolioInput::getDescription() const {
    return m_description;
}
void OAIUpdatePortfolioInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdatePortfolioInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdatePortfolioInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdatePortfolioInput::getProviderName() const {
    return m_provider_name;
}
void OAIUpdatePortfolioInput::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIUpdatePortfolioInput::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIUpdatePortfolioInput::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

QList OAIUpdatePortfolioInput::getAddTags() const {
    return m_add_tags;
}
void OAIUpdatePortfolioInput::setAddTags(const QList &add_tags) {
    m_add_tags = add_tags;
    m_add_tags_isSet = true;
}

bool OAIUpdatePortfolioInput::is_add_tags_Set() const{
    return m_add_tags_isSet;
}

bool OAIUpdatePortfolioInput::is_add_tags_Valid() const{
    return m_add_tags_isValid;
}

QList OAIUpdatePortfolioInput::getRemoveTags() const {
    return m_remove_tags;
}
void OAIUpdatePortfolioInput::setRemoveTags(const QList &remove_tags) {
    m_remove_tags = remove_tags;
    m_remove_tags_isSet = true;
}

bool OAIUpdatePortfolioInput::is_remove_tags_Set() const{
    return m_remove_tags_isSet;
}

bool OAIUpdatePortfolioInput::is_remove_tags_Valid() const{
    return m_remove_tags_isValid;
}

bool OAIUpdatePortfolioInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePortfolioInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
