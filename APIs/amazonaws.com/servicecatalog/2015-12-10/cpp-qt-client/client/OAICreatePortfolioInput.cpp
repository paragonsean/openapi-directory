/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePortfolioInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePortfolioInput::OAICreatePortfolioInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePortfolioInput::OAICreatePortfolioInput() {
    this->initializeModel();
}

OAICreatePortfolioInput::~OAICreatePortfolioInput() {}

void OAICreatePortfolioInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAICreatePortfolioInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePortfolioInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("ProviderName")]);
    m_provider_name_isSet = !json[QString("ProviderName")].isNull() && m_provider_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAICreatePortfolioInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePortfolioInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("ProviderName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAICreatePortfolioInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAICreatePortfolioInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAICreatePortfolioInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAICreatePortfolioInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAICreatePortfolioInput::getDisplayName() const {
    return m_display_name;
}
void OAICreatePortfolioInput::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreatePortfolioInput::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreatePortfolioInput::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICreatePortfolioInput::getDescription() const {
    return m_description;
}
void OAICreatePortfolioInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreatePortfolioInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreatePortfolioInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreatePortfolioInput::getProviderName() const {
    return m_provider_name;
}
void OAICreatePortfolioInput::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAICreatePortfolioInput::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAICreatePortfolioInput::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

QList OAICreatePortfolioInput::getTags() const {
    return m_tags;
}
void OAICreatePortfolioInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePortfolioInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePortfolioInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreatePortfolioInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreatePortfolioInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreatePortfolioInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreatePortfolioInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAICreatePortfolioInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePortfolioInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_provider_name_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
