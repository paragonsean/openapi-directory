/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePortfolioShareStatusOutput_ShareDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePortfolioShareStatusOutput_ShareDetails::OAIDescribePortfolioShareStatusOutput_ShareDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePortfolioShareStatusOutput_ShareDetails::OAIDescribePortfolioShareStatusOutput_ShareDetails() {
    this->initializeModel();
}

OAIDescribePortfolioShareStatusOutput_ShareDetails::~OAIDescribePortfolioShareStatusOutput_ShareDetails() {}

void OAIDescribePortfolioShareStatusOutput_ShareDetails::initializeModel() {

    m_successful_shares_isSet = false;
    m_successful_shares_isValid = false;

    m_share_errors_isSet = false;
    m_share_errors_isValid = false;
}

void OAIDescribePortfolioShareStatusOutput_ShareDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePortfolioShareStatusOutput_ShareDetails::fromJsonObject(QJsonObject json) {

    m_successful_shares_isValid = ::OpenAPI::fromJsonValue(m_successful_shares, json[QString("SuccessfulShares")]);
    m_successful_shares_isSet = !json[QString("SuccessfulShares")].isNull() && m_successful_shares_isValid;

    m_share_errors_isValid = ::OpenAPI::fromJsonValue(m_share_errors, json[QString("ShareErrors")]);
    m_share_errors_isSet = !json[QString("ShareErrors")].isNull() && m_share_errors_isValid;
}

QString OAIDescribePortfolioShareStatusOutput_ShareDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePortfolioShareStatusOutput_ShareDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_successful_shares.isSet()) {
        obj.insert(QString("SuccessfulShares"), ::OpenAPI::toJsonValue(m_successful_shares));
    }
    if (m_share_errors.isSet()) {
        obj.insert(QString("ShareErrors"), ::OpenAPI::toJsonValue(m_share_errors));
    }
    return obj;
}

QList OAIDescribePortfolioShareStatusOutput_ShareDetails::getSuccessfulShares() const {
    return m_successful_shares;
}
void OAIDescribePortfolioShareStatusOutput_ShareDetails::setSuccessfulShares(const QList &successful_shares) {
    m_successful_shares = successful_shares;
    m_successful_shares_isSet = true;
}

bool OAIDescribePortfolioShareStatusOutput_ShareDetails::is_successful_shares_Set() const{
    return m_successful_shares_isSet;
}

bool OAIDescribePortfolioShareStatusOutput_ShareDetails::is_successful_shares_Valid() const{
    return m_successful_shares_isValid;
}

QList OAIDescribePortfolioShareStatusOutput_ShareDetails::getShareErrors() const {
    return m_share_errors;
}
void OAIDescribePortfolioShareStatusOutput_ShareDetails::setShareErrors(const QList &share_errors) {
    m_share_errors = share_errors;
    m_share_errors_isSet = true;
}

bool OAIDescribePortfolioShareStatusOutput_ShareDetails::is_share_errors_Set() const{
    return m_share_errors_isSet;
}

bool OAIDescribePortfolioShareStatusOutput_ShareDetails::is_share_errors_Valid() const{
    return m_share_errors_isValid;
}

bool OAIDescribePortfolioShareStatusOutput_ShareDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_successful_shares.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePortfolioShareStatusOutput_ShareDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
