/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceptPortfolioShareInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceptPortfolioShareInput::OAIAcceptPortfolioShareInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceptPortfolioShareInput::OAIAcceptPortfolioShareInput() {
    this->initializeModel();
}

OAIAcceptPortfolioShareInput::~OAIAcceptPortfolioShareInput() {}

void OAIAcceptPortfolioShareInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_portfolio_share_type_isSet = false;
    m_portfolio_share_type_isValid = false;
}

void OAIAcceptPortfolioShareInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcceptPortfolioShareInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_portfolio_share_type_isValid = ::OpenAPI::fromJsonValue(m_portfolio_share_type, json[QString("PortfolioShareType")]);
    m_portfolio_share_type_isSet = !json[QString("PortfolioShareType")].isNull() && m_portfolio_share_type_isValid;
}

QString OAIAcceptPortfolioShareInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcceptPortfolioShareInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_portfolio_share_type.isSet()) {
        obj.insert(QString("PortfolioShareType"), ::OpenAPI::toJsonValue(m_portfolio_share_type));
    }
    return obj;
}

QString OAIAcceptPortfolioShareInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIAcceptPortfolioShareInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIAcceptPortfolioShareInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIAcceptPortfolioShareInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIAcceptPortfolioShareInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAIAcceptPortfolioShareInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAIAcceptPortfolioShareInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAIAcceptPortfolioShareInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

OAIPortfolioShareType OAIAcceptPortfolioShareInput::getPortfolioShareType() const {
    return m_portfolio_share_type;
}
void OAIAcceptPortfolioShareInput::setPortfolioShareType(const OAIPortfolioShareType &portfolio_share_type) {
    m_portfolio_share_type = portfolio_share_type;
    m_portfolio_share_type_isSet = true;
}

bool OAIAcceptPortfolioShareInput::is_portfolio_share_type_Set() const{
    return m_portfolio_share_type_isSet;
}

bool OAIAcceptPortfolioShareInput::is_portfolio_share_type_Valid() const{
    return m_portfolio_share_type_isValid;
}

bool OAIAcceptPortfolioShareInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_share_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcceptPortfolioShareInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portfolio_id_isValid && true;
}

} // namespace OpenAPI
