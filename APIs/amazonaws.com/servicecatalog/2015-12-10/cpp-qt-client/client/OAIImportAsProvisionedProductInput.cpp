/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportAsProvisionedProductInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportAsProvisionedProductInput::OAIImportAsProvisionedProductInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportAsProvisionedProductInput::OAIImportAsProvisionedProductInput() {
    this->initializeModel();
}

OAIImportAsProvisionedProductInput::~OAIImportAsProvisionedProductInput() {}

void OAIImportAsProvisionedProductInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_provisioned_product_name_isSet = false;
    m_provisioned_product_name_isValid = false;

    m_physical_id_isSet = false;
    m_physical_id_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAIImportAsProvisionedProductInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportAsProvisionedProductInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_provisioned_product_name_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_name, json[QString("ProvisionedProductName")]);
    m_provisioned_product_name_isSet = !json[QString("ProvisionedProductName")].isNull() && m_provisioned_product_name_isValid;

    m_physical_id_isValid = ::OpenAPI::fromJsonValue(m_physical_id, json[QString("PhysicalId")]);
    m_physical_id_isSet = !json[QString("PhysicalId")].isNull() && m_physical_id_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAIImportAsProvisionedProductInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportAsProvisionedProductInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_provisioned_product_name_isSet) {
        obj.insert(QString("ProvisionedProductName"), ::OpenAPI::toJsonValue(m_provisioned_product_name));
    }
    if (m_physical_id_isSet) {
        obj.insert(QString("PhysicalId"), ::OpenAPI::toJsonValue(m_physical_id));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAIImportAsProvisionedProductInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIImportAsProvisionedProductInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIImportAsProvisionedProductInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIImportAsProvisionedProductInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIImportAsProvisionedProductInput::getProductId() const {
    return m_product_id;
}
void OAIImportAsProvisionedProductInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIImportAsProvisionedProductInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIImportAsProvisionedProductInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIImportAsProvisionedProductInput::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIImportAsProvisionedProductInput::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIImportAsProvisionedProductInput::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIImportAsProvisionedProductInput::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QString OAIImportAsProvisionedProductInput::getProvisionedProductName() const {
    return m_provisioned_product_name;
}
void OAIImportAsProvisionedProductInput::setProvisionedProductName(const QString &provisioned_product_name) {
    m_provisioned_product_name = provisioned_product_name;
    m_provisioned_product_name_isSet = true;
}

bool OAIImportAsProvisionedProductInput::is_provisioned_product_name_Set() const{
    return m_provisioned_product_name_isSet;
}

bool OAIImportAsProvisionedProductInput::is_provisioned_product_name_Valid() const{
    return m_provisioned_product_name_isValid;
}

QString OAIImportAsProvisionedProductInput::getPhysicalId() const {
    return m_physical_id;
}
void OAIImportAsProvisionedProductInput::setPhysicalId(const QString &physical_id) {
    m_physical_id = physical_id;
    m_physical_id_isSet = true;
}

bool OAIImportAsProvisionedProductInput::is_physical_id_Set() const{
    return m_physical_id_isSet;
}

bool OAIImportAsProvisionedProductInput::is_physical_id_Valid() const{
    return m_physical_id_isValid;
}

QString OAIImportAsProvisionedProductInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIImportAsProvisionedProductInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIImportAsProvisionedProductInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIImportAsProvisionedProductInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAIImportAsProvisionedProductInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportAsProvisionedProductInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_provisioning_artifact_id_isValid && m_provisioned_product_name_isValid && m_physical_id_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
