/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportAsProvisionedProductOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportAsProvisionedProductOutput::OAIImportAsProvisionedProductOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportAsProvisionedProductOutput::OAIImportAsProvisionedProductOutput() {
    this->initializeModel();
}

OAIImportAsProvisionedProductOutput::~OAIImportAsProvisionedProductOutput() {}

void OAIImportAsProvisionedProductOutput::initializeModel() {

    m_record_detail_isSet = false;
    m_record_detail_isValid = false;
}

void OAIImportAsProvisionedProductOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportAsProvisionedProductOutput::fromJsonObject(QJsonObject json) {

    m_record_detail_isValid = ::OpenAPI::fromJsonValue(m_record_detail, json[QString("RecordDetail")]);
    m_record_detail_isSet = !json[QString("RecordDetail")].isNull() && m_record_detail_isValid;
}

QString OAIImportAsProvisionedProductOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportAsProvisionedProductOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_record_detail.isSet()) {
        obj.insert(QString("RecordDetail"), ::OpenAPI::toJsonValue(m_record_detail));
    }
    return obj;
}

OAIRecordDetail OAIImportAsProvisionedProductOutput::getRecordDetail() const {
    return m_record_detail;
}
void OAIImportAsProvisionedProductOutput::setRecordDetail(const OAIRecordDetail &record_detail) {
    m_record_detail = record_detail;
    m_record_detail_isSet = true;
}

bool OAIImportAsProvisionedProductOutput::is_record_detail_Set() const{
    return m_record_detail_isSet;
}

bool OAIImportAsProvisionedProductOutput::is_record_detail_Valid() const{
    return m_record_detail_isValid;
}

bool OAIImportAsProvisionedProductOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportAsProvisionedProductOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
