/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifyUpdateProvisionedProductEngineWorkflowResultInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::OAINotifyUpdateProvisionedProductEngineWorkflowResultInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::OAINotifyUpdateProvisionedProductEngineWorkflowResultInput() {
    this->initializeModel();
}

OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::~OAINotifyUpdateProvisionedProductEngineWorkflowResultInput() {}

void OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::initializeModel() {

    m_workflow_token_isSet = false;
    m_workflow_token_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::fromJsonObject(QJsonObject json) {

    m_workflow_token_isValid = ::OpenAPI::fromJsonValue(m_workflow_token, json[QString("WorkflowToken")]);
    m_workflow_token_isSet = !json[QString("WorkflowToken")].isNull() && m_workflow_token_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("RecordId")]);
    m_record_id_isSet = !json[QString("RecordId")].isNull() && m_record_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_token_isSet) {
        obj.insert(QString("WorkflowToken"), ::OpenAPI::toJsonValue(m_workflow_token));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("RecordId"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_outputs.isSet()) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::getWorkflowToken() const {
    return m_workflow_token;
}
void OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::setWorkflowToken(const QString &workflow_token) {
    m_workflow_token = workflow_token;
    m_workflow_token_isSet = true;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_workflow_token_Set() const{
    return m_workflow_token_isSet;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_workflow_token_Valid() const{
    return m_workflow_token_isValid;
}

QString OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::getRecordId() const {
    return m_record_id;
}
void OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::setRecordId(const QString &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_record_id_Valid() const{
    return m_record_id_isValid;
}

OAIEngineWorkflowStatus OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::getStatus() const {
    return m_status;
}
void OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::setStatus(const OAIEngineWorkflowStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_status_Set() const{
    return m_status_isSet;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::getFailureReason() const {
    return m_failure_reason;
}
void OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QList OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::getOutputs() const {
    return m_outputs;
}
void OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::setOutputs(const QList &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifyUpdateProvisionedProductEngineWorkflowResultInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workflow_token_isValid && m_record_id_isValid && m_status_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
