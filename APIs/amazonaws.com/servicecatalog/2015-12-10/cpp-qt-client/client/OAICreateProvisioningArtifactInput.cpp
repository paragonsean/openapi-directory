/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProvisioningArtifactInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProvisioningArtifactInput::OAICreateProvisioningArtifactInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProvisioningArtifactInput::OAICreateProvisioningArtifactInput() {
    this->initializeModel();
}

OAICreateProvisioningArtifactInput::~OAICreateProvisioningArtifactInput() {}

void OAICreateProvisioningArtifactInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAICreateProvisioningArtifactInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProvisioningArtifactInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAICreateProvisioningArtifactInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProvisioningArtifactInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAICreateProvisioningArtifactInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAICreateProvisioningArtifactInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAICreateProvisioningArtifactInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAICreateProvisioningArtifactInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAICreateProvisioningArtifactInput::getProductId() const {
    return m_product_id;
}
void OAICreateProvisioningArtifactInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAICreateProvisioningArtifactInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAICreateProvisioningArtifactInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

OAICreateProvisioningArtifactInput_Parameters OAICreateProvisioningArtifactInput::getParameters() const {
    return m_parameters;
}
void OAICreateProvisioningArtifactInput::setParameters(const OAICreateProvisioningArtifactInput_Parameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateProvisioningArtifactInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateProvisioningArtifactInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAICreateProvisioningArtifactInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateProvisioningArtifactInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateProvisioningArtifactInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateProvisioningArtifactInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAICreateProvisioningArtifactInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProvisioningArtifactInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_parameters_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
