/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningArtifactType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningArtifactType::OAIProvisioningArtifactType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningArtifactType::OAIProvisioningArtifactType() {
    this->initializeModel();
}

OAIProvisioningArtifactType::~OAIProvisioningArtifactType() {}

void OAIProvisioningArtifactType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProvisioningArtifactType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProvisioningArtifactType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CLOUD_FORMATION_TEMPLATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningArtifactType::CLOUD_FORMATION_TEMPLATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARKETPLACE_AMI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningArtifactType::MARKETPLACE_AMI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARKETPLACE_CAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningArtifactType::MARKETPLACE_CAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERRAFORM_OPEN_SOURCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningArtifactType::TERRAFORM_OPEN_SOURCE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProvisioningArtifactType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProvisioningArtifactType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProvisioningArtifactType::CLOUD_FORMATION_TEMPLATE:
            val = "CLOUD_FORMATION_TEMPLATE";
            break;
        case eOAIProvisioningArtifactType::MARKETPLACE_AMI:
            val = "MARKETPLACE_AMI";
            break;
        case eOAIProvisioningArtifactType::MARKETPLACE_CAR:
            val = "MARKETPLACE_CAR";
            break;
        case eOAIProvisioningArtifactType::TERRAFORM_OPEN_SOURCE:
            val = "TERRAFORM_OPEN_SOURCE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProvisioningArtifactType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProvisioningArtifactType::eOAIProvisioningArtifactType OAIProvisioningArtifactType::getValue() const {
    return m_value;
}

void OAIProvisioningArtifactType::setValue(const OAIProvisioningArtifactType::eOAIProvisioningArtifactType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProvisioningArtifactType::isSet() const {
    
    return m_value_isSet;
}

bool OAIProvisioningArtifactType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
