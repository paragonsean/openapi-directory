/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProductInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProductInput::OAIUpdateProductInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProductInput::OAIUpdateProductInput() {
    this->initializeModel();
}

OAIUpdateProductInput::~OAIUpdateProductInput() {}

void OAIUpdateProductInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_distributor_isSet = false;
    m_distributor_isValid = false;

    m_support_description_isSet = false;
    m_support_description_isValid = false;

    m_support_email_isSet = false;
    m_support_email_isValid = false;

    m_support_url_isSet = false;
    m_support_url_isValid = false;

    m_add_tags_isSet = false;
    m_add_tags_isValid = false;

    m_remove_tags_isSet = false;
    m_remove_tags_isValid = false;

    m_source_connection_isSet = false;
    m_source_connection_isValid = false;
}

void OAIUpdateProductInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProductInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_distributor_isValid = ::OpenAPI::fromJsonValue(m_distributor, json[QString("Distributor")]);
    m_distributor_isSet = !json[QString("Distributor")].isNull() && m_distributor_isValid;

    m_support_description_isValid = ::OpenAPI::fromJsonValue(m_support_description, json[QString("SupportDescription")]);
    m_support_description_isSet = !json[QString("SupportDescription")].isNull() && m_support_description_isValid;

    m_support_email_isValid = ::OpenAPI::fromJsonValue(m_support_email, json[QString("SupportEmail")]);
    m_support_email_isSet = !json[QString("SupportEmail")].isNull() && m_support_email_isValid;

    m_support_url_isValid = ::OpenAPI::fromJsonValue(m_support_url, json[QString("SupportUrl")]);
    m_support_url_isSet = !json[QString("SupportUrl")].isNull() && m_support_url_isValid;

    m_add_tags_isValid = ::OpenAPI::fromJsonValue(m_add_tags, json[QString("AddTags")]);
    m_add_tags_isSet = !json[QString("AddTags")].isNull() && m_add_tags_isValid;

    m_remove_tags_isValid = ::OpenAPI::fromJsonValue(m_remove_tags, json[QString("RemoveTags")]);
    m_remove_tags_isSet = !json[QString("RemoveTags")].isNull() && m_remove_tags_isValid;

    m_source_connection_isValid = ::OpenAPI::fromJsonValue(m_source_connection, json[QString("SourceConnection")]);
    m_source_connection_isSet = !json[QString("SourceConnection")].isNull() && m_source_connection_isValid;
}

QString OAIUpdateProductInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProductInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_distributor_isSet) {
        obj.insert(QString("Distributor"), ::OpenAPI::toJsonValue(m_distributor));
    }
    if (m_support_description_isSet) {
        obj.insert(QString("SupportDescription"), ::OpenAPI::toJsonValue(m_support_description));
    }
    if (m_support_email_isSet) {
        obj.insert(QString("SupportEmail"), ::OpenAPI::toJsonValue(m_support_email));
    }
    if (m_support_url_isSet) {
        obj.insert(QString("SupportUrl"), ::OpenAPI::toJsonValue(m_support_url));
    }
    if (m_add_tags.isSet()) {
        obj.insert(QString("AddTags"), ::OpenAPI::toJsonValue(m_add_tags));
    }
    if (m_remove_tags.isSet()) {
        obj.insert(QString("RemoveTags"), ::OpenAPI::toJsonValue(m_remove_tags));
    }
    if (m_source_connection.isSet()) {
        obj.insert(QString("SourceConnection"), ::OpenAPI::toJsonValue(m_source_connection));
    }
    return obj;
}

QString OAIUpdateProductInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIUpdateProductInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIUpdateProductInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIUpdateProductInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIUpdateProductInput::getId() const {
    return m_id;
}
void OAIUpdateProductInput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateProductInput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateProductInput::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateProductInput::getName() const {
    return m_name;
}
void OAIUpdateProductInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateProductInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateProductInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateProductInput::getOwner() const {
    return m_owner;
}
void OAIUpdateProductInput::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIUpdateProductInput::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIUpdateProductInput::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIUpdateProductInput::getDescription() const {
    return m_description;
}
void OAIUpdateProductInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateProductInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateProductInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateProductInput::getDistributor() const {
    return m_distributor;
}
void OAIUpdateProductInput::setDistributor(const QString &distributor) {
    m_distributor = distributor;
    m_distributor_isSet = true;
}

bool OAIUpdateProductInput::is_distributor_Set() const{
    return m_distributor_isSet;
}

bool OAIUpdateProductInput::is_distributor_Valid() const{
    return m_distributor_isValid;
}

QString OAIUpdateProductInput::getSupportDescription() const {
    return m_support_description;
}
void OAIUpdateProductInput::setSupportDescription(const QString &support_description) {
    m_support_description = support_description;
    m_support_description_isSet = true;
}

bool OAIUpdateProductInput::is_support_description_Set() const{
    return m_support_description_isSet;
}

bool OAIUpdateProductInput::is_support_description_Valid() const{
    return m_support_description_isValid;
}

QString OAIUpdateProductInput::getSupportEmail() const {
    return m_support_email;
}
void OAIUpdateProductInput::setSupportEmail(const QString &support_email) {
    m_support_email = support_email;
    m_support_email_isSet = true;
}

bool OAIUpdateProductInput::is_support_email_Set() const{
    return m_support_email_isSet;
}

bool OAIUpdateProductInput::is_support_email_Valid() const{
    return m_support_email_isValid;
}

QString OAIUpdateProductInput::getSupportUrl() const {
    return m_support_url;
}
void OAIUpdateProductInput::setSupportUrl(const QString &support_url) {
    m_support_url = support_url;
    m_support_url_isSet = true;
}

bool OAIUpdateProductInput::is_support_url_Set() const{
    return m_support_url_isSet;
}

bool OAIUpdateProductInput::is_support_url_Valid() const{
    return m_support_url_isValid;
}

QList OAIUpdateProductInput::getAddTags() const {
    return m_add_tags;
}
void OAIUpdateProductInput::setAddTags(const QList &add_tags) {
    m_add_tags = add_tags;
    m_add_tags_isSet = true;
}

bool OAIUpdateProductInput::is_add_tags_Set() const{
    return m_add_tags_isSet;
}

bool OAIUpdateProductInput::is_add_tags_Valid() const{
    return m_add_tags_isValid;
}

QList OAIUpdateProductInput::getRemoveTags() const {
    return m_remove_tags;
}
void OAIUpdateProductInput::setRemoveTags(const QList &remove_tags) {
    m_remove_tags = remove_tags;
    m_remove_tags_isSet = true;
}

bool OAIUpdateProductInput::is_remove_tags_Set() const{
    return m_remove_tags_isSet;
}

bool OAIUpdateProductInput::is_remove_tags_Valid() const{
    return m_remove_tags_isValid;
}

OAIUpdateProductInput_SourceConnection OAIUpdateProductInput::getSourceConnection() const {
    return m_source_connection;
}
void OAIUpdateProductInput::setSourceConnection(const OAIUpdateProductInput_SourceConnection &source_connection) {
    m_source_connection = source_connection;
    m_source_connection_isSet = true;
}

bool OAIUpdateProductInput::is_source_connection_Set() const{
    return m_source_connection_isSet;
}

bool OAIUpdateProductInput::is_source_connection_Valid() const{
    return m_source_connection_isValid;
}

bool OAIUpdateProductInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProductInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
