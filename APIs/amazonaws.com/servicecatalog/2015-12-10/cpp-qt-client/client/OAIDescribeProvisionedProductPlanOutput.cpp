/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProvisionedProductPlanOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProvisionedProductPlanOutput::OAIDescribeProvisionedProductPlanOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProvisionedProductPlanOutput::OAIDescribeProvisionedProductPlanOutput() {
    this->initializeModel();
}

OAIDescribeProvisionedProductPlanOutput::~OAIDescribeProvisionedProductPlanOutput() {}

void OAIDescribeProvisionedProductPlanOutput::initializeModel() {

    m_provisioned_product_plan_details_isSet = false;
    m_provisioned_product_plan_details_isValid = false;

    m_resource_changes_isSet = false;
    m_resource_changes_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIDescribeProvisionedProductPlanOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProvisionedProductPlanOutput::fromJsonObject(QJsonObject json) {

    m_provisioned_product_plan_details_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_plan_details, json[QString("ProvisionedProductPlanDetails")]);
    m_provisioned_product_plan_details_isSet = !json[QString("ProvisionedProductPlanDetails")].isNull() && m_provisioned_product_plan_details_isValid;

    m_resource_changes_isValid = ::OpenAPI::fromJsonValue(m_resource_changes, json[QString("ResourceChanges")]);
    m_resource_changes_isSet = !json[QString("ResourceChanges")].isNull() && m_resource_changes_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProvisionedProductPlanOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioned_product_plan_details.isSet()) {
        obj.insert(QString("ProvisionedProductPlanDetails"), ::OpenAPI::toJsonValue(m_provisioned_product_plan_details));
    }
    if (m_resource_changes.isSet()) {
        obj.insert(QString("ResourceChanges"), ::OpenAPI::toJsonValue(m_resource_changes));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails OAIDescribeProvisionedProductPlanOutput::getProvisionedProductPlanDetails() const {
    return m_provisioned_product_plan_details;
}
void OAIDescribeProvisionedProductPlanOutput::setProvisionedProductPlanDetails(const OAIDescribeProvisionedProductPlanOutput_ProvisionedProductPlanDetails &provisioned_product_plan_details) {
    m_provisioned_product_plan_details = provisioned_product_plan_details;
    m_provisioned_product_plan_details_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput::is_provisioned_product_plan_details_Set() const{
    return m_provisioned_product_plan_details_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput::is_provisioned_product_plan_details_Valid() const{
    return m_provisioned_product_plan_details_isValid;
}

QList OAIDescribeProvisionedProductPlanOutput::getResourceChanges() const {
    return m_resource_changes;
}
void OAIDescribeProvisionedProductPlanOutput::setResourceChanges(const QList &resource_changes) {
    m_resource_changes = resource_changes;
    m_resource_changes_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput::is_resource_changes_Set() const{
    return m_resource_changes_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput::is_resource_changes_Valid() const{
    return m_resource_changes_isValid;
}

QString OAIDescribeProvisionedProductPlanOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIDescribeProvisionedProductPlanOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIDescribeProvisionedProductPlanOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIDescribeProvisionedProductPlanOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIDescribeProvisionedProductPlanOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioned_product_plan_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_changes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProvisionedProductPlanOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
