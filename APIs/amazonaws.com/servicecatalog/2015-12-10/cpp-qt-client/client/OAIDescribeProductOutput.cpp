/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProductOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProductOutput::OAIDescribeProductOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProductOutput::OAIDescribeProductOutput() {
    this->initializeModel();
}

OAIDescribeProductOutput::~OAIDescribeProductOutput() {}

void OAIDescribeProductOutput::initializeModel() {

    m_product_view_summary_isSet = false;
    m_product_view_summary_isValid = false;

    m_provisioning_artifacts_isSet = false;
    m_provisioning_artifacts_isValid = false;

    m_budgets_isSet = false;
    m_budgets_isValid = false;

    m_launch_paths_isSet = false;
    m_launch_paths_isValid = false;
}

void OAIDescribeProductOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProductOutput::fromJsonObject(QJsonObject json) {

    m_product_view_summary_isValid = ::OpenAPI::fromJsonValue(m_product_view_summary, json[QString("ProductViewSummary")]);
    m_product_view_summary_isSet = !json[QString("ProductViewSummary")].isNull() && m_product_view_summary_isValid;

    m_provisioning_artifacts_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifacts, json[QString("ProvisioningArtifacts")]);
    m_provisioning_artifacts_isSet = !json[QString("ProvisioningArtifacts")].isNull() && m_provisioning_artifacts_isValid;

    m_budgets_isValid = ::OpenAPI::fromJsonValue(m_budgets, json[QString("Budgets")]);
    m_budgets_isSet = !json[QString("Budgets")].isNull() && m_budgets_isValid;

    m_launch_paths_isValid = ::OpenAPI::fromJsonValue(m_launch_paths, json[QString("LaunchPaths")]);
    m_launch_paths_isSet = !json[QString("LaunchPaths")].isNull() && m_launch_paths_isValid;
}

QString OAIDescribeProductOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProductOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_product_view_summary.isSet()) {
        obj.insert(QString("ProductViewSummary"), ::OpenAPI::toJsonValue(m_product_view_summary));
    }
    if (m_provisioning_artifacts.isSet()) {
        obj.insert(QString("ProvisioningArtifacts"), ::OpenAPI::toJsonValue(m_provisioning_artifacts));
    }
    if (m_budgets.isSet()) {
        obj.insert(QString("Budgets"), ::OpenAPI::toJsonValue(m_budgets));
    }
    if (m_launch_paths.isSet()) {
        obj.insert(QString("LaunchPaths"), ::OpenAPI::toJsonValue(m_launch_paths));
    }
    return obj;
}

OAIDescribeProductOutput_ProductViewSummary OAIDescribeProductOutput::getProductViewSummary() const {
    return m_product_view_summary;
}
void OAIDescribeProductOutput::setProductViewSummary(const OAIDescribeProductOutput_ProductViewSummary &product_view_summary) {
    m_product_view_summary = product_view_summary;
    m_product_view_summary_isSet = true;
}

bool OAIDescribeProductOutput::is_product_view_summary_Set() const{
    return m_product_view_summary_isSet;
}

bool OAIDescribeProductOutput::is_product_view_summary_Valid() const{
    return m_product_view_summary_isValid;
}

QList OAIDescribeProductOutput::getProvisioningArtifacts() const {
    return m_provisioning_artifacts;
}
void OAIDescribeProductOutput::setProvisioningArtifacts(const QList &provisioning_artifacts) {
    m_provisioning_artifacts = provisioning_artifacts;
    m_provisioning_artifacts_isSet = true;
}

bool OAIDescribeProductOutput::is_provisioning_artifacts_Set() const{
    return m_provisioning_artifacts_isSet;
}

bool OAIDescribeProductOutput::is_provisioning_artifacts_Valid() const{
    return m_provisioning_artifacts_isValid;
}

QList OAIDescribeProductOutput::getBudgets() const {
    return m_budgets;
}
void OAIDescribeProductOutput::setBudgets(const QList &budgets) {
    m_budgets = budgets;
    m_budgets_isSet = true;
}

bool OAIDescribeProductOutput::is_budgets_Set() const{
    return m_budgets_isSet;
}

bool OAIDescribeProductOutput::is_budgets_Valid() const{
    return m_budgets_isValid;
}

QList OAIDescribeProductOutput::getLaunchPaths() const {
    return m_launch_paths;
}
void OAIDescribeProductOutput::setLaunchPaths(const QList &launch_paths) {
    m_launch_paths = launch_paths;
    m_launch_paths_isSet = true;
}

bool OAIDescribeProductOutput::is_launch_paths_Set() const{
    return m_launch_paths_isSet;
}

bool OAIDescribeProductOutput::is_launch_paths_Valid() const{
    return m_launch_paths_isValid;
}

bool OAIDescribeProductOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_view_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_budgets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProductOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
