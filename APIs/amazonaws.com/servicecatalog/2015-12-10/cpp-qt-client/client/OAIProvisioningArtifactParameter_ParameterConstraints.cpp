/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningArtifactParameter_ParameterConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningArtifactParameter_ParameterConstraints::OAIProvisioningArtifactParameter_ParameterConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningArtifactParameter_ParameterConstraints::OAIProvisioningArtifactParameter_ParameterConstraints() {
    this->initializeModel();
}

OAIProvisioningArtifactParameter_ParameterConstraints::~OAIProvisioningArtifactParameter_ParameterConstraints() {}

void OAIProvisioningArtifactParameter_ParameterConstraints::initializeModel() {

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_allowed_pattern_isSet = false;
    m_allowed_pattern_isValid = false;

    m_constraint_description_isSet = false;
    m_constraint_description_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_min_length_isSet = false;
    m_min_length_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;
}

void OAIProvisioningArtifactParameter_ParameterConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningArtifactParameter_ParameterConstraints::fromJsonObject(QJsonObject json) {

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("AllowedValues")]);
    m_allowed_values_isSet = !json[QString("AllowedValues")].isNull() && m_allowed_values_isValid;

    m_allowed_pattern_isValid = ::OpenAPI::fromJsonValue(m_allowed_pattern, json[QString("AllowedPattern")]);
    m_allowed_pattern_isSet = !json[QString("AllowedPattern")].isNull() && m_allowed_pattern_isValid;

    m_constraint_description_isValid = ::OpenAPI::fromJsonValue(m_constraint_description, json[QString("ConstraintDescription")]);
    m_constraint_description_isSet = !json[QString("ConstraintDescription")].isNull() && m_constraint_description_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("MaxLength")]);
    m_max_length_isSet = !json[QString("MaxLength")].isNull() && m_max_length_isValid;

    m_min_length_isValid = ::OpenAPI::fromJsonValue(m_min_length, json[QString("MinLength")]);
    m_min_length_isSet = !json[QString("MinLength")].isNull() && m_min_length_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("MaxValue")]);
    m_max_value_isSet = !json[QString("MaxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("MinValue")]);
    m_min_value_isSet = !json[QString("MinValue")].isNull() && m_min_value_isValid;
}

QString OAIProvisioningArtifactParameter_ParameterConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningArtifactParameter_ParameterConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_values.isSet()) {
        obj.insert(QString("AllowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_allowed_pattern_isSet) {
        obj.insert(QString("AllowedPattern"), ::OpenAPI::toJsonValue(m_allowed_pattern));
    }
    if (m_constraint_description_isSet) {
        obj.insert(QString("ConstraintDescription"), ::OpenAPI::toJsonValue(m_constraint_description));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("MaxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_min_length_isSet) {
        obj.insert(QString("MinLength"), ::OpenAPI::toJsonValue(m_min_length));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("MaxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("MinValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    return obj;
}

QList OAIProvisioningArtifactParameter_ParameterConstraints::getAllowedValues() const {
    return m_allowed_values;
}
void OAIProvisioningArtifactParameter_ParameterConstraints::setAllowedValues(const QList &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

QString OAIProvisioningArtifactParameter_ParameterConstraints::getAllowedPattern() const {
    return m_allowed_pattern;
}
void OAIProvisioningArtifactParameter_ParameterConstraints::setAllowedPattern(const QString &allowed_pattern) {
    m_allowed_pattern = allowed_pattern;
    m_allowed_pattern_isSet = true;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_allowed_pattern_Set() const{
    return m_allowed_pattern_isSet;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_allowed_pattern_Valid() const{
    return m_allowed_pattern_isValid;
}

QString OAIProvisioningArtifactParameter_ParameterConstraints::getConstraintDescription() const {
    return m_constraint_description;
}
void OAIProvisioningArtifactParameter_ParameterConstraints::setConstraintDescription(const QString &constraint_description) {
    m_constraint_description = constraint_description;
    m_constraint_description_isSet = true;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_constraint_description_Set() const{
    return m_constraint_description_isSet;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_constraint_description_Valid() const{
    return m_constraint_description_isValid;
}

QString OAIProvisioningArtifactParameter_ParameterConstraints::getMaxLength() const {
    return m_max_length;
}
void OAIProvisioningArtifactParameter_ParameterConstraints::setMaxLength(const QString &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_max_length_Valid() const{
    return m_max_length_isValid;
}

QString OAIProvisioningArtifactParameter_ParameterConstraints::getMinLength() const {
    return m_min_length;
}
void OAIProvisioningArtifactParameter_ParameterConstraints::setMinLength(const QString &min_length) {
    m_min_length = min_length;
    m_min_length_isSet = true;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_min_length_Set() const{
    return m_min_length_isSet;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_min_length_Valid() const{
    return m_min_length_isValid;
}

QString OAIProvisioningArtifactParameter_ParameterConstraints::getMaxValue() const {
    return m_max_value;
}
void OAIProvisioningArtifactParameter_ParameterConstraints::setMaxValue(const QString &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_max_value_Valid() const{
    return m_max_value_isValid;
}

QString OAIProvisioningArtifactParameter_ParameterConstraints::getMinValue() const {
    return m_min_value;
}
void OAIProvisioningArtifactParameter_ParameterConstraints::setMinValue(const QString &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::is_min_value_Valid() const{
    return m_min_value_isValid;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningArtifactParameter_ParameterConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
