/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchProvisionedProductsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchProvisionedProductsInput::OAISearchProvisionedProductsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchProvisionedProductsInput::OAISearchProvisionedProductsInput() {
    this->initializeModel();
}

OAISearchProvisionedProductsInput::~OAISearchProvisionedProductsInput() {}

void OAISearchProvisionedProductsInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_access_level_filter_isSet = false;
    m_access_level_filter_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;
}

void OAISearchProvisionedProductsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchProvisionedProductsInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_access_level_filter_isValid = ::OpenAPI::fromJsonValue(m_access_level_filter, json[QString("AccessLevelFilter")]);
    m_access_level_filter_isSet = !json[QString("AccessLevelFilter")].isNull() && m_access_level_filter_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("PageToken")]);
    m_page_token_isSet = !json[QString("PageToken")].isNull() && m_page_token_isValid;
}

QString OAISearchProvisionedProductsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchProvisionedProductsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_access_level_filter.isSet()) {
        obj.insert(QString("AccessLevelFilter"), ::OpenAPI::toJsonValue(m_access_level_filter));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_sort_by_isSet) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("PageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    return obj;
}

QString OAISearchProvisionedProductsInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAISearchProvisionedProductsInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAISearchProvisionedProductsInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAISearchProvisionedProductsInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

OAIListProvisionedProductPlansInput_AccessLevelFilter OAISearchProvisionedProductsInput::getAccessLevelFilter() const {
    return m_access_level_filter;
}
void OAISearchProvisionedProductsInput::setAccessLevelFilter(const OAIListProvisionedProductPlansInput_AccessLevelFilter &access_level_filter) {
    m_access_level_filter = access_level_filter;
    m_access_level_filter_isSet = true;
}

bool OAISearchProvisionedProductsInput::is_access_level_filter_Set() const{
    return m_access_level_filter_isSet;
}

bool OAISearchProvisionedProductsInput::is_access_level_filter_Valid() const{
    return m_access_level_filter_isValid;
}

QMap OAISearchProvisionedProductsInput::getFilters() const {
    return m_filters;
}
void OAISearchProvisionedProductsInput::setFilters(const QMap &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchProvisionedProductsInput::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchProvisionedProductsInput::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAISearchProvisionedProductsInput::getSortBy() const {
    return m_sort_by;
}
void OAISearchProvisionedProductsInput::setSortBy(const QString &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAISearchProvisionedProductsInput::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAISearchProvisionedProductsInput::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAISearchProvisionedProductsInput::getSortOrder() const {
    return m_sort_order;
}
void OAISearchProvisionedProductsInput::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISearchProvisionedProductsInput::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISearchProvisionedProductsInput::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

qint32 OAISearchProvisionedProductsInput::getPageSize() const {
    return m_page_size;
}
void OAISearchProvisionedProductsInput::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAISearchProvisionedProductsInput::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAISearchProvisionedProductsInput::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAISearchProvisionedProductsInput::getPageToken() const {
    return m_page_token;
}
void OAISearchProvisionedProductsInput::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAISearchProvisionedProductsInput::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAISearchProvisionedProductsInput::is_page_token_Valid() const{
    return m_page_token_isValid;
}

bool OAISearchProvisionedProductsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_level_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchProvisionedProductsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
