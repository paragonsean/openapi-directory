/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProvisionProductInput_ProvisioningPreferences.h
 *
 * 
 */

#ifndef OAIProvisionProductInput_ProvisioningPreferences_H
#define OAIProvisionProductInput_ProvisioningPreferences_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProvisionProductInput_ProvisioningPreferences : public OAIObject {
public:
    OAIProvisionProductInput_ProvisioningPreferences();
    OAIProvisionProductInput_ProvisioningPreferences(QString json);
    ~OAIProvisionProductInput_ProvisioningPreferences() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getStackSetAccounts() const;
    void setStackSetAccounts(const QList &stack_set_accounts);
    bool is_stack_set_accounts_Set() const;
    bool is_stack_set_accounts_Valid() const;

    QList getStackSetRegions() const;
    void setStackSetRegions(const QList &stack_set_regions);
    bool is_stack_set_regions_Set() const;
    bool is_stack_set_regions_Valid() const;

    qint32 getStackSetFailureToleranceCount() const;
    void setStackSetFailureToleranceCount(const qint32 &stack_set_failure_tolerance_count);
    bool is_stack_set_failure_tolerance_count_Set() const;
    bool is_stack_set_failure_tolerance_count_Valid() const;

    qint32 getStackSetFailureTolerancePercentage() const;
    void setStackSetFailureTolerancePercentage(const qint32 &stack_set_failure_tolerance_percentage);
    bool is_stack_set_failure_tolerance_percentage_Set() const;
    bool is_stack_set_failure_tolerance_percentage_Valid() const;

    qint32 getStackSetMaxConcurrencyCount() const;
    void setStackSetMaxConcurrencyCount(const qint32 &stack_set_max_concurrency_count);
    bool is_stack_set_max_concurrency_count_Set() const;
    bool is_stack_set_max_concurrency_count_Valid() const;

    qint32 getStackSetMaxConcurrencyPercentage() const;
    void setStackSetMaxConcurrencyPercentage(const qint32 &stack_set_max_concurrency_percentage);
    bool is_stack_set_max_concurrency_percentage_Set() const;
    bool is_stack_set_max_concurrency_percentage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_stack_set_accounts;
    bool m_stack_set_accounts_isSet;
    bool m_stack_set_accounts_isValid;

    QList m_stack_set_regions;
    bool m_stack_set_regions_isSet;
    bool m_stack_set_regions_isValid;

    qint32 m_stack_set_failure_tolerance_count;
    bool m_stack_set_failure_tolerance_count_isSet;
    bool m_stack_set_failure_tolerance_count_isValid;

    qint32 m_stack_set_failure_tolerance_percentage;
    bool m_stack_set_failure_tolerance_percentage_isSet;
    bool m_stack_set_failure_tolerance_percentage_isValid;

    qint32 m_stack_set_max_concurrency_count;
    bool m_stack_set_max_concurrency_count_isSet;
    bool m_stack_set_max_concurrency_count_isValid;

    qint32 m_stack_set_max_concurrency_percentage;
    bool m_stack_set_max_concurrency_percentage_isSet;
    bool m_stack_set_max_concurrency_percentage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProvisionProductInput_ProvisioningPreferences)

#endif // OAIProvisionProductInput_ProvisioningPreferences_H
