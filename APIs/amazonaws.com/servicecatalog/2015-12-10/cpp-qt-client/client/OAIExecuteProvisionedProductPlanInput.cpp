/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteProvisionedProductPlanInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteProvisionedProductPlanInput::OAIExecuteProvisionedProductPlanInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteProvisionedProductPlanInput::OAIExecuteProvisionedProductPlanInput() {
    this->initializeModel();
}

OAIExecuteProvisionedProductPlanInput::~OAIExecuteProvisionedProductPlanInput() {}

void OAIExecuteProvisionedProductPlanInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAIExecuteProvisionedProductPlanInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteProvisionedProductPlanInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("PlanId")]);
    m_plan_id_isSet = !json[QString("PlanId")].isNull() && m_plan_id_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAIExecuteProvisionedProductPlanInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteProvisionedProductPlanInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("PlanId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAIExecuteProvisionedProductPlanInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIExecuteProvisionedProductPlanInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIExecuteProvisionedProductPlanInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIExecuteProvisionedProductPlanInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIExecuteProvisionedProductPlanInput::getPlanId() const {
    return m_plan_id;
}
void OAIExecuteProvisionedProductPlanInput::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIExecuteProvisionedProductPlanInput::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIExecuteProvisionedProductPlanInput::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAIExecuteProvisionedProductPlanInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIExecuteProvisionedProductPlanInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIExecuteProvisionedProductPlanInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIExecuteProvisionedProductPlanInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAIExecuteProvisionedProductPlanInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteProvisionedProductPlanInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_plan_id_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
