/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProvisioningArtifactsForServiceActionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProvisioningArtifactsForServiceActionInput::OAIListProvisioningArtifactsForServiceActionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProvisioningArtifactsForServiceActionInput::OAIListProvisioningArtifactsForServiceActionInput() {
    this->initializeModel();
}

OAIListProvisioningArtifactsForServiceActionInput::~OAIListProvisioningArtifactsForServiceActionInput() {}

void OAIListProvisioningArtifactsForServiceActionInput::initializeModel() {

    m_service_action_id_isSet = false;
    m_service_action_id_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;
}

void OAIListProvisioningArtifactsForServiceActionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProvisioningArtifactsForServiceActionInput::fromJsonObject(QJsonObject json) {

    m_service_action_id_isValid = ::OpenAPI::fromJsonValue(m_service_action_id, json[QString("ServiceActionId")]);
    m_service_action_id_isSet = !json[QString("ServiceActionId")].isNull() && m_service_action_id_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("PageToken")]);
    m_page_token_isSet = !json[QString("PageToken")].isNull() && m_page_token_isValid;

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;
}

QString OAIListProvisioningArtifactsForServiceActionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProvisioningArtifactsForServiceActionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_service_action_id_isSet) {
        obj.insert(QString("ServiceActionId"), ::OpenAPI::toJsonValue(m_service_action_id));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("PageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    return obj;
}

QString OAIListProvisioningArtifactsForServiceActionInput::getServiceActionId() const {
    return m_service_action_id;
}
void OAIListProvisioningArtifactsForServiceActionInput::setServiceActionId(const QString &service_action_id) {
    m_service_action_id = service_action_id;
    m_service_action_id_isSet = true;
}

bool OAIListProvisioningArtifactsForServiceActionInput::is_service_action_id_Set() const{
    return m_service_action_id_isSet;
}

bool OAIListProvisioningArtifactsForServiceActionInput::is_service_action_id_Valid() const{
    return m_service_action_id_isValid;
}

qint32 OAIListProvisioningArtifactsForServiceActionInput::getPageSize() const {
    return m_page_size;
}
void OAIListProvisioningArtifactsForServiceActionInput::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListProvisioningArtifactsForServiceActionInput::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListProvisioningArtifactsForServiceActionInput::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIListProvisioningArtifactsForServiceActionInput::getPageToken() const {
    return m_page_token;
}
void OAIListProvisioningArtifactsForServiceActionInput::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIListProvisioningArtifactsForServiceActionInput::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIListProvisioningArtifactsForServiceActionInput::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QString OAIListProvisioningArtifactsForServiceActionInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIListProvisioningArtifactsForServiceActionInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIListProvisioningArtifactsForServiceActionInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIListProvisioningArtifactsForServiceActionInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

bool OAIListProvisioningArtifactsForServiceActionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProvisioningArtifactsForServiceActionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_action_id_isValid && true;
}

} // namespace OpenAPI
