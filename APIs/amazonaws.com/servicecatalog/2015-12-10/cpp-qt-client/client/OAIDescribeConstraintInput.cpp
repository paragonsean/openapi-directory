/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeConstraintInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeConstraintInput::OAIDescribeConstraintInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeConstraintInput::OAIDescribeConstraintInput() {
    this->initializeModel();
}

OAIDescribeConstraintInput::~OAIDescribeConstraintInput() {}

void OAIDescribeConstraintInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIDescribeConstraintInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeConstraintInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;
}

QString OAIDescribeConstraintInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeConstraintInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIDescribeConstraintInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDescribeConstraintInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDescribeConstraintInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDescribeConstraintInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIDescribeConstraintInput::getId() const {
    return m_id;
}
void OAIDescribeConstraintInput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeConstraintInput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeConstraintInput::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDescribeConstraintInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeConstraintInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
