/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProvisioningArtifactOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProvisioningArtifactOutput::OAIDescribeProvisioningArtifactOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProvisioningArtifactOutput::OAIDescribeProvisioningArtifactOutput() {
    this->initializeModel();
}

OAIDescribeProvisioningArtifactOutput::~OAIDescribeProvisioningArtifactOutput() {}

void OAIDescribeProvisioningArtifactOutput::initializeModel() {

    m_provisioning_artifact_detail_isSet = false;
    m_provisioning_artifact_detail_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_provisioning_artifact_parameters_isSet = false;
    m_provisioning_artifact_parameters_isValid = false;
}

void OAIDescribeProvisioningArtifactOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProvisioningArtifactOutput::fromJsonObject(QJsonObject json) {

    m_provisioning_artifact_detail_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_detail, json[QString("ProvisioningArtifactDetail")]);
    m_provisioning_artifact_detail_isSet = !json[QString("ProvisioningArtifactDetail")].isNull() && m_provisioning_artifact_detail_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("Info")]);
    m_info_isSet = !json[QString("Info")].isNull() && m_info_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_provisioning_artifact_parameters_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_parameters, json[QString("ProvisioningArtifactParameters")]);
    m_provisioning_artifact_parameters_isSet = !json[QString("ProvisioningArtifactParameters")].isNull() && m_provisioning_artifact_parameters_isValid;
}

QString OAIDescribeProvisioningArtifactOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProvisioningArtifactOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_artifact_detail.isSet()) {
        obj.insert(QString("ProvisioningArtifactDetail"), ::OpenAPI::toJsonValue(m_provisioning_artifact_detail));
    }
    if (m_info.isSet()) {
        obj.insert(QString("Info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_provisioning_artifact_parameters.isSet()) {
        obj.insert(QString("ProvisioningArtifactParameters"), ::OpenAPI::toJsonValue(m_provisioning_artifact_parameters));
    }
    return obj;
}

OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail OAIDescribeProvisioningArtifactOutput::getProvisioningArtifactDetail() const {
    return m_provisioning_artifact_detail;
}
void OAIDescribeProvisioningArtifactOutput::setProvisioningArtifactDetail(const OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail &provisioning_artifact_detail) {
    m_provisioning_artifact_detail = provisioning_artifact_detail;
    m_provisioning_artifact_detail_isSet = true;
}

bool OAIDescribeProvisioningArtifactOutput::is_provisioning_artifact_detail_Set() const{
    return m_provisioning_artifact_detail_isSet;
}

bool OAIDescribeProvisioningArtifactOutput::is_provisioning_artifact_detail_Valid() const{
    return m_provisioning_artifact_detail_isValid;
}

QMap OAIDescribeProvisioningArtifactOutput::getInfo() const {
    return m_info;
}
void OAIDescribeProvisioningArtifactOutput::setInfo(const QMap &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIDescribeProvisioningArtifactOutput::is_info_Set() const{
    return m_info_isSet;
}

bool OAIDescribeProvisioningArtifactOutput::is_info_Valid() const{
    return m_info_isValid;
}

OAIStatus OAIDescribeProvisioningArtifactOutput::getStatus() const {
    return m_status;
}
void OAIDescribeProvisioningArtifactOutput::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeProvisioningArtifactOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeProvisioningArtifactOutput::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIDescribeProvisioningArtifactOutput::getProvisioningArtifactParameters() const {
    return m_provisioning_artifact_parameters;
}
void OAIDescribeProvisioningArtifactOutput::setProvisioningArtifactParameters(const QList &provisioning_artifact_parameters) {
    m_provisioning_artifact_parameters = provisioning_artifact_parameters;
    m_provisioning_artifact_parameters_isSet = true;
}

bool OAIDescribeProvisioningArtifactOutput::is_provisioning_artifact_parameters_Set() const{
    return m_provisioning_artifact_parameters_isSet;
}

bool OAIDescribeProvisioningArtifactOutput::is_provisioning_artifact_parameters_Valid() const{
    return m_provisioning_artifact_parameters_isValid;
}

bool OAIDescribeProvisioningArtifactOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_artifact_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProvisioningArtifactOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
