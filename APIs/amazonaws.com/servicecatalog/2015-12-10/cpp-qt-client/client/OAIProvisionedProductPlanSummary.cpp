/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisionedProductPlanSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisionedProductPlanSummary::OAIProvisionedProductPlanSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisionedProductPlanSummary::OAIProvisionedProductPlanSummary() {
    this->initializeModel();
}

OAIProvisionedProductPlanSummary::~OAIProvisionedProductPlanSummary() {}

void OAIProvisionedProductPlanSummary::initializeModel() {

    m_plan_name_isSet = false;
    m_plan_name_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_provision_product_id_isSet = false;
    m_provision_product_id_isValid = false;

    m_provision_product_name_isSet = false;
    m_provision_product_name_isValid = false;

    m_plan_type_isSet = false;
    m_plan_type_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;
}

void OAIProvisionedProductPlanSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisionedProductPlanSummary::fromJsonObject(QJsonObject json) {

    m_plan_name_isValid = ::OpenAPI::fromJsonValue(m_plan_name, json[QString("PlanName")]);
    m_plan_name_isSet = !json[QString("PlanName")].isNull() && m_plan_name_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("PlanId")]);
    m_plan_id_isSet = !json[QString("PlanId")].isNull() && m_plan_id_isValid;

    m_provision_product_id_isValid = ::OpenAPI::fromJsonValue(m_provision_product_id, json[QString("ProvisionProductId")]);
    m_provision_product_id_isSet = !json[QString("ProvisionProductId")].isNull() && m_provision_product_id_isValid;

    m_provision_product_name_isValid = ::OpenAPI::fromJsonValue(m_provision_product_name, json[QString("ProvisionProductName")]);
    m_provision_product_name_isSet = !json[QString("ProvisionProductName")].isNull() && m_provision_product_name_isValid;

    m_plan_type_isValid = ::OpenAPI::fromJsonValue(m_plan_type, json[QString("PlanType")]);
    m_plan_type_isSet = !json[QString("PlanType")].isNull() && m_plan_type_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;
}

QString OAIProvisionedProductPlanSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisionedProductPlanSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_plan_name_isSet) {
        obj.insert(QString("PlanName"), ::OpenAPI::toJsonValue(m_plan_name));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("PlanId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_provision_product_id_isSet) {
        obj.insert(QString("ProvisionProductId"), ::OpenAPI::toJsonValue(m_provision_product_id));
    }
    if (m_provision_product_name_isSet) {
        obj.insert(QString("ProvisionProductName"), ::OpenAPI::toJsonValue(m_provision_product_name));
    }
    if (m_plan_type.isSet()) {
        obj.insert(QString("PlanType"), ::OpenAPI::toJsonValue(m_plan_type));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    return obj;
}

QString OAIProvisionedProductPlanSummary::getPlanName() const {
    return m_plan_name;
}
void OAIProvisionedProductPlanSummary::setPlanName(const QString &plan_name) {
    m_plan_name = plan_name;
    m_plan_name_isSet = true;
}

bool OAIProvisionedProductPlanSummary::is_plan_name_Set() const{
    return m_plan_name_isSet;
}

bool OAIProvisionedProductPlanSummary::is_plan_name_Valid() const{
    return m_plan_name_isValid;
}

QString OAIProvisionedProductPlanSummary::getPlanId() const {
    return m_plan_id;
}
void OAIProvisionedProductPlanSummary::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIProvisionedProductPlanSummary::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIProvisionedProductPlanSummary::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAIProvisionedProductPlanSummary::getProvisionProductId() const {
    return m_provision_product_id;
}
void OAIProvisionedProductPlanSummary::setProvisionProductId(const QString &provision_product_id) {
    m_provision_product_id = provision_product_id;
    m_provision_product_id_isSet = true;
}

bool OAIProvisionedProductPlanSummary::is_provision_product_id_Set() const{
    return m_provision_product_id_isSet;
}

bool OAIProvisionedProductPlanSummary::is_provision_product_id_Valid() const{
    return m_provision_product_id_isValid;
}

QString OAIProvisionedProductPlanSummary::getProvisionProductName() const {
    return m_provision_product_name;
}
void OAIProvisionedProductPlanSummary::setProvisionProductName(const QString &provision_product_name) {
    m_provision_product_name = provision_product_name;
    m_provision_product_name_isSet = true;
}

bool OAIProvisionedProductPlanSummary::is_provision_product_name_Set() const{
    return m_provision_product_name_isSet;
}

bool OAIProvisionedProductPlanSummary::is_provision_product_name_Valid() const{
    return m_provision_product_name_isValid;
}

OAIProvisionedProductPlanType OAIProvisionedProductPlanSummary::getPlanType() const {
    return m_plan_type;
}
void OAIProvisionedProductPlanSummary::setPlanType(const OAIProvisionedProductPlanType &plan_type) {
    m_plan_type = plan_type;
    m_plan_type_isSet = true;
}

bool OAIProvisionedProductPlanSummary::is_plan_type_Set() const{
    return m_plan_type_isSet;
}

bool OAIProvisionedProductPlanSummary::is_plan_type_Valid() const{
    return m_plan_type_isValid;
}

QString OAIProvisionedProductPlanSummary::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIProvisionedProductPlanSummary::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIProvisionedProductPlanSummary::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIProvisionedProductPlanSummary::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

bool OAIProvisionedProductPlanSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisionedProductPlanSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
