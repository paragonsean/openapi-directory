/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackInstance::OAIStackInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackInstance::OAIStackInstance() {
    this->initializeModel();
}

OAIStackInstance::~OAIStackInstance() {}

void OAIStackInstance::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_stack_instance_status_isSet = false;
    m_stack_instance_status_isValid = false;
}

void OAIStackInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackInstance::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("Account")]);
    m_account_isSet = !json[QString("Account")].isNull() && m_account_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_stack_instance_status_isValid = ::OpenAPI::fromJsonValue(m_stack_instance_status, json[QString("StackInstanceStatus")]);
    m_stack_instance_status_isSet = !json[QString("StackInstanceStatus")].isNull() && m_stack_instance_status_isValid;
}

QString OAIStackInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("Account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_stack_instance_status.isSet()) {
        obj.insert(QString("StackInstanceStatus"), ::OpenAPI::toJsonValue(m_stack_instance_status));
    }
    return obj;
}

QString OAIStackInstance::getAccount() const {
    return m_account;
}
void OAIStackInstance::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIStackInstance::is_account_Set() const{
    return m_account_isSet;
}

bool OAIStackInstance::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIStackInstance::getRegion() const {
    return m_region;
}
void OAIStackInstance::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIStackInstance::is_region_Set() const{
    return m_region_isSet;
}

bool OAIStackInstance::is_region_Valid() const{
    return m_region_isValid;
}

OAIStackInstanceStatus OAIStackInstance::getStackInstanceStatus() const {
    return m_stack_instance_status;
}
void OAIStackInstance::setStackInstanceStatus(const OAIStackInstanceStatus &stack_instance_status) {
    m_stack_instance_status = stack_instance_status;
    m_stack_instance_status_isSet = true;
}

bool OAIStackInstance::is_stack_instance_status_Set() const{
    return m_stack_instance_status_isSet;
}

bool OAIStackInstance::is_stack_instance_status_Valid() const{
    return m_stack_instance_status_isValid;
}

bool OAIStackInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_instance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
