/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyProductInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyProductInput::OAICopyProductInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyProductInput::OAICopyProductInput() {
    this->initializeModel();
}

OAICopyProductInput::~OAICopyProductInput() {}

void OAICopyProductInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_source_product_arn_isSet = false;
    m_source_product_arn_isValid = false;

    m_target_product_id_isSet = false;
    m_target_product_id_isValid = false;

    m_target_product_name_isSet = false;
    m_target_product_name_isValid = false;

    m_source_provisioning_artifact_identifiers_isSet = false;
    m_source_provisioning_artifact_identifiers_isValid = false;

    m_copy_options_isSet = false;
    m_copy_options_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAICopyProductInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyProductInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_source_product_arn_isValid = ::OpenAPI::fromJsonValue(m_source_product_arn, json[QString("SourceProductArn")]);
    m_source_product_arn_isSet = !json[QString("SourceProductArn")].isNull() && m_source_product_arn_isValid;

    m_target_product_id_isValid = ::OpenAPI::fromJsonValue(m_target_product_id, json[QString("TargetProductId")]);
    m_target_product_id_isSet = !json[QString("TargetProductId")].isNull() && m_target_product_id_isValid;

    m_target_product_name_isValid = ::OpenAPI::fromJsonValue(m_target_product_name, json[QString("TargetProductName")]);
    m_target_product_name_isSet = !json[QString("TargetProductName")].isNull() && m_target_product_name_isValid;

    m_source_provisioning_artifact_identifiers_isValid = ::OpenAPI::fromJsonValue(m_source_provisioning_artifact_identifiers, json[QString("SourceProvisioningArtifactIdentifiers")]);
    m_source_provisioning_artifact_identifiers_isSet = !json[QString("SourceProvisioningArtifactIdentifiers")].isNull() && m_source_provisioning_artifact_identifiers_isValid;

    m_copy_options_isValid = ::OpenAPI::fromJsonValue(m_copy_options, json[QString("CopyOptions")]);
    m_copy_options_isSet = !json[QString("CopyOptions")].isNull() && m_copy_options_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAICopyProductInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyProductInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_source_product_arn_isSet) {
        obj.insert(QString("SourceProductArn"), ::OpenAPI::toJsonValue(m_source_product_arn));
    }
    if (m_target_product_id_isSet) {
        obj.insert(QString("TargetProductId"), ::OpenAPI::toJsonValue(m_target_product_id));
    }
    if (m_target_product_name_isSet) {
        obj.insert(QString("TargetProductName"), ::OpenAPI::toJsonValue(m_target_product_name));
    }
    if (m_source_provisioning_artifact_identifiers.isSet()) {
        obj.insert(QString("SourceProvisioningArtifactIdentifiers"), ::OpenAPI::toJsonValue(m_source_provisioning_artifact_identifiers));
    }
    if (m_copy_options.isSet()) {
        obj.insert(QString("CopyOptions"), ::OpenAPI::toJsonValue(m_copy_options));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAICopyProductInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAICopyProductInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAICopyProductInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAICopyProductInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAICopyProductInput::getSourceProductArn() const {
    return m_source_product_arn;
}
void OAICopyProductInput::setSourceProductArn(const QString &source_product_arn) {
    m_source_product_arn = source_product_arn;
    m_source_product_arn_isSet = true;
}

bool OAICopyProductInput::is_source_product_arn_Set() const{
    return m_source_product_arn_isSet;
}

bool OAICopyProductInput::is_source_product_arn_Valid() const{
    return m_source_product_arn_isValid;
}

QString OAICopyProductInput::getTargetProductId() const {
    return m_target_product_id;
}
void OAICopyProductInput::setTargetProductId(const QString &target_product_id) {
    m_target_product_id = target_product_id;
    m_target_product_id_isSet = true;
}

bool OAICopyProductInput::is_target_product_id_Set() const{
    return m_target_product_id_isSet;
}

bool OAICopyProductInput::is_target_product_id_Valid() const{
    return m_target_product_id_isValid;
}

QString OAICopyProductInput::getTargetProductName() const {
    return m_target_product_name;
}
void OAICopyProductInput::setTargetProductName(const QString &target_product_name) {
    m_target_product_name = target_product_name;
    m_target_product_name_isSet = true;
}

bool OAICopyProductInput::is_target_product_name_Set() const{
    return m_target_product_name_isSet;
}

bool OAICopyProductInput::is_target_product_name_Valid() const{
    return m_target_product_name_isValid;
}

QList OAICopyProductInput::getSourceProvisioningArtifactIdentifiers() const {
    return m_source_provisioning_artifact_identifiers;
}
void OAICopyProductInput::setSourceProvisioningArtifactIdentifiers(const QList &source_provisioning_artifact_identifiers) {
    m_source_provisioning_artifact_identifiers = source_provisioning_artifact_identifiers;
    m_source_provisioning_artifact_identifiers_isSet = true;
}

bool OAICopyProductInput::is_source_provisioning_artifact_identifiers_Set() const{
    return m_source_provisioning_artifact_identifiers_isSet;
}

bool OAICopyProductInput::is_source_provisioning_artifact_identifiers_Valid() const{
    return m_source_provisioning_artifact_identifiers_isValid;
}

QList OAICopyProductInput::getCopyOptions() const {
    return m_copy_options;
}
void OAICopyProductInput::setCopyOptions(const QList &copy_options) {
    m_copy_options = copy_options;
    m_copy_options_isSet = true;
}

bool OAICopyProductInput::is_copy_options_Set() const{
    return m_copy_options_isSet;
}

bool OAICopyProductInput::is_copy_options_Valid() const{
    return m_copy_options_isValid;
}

QString OAICopyProductInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICopyProductInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICopyProductInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICopyProductInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAICopyProductInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_product_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_provisioning_artifact_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyProductInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_product_arn_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
