/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceActionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceActionInput::OAIUpdateServiceActionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceActionInput::OAIUpdateServiceActionInput() {
    this->initializeModel();
}

OAIUpdateServiceActionInput::~OAIUpdateServiceActionInput() {}

void OAIUpdateServiceActionInput::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;
}

void OAIUpdateServiceActionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceActionInput::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;
}

QString OAIUpdateServiceActionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceActionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    return obj;
}

QString OAIUpdateServiceActionInput::getId() const {
    return m_id;
}
void OAIUpdateServiceActionInput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateServiceActionInput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateServiceActionInput::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateServiceActionInput::getName() const {
    return m_name;
}
void OAIUpdateServiceActionInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateServiceActionInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateServiceActionInput::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAIUpdateServiceActionInput::getDefinition() const {
    return m_definition;
}
void OAIUpdateServiceActionInput::setDefinition(const QMap &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIUpdateServiceActionInput::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIUpdateServiceActionInput::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAIUpdateServiceActionInput::getDescription() const {
    return m_description;
}
void OAIUpdateServiceActionInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateServiceActionInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateServiceActionInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateServiceActionInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIUpdateServiceActionInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIUpdateServiceActionInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIUpdateServiceActionInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

bool OAIUpdateServiceActionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceActionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
