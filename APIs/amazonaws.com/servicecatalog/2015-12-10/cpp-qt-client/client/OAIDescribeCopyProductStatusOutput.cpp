/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeCopyProductStatusOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeCopyProductStatusOutput::OAIDescribeCopyProductStatusOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeCopyProductStatusOutput::OAIDescribeCopyProductStatusOutput() {
    this->initializeModel();
}

OAIDescribeCopyProductStatusOutput::~OAIDescribeCopyProductStatusOutput() {}

void OAIDescribeCopyProductStatusOutput::initializeModel() {

    m_copy_product_status_isSet = false;
    m_copy_product_status_isValid = false;

    m_target_product_id_isSet = false;
    m_target_product_id_isValid = false;

    m_status_detail_isSet = false;
    m_status_detail_isValid = false;
}

void OAIDescribeCopyProductStatusOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeCopyProductStatusOutput::fromJsonObject(QJsonObject json) {

    m_copy_product_status_isValid = ::OpenAPI::fromJsonValue(m_copy_product_status, json[QString("CopyProductStatus")]);
    m_copy_product_status_isSet = !json[QString("CopyProductStatus")].isNull() && m_copy_product_status_isValid;

    m_target_product_id_isValid = ::OpenAPI::fromJsonValue(m_target_product_id, json[QString("TargetProductId")]);
    m_target_product_id_isSet = !json[QString("TargetProductId")].isNull() && m_target_product_id_isValid;

    m_status_detail_isValid = ::OpenAPI::fromJsonValue(m_status_detail, json[QString("StatusDetail")]);
    m_status_detail_isSet = !json[QString("StatusDetail")].isNull() && m_status_detail_isValid;
}

QString OAIDescribeCopyProductStatusOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeCopyProductStatusOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_copy_product_status.isSet()) {
        obj.insert(QString("CopyProductStatus"), ::OpenAPI::toJsonValue(m_copy_product_status));
    }
    if (m_target_product_id_isSet) {
        obj.insert(QString("TargetProductId"), ::OpenAPI::toJsonValue(m_target_product_id));
    }
    if (m_status_detail_isSet) {
        obj.insert(QString("StatusDetail"), ::OpenAPI::toJsonValue(m_status_detail));
    }
    return obj;
}

OAICopyProductStatus OAIDescribeCopyProductStatusOutput::getCopyProductStatus() const {
    return m_copy_product_status;
}
void OAIDescribeCopyProductStatusOutput::setCopyProductStatus(const OAICopyProductStatus &copy_product_status) {
    m_copy_product_status = copy_product_status;
    m_copy_product_status_isSet = true;
}

bool OAIDescribeCopyProductStatusOutput::is_copy_product_status_Set() const{
    return m_copy_product_status_isSet;
}

bool OAIDescribeCopyProductStatusOutput::is_copy_product_status_Valid() const{
    return m_copy_product_status_isValid;
}

QString OAIDescribeCopyProductStatusOutput::getTargetProductId() const {
    return m_target_product_id;
}
void OAIDescribeCopyProductStatusOutput::setTargetProductId(const QString &target_product_id) {
    m_target_product_id = target_product_id;
    m_target_product_id_isSet = true;
}

bool OAIDescribeCopyProductStatusOutput::is_target_product_id_Set() const{
    return m_target_product_id_isSet;
}

bool OAIDescribeCopyProductStatusOutput::is_target_product_id_Valid() const{
    return m_target_product_id_isValid;
}

QString OAIDescribeCopyProductStatusOutput::getStatusDetail() const {
    return m_status_detail;
}
void OAIDescribeCopyProductStatusOutput::setStatusDetail(const QString &status_detail) {
    m_status_detail = status_detail;
    m_status_detail_isSet = true;
}

bool OAIDescribeCopyProductStatusOutput::is_status_detail_Set() const{
    return m_status_detail_isSet;
}

bool OAIDescribeCopyProductStatusOutput::is_status_detail_Valid() const{
    return m_status_detail_isValid;
}

bool OAIDescribeCopyProductStatusOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copy_product_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_detail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeCopyProductStatusOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
