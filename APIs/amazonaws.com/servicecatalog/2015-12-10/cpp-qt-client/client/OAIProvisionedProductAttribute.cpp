/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisionedProductAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisionedProductAttribute::OAIProvisionedProductAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisionedProductAttribute::OAIProvisionedProductAttribute() {
    this->initializeModel();
}

OAIProvisionedProductAttribute::~OAIProvisionedProductAttribute() {}

void OAIProvisionedProductAttribute::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;

    m_last_record_id_isSet = false;
    m_last_record_id_isValid = false;

    m_last_provisioning_record_id_isSet = false;
    m_last_provisioning_record_id_isValid = false;

    m_last_successful_provisioning_record_id_isSet = false;
    m_last_successful_provisioning_record_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_physical_id_isSet = false;
    m_physical_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_provisioning_artifact_name_isSet = false;
    m_provisioning_artifact_name_isValid = false;

    m_user_arn_isSet = false;
    m_user_arn_isValid = false;

    m_user_arn_session_isSet = false;
    m_user_arn_session_isValid = false;
}

void OAIProvisionedProductAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisionedProductAttribute::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;

    m_last_record_id_isValid = ::OpenAPI::fromJsonValue(m_last_record_id, json[QString("LastRecordId")]);
    m_last_record_id_isSet = !json[QString("LastRecordId")].isNull() && m_last_record_id_isValid;

    m_last_provisioning_record_id_isValid = ::OpenAPI::fromJsonValue(m_last_provisioning_record_id, json[QString("LastProvisioningRecordId")]);
    m_last_provisioning_record_id_isSet = !json[QString("LastProvisioningRecordId")].isNull() && m_last_provisioning_record_id_isValid;

    m_last_successful_provisioning_record_id_isValid = ::OpenAPI::fromJsonValue(m_last_successful_provisioning_record_id, json[QString("LastSuccessfulProvisioningRecordId")]);
    m_last_successful_provisioning_record_id_isSet = !json[QString("LastSuccessfulProvisioningRecordId")].isNull() && m_last_successful_provisioning_record_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_physical_id_isValid = ::OpenAPI::fromJsonValue(m_physical_id, json[QString("PhysicalId")]);
    m_physical_id_isSet = !json[QString("PhysicalId")].isNull() && m_physical_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("ProductName")]);
    m_product_name_isSet = !json[QString("ProductName")].isNull() && m_product_name_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_provisioning_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_name, json[QString("ProvisioningArtifactName")]);
    m_provisioning_artifact_name_isSet = !json[QString("ProvisioningArtifactName")].isNull() && m_provisioning_artifact_name_isValid;

    m_user_arn_isValid = ::OpenAPI::fromJsonValue(m_user_arn, json[QString("UserArn")]);
    m_user_arn_isSet = !json[QString("UserArn")].isNull() && m_user_arn_isValid;

    m_user_arn_session_isValid = ::OpenAPI::fromJsonValue(m_user_arn_session, json[QString("UserArnSession")]);
    m_user_arn_session_isSet = !json[QString("UserArnSession")].isNull() && m_user_arn_session_isValid;
}

QString OAIProvisionedProductAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisionedProductAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    if (m_last_record_id_isSet) {
        obj.insert(QString("LastRecordId"), ::OpenAPI::toJsonValue(m_last_record_id));
    }
    if (m_last_provisioning_record_id_isSet) {
        obj.insert(QString("LastProvisioningRecordId"), ::OpenAPI::toJsonValue(m_last_provisioning_record_id));
    }
    if (m_last_successful_provisioning_record_id_isSet) {
        obj.insert(QString("LastSuccessfulProvisioningRecordId"), ::OpenAPI::toJsonValue(m_last_successful_provisioning_record_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_physical_id_isSet) {
        obj.insert(QString("PhysicalId"), ::OpenAPI::toJsonValue(m_physical_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("ProductName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_provisioning_artifact_name_isSet) {
        obj.insert(QString("ProvisioningArtifactName"), ::OpenAPI::toJsonValue(m_provisioning_artifact_name));
    }
    if (m_user_arn_isSet) {
        obj.insert(QString("UserArn"), ::OpenAPI::toJsonValue(m_user_arn));
    }
    if (m_user_arn_session_isSet) {
        obj.insert(QString("UserArnSession"), ::OpenAPI::toJsonValue(m_user_arn_session));
    }
    return obj;
}

QString OAIProvisionedProductAttribute::getName() const {
    return m_name;
}
void OAIProvisionedProductAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvisionedProductAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvisionedProductAttribute::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProvisionedProductAttribute::getArn() const {
    return m_arn;
}
void OAIProvisionedProductAttribute::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIProvisionedProductAttribute::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIProvisionedProductAttribute::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIProvisionedProductAttribute::getType() const {
    return m_type;
}
void OAIProvisionedProductAttribute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProvisionedProductAttribute::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProvisionedProductAttribute::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProvisionedProductAttribute::getId() const {
    return m_id;
}
void OAIProvisionedProductAttribute::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProvisionedProductAttribute::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProvisionedProductAttribute::is_id_Valid() const{
    return m_id_isValid;
}

OAIProvisionedProductStatus OAIProvisionedProductAttribute::getStatus() const {
    return m_status;
}
void OAIProvisionedProductAttribute::setStatus(const OAIProvisionedProductStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProvisionedProductAttribute::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProvisionedProductAttribute::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProvisionedProductAttribute::getStatusMessage() const {
    return m_status_message;
}
void OAIProvisionedProductAttribute::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIProvisionedProductAttribute::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIProvisionedProductAttribute::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAIProvisionedProductAttribute::getCreatedTime() const {
    return m_created_time;
}
void OAIProvisionedProductAttribute::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIProvisionedProductAttribute::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIProvisionedProductAttribute::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIProvisionedProductAttribute::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIProvisionedProductAttribute::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIProvisionedProductAttribute::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIProvisionedProductAttribute::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

QString OAIProvisionedProductAttribute::getLastRecordId() const {
    return m_last_record_id;
}
void OAIProvisionedProductAttribute::setLastRecordId(const QString &last_record_id) {
    m_last_record_id = last_record_id;
    m_last_record_id_isSet = true;
}

bool OAIProvisionedProductAttribute::is_last_record_id_Set() const{
    return m_last_record_id_isSet;
}

bool OAIProvisionedProductAttribute::is_last_record_id_Valid() const{
    return m_last_record_id_isValid;
}

QString OAIProvisionedProductAttribute::getLastProvisioningRecordId() const {
    return m_last_provisioning_record_id;
}
void OAIProvisionedProductAttribute::setLastProvisioningRecordId(const QString &last_provisioning_record_id) {
    m_last_provisioning_record_id = last_provisioning_record_id;
    m_last_provisioning_record_id_isSet = true;
}

bool OAIProvisionedProductAttribute::is_last_provisioning_record_id_Set() const{
    return m_last_provisioning_record_id_isSet;
}

bool OAIProvisionedProductAttribute::is_last_provisioning_record_id_Valid() const{
    return m_last_provisioning_record_id_isValid;
}

QString OAIProvisionedProductAttribute::getLastSuccessfulProvisioningRecordId() const {
    return m_last_successful_provisioning_record_id;
}
void OAIProvisionedProductAttribute::setLastSuccessfulProvisioningRecordId(const QString &last_successful_provisioning_record_id) {
    m_last_successful_provisioning_record_id = last_successful_provisioning_record_id;
    m_last_successful_provisioning_record_id_isSet = true;
}

bool OAIProvisionedProductAttribute::is_last_successful_provisioning_record_id_Set() const{
    return m_last_successful_provisioning_record_id_isSet;
}

bool OAIProvisionedProductAttribute::is_last_successful_provisioning_record_id_Valid() const{
    return m_last_successful_provisioning_record_id_isValid;
}

QList OAIProvisionedProductAttribute::getTags() const {
    return m_tags;
}
void OAIProvisionedProductAttribute::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProvisionedProductAttribute::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProvisionedProductAttribute::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIProvisionedProductAttribute::getPhysicalId() const {
    return m_physical_id;
}
void OAIProvisionedProductAttribute::setPhysicalId(const QString &physical_id) {
    m_physical_id = physical_id;
    m_physical_id_isSet = true;
}

bool OAIProvisionedProductAttribute::is_physical_id_Set() const{
    return m_physical_id_isSet;
}

bool OAIProvisionedProductAttribute::is_physical_id_Valid() const{
    return m_physical_id_isValid;
}

QString OAIProvisionedProductAttribute::getProductId() const {
    return m_product_id;
}
void OAIProvisionedProductAttribute::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProvisionedProductAttribute::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProvisionedProductAttribute::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProvisionedProductAttribute::getProductName() const {
    return m_product_name;
}
void OAIProvisionedProductAttribute::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIProvisionedProductAttribute::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIProvisionedProductAttribute::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAIProvisionedProductAttribute::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIProvisionedProductAttribute::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIProvisionedProductAttribute::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIProvisionedProductAttribute::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QString OAIProvisionedProductAttribute::getProvisioningArtifactName() const {
    return m_provisioning_artifact_name;
}
void OAIProvisionedProductAttribute::setProvisioningArtifactName(const QString &provisioning_artifact_name) {
    m_provisioning_artifact_name = provisioning_artifact_name;
    m_provisioning_artifact_name_isSet = true;
}

bool OAIProvisionedProductAttribute::is_provisioning_artifact_name_Set() const{
    return m_provisioning_artifact_name_isSet;
}

bool OAIProvisionedProductAttribute::is_provisioning_artifact_name_Valid() const{
    return m_provisioning_artifact_name_isValid;
}

QString OAIProvisionedProductAttribute::getUserArn() const {
    return m_user_arn;
}
void OAIProvisionedProductAttribute::setUserArn(const QString &user_arn) {
    m_user_arn = user_arn;
    m_user_arn_isSet = true;
}

bool OAIProvisionedProductAttribute::is_user_arn_Set() const{
    return m_user_arn_isSet;
}

bool OAIProvisionedProductAttribute::is_user_arn_Valid() const{
    return m_user_arn_isValid;
}

QString OAIProvisionedProductAttribute::getUserArnSession() const {
    return m_user_arn_session;
}
void OAIProvisionedProductAttribute::setUserArnSession(const QString &user_arn_session) {
    m_user_arn_session = user_arn_session;
    m_user_arn_session_isSet = true;
}

bool OAIProvisionedProductAttribute::is_user_arn_session_Set() const{
    return m_user_arn_session_isSet;
}

bool OAIProvisionedProductAttribute::is_user_arn_session_Valid() const{
    return m_user_arn_session_isValid;
}

bool OAIProvisionedProductAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_provisioning_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_provisioning_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_arn_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisionedProductAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
