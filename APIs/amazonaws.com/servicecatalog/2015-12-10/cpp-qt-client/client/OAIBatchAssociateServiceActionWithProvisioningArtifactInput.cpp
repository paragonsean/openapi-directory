/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchAssociateServiceActionWithProvisioningArtifactInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchAssociateServiceActionWithProvisioningArtifactInput::OAIBatchAssociateServiceActionWithProvisioningArtifactInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchAssociateServiceActionWithProvisioningArtifactInput::OAIBatchAssociateServiceActionWithProvisioningArtifactInput() {
    this->initializeModel();
}

OAIBatchAssociateServiceActionWithProvisioningArtifactInput::~OAIBatchAssociateServiceActionWithProvisioningArtifactInput() {}

void OAIBatchAssociateServiceActionWithProvisioningArtifactInput::initializeModel() {

    m_service_action_associations_isSet = false;
    m_service_action_associations_isValid = false;

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;
}

void OAIBatchAssociateServiceActionWithProvisioningArtifactInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchAssociateServiceActionWithProvisioningArtifactInput::fromJsonObject(QJsonObject json) {

    m_service_action_associations_isValid = ::OpenAPI::fromJsonValue(m_service_action_associations, json[QString("ServiceActionAssociations")]);
    m_service_action_associations_isSet = !json[QString("ServiceActionAssociations")].isNull() && m_service_action_associations_isValid;

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;
}

QString OAIBatchAssociateServiceActionWithProvisioningArtifactInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchAssociateServiceActionWithProvisioningArtifactInput::asJsonObject() const {
    QJsonObject obj;
    if (m_service_action_associations.isSet()) {
        obj.insert(QString("ServiceActionAssociations"), ::OpenAPI::toJsonValue(m_service_action_associations));
    }
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    return obj;
}

QList OAIBatchAssociateServiceActionWithProvisioningArtifactInput::getServiceActionAssociations() const {
    return m_service_action_associations;
}
void OAIBatchAssociateServiceActionWithProvisioningArtifactInput::setServiceActionAssociations(const QList &service_action_associations) {
    m_service_action_associations = service_action_associations;
    m_service_action_associations_isSet = true;
}

bool OAIBatchAssociateServiceActionWithProvisioningArtifactInput::is_service_action_associations_Set() const{
    return m_service_action_associations_isSet;
}

bool OAIBatchAssociateServiceActionWithProvisioningArtifactInput::is_service_action_associations_Valid() const{
    return m_service_action_associations_isValid;
}

QString OAIBatchAssociateServiceActionWithProvisioningArtifactInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIBatchAssociateServiceActionWithProvisioningArtifactInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIBatchAssociateServiceActionWithProvisioningArtifactInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIBatchAssociateServiceActionWithProvisioningArtifactInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

bool OAIBatchAssociateServiceActionWithProvisioningArtifactInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_action_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchAssociateServiceActionWithProvisioningArtifactInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_action_associations_isValid && true;
}

} // namespace OpenAPI
