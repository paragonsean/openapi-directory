/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProvisioningParametersOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProvisioningParametersOutput::OAIDescribeProvisioningParametersOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProvisioningParametersOutput::OAIDescribeProvisioningParametersOutput() {
    this->initializeModel();
}

OAIDescribeProvisioningParametersOutput::~OAIDescribeProvisioningParametersOutput() {}

void OAIDescribeProvisioningParametersOutput::initializeModel() {

    m_provisioning_artifact_parameters_isSet = false;
    m_provisioning_artifact_parameters_isValid = false;

    m_constraint_summaries_isSet = false;
    m_constraint_summaries_isValid = false;

    m_usage_instructions_isSet = false;
    m_usage_instructions_isValid = false;

    m_tag_options_isSet = false;
    m_tag_options_isValid = false;

    m_provisioning_artifact_preferences_isSet = false;
    m_provisioning_artifact_preferences_isValid = false;

    m_provisioning_artifact_outputs_isSet = false;
    m_provisioning_artifact_outputs_isValid = false;

    m_provisioning_artifact_output_keys_isSet = false;
    m_provisioning_artifact_output_keys_isValid = false;
}

void OAIDescribeProvisioningParametersOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProvisioningParametersOutput::fromJsonObject(QJsonObject json) {

    m_provisioning_artifact_parameters_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_parameters, json[QString("ProvisioningArtifactParameters")]);
    m_provisioning_artifact_parameters_isSet = !json[QString("ProvisioningArtifactParameters")].isNull() && m_provisioning_artifact_parameters_isValid;

    m_constraint_summaries_isValid = ::OpenAPI::fromJsonValue(m_constraint_summaries, json[QString("ConstraintSummaries")]);
    m_constraint_summaries_isSet = !json[QString("ConstraintSummaries")].isNull() && m_constraint_summaries_isValid;

    m_usage_instructions_isValid = ::OpenAPI::fromJsonValue(m_usage_instructions, json[QString("UsageInstructions")]);
    m_usage_instructions_isSet = !json[QString("UsageInstructions")].isNull() && m_usage_instructions_isValid;

    m_tag_options_isValid = ::OpenAPI::fromJsonValue(m_tag_options, json[QString("TagOptions")]);
    m_tag_options_isSet = !json[QString("TagOptions")].isNull() && m_tag_options_isValid;

    m_provisioning_artifact_preferences_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_preferences, json[QString("ProvisioningArtifactPreferences")]);
    m_provisioning_artifact_preferences_isSet = !json[QString("ProvisioningArtifactPreferences")].isNull() && m_provisioning_artifact_preferences_isValid;

    m_provisioning_artifact_outputs_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_outputs, json[QString("ProvisioningArtifactOutputs")]);
    m_provisioning_artifact_outputs_isSet = !json[QString("ProvisioningArtifactOutputs")].isNull() && m_provisioning_artifact_outputs_isValid;

    m_provisioning_artifact_output_keys_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_output_keys, json[QString("ProvisioningArtifactOutputKeys")]);
    m_provisioning_artifact_output_keys_isSet = !json[QString("ProvisioningArtifactOutputKeys")].isNull() && m_provisioning_artifact_output_keys_isValid;
}

QString OAIDescribeProvisioningParametersOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProvisioningParametersOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_artifact_parameters.isSet()) {
        obj.insert(QString("ProvisioningArtifactParameters"), ::OpenAPI::toJsonValue(m_provisioning_artifact_parameters));
    }
    if (m_constraint_summaries.isSet()) {
        obj.insert(QString("ConstraintSummaries"), ::OpenAPI::toJsonValue(m_constraint_summaries));
    }
    if (m_usage_instructions.isSet()) {
        obj.insert(QString("UsageInstructions"), ::OpenAPI::toJsonValue(m_usage_instructions));
    }
    if (m_tag_options.isSet()) {
        obj.insert(QString("TagOptions"), ::OpenAPI::toJsonValue(m_tag_options));
    }
    if (m_provisioning_artifact_preferences.isSet()) {
        obj.insert(QString("ProvisioningArtifactPreferences"), ::OpenAPI::toJsonValue(m_provisioning_artifact_preferences));
    }
    if (m_provisioning_artifact_outputs.isSet()) {
        obj.insert(QString("ProvisioningArtifactOutputs"), ::OpenAPI::toJsonValue(m_provisioning_artifact_outputs));
    }
    if (m_provisioning_artifact_output_keys.isSet()) {
        obj.insert(QString("ProvisioningArtifactOutputKeys"), ::OpenAPI::toJsonValue(m_provisioning_artifact_output_keys));
    }
    return obj;
}

QList OAIDescribeProvisioningParametersOutput::getProvisioningArtifactParameters() const {
    return m_provisioning_artifact_parameters;
}
void OAIDescribeProvisioningParametersOutput::setProvisioningArtifactParameters(const QList &provisioning_artifact_parameters) {
    m_provisioning_artifact_parameters = provisioning_artifact_parameters;
    m_provisioning_artifact_parameters_isSet = true;
}

bool OAIDescribeProvisioningParametersOutput::is_provisioning_artifact_parameters_Set() const{
    return m_provisioning_artifact_parameters_isSet;
}

bool OAIDescribeProvisioningParametersOutput::is_provisioning_artifact_parameters_Valid() const{
    return m_provisioning_artifact_parameters_isValid;
}

QList OAIDescribeProvisioningParametersOutput::getConstraintSummaries() const {
    return m_constraint_summaries;
}
void OAIDescribeProvisioningParametersOutput::setConstraintSummaries(const QList &constraint_summaries) {
    m_constraint_summaries = constraint_summaries;
    m_constraint_summaries_isSet = true;
}

bool OAIDescribeProvisioningParametersOutput::is_constraint_summaries_Set() const{
    return m_constraint_summaries_isSet;
}

bool OAIDescribeProvisioningParametersOutput::is_constraint_summaries_Valid() const{
    return m_constraint_summaries_isValid;
}

QList OAIDescribeProvisioningParametersOutput::getUsageInstructions() const {
    return m_usage_instructions;
}
void OAIDescribeProvisioningParametersOutput::setUsageInstructions(const QList &usage_instructions) {
    m_usage_instructions = usage_instructions;
    m_usage_instructions_isSet = true;
}

bool OAIDescribeProvisioningParametersOutput::is_usage_instructions_Set() const{
    return m_usage_instructions_isSet;
}

bool OAIDescribeProvisioningParametersOutput::is_usage_instructions_Valid() const{
    return m_usage_instructions_isValid;
}

QList OAIDescribeProvisioningParametersOutput::getTagOptions() const {
    return m_tag_options;
}
void OAIDescribeProvisioningParametersOutput::setTagOptions(const QList &tag_options) {
    m_tag_options = tag_options;
    m_tag_options_isSet = true;
}

bool OAIDescribeProvisioningParametersOutput::is_tag_options_Set() const{
    return m_tag_options_isSet;
}

bool OAIDescribeProvisioningParametersOutput::is_tag_options_Valid() const{
    return m_tag_options_isValid;
}

OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences OAIDescribeProvisioningParametersOutput::getProvisioningArtifactPreferences() const {
    return m_provisioning_artifact_preferences;
}
void OAIDescribeProvisioningParametersOutput::setProvisioningArtifactPreferences(const OAIDescribeProvisioningParametersOutput_ProvisioningArtifactPreferences &provisioning_artifact_preferences) {
    m_provisioning_artifact_preferences = provisioning_artifact_preferences;
    m_provisioning_artifact_preferences_isSet = true;
}

bool OAIDescribeProvisioningParametersOutput::is_provisioning_artifact_preferences_Set() const{
    return m_provisioning_artifact_preferences_isSet;
}

bool OAIDescribeProvisioningParametersOutput::is_provisioning_artifact_preferences_Valid() const{
    return m_provisioning_artifact_preferences_isValid;
}

QList OAIDescribeProvisioningParametersOutput::getProvisioningArtifactOutputs() const {
    return m_provisioning_artifact_outputs;
}
void OAIDescribeProvisioningParametersOutput::setProvisioningArtifactOutputs(const QList &provisioning_artifact_outputs) {
    m_provisioning_artifact_outputs = provisioning_artifact_outputs;
    m_provisioning_artifact_outputs_isSet = true;
}

bool OAIDescribeProvisioningParametersOutput::is_provisioning_artifact_outputs_Set() const{
    return m_provisioning_artifact_outputs_isSet;
}

bool OAIDescribeProvisioningParametersOutput::is_provisioning_artifact_outputs_Valid() const{
    return m_provisioning_artifact_outputs_isValid;
}

QList OAIDescribeProvisioningParametersOutput::getProvisioningArtifactOutputKeys() const {
    return m_provisioning_artifact_output_keys;
}
void OAIDescribeProvisioningParametersOutput::setProvisioningArtifactOutputKeys(const QList &provisioning_artifact_output_keys) {
    m_provisioning_artifact_output_keys = provisioning_artifact_output_keys;
    m_provisioning_artifact_output_keys_isSet = true;
}

bool OAIDescribeProvisioningParametersOutput::is_provisioning_artifact_output_keys_Set() const{
    return m_provisioning_artifact_output_keys_isSet;
}

bool OAIDescribeProvisioningParametersOutput::is_provisioning_artifact_output_keys_Valid() const{
    return m_provisioning_artifact_output_keys_isValid;
}

bool OAIDescribeProvisioningParametersOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_artifact_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_instructions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_output_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProvisioningParametersOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
