/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTagOptionsInput_Filters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTagOptionsInput_Filters::OAIListTagOptionsInput_Filters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTagOptionsInput_Filters::OAIListTagOptionsInput_Filters() {
    this->initializeModel();
}

OAIListTagOptionsInput_Filters::~OAIListTagOptionsInput_Filters() {}

void OAIListTagOptionsInput_Filters::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;
}

void OAIListTagOptionsInput_Filters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTagOptionsInput_Filters::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;
}

QString OAIListTagOptionsInput_Filters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTagOptionsInput_Filters::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    return obj;
}

QString OAIListTagOptionsInput_Filters::getKey() const {
    return m_key;
}
void OAIListTagOptionsInput_Filters::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIListTagOptionsInput_Filters::is_key_Set() const{
    return m_key_isSet;
}

bool OAIListTagOptionsInput_Filters::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIListTagOptionsInput_Filters::getValue() const {
    return m_value;
}
void OAIListTagOptionsInput_Filters::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIListTagOptionsInput_Filters::is_value_Set() const{
    return m_value_isSet;
}

bool OAIListTagOptionsInput_Filters::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIListTagOptionsInput_Filters::getActive() const {
    return m_active;
}
void OAIListTagOptionsInput_Filters::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIListTagOptionsInput_Filters::is_active_Set() const{
    return m_active_isSet;
}

bool OAIListTagOptionsInput_Filters::is_active_Valid() const{
    return m_active_isValid;
}

bool OAIListTagOptionsInput_Filters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTagOptionsInput_Filters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
