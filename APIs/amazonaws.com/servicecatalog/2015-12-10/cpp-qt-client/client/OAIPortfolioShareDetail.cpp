/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortfolioShareDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortfolioShareDetail::OAIPortfolioShareDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortfolioShareDetail::OAIPortfolioShareDetail() {
    this->initializeModel();
}

OAIPortfolioShareDetail::~OAIPortfolioShareDetail() {}

void OAIPortfolioShareDetail::initializeModel() {

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_accepted_isSet = false;
    m_accepted_isValid = false;

    m_share_tag_options_isSet = false;
    m_share_tag_options_isValid = false;

    m_share_principals_isSet = false;
    m_share_principals_isValid = false;
}

void OAIPortfolioShareDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPortfolioShareDetail::fromJsonObject(QJsonObject json) {

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("PrincipalId")]);
    m_principal_id_isSet = !json[QString("PrincipalId")].isNull() && m_principal_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_accepted_isValid = ::OpenAPI::fromJsonValue(m_accepted, json[QString("Accepted")]);
    m_accepted_isSet = !json[QString("Accepted")].isNull() && m_accepted_isValid;

    m_share_tag_options_isValid = ::OpenAPI::fromJsonValue(m_share_tag_options, json[QString("ShareTagOptions")]);
    m_share_tag_options_isSet = !json[QString("ShareTagOptions")].isNull() && m_share_tag_options_isValid;

    m_share_principals_isValid = ::OpenAPI::fromJsonValue(m_share_principals, json[QString("SharePrincipals")]);
    m_share_principals_isSet = !json[QString("SharePrincipals")].isNull() && m_share_principals_isValid;
}

QString OAIPortfolioShareDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPortfolioShareDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_principal_id_isSet) {
        obj.insert(QString("PrincipalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_accepted_isSet) {
        obj.insert(QString("Accepted"), ::OpenAPI::toJsonValue(m_accepted));
    }
    if (m_share_tag_options_isSet) {
        obj.insert(QString("ShareTagOptions"), ::OpenAPI::toJsonValue(m_share_tag_options));
    }
    if (m_share_principals_isSet) {
        obj.insert(QString("SharePrincipals"), ::OpenAPI::toJsonValue(m_share_principals));
    }
    return obj;
}

QString OAIPortfolioShareDetail::getPrincipalId() const {
    return m_principal_id;
}
void OAIPortfolioShareDetail::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIPortfolioShareDetail::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIPortfolioShareDetail::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

OAIDescribePortfolioShareType OAIPortfolioShareDetail::getType() const {
    return m_type;
}
void OAIPortfolioShareDetail::setType(const OAIDescribePortfolioShareType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPortfolioShareDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPortfolioShareDetail::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPortfolioShareDetail::getAccepted() const {
    return m_accepted;
}
void OAIPortfolioShareDetail::setAccepted(const bool &accepted) {
    m_accepted = accepted;
    m_accepted_isSet = true;
}

bool OAIPortfolioShareDetail::is_accepted_Set() const{
    return m_accepted_isSet;
}

bool OAIPortfolioShareDetail::is_accepted_Valid() const{
    return m_accepted_isValid;
}

bool OAIPortfolioShareDetail::getShareTagOptions() const {
    return m_share_tag_options;
}
void OAIPortfolioShareDetail::setShareTagOptions(const bool &share_tag_options) {
    m_share_tag_options = share_tag_options;
    m_share_tag_options_isSet = true;
}

bool OAIPortfolioShareDetail::is_share_tag_options_Set() const{
    return m_share_tag_options_isSet;
}

bool OAIPortfolioShareDetail::is_share_tag_options_Valid() const{
    return m_share_tag_options_isValid;
}

bool OAIPortfolioShareDetail::getSharePrincipals() const {
    return m_share_principals;
}
void OAIPortfolioShareDetail::setSharePrincipals(const bool &share_principals) {
    m_share_principals = share_principals;
    m_share_principals_isSet = true;
}

bool OAIPortfolioShareDetail::is_share_principals_Set() const{
    return m_share_principals_isSet;
}

bool OAIPortfolioShareDetail::is_share_principals_Valid() const{
    return m_share_principals_isValid;
}

bool OAIPortfolioShareDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_tag_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_principals_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPortfolioShareDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
