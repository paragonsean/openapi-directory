/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningArtifactView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningArtifactView::OAIProvisioningArtifactView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningArtifactView::OAIProvisioningArtifactView() {
    this->initializeModel();
}

OAIProvisioningArtifactView::~OAIProvisioningArtifactView() {}

void OAIProvisioningArtifactView::initializeModel() {

    m_product_view_summary_isSet = false;
    m_product_view_summary_isValid = false;

    m_provisioning_artifact_isSet = false;
    m_provisioning_artifact_isValid = false;
}

void OAIProvisioningArtifactView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningArtifactView::fromJsonObject(QJsonObject json) {

    m_product_view_summary_isValid = ::OpenAPI::fromJsonValue(m_product_view_summary, json[QString("ProductViewSummary")]);
    m_product_view_summary_isSet = !json[QString("ProductViewSummary")].isNull() && m_product_view_summary_isValid;

    m_provisioning_artifact_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact, json[QString("ProvisioningArtifact")]);
    m_provisioning_artifact_isSet = !json[QString("ProvisioningArtifact")].isNull() && m_provisioning_artifact_isValid;
}

QString OAIProvisioningArtifactView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningArtifactView::asJsonObject() const {
    QJsonObject obj;
    if (m_product_view_summary.isSet()) {
        obj.insert(QString("ProductViewSummary"), ::OpenAPI::toJsonValue(m_product_view_summary));
    }
    if (m_provisioning_artifact.isSet()) {
        obj.insert(QString("ProvisioningArtifact"), ::OpenAPI::toJsonValue(m_provisioning_artifact));
    }
    return obj;
}

OAIProvisioningArtifactView_ProductViewSummary OAIProvisioningArtifactView::getProductViewSummary() const {
    return m_product_view_summary;
}
void OAIProvisioningArtifactView::setProductViewSummary(const OAIProvisioningArtifactView_ProductViewSummary &product_view_summary) {
    m_product_view_summary = product_view_summary;
    m_product_view_summary_isSet = true;
}

bool OAIProvisioningArtifactView::is_product_view_summary_Set() const{
    return m_product_view_summary_isSet;
}

bool OAIProvisioningArtifactView::is_product_view_summary_Valid() const{
    return m_product_view_summary_isValid;
}

OAIProvisioningArtifactView_ProvisioningArtifact OAIProvisioningArtifactView::getProvisioningArtifact() const {
    return m_provisioning_artifact;
}
void OAIProvisioningArtifactView::setProvisioningArtifact(const OAIProvisioningArtifactView_ProvisioningArtifact &provisioning_artifact) {
    m_provisioning_artifact = provisioning_artifact;
    m_provisioning_artifact_isSet = true;
}

bool OAIProvisioningArtifactView::is_provisioning_artifact_Set() const{
    return m_provisioning_artifact_isSet;
}

bool OAIProvisioningArtifactView::is_provisioning_artifact_Valid() const{
    return m_provisioning_artifact_isValid;
}

bool OAIProvisioningArtifactView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_view_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningArtifactView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
