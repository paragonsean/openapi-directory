/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteProvisionedProductServiceActionOutput_RecordDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::OAIExecuteProvisionedProductServiceActionOutput_RecordDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::OAIExecuteProvisionedProductServiceActionOutput_RecordDetail() {
    this->initializeModel();
}

OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::~OAIExecuteProvisionedProductServiceActionOutput_RecordDetail() {}

void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::initializeModel() {

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_provisioned_product_name_isSet = false;
    m_provisioned_product_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_provisioned_product_type_isSet = false;
    m_provisioned_product_type_isValid = false;

    m_record_type_isSet = false;
    m_record_type_isValid = false;

    m_provisioned_product_id_isSet = false;
    m_provisioned_product_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_path_id_isSet = false;
    m_path_id_isValid = false;

    m_record_errors_isSet = false;
    m_record_errors_isValid = false;

    m_record_tags_isSet = false;
    m_record_tags_isValid = false;

    m_launch_role_arn_isSet = false;
    m_launch_role_arn_isValid = false;
}

void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::fromJsonObject(QJsonObject json) {

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("RecordId")]);
    m_record_id_isSet = !json[QString("RecordId")].isNull() && m_record_id_isValid;

    m_provisioned_product_name_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_name, json[QString("ProvisionedProductName")]);
    m_provisioned_product_name_isSet = !json[QString("ProvisionedProductName")].isNull() && m_provisioned_product_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("UpdatedTime")]);
    m_updated_time_isSet = !json[QString("UpdatedTime")].isNull() && m_updated_time_isValid;

    m_provisioned_product_type_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_type, json[QString("ProvisionedProductType")]);
    m_provisioned_product_type_isSet = !json[QString("ProvisionedProductType")].isNull() && m_provisioned_product_type_isValid;

    m_record_type_isValid = ::OpenAPI::fromJsonValue(m_record_type, json[QString("RecordType")]);
    m_record_type_isSet = !json[QString("RecordType")].isNull() && m_record_type_isValid;

    m_provisioned_product_id_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_id, json[QString("ProvisionedProductId")]);
    m_provisioned_product_id_isSet = !json[QString("ProvisionedProductId")].isNull() && m_provisioned_product_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_path_id_isValid = ::OpenAPI::fromJsonValue(m_path_id, json[QString("PathId")]);
    m_path_id_isSet = !json[QString("PathId")].isNull() && m_path_id_isValid;

    m_record_errors_isValid = ::OpenAPI::fromJsonValue(m_record_errors, json[QString("RecordErrors")]);
    m_record_errors_isSet = !json[QString("RecordErrors")].isNull() && m_record_errors_isValid;

    m_record_tags_isValid = ::OpenAPI::fromJsonValue(m_record_tags, json[QString("RecordTags")]);
    m_record_tags_isSet = !json[QString("RecordTags")].isNull() && m_record_tags_isValid;

    m_launch_role_arn_isValid = ::OpenAPI::fromJsonValue(m_launch_role_arn, json[QString("LaunchRoleArn")]);
    m_launch_role_arn_isSet = !json[QString("LaunchRoleArn")].isNull() && m_launch_role_arn_isValid;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_record_id_isSet) {
        obj.insert(QString("RecordId"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_provisioned_product_name_isSet) {
        obj.insert(QString("ProvisionedProductName"), ::OpenAPI::toJsonValue(m_provisioned_product_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("UpdatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_provisioned_product_type_isSet) {
        obj.insert(QString("ProvisionedProductType"), ::OpenAPI::toJsonValue(m_provisioned_product_type));
    }
    if (m_record_type_isSet) {
        obj.insert(QString("RecordType"), ::OpenAPI::toJsonValue(m_record_type));
    }
    if (m_provisioned_product_id_isSet) {
        obj.insert(QString("ProvisionedProductId"), ::OpenAPI::toJsonValue(m_provisioned_product_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_path_id_isSet) {
        obj.insert(QString("PathId"), ::OpenAPI::toJsonValue(m_path_id));
    }
    if (m_record_errors.isSet()) {
        obj.insert(QString("RecordErrors"), ::OpenAPI::toJsonValue(m_record_errors));
    }
    if (m_record_tags.isSet()) {
        obj.insert(QString("RecordTags"), ::OpenAPI::toJsonValue(m_record_tags));
    }
    if (m_launch_role_arn_isSet) {
        obj.insert(QString("LaunchRoleArn"), ::OpenAPI::toJsonValue(m_launch_role_arn));
    }
    return obj;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getRecordId() const {
    return m_record_id;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setRecordId(const QString &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_record_id_Valid() const{
    return m_record_id_isValid;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getProvisionedProductName() const {
    return m_provisioned_product_name;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setProvisionedProductName(const QString &provisioned_product_name) {
    m_provisioned_product_name = provisioned_product_name;
    m_provisioned_product_name_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_provisioned_product_name_Set() const{
    return m_provisioned_product_name_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_provisioned_product_name_Valid() const{
    return m_provisioned_product_name_isValid;
}

OAIRecordStatus OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getStatus() const {
    return m_status;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setStatus(const OAIRecordStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getCreatedTime() const {
    return m_created_time;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getUpdatedTime() const {
    return m_updated_time;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getProvisionedProductType() const {
    return m_provisioned_product_type;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setProvisionedProductType(const QString &provisioned_product_type) {
    m_provisioned_product_type = provisioned_product_type;
    m_provisioned_product_type_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_provisioned_product_type_Set() const{
    return m_provisioned_product_type_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_provisioned_product_type_Valid() const{
    return m_provisioned_product_type_isValid;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getRecordType() const {
    return m_record_type;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setRecordType(const QString &record_type) {
    m_record_type = record_type;
    m_record_type_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_record_type_Set() const{
    return m_record_type_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_record_type_Valid() const{
    return m_record_type_isValid;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getProvisionedProductId() const {
    return m_provisioned_product_id;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setProvisionedProductId(const QString &provisioned_product_id) {
    m_provisioned_product_id = provisioned_product_id;
    m_provisioned_product_id_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_provisioned_product_id_Set() const{
    return m_provisioned_product_id_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_provisioned_product_id_Valid() const{
    return m_provisioned_product_id_isValid;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getProductId() const {
    return m_product_id;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getPathId() const {
    return m_path_id;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setPathId(const QString &path_id) {
    m_path_id = path_id;
    m_path_id_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_path_id_Set() const{
    return m_path_id_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_path_id_Valid() const{
    return m_path_id_isValid;
}

QList OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getRecordErrors() const {
    return m_record_errors;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setRecordErrors(const QList &record_errors) {
    m_record_errors = record_errors;
    m_record_errors_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_record_errors_Set() const{
    return m_record_errors_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_record_errors_Valid() const{
    return m_record_errors_isValid;
}

QList OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getRecordTags() const {
    return m_record_tags;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setRecordTags(const QList &record_tags) {
    m_record_tags = record_tags;
    m_record_tags_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_record_tags_Set() const{
    return m_record_tags_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_record_tags_Valid() const{
    return m_record_tags_isValid;
}

QString OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::getLaunchRoleArn() const {
    return m_launch_role_arn;
}
void OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::setLaunchRoleArn(const QString &launch_role_arn) {
    m_launch_role_arn = launch_role_arn;
    m_launch_role_arn_isSet = true;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_launch_role_arn_Set() const{
    return m_launch_role_arn_isSet;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::is_launch_role_arn_Valid() const{
    return m_launch_role_arn_isValid;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteProvisionedProductServiceActionOutput_RecordDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
