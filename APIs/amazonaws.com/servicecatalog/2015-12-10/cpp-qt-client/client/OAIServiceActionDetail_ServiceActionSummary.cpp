/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceActionDetail_ServiceActionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceActionDetail_ServiceActionSummary::OAIServiceActionDetail_ServiceActionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceActionDetail_ServiceActionSummary::OAIServiceActionDetail_ServiceActionSummary() {
    this->initializeModel();
}

OAIServiceActionDetail_ServiceActionSummary::~OAIServiceActionDetail_ServiceActionSummary() {}

void OAIServiceActionDetail_ServiceActionSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_definition_type_isSet = false;
    m_definition_type_isValid = false;
}

void OAIServiceActionDetail_ServiceActionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceActionDetail_ServiceActionSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_definition_type_isValid = ::OpenAPI::fromJsonValue(m_definition_type, json[QString("DefinitionType")]);
    m_definition_type_isSet = !json[QString("DefinitionType")].isNull() && m_definition_type_isValid;
}

QString OAIServiceActionDetail_ServiceActionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceActionDetail_ServiceActionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_definition_type.isSet()) {
        obj.insert(QString("DefinitionType"), ::OpenAPI::toJsonValue(m_definition_type));
    }
    return obj;
}

QString OAIServiceActionDetail_ServiceActionSummary::getId() const {
    return m_id;
}
void OAIServiceActionDetail_ServiceActionSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceActionDetail_ServiceActionSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceActionDetail_ServiceActionSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServiceActionDetail_ServiceActionSummary::getName() const {
    return m_name;
}
void OAIServiceActionDetail_ServiceActionSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceActionDetail_ServiceActionSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceActionDetail_ServiceActionSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIServiceActionDetail_ServiceActionSummary::getDescription() const {
    return m_description;
}
void OAIServiceActionDetail_ServiceActionSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceActionDetail_ServiceActionSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceActionDetail_ServiceActionSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAIServiceActionDefinitionType OAIServiceActionDetail_ServiceActionSummary::getDefinitionType() const {
    return m_definition_type;
}
void OAIServiceActionDetail_ServiceActionSummary::setDefinitionType(const OAIServiceActionDefinitionType &definition_type) {
    m_definition_type = definition_type;
    m_definition_type_isSet = true;
}

bool OAIServiceActionDetail_ServiceActionSummary::is_definition_type_Set() const{
    return m_definition_type_isSet;
}

bool OAIServiceActionDetail_ServiceActionSummary::is_definition_type_Valid() const{
    return m_definition_type_isValid;
}

bool OAIServiceActionDetail_ServiceActionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceActionDetail_ServiceActionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
