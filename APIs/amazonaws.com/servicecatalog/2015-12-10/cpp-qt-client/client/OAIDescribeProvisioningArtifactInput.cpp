/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProvisioningArtifactInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProvisioningArtifactInput::OAIDescribeProvisioningArtifactInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProvisioningArtifactInput::OAIDescribeProvisioningArtifactInput() {
    this->initializeModel();
}

OAIDescribeProvisioningArtifactInput::~OAIDescribeProvisioningArtifactInput() {}

void OAIDescribeProvisioningArtifactInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_provisioning_artifact_name_isSet = false;
    m_provisioning_artifact_name_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_verbose_isSet = false;
    m_verbose_isValid = false;

    m_include_provisioning_artifact_parameters_isSet = false;
    m_include_provisioning_artifact_parameters_isValid = false;
}

void OAIDescribeProvisioningArtifactInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProvisioningArtifactInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_provisioning_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_name, json[QString("ProvisioningArtifactName")]);
    m_provisioning_artifact_name_isSet = !json[QString("ProvisioningArtifactName")].isNull() && m_provisioning_artifact_name_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("ProductName")]);
    m_product_name_isSet = !json[QString("ProductName")].isNull() && m_product_name_isValid;

    m_verbose_isValid = ::OpenAPI::fromJsonValue(m_verbose, json[QString("Verbose")]);
    m_verbose_isSet = !json[QString("Verbose")].isNull() && m_verbose_isValid;

    m_include_provisioning_artifact_parameters_isValid = ::OpenAPI::fromJsonValue(m_include_provisioning_artifact_parameters, json[QString("IncludeProvisioningArtifactParameters")]);
    m_include_provisioning_artifact_parameters_isSet = !json[QString("IncludeProvisioningArtifactParameters")].isNull() && m_include_provisioning_artifact_parameters_isValid;
}

QString OAIDescribeProvisioningArtifactInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProvisioningArtifactInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_provisioning_artifact_name_isSet) {
        obj.insert(QString("ProvisioningArtifactName"), ::OpenAPI::toJsonValue(m_provisioning_artifact_name));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("ProductName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_verbose_isSet) {
        obj.insert(QString("Verbose"), ::OpenAPI::toJsonValue(m_verbose));
    }
    if (m_include_provisioning_artifact_parameters_isSet) {
        obj.insert(QString("IncludeProvisioningArtifactParameters"), ::OpenAPI::toJsonValue(m_include_provisioning_artifact_parameters));
    }
    return obj;
}

QString OAIDescribeProvisioningArtifactInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDescribeProvisioningArtifactInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDescribeProvisioningArtifactInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDescribeProvisioningArtifactInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIDescribeProvisioningArtifactInput::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIDescribeProvisioningArtifactInput::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIDescribeProvisioningArtifactInput::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIDescribeProvisioningArtifactInput::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QString OAIDescribeProvisioningArtifactInput::getProductId() const {
    return m_product_id;
}
void OAIDescribeProvisioningArtifactInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDescribeProvisioningArtifactInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDescribeProvisioningArtifactInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIDescribeProvisioningArtifactInput::getProvisioningArtifactName() const {
    return m_provisioning_artifact_name;
}
void OAIDescribeProvisioningArtifactInput::setProvisioningArtifactName(const QString &provisioning_artifact_name) {
    m_provisioning_artifact_name = provisioning_artifact_name;
    m_provisioning_artifact_name_isSet = true;
}

bool OAIDescribeProvisioningArtifactInput::is_provisioning_artifact_name_Set() const{
    return m_provisioning_artifact_name_isSet;
}

bool OAIDescribeProvisioningArtifactInput::is_provisioning_artifact_name_Valid() const{
    return m_provisioning_artifact_name_isValid;
}

QString OAIDescribeProvisioningArtifactInput::getProductName() const {
    return m_product_name;
}
void OAIDescribeProvisioningArtifactInput::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIDescribeProvisioningArtifactInput::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIDescribeProvisioningArtifactInput::is_product_name_Valid() const{
    return m_product_name_isValid;
}

bool OAIDescribeProvisioningArtifactInput::getVerbose() const {
    return m_verbose;
}
void OAIDescribeProvisioningArtifactInput::setVerbose(const bool &verbose) {
    m_verbose = verbose;
    m_verbose_isSet = true;
}

bool OAIDescribeProvisioningArtifactInput::is_verbose_Set() const{
    return m_verbose_isSet;
}

bool OAIDescribeProvisioningArtifactInput::is_verbose_Valid() const{
    return m_verbose_isValid;
}

bool OAIDescribeProvisioningArtifactInput::getIncludeProvisioningArtifactParameters() const {
    return m_include_provisioning_artifact_parameters;
}
void OAIDescribeProvisioningArtifactInput::setIncludeProvisioningArtifactParameters(const bool &include_provisioning_artifact_parameters) {
    m_include_provisioning_artifact_parameters = include_provisioning_artifact_parameters;
    m_include_provisioning_artifact_parameters_isSet = true;
}

bool OAIDescribeProvisioningArtifactInput::is_include_provisioning_artifact_parameters_Set() const{
    return m_include_provisioning_artifact_parameters_isSet;
}

bool OAIDescribeProvisioningArtifactInput::is_include_provisioning_artifact_parameters_Valid() const{
    return m_include_provisioning_artifact_parameters_isValid;
}

bool OAIDescribeProvisioningArtifactInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verbose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_provisioning_artifact_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProvisioningArtifactInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
