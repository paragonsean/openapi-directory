/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteProvisioningArtifactInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteProvisioningArtifactInput::OAIDeleteProvisioningArtifactInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteProvisioningArtifactInput::OAIDeleteProvisioningArtifactInput() {
    this->initializeModel();
}

OAIDeleteProvisioningArtifactInput::~OAIDeleteProvisioningArtifactInput() {}

void OAIDeleteProvisioningArtifactInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;
}

void OAIDeleteProvisioningArtifactInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteProvisioningArtifactInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;
}

QString OAIDeleteProvisioningArtifactInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteProvisioningArtifactInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    return obj;
}

QString OAIDeleteProvisioningArtifactInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDeleteProvisioningArtifactInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDeleteProvisioningArtifactInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDeleteProvisioningArtifactInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIDeleteProvisioningArtifactInput::getProductId() const {
    return m_product_id;
}
void OAIDeleteProvisioningArtifactInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDeleteProvisioningArtifactInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDeleteProvisioningArtifactInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIDeleteProvisioningArtifactInput::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIDeleteProvisioningArtifactInput::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIDeleteProvisioningArtifactInput::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIDeleteProvisioningArtifactInput::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

bool OAIDeleteProvisioningArtifactInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteProvisioningArtifactInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_provisioning_artifact_id_isValid && true;
}

} // namespace OpenAPI
