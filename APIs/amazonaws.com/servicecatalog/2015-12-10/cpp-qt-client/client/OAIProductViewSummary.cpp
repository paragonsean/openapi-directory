/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductViewSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductViewSummary::OAIProductViewSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductViewSummary::OAIProductViewSummary() {
    this->initializeModel();
}

OAIProductViewSummary::~OAIProductViewSummary() {}

void OAIProductViewSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_distributor_isSet = false;
    m_distributor_isValid = false;

    m_has_default_path_isSet = false;
    m_has_default_path_isValid = false;

    m_support_email_isSet = false;
    m_support_email_isValid = false;

    m_support_description_isSet = false;
    m_support_description_isValid = false;

    m_support_url_isSet = false;
    m_support_url_isValid = false;
}

void OAIProductViewSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductViewSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("ShortDescription")]);
    m_short_description_isSet = !json[QString("ShortDescription")].isNull() && m_short_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_distributor_isValid = ::OpenAPI::fromJsonValue(m_distributor, json[QString("Distributor")]);
    m_distributor_isSet = !json[QString("Distributor")].isNull() && m_distributor_isValid;

    m_has_default_path_isValid = ::OpenAPI::fromJsonValue(m_has_default_path, json[QString("HasDefaultPath")]);
    m_has_default_path_isSet = !json[QString("HasDefaultPath")].isNull() && m_has_default_path_isValid;

    m_support_email_isValid = ::OpenAPI::fromJsonValue(m_support_email, json[QString("SupportEmail")]);
    m_support_email_isSet = !json[QString("SupportEmail")].isNull() && m_support_email_isValid;

    m_support_description_isValid = ::OpenAPI::fromJsonValue(m_support_description, json[QString("SupportDescription")]);
    m_support_description_isSet = !json[QString("SupportDescription")].isNull() && m_support_description_isValid;

    m_support_url_isValid = ::OpenAPI::fromJsonValue(m_support_url, json[QString("SupportUrl")]);
    m_support_url_isSet = !json[QString("SupportUrl")].isNull() && m_support_url_isValid;
}

QString OAIProductViewSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductViewSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("ShortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_distributor_isSet) {
        obj.insert(QString("Distributor"), ::OpenAPI::toJsonValue(m_distributor));
    }
    if (m_has_default_path_isSet) {
        obj.insert(QString("HasDefaultPath"), ::OpenAPI::toJsonValue(m_has_default_path));
    }
    if (m_support_email_isSet) {
        obj.insert(QString("SupportEmail"), ::OpenAPI::toJsonValue(m_support_email));
    }
    if (m_support_description_isSet) {
        obj.insert(QString("SupportDescription"), ::OpenAPI::toJsonValue(m_support_description));
    }
    if (m_support_url_isSet) {
        obj.insert(QString("SupportUrl"), ::OpenAPI::toJsonValue(m_support_url));
    }
    return obj;
}

QString OAIProductViewSummary::getId() const {
    return m_id;
}
void OAIProductViewSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductViewSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductViewSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProductViewSummary::getProductId() const {
    return m_product_id;
}
void OAIProductViewSummary::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProductViewSummary::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProductViewSummary::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProductViewSummary::getName() const {
    return m_name;
}
void OAIProductViewSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductViewSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductViewSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProductViewSummary::getOwner() const {
    return m_owner;
}
void OAIProductViewSummary::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIProductViewSummary::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIProductViewSummary::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIProductViewSummary::getShortDescription() const {
    return m_short_description;
}
void OAIProductViewSummary::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIProductViewSummary::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIProductViewSummary::is_short_description_Valid() const{
    return m_short_description_isValid;
}

OAIProductType OAIProductViewSummary::getType() const {
    return m_type;
}
void OAIProductViewSummary::setType(const OAIProductType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProductViewSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProductViewSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProductViewSummary::getDistributor() const {
    return m_distributor;
}
void OAIProductViewSummary::setDistributor(const QString &distributor) {
    m_distributor = distributor;
    m_distributor_isSet = true;
}

bool OAIProductViewSummary::is_distributor_Set() const{
    return m_distributor_isSet;
}

bool OAIProductViewSummary::is_distributor_Valid() const{
    return m_distributor_isValid;
}

bool OAIProductViewSummary::getHasDefaultPath() const {
    return m_has_default_path;
}
void OAIProductViewSummary::setHasDefaultPath(const bool &has_default_path) {
    m_has_default_path = has_default_path;
    m_has_default_path_isSet = true;
}

bool OAIProductViewSummary::is_has_default_path_Set() const{
    return m_has_default_path_isSet;
}

bool OAIProductViewSummary::is_has_default_path_Valid() const{
    return m_has_default_path_isValid;
}

QString OAIProductViewSummary::getSupportEmail() const {
    return m_support_email;
}
void OAIProductViewSummary::setSupportEmail(const QString &support_email) {
    m_support_email = support_email;
    m_support_email_isSet = true;
}

bool OAIProductViewSummary::is_support_email_Set() const{
    return m_support_email_isSet;
}

bool OAIProductViewSummary::is_support_email_Valid() const{
    return m_support_email_isValid;
}

QString OAIProductViewSummary::getSupportDescription() const {
    return m_support_description;
}
void OAIProductViewSummary::setSupportDescription(const QString &support_description) {
    m_support_description = support_description;
    m_support_description_isSet = true;
}

bool OAIProductViewSummary::is_support_description_Set() const{
    return m_support_description_isSet;
}

bool OAIProductViewSummary::is_support_description_Valid() const{
    return m_support_description_isValid;
}

QString OAIProductViewSummary::getSupportUrl() const {
    return m_support_url;
}
void OAIProductViewSummary::setSupportUrl(const QString &support_url) {
    m_support_url = support_url;
    m_support_url_isSet = true;
}

bool OAIProductViewSummary::is_support_url_Set() const{
    return m_support_url_isSet;
}

bool OAIProductViewSummary::is_support_url_Valid() const{
    return m_support_url_isValid;
}

bool OAIProductViewSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_default_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductViewSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
