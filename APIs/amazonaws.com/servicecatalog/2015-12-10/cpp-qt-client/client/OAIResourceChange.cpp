/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceChange::OAIResourceChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceChange::OAIResourceChange() {
    this->initializeModel();
}

OAIResourceChange::~OAIResourceChange() {}

void OAIResourceChange::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_replacement_isSet = false;
    m_replacement_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;
}

void OAIResourceChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceChange::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("LogicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("LogicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("PhysicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("PhysicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_replacement_isValid = ::OpenAPI::fromJsonValue(m_replacement, json[QString("Replacement")]);
    m_replacement_isSet = !json[QString("Replacement")].isNull() && m_replacement_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("Scope")]);
    m_scope_isSet = !json[QString("Scope")].isNull() && m_scope_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;
}

QString OAIResourceChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceChange::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_logical_resource_id_isSet) {
        obj.insert(QString("LogicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id_isSet) {
        obj.insert(QString("PhysicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_replacement.isSet()) {
        obj.insert(QString("Replacement"), ::OpenAPI::toJsonValue(m_replacement));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("Scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_details.isSet()) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    return obj;
}

OAIChangeAction OAIResourceChange::getAction() const {
    return m_action;
}
void OAIResourceChange::setAction(const OAIChangeAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIResourceChange::is_action_Set() const{
    return m_action_isSet;
}

bool OAIResourceChange::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIResourceChange::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIResourceChange::setLogicalResourceId(const QString &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIResourceChange::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIResourceChange::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIResourceChange::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIResourceChange::setPhysicalResourceId(const QString &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIResourceChange::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIResourceChange::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QString OAIResourceChange::getResourceType() const {
    return m_resource_type;
}
void OAIResourceChange::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIResourceChange::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIResourceChange::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIReplacement OAIResourceChange::getReplacement() const {
    return m_replacement;
}
void OAIResourceChange::setReplacement(const OAIReplacement &replacement) {
    m_replacement = replacement;
    m_replacement_isSet = true;
}

bool OAIResourceChange::is_replacement_Set() const{
    return m_replacement_isSet;
}

bool OAIResourceChange::is_replacement_Valid() const{
    return m_replacement_isValid;
}

QList OAIResourceChange::getScope() const {
    return m_scope;
}
void OAIResourceChange::setScope(const QList &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIResourceChange::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIResourceChange::is_scope_Valid() const{
    return m_scope_isValid;
}

QList OAIResourceChange::getDetails() const {
    return m_details;
}
void OAIResourceChange::setDetails(const QList &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIResourceChange::is_details_Set() const{
    return m_details_isSet;
}

bool OAIResourceChange::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIResourceChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
