/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListStackInstancesForProvisionedProductOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListStackInstancesForProvisionedProductOutput::OAIListStackInstancesForProvisionedProductOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListStackInstancesForProvisionedProductOutput::OAIListStackInstancesForProvisionedProductOutput() {
    this->initializeModel();
}

OAIListStackInstancesForProvisionedProductOutput::~OAIListStackInstancesForProvisionedProductOutput() {}

void OAIListStackInstancesForProvisionedProductOutput::initializeModel() {

    m_stack_instances_isSet = false;
    m_stack_instances_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListStackInstancesForProvisionedProductOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListStackInstancesForProvisionedProductOutput::fromJsonObject(QJsonObject json) {

    m_stack_instances_isValid = ::OpenAPI::fromJsonValue(m_stack_instances, json[QString("StackInstances")]);
    m_stack_instances_isSet = !json[QString("StackInstances")].isNull() && m_stack_instances_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListStackInstancesForProvisionedProductOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListStackInstancesForProvisionedProductOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_instances.isSet()) {
        obj.insert(QString("StackInstances"), ::OpenAPI::toJsonValue(m_stack_instances));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIListStackInstancesForProvisionedProductOutput::getStackInstances() const {
    return m_stack_instances;
}
void OAIListStackInstancesForProvisionedProductOutput::setStackInstances(const QList &stack_instances) {
    m_stack_instances = stack_instances;
    m_stack_instances_isSet = true;
}

bool OAIListStackInstancesForProvisionedProductOutput::is_stack_instances_Set() const{
    return m_stack_instances_isSet;
}

bool OAIListStackInstancesForProvisionedProductOutput::is_stack_instances_Valid() const{
    return m_stack_instances_isValid;
}

QString OAIListStackInstancesForProvisionedProductOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListStackInstancesForProvisionedProductOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListStackInstancesForProvisionedProductOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListStackInstancesForProvisionedProductOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListStackInstancesForProvisionedProductOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListStackInstancesForProvisionedProductOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
