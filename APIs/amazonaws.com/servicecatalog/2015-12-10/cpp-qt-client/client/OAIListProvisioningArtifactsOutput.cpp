/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProvisioningArtifactsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProvisioningArtifactsOutput::OAIListProvisioningArtifactsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProvisioningArtifactsOutput::OAIListProvisioningArtifactsOutput() {
    this->initializeModel();
}

OAIListProvisioningArtifactsOutput::~OAIListProvisioningArtifactsOutput() {}

void OAIListProvisioningArtifactsOutput::initializeModel() {

    m_provisioning_artifact_details_isSet = false;
    m_provisioning_artifact_details_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListProvisioningArtifactsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProvisioningArtifactsOutput::fromJsonObject(QJsonObject json) {

    m_provisioning_artifact_details_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_details, json[QString("ProvisioningArtifactDetails")]);
    m_provisioning_artifact_details_isSet = !json[QString("ProvisioningArtifactDetails")].isNull() && m_provisioning_artifact_details_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListProvisioningArtifactsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProvisioningArtifactsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_artifact_details.isSet()) {
        obj.insert(QString("ProvisioningArtifactDetails"), ::OpenAPI::toJsonValue(m_provisioning_artifact_details));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIListProvisioningArtifactsOutput::getProvisioningArtifactDetails() const {
    return m_provisioning_artifact_details;
}
void OAIListProvisioningArtifactsOutput::setProvisioningArtifactDetails(const QList &provisioning_artifact_details) {
    m_provisioning_artifact_details = provisioning_artifact_details;
    m_provisioning_artifact_details_isSet = true;
}

bool OAIListProvisioningArtifactsOutput::is_provisioning_artifact_details_Set() const{
    return m_provisioning_artifact_details_isSet;
}

bool OAIListProvisioningArtifactsOutput::is_provisioning_artifact_details_Valid() const{
    return m_provisioning_artifact_details_isValid;
}

QString OAIListProvisioningArtifactsOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListProvisioningArtifactsOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListProvisioningArtifactsOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListProvisioningArtifactsOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListProvisioningArtifactsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_artifact_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProvisioningArtifactsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
