/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier() {
    this->initializeModel();
}

OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::~OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier() {}

void OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::initializeModel() {

    m_unique_tag_isSet = false;
    m_unique_tag_isValid = false;
}

void OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::fromJsonObject(QJsonObject json) {

    m_unique_tag_isValid = ::OpenAPI::fromJsonValue(m_unique_tag, json[QString("UniqueTag")]);
    m_unique_tag_isSet = !json[QString("UniqueTag")].isNull() && m_unique_tag_isValid;
}

QString OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_unique_tag.isSet()) {
        obj.insert(QString("UniqueTag"), ::OpenAPI::toJsonValue(m_unique_tag));
    }
    return obj;
}

OAIEngineWorkflowResourceIdentifier_UniqueTag OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::getUniqueTag() const {
    return m_unique_tag;
}
void OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::setUniqueTag(const OAIEngineWorkflowResourceIdentifier_UniqueTag &unique_tag) {
    m_unique_tag = unique_tag;
    m_unique_tag_isSet = true;
}

bool OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::is_unique_tag_Set() const{
    return m_unique_tag_isSet;
}

bool OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::is_unique_tag_Valid() const{
    return m_unique_tag_isValid;
}

bool OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unique_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifyProvisionProductEngineWorkflowResultInput_ResourceIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
