/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRecordOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRecordOutput::OAIDescribeRecordOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRecordOutput::OAIDescribeRecordOutput() {
    this->initializeModel();
}

OAIDescribeRecordOutput::~OAIDescribeRecordOutput() {}

void OAIDescribeRecordOutput::initializeModel() {

    m_record_detail_isSet = false;
    m_record_detail_isValid = false;

    m_record_outputs_isSet = false;
    m_record_outputs_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIDescribeRecordOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRecordOutput::fromJsonObject(QJsonObject json) {

    m_record_detail_isValid = ::OpenAPI::fromJsonValue(m_record_detail, json[QString("RecordDetail")]);
    m_record_detail_isSet = !json[QString("RecordDetail")].isNull() && m_record_detail_isValid;

    m_record_outputs_isValid = ::OpenAPI::fromJsonValue(m_record_outputs, json[QString("RecordOutputs")]);
    m_record_outputs_isSet = !json[QString("RecordOutputs")].isNull() && m_record_outputs_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIDescribeRecordOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRecordOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_record_detail.isSet()) {
        obj.insert(QString("RecordDetail"), ::OpenAPI::toJsonValue(m_record_detail));
    }
    if (m_record_outputs.isSet()) {
        obj.insert(QString("RecordOutputs"), ::OpenAPI::toJsonValue(m_record_outputs));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

OAIDescribeRecordOutput_RecordDetail OAIDescribeRecordOutput::getRecordDetail() const {
    return m_record_detail;
}
void OAIDescribeRecordOutput::setRecordDetail(const OAIDescribeRecordOutput_RecordDetail &record_detail) {
    m_record_detail = record_detail;
    m_record_detail_isSet = true;
}

bool OAIDescribeRecordOutput::is_record_detail_Set() const{
    return m_record_detail_isSet;
}

bool OAIDescribeRecordOutput::is_record_detail_Valid() const{
    return m_record_detail_isValid;
}

QList OAIDescribeRecordOutput::getRecordOutputs() const {
    return m_record_outputs;
}
void OAIDescribeRecordOutput::setRecordOutputs(const QList &record_outputs) {
    m_record_outputs = record_outputs;
    m_record_outputs_isSet = true;
}

bool OAIDescribeRecordOutput::is_record_outputs_Set() const{
    return m_record_outputs_isSet;
}

bool OAIDescribeRecordOutput::is_record_outputs_Valid() const{
    return m_record_outputs_isValid;
}

QString OAIDescribeRecordOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIDescribeRecordOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIDescribeRecordOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIDescribeRecordOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIDescribeRecordOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRecordOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
