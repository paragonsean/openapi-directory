/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceConnection_ConnectionParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceConnection_ConnectionParameters::OAISourceConnection_ConnectionParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceConnection_ConnectionParameters::OAISourceConnection_ConnectionParameters() {
    this->initializeModel();
}

OAISourceConnection_ConnectionParameters::~OAISourceConnection_ConnectionParameters() {}

void OAISourceConnection_ConnectionParameters::initializeModel() {

    m_code_star_isSet = false;
    m_code_star_isValid = false;
}

void OAISourceConnection_ConnectionParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceConnection_ConnectionParameters::fromJsonObject(QJsonObject json) {

    m_code_star_isValid = ::OpenAPI::fromJsonValue(m_code_star, json[QString("CodeStar")]);
    m_code_star_isSet = !json[QString("CodeStar")].isNull() && m_code_star_isValid;
}

QString OAISourceConnection_ConnectionParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceConnection_ConnectionParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_code_star.isSet()) {
        obj.insert(QString("CodeStar"), ::OpenAPI::toJsonValue(m_code_star));
    }
    return obj;
}

OAISourceConnectionParameters_CodeStar OAISourceConnection_ConnectionParameters::getCodeStar() const {
    return m_code_star;
}
void OAISourceConnection_ConnectionParameters::setCodeStar(const OAISourceConnectionParameters_CodeStar &code_star) {
    m_code_star = code_star;
    m_code_star_isSet = true;
}

bool OAISourceConnection_ConnectionParameters::is_code_star_Set() const{
    return m_code_star_isSet;
}

bool OAISourceConnection_ConnectionParameters::is_code_star_Valid() const{
    return m_code_star_isValid;
}

bool OAISourceConnection_ConnectionParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_star.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceConnection_ConnectionParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
