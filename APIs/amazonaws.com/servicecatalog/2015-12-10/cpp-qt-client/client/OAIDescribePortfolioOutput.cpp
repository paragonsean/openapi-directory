/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePortfolioOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePortfolioOutput::OAIDescribePortfolioOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePortfolioOutput::OAIDescribePortfolioOutput() {
    this->initializeModel();
}

OAIDescribePortfolioOutput::~OAIDescribePortfolioOutput() {}

void OAIDescribePortfolioOutput::initializeModel() {

    m_portfolio_detail_isSet = false;
    m_portfolio_detail_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tag_options_isSet = false;
    m_tag_options_isValid = false;

    m_budgets_isSet = false;
    m_budgets_isValid = false;
}

void OAIDescribePortfolioOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePortfolioOutput::fromJsonObject(QJsonObject json) {

    m_portfolio_detail_isValid = ::OpenAPI::fromJsonValue(m_portfolio_detail, json[QString("PortfolioDetail")]);
    m_portfolio_detail_isSet = !json[QString("PortfolioDetail")].isNull() && m_portfolio_detail_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_tag_options_isValid = ::OpenAPI::fromJsonValue(m_tag_options, json[QString("TagOptions")]);
    m_tag_options_isSet = !json[QString("TagOptions")].isNull() && m_tag_options_isValid;

    m_budgets_isValid = ::OpenAPI::fromJsonValue(m_budgets, json[QString("Budgets")]);
    m_budgets_isSet = !json[QString("Budgets")].isNull() && m_budgets_isValid;
}

QString OAIDescribePortfolioOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePortfolioOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_portfolio_detail.isSet()) {
        obj.insert(QString("PortfolioDetail"), ::OpenAPI::toJsonValue(m_portfolio_detail));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tag_options.isSet()) {
        obj.insert(QString("TagOptions"), ::OpenAPI::toJsonValue(m_tag_options));
    }
    if (m_budgets.isSet()) {
        obj.insert(QString("Budgets"), ::OpenAPI::toJsonValue(m_budgets));
    }
    return obj;
}

OAICreatePortfolioOutput_PortfolioDetail OAIDescribePortfolioOutput::getPortfolioDetail() const {
    return m_portfolio_detail;
}
void OAIDescribePortfolioOutput::setPortfolioDetail(const OAICreatePortfolioOutput_PortfolioDetail &portfolio_detail) {
    m_portfolio_detail = portfolio_detail;
    m_portfolio_detail_isSet = true;
}

bool OAIDescribePortfolioOutput::is_portfolio_detail_Set() const{
    return m_portfolio_detail_isSet;
}

bool OAIDescribePortfolioOutput::is_portfolio_detail_Valid() const{
    return m_portfolio_detail_isValid;
}

QList OAIDescribePortfolioOutput::getTags() const {
    return m_tags;
}
void OAIDescribePortfolioOutput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribePortfolioOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribePortfolioOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIDescribePortfolioOutput::getTagOptions() const {
    return m_tag_options;
}
void OAIDescribePortfolioOutput::setTagOptions(const QList &tag_options) {
    m_tag_options = tag_options;
    m_tag_options_isSet = true;
}

bool OAIDescribePortfolioOutput::is_tag_options_Set() const{
    return m_tag_options_isSet;
}

bool OAIDescribePortfolioOutput::is_tag_options_Valid() const{
    return m_tag_options_isValid;
}

QList OAIDescribePortfolioOutput::getBudgets() const {
    return m_budgets;
}
void OAIDescribePortfolioOutput::setBudgets(const QList &budgets) {
    m_budgets = budgets;
    m_budgets_isSet = true;
}

bool OAIDescribePortfolioOutput::is_budgets_Set() const{
    return m_budgets_isSet;
}

bool OAIDescribePortfolioOutput::is_budgets_Valid() const{
    return m_budgets_isValid;
}

bool OAIDescribePortfolioOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_portfolio_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_budgets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePortfolioOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
