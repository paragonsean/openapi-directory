/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProvisioningParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProvisioningParameter::OAIUpdateProvisioningParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProvisioningParameter::OAIUpdateProvisioningParameter() {
    this->initializeModel();
}

OAIUpdateProvisioningParameter::~OAIUpdateProvisioningParameter() {}

void OAIUpdateProvisioningParameter::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_use_previous_value_isSet = false;
    m_use_previous_value_isValid = false;
}

void OAIUpdateProvisioningParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProvisioningParameter::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_use_previous_value_isValid = ::OpenAPI::fromJsonValue(m_use_previous_value, json[QString("UsePreviousValue")]);
    m_use_previous_value_isSet = !json[QString("UsePreviousValue")].isNull() && m_use_previous_value_isValid;
}

QString OAIUpdateProvisioningParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProvisioningParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_use_previous_value_isSet) {
        obj.insert(QString("UsePreviousValue"), ::OpenAPI::toJsonValue(m_use_previous_value));
    }
    return obj;
}

QString OAIUpdateProvisioningParameter::getKey() const {
    return m_key;
}
void OAIUpdateProvisioningParameter::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIUpdateProvisioningParameter::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUpdateProvisioningParameter::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIUpdateProvisioningParameter::getValue() const {
    return m_value;
}
void OAIUpdateProvisioningParameter::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIUpdateProvisioningParameter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIUpdateProvisioningParameter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIUpdateProvisioningParameter::getUsePreviousValue() const {
    return m_use_previous_value;
}
void OAIUpdateProvisioningParameter::setUsePreviousValue(const bool &use_previous_value) {
    m_use_previous_value = use_previous_value;
    m_use_previous_value_isSet = true;
}

bool OAIUpdateProvisioningParameter::is_use_previous_value_Set() const{
    return m_use_previous_value_isSet;
}

bool OAIUpdateProvisioningParameter::is_use_previous_value_Valid() const{
    return m_use_previous_value_isValid;
}

bool OAIUpdateProvisioningParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_previous_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProvisioningParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
