/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConstraintOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConstraintOutput::OAICreateConstraintOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConstraintOutput::OAICreateConstraintOutput() {
    this->initializeModel();
}

OAICreateConstraintOutput::~OAICreateConstraintOutput() {}

void OAICreateConstraintOutput::initializeModel() {

    m_constraint_detail_isSet = false;
    m_constraint_detail_isValid = false;

    m_constraint_parameters_isSet = false;
    m_constraint_parameters_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICreateConstraintOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConstraintOutput::fromJsonObject(QJsonObject json) {

    m_constraint_detail_isValid = ::OpenAPI::fromJsonValue(m_constraint_detail, json[QString("ConstraintDetail")]);
    m_constraint_detail_isSet = !json[QString("ConstraintDetail")].isNull() && m_constraint_detail_isValid;

    m_constraint_parameters_isValid = ::OpenAPI::fromJsonValue(m_constraint_parameters, json[QString("ConstraintParameters")]);
    m_constraint_parameters_isSet = !json[QString("ConstraintParameters")].isNull() && m_constraint_parameters_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAICreateConstraintOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConstraintOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_constraint_detail.isSet()) {
        obj.insert(QString("ConstraintDetail"), ::OpenAPI::toJsonValue(m_constraint_detail));
    }
    if (m_constraint_parameters_isSet) {
        obj.insert(QString("ConstraintParameters"), ::OpenAPI::toJsonValue(m_constraint_parameters));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICreateConstraintOutput_ConstraintDetail OAICreateConstraintOutput::getConstraintDetail() const {
    return m_constraint_detail;
}
void OAICreateConstraintOutput::setConstraintDetail(const OAICreateConstraintOutput_ConstraintDetail &constraint_detail) {
    m_constraint_detail = constraint_detail;
    m_constraint_detail_isSet = true;
}

bool OAICreateConstraintOutput::is_constraint_detail_Set() const{
    return m_constraint_detail_isSet;
}

bool OAICreateConstraintOutput::is_constraint_detail_Valid() const{
    return m_constraint_detail_isValid;
}

QString OAICreateConstraintOutput::getConstraintParameters() const {
    return m_constraint_parameters;
}
void OAICreateConstraintOutput::setConstraintParameters(const QString &constraint_parameters) {
    m_constraint_parameters = constraint_parameters;
    m_constraint_parameters_isSet = true;
}

bool OAICreateConstraintOutput::is_constraint_parameters_Set() const{
    return m_constraint_parameters_isSet;
}

bool OAICreateConstraintOutput::is_constraint_parameters_Valid() const{
    return m_constraint_parameters_isValid;
}

OAIStatus OAICreateConstraintOutput::getStatus() const {
    return m_status;
}
void OAICreateConstraintOutput::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateConstraintOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateConstraintOutput::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateConstraintOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraint_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConstraintOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
