/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConstraintInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConstraintInput::OAICreateConstraintInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConstraintInput::OAICreateConstraintInput() {
    this->initializeModel();
}

OAICreateConstraintInput::~OAICreateConstraintInput() {}

void OAICreateConstraintInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAICreateConstraintInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConstraintInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAICreateConstraintInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConstraintInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAICreateConstraintInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAICreateConstraintInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAICreateConstraintInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAICreateConstraintInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAICreateConstraintInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAICreateConstraintInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAICreateConstraintInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAICreateConstraintInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

QString OAICreateConstraintInput::getProductId() const {
    return m_product_id;
}
void OAICreateConstraintInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAICreateConstraintInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAICreateConstraintInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAICreateConstraintInput::getParameters() const {
    return m_parameters;
}
void OAICreateConstraintInput::setParameters(const QString &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateConstraintInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateConstraintInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAICreateConstraintInput::getType() const {
    return m_type;
}
void OAICreateConstraintInput::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateConstraintInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateConstraintInput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateConstraintInput::getDescription() const {
    return m_description;
}
void OAICreateConstraintInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateConstraintInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateConstraintInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateConstraintInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateConstraintInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateConstraintInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateConstraintInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAICreateConstraintInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConstraintInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portfolio_id_isValid && m_product_id_isValid && m_parameters_isValid && m_type_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
