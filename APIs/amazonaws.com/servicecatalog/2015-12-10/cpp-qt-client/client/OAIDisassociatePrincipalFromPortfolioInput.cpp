/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisassociatePrincipalFromPortfolioInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisassociatePrincipalFromPortfolioInput::OAIDisassociatePrincipalFromPortfolioInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisassociatePrincipalFromPortfolioInput::OAIDisassociatePrincipalFromPortfolioInput() {
    this->initializeModel();
}

OAIDisassociatePrincipalFromPortfolioInput::~OAIDisassociatePrincipalFromPortfolioInput() {}

void OAIDisassociatePrincipalFromPortfolioInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_principal_arn_isSet = false;
    m_principal_arn_isValid = false;

    m_principal_type_isSet = false;
    m_principal_type_isValid = false;
}

void OAIDisassociatePrincipalFromPortfolioInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisassociatePrincipalFromPortfolioInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_principal_arn_isValid = ::OpenAPI::fromJsonValue(m_principal_arn, json[QString("PrincipalARN")]);
    m_principal_arn_isSet = !json[QString("PrincipalARN")].isNull() && m_principal_arn_isValid;

    m_principal_type_isValid = ::OpenAPI::fromJsonValue(m_principal_type, json[QString("PrincipalType")]);
    m_principal_type_isSet = !json[QString("PrincipalType")].isNull() && m_principal_type_isValid;
}

QString OAIDisassociatePrincipalFromPortfolioInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisassociatePrincipalFromPortfolioInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_principal_arn_isSet) {
        obj.insert(QString("PrincipalARN"), ::OpenAPI::toJsonValue(m_principal_arn));
    }
    if (m_principal_type.isSet()) {
        obj.insert(QString("PrincipalType"), ::OpenAPI::toJsonValue(m_principal_type));
    }
    return obj;
}

QString OAIDisassociatePrincipalFromPortfolioInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDisassociatePrincipalFromPortfolioInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDisassociatePrincipalFromPortfolioInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDisassociatePrincipalFromPortfolioInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIDisassociatePrincipalFromPortfolioInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAIDisassociatePrincipalFromPortfolioInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAIDisassociatePrincipalFromPortfolioInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAIDisassociatePrincipalFromPortfolioInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

QString OAIDisassociatePrincipalFromPortfolioInput::getPrincipalArn() const {
    return m_principal_arn;
}
void OAIDisassociatePrincipalFromPortfolioInput::setPrincipalArn(const QString &principal_arn) {
    m_principal_arn = principal_arn;
    m_principal_arn_isSet = true;
}

bool OAIDisassociatePrincipalFromPortfolioInput::is_principal_arn_Set() const{
    return m_principal_arn_isSet;
}

bool OAIDisassociatePrincipalFromPortfolioInput::is_principal_arn_Valid() const{
    return m_principal_arn_isValid;
}

OAIPrincipalType OAIDisassociatePrincipalFromPortfolioInput::getPrincipalType() const {
    return m_principal_type;
}
void OAIDisassociatePrincipalFromPortfolioInput::setPrincipalType(const OAIPrincipalType &principal_type) {
    m_principal_type = principal_type;
    m_principal_type_isSet = true;
}

bool OAIDisassociatePrincipalFromPortfolioInput::is_principal_type_Set() const{
    return m_principal_type_isSet;
}

bool OAIDisassociatePrincipalFromPortfolioInput::is_principal_type_Valid() const{
    return m_principal_type_isValid;
}

bool OAIDisassociatePrincipalFromPortfolioInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisassociatePrincipalFromPortfolioInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portfolio_id_isValid && m_principal_arn_isValid && true;
}

} // namespace OpenAPI
