/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeletePortfolioShareInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeletePortfolioShareInput::OAIDeletePortfolioShareInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeletePortfolioShareInput::OAIDeletePortfolioShareInput() {
    this->initializeModel();
}

OAIDeletePortfolioShareInput::~OAIDeletePortfolioShareInput() {}

void OAIDeletePortfolioShareInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_organization_node_isSet = false;
    m_organization_node_isValid = false;
}

void OAIDeletePortfolioShareInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeletePortfolioShareInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_organization_node_isValid = ::OpenAPI::fromJsonValue(m_organization_node, json[QString("OrganizationNode")]);
    m_organization_node_isSet = !json[QString("OrganizationNode")].isNull() && m_organization_node_isValid;
}

QString OAIDeletePortfolioShareInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeletePortfolioShareInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_organization_node.isSet()) {
        obj.insert(QString("OrganizationNode"), ::OpenAPI::toJsonValue(m_organization_node));
    }
    return obj;
}

QString OAIDeletePortfolioShareInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDeletePortfolioShareInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDeletePortfolioShareInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDeletePortfolioShareInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIDeletePortfolioShareInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAIDeletePortfolioShareInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAIDeletePortfolioShareInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAIDeletePortfolioShareInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

QString OAIDeletePortfolioShareInput::getAccountId() const {
    return m_account_id;
}
void OAIDeletePortfolioShareInput::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDeletePortfolioShareInput::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDeletePortfolioShareInput::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIDeletePortfolioShareInput_OrganizationNode OAIDeletePortfolioShareInput::getOrganizationNode() const {
    return m_organization_node;
}
void OAIDeletePortfolioShareInput::setOrganizationNode(const OAIDeletePortfolioShareInput_OrganizationNode &organization_node) {
    m_organization_node = organization_node;
    m_organization_node_isSet = true;
}

bool OAIDeletePortfolioShareInput::is_organization_node_Set() const{
    return m_organization_node_isSet;
}

bool OAIDeletePortfolioShareInput::is_organization_node_Valid() const{
    return m_organization_node_isValid;
}

bool OAIDeletePortfolioShareInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_node.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeletePortfolioShareInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portfolio_id_isValid && true;
}

} // namespace OpenAPI
