/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProvisionedProductPropertiesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProvisionedProductPropertiesInput::OAIUpdateProvisionedProductPropertiesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProvisionedProductPropertiesInput::OAIUpdateProvisionedProductPropertiesInput() {
    this->initializeModel();
}

OAIUpdateProvisionedProductPropertiesInput::~OAIUpdateProvisionedProductPropertiesInput() {}

void OAIUpdateProvisionedProductPropertiesInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_provisioned_product_id_isSet = false;
    m_provisioned_product_id_isValid = false;

    m_provisioned_product_properties_isSet = false;
    m_provisioned_product_properties_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAIUpdateProvisionedProductPropertiesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProvisionedProductPropertiesInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_provisioned_product_id_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_id, json[QString("ProvisionedProductId")]);
    m_provisioned_product_id_isSet = !json[QString("ProvisionedProductId")].isNull() && m_provisioned_product_id_isValid;

    m_provisioned_product_properties_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_properties, json[QString("ProvisionedProductProperties")]);
    m_provisioned_product_properties_isSet = !json[QString("ProvisionedProductProperties")].isNull() && m_provisioned_product_properties_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAIUpdateProvisionedProductPropertiesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProvisionedProductPropertiesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_provisioned_product_id_isSet) {
        obj.insert(QString("ProvisionedProductId"), ::OpenAPI::toJsonValue(m_provisioned_product_id));
    }
    if (m_provisioned_product_properties.isSet()) {
        obj.insert(QString("ProvisionedProductProperties"), ::OpenAPI::toJsonValue(m_provisioned_product_properties));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAIUpdateProvisionedProductPropertiesInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIUpdateProvisionedProductPropertiesInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIUpdateProvisionedProductPropertiesInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIUpdateProvisionedProductPropertiesInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIUpdateProvisionedProductPropertiesInput::getProvisionedProductId() const {
    return m_provisioned_product_id;
}
void OAIUpdateProvisionedProductPropertiesInput::setProvisionedProductId(const QString &provisioned_product_id) {
    m_provisioned_product_id = provisioned_product_id;
    m_provisioned_product_id_isSet = true;
}

bool OAIUpdateProvisionedProductPropertiesInput::is_provisioned_product_id_Set() const{
    return m_provisioned_product_id_isSet;
}

bool OAIUpdateProvisionedProductPropertiesInput::is_provisioned_product_id_Valid() const{
    return m_provisioned_product_id_isValid;
}

QMap OAIUpdateProvisionedProductPropertiesInput::getProvisionedProductProperties() const {
    return m_provisioned_product_properties;
}
void OAIUpdateProvisionedProductPropertiesInput::setProvisionedProductProperties(const QMap &provisioned_product_properties) {
    m_provisioned_product_properties = provisioned_product_properties;
    m_provisioned_product_properties_isSet = true;
}

bool OAIUpdateProvisionedProductPropertiesInput::is_provisioned_product_properties_Set() const{
    return m_provisioned_product_properties_isSet;
}

bool OAIUpdateProvisionedProductPropertiesInput::is_provisioned_product_properties_Valid() const{
    return m_provisioned_product_properties_isValid;
}

QString OAIUpdateProvisionedProductPropertiesInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIUpdateProvisionedProductPropertiesInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIUpdateProvisionedProductPropertiesInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIUpdateProvisionedProductPropertiesInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAIUpdateProvisionedProductPropertiesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProvisionedProductPropertiesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_provisioned_product_id_isValid && m_provisioned_product_properties_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
