/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceAttribute::OAIResourceAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceAttribute::OAIResourceAttribute() {
    this->initializeModel();
}

OAIResourceAttribute::~OAIResourceAttribute() {}

void OAIResourceAttribute::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIResourceAttribute::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIResourceAttribute::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PROPERTIES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceAttribute::PROPERTIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METADATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceAttribute::METADATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATIONPOLICY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceAttribute::CREATIONPOLICY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATEPOLICY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceAttribute::UPDATEPOLICY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETIONPOLICY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceAttribute::DELETIONPOLICY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAGS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceAttribute::TAGS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIResourceAttribute::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIResourceAttribute::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIResourceAttribute::PROPERTIES:
            val = "PROPERTIES";
            break;
        case eOAIResourceAttribute::METADATA:
            val = "METADATA";
            break;
        case eOAIResourceAttribute::CREATIONPOLICY:
            val = "CREATIONPOLICY";
            break;
        case eOAIResourceAttribute::UPDATEPOLICY:
            val = "UPDATEPOLICY";
            break;
        case eOAIResourceAttribute::DELETIONPOLICY:
            val = "DELETIONPOLICY";
            break;
        case eOAIResourceAttribute::TAGS:
            val = "TAGS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIResourceAttribute::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIResourceAttribute::eOAIResourceAttribute OAIResourceAttribute::getValue() const {
    return m_value;
}

void OAIResourceAttribute::setValue(const OAIResourceAttribute::eOAIResourceAttribute& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIResourceAttribute::isSet() const {
    
    return m_value_isSet;
}

bool OAIResourceAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
