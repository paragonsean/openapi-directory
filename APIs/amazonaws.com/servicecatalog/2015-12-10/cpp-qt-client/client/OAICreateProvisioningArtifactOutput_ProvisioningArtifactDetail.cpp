/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail() {
    this->initializeModel();
}

OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::~OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail() {}

void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_guidance_isSet = false;
    m_guidance_isValid = false;

    m_source_revision_isSet = false;
    m_source_revision_isValid = false;
}

void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_guidance_isValid = ::OpenAPI::fromJsonValue(m_guidance, json[QString("Guidance")]);
    m_guidance_isSet = !json[QString("Guidance")].isNull() && m_guidance_isValid;

    m_source_revision_isValid = ::OpenAPI::fromJsonValue(m_source_revision, json[QString("SourceRevision")]);
    m_source_revision_isSet = !json[QString("SourceRevision")].isNull() && m_source_revision_isValid;
}

QString OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_guidance.isSet()) {
        obj.insert(QString("Guidance"), ::OpenAPI::toJsonValue(m_guidance));
    }
    if (m_source_revision_isSet) {
        obj.insert(QString("SourceRevision"), ::OpenAPI::toJsonValue(m_source_revision));
    }
    return obj;
}

QString OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::getId() const {
    return m_id;
}
void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::getName() const {
    return m_name;
}
void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::getDescription() const {
    return m_description;
}
void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_description_Valid() const{
    return m_description_isValid;
}

OAIProvisioningArtifactType OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::getType() const {
    return m_type;
}
void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::setType(const OAIProvisioningArtifactType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::getCreatedTime() const {
    return m_created_time;
}
void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::getActive() const {
    return m_active;
}
void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_active_Set() const{
    return m_active_isSet;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_active_Valid() const{
    return m_active_isValid;
}

OAIProvisioningArtifactGuidance OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::getGuidance() const {
    return m_guidance;
}
void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::setGuidance(const OAIProvisioningArtifactGuidance &guidance) {
    m_guidance = guidance;
    m_guidance_isSet = true;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_guidance_Set() const{
    return m_guidance_isSet;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_guidance_Valid() const{
    return m_guidance_isValid;
}

QString OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::getSourceRevision() const {
    return m_source_revision;
}
void OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::setSourceRevision(const QString &source_revision) {
    m_source_revision = source_revision;
    m_source_revision_isSet = true;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_source_revision_Set() const{
    return m_source_revision_isSet;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::is_source_revision_Valid() const{
    return m_source_revision_isValid;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guidance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
