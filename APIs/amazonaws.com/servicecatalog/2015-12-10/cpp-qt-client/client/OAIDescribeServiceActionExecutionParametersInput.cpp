/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeServiceActionExecutionParametersInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeServiceActionExecutionParametersInput::OAIDescribeServiceActionExecutionParametersInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeServiceActionExecutionParametersInput::OAIDescribeServiceActionExecutionParametersInput() {
    this->initializeModel();
}

OAIDescribeServiceActionExecutionParametersInput::~OAIDescribeServiceActionExecutionParametersInput() {}

void OAIDescribeServiceActionExecutionParametersInput::initializeModel() {

    m_provisioned_product_id_isSet = false;
    m_provisioned_product_id_isValid = false;

    m_service_action_id_isSet = false;
    m_service_action_id_isValid = false;

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;
}

void OAIDescribeServiceActionExecutionParametersInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeServiceActionExecutionParametersInput::fromJsonObject(QJsonObject json) {

    m_provisioned_product_id_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_id, json[QString("ProvisionedProductId")]);
    m_provisioned_product_id_isSet = !json[QString("ProvisionedProductId")].isNull() && m_provisioned_product_id_isValid;

    m_service_action_id_isValid = ::OpenAPI::fromJsonValue(m_service_action_id, json[QString("ServiceActionId")]);
    m_service_action_id_isSet = !json[QString("ServiceActionId")].isNull() && m_service_action_id_isValid;

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;
}

QString OAIDescribeServiceActionExecutionParametersInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeServiceActionExecutionParametersInput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioned_product_id_isSet) {
        obj.insert(QString("ProvisionedProductId"), ::OpenAPI::toJsonValue(m_provisioned_product_id));
    }
    if (m_service_action_id_isSet) {
        obj.insert(QString("ServiceActionId"), ::OpenAPI::toJsonValue(m_service_action_id));
    }
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    return obj;
}

QString OAIDescribeServiceActionExecutionParametersInput::getProvisionedProductId() const {
    return m_provisioned_product_id;
}
void OAIDescribeServiceActionExecutionParametersInput::setProvisionedProductId(const QString &provisioned_product_id) {
    m_provisioned_product_id = provisioned_product_id;
    m_provisioned_product_id_isSet = true;
}

bool OAIDescribeServiceActionExecutionParametersInput::is_provisioned_product_id_Set() const{
    return m_provisioned_product_id_isSet;
}

bool OAIDescribeServiceActionExecutionParametersInput::is_provisioned_product_id_Valid() const{
    return m_provisioned_product_id_isValid;
}

QString OAIDescribeServiceActionExecutionParametersInput::getServiceActionId() const {
    return m_service_action_id;
}
void OAIDescribeServiceActionExecutionParametersInput::setServiceActionId(const QString &service_action_id) {
    m_service_action_id = service_action_id;
    m_service_action_id_isSet = true;
}

bool OAIDescribeServiceActionExecutionParametersInput::is_service_action_id_Set() const{
    return m_service_action_id_isSet;
}

bool OAIDescribeServiceActionExecutionParametersInput::is_service_action_id_Valid() const{
    return m_service_action_id_isValid;
}

QString OAIDescribeServiceActionExecutionParametersInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDescribeServiceActionExecutionParametersInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDescribeServiceActionExecutionParametersInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDescribeServiceActionExecutionParametersInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

bool OAIDescribeServiceActionExecutionParametersInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioned_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeServiceActionExecutionParametersInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_provisioned_product_id_isValid && m_service_action_id_isValid && true;
}

} // namespace OpenAPI
