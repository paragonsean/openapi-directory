/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProductOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProductOutput::OAIUpdateProductOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProductOutput::OAIUpdateProductOutput() {
    this->initializeModel();
}

OAIUpdateProductOutput::~OAIUpdateProductOutput() {}

void OAIUpdateProductOutput::initializeModel() {

    m_product_view_detail_isSet = false;
    m_product_view_detail_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateProductOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProductOutput::fromJsonObject(QJsonObject json) {

    m_product_view_detail_isValid = ::OpenAPI::fromJsonValue(m_product_view_detail, json[QString("ProductViewDetail")]);
    m_product_view_detail_isSet = !json[QString("ProductViewDetail")].isNull() && m_product_view_detail_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateProductOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProductOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_product_view_detail.isSet()) {
        obj.insert(QString("ProductViewDetail"), ::OpenAPI::toJsonValue(m_product_view_detail));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateProductOutput_ProductViewDetail OAIUpdateProductOutput::getProductViewDetail() const {
    return m_product_view_detail;
}
void OAIUpdateProductOutput::setProductViewDetail(const OAICreateProductOutput_ProductViewDetail &product_view_detail) {
    m_product_view_detail = product_view_detail;
    m_product_view_detail_isSet = true;
}

bool OAIUpdateProductOutput::is_product_view_detail_Set() const{
    return m_product_view_detail_isSet;
}

bool OAIUpdateProductOutput::is_product_view_detail_Valid() const{
    return m_product_view_detail_isValid;
}

QList OAIUpdateProductOutput::getTags() const {
    return m_tags;
}
void OAIUpdateProductOutput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateProductOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateProductOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateProductOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_view_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProductOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
