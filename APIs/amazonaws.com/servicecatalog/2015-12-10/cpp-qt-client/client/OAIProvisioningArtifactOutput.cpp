/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningArtifactOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningArtifactOutput::OAIProvisioningArtifactOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningArtifactOutput::OAIProvisioningArtifactOutput() {
    this->initializeModel();
}

OAIProvisioningArtifactOutput::~OAIProvisioningArtifactOutput() {}

void OAIProvisioningArtifactOutput::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIProvisioningArtifactOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningArtifactOutput::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIProvisioningArtifactOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningArtifactOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIProvisioningArtifactOutput::getKey() const {
    return m_key;
}
void OAIProvisioningArtifactOutput::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIProvisioningArtifactOutput::is_key_Set() const{
    return m_key_isSet;
}

bool OAIProvisioningArtifactOutput::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIProvisioningArtifactOutput::getDescription() const {
    return m_description;
}
void OAIProvisioningArtifactOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProvisioningArtifactOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProvisioningArtifactOutput::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIProvisioningArtifactOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningArtifactOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
