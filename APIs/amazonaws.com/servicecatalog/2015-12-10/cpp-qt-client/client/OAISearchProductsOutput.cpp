/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchProductsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchProductsOutput::OAISearchProductsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchProductsOutput::OAISearchProductsOutput() {
    this->initializeModel();
}

OAISearchProductsOutput::~OAISearchProductsOutput() {}

void OAISearchProductsOutput::initializeModel() {

    m_product_view_summaries_isSet = false;
    m_product_view_summaries_isValid = false;

    m_product_view_aggregations_isSet = false;
    m_product_view_aggregations_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAISearchProductsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchProductsOutput::fromJsonObject(QJsonObject json) {

    m_product_view_summaries_isValid = ::OpenAPI::fromJsonValue(m_product_view_summaries, json[QString("ProductViewSummaries")]);
    m_product_view_summaries_isSet = !json[QString("ProductViewSummaries")].isNull() && m_product_view_summaries_isValid;

    m_product_view_aggregations_isValid = ::OpenAPI::fromJsonValue(m_product_view_aggregations, json[QString("ProductViewAggregations")]);
    m_product_view_aggregations_isSet = !json[QString("ProductViewAggregations")].isNull() && m_product_view_aggregations_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAISearchProductsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchProductsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_product_view_summaries.isSet()) {
        obj.insert(QString("ProductViewSummaries"), ::OpenAPI::toJsonValue(m_product_view_summaries));
    }
    if (m_product_view_aggregations.isSet()) {
        obj.insert(QString("ProductViewAggregations"), ::OpenAPI::toJsonValue(m_product_view_aggregations));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAISearchProductsOutput::getProductViewSummaries() const {
    return m_product_view_summaries;
}
void OAISearchProductsOutput::setProductViewSummaries(const QList &product_view_summaries) {
    m_product_view_summaries = product_view_summaries;
    m_product_view_summaries_isSet = true;
}

bool OAISearchProductsOutput::is_product_view_summaries_Set() const{
    return m_product_view_summaries_isSet;
}

bool OAISearchProductsOutput::is_product_view_summaries_Valid() const{
    return m_product_view_summaries_isValid;
}

QMap OAISearchProductsOutput::getProductViewAggregations() const {
    return m_product_view_aggregations;
}
void OAISearchProductsOutput::setProductViewAggregations(const QMap &product_view_aggregations) {
    m_product_view_aggregations = product_view_aggregations;
    m_product_view_aggregations_isSet = true;
}

bool OAISearchProductsOutput::is_product_view_aggregations_Set() const{
    return m_product_view_aggregations_isSet;
}

bool OAISearchProductsOutput::is_product_view_aggregations_Valid() const{
    return m_product_view_aggregations_isValid;
}

QString OAISearchProductsOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAISearchProductsOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAISearchProductsOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAISearchProductsOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAISearchProductsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_view_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_view_aggregations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchProductsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
