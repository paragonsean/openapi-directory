/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductViewDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductViewDetail::OAIProductViewDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductViewDetail::OAIProductViewDetail() {
    this->initializeModel();
}

OAIProductViewDetail::~OAIProductViewDetail() {}

void OAIProductViewDetail::initializeModel() {

    m_product_view_summary_isSet = false;
    m_product_view_summary_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_product_arn_isSet = false;
    m_product_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_source_connection_isSet = false;
    m_source_connection_isValid = false;
}

void OAIProductViewDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductViewDetail::fromJsonObject(QJsonObject json) {

    m_product_view_summary_isValid = ::OpenAPI::fromJsonValue(m_product_view_summary, json[QString("ProductViewSummary")]);
    m_product_view_summary_isSet = !json[QString("ProductViewSummary")].isNull() && m_product_view_summary_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_product_arn_isValid = ::OpenAPI::fromJsonValue(m_product_arn, json[QString("ProductARN")]);
    m_product_arn_isSet = !json[QString("ProductARN")].isNull() && m_product_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_source_connection_isValid = ::OpenAPI::fromJsonValue(m_source_connection, json[QString("SourceConnection")]);
    m_source_connection_isSet = !json[QString("SourceConnection")].isNull() && m_source_connection_isValid;
}

QString OAIProductViewDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductViewDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_product_view_summary.isSet()) {
        obj.insert(QString("ProductViewSummary"), ::OpenAPI::toJsonValue(m_product_view_summary));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_product_arn_isSet) {
        obj.insert(QString("ProductARN"), ::OpenAPI::toJsonValue(m_product_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_source_connection.isSet()) {
        obj.insert(QString("SourceConnection"), ::OpenAPI::toJsonValue(m_source_connection));
    }
    return obj;
}

OAIDescribeProductOutput_ProductViewSummary OAIProductViewDetail::getProductViewSummary() const {
    return m_product_view_summary;
}
void OAIProductViewDetail::setProductViewSummary(const OAIDescribeProductOutput_ProductViewSummary &product_view_summary) {
    m_product_view_summary = product_view_summary;
    m_product_view_summary_isSet = true;
}

bool OAIProductViewDetail::is_product_view_summary_Set() const{
    return m_product_view_summary_isSet;
}

bool OAIProductViewDetail::is_product_view_summary_Valid() const{
    return m_product_view_summary_isValid;
}

OAIStatus OAIProductViewDetail::getStatus() const {
    return m_status;
}
void OAIProductViewDetail::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProductViewDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProductViewDetail::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProductViewDetail::getProductArn() const {
    return m_product_arn;
}
void OAIProductViewDetail::setProductArn(const QString &product_arn) {
    m_product_arn = product_arn;
    m_product_arn_isSet = true;
}

bool OAIProductViewDetail::is_product_arn_Set() const{
    return m_product_arn_isSet;
}

bool OAIProductViewDetail::is_product_arn_Valid() const{
    return m_product_arn_isValid;
}

QDateTime OAIProductViewDetail::getCreatedTime() const {
    return m_created_time;
}
void OAIProductViewDetail::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIProductViewDetail::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIProductViewDetail::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIProductViewDetail_SourceConnection OAIProductViewDetail::getSourceConnection() const {
    return m_source_connection;
}
void OAIProductViewDetail::setSourceConnection(const OAIProductViewDetail_SourceConnection &source_connection) {
    m_source_connection = source_connection;
    m_source_connection_isSet = true;
}

bool OAIProductViewDetail::is_source_connection_Set() const{
    return m_source_connection_isSet;
}

bool OAIProductViewDetail::is_source_connection_Valid() const{
    return m_source_connection_isValid;
}

bool OAIProductViewDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_view_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductViewDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
