/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeConstraintOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeConstraintOutput::OAIDescribeConstraintOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeConstraintOutput::OAIDescribeConstraintOutput() {
    this->initializeModel();
}

OAIDescribeConstraintOutput::~OAIDescribeConstraintOutput() {}

void OAIDescribeConstraintOutput::initializeModel() {

    m_constraint_detail_isSet = false;
    m_constraint_detail_isValid = false;

    m_constraint_parameters_isSet = false;
    m_constraint_parameters_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeConstraintOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeConstraintOutput::fromJsonObject(QJsonObject json) {

    m_constraint_detail_isValid = ::OpenAPI::fromJsonValue(m_constraint_detail, json[QString("ConstraintDetail")]);
    m_constraint_detail_isSet = !json[QString("ConstraintDetail")].isNull() && m_constraint_detail_isValid;

    m_constraint_parameters_isValid = ::OpenAPI::fromJsonValue(m_constraint_parameters, json[QString("ConstraintParameters")]);
    m_constraint_parameters_isSet = !json[QString("ConstraintParameters")].isNull() && m_constraint_parameters_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeConstraintOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeConstraintOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_constraint_detail.isSet()) {
        obj.insert(QString("ConstraintDetail"), ::OpenAPI::toJsonValue(m_constraint_detail));
    }
    if (m_constraint_parameters_isSet) {
        obj.insert(QString("ConstraintParameters"), ::OpenAPI::toJsonValue(m_constraint_parameters));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICreateConstraintOutput_ConstraintDetail OAIDescribeConstraintOutput::getConstraintDetail() const {
    return m_constraint_detail;
}
void OAIDescribeConstraintOutput::setConstraintDetail(const OAICreateConstraintOutput_ConstraintDetail &constraint_detail) {
    m_constraint_detail = constraint_detail;
    m_constraint_detail_isSet = true;
}

bool OAIDescribeConstraintOutput::is_constraint_detail_Set() const{
    return m_constraint_detail_isSet;
}

bool OAIDescribeConstraintOutput::is_constraint_detail_Valid() const{
    return m_constraint_detail_isValid;
}

QString OAIDescribeConstraintOutput::getConstraintParameters() const {
    return m_constraint_parameters;
}
void OAIDescribeConstraintOutput::setConstraintParameters(const QString &constraint_parameters) {
    m_constraint_parameters = constraint_parameters;
    m_constraint_parameters_isSet = true;
}

bool OAIDescribeConstraintOutput::is_constraint_parameters_Set() const{
    return m_constraint_parameters_isSet;
}

bool OAIDescribeConstraintOutput::is_constraint_parameters_Valid() const{
    return m_constraint_parameters_isValid;
}

OAIStatus OAIDescribeConstraintOutput::getStatus() const {
    return m_status;
}
void OAIDescribeConstraintOutput::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeConstraintOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeConstraintOutput::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeConstraintOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraint_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeConstraintOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
