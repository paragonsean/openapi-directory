/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceChangeDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceChangeDetail::OAIResourceChangeDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceChangeDetail::OAIResourceChangeDetail() {
    this->initializeModel();
}

OAIResourceChangeDetail::~OAIResourceChangeDetail() {}

void OAIResourceChangeDetail::initializeModel() {

    m_target_isSet = false;
    m_target_isValid = false;

    m_evaluation_isSet = false;
    m_evaluation_isValid = false;

    m_causing_entity_isSet = false;
    m_causing_entity_isValid = false;
}

void OAIResourceChangeDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceChangeDetail::fromJsonObject(QJsonObject json) {

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_evaluation_isValid = ::OpenAPI::fromJsonValue(m_evaluation, json[QString("Evaluation")]);
    m_evaluation_isSet = !json[QString("Evaluation")].isNull() && m_evaluation_isValid;

    m_causing_entity_isValid = ::OpenAPI::fromJsonValue(m_causing_entity, json[QString("CausingEntity")]);
    m_causing_entity_isSet = !json[QString("CausingEntity")].isNull() && m_causing_entity_isValid;
}

QString OAIResourceChangeDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceChangeDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_target.isSet()) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_evaluation.isSet()) {
        obj.insert(QString("Evaluation"), ::OpenAPI::toJsonValue(m_evaluation));
    }
    if (m_causing_entity_isSet) {
        obj.insert(QString("CausingEntity"), ::OpenAPI::toJsonValue(m_causing_entity));
    }
    return obj;
}

OAIResourceChangeDetail_Target OAIResourceChangeDetail::getTarget() const {
    return m_target;
}
void OAIResourceChangeDetail::setTarget(const OAIResourceChangeDetail_Target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIResourceChangeDetail::is_target_Set() const{
    return m_target_isSet;
}

bool OAIResourceChangeDetail::is_target_Valid() const{
    return m_target_isValid;
}

OAIEvaluationType OAIResourceChangeDetail::getEvaluation() const {
    return m_evaluation;
}
void OAIResourceChangeDetail::setEvaluation(const OAIEvaluationType &evaluation) {
    m_evaluation = evaluation;
    m_evaluation_isSet = true;
}

bool OAIResourceChangeDetail::is_evaluation_Set() const{
    return m_evaluation_isSet;
}

bool OAIResourceChangeDetail::is_evaluation_Valid() const{
    return m_evaluation_isValid;
}

QString OAIResourceChangeDetail::getCausingEntity() const {
    return m_causing_entity;
}
void OAIResourceChangeDetail::setCausingEntity(const QString &causing_entity) {
    m_causing_entity = causing_entity;
    m_causing_entity_isSet = true;
}

bool OAIResourceChangeDetail::is_causing_entity_Set() const{
    return m_causing_entity_isSet;
}

bool OAIResourceChangeDetail::is_causing_entity_Valid() const{
    return m_causing_entity_isValid;
}

bool OAIResourceChangeDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_causing_entity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceChangeDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
