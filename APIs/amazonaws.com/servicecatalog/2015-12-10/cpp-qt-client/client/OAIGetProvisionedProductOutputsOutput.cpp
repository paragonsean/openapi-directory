/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetProvisionedProductOutputsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetProvisionedProductOutputsOutput::OAIGetProvisionedProductOutputsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetProvisionedProductOutputsOutput::OAIGetProvisionedProductOutputsOutput() {
    this->initializeModel();
}

OAIGetProvisionedProductOutputsOutput::~OAIGetProvisionedProductOutputsOutput() {}

void OAIGetProvisionedProductOutputsOutput::initializeModel() {

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGetProvisionedProductOutputsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetProvisionedProductOutputsOutput::fromJsonObject(QJsonObject json) {

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGetProvisionedProductOutputsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetProvisionedProductOutputsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_outputs.isSet()) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIGetProvisionedProductOutputsOutput::getOutputs() const {
    return m_outputs;
}
void OAIGetProvisionedProductOutputsOutput::setOutputs(const QList &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIGetProvisionedProductOutputsOutput::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIGetProvisionedProductOutputsOutput::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAIGetProvisionedProductOutputsOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetProvisionedProductOutputsOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetProvisionedProductOutputsOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetProvisionedProductOutputsOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGetProvisionedProductOutputsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetProvisionedProductOutputsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
