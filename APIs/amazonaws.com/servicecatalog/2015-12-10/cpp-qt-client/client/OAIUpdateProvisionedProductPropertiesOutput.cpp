/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProvisionedProductPropertiesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProvisionedProductPropertiesOutput::OAIUpdateProvisionedProductPropertiesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProvisionedProductPropertiesOutput::OAIUpdateProvisionedProductPropertiesOutput() {
    this->initializeModel();
}

OAIUpdateProvisionedProductPropertiesOutput::~OAIUpdateProvisionedProductPropertiesOutput() {}

void OAIUpdateProvisionedProductPropertiesOutput::initializeModel() {

    m_provisioned_product_id_isSet = false;
    m_provisioned_product_id_isValid = false;

    m_provisioned_product_properties_isSet = false;
    m_provisioned_product_properties_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateProvisionedProductPropertiesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProvisionedProductPropertiesOutput::fromJsonObject(QJsonObject json) {

    m_provisioned_product_id_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_id, json[QString("ProvisionedProductId")]);
    m_provisioned_product_id_isSet = !json[QString("ProvisionedProductId")].isNull() && m_provisioned_product_id_isValid;

    m_provisioned_product_properties_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_properties, json[QString("ProvisionedProductProperties")]);
    m_provisioned_product_properties_isSet = !json[QString("ProvisionedProductProperties")].isNull() && m_provisioned_product_properties_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("RecordId")]);
    m_record_id_isSet = !json[QString("RecordId")].isNull() && m_record_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIUpdateProvisionedProductPropertiesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProvisionedProductPropertiesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioned_product_id_isSet) {
        obj.insert(QString("ProvisionedProductId"), ::OpenAPI::toJsonValue(m_provisioned_product_id));
    }
    if (m_provisioned_product_properties.isSet()) {
        obj.insert(QString("ProvisionedProductProperties"), ::OpenAPI::toJsonValue(m_provisioned_product_properties));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("RecordId"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUpdateProvisionedProductPropertiesOutput::getProvisionedProductId() const {
    return m_provisioned_product_id;
}
void OAIUpdateProvisionedProductPropertiesOutput::setProvisionedProductId(const QString &provisioned_product_id) {
    m_provisioned_product_id = provisioned_product_id;
    m_provisioned_product_id_isSet = true;
}

bool OAIUpdateProvisionedProductPropertiesOutput::is_provisioned_product_id_Set() const{
    return m_provisioned_product_id_isSet;
}

bool OAIUpdateProvisionedProductPropertiesOutput::is_provisioned_product_id_Valid() const{
    return m_provisioned_product_id_isValid;
}

QMap OAIUpdateProvisionedProductPropertiesOutput::getProvisionedProductProperties() const {
    return m_provisioned_product_properties;
}
void OAIUpdateProvisionedProductPropertiesOutput::setProvisionedProductProperties(const QMap &provisioned_product_properties) {
    m_provisioned_product_properties = provisioned_product_properties;
    m_provisioned_product_properties_isSet = true;
}

bool OAIUpdateProvisionedProductPropertiesOutput::is_provisioned_product_properties_Set() const{
    return m_provisioned_product_properties_isSet;
}

bool OAIUpdateProvisionedProductPropertiesOutput::is_provisioned_product_properties_Valid() const{
    return m_provisioned_product_properties_isValid;
}

QString OAIUpdateProvisionedProductPropertiesOutput::getRecordId() const {
    return m_record_id;
}
void OAIUpdateProvisionedProductPropertiesOutput::setRecordId(const QString &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIUpdateProvisionedProductPropertiesOutput::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIUpdateProvisionedProductPropertiesOutput::is_record_id_Valid() const{
    return m_record_id_isValid;
}

OAIRecordStatus OAIUpdateProvisionedProductPropertiesOutput::getStatus() const {
    return m_status;
}
void OAIUpdateProvisionedProductPropertiesOutput::setStatus(const OAIRecordStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateProvisionedProductPropertiesOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateProvisionedProductPropertiesOutput::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateProvisionedProductPropertiesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioned_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_product_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProvisionedProductPropertiesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
