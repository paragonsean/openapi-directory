/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningArtifactSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningArtifactSummary::OAIProvisioningArtifactSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningArtifactSummary::OAIProvisioningArtifactSummary() {
    this->initializeModel();
}

OAIProvisioningArtifactSummary::~OAIProvisioningArtifactSummary() {}

void OAIProvisioningArtifactSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_provisioning_artifact_metadata_isSet = false;
    m_provisioning_artifact_metadata_isValid = false;
}

void OAIProvisioningArtifactSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningArtifactSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_provisioning_artifact_metadata_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_metadata, json[QString("ProvisioningArtifactMetadata")]);
    m_provisioning_artifact_metadata_isSet = !json[QString("ProvisioningArtifactMetadata")].isNull() && m_provisioning_artifact_metadata_isValid;
}

QString OAIProvisioningArtifactSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningArtifactSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_provisioning_artifact_metadata.isSet()) {
        obj.insert(QString("ProvisioningArtifactMetadata"), ::OpenAPI::toJsonValue(m_provisioning_artifact_metadata));
    }
    return obj;
}

QString OAIProvisioningArtifactSummary::getId() const {
    return m_id;
}
void OAIProvisioningArtifactSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProvisioningArtifactSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProvisioningArtifactSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProvisioningArtifactSummary::getName() const {
    return m_name;
}
void OAIProvisioningArtifactSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvisioningArtifactSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvisioningArtifactSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProvisioningArtifactSummary::getDescription() const {
    return m_description;
}
void OAIProvisioningArtifactSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProvisioningArtifactSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProvisioningArtifactSummary::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIProvisioningArtifactSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIProvisioningArtifactSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIProvisioningArtifactSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIProvisioningArtifactSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QMap OAIProvisioningArtifactSummary::getProvisioningArtifactMetadata() const {
    return m_provisioning_artifact_metadata;
}
void OAIProvisioningArtifactSummary::setProvisioningArtifactMetadata(const QMap &provisioning_artifact_metadata) {
    m_provisioning_artifact_metadata = provisioning_artifact_metadata;
    m_provisioning_artifact_metadata_isSet = true;
}

bool OAIProvisioningArtifactSummary::is_provisioning_artifact_metadata_Set() const{
    return m_provisioning_artifact_metadata_isSet;
}

bool OAIProvisioningArtifactSummary::is_provisioning_artifact_metadata_Valid() const{
    return m_provisioning_artifact_metadata_isValid;
}

bool OAIProvisioningArtifactSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningArtifactSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
