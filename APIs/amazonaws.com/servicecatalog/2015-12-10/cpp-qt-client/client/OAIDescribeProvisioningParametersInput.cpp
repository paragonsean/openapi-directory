/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProvisioningParametersInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProvisioningParametersInput::OAIDescribeProvisioningParametersInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProvisioningParametersInput::OAIDescribeProvisioningParametersInput() {
    this->initializeModel();
}

OAIDescribeProvisioningParametersInput::~OAIDescribeProvisioningParametersInput() {}

void OAIDescribeProvisioningParametersInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_provisioning_artifact_name_isSet = false;
    m_provisioning_artifact_name_isValid = false;

    m_path_id_isSet = false;
    m_path_id_isValid = false;

    m_path_name_isSet = false;
    m_path_name_isValid = false;
}

void OAIDescribeProvisioningParametersInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProvisioningParametersInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("ProductName")]);
    m_product_name_isSet = !json[QString("ProductName")].isNull() && m_product_name_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_provisioning_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_name, json[QString("ProvisioningArtifactName")]);
    m_provisioning_artifact_name_isSet = !json[QString("ProvisioningArtifactName")].isNull() && m_provisioning_artifact_name_isValid;

    m_path_id_isValid = ::OpenAPI::fromJsonValue(m_path_id, json[QString("PathId")]);
    m_path_id_isSet = !json[QString("PathId")].isNull() && m_path_id_isValid;

    m_path_name_isValid = ::OpenAPI::fromJsonValue(m_path_name, json[QString("PathName")]);
    m_path_name_isSet = !json[QString("PathName")].isNull() && m_path_name_isValid;
}

QString OAIDescribeProvisioningParametersInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProvisioningParametersInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("ProductName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_provisioning_artifact_name_isSet) {
        obj.insert(QString("ProvisioningArtifactName"), ::OpenAPI::toJsonValue(m_provisioning_artifact_name));
    }
    if (m_path_id_isSet) {
        obj.insert(QString("PathId"), ::OpenAPI::toJsonValue(m_path_id));
    }
    if (m_path_name_isSet) {
        obj.insert(QString("PathName"), ::OpenAPI::toJsonValue(m_path_name));
    }
    return obj;
}

QString OAIDescribeProvisioningParametersInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDescribeProvisioningParametersInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDescribeProvisioningParametersInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDescribeProvisioningParametersInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIDescribeProvisioningParametersInput::getProductId() const {
    return m_product_id;
}
void OAIDescribeProvisioningParametersInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDescribeProvisioningParametersInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDescribeProvisioningParametersInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIDescribeProvisioningParametersInput::getProductName() const {
    return m_product_name;
}
void OAIDescribeProvisioningParametersInput::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIDescribeProvisioningParametersInput::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIDescribeProvisioningParametersInput::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAIDescribeProvisioningParametersInput::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIDescribeProvisioningParametersInput::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIDescribeProvisioningParametersInput::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIDescribeProvisioningParametersInput::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QString OAIDescribeProvisioningParametersInput::getProvisioningArtifactName() const {
    return m_provisioning_artifact_name;
}
void OAIDescribeProvisioningParametersInput::setProvisioningArtifactName(const QString &provisioning_artifact_name) {
    m_provisioning_artifact_name = provisioning_artifact_name;
    m_provisioning_artifact_name_isSet = true;
}

bool OAIDescribeProvisioningParametersInput::is_provisioning_artifact_name_Set() const{
    return m_provisioning_artifact_name_isSet;
}

bool OAIDescribeProvisioningParametersInput::is_provisioning_artifact_name_Valid() const{
    return m_provisioning_artifact_name_isValid;
}

QString OAIDescribeProvisioningParametersInput::getPathId() const {
    return m_path_id;
}
void OAIDescribeProvisioningParametersInput::setPathId(const QString &path_id) {
    m_path_id = path_id;
    m_path_id_isSet = true;
}

bool OAIDescribeProvisioningParametersInput::is_path_id_Set() const{
    return m_path_id_isSet;
}

bool OAIDescribeProvisioningParametersInput::is_path_id_Valid() const{
    return m_path_id_isValid;
}

QString OAIDescribeProvisioningParametersInput::getPathName() const {
    return m_path_name;
}
void OAIDescribeProvisioningParametersInput::setPathName(const QString &path_name) {
    m_path_name = path_name;
    m_path_name_isSet = true;
}

bool OAIDescribeProvisioningParametersInput::is_path_name_Set() const{
    return m_path_name_isSet;
}

bool OAIDescribeProvisioningParametersInput::is_path_name_Valid() const{
    return m_path_name_isValid;
}

bool OAIDescribeProvisioningParametersInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProvisioningParametersInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
