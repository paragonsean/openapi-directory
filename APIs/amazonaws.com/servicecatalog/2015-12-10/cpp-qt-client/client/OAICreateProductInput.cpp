/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProductInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProductInput::OAICreateProductInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProductInput::OAICreateProductInput() {
    this->initializeModel();
}

OAICreateProductInput::~OAICreateProductInput() {}

void OAICreateProductInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_distributor_isSet = false;
    m_distributor_isValid = false;

    m_support_description_isSet = false;
    m_support_description_isValid = false;

    m_support_email_isSet = false;
    m_support_email_isValid = false;

    m_support_url_isSet = false;
    m_support_url_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_provisioning_artifact_parameters_isSet = false;
    m_provisioning_artifact_parameters_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;

    m_source_connection_isSet = false;
    m_source_connection_isValid = false;
}

void OAICreateProductInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProductInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_distributor_isValid = ::OpenAPI::fromJsonValue(m_distributor, json[QString("Distributor")]);
    m_distributor_isSet = !json[QString("Distributor")].isNull() && m_distributor_isValid;

    m_support_description_isValid = ::OpenAPI::fromJsonValue(m_support_description, json[QString("SupportDescription")]);
    m_support_description_isSet = !json[QString("SupportDescription")].isNull() && m_support_description_isValid;

    m_support_email_isValid = ::OpenAPI::fromJsonValue(m_support_email, json[QString("SupportEmail")]);
    m_support_email_isSet = !json[QString("SupportEmail")].isNull() && m_support_email_isValid;

    m_support_url_isValid = ::OpenAPI::fromJsonValue(m_support_url, json[QString("SupportUrl")]);
    m_support_url_isSet = !json[QString("SupportUrl")].isNull() && m_support_url_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("ProductType")]);
    m_product_type_isSet = !json[QString("ProductType")].isNull() && m_product_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_provisioning_artifact_parameters_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_parameters, json[QString("ProvisioningArtifactParameters")]);
    m_provisioning_artifact_parameters_isSet = !json[QString("ProvisioningArtifactParameters")].isNull() && m_provisioning_artifact_parameters_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;

    m_source_connection_isValid = ::OpenAPI::fromJsonValue(m_source_connection, json[QString("SourceConnection")]);
    m_source_connection_isSet = !json[QString("SourceConnection")].isNull() && m_source_connection_isValid;
}

QString OAICreateProductInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProductInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_distributor_isSet) {
        obj.insert(QString("Distributor"), ::OpenAPI::toJsonValue(m_distributor));
    }
    if (m_support_description_isSet) {
        obj.insert(QString("SupportDescription"), ::OpenAPI::toJsonValue(m_support_description));
    }
    if (m_support_email_isSet) {
        obj.insert(QString("SupportEmail"), ::OpenAPI::toJsonValue(m_support_email));
    }
    if (m_support_url_isSet) {
        obj.insert(QString("SupportUrl"), ::OpenAPI::toJsonValue(m_support_url));
    }
    if (m_product_type.isSet()) {
        obj.insert(QString("ProductType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_provisioning_artifact_parameters.isSet()) {
        obj.insert(QString("ProvisioningArtifactParameters"), ::OpenAPI::toJsonValue(m_provisioning_artifact_parameters));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    if (m_source_connection.isSet()) {
        obj.insert(QString("SourceConnection"), ::OpenAPI::toJsonValue(m_source_connection));
    }
    return obj;
}

QString OAICreateProductInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAICreateProductInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAICreateProductInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAICreateProductInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAICreateProductInput::getName() const {
    return m_name;
}
void OAICreateProductInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateProductInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateProductInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateProductInput::getOwner() const {
    return m_owner;
}
void OAICreateProductInput::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICreateProductInput::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICreateProductInput::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAICreateProductInput::getDescription() const {
    return m_description;
}
void OAICreateProductInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateProductInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateProductInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateProductInput::getDistributor() const {
    return m_distributor;
}
void OAICreateProductInput::setDistributor(const QString &distributor) {
    m_distributor = distributor;
    m_distributor_isSet = true;
}

bool OAICreateProductInput::is_distributor_Set() const{
    return m_distributor_isSet;
}

bool OAICreateProductInput::is_distributor_Valid() const{
    return m_distributor_isValid;
}

QString OAICreateProductInput::getSupportDescription() const {
    return m_support_description;
}
void OAICreateProductInput::setSupportDescription(const QString &support_description) {
    m_support_description = support_description;
    m_support_description_isSet = true;
}

bool OAICreateProductInput::is_support_description_Set() const{
    return m_support_description_isSet;
}

bool OAICreateProductInput::is_support_description_Valid() const{
    return m_support_description_isValid;
}

QString OAICreateProductInput::getSupportEmail() const {
    return m_support_email;
}
void OAICreateProductInput::setSupportEmail(const QString &support_email) {
    m_support_email = support_email;
    m_support_email_isSet = true;
}

bool OAICreateProductInput::is_support_email_Set() const{
    return m_support_email_isSet;
}

bool OAICreateProductInput::is_support_email_Valid() const{
    return m_support_email_isValid;
}

QString OAICreateProductInput::getSupportUrl() const {
    return m_support_url;
}
void OAICreateProductInput::setSupportUrl(const QString &support_url) {
    m_support_url = support_url;
    m_support_url_isSet = true;
}

bool OAICreateProductInput::is_support_url_Set() const{
    return m_support_url_isSet;
}

bool OAICreateProductInput::is_support_url_Valid() const{
    return m_support_url_isValid;
}

OAIProductType OAICreateProductInput::getProductType() const {
    return m_product_type;
}
void OAICreateProductInput::setProductType(const OAIProductType &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAICreateProductInput::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAICreateProductInput::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QList OAICreateProductInput::getTags() const {
    return m_tags;
}
void OAICreateProductInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateProductInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateProductInput::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateProductInput_ProvisioningArtifactParameters OAICreateProductInput::getProvisioningArtifactParameters() const {
    return m_provisioning_artifact_parameters;
}
void OAICreateProductInput::setProvisioningArtifactParameters(const OAICreateProductInput_ProvisioningArtifactParameters &provisioning_artifact_parameters) {
    m_provisioning_artifact_parameters = provisioning_artifact_parameters;
    m_provisioning_artifact_parameters_isSet = true;
}

bool OAICreateProductInput::is_provisioning_artifact_parameters_Set() const{
    return m_provisioning_artifact_parameters_isSet;
}

bool OAICreateProductInput::is_provisioning_artifact_parameters_Valid() const{
    return m_provisioning_artifact_parameters_isValid;
}

QString OAICreateProductInput::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateProductInput::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateProductInput::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateProductInput::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

OAICreateProductInput_SourceConnection OAICreateProductInput::getSourceConnection() const {
    return m_source_connection;
}
void OAICreateProductInput::setSourceConnection(const OAICreateProductInput_SourceConnection &source_connection) {
    m_source_connection = source_connection;
    m_source_connection_isSet = true;
}

bool OAICreateProductInput::is_source_connection_Set() const{
    return m_source_connection_isSet;
}

bool OAICreateProductInput::is_source_connection_Valid() const{
    return m_source_connection_isValid;
}

bool OAICreateProductInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProductInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_owner_isValid && m_product_type_isValid && m_idempotency_token_isValid && true;
}

} // namespace OpenAPI
