/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLaunchPathsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLaunchPathsOutput::OAIListLaunchPathsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLaunchPathsOutput::OAIListLaunchPathsOutput() {
    this->initializeModel();
}

OAIListLaunchPathsOutput::~OAIListLaunchPathsOutput() {}

void OAIListLaunchPathsOutput::initializeModel() {

    m_launch_path_summaries_isSet = false;
    m_launch_path_summaries_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListLaunchPathsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLaunchPathsOutput::fromJsonObject(QJsonObject json) {

    m_launch_path_summaries_isValid = ::OpenAPI::fromJsonValue(m_launch_path_summaries, json[QString("LaunchPathSummaries")]);
    m_launch_path_summaries_isSet = !json[QString("LaunchPathSummaries")].isNull() && m_launch_path_summaries_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListLaunchPathsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLaunchPathsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_launch_path_summaries.isSet()) {
        obj.insert(QString("LaunchPathSummaries"), ::OpenAPI::toJsonValue(m_launch_path_summaries));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIListLaunchPathsOutput::getLaunchPathSummaries() const {
    return m_launch_path_summaries;
}
void OAIListLaunchPathsOutput::setLaunchPathSummaries(const QList &launch_path_summaries) {
    m_launch_path_summaries = launch_path_summaries;
    m_launch_path_summaries_isSet = true;
}

bool OAIListLaunchPathsOutput::is_launch_path_summaries_Set() const{
    return m_launch_path_summaries_isSet;
}

bool OAIListLaunchPathsOutput::is_launch_path_summaries_Valid() const{
    return m_launch_path_summaries_isValid;
}

QString OAIListLaunchPathsOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListLaunchPathsOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListLaunchPathsOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListLaunchPathsOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListLaunchPathsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_launch_path_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLaunchPathsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
