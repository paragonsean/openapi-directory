/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPrincipalsForPortfolioOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPrincipalsForPortfolioOutput::OAIListPrincipalsForPortfolioOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPrincipalsForPortfolioOutput::OAIListPrincipalsForPortfolioOutput() {
    this->initializeModel();
}

OAIListPrincipalsForPortfolioOutput::~OAIListPrincipalsForPortfolioOutput() {}

void OAIListPrincipalsForPortfolioOutput::initializeModel() {

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListPrincipalsForPortfolioOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPrincipalsForPortfolioOutput::fromJsonObject(QJsonObject json) {

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("Principals")]);
    m_principals_isSet = !json[QString("Principals")].isNull() && m_principals_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListPrincipalsForPortfolioOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPrincipalsForPortfolioOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_principals.isSet()) {
        obj.insert(QString("Principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIListPrincipalsForPortfolioOutput::getPrincipals() const {
    return m_principals;
}
void OAIListPrincipalsForPortfolioOutput::setPrincipals(const QList &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAIListPrincipalsForPortfolioOutput::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAIListPrincipalsForPortfolioOutput::is_principals_Valid() const{
    return m_principals_isValid;
}

QString OAIListPrincipalsForPortfolioOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListPrincipalsForPortfolioOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListPrincipalsForPortfolioOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListPrincipalsForPortfolioOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListPrincipalsForPortfolioOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPrincipalsForPortfolioOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
