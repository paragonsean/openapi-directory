/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateProductWithPortfolioInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateProductWithPortfolioInput::OAIAssociateProductWithPortfolioInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateProductWithPortfolioInput::OAIAssociateProductWithPortfolioInput() {
    this->initializeModel();
}

OAIAssociateProductWithPortfolioInput::~OAIAssociateProductWithPortfolioInput() {}

void OAIAssociateProductWithPortfolioInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_portfolio_id_isSet = false;
    m_portfolio_id_isValid = false;

    m_source_portfolio_id_isSet = false;
    m_source_portfolio_id_isValid = false;
}

void OAIAssociateProductWithPortfolioInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateProductWithPortfolioInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_portfolio_id, json[QString("PortfolioId")]);
    m_portfolio_id_isSet = !json[QString("PortfolioId")].isNull() && m_portfolio_id_isValid;

    m_source_portfolio_id_isValid = ::OpenAPI::fromJsonValue(m_source_portfolio_id, json[QString("SourcePortfolioId")]);
    m_source_portfolio_id_isSet = !json[QString("SourcePortfolioId")].isNull() && m_source_portfolio_id_isValid;
}

QString OAIAssociateProductWithPortfolioInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateProductWithPortfolioInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_portfolio_id_isSet) {
        obj.insert(QString("PortfolioId"), ::OpenAPI::toJsonValue(m_portfolio_id));
    }
    if (m_source_portfolio_id_isSet) {
        obj.insert(QString("SourcePortfolioId"), ::OpenAPI::toJsonValue(m_source_portfolio_id));
    }
    return obj;
}

QString OAIAssociateProductWithPortfolioInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIAssociateProductWithPortfolioInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIAssociateProductWithPortfolioInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIAssociateProductWithPortfolioInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIAssociateProductWithPortfolioInput::getProductId() const {
    return m_product_id;
}
void OAIAssociateProductWithPortfolioInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIAssociateProductWithPortfolioInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIAssociateProductWithPortfolioInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIAssociateProductWithPortfolioInput::getPortfolioId() const {
    return m_portfolio_id;
}
void OAIAssociateProductWithPortfolioInput::setPortfolioId(const QString &portfolio_id) {
    m_portfolio_id = portfolio_id;
    m_portfolio_id_isSet = true;
}

bool OAIAssociateProductWithPortfolioInput::is_portfolio_id_Set() const{
    return m_portfolio_id_isSet;
}

bool OAIAssociateProductWithPortfolioInput::is_portfolio_id_Valid() const{
    return m_portfolio_id_isValid;
}

QString OAIAssociateProductWithPortfolioInput::getSourcePortfolioId() const {
    return m_source_portfolio_id;
}
void OAIAssociateProductWithPortfolioInput::setSourcePortfolioId(const QString &source_portfolio_id) {
    m_source_portfolio_id = source_portfolio_id;
    m_source_portfolio_id_isSet = true;
}

bool OAIAssociateProductWithPortfolioInput::is_source_portfolio_id_Set() const{
    return m_source_portfolio_id_isSet;
}

bool OAIAssociateProductWithPortfolioInput::is_source_portfolio_id_Valid() const{
    return m_source_portfolio_id_isValid;
}

bool OAIAssociateProductWithPortfolioInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_portfolio_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateProductWithPortfolioInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_portfolio_id_isValid && true;
}

} // namespace OpenAPI
