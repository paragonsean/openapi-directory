/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProvisionedProductPlansOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProvisionedProductPlansOutput::OAIListProvisionedProductPlansOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProvisionedProductPlansOutput::OAIListProvisionedProductPlansOutput() {
    this->initializeModel();
}

OAIListProvisionedProductPlansOutput::~OAIListProvisionedProductPlansOutput() {}

void OAIListProvisionedProductPlansOutput::initializeModel() {

    m_provisioned_product_plans_isSet = false;
    m_provisioned_product_plans_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListProvisionedProductPlansOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProvisionedProductPlansOutput::fromJsonObject(QJsonObject json) {

    m_provisioned_product_plans_isValid = ::OpenAPI::fromJsonValue(m_provisioned_product_plans, json[QString("ProvisionedProductPlans")]);
    m_provisioned_product_plans_isSet = !json[QString("ProvisionedProductPlans")].isNull() && m_provisioned_product_plans_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListProvisionedProductPlansOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProvisionedProductPlansOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioned_product_plans.isSet()) {
        obj.insert(QString("ProvisionedProductPlans"), ::OpenAPI::toJsonValue(m_provisioned_product_plans));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIListProvisionedProductPlansOutput::getProvisionedProductPlans() const {
    return m_provisioned_product_plans;
}
void OAIListProvisionedProductPlansOutput::setProvisionedProductPlans(const QList &provisioned_product_plans) {
    m_provisioned_product_plans = provisioned_product_plans;
    m_provisioned_product_plans_isSet = true;
}

bool OAIListProvisionedProductPlansOutput::is_provisioned_product_plans_Set() const{
    return m_provisioned_product_plans_isSet;
}

bool OAIListProvisionedProductPlansOutput::is_provisioned_product_plans_Valid() const{
    return m_provisioned_product_plans_isValid;
}

QString OAIListProvisionedProductPlansOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListProvisionedProductPlansOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListProvisionedProductPlansOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListProvisionedProductPlansOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListProvisionedProductPlansOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioned_product_plans.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProvisionedProductPlansOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
