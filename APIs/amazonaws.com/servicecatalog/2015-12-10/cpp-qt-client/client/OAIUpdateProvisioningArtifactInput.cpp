/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProvisioningArtifactInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProvisioningArtifactInput::OAIUpdateProvisioningArtifactInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProvisioningArtifactInput::OAIUpdateProvisioningArtifactInput() {
    this->initializeModel();
}

OAIUpdateProvisioningArtifactInput::~OAIUpdateProvisioningArtifactInput() {}

void OAIUpdateProvisioningArtifactInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_provisioning_artifact_id_isSet = false;
    m_provisioning_artifact_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_guidance_isSet = false;
    m_guidance_isValid = false;
}

void OAIUpdateProvisioningArtifactInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProvisioningArtifactInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_provisioning_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_id, json[QString("ProvisioningArtifactId")]);
    m_provisioning_artifact_id_isSet = !json[QString("ProvisioningArtifactId")].isNull() && m_provisioning_artifact_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_guidance_isValid = ::OpenAPI::fromJsonValue(m_guidance, json[QString("Guidance")]);
    m_guidance_isSet = !json[QString("Guidance")].isNull() && m_guidance_isValid;
}

QString OAIUpdateProvisioningArtifactInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProvisioningArtifactInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_provisioning_artifact_id_isSet) {
        obj.insert(QString("ProvisioningArtifactId"), ::OpenAPI::toJsonValue(m_provisioning_artifact_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_guidance.isSet()) {
        obj.insert(QString("Guidance"), ::OpenAPI::toJsonValue(m_guidance));
    }
    return obj;
}

QString OAIUpdateProvisioningArtifactInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIUpdateProvisioningArtifactInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIUpdateProvisioningArtifactInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIUpdateProvisioningArtifactInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIUpdateProvisioningArtifactInput::getProductId() const {
    return m_product_id;
}
void OAIUpdateProvisioningArtifactInput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIUpdateProvisioningArtifactInput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIUpdateProvisioningArtifactInput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIUpdateProvisioningArtifactInput::getProvisioningArtifactId() const {
    return m_provisioning_artifact_id;
}
void OAIUpdateProvisioningArtifactInput::setProvisioningArtifactId(const QString &provisioning_artifact_id) {
    m_provisioning_artifact_id = provisioning_artifact_id;
    m_provisioning_artifact_id_isSet = true;
}

bool OAIUpdateProvisioningArtifactInput::is_provisioning_artifact_id_Set() const{
    return m_provisioning_artifact_id_isSet;
}

bool OAIUpdateProvisioningArtifactInput::is_provisioning_artifact_id_Valid() const{
    return m_provisioning_artifact_id_isValid;
}

QString OAIUpdateProvisioningArtifactInput::getName() const {
    return m_name;
}
void OAIUpdateProvisioningArtifactInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateProvisioningArtifactInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateProvisioningArtifactInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateProvisioningArtifactInput::getDescription() const {
    return m_description;
}
void OAIUpdateProvisioningArtifactInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateProvisioningArtifactInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateProvisioningArtifactInput::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUpdateProvisioningArtifactInput::getActive() const {
    return m_active;
}
void OAIUpdateProvisioningArtifactInput::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUpdateProvisioningArtifactInput::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUpdateProvisioningArtifactInput::is_active_Valid() const{
    return m_active_isValid;
}

OAIProvisioningArtifactGuidance OAIUpdateProvisioningArtifactInput::getGuidance() const {
    return m_guidance;
}
void OAIUpdateProvisioningArtifactInput::setGuidance(const OAIProvisioningArtifactGuidance &guidance) {
    m_guidance = guidance;
    m_guidance_isSet = true;
}

bool OAIUpdateProvisioningArtifactInput::is_guidance_Set() const{
    return m_guidance_isSet;
}

bool OAIUpdateProvisioningArtifactInput::is_guidance_Valid() const{
    return m_guidance_isValid;
}

bool OAIUpdateProvisioningArtifactInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guidance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProvisioningArtifactInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_provisioning_artifact_id_isValid && true;
}

} // namespace OpenAPI
