/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeCopyProductStatusInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeCopyProductStatusInput::OAIDescribeCopyProductStatusInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeCopyProductStatusInput::OAIDescribeCopyProductStatusInput() {
    this->initializeModel();
}

OAIDescribeCopyProductStatusInput::~OAIDescribeCopyProductStatusInput() {}

void OAIDescribeCopyProductStatusInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_copy_product_token_isSet = false;
    m_copy_product_token_isValid = false;
}

void OAIDescribeCopyProductStatusInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeCopyProductStatusInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_copy_product_token_isValid = ::OpenAPI::fromJsonValue(m_copy_product_token, json[QString("CopyProductToken")]);
    m_copy_product_token_isSet = !json[QString("CopyProductToken")].isNull() && m_copy_product_token_isValid;
}

QString OAIDescribeCopyProductStatusInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeCopyProductStatusInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_copy_product_token_isSet) {
        obj.insert(QString("CopyProductToken"), ::OpenAPI::toJsonValue(m_copy_product_token));
    }
    return obj;
}

QString OAIDescribeCopyProductStatusInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIDescribeCopyProductStatusInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIDescribeCopyProductStatusInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIDescribeCopyProductStatusInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIDescribeCopyProductStatusInput::getCopyProductToken() const {
    return m_copy_product_token;
}
void OAIDescribeCopyProductStatusInput::setCopyProductToken(const QString &copy_product_token) {
    m_copy_product_token = copy_product_token;
    m_copy_product_token_isSet = true;
}

bool OAIDescribeCopyProductStatusInput::is_copy_product_token_Set() const{
    return m_copy_product_token_isSet;
}

bool OAIDescribeCopyProductStatusInput::is_copy_product_token_Valid() const{
    return m_copy_product_token_isValid;
}

bool OAIDescribeCopyProductStatusInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_product_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeCopyProductStatusInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_copy_product_token_isValid && true;
}

} // namespace OpenAPI
