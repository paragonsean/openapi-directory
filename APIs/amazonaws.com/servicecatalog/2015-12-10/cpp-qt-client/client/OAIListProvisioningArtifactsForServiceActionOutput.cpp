/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProvisioningArtifactsForServiceActionOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProvisioningArtifactsForServiceActionOutput::OAIListProvisioningArtifactsForServiceActionOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProvisioningArtifactsForServiceActionOutput::OAIListProvisioningArtifactsForServiceActionOutput() {
    this->initializeModel();
}

OAIListProvisioningArtifactsForServiceActionOutput::~OAIListProvisioningArtifactsForServiceActionOutput() {}

void OAIListProvisioningArtifactsForServiceActionOutput::initializeModel() {

    m_provisioning_artifact_views_isSet = false;
    m_provisioning_artifact_views_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListProvisioningArtifactsForServiceActionOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProvisioningArtifactsForServiceActionOutput::fromJsonObject(QJsonObject json) {

    m_provisioning_artifact_views_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_views, json[QString("ProvisioningArtifactViews")]);
    m_provisioning_artifact_views_isSet = !json[QString("ProvisioningArtifactViews")].isNull() && m_provisioning_artifact_views_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListProvisioningArtifactsForServiceActionOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProvisioningArtifactsForServiceActionOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_artifact_views.isSet()) {
        obj.insert(QString("ProvisioningArtifactViews"), ::OpenAPI::toJsonValue(m_provisioning_artifact_views));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList OAIListProvisioningArtifactsForServiceActionOutput::getProvisioningArtifactViews() const {
    return m_provisioning_artifact_views;
}
void OAIListProvisioningArtifactsForServiceActionOutput::setProvisioningArtifactViews(const QList &provisioning_artifact_views) {
    m_provisioning_artifact_views = provisioning_artifact_views;
    m_provisioning_artifact_views_isSet = true;
}

bool OAIListProvisioningArtifactsForServiceActionOutput::is_provisioning_artifact_views_Set() const{
    return m_provisioning_artifact_views_isSet;
}

bool OAIListProvisioningArtifactsForServiceActionOutput::is_provisioning_artifact_views_Valid() const{
    return m_provisioning_artifact_views_isValid;
}

QString OAIListProvisioningArtifactsForServiceActionOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListProvisioningArtifactsForServiceActionOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListProvisioningArtifactsForServiceActionOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListProvisioningArtifactsForServiceActionOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListProvisioningArtifactsForServiceActionOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_artifact_views.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProvisioningArtifactsForServiceActionOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
