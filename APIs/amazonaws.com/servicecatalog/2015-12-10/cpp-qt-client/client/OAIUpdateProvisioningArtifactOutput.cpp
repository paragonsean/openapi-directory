/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProvisioningArtifactOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProvisioningArtifactOutput::OAIUpdateProvisioningArtifactOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProvisioningArtifactOutput::OAIUpdateProvisioningArtifactOutput() {
    this->initializeModel();
}

OAIUpdateProvisioningArtifactOutput::~OAIUpdateProvisioningArtifactOutput() {}

void OAIUpdateProvisioningArtifactOutput::initializeModel() {

    m_provisioning_artifact_detail_isSet = false;
    m_provisioning_artifact_detail_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateProvisioningArtifactOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProvisioningArtifactOutput::fromJsonObject(QJsonObject json) {

    m_provisioning_artifact_detail_isValid = ::OpenAPI::fromJsonValue(m_provisioning_artifact_detail, json[QString("ProvisioningArtifactDetail")]);
    m_provisioning_artifact_detail_isSet = !json[QString("ProvisioningArtifactDetail")].isNull() && m_provisioning_artifact_detail_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("Info")]);
    m_info_isSet = !json[QString("Info")].isNull() && m_info_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIUpdateProvisioningArtifactOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProvisioningArtifactOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_artifact_detail.isSet()) {
        obj.insert(QString("ProvisioningArtifactDetail"), ::OpenAPI::toJsonValue(m_provisioning_artifact_detail));
    }
    if (m_info.isSet()) {
        obj.insert(QString("Info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail OAIUpdateProvisioningArtifactOutput::getProvisioningArtifactDetail() const {
    return m_provisioning_artifact_detail;
}
void OAIUpdateProvisioningArtifactOutput::setProvisioningArtifactDetail(const OAICreateProvisioningArtifactOutput_ProvisioningArtifactDetail &provisioning_artifact_detail) {
    m_provisioning_artifact_detail = provisioning_artifact_detail;
    m_provisioning_artifact_detail_isSet = true;
}

bool OAIUpdateProvisioningArtifactOutput::is_provisioning_artifact_detail_Set() const{
    return m_provisioning_artifact_detail_isSet;
}

bool OAIUpdateProvisioningArtifactOutput::is_provisioning_artifact_detail_Valid() const{
    return m_provisioning_artifact_detail_isValid;
}

QMap OAIUpdateProvisioningArtifactOutput::getInfo() const {
    return m_info;
}
void OAIUpdateProvisioningArtifactOutput::setInfo(const QMap &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIUpdateProvisioningArtifactOutput::is_info_Set() const{
    return m_info_isSet;
}

bool OAIUpdateProvisioningArtifactOutput::is_info_Valid() const{
    return m_info_isValid;
}

OAIStatus OAIUpdateProvisioningArtifactOutput::getStatus() const {
    return m_status;
}
void OAIUpdateProvisioningArtifactOutput::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateProvisioningArtifactOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateProvisioningArtifactOutput::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateProvisioningArtifactOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_artifact_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProvisioningArtifactOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
