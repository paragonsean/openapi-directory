/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePortfolioSharesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePortfolioSharesOutput::OAIDescribePortfolioSharesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePortfolioSharesOutput::OAIDescribePortfolioSharesOutput() {
    this->initializeModel();
}

OAIDescribePortfolioSharesOutput::~OAIDescribePortfolioSharesOutput() {}

void OAIDescribePortfolioSharesOutput::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_portfolio_share_details_isSet = false;
    m_portfolio_share_details_isValid = false;
}

void OAIDescribePortfolioSharesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePortfolioSharesOutput::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("NextPageToken")]);
    m_next_page_token_isSet = !json[QString("NextPageToken")].isNull() && m_next_page_token_isValid;

    m_portfolio_share_details_isValid = ::OpenAPI::fromJsonValue(m_portfolio_share_details, json[QString("PortfolioShareDetails")]);
    m_portfolio_share_details_isSet = !json[QString("PortfolioShareDetails")].isNull() && m_portfolio_share_details_isValid;
}

QString OAIDescribePortfolioSharesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePortfolioSharesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("NextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_portfolio_share_details.isSet()) {
        obj.insert(QString("PortfolioShareDetails"), ::OpenAPI::toJsonValue(m_portfolio_share_details));
    }
    return obj;
}

QString OAIDescribePortfolioSharesOutput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIDescribePortfolioSharesOutput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIDescribePortfolioSharesOutput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIDescribePortfolioSharesOutput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList OAIDescribePortfolioSharesOutput::getPortfolioShareDetails() const {
    return m_portfolio_share_details;
}
void OAIDescribePortfolioSharesOutput::setPortfolioShareDetails(const QList &portfolio_share_details) {
    m_portfolio_share_details = portfolio_share_details;
    m_portfolio_share_details_isSet = true;
}

bool OAIDescribePortfolioSharesOutput::is_portfolio_share_details_Set() const{
    return m_portfolio_share_details_isSet;
}

bool OAIDescribePortfolioSharesOutput::is_portfolio_share_details_Valid() const{
    return m_portfolio_share_details_isValid;
}

bool OAIDescribePortfolioSharesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_share_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePortfolioSharesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
