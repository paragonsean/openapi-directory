/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAcceptedPortfolioSharesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAcceptedPortfolioSharesInput::OAIListAcceptedPortfolioSharesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAcceptedPortfolioSharesInput::OAIListAcceptedPortfolioSharesInput() {
    this->initializeModel();
}

OAIListAcceptedPortfolioSharesInput::~OAIListAcceptedPortfolioSharesInput() {}

void OAIListAcceptedPortfolioSharesInput::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_portfolio_share_type_isSet = false;
    m_portfolio_share_type_isValid = false;
}

void OAIListAcceptedPortfolioSharesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAcceptedPortfolioSharesInput::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("AcceptLanguage")]);
    m_accept_language_isSet = !json[QString("AcceptLanguage")].isNull() && m_accept_language_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("PageToken")]);
    m_page_token_isSet = !json[QString("PageToken")].isNull() && m_page_token_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_portfolio_share_type_isValid = ::OpenAPI::fromJsonValue(m_portfolio_share_type, json[QString("PortfolioShareType")]);
    m_portfolio_share_type_isSet = !json[QString("PortfolioShareType")].isNull() && m_portfolio_share_type_isValid;
}

QString OAIListAcceptedPortfolioSharesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAcceptedPortfolioSharesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("AcceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("PageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_portfolio_share_type.isSet()) {
        obj.insert(QString("PortfolioShareType"), ::OpenAPI::toJsonValue(m_portfolio_share_type));
    }
    return obj;
}

QString OAIListAcceptedPortfolioSharesInput::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIListAcceptedPortfolioSharesInput::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIListAcceptedPortfolioSharesInput::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIListAcceptedPortfolioSharesInput::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIListAcceptedPortfolioSharesInput::getPageToken() const {
    return m_page_token;
}
void OAIListAcceptedPortfolioSharesInput::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIListAcceptedPortfolioSharesInput::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIListAcceptedPortfolioSharesInput::is_page_token_Valid() const{
    return m_page_token_isValid;
}

qint32 OAIListAcceptedPortfolioSharesInput::getPageSize() const {
    return m_page_size;
}
void OAIListAcceptedPortfolioSharesInput::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListAcceptedPortfolioSharesInput::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListAcceptedPortfolioSharesInput::is_page_size_Valid() const{
    return m_page_size_isValid;
}

OAIPortfolioShareType OAIListAcceptedPortfolioSharesInput::getPortfolioShareType() const {
    return m_portfolio_share_type;
}
void OAIListAcceptedPortfolioSharesInput::setPortfolioShareType(const OAIPortfolioShareType &portfolio_share_type) {
    m_portfolio_share_type = portfolio_share_type;
    m_portfolio_share_type_isSet = true;
}

bool OAIListAcceptedPortfolioSharesInput::is_portfolio_share_type_Set() const{
    return m_portfolio_share_type_isSet;
}

bool OAIListAcceptedPortfolioSharesInput::is_portfolio_share_type_Valid() const{
    return m_portfolio_share_type_isValid;
}

bool OAIListAcceptedPortfolioSharesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_share_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAcceptedPortfolioSharesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
