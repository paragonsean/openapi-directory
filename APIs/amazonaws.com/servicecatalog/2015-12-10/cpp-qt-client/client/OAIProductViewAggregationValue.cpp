/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductViewAggregationValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductViewAggregationValue::OAIProductViewAggregationValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductViewAggregationValue::OAIProductViewAggregationValue() {
    this->initializeModel();
}

OAIProductViewAggregationValue::~OAIProductViewAggregationValue() {}

void OAIProductViewAggregationValue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_approximate_count_isSet = false;
    m_approximate_count_isValid = false;
}

void OAIProductViewAggregationValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductViewAggregationValue::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_approximate_count_isValid = ::OpenAPI::fromJsonValue(m_approximate_count, json[QString("ApproximateCount")]);
    m_approximate_count_isSet = !json[QString("ApproximateCount")].isNull() && m_approximate_count_isValid;
}

QString OAIProductViewAggregationValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductViewAggregationValue::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_approximate_count_isSet) {
        obj.insert(QString("ApproximateCount"), ::OpenAPI::toJsonValue(m_approximate_count));
    }
    return obj;
}

QString OAIProductViewAggregationValue::getValue() const {
    return m_value;
}
void OAIProductViewAggregationValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIProductViewAggregationValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIProductViewAggregationValue::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAIProductViewAggregationValue::getApproximateCount() const {
    return m_approximate_count;
}
void OAIProductViewAggregationValue::setApproximateCount(const qint32 &approximate_count) {
    m_approximate_count = approximate_count;
    m_approximate_count_isSet = true;
}

bool OAIProductViewAggregationValue::is_approximate_count_Set() const{
    return m_approximate_count_isSet;
}

bool OAIProductViewAggregationValue::is_approximate_count_Valid() const{
    return m_approximate_count_isValid;
}

bool OAIProductViewAggregationValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approximate_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductViewAggregationValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
