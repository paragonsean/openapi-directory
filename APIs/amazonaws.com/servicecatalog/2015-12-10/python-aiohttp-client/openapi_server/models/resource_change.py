# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_action import ChangeAction
from openapi_server.models.replacement import Replacement
from openapi_server import util


class ResourceChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ChangeAction=None, logical_resource_id: str=None, physical_resource_id: str=None, resource_type: str=None, replacement: Replacement=None, scope: List=None, details: List=None):
        """ResourceChange - a model defined in OpenAPI

        :param action: The action of this ResourceChange.
        :param logical_resource_id: The logical_resource_id of this ResourceChange.
        :param physical_resource_id: The physical_resource_id of this ResourceChange.
        :param resource_type: The resource_type of this ResourceChange.
        :param replacement: The replacement of this ResourceChange.
        :param scope: The scope of this ResourceChange.
        :param details: The details of this ResourceChange.
        """
        self.openapi_types = {
            'action': ChangeAction,
            'logical_resource_id': str,
            'physical_resource_id': str,
            'resource_type': str,
            'replacement': Replacement,
            'scope': List,
            'details': List
        }

        self.attribute_map = {
            'action': 'Action',
            'logical_resource_id': 'LogicalResourceId',
            'physical_resource_id': 'PhysicalResourceId',
            'resource_type': 'ResourceType',
            'replacement': 'Replacement',
            'scope': 'Scope',
            'details': 'Details'
        }

        self._action = action
        self._logical_resource_id = logical_resource_id
        self._physical_resource_id = physical_resource_id
        self._resource_type = resource_type
        self._replacement = replacement
        self._scope = scope
        self._details = details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceChange of this ResourceChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ResourceChange.


        :return: The action of this ResourceChange.
        :rtype: ChangeAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ResourceChange.


        :param action: The action of this ResourceChange.
        :type action: ChangeAction
        """

        self._action = action

    @property
    def logical_resource_id(self):
        """Gets the logical_resource_id of this ResourceChange.


        :return: The logical_resource_id of this ResourceChange.
        :rtype: str
        """
        return self._logical_resource_id

    @logical_resource_id.setter
    def logical_resource_id(self, logical_resource_id):
        """Sets the logical_resource_id of this ResourceChange.


        :param logical_resource_id: The logical_resource_id of this ResourceChange.
        :type logical_resource_id: str
        """

        self._logical_resource_id = logical_resource_id

    @property
    def physical_resource_id(self):
        """Gets the physical_resource_id of this ResourceChange.


        :return: The physical_resource_id of this ResourceChange.
        :rtype: str
        """
        return self._physical_resource_id

    @physical_resource_id.setter
    def physical_resource_id(self, physical_resource_id):
        """Sets the physical_resource_id of this ResourceChange.


        :param physical_resource_id: The physical_resource_id of this ResourceChange.
        :type physical_resource_id: str
        """

        self._physical_resource_id = physical_resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceChange.


        :return: The resource_type of this ResourceChange.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceChange.


        :param resource_type: The resource_type of this ResourceChange.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def replacement(self):
        """Gets the replacement of this ResourceChange.


        :return: The replacement of this ResourceChange.
        :rtype: Replacement
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this ResourceChange.


        :param replacement: The replacement of this ResourceChange.
        :type replacement: Replacement
        """

        self._replacement = replacement

    @property
    def scope(self):
        """Gets the scope of this ResourceChange.


        :return: The scope of this ResourceChange.
        :rtype: List
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ResourceChange.


        :param scope: The scope of this ResourceChange.
        :type scope: List
        """

        self._scope = scope

    @property
    def details(self):
        """Gets the details of this ResourceChange.


        :return: The details of this ResourceChange.
        :rtype: List
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ResourceChange.


        :param details: The details of this ResourceChange.
        :type details: List
        """

        self._details = details
