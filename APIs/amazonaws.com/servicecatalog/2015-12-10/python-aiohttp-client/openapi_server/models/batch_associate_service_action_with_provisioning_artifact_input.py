# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchAssociateServiceActionWithProvisioningArtifactInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_action_associations: List=None, accept_language: str=None):
        """BatchAssociateServiceActionWithProvisioningArtifactInput - a model defined in OpenAPI

        :param service_action_associations: The service_action_associations of this BatchAssociateServiceActionWithProvisioningArtifactInput.
        :param accept_language: The accept_language of this BatchAssociateServiceActionWithProvisioningArtifactInput.
        """
        self.openapi_types = {
            'service_action_associations': List,
            'accept_language': str
        }

        self.attribute_map = {
            'service_action_associations': 'ServiceActionAssociations',
            'accept_language': 'AcceptLanguage'
        }

        self._service_action_associations = service_action_associations
        self._accept_language = accept_language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchAssociateServiceActionWithProvisioningArtifactInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchAssociateServiceActionWithProvisioningArtifactInput of this BatchAssociateServiceActionWithProvisioningArtifactInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_action_associations(self):
        """Gets the service_action_associations of this BatchAssociateServiceActionWithProvisioningArtifactInput.


        :return: The service_action_associations of this BatchAssociateServiceActionWithProvisioningArtifactInput.
        :rtype: List
        """
        return self._service_action_associations

    @service_action_associations.setter
    def service_action_associations(self, service_action_associations):
        """Sets the service_action_associations of this BatchAssociateServiceActionWithProvisioningArtifactInput.


        :param service_action_associations: The service_action_associations of this BatchAssociateServiceActionWithProvisioningArtifactInput.
        :type service_action_associations: List
        """
        if service_action_associations is None:
            raise ValueError("Invalid value for `service_action_associations`, must not be `None`")

        self._service_action_associations = service_action_associations

    @property
    def accept_language(self):
        """Gets the accept_language of this BatchAssociateServiceActionWithProvisioningArtifactInput.


        :return: The accept_language of this BatchAssociateServiceActionWithProvisioningArtifactInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this BatchAssociateServiceActionWithProvisioningArtifactInput.


        :param accept_language: The accept_language of this BatchAssociateServiceActionWithProvisioningArtifactInput.
        :type accept_language: str
        """

        self._accept_language = accept_language
