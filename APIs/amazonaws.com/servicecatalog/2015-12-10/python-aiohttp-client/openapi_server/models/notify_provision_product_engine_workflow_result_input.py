# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.engine_workflow_status import EngineWorkflowStatus
from openapi_server.models.notify_provision_product_engine_workflow_result_input_resource_identifier import NotifyProvisionProductEngineWorkflowResultInputResourceIdentifier
from openapi_server import util


class NotifyProvisionProductEngineWorkflowResultInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_token: str=None, record_id: str=None, status: EngineWorkflowStatus=None, failure_reason: str=None, resource_identifier: NotifyProvisionProductEngineWorkflowResultInputResourceIdentifier=None, outputs: List=None, idempotency_token: str=None):
        """NotifyProvisionProductEngineWorkflowResultInput - a model defined in OpenAPI

        :param workflow_token: The workflow_token of this NotifyProvisionProductEngineWorkflowResultInput.
        :param record_id: The record_id of this NotifyProvisionProductEngineWorkflowResultInput.
        :param status: The status of this NotifyProvisionProductEngineWorkflowResultInput.
        :param failure_reason: The failure_reason of this NotifyProvisionProductEngineWorkflowResultInput.
        :param resource_identifier: The resource_identifier of this NotifyProvisionProductEngineWorkflowResultInput.
        :param outputs: The outputs of this NotifyProvisionProductEngineWorkflowResultInput.
        :param idempotency_token: The idempotency_token of this NotifyProvisionProductEngineWorkflowResultInput.
        """
        self.openapi_types = {
            'workflow_token': str,
            'record_id': str,
            'status': EngineWorkflowStatus,
            'failure_reason': str,
            'resource_identifier': NotifyProvisionProductEngineWorkflowResultInputResourceIdentifier,
            'outputs': List,
            'idempotency_token': str
        }

        self.attribute_map = {
            'workflow_token': 'WorkflowToken',
            'record_id': 'RecordId',
            'status': 'Status',
            'failure_reason': 'FailureReason',
            'resource_identifier': 'ResourceIdentifier',
            'outputs': 'Outputs',
            'idempotency_token': 'IdempotencyToken'
        }

        self._workflow_token = workflow_token
        self._record_id = record_id
        self._status = status
        self._failure_reason = failure_reason
        self._resource_identifier = resource_identifier
        self._outputs = outputs
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotifyProvisionProductEngineWorkflowResultInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotifyProvisionProductEngineWorkflowResultInput of this NotifyProvisionProductEngineWorkflowResultInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_token(self):
        """Gets the workflow_token of this NotifyProvisionProductEngineWorkflowResultInput.


        :return: The workflow_token of this NotifyProvisionProductEngineWorkflowResultInput.
        :rtype: str
        """
        return self._workflow_token

    @workflow_token.setter
    def workflow_token(self, workflow_token):
        """Sets the workflow_token of this NotifyProvisionProductEngineWorkflowResultInput.


        :param workflow_token: The workflow_token of this NotifyProvisionProductEngineWorkflowResultInput.
        :type workflow_token: str
        """
        if workflow_token is None:
            raise ValueError("Invalid value for `workflow_token`, must not be `None`")

        self._workflow_token = workflow_token

    @property
    def record_id(self):
        """Gets the record_id of this NotifyProvisionProductEngineWorkflowResultInput.


        :return: The record_id of this NotifyProvisionProductEngineWorkflowResultInput.
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this NotifyProvisionProductEngineWorkflowResultInput.


        :param record_id: The record_id of this NotifyProvisionProductEngineWorkflowResultInput.
        :type record_id: str
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")

        self._record_id = record_id

    @property
    def status(self):
        """Gets the status of this NotifyProvisionProductEngineWorkflowResultInput.


        :return: The status of this NotifyProvisionProductEngineWorkflowResultInput.
        :rtype: EngineWorkflowStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotifyProvisionProductEngineWorkflowResultInput.


        :param status: The status of this NotifyProvisionProductEngineWorkflowResultInput.
        :type status: EngineWorkflowStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def failure_reason(self):
        """Gets the failure_reason of this NotifyProvisionProductEngineWorkflowResultInput.


        :return: The failure_reason of this NotifyProvisionProductEngineWorkflowResultInput.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this NotifyProvisionProductEngineWorkflowResultInput.


        :param failure_reason: The failure_reason of this NotifyProvisionProductEngineWorkflowResultInput.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def resource_identifier(self):
        """Gets the resource_identifier of this NotifyProvisionProductEngineWorkflowResultInput.


        :return: The resource_identifier of this NotifyProvisionProductEngineWorkflowResultInput.
        :rtype: NotifyProvisionProductEngineWorkflowResultInputResourceIdentifier
        """
        return self._resource_identifier

    @resource_identifier.setter
    def resource_identifier(self, resource_identifier):
        """Sets the resource_identifier of this NotifyProvisionProductEngineWorkflowResultInput.


        :param resource_identifier: The resource_identifier of this NotifyProvisionProductEngineWorkflowResultInput.
        :type resource_identifier: NotifyProvisionProductEngineWorkflowResultInputResourceIdentifier
        """

        self._resource_identifier = resource_identifier

    @property
    def outputs(self):
        """Gets the outputs of this NotifyProvisionProductEngineWorkflowResultInput.


        :return: The outputs of this NotifyProvisionProductEngineWorkflowResultInput.
        :rtype: List
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this NotifyProvisionProductEngineWorkflowResultInput.


        :param outputs: The outputs of this NotifyProvisionProductEngineWorkflowResultInput.
        :type outputs: List
        """

        self._outputs = outputs

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this NotifyProvisionProductEngineWorkflowResultInput.


        :return: The idempotency_token of this NotifyProvisionProductEngineWorkflowResultInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this NotifyProvisionProductEngineWorkflowResultInput.


        :param idempotency_token: The idempotency_token of this NotifyProvisionProductEngineWorkflowResultInput.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token
