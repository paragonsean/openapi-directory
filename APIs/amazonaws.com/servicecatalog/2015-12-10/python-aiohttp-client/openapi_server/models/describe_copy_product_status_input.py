# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeCopyProductStatusInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, copy_product_token: str=None):
        """DescribeCopyProductStatusInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this DescribeCopyProductStatusInput.
        :param copy_product_token: The copy_product_token of this DescribeCopyProductStatusInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'copy_product_token': str
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'copy_product_token': 'CopyProductToken'
        }

        self._accept_language = accept_language
        self._copy_product_token = copy_product_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeCopyProductStatusInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeCopyProductStatusInput of this DescribeCopyProductStatusInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this DescribeCopyProductStatusInput.


        :return: The accept_language of this DescribeCopyProductStatusInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this DescribeCopyProductStatusInput.


        :param accept_language: The accept_language of this DescribeCopyProductStatusInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def copy_product_token(self):
        """Gets the copy_product_token of this DescribeCopyProductStatusInput.


        :return: The copy_product_token of this DescribeCopyProductStatusInput.
        :rtype: str
        """
        return self._copy_product_token

    @copy_product_token.setter
    def copy_product_token(self, copy_product_token):
        """Sets the copy_product_token of this DescribeCopyProductStatusInput.


        :param copy_product_token: The copy_product_token of this DescribeCopyProductStatusInput.
        :type copy_product_token: str
        """
        if copy_product_token is None:
            raise ValueError("Invalid value for `copy_product_token`, must not be `None`")

        self._copy_product_token = copy_product_token
