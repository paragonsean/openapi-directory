# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_constraint_output_constraint_detail import CreateConstraintOutputConstraintDetail
from openapi_server.models.status import Status
from openapi_server import util


class DescribeConstraintOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constraint_detail: CreateConstraintOutputConstraintDetail=None, constraint_parameters: str=None, status: Status=None):
        """DescribeConstraintOutput - a model defined in OpenAPI

        :param constraint_detail: The constraint_detail of this DescribeConstraintOutput.
        :param constraint_parameters: The constraint_parameters of this DescribeConstraintOutput.
        :param status: The status of this DescribeConstraintOutput.
        """
        self.openapi_types = {
            'constraint_detail': CreateConstraintOutputConstraintDetail,
            'constraint_parameters': str,
            'status': Status
        }

        self.attribute_map = {
            'constraint_detail': 'ConstraintDetail',
            'constraint_parameters': 'ConstraintParameters',
            'status': 'Status'
        }

        self._constraint_detail = constraint_detail
        self._constraint_parameters = constraint_parameters
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeConstraintOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeConstraintOutput of this DescribeConstraintOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraint_detail(self):
        """Gets the constraint_detail of this DescribeConstraintOutput.


        :return: The constraint_detail of this DescribeConstraintOutput.
        :rtype: CreateConstraintOutputConstraintDetail
        """
        return self._constraint_detail

    @constraint_detail.setter
    def constraint_detail(self, constraint_detail):
        """Sets the constraint_detail of this DescribeConstraintOutput.


        :param constraint_detail: The constraint_detail of this DescribeConstraintOutput.
        :type constraint_detail: CreateConstraintOutputConstraintDetail
        """

        self._constraint_detail = constraint_detail

    @property
    def constraint_parameters(self):
        """Gets the constraint_parameters of this DescribeConstraintOutput.


        :return: The constraint_parameters of this DescribeConstraintOutput.
        :rtype: str
        """
        return self._constraint_parameters

    @constraint_parameters.setter
    def constraint_parameters(self, constraint_parameters):
        """Sets the constraint_parameters of this DescribeConstraintOutput.


        :param constraint_parameters: The constraint_parameters of this DescribeConstraintOutput.
        :type constraint_parameters: str
        """

        self._constraint_parameters = constraint_parameters

    @property
    def status(self):
        """Gets the status of this DescribeConstraintOutput.


        :return: The status of this DescribeConstraintOutput.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeConstraintOutput.


        :param status: The status of this DescribeConstraintOutput.
        :type status: Status
        """

        self._status = status
