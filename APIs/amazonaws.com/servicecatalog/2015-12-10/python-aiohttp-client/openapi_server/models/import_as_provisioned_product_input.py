# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportAsProvisionedProductInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, product_id: str=None, provisioning_artifact_id: str=None, provisioned_product_name: str=None, physical_id: str=None, idempotency_token: str=None):
        """ImportAsProvisionedProductInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this ImportAsProvisionedProductInput.
        :param product_id: The product_id of this ImportAsProvisionedProductInput.
        :param provisioning_artifact_id: The provisioning_artifact_id of this ImportAsProvisionedProductInput.
        :param provisioned_product_name: The provisioned_product_name of this ImportAsProvisionedProductInput.
        :param physical_id: The physical_id of this ImportAsProvisionedProductInput.
        :param idempotency_token: The idempotency_token of this ImportAsProvisionedProductInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'product_id': str,
            'provisioning_artifact_id': str,
            'provisioned_product_name': str,
            'physical_id': str,
            'idempotency_token': str
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'product_id': 'ProductId',
            'provisioning_artifact_id': 'ProvisioningArtifactId',
            'provisioned_product_name': 'ProvisionedProductName',
            'physical_id': 'PhysicalId',
            'idempotency_token': 'IdempotencyToken'
        }

        self._accept_language = accept_language
        self._product_id = product_id
        self._provisioning_artifact_id = provisioning_artifact_id
        self._provisioned_product_name = provisioned_product_name
        self._physical_id = physical_id
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportAsProvisionedProductInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportAsProvisionedProductInput of this ImportAsProvisionedProductInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this ImportAsProvisionedProductInput.


        :return: The accept_language of this ImportAsProvisionedProductInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this ImportAsProvisionedProductInput.


        :param accept_language: The accept_language of this ImportAsProvisionedProductInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def product_id(self):
        """Gets the product_id of this ImportAsProvisionedProductInput.


        :return: The product_id of this ImportAsProvisionedProductInput.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ImportAsProvisionedProductInput.


        :param product_id: The product_id of this ImportAsProvisionedProductInput.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def provisioning_artifact_id(self):
        """Gets the provisioning_artifact_id of this ImportAsProvisionedProductInput.


        :return: The provisioning_artifact_id of this ImportAsProvisionedProductInput.
        :rtype: str
        """
        return self._provisioning_artifact_id

    @provisioning_artifact_id.setter
    def provisioning_artifact_id(self, provisioning_artifact_id):
        """Sets the provisioning_artifact_id of this ImportAsProvisionedProductInput.


        :param provisioning_artifact_id: The provisioning_artifact_id of this ImportAsProvisionedProductInput.
        :type provisioning_artifact_id: str
        """
        if provisioning_artifact_id is None:
            raise ValueError("Invalid value for `provisioning_artifact_id`, must not be `None`")

        self._provisioning_artifact_id = provisioning_artifact_id

    @property
    def provisioned_product_name(self):
        """Gets the provisioned_product_name of this ImportAsProvisionedProductInput.


        :return: The provisioned_product_name of this ImportAsProvisionedProductInput.
        :rtype: str
        """
        return self._provisioned_product_name

    @provisioned_product_name.setter
    def provisioned_product_name(self, provisioned_product_name):
        """Sets the provisioned_product_name of this ImportAsProvisionedProductInput.


        :param provisioned_product_name: The provisioned_product_name of this ImportAsProvisionedProductInput.
        :type provisioned_product_name: str
        """
        if provisioned_product_name is None:
            raise ValueError("Invalid value for `provisioned_product_name`, must not be `None`")

        self._provisioned_product_name = provisioned_product_name

    @property
    def physical_id(self):
        """Gets the physical_id of this ImportAsProvisionedProductInput.


        :return: The physical_id of this ImportAsProvisionedProductInput.
        :rtype: str
        """
        return self._physical_id

    @physical_id.setter
    def physical_id(self, physical_id):
        """Sets the physical_id of this ImportAsProvisionedProductInput.


        :param physical_id: The physical_id of this ImportAsProvisionedProductInput.
        :type physical_id: str
        """
        if physical_id is None:
            raise ValueError("Invalid value for `physical_id`, must not be `None`")

        self._physical_id = physical_id

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this ImportAsProvisionedProductInput.


        :return: The idempotency_token of this ImportAsProvisionedProductInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this ImportAsProvisionedProductInput.


        :param idempotency_token: The idempotency_token of this ImportAsProvisionedProductInput.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token
