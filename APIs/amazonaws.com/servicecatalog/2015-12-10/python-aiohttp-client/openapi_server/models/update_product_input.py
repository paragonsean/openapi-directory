# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_product_input_source_connection import UpdateProductInputSourceConnection
from openapi_server import util


class UpdateProductInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, id: str=None, name: str=None, owner: str=None, description: str=None, distributor: str=None, support_description: str=None, support_email: str=None, support_url: str=None, add_tags: List=None, remove_tags: List=None, source_connection: UpdateProductInputSourceConnection=None):
        """UpdateProductInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this UpdateProductInput.
        :param id: The id of this UpdateProductInput.
        :param name: The name of this UpdateProductInput.
        :param owner: The owner of this UpdateProductInput.
        :param description: The description of this UpdateProductInput.
        :param distributor: The distributor of this UpdateProductInput.
        :param support_description: The support_description of this UpdateProductInput.
        :param support_email: The support_email of this UpdateProductInput.
        :param support_url: The support_url of this UpdateProductInput.
        :param add_tags: The add_tags of this UpdateProductInput.
        :param remove_tags: The remove_tags of this UpdateProductInput.
        :param source_connection: The source_connection of this UpdateProductInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'id': str,
            'name': str,
            'owner': str,
            'description': str,
            'distributor': str,
            'support_description': str,
            'support_email': str,
            'support_url': str,
            'add_tags': List,
            'remove_tags': List,
            'source_connection': UpdateProductInputSourceConnection
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'id': 'Id',
            'name': 'Name',
            'owner': 'Owner',
            'description': 'Description',
            'distributor': 'Distributor',
            'support_description': 'SupportDescription',
            'support_email': 'SupportEmail',
            'support_url': 'SupportUrl',
            'add_tags': 'AddTags',
            'remove_tags': 'RemoveTags',
            'source_connection': 'SourceConnection'
        }

        self._accept_language = accept_language
        self._id = id
        self._name = name
        self._owner = owner
        self._description = description
        self._distributor = distributor
        self._support_description = support_description
        self._support_email = support_email
        self._support_url = support_url
        self._add_tags = add_tags
        self._remove_tags = remove_tags
        self._source_connection = source_connection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateProductInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateProductInput of this UpdateProductInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this UpdateProductInput.


        :return: The accept_language of this UpdateProductInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this UpdateProductInput.


        :param accept_language: The accept_language of this UpdateProductInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def id(self):
        """Gets the id of this UpdateProductInput.


        :return: The id of this UpdateProductInput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateProductInput.


        :param id: The id of this UpdateProductInput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this UpdateProductInput.


        :return: The name of this UpdateProductInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateProductInput.


        :param name: The name of this UpdateProductInput.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this UpdateProductInput.


        :return: The owner of this UpdateProductInput.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this UpdateProductInput.


        :param owner: The owner of this UpdateProductInput.
        :type owner: str
        """

        self._owner = owner

    @property
    def description(self):
        """Gets the description of this UpdateProductInput.


        :return: The description of this UpdateProductInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProductInput.


        :param description: The description of this UpdateProductInput.
        :type description: str
        """

        self._description = description

    @property
    def distributor(self):
        """Gets the distributor of this UpdateProductInput.


        :return: The distributor of this UpdateProductInput.
        :rtype: str
        """
        return self._distributor

    @distributor.setter
    def distributor(self, distributor):
        """Sets the distributor of this UpdateProductInput.


        :param distributor: The distributor of this UpdateProductInput.
        :type distributor: str
        """

        self._distributor = distributor

    @property
    def support_description(self):
        """Gets the support_description of this UpdateProductInput.


        :return: The support_description of this UpdateProductInput.
        :rtype: str
        """
        return self._support_description

    @support_description.setter
    def support_description(self, support_description):
        """Sets the support_description of this UpdateProductInput.


        :param support_description: The support_description of this UpdateProductInput.
        :type support_description: str
        """

        self._support_description = support_description

    @property
    def support_email(self):
        """Gets the support_email of this UpdateProductInput.


        :return: The support_email of this UpdateProductInput.
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this UpdateProductInput.


        :param support_email: The support_email of this UpdateProductInput.
        :type support_email: str
        """

        self._support_email = support_email

    @property
    def support_url(self):
        """Gets the support_url of this UpdateProductInput.


        :return: The support_url of this UpdateProductInput.
        :rtype: str
        """
        return self._support_url

    @support_url.setter
    def support_url(self, support_url):
        """Sets the support_url of this UpdateProductInput.


        :param support_url: The support_url of this UpdateProductInput.
        :type support_url: str
        """

        self._support_url = support_url

    @property
    def add_tags(self):
        """Gets the add_tags of this UpdateProductInput.


        :return: The add_tags of this UpdateProductInput.
        :rtype: List
        """
        return self._add_tags

    @add_tags.setter
    def add_tags(self, add_tags):
        """Sets the add_tags of this UpdateProductInput.


        :param add_tags: The add_tags of this UpdateProductInput.
        :type add_tags: List
        """

        self._add_tags = add_tags

    @property
    def remove_tags(self):
        """Gets the remove_tags of this UpdateProductInput.


        :return: The remove_tags of this UpdateProductInput.
        :rtype: List
        """
        return self._remove_tags

    @remove_tags.setter
    def remove_tags(self, remove_tags):
        """Sets the remove_tags of this UpdateProductInput.


        :param remove_tags: The remove_tags of this UpdateProductInput.
        :type remove_tags: List
        """

        self._remove_tags = remove_tags

    @property
    def source_connection(self):
        """Gets the source_connection of this UpdateProductInput.


        :return: The source_connection of this UpdateProductInput.
        :rtype: UpdateProductInputSourceConnection
        """
        return self._source_connection

    @source_connection.setter
    def source_connection(self, source_connection):
        """Sets the source_connection of this UpdateProductInput.


        :param source_connection: The source_connection of this UpdateProductInput.
        :type source_connection: UpdateProductInputSourceConnection
        """

        self._source_connection = source_connection
