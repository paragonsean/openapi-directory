# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateConstraintOutputConstraintDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constraint_id: str=None, type: str=None, description: str=None, owner: str=None, product_id: str=None, portfolio_id: str=None):
        """CreateConstraintOutputConstraintDetail - a model defined in OpenAPI

        :param constraint_id: The constraint_id of this CreateConstraintOutputConstraintDetail.
        :param type: The type of this CreateConstraintOutputConstraintDetail.
        :param description: The description of this CreateConstraintOutputConstraintDetail.
        :param owner: The owner of this CreateConstraintOutputConstraintDetail.
        :param product_id: The product_id of this CreateConstraintOutputConstraintDetail.
        :param portfolio_id: The portfolio_id of this CreateConstraintOutputConstraintDetail.
        """
        self.openapi_types = {
            'constraint_id': str,
            'type': str,
            'description': str,
            'owner': str,
            'product_id': str,
            'portfolio_id': str
        }

        self.attribute_map = {
            'constraint_id': 'ConstraintId',
            'type': 'Type',
            'description': 'Description',
            'owner': 'Owner',
            'product_id': 'ProductId',
            'portfolio_id': 'PortfolioId'
        }

        self._constraint_id = constraint_id
        self._type = type
        self._description = description
        self._owner = owner
        self._product_id = product_id
        self._portfolio_id = portfolio_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConstraintOutputConstraintDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConstraintOutput_ConstraintDetail of this CreateConstraintOutputConstraintDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraint_id(self):
        """Gets the constraint_id of this CreateConstraintOutputConstraintDetail.


        :return: The constraint_id of this CreateConstraintOutputConstraintDetail.
        :rtype: str
        """
        return self._constraint_id

    @constraint_id.setter
    def constraint_id(self, constraint_id):
        """Sets the constraint_id of this CreateConstraintOutputConstraintDetail.


        :param constraint_id: The constraint_id of this CreateConstraintOutputConstraintDetail.
        :type constraint_id: str
        """

        self._constraint_id = constraint_id

    @property
    def type(self):
        """Gets the type of this CreateConstraintOutputConstraintDetail.


        :return: The type of this CreateConstraintOutputConstraintDetail.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateConstraintOutputConstraintDetail.


        :param type: The type of this CreateConstraintOutputConstraintDetail.
        :type type: str
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this CreateConstraintOutputConstraintDetail.


        :return: The description of this CreateConstraintOutputConstraintDetail.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateConstraintOutputConstraintDetail.


        :param description: The description of this CreateConstraintOutputConstraintDetail.
        :type description: str
        """

        self._description = description

    @property
    def owner(self):
        """Gets the owner of this CreateConstraintOutputConstraintDetail.


        :return: The owner of this CreateConstraintOutputConstraintDetail.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CreateConstraintOutputConstraintDetail.


        :param owner: The owner of this CreateConstraintOutputConstraintDetail.
        :type owner: str
        """

        self._owner = owner

    @property
    def product_id(self):
        """Gets the product_id of this CreateConstraintOutputConstraintDetail.


        :return: The product_id of this CreateConstraintOutputConstraintDetail.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this CreateConstraintOutputConstraintDetail.


        :param product_id: The product_id of this CreateConstraintOutputConstraintDetail.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this CreateConstraintOutputConstraintDetail.


        :return: The portfolio_id of this CreateConstraintOutputConstraintDetail.
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this CreateConstraintOutputConstraintDetail.


        :param portfolio_id: The portfolio_id of this CreateConstraintOutputConstraintDetail.
        :type portfolio_id: str
        """

        self._portfolio_id = portfolio_id
