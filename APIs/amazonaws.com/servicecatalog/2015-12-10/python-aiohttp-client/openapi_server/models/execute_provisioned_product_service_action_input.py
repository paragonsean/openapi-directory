# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecuteProvisionedProductServiceActionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioned_product_id: str=None, service_action_id: str=None, execute_token: str=None, accept_language: str=None, parameters: Dict=None):
        """ExecuteProvisionedProductServiceActionInput - a model defined in OpenAPI

        :param provisioned_product_id: The provisioned_product_id of this ExecuteProvisionedProductServiceActionInput.
        :param service_action_id: The service_action_id of this ExecuteProvisionedProductServiceActionInput.
        :param execute_token: The execute_token of this ExecuteProvisionedProductServiceActionInput.
        :param accept_language: The accept_language of this ExecuteProvisionedProductServiceActionInput.
        :param parameters: The parameters of this ExecuteProvisionedProductServiceActionInput.
        """
        self.openapi_types = {
            'provisioned_product_id': str,
            'service_action_id': str,
            'execute_token': str,
            'accept_language': str,
            'parameters': Dict
        }

        self.attribute_map = {
            'provisioned_product_id': 'ProvisionedProductId',
            'service_action_id': 'ServiceActionId',
            'execute_token': 'ExecuteToken',
            'accept_language': 'AcceptLanguage',
            'parameters': 'Parameters'
        }

        self._provisioned_product_id = provisioned_product_id
        self._service_action_id = service_action_id
        self._execute_token = execute_token
        self._accept_language = accept_language
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteProvisionedProductServiceActionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteProvisionedProductServiceActionInput of this ExecuteProvisionedProductServiceActionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioned_product_id(self):
        """Gets the provisioned_product_id of this ExecuteProvisionedProductServiceActionInput.


        :return: The provisioned_product_id of this ExecuteProvisionedProductServiceActionInput.
        :rtype: str
        """
        return self._provisioned_product_id

    @provisioned_product_id.setter
    def provisioned_product_id(self, provisioned_product_id):
        """Sets the provisioned_product_id of this ExecuteProvisionedProductServiceActionInput.


        :param provisioned_product_id: The provisioned_product_id of this ExecuteProvisionedProductServiceActionInput.
        :type provisioned_product_id: str
        """
        if provisioned_product_id is None:
            raise ValueError("Invalid value for `provisioned_product_id`, must not be `None`")

        self._provisioned_product_id = provisioned_product_id

    @property
    def service_action_id(self):
        """Gets the service_action_id of this ExecuteProvisionedProductServiceActionInput.


        :return: The service_action_id of this ExecuteProvisionedProductServiceActionInput.
        :rtype: str
        """
        return self._service_action_id

    @service_action_id.setter
    def service_action_id(self, service_action_id):
        """Sets the service_action_id of this ExecuteProvisionedProductServiceActionInput.


        :param service_action_id: The service_action_id of this ExecuteProvisionedProductServiceActionInput.
        :type service_action_id: str
        """
        if service_action_id is None:
            raise ValueError("Invalid value for `service_action_id`, must not be `None`")

        self._service_action_id = service_action_id

    @property
    def execute_token(self):
        """Gets the execute_token of this ExecuteProvisionedProductServiceActionInput.


        :return: The execute_token of this ExecuteProvisionedProductServiceActionInput.
        :rtype: str
        """
        return self._execute_token

    @execute_token.setter
    def execute_token(self, execute_token):
        """Sets the execute_token of this ExecuteProvisionedProductServiceActionInput.


        :param execute_token: The execute_token of this ExecuteProvisionedProductServiceActionInput.
        :type execute_token: str
        """
        if execute_token is None:
            raise ValueError("Invalid value for `execute_token`, must not be `None`")

        self._execute_token = execute_token

    @property
    def accept_language(self):
        """Gets the accept_language of this ExecuteProvisionedProductServiceActionInput.


        :return: The accept_language of this ExecuteProvisionedProductServiceActionInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this ExecuteProvisionedProductServiceActionInput.


        :param accept_language: The accept_language of this ExecuteProvisionedProductServiceActionInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def parameters(self):
        """Gets the parameters of this ExecuteProvisionedProductServiceActionInput.


        :return: The parameters of this ExecuteProvisionedProductServiceActionInput.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ExecuteProvisionedProductServiceActionInput.


        :param parameters: The parameters of this ExecuteProvisionedProductServiceActionInput.
        :type parameters: Dict
        """

        self._parameters = parameters
