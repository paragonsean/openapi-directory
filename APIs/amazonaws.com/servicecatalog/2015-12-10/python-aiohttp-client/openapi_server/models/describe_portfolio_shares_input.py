# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_portfolio_share_type import DescribePortfolioShareType
from openapi_server import util


class DescribePortfolioSharesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, portfolio_id: str=None, type: DescribePortfolioShareType=None, page_token: str=None, page_size: int=None):
        """DescribePortfolioSharesInput - a model defined in OpenAPI

        :param portfolio_id: The portfolio_id of this DescribePortfolioSharesInput.
        :param type: The type of this DescribePortfolioSharesInput.
        :param page_token: The page_token of this DescribePortfolioSharesInput.
        :param page_size: The page_size of this DescribePortfolioSharesInput.
        """
        self.openapi_types = {
            'portfolio_id': str,
            'type': DescribePortfolioShareType,
            'page_token': str,
            'page_size': int
        }

        self.attribute_map = {
            'portfolio_id': 'PortfolioId',
            'type': 'Type',
            'page_token': 'PageToken',
            'page_size': 'PageSize'
        }

        self._portfolio_id = portfolio_id
        self._type = type
        self._page_token = page_token
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribePortfolioSharesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribePortfolioSharesInput of this DescribePortfolioSharesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this DescribePortfolioSharesInput.


        :return: The portfolio_id of this DescribePortfolioSharesInput.
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this DescribePortfolioSharesInput.


        :param portfolio_id: The portfolio_id of this DescribePortfolioSharesInput.
        :type portfolio_id: str
        """
        if portfolio_id is None:
            raise ValueError("Invalid value for `portfolio_id`, must not be `None`")

        self._portfolio_id = portfolio_id

    @property
    def type(self):
        """Gets the type of this DescribePortfolioSharesInput.


        :return: The type of this DescribePortfolioSharesInput.
        :rtype: DescribePortfolioShareType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DescribePortfolioSharesInput.


        :param type: The type of this DescribePortfolioSharesInput.
        :type type: DescribePortfolioShareType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def page_token(self):
        """Gets the page_token of this DescribePortfolioSharesInput.


        :return: The page_token of this DescribePortfolioSharesInput.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this DescribePortfolioSharesInput.


        :param page_token: The page_token of this DescribePortfolioSharesInput.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def page_size(self):
        """Gets the page_size of this DescribePortfolioSharesInput.


        :return: The page_size of this DescribePortfolioSharesInput.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DescribePortfolioSharesInput.


        :param page_size: The page_size of this DescribePortfolioSharesInput.
        :type page_size: int
        """

        self._page_size = page_size
