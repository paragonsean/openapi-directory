# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stack_instance_status import StackInstanceStatus
from openapi_server import util


class StackInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, region: str=None, stack_instance_status: StackInstanceStatus=None):
        """StackInstance - a model defined in OpenAPI

        :param account: The account of this StackInstance.
        :param region: The region of this StackInstance.
        :param stack_instance_status: The stack_instance_status of this StackInstance.
        """
        self.openapi_types = {
            'account': str,
            'region': str,
            'stack_instance_status': StackInstanceStatus
        }

        self.attribute_map = {
            'account': 'Account',
            'region': 'Region',
            'stack_instance_status': 'StackInstanceStatus'
        }

        self._account = account
        self._region = region
        self._stack_instance_status = stack_instance_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StackInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StackInstance of this StackInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this StackInstance.


        :return: The account of this StackInstance.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this StackInstance.


        :param account: The account of this StackInstance.
        :type account: str
        """

        self._account = account

    @property
    def region(self):
        """Gets the region of this StackInstance.


        :return: The region of this StackInstance.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this StackInstance.


        :param region: The region of this StackInstance.
        :type region: str
        """

        self._region = region

    @property
    def stack_instance_status(self):
        """Gets the stack_instance_status of this StackInstance.


        :return: The stack_instance_status of this StackInstance.
        :rtype: StackInstanceStatus
        """
        return self._stack_instance_status

    @stack_instance_status.setter
    def stack_instance_status(self, stack_instance_status):
        """Sets the stack_instance_status of this StackInstance.


        :param stack_instance_status: The stack_instance_status of this StackInstance.
        :type stack_instance_status: StackInstanceStatus
        """

        self._stack_instance_status = stack_instance_status
