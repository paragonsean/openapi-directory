# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_portfolio_share_type import DescribePortfolioShareType
from openapi_server import util


class PortfolioShareDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal_id: str=None, type: DescribePortfolioShareType=None, accepted: bool=None, share_tag_options: bool=None, share_principals: bool=None):
        """PortfolioShareDetail - a model defined in OpenAPI

        :param principal_id: The principal_id of this PortfolioShareDetail.
        :param type: The type of this PortfolioShareDetail.
        :param accepted: The accepted of this PortfolioShareDetail.
        :param share_tag_options: The share_tag_options of this PortfolioShareDetail.
        :param share_principals: The share_principals of this PortfolioShareDetail.
        """
        self.openapi_types = {
            'principal_id': str,
            'type': DescribePortfolioShareType,
            'accepted': bool,
            'share_tag_options': bool,
            'share_principals': bool
        }

        self.attribute_map = {
            'principal_id': 'PrincipalId',
            'type': 'Type',
            'accepted': 'Accepted',
            'share_tag_options': 'ShareTagOptions',
            'share_principals': 'SharePrincipals'
        }

        self._principal_id = principal_id
        self._type = type
        self._accepted = accepted
        self._share_tag_options = share_tag_options
        self._share_principals = share_principals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioShareDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortfolioShareDetail of this PortfolioShareDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal_id(self):
        """Gets the principal_id of this PortfolioShareDetail.


        :return: The principal_id of this PortfolioShareDetail.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this PortfolioShareDetail.


        :param principal_id: The principal_id of this PortfolioShareDetail.
        :type principal_id: str
        """

        self._principal_id = principal_id

    @property
    def type(self):
        """Gets the type of this PortfolioShareDetail.


        :return: The type of this PortfolioShareDetail.
        :rtype: DescribePortfolioShareType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PortfolioShareDetail.


        :param type: The type of this PortfolioShareDetail.
        :type type: DescribePortfolioShareType
        """

        self._type = type

    @property
    def accepted(self):
        """Gets the accepted of this PortfolioShareDetail.


        :return: The accepted of this PortfolioShareDetail.
        :rtype: bool
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted):
        """Sets the accepted of this PortfolioShareDetail.


        :param accepted: The accepted of this PortfolioShareDetail.
        :type accepted: bool
        """

        self._accepted = accepted

    @property
    def share_tag_options(self):
        """Gets the share_tag_options of this PortfolioShareDetail.


        :return: The share_tag_options of this PortfolioShareDetail.
        :rtype: bool
        """
        return self._share_tag_options

    @share_tag_options.setter
    def share_tag_options(self, share_tag_options):
        """Sets the share_tag_options of this PortfolioShareDetail.


        :param share_tag_options: The share_tag_options of this PortfolioShareDetail.
        :type share_tag_options: bool
        """

        self._share_tag_options = share_tag_options

    @property
    def share_principals(self):
        """Gets the share_principals of this PortfolioShareDetail.


        :return: The share_principals of this PortfolioShareDetail.
        :rtype: bool
        """
        return self._share_principals

    @share_principals.setter
    def share_principals(self, share_principals):
        """Sets the share_principals of this PortfolioShareDetail.


        :param share_principals: The share_principals of this PortfolioShareDetail.
        :type share_principals: bool
        """

        self._share_principals = share_principals
