# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeProvisionedProductPlanInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, plan_id: str=None, page_size: int=None, page_token: str=None):
        """DescribeProvisionedProductPlanInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this DescribeProvisionedProductPlanInput.
        :param plan_id: The plan_id of this DescribeProvisionedProductPlanInput.
        :param page_size: The page_size of this DescribeProvisionedProductPlanInput.
        :param page_token: The page_token of this DescribeProvisionedProductPlanInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'plan_id': str,
            'page_size': int,
            'page_token': str
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'plan_id': 'PlanId',
            'page_size': 'PageSize',
            'page_token': 'PageToken'
        }

        self._accept_language = accept_language
        self._plan_id = plan_id
        self._page_size = page_size
        self._page_token = page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeProvisionedProductPlanInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeProvisionedProductPlanInput of this DescribeProvisionedProductPlanInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this DescribeProvisionedProductPlanInput.


        :return: The accept_language of this DescribeProvisionedProductPlanInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this DescribeProvisionedProductPlanInput.


        :param accept_language: The accept_language of this DescribeProvisionedProductPlanInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def plan_id(self):
        """Gets the plan_id of this DescribeProvisionedProductPlanInput.


        :return: The plan_id of this DescribeProvisionedProductPlanInput.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this DescribeProvisionedProductPlanInput.


        :param plan_id: The plan_id of this DescribeProvisionedProductPlanInput.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")

        self._plan_id = plan_id

    @property
    def page_size(self):
        """Gets the page_size of this DescribeProvisionedProductPlanInput.


        :return: The page_size of this DescribeProvisionedProductPlanInput.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DescribeProvisionedProductPlanInput.


        :param page_size: The page_size of this DescribeProvisionedProductPlanInput.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this DescribeProvisionedProductPlanInput.


        :return: The page_token of this DescribeProvisionedProductPlanInput.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this DescribeProvisionedProductPlanInput.


        :param page_token: The page_token of this DescribeProvisionedProductPlanInput.
        :type page_token: str
        """

        self._page_token = page_token
