# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateConstraintInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, portfolio_id: str=None, product_id: str=None, parameters: str=None, type: str=None, description: str=None, idempotency_token: str=None):
        """CreateConstraintInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this CreateConstraintInput.
        :param portfolio_id: The portfolio_id of this CreateConstraintInput.
        :param product_id: The product_id of this CreateConstraintInput.
        :param parameters: The parameters of this CreateConstraintInput.
        :param type: The type of this CreateConstraintInput.
        :param description: The description of this CreateConstraintInput.
        :param idempotency_token: The idempotency_token of this CreateConstraintInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'portfolio_id': str,
            'product_id': str,
            'parameters': str,
            'type': str,
            'description': str,
            'idempotency_token': str
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'portfolio_id': 'PortfolioId',
            'product_id': 'ProductId',
            'parameters': 'Parameters',
            'type': 'Type',
            'description': 'Description',
            'idempotency_token': 'IdempotencyToken'
        }

        self._accept_language = accept_language
        self._portfolio_id = portfolio_id
        self._product_id = product_id
        self._parameters = parameters
        self._type = type
        self._description = description
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConstraintInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConstraintInput of this CreateConstraintInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this CreateConstraintInput.


        :return: The accept_language of this CreateConstraintInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this CreateConstraintInput.


        :param accept_language: The accept_language of this CreateConstraintInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this CreateConstraintInput.


        :return: The portfolio_id of this CreateConstraintInput.
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this CreateConstraintInput.


        :param portfolio_id: The portfolio_id of this CreateConstraintInput.
        :type portfolio_id: str
        """
        if portfolio_id is None:
            raise ValueError("Invalid value for `portfolio_id`, must not be `None`")

        self._portfolio_id = portfolio_id

    @property
    def product_id(self):
        """Gets the product_id of this CreateConstraintInput.


        :return: The product_id of this CreateConstraintInput.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this CreateConstraintInput.


        :param product_id: The product_id of this CreateConstraintInput.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def parameters(self):
        """Gets the parameters of this CreateConstraintInput.


        :return: The parameters of this CreateConstraintInput.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CreateConstraintInput.


        :param parameters: The parameters of this CreateConstraintInput.
        :type parameters: str
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this CreateConstraintInput.


        :return: The type of this CreateConstraintInput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateConstraintInput.


        :param type: The type of this CreateConstraintInput.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def description(self):
        """Gets the description of this CreateConstraintInput.


        :return: The description of this CreateConstraintInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateConstraintInput.


        :param description: The description of this CreateConstraintInput.
        :type description: str
        """

        self._description = description

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateConstraintInput.


        :return: The idempotency_token of this CreateConstraintInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateConstraintInput.


        :param idempotency_token: The idempotency_token of this CreateConstraintInput.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token
