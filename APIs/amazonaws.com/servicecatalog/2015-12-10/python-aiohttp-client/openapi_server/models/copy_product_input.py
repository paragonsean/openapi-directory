# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CopyProductInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, source_product_arn: str=None, target_product_id: str=None, target_product_name: str=None, source_provisioning_artifact_identifiers: List=None, copy_options: List=None, idempotency_token: str=None):
        """CopyProductInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this CopyProductInput.
        :param source_product_arn: The source_product_arn of this CopyProductInput.
        :param target_product_id: The target_product_id of this CopyProductInput.
        :param target_product_name: The target_product_name of this CopyProductInput.
        :param source_provisioning_artifact_identifiers: The source_provisioning_artifact_identifiers of this CopyProductInput.
        :param copy_options: The copy_options of this CopyProductInput.
        :param idempotency_token: The idempotency_token of this CopyProductInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'source_product_arn': str,
            'target_product_id': str,
            'target_product_name': str,
            'source_provisioning_artifact_identifiers': List,
            'copy_options': List,
            'idempotency_token': str
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'source_product_arn': 'SourceProductArn',
            'target_product_id': 'TargetProductId',
            'target_product_name': 'TargetProductName',
            'source_provisioning_artifact_identifiers': 'SourceProvisioningArtifactIdentifiers',
            'copy_options': 'CopyOptions',
            'idempotency_token': 'IdempotencyToken'
        }

        self._accept_language = accept_language
        self._source_product_arn = source_product_arn
        self._target_product_id = target_product_id
        self._target_product_name = target_product_name
        self._source_provisioning_artifact_identifiers = source_provisioning_artifact_identifiers
        self._copy_options = copy_options
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyProductInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyProductInput of this CopyProductInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this CopyProductInput.


        :return: The accept_language of this CopyProductInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this CopyProductInput.


        :param accept_language: The accept_language of this CopyProductInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def source_product_arn(self):
        """Gets the source_product_arn of this CopyProductInput.


        :return: The source_product_arn of this CopyProductInput.
        :rtype: str
        """
        return self._source_product_arn

    @source_product_arn.setter
    def source_product_arn(self, source_product_arn):
        """Sets the source_product_arn of this CopyProductInput.


        :param source_product_arn: The source_product_arn of this CopyProductInput.
        :type source_product_arn: str
        """
        if source_product_arn is None:
            raise ValueError("Invalid value for `source_product_arn`, must not be `None`")

        self._source_product_arn = source_product_arn

    @property
    def target_product_id(self):
        """Gets the target_product_id of this CopyProductInput.


        :return: The target_product_id of this CopyProductInput.
        :rtype: str
        """
        return self._target_product_id

    @target_product_id.setter
    def target_product_id(self, target_product_id):
        """Sets the target_product_id of this CopyProductInput.


        :param target_product_id: The target_product_id of this CopyProductInput.
        :type target_product_id: str
        """

        self._target_product_id = target_product_id

    @property
    def target_product_name(self):
        """Gets the target_product_name of this CopyProductInput.


        :return: The target_product_name of this CopyProductInput.
        :rtype: str
        """
        return self._target_product_name

    @target_product_name.setter
    def target_product_name(self, target_product_name):
        """Sets the target_product_name of this CopyProductInput.


        :param target_product_name: The target_product_name of this CopyProductInput.
        :type target_product_name: str
        """

        self._target_product_name = target_product_name

    @property
    def source_provisioning_artifact_identifiers(self):
        """Gets the source_provisioning_artifact_identifiers of this CopyProductInput.


        :return: The source_provisioning_artifact_identifiers of this CopyProductInput.
        :rtype: List
        """
        return self._source_provisioning_artifact_identifiers

    @source_provisioning_artifact_identifiers.setter
    def source_provisioning_artifact_identifiers(self, source_provisioning_artifact_identifiers):
        """Sets the source_provisioning_artifact_identifiers of this CopyProductInput.


        :param source_provisioning_artifact_identifiers: The source_provisioning_artifact_identifiers of this CopyProductInput.
        :type source_provisioning_artifact_identifiers: List
        """

        self._source_provisioning_artifact_identifiers = source_provisioning_artifact_identifiers

    @property
    def copy_options(self):
        """Gets the copy_options of this CopyProductInput.


        :return: The copy_options of this CopyProductInput.
        :rtype: List
        """
        return self._copy_options

    @copy_options.setter
    def copy_options(self, copy_options):
        """Sets the copy_options of this CopyProductInput.


        :param copy_options: The copy_options of this CopyProductInput.
        :type copy_options: List
        """

        self._copy_options = copy_options

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CopyProductInput.


        :return: The idempotency_token of this CopyProductInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CopyProductInput.


        :param idempotency_token: The idempotency_token of this CopyProductInput.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token
