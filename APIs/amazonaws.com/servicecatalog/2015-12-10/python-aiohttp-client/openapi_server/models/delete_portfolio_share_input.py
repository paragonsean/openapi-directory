# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_portfolio_share_input_organization_node import DeletePortfolioShareInputOrganizationNode
from openapi_server import util


class DeletePortfolioShareInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, portfolio_id: str=None, account_id: str=None, organization_node: DeletePortfolioShareInputOrganizationNode=None):
        """DeletePortfolioShareInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this DeletePortfolioShareInput.
        :param portfolio_id: The portfolio_id of this DeletePortfolioShareInput.
        :param account_id: The account_id of this DeletePortfolioShareInput.
        :param organization_node: The organization_node of this DeletePortfolioShareInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'portfolio_id': str,
            'account_id': str,
            'organization_node': DeletePortfolioShareInputOrganizationNode
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'portfolio_id': 'PortfolioId',
            'account_id': 'AccountId',
            'organization_node': 'OrganizationNode'
        }

        self._accept_language = accept_language
        self._portfolio_id = portfolio_id
        self._account_id = account_id
        self._organization_node = organization_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletePortfolioShareInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletePortfolioShareInput of this DeletePortfolioShareInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this DeletePortfolioShareInput.


        :return: The accept_language of this DeletePortfolioShareInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this DeletePortfolioShareInput.


        :param accept_language: The accept_language of this DeletePortfolioShareInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this DeletePortfolioShareInput.


        :return: The portfolio_id of this DeletePortfolioShareInput.
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this DeletePortfolioShareInput.


        :param portfolio_id: The portfolio_id of this DeletePortfolioShareInput.
        :type portfolio_id: str
        """
        if portfolio_id is None:
            raise ValueError("Invalid value for `portfolio_id`, must not be `None`")

        self._portfolio_id = portfolio_id

    @property
    def account_id(self):
        """Gets the account_id of this DeletePortfolioShareInput.


        :return: The account_id of this DeletePortfolioShareInput.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DeletePortfolioShareInput.


        :param account_id: The account_id of this DeletePortfolioShareInput.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def organization_node(self):
        """Gets the organization_node of this DeletePortfolioShareInput.


        :return: The organization_node of this DeletePortfolioShareInput.
        :rtype: DeletePortfolioShareInputOrganizationNode
        """
        return self._organization_node

    @organization_node.setter
    def organization_node(self, organization_node):
        """Sets the organization_node of this DeletePortfolioShareInput.


        :param organization_node: The organization_node of this DeletePortfolioShareInput.
        :type organization_node: DeletePortfolioShareInputOrganizationNode
        """

        self._organization_node = organization_node
