# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_type import ProductType
from openapi_server import util


class ProductViewSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, product_id: str=None, name: str=None, owner: str=None, short_description: str=None, type: ProductType=None, distributor: str=None, has_default_path: bool=None, support_email: str=None, support_description: str=None, support_url: str=None):
        """ProductViewSummary - a model defined in OpenAPI

        :param id: The id of this ProductViewSummary.
        :param product_id: The product_id of this ProductViewSummary.
        :param name: The name of this ProductViewSummary.
        :param owner: The owner of this ProductViewSummary.
        :param short_description: The short_description of this ProductViewSummary.
        :param type: The type of this ProductViewSummary.
        :param distributor: The distributor of this ProductViewSummary.
        :param has_default_path: The has_default_path of this ProductViewSummary.
        :param support_email: The support_email of this ProductViewSummary.
        :param support_description: The support_description of this ProductViewSummary.
        :param support_url: The support_url of this ProductViewSummary.
        """
        self.openapi_types = {
            'id': str,
            'product_id': str,
            'name': str,
            'owner': str,
            'short_description': str,
            'type': ProductType,
            'distributor': str,
            'has_default_path': bool,
            'support_email': str,
            'support_description': str,
            'support_url': str
        }

        self.attribute_map = {
            'id': 'Id',
            'product_id': 'ProductId',
            'name': 'Name',
            'owner': 'Owner',
            'short_description': 'ShortDescription',
            'type': 'Type',
            'distributor': 'Distributor',
            'has_default_path': 'HasDefaultPath',
            'support_email': 'SupportEmail',
            'support_description': 'SupportDescription',
            'support_url': 'SupportUrl'
        }

        self._id = id
        self._product_id = product_id
        self._name = name
        self._owner = owner
        self._short_description = short_description
        self._type = type
        self._distributor = distributor
        self._has_default_path = has_default_path
        self._support_email = support_email
        self._support_description = support_description
        self._support_url = support_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductViewSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductViewSummary of this ProductViewSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProductViewSummary.


        :return: The id of this ProductViewSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductViewSummary.


        :param id: The id of this ProductViewSummary.
        :type id: str
        """

        self._id = id

    @property
    def product_id(self):
        """Gets the product_id of this ProductViewSummary.


        :return: The product_id of this ProductViewSummary.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductViewSummary.


        :param product_id: The product_id of this ProductViewSummary.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def name(self):
        """Gets the name of this ProductViewSummary.


        :return: The name of this ProductViewSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductViewSummary.


        :param name: The name of this ProductViewSummary.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this ProductViewSummary.


        :return: The owner of this ProductViewSummary.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ProductViewSummary.


        :param owner: The owner of this ProductViewSummary.
        :type owner: str
        """

        self._owner = owner

    @property
    def short_description(self):
        """Gets the short_description of this ProductViewSummary.


        :return: The short_description of this ProductViewSummary.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ProductViewSummary.


        :param short_description: The short_description of this ProductViewSummary.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def type(self):
        """Gets the type of this ProductViewSummary.


        :return: The type of this ProductViewSummary.
        :rtype: ProductType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductViewSummary.


        :param type: The type of this ProductViewSummary.
        :type type: ProductType
        """

        self._type = type

    @property
    def distributor(self):
        """Gets the distributor of this ProductViewSummary.


        :return: The distributor of this ProductViewSummary.
        :rtype: str
        """
        return self._distributor

    @distributor.setter
    def distributor(self, distributor):
        """Sets the distributor of this ProductViewSummary.


        :param distributor: The distributor of this ProductViewSummary.
        :type distributor: str
        """

        self._distributor = distributor

    @property
    def has_default_path(self):
        """Gets the has_default_path of this ProductViewSummary.


        :return: The has_default_path of this ProductViewSummary.
        :rtype: bool
        """
        return self._has_default_path

    @has_default_path.setter
    def has_default_path(self, has_default_path):
        """Sets the has_default_path of this ProductViewSummary.


        :param has_default_path: The has_default_path of this ProductViewSummary.
        :type has_default_path: bool
        """

        self._has_default_path = has_default_path

    @property
    def support_email(self):
        """Gets the support_email of this ProductViewSummary.


        :return: The support_email of this ProductViewSummary.
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this ProductViewSummary.


        :param support_email: The support_email of this ProductViewSummary.
        :type support_email: str
        """

        self._support_email = support_email

    @property
    def support_description(self):
        """Gets the support_description of this ProductViewSummary.


        :return: The support_description of this ProductViewSummary.
        :rtype: str
        """
        return self._support_description

    @support_description.setter
    def support_description(self, support_description):
        """Sets the support_description of this ProductViewSummary.


        :param support_description: The support_description of this ProductViewSummary.
        :type support_description: str
        """

        self._support_description = support_description

    @property
    def support_url(self):
        """Gets the support_url of this ProductViewSummary.


        :return: The support_url of this ProductViewSummary.
        :rtype: str
        """
        return self._support_url

    @support_url.setter
    def support_url(self, support_url):
        """Sets the support_url of this ProductViewSummary.


        :param support_url: The support_url of this ProductViewSummary.
        :type support_url: str
        """

        self._support_url = support_url
