# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeStarParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_arn: str=None, repository: str=None, branch: str=None, artifact_path: str=None):
        """CodeStarParameters - a model defined in OpenAPI

        :param connection_arn: The connection_arn of this CodeStarParameters.
        :param repository: The repository of this CodeStarParameters.
        :param branch: The branch of this CodeStarParameters.
        :param artifact_path: The artifact_path of this CodeStarParameters.
        """
        self.openapi_types = {
            'connection_arn': str,
            'repository': str,
            'branch': str,
            'artifact_path': str
        }

        self.attribute_map = {
            'connection_arn': 'ConnectionArn',
            'repository': 'Repository',
            'branch': 'Branch',
            'artifact_path': 'ArtifactPath'
        }

        self._connection_arn = connection_arn
        self._repository = repository
        self._branch = branch
        self._artifact_path = artifact_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeStarParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeStarParameters of this CodeStarParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_arn(self):
        """Gets the connection_arn of this CodeStarParameters.


        :return: The connection_arn of this CodeStarParameters.
        :rtype: str
        """
        return self._connection_arn

    @connection_arn.setter
    def connection_arn(self, connection_arn):
        """Sets the connection_arn of this CodeStarParameters.


        :param connection_arn: The connection_arn of this CodeStarParameters.
        :type connection_arn: str
        """
        if connection_arn is None:
            raise ValueError("Invalid value for `connection_arn`, must not be `None`")

        self._connection_arn = connection_arn

    @property
    def repository(self):
        """Gets the repository of this CodeStarParameters.


        :return: The repository of this CodeStarParameters.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CodeStarParameters.


        :param repository: The repository of this CodeStarParameters.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def branch(self):
        """Gets the branch of this CodeStarParameters.


        :return: The branch of this CodeStarParameters.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this CodeStarParameters.


        :param branch: The branch of this CodeStarParameters.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def artifact_path(self):
        """Gets the artifact_path of this CodeStarParameters.


        :return: The artifact_path of this CodeStarParameters.
        :rtype: str
        """
        return self._artifact_path

    @artifact_path.setter
    def artifact_path(self, artifact_path):
        """Sets the artifact_path of this CodeStarParameters.


        :param artifact_path: The artifact_path of this CodeStarParameters.
        :type artifact_path: str
        """
        if artifact_path is None:
            raise ValueError("Invalid value for `artifact_path`, must not be `None`")

        self._artifact_path = artifact_path
