# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provision_product_input_provisioning_preferences import ProvisionProductInputProvisioningPreferences
from openapi_server import util


class ProvisionProductInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, product_id: str=None, product_name: str=None, provisioning_artifact_id: str=None, provisioning_artifact_name: str=None, path_id: str=None, path_name: str=None, provisioned_product_name: str=None, provisioning_parameters: List=None, provisioning_preferences: ProvisionProductInputProvisioningPreferences=None, tags: List=None, notification_arns: List=None, provision_token: str=None):
        """ProvisionProductInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this ProvisionProductInput.
        :param product_id: The product_id of this ProvisionProductInput.
        :param product_name: The product_name of this ProvisionProductInput.
        :param provisioning_artifact_id: The provisioning_artifact_id of this ProvisionProductInput.
        :param provisioning_artifact_name: The provisioning_artifact_name of this ProvisionProductInput.
        :param path_id: The path_id of this ProvisionProductInput.
        :param path_name: The path_name of this ProvisionProductInput.
        :param provisioned_product_name: The provisioned_product_name of this ProvisionProductInput.
        :param provisioning_parameters: The provisioning_parameters of this ProvisionProductInput.
        :param provisioning_preferences: The provisioning_preferences of this ProvisionProductInput.
        :param tags: The tags of this ProvisionProductInput.
        :param notification_arns: The notification_arns of this ProvisionProductInput.
        :param provision_token: The provision_token of this ProvisionProductInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'product_id': str,
            'product_name': str,
            'provisioning_artifact_id': str,
            'provisioning_artifact_name': str,
            'path_id': str,
            'path_name': str,
            'provisioned_product_name': str,
            'provisioning_parameters': List,
            'provisioning_preferences': ProvisionProductInputProvisioningPreferences,
            'tags': List,
            'notification_arns': List,
            'provision_token': str
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'product_id': 'ProductId',
            'product_name': 'ProductName',
            'provisioning_artifact_id': 'ProvisioningArtifactId',
            'provisioning_artifact_name': 'ProvisioningArtifactName',
            'path_id': 'PathId',
            'path_name': 'PathName',
            'provisioned_product_name': 'ProvisionedProductName',
            'provisioning_parameters': 'ProvisioningParameters',
            'provisioning_preferences': 'ProvisioningPreferences',
            'tags': 'Tags',
            'notification_arns': 'NotificationArns',
            'provision_token': 'ProvisionToken'
        }

        self._accept_language = accept_language
        self._product_id = product_id
        self._product_name = product_name
        self._provisioning_artifact_id = provisioning_artifact_id
        self._provisioning_artifact_name = provisioning_artifact_name
        self._path_id = path_id
        self._path_name = path_name
        self._provisioned_product_name = provisioned_product_name
        self._provisioning_parameters = provisioning_parameters
        self._provisioning_preferences = provisioning_preferences
        self._tags = tags
        self._notification_arns = notification_arns
        self._provision_token = provision_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisionProductInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisionProductInput of this ProvisionProductInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this ProvisionProductInput.


        :return: The accept_language of this ProvisionProductInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this ProvisionProductInput.


        :param accept_language: The accept_language of this ProvisionProductInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def product_id(self):
        """Gets the product_id of this ProvisionProductInput.


        :return: The product_id of this ProvisionProductInput.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProvisionProductInput.


        :param product_id: The product_id of this ProvisionProductInput.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this ProvisionProductInput.


        :return: The product_name of this ProvisionProductInput.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ProvisionProductInput.


        :param product_name: The product_name of this ProvisionProductInput.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def provisioning_artifact_id(self):
        """Gets the provisioning_artifact_id of this ProvisionProductInput.


        :return: The provisioning_artifact_id of this ProvisionProductInput.
        :rtype: str
        """
        return self._provisioning_artifact_id

    @provisioning_artifact_id.setter
    def provisioning_artifact_id(self, provisioning_artifact_id):
        """Sets the provisioning_artifact_id of this ProvisionProductInput.


        :param provisioning_artifact_id: The provisioning_artifact_id of this ProvisionProductInput.
        :type provisioning_artifact_id: str
        """

        self._provisioning_artifact_id = provisioning_artifact_id

    @property
    def provisioning_artifact_name(self):
        """Gets the provisioning_artifact_name of this ProvisionProductInput.


        :return: The provisioning_artifact_name of this ProvisionProductInput.
        :rtype: str
        """
        return self._provisioning_artifact_name

    @provisioning_artifact_name.setter
    def provisioning_artifact_name(self, provisioning_artifact_name):
        """Sets the provisioning_artifact_name of this ProvisionProductInput.


        :param provisioning_artifact_name: The provisioning_artifact_name of this ProvisionProductInput.
        :type provisioning_artifact_name: str
        """

        self._provisioning_artifact_name = provisioning_artifact_name

    @property
    def path_id(self):
        """Gets the path_id of this ProvisionProductInput.


        :return: The path_id of this ProvisionProductInput.
        :rtype: str
        """
        return self._path_id

    @path_id.setter
    def path_id(self, path_id):
        """Sets the path_id of this ProvisionProductInput.


        :param path_id: The path_id of this ProvisionProductInput.
        :type path_id: str
        """

        self._path_id = path_id

    @property
    def path_name(self):
        """Gets the path_name of this ProvisionProductInput.


        :return: The path_name of this ProvisionProductInput.
        :rtype: str
        """
        return self._path_name

    @path_name.setter
    def path_name(self, path_name):
        """Sets the path_name of this ProvisionProductInput.


        :param path_name: The path_name of this ProvisionProductInput.
        :type path_name: str
        """

        self._path_name = path_name

    @property
    def provisioned_product_name(self):
        """Gets the provisioned_product_name of this ProvisionProductInput.


        :return: The provisioned_product_name of this ProvisionProductInput.
        :rtype: str
        """
        return self._provisioned_product_name

    @provisioned_product_name.setter
    def provisioned_product_name(self, provisioned_product_name):
        """Sets the provisioned_product_name of this ProvisionProductInput.


        :param provisioned_product_name: The provisioned_product_name of this ProvisionProductInput.
        :type provisioned_product_name: str
        """
        if provisioned_product_name is None:
            raise ValueError("Invalid value for `provisioned_product_name`, must not be `None`")

        self._provisioned_product_name = provisioned_product_name

    @property
    def provisioning_parameters(self):
        """Gets the provisioning_parameters of this ProvisionProductInput.


        :return: The provisioning_parameters of this ProvisionProductInput.
        :rtype: List
        """
        return self._provisioning_parameters

    @provisioning_parameters.setter
    def provisioning_parameters(self, provisioning_parameters):
        """Sets the provisioning_parameters of this ProvisionProductInput.


        :param provisioning_parameters: The provisioning_parameters of this ProvisionProductInput.
        :type provisioning_parameters: List
        """

        self._provisioning_parameters = provisioning_parameters

    @property
    def provisioning_preferences(self):
        """Gets the provisioning_preferences of this ProvisionProductInput.


        :return: The provisioning_preferences of this ProvisionProductInput.
        :rtype: ProvisionProductInputProvisioningPreferences
        """
        return self._provisioning_preferences

    @provisioning_preferences.setter
    def provisioning_preferences(self, provisioning_preferences):
        """Sets the provisioning_preferences of this ProvisionProductInput.


        :param provisioning_preferences: The provisioning_preferences of this ProvisionProductInput.
        :type provisioning_preferences: ProvisionProductInputProvisioningPreferences
        """

        self._provisioning_preferences = provisioning_preferences

    @property
    def tags(self):
        """Gets the tags of this ProvisionProductInput.


        :return: The tags of this ProvisionProductInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProvisionProductInput.


        :param tags: The tags of this ProvisionProductInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def notification_arns(self):
        """Gets the notification_arns of this ProvisionProductInput.


        :return: The notification_arns of this ProvisionProductInput.
        :rtype: List
        """
        return self._notification_arns

    @notification_arns.setter
    def notification_arns(self, notification_arns):
        """Sets the notification_arns of this ProvisionProductInput.


        :param notification_arns: The notification_arns of this ProvisionProductInput.
        :type notification_arns: List
        """

        self._notification_arns = notification_arns

    @property
    def provision_token(self):
        """Gets the provision_token of this ProvisionProductInput.


        :return: The provision_token of this ProvisionProductInput.
        :rtype: str
        """
        return self._provision_token

    @provision_token.setter
    def provision_token(self, provision_token):
        """Sets the provision_token of this ProvisionProductInput.


        :param provision_token: The provision_token of this ProvisionProductInput.
        :type provision_token: str
        """
        if provision_token is None:
            raise ValueError("Invalid value for `provision_token`, must not be `None`")

        self._provision_token = provision_token
