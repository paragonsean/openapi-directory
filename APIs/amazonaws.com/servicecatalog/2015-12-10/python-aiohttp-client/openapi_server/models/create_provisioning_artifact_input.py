# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_provisioning_artifact_input_parameters import CreateProvisioningArtifactInputParameters
from openapi_server import util


class CreateProvisioningArtifactInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, product_id: str=None, parameters: CreateProvisioningArtifactInputParameters=None, idempotency_token: str=None):
        """CreateProvisioningArtifactInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this CreateProvisioningArtifactInput.
        :param product_id: The product_id of this CreateProvisioningArtifactInput.
        :param parameters: The parameters of this CreateProvisioningArtifactInput.
        :param idempotency_token: The idempotency_token of this CreateProvisioningArtifactInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'product_id': str,
            'parameters': CreateProvisioningArtifactInputParameters,
            'idempotency_token': str
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'product_id': 'ProductId',
            'parameters': 'Parameters',
            'idempotency_token': 'IdempotencyToken'
        }

        self._accept_language = accept_language
        self._product_id = product_id
        self._parameters = parameters
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProvisioningArtifactInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProvisioningArtifactInput of this CreateProvisioningArtifactInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this CreateProvisioningArtifactInput.


        :return: The accept_language of this CreateProvisioningArtifactInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this CreateProvisioningArtifactInput.


        :param accept_language: The accept_language of this CreateProvisioningArtifactInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def product_id(self):
        """Gets the product_id of this CreateProvisioningArtifactInput.


        :return: The product_id of this CreateProvisioningArtifactInput.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this CreateProvisioningArtifactInput.


        :param product_id: The product_id of this CreateProvisioningArtifactInput.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def parameters(self):
        """Gets the parameters of this CreateProvisioningArtifactInput.


        :return: The parameters of this CreateProvisioningArtifactInput.
        :rtype: CreateProvisioningArtifactInputParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CreateProvisioningArtifactInput.


        :param parameters: The parameters of this CreateProvisioningArtifactInput.
        :type parameters: CreateProvisioningArtifactInputParameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateProvisioningArtifactInput.


        :return: The idempotency_token of this CreateProvisioningArtifactInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateProvisioningArtifactInput.


        :param idempotency_token: The idempotency_token of this CreateProvisioningArtifactInput.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token
