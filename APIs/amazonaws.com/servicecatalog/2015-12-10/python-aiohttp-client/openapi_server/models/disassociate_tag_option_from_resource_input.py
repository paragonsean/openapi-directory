# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisassociateTagOptionFromResourceInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id: str=None, tag_option_id: str=None):
        """DisassociateTagOptionFromResourceInput - a model defined in OpenAPI

        :param resource_id: The resource_id of this DisassociateTagOptionFromResourceInput.
        :param tag_option_id: The tag_option_id of this DisassociateTagOptionFromResourceInput.
        """
        self.openapi_types = {
            'resource_id': str,
            'tag_option_id': str
        }

        self.attribute_map = {
            'resource_id': 'ResourceId',
            'tag_option_id': 'TagOptionId'
        }

        self._resource_id = resource_id
        self._tag_option_id = tag_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisassociateTagOptionFromResourceInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisassociateTagOptionFromResourceInput of this DisassociateTagOptionFromResourceInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self):
        """Gets the resource_id of this DisassociateTagOptionFromResourceInput.


        :return: The resource_id of this DisassociateTagOptionFromResourceInput.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this DisassociateTagOptionFromResourceInput.


        :param resource_id: The resource_id of this DisassociateTagOptionFromResourceInput.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def tag_option_id(self):
        """Gets the tag_option_id of this DisassociateTagOptionFromResourceInput.


        :return: The tag_option_id of this DisassociateTagOptionFromResourceInput.
        :rtype: str
        """
        return self._tag_option_id

    @tag_option_id.setter
    def tag_option_id(self, tag_option_id):
        """Sets the tag_option_id of this DisassociateTagOptionFromResourceInput.


        :param tag_option_id: The tag_option_id of this DisassociateTagOptionFromResourceInput.
        :type tag_option_id: str
        """
        if tag_option_id is None:
            raise ValueError("Invalid value for `tag_option_id`, must not be `None`")

        self._tag_option_id = tag_option_id
