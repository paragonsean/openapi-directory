# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provisioning_artifact_guidance import ProvisioningArtifactGuidance
from openapi_server import util


class UpdateProvisioningArtifactInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, product_id: str=None, provisioning_artifact_id: str=None, name: str=None, description: str=None, active: bool=None, guidance: ProvisioningArtifactGuidance=None):
        """UpdateProvisioningArtifactInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this UpdateProvisioningArtifactInput.
        :param product_id: The product_id of this UpdateProvisioningArtifactInput.
        :param provisioning_artifact_id: The provisioning_artifact_id of this UpdateProvisioningArtifactInput.
        :param name: The name of this UpdateProvisioningArtifactInput.
        :param description: The description of this UpdateProvisioningArtifactInput.
        :param active: The active of this UpdateProvisioningArtifactInput.
        :param guidance: The guidance of this UpdateProvisioningArtifactInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'product_id': str,
            'provisioning_artifact_id': str,
            'name': str,
            'description': str,
            'active': bool,
            'guidance': ProvisioningArtifactGuidance
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'product_id': 'ProductId',
            'provisioning_artifact_id': 'ProvisioningArtifactId',
            'name': 'Name',
            'description': 'Description',
            'active': 'Active',
            'guidance': 'Guidance'
        }

        self._accept_language = accept_language
        self._product_id = product_id
        self._provisioning_artifact_id = provisioning_artifact_id
        self._name = name
        self._description = description
        self._active = active
        self._guidance = guidance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateProvisioningArtifactInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateProvisioningArtifactInput of this UpdateProvisioningArtifactInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this UpdateProvisioningArtifactInput.


        :return: The accept_language of this UpdateProvisioningArtifactInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this UpdateProvisioningArtifactInput.


        :param accept_language: The accept_language of this UpdateProvisioningArtifactInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def product_id(self):
        """Gets the product_id of this UpdateProvisioningArtifactInput.


        :return: The product_id of this UpdateProvisioningArtifactInput.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this UpdateProvisioningArtifactInput.


        :param product_id: The product_id of this UpdateProvisioningArtifactInput.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def provisioning_artifact_id(self):
        """Gets the provisioning_artifact_id of this UpdateProvisioningArtifactInput.


        :return: The provisioning_artifact_id of this UpdateProvisioningArtifactInput.
        :rtype: str
        """
        return self._provisioning_artifact_id

    @provisioning_artifact_id.setter
    def provisioning_artifact_id(self, provisioning_artifact_id):
        """Sets the provisioning_artifact_id of this UpdateProvisioningArtifactInput.


        :param provisioning_artifact_id: The provisioning_artifact_id of this UpdateProvisioningArtifactInput.
        :type provisioning_artifact_id: str
        """
        if provisioning_artifact_id is None:
            raise ValueError("Invalid value for `provisioning_artifact_id`, must not be `None`")

        self._provisioning_artifact_id = provisioning_artifact_id

    @property
    def name(self):
        """Gets the name of this UpdateProvisioningArtifactInput.


        :return: The name of this UpdateProvisioningArtifactInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateProvisioningArtifactInput.


        :param name: The name of this UpdateProvisioningArtifactInput.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateProvisioningArtifactInput.


        :return: The description of this UpdateProvisioningArtifactInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProvisioningArtifactInput.


        :param description: The description of this UpdateProvisioningArtifactInput.
        :type description: str
        """

        self._description = description

    @property
    def active(self):
        """Gets the active of this UpdateProvisioningArtifactInput.


        :return: The active of this UpdateProvisioningArtifactInput.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UpdateProvisioningArtifactInput.


        :param active: The active of this UpdateProvisioningArtifactInput.
        :type active: bool
        """

        self._active = active

    @property
    def guidance(self):
        """Gets the guidance of this UpdateProvisioningArtifactInput.


        :return: The guidance of this UpdateProvisioningArtifactInput.
        :rtype: ProvisioningArtifactGuidance
        """
        return self._guidance

    @guidance.setter
    def guidance(self, guidance):
        """Sets the guidance of this UpdateProvisioningArtifactInput.


        :param guidance: The guidance of this UpdateProvisioningArtifactInput.
        :type guidance: ProvisioningArtifactGuidance
        """

        self._guidance = guidance
