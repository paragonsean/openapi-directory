# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_action_definition_type import ServiceActionDefinitionType
from openapi_server import util


class CreateServiceActionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, definition_type: ServiceActionDefinitionType=None, definition: Dict=None, description: str=None, accept_language: str=None, idempotency_token: str=None):
        """CreateServiceActionInput - a model defined in OpenAPI

        :param name: The name of this CreateServiceActionInput.
        :param definition_type: The definition_type of this CreateServiceActionInput.
        :param definition: The definition of this CreateServiceActionInput.
        :param description: The description of this CreateServiceActionInput.
        :param accept_language: The accept_language of this CreateServiceActionInput.
        :param idempotency_token: The idempotency_token of this CreateServiceActionInput.
        """
        self.openapi_types = {
            'name': str,
            'definition_type': ServiceActionDefinitionType,
            'definition': Dict,
            'description': str,
            'accept_language': str,
            'idempotency_token': str
        }

        self.attribute_map = {
            'name': 'Name',
            'definition_type': 'DefinitionType',
            'definition': 'Definition',
            'description': 'Description',
            'accept_language': 'AcceptLanguage',
            'idempotency_token': 'IdempotencyToken'
        }

        self._name = name
        self._definition_type = definition_type
        self._definition = definition
        self._description = description
        self._accept_language = accept_language
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceActionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceActionInput of this CreateServiceActionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateServiceActionInput.


        :return: The name of this CreateServiceActionInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateServiceActionInput.


        :param name: The name of this CreateServiceActionInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def definition_type(self):
        """Gets the definition_type of this CreateServiceActionInput.


        :return: The definition_type of this CreateServiceActionInput.
        :rtype: ServiceActionDefinitionType
        """
        return self._definition_type

    @definition_type.setter
    def definition_type(self, definition_type):
        """Sets the definition_type of this CreateServiceActionInput.


        :param definition_type: The definition_type of this CreateServiceActionInput.
        :type definition_type: ServiceActionDefinitionType
        """
        if definition_type is None:
            raise ValueError("Invalid value for `definition_type`, must not be `None`")

        self._definition_type = definition_type

    @property
    def definition(self):
        """Gets the definition of this CreateServiceActionInput.


        :return: The definition of this CreateServiceActionInput.
        :rtype: Dict
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this CreateServiceActionInput.


        :param definition: The definition of this CreateServiceActionInput.
        :type definition: Dict
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def description(self):
        """Gets the description of this CreateServiceActionInput.


        :return: The description of this CreateServiceActionInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateServiceActionInput.


        :param description: The description of this CreateServiceActionInput.
        :type description: str
        """

        self._description = description

    @property
    def accept_language(self):
        """Gets the accept_language of this CreateServiceActionInput.


        :return: The accept_language of this CreateServiceActionInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this CreateServiceActionInput.


        :param accept_language: The accept_language of this CreateServiceActionInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateServiceActionInput.


        :return: The idempotency_token of this CreateServiceActionInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateServiceActionInput.


        :param idempotency_token: The idempotency_token of this CreateServiceActionInput.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token
