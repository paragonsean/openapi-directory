# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_portfolio_share_status_output_share_details import DescribePortfolioShareStatusOutputShareDetails
from openapi_server.models.share_status import ShareStatus
from openapi_server import util


class DescribePortfolioShareStatusOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, portfolio_share_token: str=None, portfolio_id: str=None, organization_node_value: str=None, status: ShareStatus=None, share_details: DescribePortfolioShareStatusOutputShareDetails=None):
        """DescribePortfolioShareStatusOutput - a model defined in OpenAPI

        :param portfolio_share_token: The portfolio_share_token of this DescribePortfolioShareStatusOutput.
        :param portfolio_id: The portfolio_id of this DescribePortfolioShareStatusOutput.
        :param organization_node_value: The organization_node_value of this DescribePortfolioShareStatusOutput.
        :param status: The status of this DescribePortfolioShareStatusOutput.
        :param share_details: The share_details of this DescribePortfolioShareStatusOutput.
        """
        self.openapi_types = {
            'portfolio_share_token': str,
            'portfolio_id': str,
            'organization_node_value': str,
            'status': ShareStatus,
            'share_details': DescribePortfolioShareStatusOutputShareDetails
        }

        self.attribute_map = {
            'portfolio_share_token': 'PortfolioShareToken',
            'portfolio_id': 'PortfolioId',
            'organization_node_value': 'OrganizationNodeValue',
            'status': 'Status',
            'share_details': 'ShareDetails'
        }

        self._portfolio_share_token = portfolio_share_token
        self._portfolio_id = portfolio_id
        self._organization_node_value = organization_node_value
        self._status = status
        self._share_details = share_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribePortfolioShareStatusOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribePortfolioShareStatusOutput of this DescribePortfolioShareStatusOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def portfolio_share_token(self):
        """Gets the portfolio_share_token of this DescribePortfolioShareStatusOutput.


        :return: The portfolio_share_token of this DescribePortfolioShareStatusOutput.
        :rtype: str
        """
        return self._portfolio_share_token

    @portfolio_share_token.setter
    def portfolio_share_token(self, portfolio_share_token):
        """Sets the portfolio_share_token of this DescribePortfolioShareStatusOutput.


        :param portfolio_share_token: The portfolio_share_token of this DescribePortfolioShareStatusOutput.
        :type portfolio_share_token: str
        """

        self._portfolio_share_token = portfolio_share_token

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this DescribePortfolioShareStatusOutput.


        :return: The portfolio_id of this DescribePortfolioShareStatusOutput.
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this DescribePortfolioShareStatusOutput.


        :param portfolio_id: The portfolio_id of this DescribePortfolioShareStatusOutput.
        :type portfolio_id: str
        """

        self._portfolio_id = portfolio_id

    @property
    def organization_node_value(self):
        """Gets the organization_node_value of this DescribePortfolioShareStatusOutput.


        :return: The organization_node_value of this DescribePortfolioShareStatusOutput.
        :rtype: str
        """
        return self._organization_node_value

    @organization_node_value.setter
    def organization_node_value(self, organization_node_value):
        """Sets the organization_node_value of this DescribePortfolioShareStatusOutput.


        :param organization_node_value: The organization_node_value of this DescribePortfolioShareStatusOutput.
        :type organization_node_value: str
        """

        self._organization_node_value = organization_node_value

    @property
    def status(self):
        """Gets the status of this DescribePortfolioShareStatusOutput.


        :return: The status of this DescribePortfolioShareStatusOutput.
        :rtype: ShareStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribePortfolioShareStatusOutput.


        :param status: The status of this DescribePortfolioShareStatusOutput.
        :type status: ShareStatus
        """

        self._status = status

    @property
    def share_details(self):
        """Gets the share_details of this DescribePortfolioShareStatusOutput.


        :return: The share_details of this DescribePortfolioShareStatusOutput.
        :rtype: DescribePortfolioShareStatusOutputShareDetails
        """
        return self._share_details

    @share_details.setter
    def share_details(self, share_details):
        """Sets the share_details of this DescribePortfolioShareStatusOutput.


        :param share_details: The share_details of this DescribePortfolioShareStatusOutput.
        :type share_details: DescribePortfolioShareStatusOutputShareDetails
        """

        self._share_details = share_details
