# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_product_input_provisioning_artifact_parameters import CreateProductInputProvisioningArtifactParameters
from openapi_server.models.create_product_input_source_connection import CreateProductInputSourceConnection
from openapi_server.models.product_type import ProductType
from openapi_server import util


class CreateProductInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, name: str=None, owner: str=None, description: str=None, distributor: str=None, support_description: str=None, support_email: str=None, support_url: str=None, product_type: ProductType=None, tags: List=None, provisioning_artifact_parameters: CreateProductInputProvisioningArtifactParameters=None, idempotency_token: str=None, source_connection: CreateProductInputSourceConnection=None):
        """CreateProductInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this CreateProductInput.
        :param name: The name of this CreateProductInput.
        :param owner: The owner of this CreateProductInput.
        :param description: The description of this CreateProductInput.
        :param distributor: The distributor of this CreateProductInput.
        :param support_description: The support_description of this CreateProductInput.
        :param support_email: The support_email of this CreateProductInput.
        :param support_url: The support_url of this CreateProductInput.
        :param product_type: The product_type of this CreateProductInput.
        :param tags: The tags of this CreateProductInput.
        :param provisioning_artifact_parameters: The provisioning_artifact_parameters of this CreateProductInput.
        :param idempotency_token: The idempotency_token of this CreateProductInput.
        :param source_connection: The source_connection of this CreateProductInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'name': str,
            'owner': str,
            'description': str,
            'distributor': str,
            'support_description': str,
            'support_email': str,
            'support_url': str,
            'product_type': ProductType,
            'tags': List,
            'provisioning_artifact_parameters': CreateProductInputProvisioningArtifactParameters,
            'idempotency_token': str,
            'source_connection': CreateProductInputSourceConnection
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'name': 'Name',
            'owner': 'Owner',
            'description': 'Description',
            'distributor': 'Distributor',
            'support_description': 'SupportDescription',
            'support_email': 'SupportEmail',
            'support_url': 'SupportUrl',
            'product_type': 'ProductType',
            'tags': 'Tags',
            'provisioning_artifact_parameters': 'ProvisioningArtifactParameters',
            'idempotency_token': 'IdempotencyToken',
            'source_connection': 'SourceConnection'
        }

        self._accept_language = accept_language
        self._name = name
        self._owner = owner
        self._description = description
        self._distributor = distributor
        self._support_description = support_description
        self._support_email = support_email
        self._support_url = support_url
        self._product_type = product_type
        self._tags = tags
        self._provisioning_artifact_parameters = provisioning_artifact_parameters
        self._idempotency_token = idempotency_token
        self._source_connection = source_connection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProductInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProductInput of this CreateProductInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this CreateProductInput.


        :return: The accept_language of this CreateProductInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this CreateProductInput.


        :param accept_language: The accept_language of this CreateProductInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def name(self):
        """Gets the name of this CreateProductInput.


        :return: The name of this CreateProductInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateProductInput.


        :param name: The name of this CreateProductInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this CreateProductInput.


        :return: The owner of this CreateProductInput.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CreateProductInput.


        :param owner: The owner of this CreateProductInput.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def description(self):
        """Gets the description of this CreateProductInput.


        :return: The description of this CreateProductInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateProductInput.


        :param description: The description of this CreateProductInput.
        :type description: str
        """

        self._description = description

    @property
    def distributor(self):
        """Gets the distributor of this CreateProductInput.


        :return: The distributor of this CreateProductInput.
        :rtype: str
        """
        return self._distributor

    @distributor.setter
    def distributor(self, distributor):
        """Sets the distributor of this CreateProductInput.


        :param distributor: The distributor of this CreateProductInput.
        :type distributor: str
        """

        self._distributor = distributor

    @property
    def support_description(self):
        """Gets the support_description of this CreateProductInput.


        :return: The support_description of this CreateProductInput.
        :rtype: str
        """
        return self._support_description

    @support_description.setter
    def support_description(self, support_description):
        """Sets the support_description of this CreateProductInput.


        :param support_description: The support_description of this CreateProductInput.
        :type support_description: str
        """

        self._support_description = support_description

    @property
    def support_email(self):
        """Gets the support_email of this CreateProductInput.


        :return: The support_email of this CreateProductInput.
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this CreateProductInput.


        :param support_email: The support_email of this CreateProductInput.
        :type support_email: str
        """

        self._support_email = support_email

    @property
    def support_url(self):
        """Gets the support_url of this CreateProductInput.


        :return: The support_url of this CreateProductInput.
        :rtype: str
        """
        return self._support_url

    @support_url.setter
    def support_url(self, support_url):
        """Sets the support_url of this CreateProductInput.


        :param support_url: The support_url of this CreateProductInput.
        :type support_url: str
        """

        self._support_url = support_url

    @property
    def product_type(self):
        """Gets the product_type of this CreateProductInput.


        :return: The product_type of this CreateProductInput.
        :rtype: ProductType
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this CreateProductInput.


        :param product_type: The product_type of this CreateProductInput.
        :type product_type: ProductType
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")

        self._product_type = product_type

    @property
    def tags(self):
        """Gets the tags of this CreateProductInput.


        :return: The tags of this CreateProductInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateProductInput.


        :param tags: The tags of this CreateProductInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def provisioning_artifact_parameters(self):
        """Gets the provisioning_artifact_parameters of this CreateProductInput.


        :return: The provisioning_artifact_parameters of this CreateProductInput.
        :rtype: CreateProductInputProvisioningArtifactParameters
        """
        return self._provisioning_artifact_parameters

    @provisioning_artifact_parameters.setter
    def provisioning_artifact_parameters(self, provisioning_artifact_parameters):
        """Sets the provisioning_artifact_parameters of this CreateProductInput.


        :param provisioning_artifact_parameters: The provisioning_artifact_parameters of this CreateProductInput.
        :type provisioning_artifact_parameters: CreateProductInputProvisioningArtifactParameters
        """

        self._provisioning_artifact_parameters = provisioning_artifact_parameters

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateProductInput.


        :return: The idempotency_token of this CreateProductInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateProductInput.


        :param idempotency_token: The idempotency_token of this CreateProductInput.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token

    @property
    def source_connection(self):
        """Gets the source_connection of this CreateProductInput.


        :return: The source_connection of this CreateProductInput.
        :rtype: CreateProductInputSourceConnection
        """
        return self._source_connection

    @source_connection.setter
    def source_connection(self, source_connection):
        """Sets the source_connection of this CreateProductInput.


        :param source_connection: The source_connection of this CreateProductInput.
        :type source_connection: CreateProductInputSourceConnection
        """

        self._source_connection = source_connection
