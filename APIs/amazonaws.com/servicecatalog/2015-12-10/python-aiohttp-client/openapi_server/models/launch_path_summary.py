# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LaunchPathSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, constraint_summaries: List=None, tags: List=None, name: str=None):
        """LaunchPathSummary - a model defined in OpenAPI

        :param id: The id of this LaunchPathSummary.
        :param constraint_summaries: The constraint_summaries of this LaunchPathSummary.
        :param tags: The tags of this LaunchPathSummary.
        :param name: The name of this LaunchPathSummary.
        """
        self.openapi_types = {
            'id': str,
            'constraint_summaries': List,
            'tags': List,
            'name': str
        }

        self.attribute_map = {
            'id': 'Id',
            'constraint_summaries': 'ConstraintSummaries',
            'tags': 'Tags',
            'name': 'Name'
        }

        self._id = id
        self._constraint_summaries = constraint_summaries
        self._tags = tags
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LaunchPathSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LaunchPathSummary of this LaunchPathSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LaunchPathSummary.


        :return: The id of this LaunchPathSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LaunchPathSummary.


        :param id: The id of this LaunchPathSummary.
        :type id: str
        """

        self._id = id

    @property
    def constraint_summaries(self):
        """Gets the constraint_summaries of this LaunchPathSummary.


        :return: The constraint_summaries of this LaunchPathSummary.
        :rtype: List
        """
        return self._constraint_summaries

    @constraint_summaries.setter
    def constraint_summaries(self, constraint_summaries):
        """Sets the constraint_summaries of this LaunchPathSummary.


        :param constraint_summaries: The constraint_summaries of this LaunchPathSummary.
        :type constraint_summaries: List
        """

        self._constraint_summaries = constraint_summaries

    @property
    def tags(self):
        """Gets the tags of this LaunchPathSummary.


        :return: The tags of this LaunchPathSummary.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LaunchPathSummary.


        :param tags: The tags of this LaunchPathSummary.
        :type tags: List
        """

        self._tags = tags

    @property
    def name(self):
        """Gets the name of this LaunchPathSummary.


        :return: The name of this LaunchPathSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LaunchPathSummary.


        :param name: The name of this LaunchPathSummary.
        :type name: str
        """

        self._name = name
