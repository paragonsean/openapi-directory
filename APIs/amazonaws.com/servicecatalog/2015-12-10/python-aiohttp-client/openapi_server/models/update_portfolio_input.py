# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatePortfolioInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, id: str=None, display_name: str=None, description: str=None, provider_name: str=None, add_tags: List=None, remove_tags: List=None):
        """UpdatePortfolioInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this UpdatePortfolioInput.
        :param id: The id of this UpdatePortfolioInput.
        :param display_name: The display_name of this UpdatePortfolioInput.
        :param description: The description of this UpdatePortfolioInput.
        :param provider_name: The provider_name of this UpdatePortfolioInput.
        :param add_tags: The add_tags of this UpdatePortfolioInput.
        :param remove_tags: The remove_tags of this UpdatePortfolioInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'id': str,
            'display_name': str,
            'description': str,
            'provider_name': str,
            'add_tags': List,
            'remove_tags': List
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'id': 'Id',
            'display_name': 'DisplayName',
            'description': 'Description',
            'provider_name': 'ProviderName',
            'add_tags': 'AddTags',
            'remove_tags': 'RemoveTags'
        }

        self._accept_language = accept_language
        self._id = id
        self._display_name = display_name
        self._description = description
        self._provider_name = provider_name
        self._add_tags = add_tags
        self._remove_tags = remove_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePortfolioInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePortfolioInput of this UpdatePortfolioInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this UpdatePortfolioInput.


        :return: The accept_language of this UpdatePortfolioInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this UpdatePortfolioInput.


        :param accept_language: The accept_language of this UpdatePortfolioInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def id(self):
        """Gets the id of this UpdatePortfolioInput.


        :return: The id of this UpdatePortfolioInput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdatePortfolioInput.


        :param id: The id of this UpdatePortfolioInput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this UpdatePortfolioInput.


        :return: The display_name of this UpdatePortfolioInput.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpdatePortfolioInput.


        :param display_name: The display_name of this UpdatePortfolioInput.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this UpdatePortfolioInput.


        :return: The description of this UpdatePortfolioInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatePortfolioInput.


        :param description: The description of this UpdatePortfolioInput.
        :type description: str
        """

        self._description = description

    @property
    def provider_name(self):
        """Gets the provider_name of this UpdatePortfolioInput.


        :return: The provider_name of this UpdatePortfolioInput.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this UpdatePortfolioInput.


        :param provider_name: The provider_name of this UpdatePortfolioInput.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def add_tags(self):
        """Gets the add_tags of this UpdatePortfolioInput.


        :return: The add_tags of this UpdatePortfolioInput.
        :rtype: List
        """
        return self._add_tags

    @add_tags.setter
    def add_tags(self, add_tags):
        """Sets the add_tags of this UpdatePortfolioInput.


        :param add_tags: The add_tags of this UpdatePortfolioInput.
        :type add_tags: List
        """

        self._add_tags = add_tags

    @property
    def remove_tags(self):
        """Gets the remove_tags of this UpdatePortfolioInput.


        :return: The remove_tags of this UpdatePortfolioInput.
        :rtype: List
        """
        return self._remove_tags

    @remove_tags.setter
    def remove_tags(self, remove_tags):
        """Sets the remove_tags of this UpdatePortfolioInput.


        :param remove_tags: The remove_tags of this UpdatePortfolioInput.
        :type remove_tags: List
        """

        self._remove_tags = remove_tags
