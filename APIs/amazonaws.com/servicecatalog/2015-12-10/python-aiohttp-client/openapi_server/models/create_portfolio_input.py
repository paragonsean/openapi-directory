# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePortfolioInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, display_name: str=None, description: str=None, provider_name: str=None, tags: List=None, idempotency_token: str=None):
        """CreatePortfolioInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this CreatePortfolioInput.
        :param display_name: The display_name of this CreatePortfolioInput.
        :param description: The description of this CreatePortfolioInput.
        :param provider_name: The provider_name of this CreatePortfolioInput.
        :param tags: The tags of this CreatePortfolioInput.
        :param idempotency_token: The idempotency_token of this CreatePortfolioInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'display_name': str,
            'description': str,
            'provider_name': str,
            'tags': List,
            'idempotency_token': str
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'display_name': 'DisplayName',
            'description': 'Description',
            'provider_name': 'ProviderName',
            'tags': 'Tags',
            'idempotency_token': 'IdempotencyToken'
        }

        self._accept_language = accept_language
        self._display_name = display_name
        self._description = description
        self._provider_name = provider_name
        self._tags = tags
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePortfolioInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePortfolioInput of this CreatePortfolioInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this CreatePortfolioInput.


        :return: The accept_language of this CreatePortfolioInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this CreatePortfolioInput.


        :param accept_language: The accept_language of this CreatePortfolioInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def display_name(self):
        """Gets the display_name of this CreatePortfolioInput.


        :return: The display_name of this CreatePortfolioInput.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreatePortfolioInput.


        :param display_name: The display_name of this CreatePortfolioInput.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this CreatePortfolioInput.


        :return: The description of this CreatePortfolioInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePortfolioInput.


        :param description: The description of this CreatePortfolioInput.
        :type description: str
        """

        self._description = description

    @property
    def provider_name(self):
        """Gets the provider_name of this CreatePortfolioInput.


        :return: The provider_name of this CreatePortfolioInput.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this CreatePortfolioInput.


        :param provider_name: The provider_name of this CreatePortfolioInput.
        :type provider_name: str
        """
        if provider_name is None:
            raise ValueError("Invalid value for `provider_name`, must not be `None`")

        self._provider_name = provider_name

    @property
    def tags(self):
        """Gets the tags of this CreatePortfolioInput.


        :return: The tags of this CreatePortfolioInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePortfolioInput.


        :param tags: The tags of this CreatePortfolioInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreatePortfolioInput.


        :return: The idempotency_token of this CreatePortfolioInput.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreatePortfolioInput.


        :param idempotency_token: The idempotency_token of this CreatePortfolioInput.
        :type idempotency_token: str
        """
        if idempotency_token is None:
            raise ValueError("Invalid value for `idempotency_token`, must not be `None`")

        self._idempotency_token = idempotency_token
