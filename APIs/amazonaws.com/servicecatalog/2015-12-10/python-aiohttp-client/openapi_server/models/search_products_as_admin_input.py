# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_source import ProductSource
from openapi_server.models.product_view_sort_by import ProductViewSortBy
from openapi_server.models.sort_order import SortOrder
from openapi_server import util


class SearchProductsAsAdminInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, portfolio_id: str=None, filters: Dict=None, sort_by: ProductViewSortBy=None, sort_order: SortOrder=None, page_token: str=None, page_size: int=None, product_source: ProductSource=None):
        """SearchProductsAsAdminInput - a model defined in OpenAPI

        :param accept_language: The accept_language of this SearchProductsAsAdminInput.
        :param portfolio_id: The portfolio_id of this SearchProductsAsAdminInput.
        :param filters: The filters of this SearchProductsAsAdminInput.
        :param sort_by: The sort_by of this SearchProductsAsAdminInput.
        :param sort_order: The sort_order of this SearchProductsAsAdminInput.
        :param page_token: The page_token of this SearchProductsAsAdminInput.
        :param page_size: The page_size of this SearchProductsAsAdminInput.
        :param product_source: The product_source of this SearchProductsAsAdminInput.
        """
        self.openapi_types = {
            'accept_language': str,
            'portfolio_id': str,
            'filters': Dict,
            'sort_by': ProductViewSortBy,
            'sort_order': SortOrder,
            'page_token': str,
            'page_size': int,
            'product_source': ProductSource
        }

        self.attribute_map = {
            'accept_language': 'AcceptLanguage',
            'portfolio_id': 'PortfolioId',
            'filters': 'Filters',
            'sort_by': 'SortBy',
            'sort_order': 'SortOrder',
            'page_token': 'PageToken',
            'page_size': 'PageSize',
            'product_source': 'ProductSource'
        }

        self._accept_language = accept_language
        self._portfolio_id = portfolio_id
        self._filters = filters
        self._sort_by = sort_by
        self._sort_order = sort_order
        self._page_token = page_token
        self._page_size = page_size
        self._product_source = product_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchProductsAsAdminInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchProductsAsAdminInput of this SearchProductsAsAdminInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this SearchProductsAsAdminInput.


        :return: The accept_language of this SearchProductsAsAdminInput.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this SearchProductsAsAdminInput.


        :param accept_language: The accept_language of this SearchProductsAsAdminInput.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this SearchProductsAsAdminInput.


        :return: The portfolio_id of this SearchProductsAsAdminInput.
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this SearchProductsAsAdminInput.


        :param portfolio_id: The portfolio_id of this SearchProductsAsAdminInput.
        :type portfolio_id: str
        """

        self._portfolio_id = portfolio_id

    @property
    def filters(self):
        """Gets the filters of this SearchProductsAsAdminInput.


        :return: The filters of this SearchProductsAsAdminInput.
        :rtype: Dict
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SearchProductsAsAdminInput.


        :param filters: The filters of this SearchProductsAsAdminInput.
        :type filters: Dict
        """

        self._filters = filters

    @property
    def sort_by(self):
        """Gets the sort_by of this SearchProductsAsAdminInput.


        :return: The sort_by of this SearchProductsAsAdminInput.
        :rtype: ProductViewSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this SearchProductsAsAdminInput.


        :param sort_by: The sort_by of this SearchProductsAsAdminInput.
        :type sort_by: ProductViewSortBy
        """

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this SearchProductsAsAdminInput.


        :return: The sort_order of this SearchProductsAsAdminInput.
        :rtype: SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SearchProductsAsAdminInput.


        :param sort_order: The sort_order of this SearchProductsAsAdminInput.
        :type sort_order: SortOrder
        """

        self._sort_order = sort_order

    @property
    def page_token(self):
        """Gets the page_token of this SearchProductsAsAdminInput.


        :return: The page_token of this SearchProductsAsAdminInput.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this SearchProductsAsAdminInput.


        :param page_token: The page_token of this SearchProductsAsAdminInput.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def page_size(self):
        """Gets the page_size of this SearchProductsAsAdminInput.


        :return: The page_size of this SearchProductsAsAdminInput.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchProductsAsAdminInput.


        :param page_size: The page_size of this SearchProductsAsAdminInput.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def product_source(self):
        """Gets the product_source of this SearchProductsAsAdminInput.


        :return: The product_source of this SearchProductsAsAdminInput.
        :rtype: ProductSource
        """
        return self._product_source

    @product_source.setter
    def product_source(self, product_source):
        """Sets the product_source of this SearchProductsAsAdminInput.


        :param product_source: The product_source of this SearchProductsAsAdminInput.
        :type product_source: ProductSource
        """

        self._product_source = product_source
