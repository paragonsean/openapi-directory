# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagOptionDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, value: str=None, active: bool=None, id: str=None, owner: str=None):
        """TagOptionDetail - a model defined in OpenAPI

        :param key: The key of this TagOptionDetail.
        :param value: The value of this TagOptionDetail.
        :param active: The active of this TagOptionDetail.
        :param id: The id of this TagOptionDetail.
        :param owner: The owner of this TagOptionDetail.
        """
        self.openapi_types = {
            'key': str,
            'value': str,
            'active': bool,
            'id': str,
            'owner': str
        }

        self.attribute_map = {
            'key': 'Key',
            'value': 'Value',
            'active': 'Active',
            'id': 'Id',
            'owner': 'Owner'
        }

        self._key = key
        self._value = value
        self._active = active
        self._id = id
        self._owner = owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagOptionDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagOptionDetail of this TagOptionDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this TagOptionDetail.


        :return: The key of this TagOptionDetail.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TagOptionDetail.


        :param key: The key of this TagOptionDetail.
        :type key: str
        """

        self._key = key

    @property
    def value(self):
        """Gets the value of this TagOptionDetail.


        :return: The value of this TagOptionDetail.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TagOptionDetail.


        :param value: The value of this TagOptionDetail.
        :type value: str
        """

        self._value = value

    @property
    def active(self):
        """Gets the active of this TagOptionDetail.


        :return: The active of this TagOptionDetail.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TagOptionDetail.


        :param active: The active of this TagOptionDetail.
        :type active: bool
        """

        self._active = active

    @property
    def id(self):
        """Gets the id of this TagOptionDetail.


        :return: The id of this TagOptionDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TagOptionDetail.


        :param id: The id of this TagOptionDetail.
        :type id: str
        """

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this TagOptionDetail.


        :return: The owner of this TagOptionDetail.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TagOptionDetail.


        :param owner: The owner of this TagOptionDetail.
        :type owner: str
        """

        self._owner = owner
