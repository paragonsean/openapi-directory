/**
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptPortfolioShareInput from '../model/AcceptPortfolioShareInput';
import AssociateBudgetWithResourceInput from '../model/AssociateBudgetWithResourceInput';
import AssociatePrincipalWithPortfolioInput from '../model/AssociatePrincipalWithPortfolioInput';
import AssociateProductWithPortfolioInput from '../model/AssociateProductWithPortfolioInput';
import AssociateServiceActionWithProvisioningArtifactInput from '../model/AssociateServiceActionWithProvisioningArtifactInput';
import AssociateTagOptionWithResourceInput from '../model/AssociateTagOptionWithResourceInput';
import BatchAssociateServiceActionWithProvisioningArtifactInput from '../model/BatchAssociateServiceActionWithProvisioningArtifactInput';
import BatchAssociateServiceActionWithProvisioningArtifactOutput from '../model/BatchAssociateServiceActionWithProvisioningArtifactOutput';
import BatchDisassociateServiceActionFromProvisioningArtifactInput from '../model/BatchDisassociateServiceActionFromProvisioningArtifactInput';
import BatchDisassociateServiceActionFromProvisioningArtifactOutput from '../model/BatchDisassociateServiceActionFromProvisioningArtifactOutput';
import CopyProductInput from '../model/CopyProductInput';
import CopyProductOutput from '../model/CopyProductOutput';
import CreateConstraintInput from '../model/CreateConstraintInput';
import CreateConstraintOutput from '../model/CreateConstraintOutput';
import CreatePortfolioInput from '../model/CreatePortfolioInput';
import CreatePortfolioOutput from '../model/CreatePortfolioOutput';
import CreatePortfolioShareInput from '../model/CreatePortfolioShareInput';
import CreatePortfolioShareOutput from '../model/CreatePortfolioShareOutput';
import CreateProductInput from '../model/CreateProductInput';
import CreateProductOutput from '../model/CreateProductOutput';
import CreateProvisionedProductPlanInput from '../model/CreateProvisionedProductPlanInput';
import CreateProvisionedProductPlanOutput from '../model/CreateProvisionedProductPlanOutput';
import CreateProvisioningArtifactInput from '../model/CreateProvisioningArtifactInput';
import CreateProvisioningArtifactOutput from '../model/CreateProvisioningArtifactOutput';
import CreateServiceActionInput from '../model/CreateServiceActionInput';
import CreateServiceActionOutput from '../model/CreateServiceActionOutput';
import CreateTagOptionInput from '../model/CreateTagOptionInput';
import CreateTagOptionOutput from '../model/CreateTagOptionOutput';
import DeleteConstraintInput from '../model/DeleteConstraintInput';
import DeletePortfolioInput from '../model/DeletePortfolioInput';
import DeletePortfolioShareInput from '../model/DeletePortfolioShareInput';
import DeletePortfolioShareOutput from '../model/DeletePortfolioShareOutput';
import DeleteProductInput from '../model/DeleteProductInput';
import DeleteProvisionedProductPlanInput from '../model/DeleteProvisionedProductPlanInput';
import DeleteProvisioningArtifactInput from '../model/DeleteProvisioningArtifactInput';
import DeleteServiceActionInput from '../model/DeleteServiceActionInput';
import DeleteTagOptionInput from '../model/DeleteTagOptionInput';
import DescribeConstraintInput from '../model/DescribeConstraintInput';
import DescribeConstraintOutput from '../model/DescribeConstraintOutput';
import DescribeCopyProductStatusInput from '../model/DescribeCopyProductStatusInput';
import DescribeCopyProductStatusOutput from '../model/DescribeCopyProductStatusOutput';
import DescribePortfolioInput from '../model/DescribePortfolioInput';
import DescribePortfolioOutput from '../model/DescribePortfolioOutput';
import DescribePortfolioShareStatusInput from '../model/DescribePortfolioShareStatusInput';
import DescribePortfolioShareStatusOutput from '../model/DescribePortfolioShareStatusOutput';
import DescribePortfolioSharesInput from '../model/DescribePortfolioSharesInput';
import DescribePortfolioSharesOutput from '../model/DescribePortfolioSharesOutput';
import DescribeProductAsAdminInput from '../model/DescribeProductAsAdminInput';
import DescribeProductAsAdminOutput from '../model/DescribeProductAsAdminOutput';
import DescribeProductInput from '../model/DescribeProductInput';
import DescribeProductOutput from '../model/DescribeProductOutput';
import DescribeProductViewInput from '../model/DescribeProductViewInput';
import DescribeProductViewOutput from '../model/DescribeProductViewOutput';
import DescribeProvisionedProductInput from '../model/DescribeProvisionedProductInput';
import DescribeProvisionedProductOutput from '../model/DescribeProvisionedProductOutput';
import DescribeProvisionedProductPlanInput from '../model/DescribeProvisionedProductPlanInput';
import DescribeProvisionedProductPlanOutput from '../model/DescribeProvisionedProductPlanOutput';
import DescribeProvisioningArtifactInput from '../model/DescribeProvisioningArtifactInput';
import DescribeProvisioningArtifactOutput from '../model/DescribeProvisioningArtifactOutput';
import DescribeProvisioningParametersInput from '../model/DescribeProvisioningParametersInput';
import DescribeProvisioningParametersOutput from '../model/DescribeProvisioningParametersOutput';
import DescribeRecordInput from '../model/DescribeRecordInput';
import DescribeRecordOutput from '../model/DescribeRecordOutput';
import DescribeServiceActionExecutionParametersInput from '../model/DescribeServiceActionExecutionParametersInput';
import DescribeServiceActionExecutionParametersOutput from '../model/DescribeServiceActionExecutionParametersOutput';
import DescribeServiceActionInput from '../model/DescribeServiceActionInput';
import DescribeServiceActionOutput from '../model/DescribeServiceActionOutput';
import DescribeTagOptionInput from '../model/DescribeTagOptionInput';
import DescribeTagOptionOutput from '../model/DescribeTagOptionOutput';
import DisassociateBudgetFromResourceInput from '../model/DisassociateBudgetFromResourceInput';
import DisassociatePrincipalFromPortfolioInput from '../model/DisassociatePrincipalFromPortfolioInput';
import DisassociateProductFromPortfolioInput from '../model/DisassociateProductFromPortfolioInput';
import DisassociateServiceActionFromProvisioningArtifactInput from '../model/DisassociateServiceActionFromProvisioningArtifactInput';
import DisassociateTagOptionFromResourceInput from '../model/DisassociateTagOptionFromResourceInput';
import ExecuteProvisionedProductPlanInput from '../model/ExecuteProvisionedProductPlanInput';
import ExecuteProvisionedProductPlanOutput from '../model/ExecuteProvisionedProductPlanOutput';
import ExecuteProvisionedProductServiceActionInput from '../model/ExecuteProvisionedProductServiceActionInput';
import ExecuteProvisionedProductServiceActionOutput from '../model/ExecuteProvisionedProductServiceActionOutput';
import GetAWSOrganizationsAccessStatusOutput from '../model/GetAWSOrganizationsAccessStatusOutput';
import GetProvisionedProductOutputsInput from '../model/GetProvisionedProductOutputsInput';
import GetProvisionedProductOutputsOutput from '../model/GetProvisionedProductOutputsOutput';
import ImportAsProvisionedProductInput from '../model/ImportAsProvisionedProductInput';
import ImportAsProvisionedProductOutput from '../model/ImportAsProvisionedProductOutput';
import ListAcceptedPortfolioSharesInput from '../model/ListAcceptedPortfolioSharesInput';
import ListAcceptedPortfolioSharesOutput from '../model/ListAcceptedPortfolioSharesOutput';
import ListBudgetsForResourceInput from '../model/ListBudgetsForResourceInput';
import ListBudgetsForResourceOutput from '../model/ListBudgetsForResourceOutput';
import ListConstraintsForPortfolioInput from '../model/ListConstraintsForPortfolioInput';
import ListConstraintsForPortfolioOutput from '../model/ListConstraintsForPortfolioOutput';
import ListLaunchPathsInput from '../model/ListLaunchPathsInput';
import ListLaunchPathsOutput from '../model/ListLaunchPathsOutput';
import ListOrganizationPortfolioAccessInput from '../model/ListOrganizationPortfolioAccessInput';
import ListOrganizationPortfolioAccessOutput from '../model/ListOrganizationPortfolioAccessOutput';
import ListPortfolioAccessInput from '../model/ListPortfolioAccessInput';
import ListPortfolioAccessOutput from '../model/ListPortfolioAccessOutput';
import ListPortfoliosForProductInput from '../model/ListPortfoliosForProductInput';
import ListPortfoliosForProductOutput from '../model/ListPortfoliosForProductOutput';
import ListPortfoliosInput from '../model/ListPortfoliosInput';
import ListPortfoliosOutput from '../model/ListPortfoliosOutput';
import ListPrincipalsForPortfolioInput from '../model/ListPrincipalsForPortfolioInput';
import ListPrincipalsForPortfolioOutput from '../model/ListPrincipalsForPortfolioOutput';
import ListProvisionedProductPlansInput from '../model/ListProvisionedProductPlansInput';
import ListProvisionedProductPlansOutput from '../model/ListProvisionedProductPlansOutput';
import ListProvisioningArtifactsForServiceActionInput from '../model/ListProvisioningArtifactsForServiceActionInput';
import ListProvisioningArtifactsForServiceActionOutput from '../model/ListProvisioningArtifactsForServiceActionOutput';
import ListProvisioningArtifactsInput from '../model/ListProvisioningArtifactsInput';
import ListProvisioningArtifactsOutput from '../model/ListProvisioningArtifactsOutput';
import ListRecordHistoryInput from '../model/ListRecordHistoryInput';
import ListRecordHistoryOutput from '../model/ListRecordHistoryOutput';
import ListResourcesForTagOptionInput from '../model/ListResourcesForTagOptionInput';
import ListResourcesForTagOptionOutput from '../model/ListResourcesForTagOptionOutput';
import ListServiceActionsForProvisioningArtifactInput from '../model/ListServiceActionsForProvisioningArtifactInput';
import ListServiceActionsForProvisioningArtifactOutput from '../model/ListServiceActionsForProvisioningArtifactOutput';
import ListServiceActionsInput from '../model/ListServiceActionsInput';
import ListServiceActionsOutput from '../model/ListServiceActionsOutput';
import ListStackInstancesForProvisionedProductInput from '../model/ListStackInstancesForProvisionedProductInput';
import ListStackInstancesForProvisionedProductOutput from '../model/ListStackInstancesForProvisionedProductOutput';
import ListTagOptionsInput from '../model/ListTagOptionsInput';
import ListTagOptionsOutput from '../model/ListTagOptionsOutput';
import NotifyProvisionProductEngineWorkflowResultInput from '../model/NotifyProvisionProductEngineWorkflowResultInput';
import NotifyTerminateProvisionedProductEngineWorkflowResultInput from '../model/NotifyTerminateProvisionedProductEngineWorkflowResultInput';
import NotifyUpdateProvisionedProductEngineWorkflowResultInput from '../model/NotifyUpdateProvisionedProductEngineWorkflowResultInput';
import ProvisionProductInput from '../model/ProvisionProductInput';
import ProvisionProductOutput from '../model/ProvisionProductOutput';
import RejectPortfolioShareInput from '../model/RejectPortfolioShareInput';
import ScanProvisionedProductsInput from '../model/ScanProvisionedProductsInput';
import ScanProvisionedProductsOutput from '../model/ScanProvisionedProductsOutput';
import SearchProductsAsAdminInput from '../model/SearchProductsAsAdminInput';
import SearchProductsAsAdminOutput from '../model/SearchProductsAsAdminOutput';
import SearchProductsInput from '../model/SearchProductsInput';
import SearchProductsOutput from '../model/SearchProductsOutput';
import SearchProvisionedProductsInput from '../model/SearchProvisionedProductsInput';
import SearchProvisionedProductsOutput from '../model/SearchProvisionedProductsOutput';
import TerminateProvisionedProductInput from '../model/TerminateProvisionedProductInput';
import TerminateProvisionedProductOutput from '../model/TerminateProvisionedProductOutput';
import UpdateConstraintInput from '../model/UpdateConstraintInput';
import UpdateConstraintOutput from '../model/UpdateConstraintOutput';
import UpdatePortfolioInput from '../model/UpdatePortfolioInput';
import UpdatePortfolioOutput from '../model/UpdatePortfolioOutput';
import UpdatePortfolioShareInput from '../model/UpdatePortfolioShareInput';
import UpdatePortfolioShareOutput from '../model/UpdatePortfolioShareOutput';
import UpdateProductInput from '../model/UpdateProductInput';
import UpdateProductOutput from '../model/UpdateProductOutput';
import UpdateProvisionedProductInput from '../model/UpdateProvisionedProductInput';
import UpdateProvisionedProductOutput from '../model/UpdateProvisionedProductOutput';
import UpdateProvisionedProductPropertiesInput from '../model/UpdateProvisionedProductPropertiesInput';
import UpdateProvisionedProductPropertiesOutput from '../model/UpdateProvisionedProductPropertiesOutput';
import UpdateProvisioningArtifactInput from '../model/UpdateProvisioningArtifactInput';
import UpdateProvisioningArtifactOutput from '../model/UpdateProvisioningArtifactOutput';
import UpdateServiceActionInput from '../model/UpdateServiceActionInput';
import UpdateServiceActionOutput from '../model/UpdateServiceActionOutput';
import UpdateTagOptionInput from '../model/UpdateTagOptionInput';
import UpdateTagOptionOutput from '../model/UpdateTagOptionOutput';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-12-10
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptPortfolioShare operation.
     * @callback module:api/DefaultApi~acceptPortfolioShareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts an offer to share the specified portfolio.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AcceptPortfolioShareInput} acceptPortfolioShareInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~acceptPortfolioShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    acceptPortfolioShare(xAmzTarget, acceptPortfolioShareInput, opts, callback) {
      opts = opts || {};
      let postBody = acceptPortfolioShareInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling acceptPortfolioShare");
      }
      // verify the required parameter 'acceptPortfolioShareInput' is set
      if (acceptPortfolioShareInput === undefined || acceptPortfolioShareInput === null) {
        throw new Error("Missing the required parameter 'acceptPortfolioShareInput' when calling acceptPortfolioShare");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.AcceptPortfolioShare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateBudgetWithResource operation.
     * @callback module:api/DefaultApi~associateBudgetWithResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified budget with the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateBudgetWithResourceInput} associateBudgetWithResourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateBudgetWithResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateBudgetWithResource(xAmzTarget, associateBudgetWithResourceInput, opts, callback) {
      opts = opts || {};
      let postBody = associateBudgetWithResourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateBudgetWithResource");
      }
      // verify the required parameter 'associateBudgetWithResourceInput' is set
      if (associateBudgetWithResourceInput === undefined || associateBudgetWithResourceInput === null) {
        throw new Error("Missing the required parameter 'associateBudgetWithResourceInput' when calling associateBudgetWithResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.AssociateBudgetWithResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associatePrincipalWithPortfolio operation.
     * @callback module:api/DefaultApi~associatePrincipalWithPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates the specified principal ARN with the specified portfolio.</p> <p>If you share the portfolio with principal name sharing enabled, the <code>PrincipalARN</code> association is included in the share. </p> <p>The <code>PortfolioID</code>, <code>PrincipalARN</code>, and <code>PrincipalType</code> parameters are required. </p> <p>You can associate a maximum of 10 Principals with a portfolio using <code>PrincipalType</code> as <code>IAM_PATTERN</code> </p> <note> <p>When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is then shared with other accounts. For a user in a recipient account who is <i>not</i> an Service Catalog Admin, but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal name association for the portfolio. Although this user may not know which principal names are associated through Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then Service Catalog recommends using <code>PrincipalType</code> as <code>IAM</code>. With this configuration, the <code>PrincipalARN</code> must already exist in the recipient account before it can be associated. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociatePrincipalWithPortfolioInput} associatePrincipalWithPortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associatePrincipalWithPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associatePrincipalWithPortfolio(xAmzTarget, associatePrincipalWithPortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = associatePrincipalWithPortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associatePrincipalWithPortfolio");
      }
      // verify the required parameter 'associatePrincipalWithPortfolioInput' is set
      if (associatePrincipalWithPortfolioInput === undefined || associatePrincipalWithPortfolioInput === null) {
        throw new Error("Missing the required parameter 'associatePrincipalWithPortfolioInput' when calling associatePrincipalWithPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.AssociatePrincipalWithPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateProductWithPortfolio operation.
     * @callback module:api/DefaultApi~associateProductWithPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates the specified product with the specified portfolio.</p> <p>A delegated admin is authorized to invoke this command.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateProductWithPortfolioInput} associateProductWithPortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateProductWithPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateProductWithPortfolio(xAmzTarget, associateProductWithPortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = associateProductWithPortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateProductWithPortfolio");
      }
      // verify the required parameter 'associateProductWithPortfolioInput' is set
      if (associateProductWithPortfolioInput === undefined || associateProductWithPortfolioInput === null) {
        throw new Error("Missing the required parameter 'associateProductWithPortfolioInput' when calling associateProductWithPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.AssociateProductWithPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateServiceActionWithProvisioningArtifact operation.
     * @callback module:api/DefaultApi~associateServiceActionWithProvisioningArtifactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a self-service action with a provisioning artifact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateServiceActionWithProvisioningArtifactInput} associateServiceActionWithProvisioningArtifactInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateServiceActionWithProvisioningArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateServiceActionWithProvisioningArtifact(xAmzTarget, associateServiceActionWithProvisioningArtifactInput, opts, callback) {
      opts = opts || {};
      let postBody = associateServiceActionWithProvisioningArtifactInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateServiceActionWithProvisioningArtifact");
      }
      // verify the required parameter 'associateServiceActionWithProvisioningArtifactInput' is set
      if (associateServiceActionWithProvisioningArtifactInput === undefined || associateServiceActionWithProvisioningArtifactInput === null) {
        throw new Error("Missing the required parameter 'associateServiceActionWithProvisioningArtifactInput' when calling associateServiceActionWithProvisioningArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.AssociateServiceActionWithProvisioningArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateTagOptionWithResource operation.
     * @callback module:api/DefaultApi~associateTagOptionWithResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate the specified TagOption with the specified portfolio or product.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateTagOptionWithResourceInput} associateTagOptionWithResourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateTagOptionWithResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateTagOptionWithResource(xAmzTarget, associateTagOptionWithResourceInput, opts, callback) {
      opts = opts || {};
      let postBody = associateTagOptionWithResourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateTagOptionWithResource");
      }
      // verify the required parameter 'associateTagOptionWithResourceInput' is set
      if (associateTagOptionWithResourceInput === undefined || associateTagOptionWithResourceInput === null) {
        throw new Error("Missing the required parameter 'associateTagOptionWithResourceInput' when calling associateTagOptionWithResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.AssociateTagOptionWithResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchAssociateServiceActionWithProvisioningArtifact operation.
     * @callback module:api/DefaultApi~batchAssociateServiceActionWithProvisioningArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchAssociateServiceActionWithProvisioningArtifactOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates multiple self-service actions with provisioning artifacts.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchAssociateServiceActionWithProvisioningArtifactInput} batchAssociateServiceActionWithProvisioningArtifactInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchAssociateServiceActionWithProvisioningArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchAssociateServiceActionWithProvisioningArtifactOutput}
     */
    batchAssociateServiceActionWithProvisioningArtifact(xAmzTarget, batchAssociateServiceActionWithProvisioningArtifactInput, opts, callback) {
      opts = opts || {};
      let postBody = batchAssociateServiceActionWithProvisioningArtifactInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchAssociateServiceActionWithProvisioningArtifact");
      }
      // verify the required parameter 'batchAssociateServiceActionWithProvisioningArtifactInput' is set
      if (batchAssociateServiceActionWithProvisioningArtifactInput === undefined || batchAssociateServiceActionWithProvisioningArtifactInput === null) {
        throw new Error("Missing the required parameter 'batchAssociateServiceActionWithProvisioningArtifactInput' when calling batchAssociateServiceActionWithProvisioningArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchAssociateServiceActionWithProvisioningArtifactOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.BatchAssociateServiceActionWithProvisioningArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDisassociateServiceActionFromProvisioningArtifact operation.
     * @callback module:api/DefaultApi~batchDisassociateServiceActionFromProvisioningArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDisassociateServiceActionFromProvisioningArtifactOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a batch of self-service actions from the specified provisioning artifact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchDisassociateServiceActionFromProvisioningArtifactInput} batchDisassociateServiceActionFromProvisioningArtifactInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDisassociateServiceActionFromProvisioningArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDisassociateServiceActionFromProvisioningArtifactOutput}
     */
    batchDisassociateServiceActionFromProvisioningArtifact(xAmzTarget, batchDisassociateServiceActionFromProvisioningArtifactInput, opts, callback) {
      opts = opts || {};
      let postBody = batchDisassociateServiceActionFromProvisioningArtifactInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchDisassociateServiceActionFromProvisioningArtifact");
      }
      // verify the required parameter 'batchDisassociateServiceActionFromProvisioningArtifactInput' is set
      if (batchDisassociateServiceActionFromProvisioningArtifactInput === undefined || batchDisassociateServiceActionFromProvisioningArtifactInput === null) {
        throw new Error("Missing the required parameter 'batchDisassociateServiceActionFromProvisioningArtifactInput' when calling batchDisassociateServiceActionFromProvisioningArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDisassociateServiceActionFromProvisioningArtifactOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.BatchDisassociateServiceActionFromProvisioningArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyProduct operation.
     * @callback module:api/DefaultApi~copyProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Copies the specified source product to the specified target product or a new product.</p> <p>You can copy a product to the same account or another account. You can copy a product to the same Region or another Region. If you copy a product to another account, you must first share the product in a portfolio using <a>CreatePortfolioShare</a>.</p> <p>This operation is performed asynchronously. To track the progress of the operation, use <a>DescribeCopyProductStatus</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CopyProductInput} copyProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~copyProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyProductOutput}
     */
    copyProduct(xAmzTarget, copyProductInput, opts, callback) {
      opts = opts || {};
      let postBody = copyProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling copyProduct");
      }
      // verify the required parameter 'copyProductInput' is set
      if (copyProductInput === undefined || copyProductInput === null) {
        throw new Error("Missing the required parameter 'copyProductInput' when calling copyProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CopyProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.CopyProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConstraint operation.
     * @callback module:api/DefaultApi~createConstraintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConstraintOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a constraint.</p> <p>A delegated admin is authorized to invoke this command.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateConstraintInput} createConstraintInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConstraintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConstraintOutput}
     */
    createConstraint(xAmzTarget, createConstraintInput, opts, callback) {
      opts = opts || {};
      let postBody = createConstraintInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createConstraint");
      }
      // verify the required parameter 'createConstraintInput' is set
      if (createConstraintInput === undefined || createConstraintInput === null) {
        throw new Error("Missing the required parameter 'createConstraintInput' when calling createConstraint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConstraintOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.CreateConstraint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolio operation.
     * @callback module:api/DefaultApi~createPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolioOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a portfolio.</p> <p>A delegated admin is authorized to invoke this command.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePortfolioInput} createPortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolioOutput}
     */
    createPortfolio(xAmzTarget, createPortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = createPortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPortfolio");
      }
      // verify the required parameter 'createPortfolioInput' is set
      if (createPortfolioInput === undefined || createPortfolioInput === null) {
        throw new Error("Missing the required parameter 'createPortfolioInput' when calling createPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePortfolioOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.CreatePortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioShare operation.
     * @callback module:api/DefaultApi~createPortfolioShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolioShareOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Shares the specified portfolio with the specified account or organization node. Shares to an organization node can only be created by the management account of an organization or by a delegated administrator. You can share portfolios to an organization, an organizational unit, or a specific account.</p> <p>Note that if a delegated admin is de-registered, they can no longer create portfolio shares.</p> <p> <code>AWSOrganizationsAccess</code> must be enabled in order to create a portfolio share to an organization node.</p> <p>You can't share a shared resource, including portfolios that contain a shared product.</p> <p>If the portfolio share with the specified account or organization node already exists, this action will have no effect and will not return an error. To update an existing share, you must use the <code> UpdatePortfolioShare</code> API instead. </p> <note> <p>When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is then shared with other accounts. For a user in a recipient account who is <i>not</i> an Service Catalog Admin, but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal name association for the portfolio. Although this user may not know which principal names are associated through Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then Service Catalog recommends using <code>PrincipalType</code> as <code>IAM</code>. With this configuration, the <code>PrincipalARN</code> must already exist in the recipient account before it can be associated. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePortfolioShareInput} createPortfolioShareInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPortfolioShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolioShareOutput}
     */
    createPortfolioShare(xAmzTarget, createPortfolioShareInput, opts, callback) {
      opts = opts || {};
      let postBody = createPortfolioShareInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPortfolioShare");
      }
      // verify the required parameter 'createPortfolioShareInput' is set
      if (createPortfolioShareInput === undefined || createPortfolioShareInput === null) {
        throw new Error("Missing the required parameter 'createPortfolioShareInput' when calling createPortfolioShare");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePortfolioShareOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.CreatePortfolioShare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProduct operation.
     * @callback module:api/DefaultApi~createProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a product.</p> <p>A delegated admin is authorized to invoke this command.</p> <p>The user or role that performs this operation must have the <code>cloudformation:GetTemplate</code> IAM policy permission. This policy permission is required when using the <code>ImportFromPhysicalId</code> template source in the information data section.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateProductInput} createProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProductOutput}
     */
    createProduct(xAmzTarget, createProductInput, opts, callback) {
      opts = opts || {};
      let postBody = createProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createProduct");
      }
      // verify the required parameter 'createProductInput' is set
      if (createProductInput === undefined || createProductInput === null) {
        throw new Error("Missing the required parameter 'createProductInput' when calling createProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.CreateProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProvisionedProductPlan operation.
     * @callback module:api/DefaultApi~createProvisionedProductPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProvisionedProductPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a plan.</p> <p>A plan includes the list of resources to be created (when provisioning a new product) or modified (when updating a provisioned product) when the plan is executed.</p> <p>You can create one plan for each provisioned product. To create a plan for an existing provisioned product, the product status must be AVAILABLE or TAINTED.</p> <p>To view the resource changes in the change set, use <a>DescribeProvisionedProductPlan</a>. To create or modify the provisioned product, use <a>ExecuteProvisionedProductPlan</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateProvisionedProductPlanInput} createProvisionedProductPlanInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProvisionedProductPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProvisionedProductPlanOutput}
     */
    createProvisionedProductPlan(xAmzTarget, createProvisionedProductPlanInput, opts, callback) {
      opts = opts || {};
      let postBody = createProvisionedProductPlanInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createProvisionedProductPlan");
      }
      // verify the required parameter 'createProvisionedProductPlanInput' is set
      if (createProvisionedProductPlanInput === undefined || createProvisionedProductPlanInput === null) {
        throw new Error("Missing the required parameter 'createProvisionedProductPlanInput' when calling createProvisionedProductPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProvisionedProductPlanOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.CreateProvisionedProductPlan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProvisioningArtifact operation.
     * @callback module:api/DefaultApi~createProvisioningArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProvisioningArtifactOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a provisioning artifact (also known as a version) for the specified product.</p> <p>You cannot create a provisioning artifact for a product that was shared with you.</p> <p>The user or role that performs this operation must have the <code>cloudformation:GetTemplate</code> IAM policy permission. This policy permission is required when using the <code>ImportFromPhysicalId</code> template source in the information data section.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateProvisioningArtifactInput} createProvisioningArtifactInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProvisioningArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProvisioningArtifactOutput}
     */
    createProvisioningArtifact(xAmzTarget, createProvisioningArtifactInput, opts, callback) {
      opts = opts || {};
      let postBody = createProvisioningArtifactInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createProvisioningArtifact");
      }
      // verify the required parameter 'createProvisioningArtifactInput' is set
      if (createProvisioningArtifactInput === undefined || createProvisioningArtifactInput === null) {
        throw new Error("Missing the required parameter 'createProvisioningArtifactInput' when calling createProvisioningArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProvisioningArtifactOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.CreateProvisioningArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceAction operation.
     * @callback module:api/DefaultApi~createServiceActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServiceActionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a self-service action.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateServiceActionInput} createServiceActionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createServiceActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServiceActionOutput}
     */
    createServiceAction(xAmzTarget, createServiceActionInput, opts, callback) {
      opts = opts || {};
      let postBody = createServiceActionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createServiceAction");
      }
      // verify the required parameter 'createServiceActionInput' is set
      if (createServiceActionInput === undefined || createServiceActionInput === null) {
        throw new Error("Missing the required parameter 'createServiceActionInput' when calling createServiceAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServiceActionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.CreateServiceAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTagOption operation.
     * @callback module:api/DefaultApi~createTagOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTagOptionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TagOption.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTagOptionInput} createTagOptionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTagOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTagOptionOutput}
     */
    createTagOption(xAmzTarget, createTagOptionInput, opts, callback) {
      opts = opts || {};
      let postBody = createTagOptionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTagOption");
      }
      // verify the required parameter 'createTagOptionInput' is set
      if (createTagOptionInput === undefined || createTagOptionInput === null) {
        throw new Error("Missing the required parameter 'createTagOptionInput' when calling createTagOption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTagOptionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.CreateTagOption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConstraint operation.
     * @callback module:api/DefaultApi~deleteConstraintCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified constraint.</p> <p>A delegated admin is authorized to invoke this command.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteConstraintInput} deleteConstraintInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConstraintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConstraint(xAmzTarget, deleteConstraintInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteConstraintInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteConstraint");
      }
      // verify the required parameter 'deleteConstraintInput' is set
      if (deleteConstraintInput === undefined || deleteConstraintInput === null) {
        throw new Error("Missing the required parameter 'deleteConstraintInput' when calling deleteConstraint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DeleteConstraint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolio operation.
     * @callback module:api/DefaultApi~deletePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified portfolio.</p> <p>You cannot delete a portfolio if it was shared with you or if it has associated products, users, constraints, or shared accounts.</p> <p>A delegated admin is authorized to invoke this command.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePortfolioInput} deletePortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePortfolio(xAmzTarget, deletePortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = deletePortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePortfolio");
      }
      // verify the required parameter 'deletePortfolioInput' is set
      if (deletePortfolioInput === undefined || deletePortfolioInput === null) {
        throw new Error("Missing the required parameter 'deletePortfolioInput' when calling deletePortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DeletePortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioShare operation.
     * @callback module:api/DefaultApi~deletePortfolioShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePortfolioShareOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops sharing the specified portfolio with the specified account or organization node. Shares to an organization node can only be deleted by the management account of an organization or by a delegated administrator.</p> <p>Note that if a delegated admin is de-registered, portfolio shares created from that account are removed.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePortfolioShareInput} deletePortfolioShareInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePortfolioShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePortfolioShareOutput}
     */
    deletePortfolioShare(xAmzTarget, deletePortfolioShareInput, opts, callback) {
      opts = opts || {};
      let postBody = deletePortfolioShareInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePortfolioShare");
      }
      // verify the required parameter 'deletePortfolioShareInput' is set
      if (deletePortfolioShareInput === undefined || deletePortfolioShareInput === null) {
        throw new Error("Missing the required parameter 'deletePortfolioShareInput' when calling deletePortfolioShare");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeletePortfolioShareOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DeletePortfolioShare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProduct operation.
     * @callback module:api/DefaultApi~deleteProductCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified product.</p> <p>You cannot delete a product if it was shared with you or is associated with a portfolio.</p> <p>A delegated admin is authorized to invoke this command.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteProductInput} deleteProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteProduct(xAmzTarget, deleteProductInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteProduct");
      }
      // verify the required parameter 'deleteProductInput' is set
      if (deleteProductInput === undefined || deleteProductInput === null) {
        throw new Error("Missing the required parameter 'deleteProductInput' when calling deleteProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DeleteProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProvisionedProductPlan operation.
     * @callback module:api/DefaultApi~deleteProvisionedProductPlanCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified plan.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteProvisionedProductPlanInput} deleteProvisionedProductPlanInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProvisionedProductPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteProvisionedProductPlan(xAmzTarget, deleteProvisionedProductPlanInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteProvisionedProductPlanInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteProvisionedProductPlan");
      }
      // verify the required parameter 'deleteProvisionedProductPlanInput' is set
      if (deleteProvisionedProductPlanInput === undefined || deleteProvisionedProductPlanInput === null) {
        throw new Error("Missing the required parameter 'deleteProvisionedProductPlanInput' when calling deleteProvisionedProductPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DeleteProvisionedProductPlan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProvisioningArtifact operation.
     * @callback module:api/DefaultApi~deleteProvisioningArtifactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified provisioning artifact (also known as a version) for the specified product.</p> <p>You cannot delete a provisioning artifact associated with a product that was shared with you. You cannot delete the last provisioning artifact for a product, because a product must have at least one provisioning artifact.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteProvisioningArtifactInput} deleteProvisioningArtifactInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProvisioningArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteProvisioningArtifact(xAmzTarget, deleteProvisioningArtifactInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteProvisioningArtifactInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteProvisioningArtifact");
      }
      // verify the required parameter 'deleteProvisioningArtifactInput' is set
      if (deleteProvisioningArtifactInput === undefined || deleteProvisioningArtifactInput === null) {
        throw new Error("Missing the required parameter 'deleteProvisioningArtifactInput' when calling deleteProvisioningArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DeleteProvisioningArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceAction operation.
     * @callback module:api/DefaultApi~deleteServiceActionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a self-service action.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteServiceActionInput} deleteServiceActionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteServiceActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteServiceAction(xAmzTarget, deleteServiceActionInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteServiceActionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteServiceAction");
      }
      // verify the required parameter 'deleteServiceActionInput' is set
      if (deleteServiceActionInput === undefined || deleteServiceActionInput === null) {
        throw new Error("Missing the required parameter 'deleteServiceActionInput' when calling deleteServiceAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DeleteServiceAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTagOption operation.
     * @callback module:api/DefaultApi~deleteTagOptionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified TagOption.</p> <p>You cannot delete a TagOption if it is associated with a product or portfolio.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTagOptionInput} deleteTagOptionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTagOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTagOption(xAmzTarget, deleteTagOptionInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteTagOptionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTagOption");
      }
      // verify the required parameter 'deleteTagOptionInput' is set
      if (deleteTagOptionInput === undefined || deleteTagOptionInput === null) {
        throw new Error("Missing the required parameter 'deleteTagOptionInput' when calling deleteTagOption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DeleteTagOption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConstraint operation.
     * @callback module:api/DefaultApi~describeConstraintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConstraintOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified constraint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeConstraintInput} describeConstraintInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConstraintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConstraintOutput}
     */
    describeConstraint(xAmzTarget, describeConstraintInput, opts, callback) {
      opts = opts || {};
      let postBody = describeConstraintInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeConstraint");
      }
      // verify the required parameter 'describeConstraintInput' is set
      if (describeConstraintInput === undefined || describeConstraintInput === null) {
        throw new Error("Missing the required parameter 'describeConstraintInput' when calling describeConstraint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeConstraintOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeConstraint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCopyProductStatus operation.
     * @callback module:api/DefaultApi~describeCopyProductStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeCopyProductStatusOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of the specified copy product operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeCopyProductStatusInput} describeCopyProductStatusInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeCopyProductStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeCopyProductStatusOutput}
     */
    describeCopyProductStatus(xAmzTarget, describeCopyProductStatusInput, opts, callback) {
      opts = opts || {};
      let postBody = describeCopyProductStatusInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeCopyProductStatus");
      }
      // verify the required parameter 'describeCopyProductStatusInput' is set
      if (describeCopyProductStatusInput === undefined || describeCopyProductStatusInput === null) {
        throw new Error("Missing the required parameter 'describeCopyProductStatusInput' when calling describeCopyProductStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeCopyProductStatusOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeCopyProductStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePortfolio operation.
     * @callback module:api/DefaultApi~describePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePortfolioOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about the specified portfolio.</p> <p>A delegated admin is authorized to invoke this command.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePortfolioInput} describePortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePortfolioOutput}
     */
    describePortfolio(xAmzTarget, describePortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = describePortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePortfolio");
      }
      // verify the required parameter 'describePortfolioInput' is set
      if (describePortfolioInput === undefined || describePortfolioInput === null) {
        throw new Error("Missing the required parameter 'describePortfolioInput' when calling describePortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePortfolioOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribePortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePortfolioShareStatus operation.
     * @callback module:api/DefaultApi~describePortfolioShareStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePortfolioShareStatusOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of the specified portfolio share operation. This API can only be called by the management account in the organization or by a delegated admin.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePortfolioShareStatusInput} describePortfolioShareStatusInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePortfolioShareStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePortfolioShareStatusOutput}
     */
    describePortfolioShareStatus(xAmzTarget, describePortfolioShareStatusInput, opts, callback) {
      opts = opts || {};
      let postBody = describePortfolioShareStatusInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePortfolioShareStatus");
      }
      // verify the required parameter 'describePortfolioShareStatusInput' is set
      if (describePortfolioShareStatusInput === undefined || describePortfolioShareStatusInput === null) {
        throw new Error("Missing the required parameter 'describePortfolioShareStatusInput' when calling describePortfolioShareStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePortfolioShareStatusOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribePortfolioShareStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePortfolioShares operation.
     * @callback module:api/DefaultApi~describePortfolioSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePortfolioSharesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a summary of each of the portfolio shares that were created for the specified portfolio.</p> <p>You can use this API to determine which accounts or organizational nodes this portfolio have been shared, whether the recipient entity has imported the share, and whether TagOptions are included with the share.</p> <p>The <code>PortfolioId</code> and <code>Type</code> parameters are both required.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePortfolioSharesInput} describePortfolioSharesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~describePortfolioSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePortfolioSharesOutput}
     */
    describePortfolioShares(xAmzTarget, describePortfolioSharesInput, opts, callback) {
      opts = opts || {};
      let postBody = describePortfolioSharesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePortfolioShares");
      }
      // verify the required parameter 'describePortfolioSharesInput' is set
      if (describePortfolioSharesInput === undefined || describePortfolioSharesInput === null) {
        throw new Error("Missing the required parameter 'describePortfolioSharesInput' when calling describePortfolioShares");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePortfolioSharesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribePortfolioShares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProduct operation.
     * @callback module:api/DefaultApi~describeProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about the specified product.</p> <note> <p> Running this operation with administrator access results in a failure. <a>DescribeProductAsAdmin</a> should be used instead. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProductInput} describeProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProductOutput}
     */
    describeProduct(xAmzTarget, describeProductInput, opts, callback) {
      opts = opts || {};
      let postBody = describeProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProduct");
      }
      // verify the required parameter 'describeProductInput' is set
      if (describeProductInput === undefined || describeProductInput === null) {
        throw new Error("Missing the required parameter 'describeProductInput' when calling describeProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProductAsAdmin operation.
     * @callback module:api/DefaultApi~describeProductAsAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProductAsAdminOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified product. This operation is run with administrator access.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProductAsAdminInput} describeProductAsAdminInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProductAsAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProductAsAdminOutput}
     */
    describeProductAsAdmin(xAmzTarget, describeProductAsAdminInput, opts, callback) {
      opts = opts || {};
      let postBody = describeProductAsAdminInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProductAsAdmin");
      }
      // verify the required parameter 'describeProductAsAdminInput' is set
      if (describeProductAsAdminInput === undefined || describeProductAsAdminInput === null) {
        throw new Error("Missing the required parameter 'describeProductAsAdminInput' when calling describeProductAsAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProductAsAdminOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeProductAsAdmin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProductView operation.
     * @callback module:api/DefaultApi~describeProductViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProductViewOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified product.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProductViewInput} describeProductViewInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProductViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProductViewOutput}
     */
    describeProductView(xAmzTarget, describeProductViewInput, opts, callback) {
      opts = opts || {};
      let postBody = describeProductViewInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProductView");
      }
      // verify the required parameter 'describeProductViewInput' is set
      if (describeProductViewInput === undefined || describeProductViewInput === null) {
        throw new Error("Missing the required parameter 'describeProductViewInput' when calling describeProductView");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProductViewOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeProductView', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProvisionedProduct operation.
     * @callback module:api/DefaultApi~describeProvisionedProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProvisionedProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified provisioned product.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProvisionedProductInput} describeProvisionedProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProvisionedProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProvisionedProductOutput}
     */
    describeProvisionedProduct(xAmzTarget, describeProvisionedProductInput, opts, callback) {
      opts = opts || {};
      let postBody = describeProvisionedProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProvisionedProduct");
      }
      // verify the required parameter 'describeProvisionedProductInput' is set
      if (describeProvisionedProductInput === undefined || describeProvisionedProductInput === null) {
        throw new Error("Missing the required parameter 'describeProvisionedProductInput' when calling describeProvisionedProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProvisionedProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisionedProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProvisionedProductPlan operation.
     * @callback module:api/DefaultApi~describeProvisionedProductPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProvisionedProductPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the resource changes for the specified plan.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProvisionedProductPlanInput} describeProvisionedProductPlanInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProvisionedProductPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProvisionedProductPlanOutput}
     */
    describeProvisionedProductPlan(xAmzTarget, describeProvisionedProductPlanInput, opts, callback) {
      opts = opts || {};
      let postBody = describeProvisionedProductPlanInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProvisionedProductPlan");
      }
      // verify the required parameter 'describeProvisionedProductPlanInput' is set
      if (describeProvisionedProductPlanInput === undefined || describeProvisionedProductPlanInput === null) {
        throw new Error("Missing the required parameter 'describeProvisionedProductPlanInput' when calling describeProvisionedProductPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProvisionedProductPlanOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisionedProductPlan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProvisioningArtifact operation.
     * @callback module:api/DefaultApi~describeProvisioningArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProvisioningArtifactOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified provisioning artifact (also known as a version) for the specified product.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProvisioningArtifactInput} describeProvisioningArtifactInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProvisioningArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProvisioningArtifactOutput}
     */
    describeProvisioningArtifact(xAmzTarget, describeProvisioningArtifactInput, opts, callback) {
      opts = opts || {};
      let postBody = describeProvisioningArtifactInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProvisioningArtifact");
      }
      // verify the required parameter 'describeProvisioningArtifactInput' is set
      if (describeProvisioningArtifactInput === undefined || describeProvisioningArtifactInput === null) {
        throw new Error("Missing the required parameter 'describeProvisioningArtifactInput' when calling describeProvisioningArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProvisioningArtifactOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisioningArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProvisioningParameters operation.
     * @callback module:api/DefaultApi~describeProvisioningParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProvisioningParametersOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about the configuration required to provision the specified product using the specified provisioning artifact.</p> <p>If the output contains a TagOption key with an empty list of values, there is a TagOption conflict for that key. The end user cannot take action to fix the conflict, and launch is not blocked. In subsequent calls to <a>ProvisionProduct</a>, do not include conflicted TagOption keys as tags, or this causes the error \"Parameter validation failed: Missing required parameter in Tags[<i>N</i>]:<i>Value</i>\". Tag the provisioned product with the value <code>sc-tagoption-conflict-portfolioId-productId</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProvisioningParametersInput} describeProvisioningParametersInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProvisioningParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProvisioningParametersOutput}
     */
    describeProvisioningParameters(xAmzTarget, describeProvisioningParametersInput, opts, callback) {
      opts = opts || {};
      let postBody = describeProvisioningParametersInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProvisioningParameters");
      }
      // verify the required parameter 'describeProvisioningParametersInput' is set
      if (describeProvisioningParametersInput === undefined || describeProvisioningParametersInput === null) {
        throw new Error("Missing the required parameter 'describeProvisioningParametersInput' when calling describeProvisioningParameters");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProvisioningParametersOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisioningParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRecord operation.
     * @callback module:api/DefaultApi~describeRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRecordOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about the specified request operation.</p> <p>Use this operation after calling a request operation (for example, <a>ProvisionProduct</a>, <a>TerminateProvisionedProduct</a>, or <a>UpdateProvisionedProduct</a>). </p> <note> <p>If a provisioned product was transferred to a new owner using <a>UpdateProvisionedProductProperties</a>, the new owner will be able to describe all past records for that product. The previous owner will no longer be able to describe the records, but will be able to use <a>ListRecordHistory</a> to see the product's history from when he was the owner.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeRecordInput} describeRecordInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRecordOutput}
     */
    describeRecord(xAmzTarget, describeRecordInput, opts, callback) {
      opts = opts || {};
      let postBody = describeRecordInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeRecord");
      }
      // verify the required parameter 'describeRecordInput' is set
      if (describeRecordInput === undefined || describeRecordInput === null) {
        throw new Error("Missing the required parameter 'describeRecordInput' when calling describeRecord");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRecordOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeRecord', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeServiceAction operation.
     * @callback module:api/DefaultApi~describeServiceActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServiceActionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a self-service action.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeServiceActionInput} describeServiceActionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeServiceActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServiceActionOutput}
     */
    describeServiceAction(xAmzTarget, describeServiceActionInput, opts, callback) {
      opts = opts || {};
      let postBody = describeServiceActionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeServiceAction");
      }
      // verify the required parameter 'describeServiceActionInput' is set
      if (describeServiceActionInput === undefined || describeServiceActionInput === null) {
        throw new Error("Missing the required parameter 'describeServiceActionInput' when calling describeServiceAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeServiceActionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeServiceAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeServiceActionExecutionParameters operation.
     * @callback module:api/DefaultApi~describeServiceActionExecutionParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServiceActionExecutionParametersOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds the default parameters for a specific self-service action on a specific provisioned product and returns a map of the results to the user.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeServiceActionExecutionParametersInput} describeServiceActionExecutionParametersInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeServiceActionExecutionParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServiceActionExecutionParametersOutput}
     */
    describeServiceActionExecutionParameters(xAmzTarget, describeServiceActionExecutionParametersInput, opts, callback) {
      opts = opts || {};
      let postBody = describeServiceActionExecutionParametersInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeServiceActionExecutionParameters");
      }
      // verify the required parameter 'describeServiceActionExecutionParametersInput' is set
      if (describeServiceActionExecutionParametersInput === undefined || describeServiceActionExecutionParametersInput === null) {
        throw new Error("Missing the required parameter 'describeServiceActionExecutionParametersInput' when calling describeServiceActionExecutionParameters");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeServiceActionExecutionParametersOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeServiceActionExecutionParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTagOption operation.
     * @callback module:api/DefaultApi~describeTagOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTagOptionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified TagOption.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTagOptionInput} describeTagOptionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTagOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTagOptionOutput}
     */
    describeTagOption(xAmzTarget, describeTagOptionInput, opts, callback) {
      opts = opts || {};
      let postBody = describeTagOptionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTagOption");
      }
      // verify the required parameter 'describeTagOptionInput' is set
      if (describeTagOptionInput === undefined || describeTagOptionInput === null) {
        throw new Error("Missing the required parameter 'describeTagOptionInput' when calling describeTagOption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTagOptionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DescribeTagOption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableAWSOrganizationsAccess operation.
     * @callback module:api/DefaultApi~disableAWSOrganizationsAccessCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disable portfolio sharing through the Organizations service. This command will not delete your current shares, but prevents you from creating new shares throughout your organization. Current shares are not kept in sync with your organization structure if the structure changes after calling this API. Only the management account in the organization can call this API.</p> <p>You cannot call this API if there are active delegated administrators in the organization.</p> <p>Note that a delegated administrator is not authorized to invoke <code>DisableAWSOrganizationsAccess</code>.</p> <important> <p>If you share an Service Catalog portfolio in an organization within Organizations, and then disable Organizations access for Service Catalog, the portfolio access permissions will not sync with the latest changes to the organization structure. Specifically, accounts that you removed from the organization after disabling Service Catalog access will retain access to the previously shared portfolio.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disableAWSOrganizationsAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disableAWSOrganizationsAccess(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disableAWSOrganizationsAccess");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling disableAWSOrganizationsAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DisableAWSOrganizationsAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateBudgetFromResource operation.
     * @callback module:api/DefaultApi~disassociateBudgetFromResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the specified budget from the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateBudgetFromResourceInput} disassociateBudgetFromResourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateBudgetFromResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateBudgetFromResource(xAmzTarget, disassociateBudgetFromResourceInput, opts, callback) {
      opts = opts || {};
      let postBody = disassociateBudgetFromResourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateBudgetFromResource");
      }
      // verify the required parameter 'disassociateBudgetFromResourceInput' is set
      if (disassociateBudgetFromResourceInput === undefined || disassociateBudgetFromResourceInput === null) {
        throw new Error("Missing the required parameter 'disassociateBudgetFromResourceInput' when calling disassociateBudgetFromResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DisassociateBudgetFromResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociatePrincipalFromPortfolio operation.
     * @callback module:api/DefaultApi~disassociatePrincipalFromPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disassociates a previously associated principal ARN from a specified portfolio.</p> <p>The <code>PrincipalType</code> and <code>PrincipalARN</code> must match the <code>AssociatePrincipalWithPortfolio</code> call request details. For example, to disassociate an association created with a <code>PrincipalARN</code> of <code>PrincipalType</code> IAM you must use the <code>PrincipalType</code> IAM when calling <code>DisassociatePrincipalFromPortfolio</code>. </p> <p>For portfolios that have been shared with principal name sharing enabled: after disassociating a principal, share recipient accounts will no longer be able to provision products in this portfolio using a role matching the name of the associated principal. </p> <p>For more information, review <a href=\"https://docs.aws.amazon.com/cli/latest/reference/servicecatalog/associate-principal-with-portfolio.html#options\">associate-principal-with-portfolio</a> in the Amazon Web Services CLI Command Reference. </p> <note> <p>If you disassociate a principal from a portfolio, with PrincipalType as <code>IAM</code>, the same principal will still have access to the portfolio if it matches one of the associated principals of type <code>IAM_PATTERN</code>. To fully remove access for a principal, verify all the associated Principals of type <code>IAM_PATTERN</code>, and then ensure you disassociate any <code>IAM_PATTERN</code> principals that match the principal whose access you are removing.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociatePrincipalFromPortfolioInput} disassociatePrincipalFromPortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociatePrincipalFromPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociatePrincipalFromPortfolio(xAmzTarget, disassociatePrincipalFromPortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = disassociatePrincipalFromPortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociatePrincipalFromPortfolio");
      }
      // verify the required parameter 'disassociatePrincipalFromPortfolioInput' is set
      if (disassociatePrincipalFromPortfolioInput === undefined || disassociatePrincipalFromPortfolioInput === null) {
        throw new Error("Missing the required parameter 'disassociatePrincipalFromPortfolioInput' when calling disassociatePrincipalFromPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DisassociatePrincipalFromPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateProductFromPortfolio operation.
     * @callback module:api/DefaultApi~disassociateProductFromPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disassociates the specified product from the specified portfolio. </p> <p>A delegated admin is authorized to invoke this command.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateProductFromPortfolioInput} disassociateProductFromPortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateProductFromPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateProductFromPortfolio(xAmzTarget, disassociateProductFromPortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = disassociateProductFromPortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateProductFromPortfolio");
      }
      // verify the required parameter 'disassociateProductFromPortfolioInput' is set
      if (disassociateProductFromPortfolioInput === undefined || disassociateProductFromPortfolioInput === null) {
        throw new Error("Missing the required parameter 'disassociateProductFromPortfolioInput' when calling disassociateProductFromPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DisassociateProductFromPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateServiceActionFromProvisioningArtifact operation.
     * @callback module:api/DefaultApi~disassociateServiceActionFromProvisioningArtifactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the specified self-service action association from the specified provisioning artifact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateServiceActionFromProvisioningArtifactInput} disassociateServiceActionFromProvisioningArtifactInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateServiceActionFromProvisioningArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateServiceActionFromProvisioningArtifact(xAmzTarget, disassociateServiceActionFromProvisioningArtifactInput, opts, callback) {
      opts = opts || {};
      let postBody = disassociateServiceActionFromProvisioningArtifactInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateServiceActionFromProvisioningArtifact");
      }
      // verify the required parameter 'disassociateServiceActionFromProvisioningArtifactInput' is set
      if (disassociateServiceActionFromProvisioningArtifactInput === undefined || disassociateServiceActionFromProvisioningArtifactInput === null) {
        throw new Error("Missing the required parameter 'disassociateServiceActionFromProvisioningArtifactInput' when calling disassociateServiceActionFromProvisioningArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DisassociateServiceActionFromProvisioningArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateTagOptionFromResource operation.
     * @callback module:api/DefaultApi~disassociateTagOptionFromResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the specified TagOption from the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateTagOptionFromResourceInput} disassociateTagOptionFromResourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateTagOptionFromResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateTagOptionFromResource(xAmzTarget, disassociateTagOptionFromResourceInput, opts, callback) {
      opts = opts || {};
      let postBody = disassociateTagOptionFromResourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateTagOptionFromResource");
      }
      // verify the required parameter 'disassociateTagOptionFromResourceInput' is set
      if (disassociateTagOptionFromResourceInput === undefined || disassociateTagOptionFromResourceInput === null) {
        throw new Error("Missing the required parameter 'disassociateTagOptionFromResourceInput' when calling disassociateTagOptionFromResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.DisassociateTagOptionFromResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableAWSOrganizationsAccess operation.
     * @callback module:api/DefaultApi~enableAWSOrganizationsAccessCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Enable portfolio sharing feature through Organizations. This API will allow Service Catalog to receive updates on your organization in order to sync your shares with the current structure. This API can only be called by the management account in the organization.</p> <p>When you call this API, Service Catalog calls <code>organizations:EnableAWSServiceAccess</code> on your behalf so that your shares stay in sync with any changes in your Organizations structure.</p> <p>Note that a delegated administrator is not authorized to invoke <code>EnableAWSOrganizationsAccess</code>.</p> <important> <p>If you have previously disabled Organizations access for Service Catalog, and then enable access again, the portfolio access permissions might not sync with the latest changes to the organization structure. Specifically, accounts that you removed from the organization after disabling Service Catalog access, and before you enabled access again, can retain access to the previously shared portfolio. As a result, an account that has been removed from the organization might still be able to create or manage Amazon Web Services resources when it is no longer authorized to do so. Amazon Web Services is working to resolve this issue.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~enableAWSOrganizationsAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    enableAWSOrganizationsAccess(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling enableAWSOrganizationsAccess");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling enableAWSOrganizationsAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.EnableAWSOrganizationsAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeProvisionedProductPlan operation.
     * @callback module:api/DefaultApi~executeProvisionedProductPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecuteProvisionedProductPlanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions or modifies a product based on the resource changes for the specified plan.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ExecuteProvisionedProductPlanInput} executeProvisionedProductPlanInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~executeProvisionedProductPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecuteProvisionedProductPlanOutput}
     */
    executeProvisionedProductPlan(xAmzTarget, executeProvisionedProductPlanInput, opts, callback) {
      opts = opts || {};
      let postBody = executeProvisionedProductPlanInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling executeProvisionedProductPlan");
      }
      // verify the required parameter 'executeProvisionedProductPlanInput' is set
      if (executeProvisionedProductPlanInput === undefined || executeProvisionedProductPlanInput === null) {
        throw new Error("Missing the required parameter 'executeProvisionedProductPlanInput' when calling executeProvisionedProductPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExecuteProvisionedProductPlanOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ExecuteProvisionedProductPlan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeProvisionedProductServiceAction operation.
     * @callback module:api/DefaultApi~executeProvisionedProductServiceActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecuteProvisionedProductServiceActionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a self-service action against a provisioned product.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ExecuteProvisionedProductServiceActionInput} executeProvisionedProductServiceActionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~executeProvisionedProductServiceActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecuteProvisionedProductServiceActionOutput}
     */
    executeProvisionedProductServiceAction(xAmzTarget, executeProvisionedProductServiceActionInput, opts, callback) {
      opts = opts || {};
      let postBody = executeProvisionedProductServiceActionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling executeProvisionedProductServiceAction");
      }
      // verify the required parameter 'executeProvisionedProductServiceActionInput' is set
      if (executeProvisionedProductServiceActionInput === undefined || executeProvisionedProductServiceActionInput === null) {
        throw new Error("Missing the required parameter 'executeProvisionedProductServiceActionInput' when calling executeProvisionedProductServiceAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExecuteProvisionedProductServiceActionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ExecuteProvisionedProductServiceAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAWSOrganizationsAccessStatus operation.
     * @callback module:api/DefaultApi~getAWSOrganizationsAccessStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAWSOrganizationsAccessStatusOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Access Status for Organizations portfolio share feature. This API can only be called by the management account in the organization or by a delegated admin.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAWSOrganizationsAccessStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAWSOrganizationsAccessStatusOutput}
     */
    getAWSOrganizationsAccessStatus(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAWSOrganizationsAccessStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAWSOrganizationsAccessStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAWSOrganizationsAccessStatusOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.GetAWSOrganizationsAccessStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvisionedProductOutputs operation.
     * @callback module:api/DefaultApi~getProvisionedProductOutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProvisionedProductOutputsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API takes either a <code>ProvisonedProductId</code> or a <code>ProvisionedProductName</code>, along with a list of one or more output keys, and responds with the key/value pairs of those outputs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetProvisionedProductOutputsInput} getProvisionedProductOutputsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~getProvisionedProductOutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProvisionedProductOutputsOutput}
     */
    getProvisionedProductOutputs(xAmzTarget, getProvisionedProductOutputsInput, opts, callback) {
      opts = opts || {};
      let postBody = getProvisionedProductOutputsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getProvisionedProductOutputs");
      }
      // verify the required parameter 'getProvisionedProductOutputsInput' is set
      if (getProvisionedProductOutputsInput === undefined || getProvisionedProductOutputsInput === null) {
        throw new Error("Missing the required parameter 'getProvisionedProductOutputsInput' when calling getProvisionedProductOutputs");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProvisionedProductOutputsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.GetProvisionedProductOutputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importAsProvisionedProduct operation.
     * @callback module:api/DefaultApi~importAsProvisionedProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportAsProvisionedProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Requests the import of a resource as an Service Catalog provisioned product that is associated to an Service Catalog product and provisioning artifact. Once imported, all supported governance actions are supported on the provisioned product. </p> <p> Resource import only supports CloudFormation stack ARNs. CloudFormation StackSets, and non-root nested stacks are not supported. </p> <p> The CloudFormation stack must have one of the following statuses to be imported: <code>CREATE_COMPLETE</code>, <code>UPDATE_COMPLETE</code>, <code>UPDATE_ROLLBACK_COMPLETE</code>, <code>IMPORT_COMPLETE</code>, and <code>IMPORT_ROLLBACK_COMPLETE</code>. </p> <p> Import of the resource requires that the CloudFormation stack template matches the associated Service Catalog product provisioning artifact. </p> <note> <p> When you import an existing CloudFormation stack into a portfolio, constraints that are associated with the product aren't applied during the import process. The constraints are applied after you call <code>UpdateProvisionedProduct</code> for the provisioned product. </p> </note> <p> The user or role that performs this operation must have the <code>cloudformation:GetTemplate</code> and <code>cloudformation:DescribeStacks</code> IAM policy permissions. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportAsProvisionedProductInput} importAsProvisionedProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importAsProvisionedProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportAsProvisionedProductOutput}
     */
    importAsProvisionedProduct(xAmzTarget, importAsProvisionedProductInput, opts, callback) {
      opts = opts || {};
      let postBody = importAsProvisionedProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importAsProvisionedProduct");
      }
      // verify the required parameter 'importAsProvisionedProductInput' is set
      if (importAsProvisionedProductInput === undefined || importAsProvisionedProductInput === null) {
        throw new Error("Missing the required parameter 'importAsProvisionedProductInput' when calling importAsProvisionedProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportAsProvisionedProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ImportAsProvisionedProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAcceptedPortfolioShares operation.
     * @callback module:api/DefaultApi~listAcceptedPortfolioSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAcceptedPortfolioSharesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all imported portfolios for which account-to-account shares were accepted by this account. By specifying the <code>PortfolioShareType</code>, you can list portfolios for which organizational shares were accepted by this account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAcceptedPortfolioSharesInput} listAcceptedPortfolioSharesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listAcceptedPortfolioSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAcceptedPortfolioSharesOutput}
     */
    listAcceptedPortfolioShares(xAmzTarget, listAcceptedPortfolioSharesInput, opts, callback) {
      opts = opts || {};
      let postBody = listAcceptedPortfolioSharesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAcceptedPortfolioShares");
      }
      // verify the required parameter 'listAcceptedPortfolioSharesInput' is set
      if (listAcceptedPortfolioSharesInput === undefined || listAcceptedPortfolioSharesInput === null) {
        throw new Error("Missing the required parameter 'listAcceptedPortfolioSharesInput' when calling listAcceptedPortfolioShares");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAcceptedPortfolioSharesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListAcceptedPortfolioShares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBudgetsForResource operation.
     * @callback module:api/DefaultApi~listBudgetsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBudgetsForResourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the budgets associated to the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListBudgetsForResourceInput} listBudgetsForResourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listBudgetsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBudgetsForResourceOutput}
     */
    listBudgetsForResource(xAmzTarget, listBudgetsForResourceInput, opts, callback) {
      opts = opts || {};
      let postBody = listBudgetsForResourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listBudgetsForResource");
      }
      // verify the required parameter 'listBudgetsForResourceInput' is set
      if (listBudgetsForResourceInput === undefined || listBudgetsForResourceInput === null) {
        throw new Error("Missing the required parameter 'listBudgetsForResourceInput' when calling listBudgetsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBudgetsForResourceOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListBudgetsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConstraintsForPortfolio operation.
     * @callback module:api/DefaultApi~listConstraintsForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConstraintsForPortfolioOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the constraints for the specified portfolio and product.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListConstraintsForPortfolioInput} listConstraintsForPortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listConstraintsForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConstraintsForPortfolioOutput}
     */
    listConstraintsForPortfolio(xAmzTarget, listConstraintsForPortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = listConstraintsForPortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listConstraintsForPortfolio");
      }
      // verify the required parameter 'listConstraintsForPortfolioInput' is set
      if (listConstraintsForPortfolioInput === undefined || listConstraintsForPortfolioInput === null) {
        throw new Error("Missing the required parameter 'listConstraintsForPortfolioInput' when calling listConstraintsForPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListConstraintsForPortfolioOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListConstraintsForPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLaunchPaths operation.
     * @callback module:api/DefaultApi~listLaunchPathsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLaunchPathsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Lists the paths to the specified product. A path describes how the user gets access to a specified product and is necessary when provisioning a product. A path also determines the constraints that are put on a product. A path is dependent on a specific product, porfolio, and principal. </p> <note> <p> When provisioning a product that's been added to a portfolio, you must grant your user, group, or role access to the portfolio. For more information, see <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_portfolios_users.html\">Granting users access</a> in the <i>Service Catalog User Guide</i>. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLaunchPathsInput} listLaunchPathsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listLaunchPathsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLaunchPathsOutput}
     */
    listLaunchPaths(xAmzTarget, listLaunchPathsInput, opts, callback) {
      opts = opts || {};
      let postBody = listLaunchPathsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLaunchPaths");
      }
      // verify the required parameter 'listLaunchPathsInput' is set
      if (listLaunchPathsInput === undefined || listLaunchPathsInput === null) {
        throw new Error("Missing the required parameter 'listLaunchPathsInput' when calling listLaunchPaths");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLaunchPathsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListLaunchPaths', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrganizationPortfolioAccess operation.
     * @callback module:api/DefaultApi~listOrganizationPortfolioAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrganizationPortfolioAccessOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the organization nodes that have access to the specified portfolio. This API can only be called by the management account in the organization or by a delegated admin.</p> <p>If a delegated admin is de-registered, they can no longer perform this operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListOrganizationPortfolioAccessInput} listOrganizationPortfolioAccessInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listOrganizationPortfolioAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrganizationPortfolioAccessOutput}
     */
    listOrganizationPortfolioAccess(xAmzTarget, listOrganizationPortfolioAccessInput, opts, callback) {
      opts = opts || {};
      let postBody = listOrganizationPortfolioAccessInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listOrganizationPortfolioAccess");
      }
      // verify the required parameter 'listOrganizationPortfolioAccessInput' is set
      if (listOrganizationPortfolioAccessInput === undefined || listOrganizationPortfolioAccessInput === null) {
        throw new Error("Missing the required parameter 'listOrganizationPortfolioAccessInput' when calling listOrganizationPortfolioAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOrganizationPortfolioAccessOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListOrganizationPortfolioAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPortfolioAccess operation.
     * @callback module:api/DefaultApi~listPortfolioAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPortfolioAccessOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the account IDs that have access to the specified portfolio.</p> <p>A delegated admin can list the accounts that have access to the shared portfolio. Note that if a delegated admin is de-registered, they can no longer perform this operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPortfolioAccessInput} listPortfolioAccessInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listPortfolioAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPortfolioAccessOutput}
     */
    listPortfolioAccess(xAmzTarget, listPortfolioAccessInput, opts, callback) {
      opts = opts || {};
      let postBody = listPortfolioAccessInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPortfolioAccess");
      }
      // verify the required parameter 'listPortfolioAccessInput' is set
      if (listPortfolioAccessInput === undefined || listPortfolioAccessInput === null) {
        throw new Error("Missing the required parameter 'listPortfolioAccessInput' when calling listPortfolioAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPortfolioAccessOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListPortfolioAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPortfolios operation.
     * @callback module:api/DefaultApi~listPortfoliosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPortfoliosOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all portfolios in the catalog.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPortfoliosInput} listPortfoliosInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listPortfoliosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPortfoliosOutput}
     */
    listPortfolios(xAmzTarget, listPortfoliosInput, opts, callback) {
      opts = opts || {};
      let postBody = listPortfoliosInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPortfolios");
      }
      // verify the required parameter 'listPortfoliosInput' is set
      if (listPortfoliosInput === undefined || listPortfoliosInput === null) {
        throw new Error("Missing the required parameter 'listPortfoliosInput' when calling listPortfolios");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPortfoliosOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListPortfolios', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPortfoliosForProduct operation.
     * @callback module:api/DefaultApi~listPortfoliosForProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPortfoliosForProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all portfolios that the specified product is associated with.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPortfoliosForProductInput} listPortfoliosForProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listPortfoliosForProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPortfoliosForProductOutput}
     */
    listPortfoliosForProduct(xAmzTarget, listPortfoliosForProductInput, opts, callback) {
      opts = opts || {};
      let postBody = listPortfoliosForProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPortfoliosForProduct");
      }
      // verify the required parameter 'listPortfoliosForProductInput' is set
      if (listPortfoliosForProductInput === undefined || listPortfoliosForProductInput === null) {
        throw new Error("Missing the required parameter 'listPortfoliosForProductInput' when calling listPortfoliosForProduct");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPortfoliosForProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListPortfoliosForProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPrincipalsForPortfolio operation.
     * @callback module:api/DefaultApi~listPrincipalsForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPrincipalsForPortfolioOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all <code>PrincipalARN</code>s and corresponding <code>PrincipalType</code>s associated with the specified portfolio.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPrincipalsForPortfolioInput} listPrincipalsForPortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listPrincipalsForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPrincipalsForPortfolioOutput}
     */
    listPrincipalsForPortfolio(xAmzTarget, listPrincipalsForPortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = listPrincipalsForPortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPrincipalsForPortfolio");
      }
      // verify the required parameter 'listPrincipalsForPortfolioInput' is set
      if (listPrincipalsForPortfolioInput === undefined || listPrincipalsForPortfolioInput === null) {
        throw new Error("Missing the required parameter 'listPrincipalsForPortfolioInput' when calling listPrincipalsForPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPrincipalsForPortfolioOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListPrincipalsForPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProvisionedProductPlans operation.
     * @callback module:api/DefaultApi~listProvisionedProductPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProvisionedProductPlansOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the plans for the specified provisioned product or all plans to which the user has access.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListProvisionedProductPlansInput} listProvisionedProductPlansInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listProvisionedProductPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProvisionedProductPlansOutput}
     */
    listProvisionedProductPlans(xAmzTarget, listProvisionedProductPlansInput, opts, callback) {
      opts = opts || {};
      let postBody = listProvisionedProductPlansInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listProvisionedProductPlans");
      }
      // verify the required parameter 'listProvisionedProductPlansInput' is set
      if (listProvisionedProductPlansInput === undefined || listProvisionedProductPlansInput === null) {
        throw new Error("Missing the required parameter 'listProvisionedProductPlansInput' when calling listProvisionedProductPlans");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProvisionedProductPlansOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListProvisionedProductPlans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProvisioningArtifacts operation.
     * @callback module:api/DefaultApi~listProvisioningArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProvisioningArtifactsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all provisioning artifacts (also known as versions) for the specified product.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListProvisioningArtifactsInput} listProvisioningArtifactsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listProvisioningArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProvisioningArtifactsOutput}
     */
    listProvisioningArtifacts(xAmzTarget, listProvisioningArtifactsInput, opts, callback) {
      opts = opts || {};
      let postBody = listProvisioningArtifactsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listProvisioningArtifacts");
      }
      // verify the required parameter 'listProvisioningArtifactsInput' is set
      if (listProvisioningArtifactsInput === undefined || listProvisioningArtifactsInput === null) {
        throw new Error("Missing the required parameter 'listProvisioningArtifactsInput' when calling listProvisioningArtifacts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProvisioningArtifactsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListProvisioningArtifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProvisioningArtifactsForServiceAction operation.
     * @callback module:api/DefaultApi~listProvisioningArtifactsForServiceActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProvisioningArtifactsForServiceActionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all provisioning artifacts (also known as versions) for the specified self-service action.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListProvisioningArtifactsForServiceActionInput} listProvisioningArtifactsForServiceActionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listProvisioningArtifactsForServiceActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProvisioningArtifactsForServiceActionOutput}
     */
    listProvisioningArtifactsForServiceAction(xAmzTarget, listProvisioningArtifactsForServiceActionInput, opts, callback) {
      opts = opts || {};
      let postBody = listProvisioningArtifactsForServiceActionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listProvisioningArtifactsForServiceAction");
      }
      // verify the required parameter 'listProvisioningArtifactsForServiceActionInput' is set
      if (listProvisioningArtifactsForServiceActionInput === undefined || listProvisioningArtifactsForServiceActionInput === null) {
        throw new Error("Missing the required parameter 'listProvisioningArtifactsForServiceActionInput' when calling listProvisioningArtifactsForServiceAction");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProvisioningArtifactsForServiceActionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListProvisioningArtifactsForServiceAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecordHistory operation.
     * @callback module:api/DefaultApi~listRecordHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRecordHistoryOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the specified requests or all performed requests.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListRecordHistoryInput} listRecordHistoryInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listRecordHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRecordHistoryOutput}
     */
    listRecordHistory(xAmzTarget, listRecordHistoryInput, opts, callback) {
      opts = opts || {};
      let postBody = listRecordHistoryInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listRecordHistory");
      }
      // verify the required parameter 'listRecordHistoryInput' is set
      if (listRecordHistoryInput === undefined || listRecordHistoryInput === null) {
        throw new Error("Missing the required parameter 'listRecordHistoryInput' when calling listRecordHistory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRecordHistoryOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListRecordHistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResourcesForTagOption operation.
     * @callback module:api/DefaultApi~listResourcesForTagOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResourcesForTagOptionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the resources associated with the specified TagOption.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResourcesForTagOptionInput} listResourcesForTagOptionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listResourcesForTagOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResourcesForTagOptionOutput}
     */
    listResourcesForTagOption(xAmzTarget, listResourcesForTagOptionInput, opts, callback) {
      opts = opts || {};
      let postBody = listResourcesForTagOptionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResourcesForTagOption");
      }
      // verify the required parameter 'listResourcesForTagOptionInput' is set
      if (listResourcesForTagOptionInput === undefined || listResourcesForTagOptionInput === null) {
        throw new Error("Missing the required parameter 'listResourcesForTagOptionInput' when calling listResourcesForTagOption");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResourcesForTagOptionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListResourcesForTagOption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceActions operation.
     * @callback module:api/DefaultApi~listServiceActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceActionsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all self-service actions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListServiceActionsInput} listServiceActionsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listServiceActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceActionsOutput}
     */
    listServiceActions(xAmzTarget, listServiceActionsInput, opts, callback) {
      opts = opts || {};
      let postBody = listServiceActionsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listServiceActions");
      }
      // verify the required parameter 'listServiceActionsInput' is set
      if (listServiceActionsInput === undefined || listServiceActionsInput === null) {
        throw new Error("Missing the required parameter 'listServiceActionsInput' when calling listServiceActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListServiceActionsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListServiceActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceActionsForProvisioningArtifact operation.
     * @callback module:api/DefaultApi~listServiceActionsForProvisioningArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceActionsForProvisioningArtifactOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of self-service actions associated with the specified Product ID and Provisioning Artifact ID.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListServiceActionsForProvisioningArtifactInput} listServiceActionsForProvisioningArtifactInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listServiceActionsForProvisioningArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceActionsForProvisioningArtifactOutput}
     */
    listServiceActionsForProvisioningArtifact(xAmzTarget, listServiceActionsForProvisioningArtifactInput, opts, callback) {
      opts = opts || {};
      let postBody = listServiceActionsForProvisioningArtifactInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listServiceActionsForProvisioningArtifact");
      }
      // verify the required parameter 'listServiceActionsForProvisioningArtifactInput' is set
      if (listServiceActionsForProvisioningArtifactInput === undefined || listServiceActionsForProvisioningArtifactInput === null) {
        throw new Error("Missing the required parameter 'listServiceActionsForProvisioningArtifactInput' when calling listServiceActionsForProvisioningArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListServiceActionsForProvisioningArtifactOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListServiceActionsForProvisioningArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStackInstancesForProvisionedProduct operation.
     * @callback module:api/DefaultApi~listStackInstancesForProvisionedProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStackInstancesForProvisionedProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns summary information about stack instances that are associated with the specified <code>CFN_STACKSET</code> type provisioned product. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListStackInstancesForProvisionedProductInput} listStackInstancesForProvisionedProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listStackInstancesForProvisionedProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStackInstancesForProvisionedProductOutput}
     */
    listStackInstancesForProvisionedProduct(xAmzTarget, listStackInstancesForProvisionedProductInput, opts, callback) {
      opts = opts || {};
      let postBody = listStackInstancesForProvisionedProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listStackInstancesForProvisionedProduct");
      }
      // verify the required parameter 'listStackInstancesForProvisionedProductInput' is set
      if (listStackInstancesForProvisionedProductInput === undefined || listStackInstancesForProvisionedProductInput === null) {
        throw new Error("Missing the required parameter 'listStackInstancesForProvisionedProductInput' when calling listStackInstancesForProvisionedProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListStackInstancesForProvisionedProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListStackInstancesForProvisionedProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagOptions operation.
     * @callback module:api/DefaultApi~listTagOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagOptionsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the specified TagOptions or all TagOptions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagOptionsInput} listTagOptionsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~listTagOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagOptionsOutput}
     */
    listTagOptions(xAmzTarget, listTagOptionsInput, opts, callback) {
      opts = opts || {};
      let postBody = listTagOptionsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagOptions");
      }
      // verify the required parameter 'listTagOptionsInput' is set
      if (listTagOptionsInput === undefined || listTagOptionsInput === null) {
        throw new Error("Missing the required parameter 'listTagOptionsInput' when calling listTagOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagOptionsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ListTagOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyProvisionProductEngineWorkflowResult operation.
     * @callback module:api/DefaultApi~notifyProvisionProductEngineWorkflowResultCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Notifies the result of the provisioning engine execution. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/NotifyProvisionProductEngineWorkflowResultInput} notifyProvisionProductEngineWorkflowResultInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~notifyProvisionProductEngineWorkflowResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    notifyProvisionProductEngineWorkflowResult(xAmzTarget, notifyProvisionProductEngineWorkflowResultInput, opts, callback) {
      opts = opts || {};
      let postBody = notifyProvisionProductEngineWorkflowResultInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling notifyProvisionProductEngineWorkflowResult");
      }
      // verify the required parameter 'notifyProvisionProductEngineWorkflowResultInput' is set
      if (notifyProvisionProductEngineWorkflowResultInput === undefined || notifyProvisionProductEngineWorkflowResultInput === null) {
        throw new Error("Missing the required parameter 'notifyProvisionProductEngineWorkflowResultInput' when calling notifyProvisionProductEngineWorkflowResult");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.NotifyProvisionProductEngineWorkflowResult', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyTerminateProvisionedProductEngineWorkflowResult operation.
     * @callback module:api/DefaultApi~notifyTerminateProvisionedProductEngineWorkflowResultCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Notifies the result of the terminate engine execution. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/NotifyTerminateProvisionedProductEngineWorkflowResultInput} notifyTerminateProvisionedProductEngineWorkflowResultInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~notifyTerminateProvisionedProductEngineWorkflowResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    notifyTerminateProvisionedProductEngineWorkflowResult(xAmzTarget, notifyTerminateProvisionedProductEngineWorkflowResultInput, opts, callback) {
      opts = opts || {};
      let postBody = notifyTerminateProvisionedProductEngineWorkflowResultInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling notifyTerminateProvisionedProductEngineWorkflowResult");
      }
      // verify the required parameter 'notifyTerminateProvisionedProductEngineWorkflowResultInput' is set
      if (notifyTerminateProvisionedProductEngineWorkflowResultInput === undefined || notifyTerminateProvisionedProductEngineWorkflowResultInput === null) {
        throw new Error("Missing the required parameter 'notifyTerminateProvisionedProductEngineWorkflowResultInput' when calling notifyTerminateProvisionedProductEngineWorkflowResult");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.NotifyTerminateProvisionedProductEngineWorkflowResult', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyUpdateProvisionedProductEngineWorkflowResult operation.
     * @callback module:api/DefaultApi~notifyUpdateProvisionedProductEngineWorkflowResultCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Notifies the result of the update engine execution. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/NotifyUpdateProvisionedProductEngineWorkflowResultInput} notifyUpdateProvisionedProductEngineWorkflowResultInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~notifyUpdateProvisionedProductEngineWorkflowResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    notifyUpdateProvisionedProductEngineWorkflowResult(xAmzTarget, notifyUpdateProvisionedProductEngineWorkflowResultInput, opts, callback) {
      opts = opts || {};
      let postBody = notifyUpdateProvisionedProductEngineWorkflowResultInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling notifyUpdateProvisionedProductEngineWorkflowResult");
      }
      // verify the required parameter 'notifyUpdateProvisionedProductEngineWorkflowResultInput' is set
      if (notifyUpdateProvisionedProductEngineWorkflowResultInput === undefined || notifyUpdateProvisionedProductEngineWorkflowResultInput === null) {
        throw new Error("Missing the required parameter 'notifyUpdateProvisionedProductEngineWorkflowResultInput' when calling notifyUpdateProvisionedProductEngineWorkflowResult");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.NotifyUpdateProvisionedProductEngineWorkflowResult', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionProduct operation.
     * @callback module:api/DefaultApi~provisionProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisionProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Provisions the specified product. </p> <p> A provisioned product is a resourced instance of a product. For example, provisioning a product that's based on an CloudFormation template launches an CloudFormation stack and its underlying resources. You can check the status of this request using <a>DescribeRecord</a>. </p> <p> If the request contains a tag key with an empty list of values, there's a tag conflict for that key. Don't include conflicted keys as tags, or this will cause the error \"Parameter validation failed: Missing required parameter in Tags[<i>N</i>]:<i>Value</i>\". </p> <note> <p> When provisioning a product that's been added to a portfolio, you must grant your user, group, or role access to the portfolio. For more information, see <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_portfolios_users.html\">Granting users access</a> in the <i>Service Catalog User Guide</i>. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ProvisionProductInput} provisionProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~provisionProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisionProductOutput}
     */
    provisionProduct(xAmzTarget, provisionProductInput, opts, callback) {
      opts = opts || {};
      let postBody = provisionProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling provisionProduct");
      }
      // verify the required parameter 'provisionProductInput' is set
      if (provisionProductInput === undefined || provisionProductInput === null) {
        throw new Error("Missing the required parameter 'provisionProductInput' when calling provisionProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProvisionProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ProvisionProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectPortfolioShare operation.
     * @callback module:api/DefaultApi~rejectPortfolioShareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rejects an offer to share the specified portfolio.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RejectPortfolioShareInput} rejectPortfolioShareInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rejectPortfolioShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    rejectPortfolioShare(xAmzTarget, rejectPortfolioShareInput, opts, callback) {
      opts = opts || {};
      let postBody = rejectPortfolioShareInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling rejectPortfolioShare");
      }
      // verify the required parameter 'rejectPortfolioShareInput' is set
      if (rejectPortfolioShareInput === undefined || rejectPortfolioShareInput === null) {
        throw new Error("Missing the required parameter 'rejectPortfolioShareInput' when calling rejectPortfolioShare");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.RejectPortfolioShare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scanProvisionedProducts operation.
     * @callback module:api/DefaultApi~scanProvisionedProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScanProvisionedProductsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the provisioned products that are available (not terminated).</p> <p>To use additional filtering, see <a>SearchProvisionedProducts</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ScanProvisionedProductsInput} scanProvisionedProductsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~scanProvisionedProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScanProvisionedProductsOutput}
     */
    scanProvisionedProducts(xAmzTarget, scanProvisionedProductsInput, opts, callback) {
      opts = opts || {};
      let postBody = scanProvisionedProductsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling scanProvisionedProducts");
      }
      // verify the required parameter 'scanProvisionedProductsInput' is set
      if (scanProvisionedProductsInput === undefined || scanProvisionedProductsInput === null) {
        throw new Error("Missing the required parameter 'scanProvisionedProductsInput' when calling scanProvisionedProducts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScanProvisionedProductsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.ScanProvisionedProducts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchProducts operation.
     * @callback module:api/DefaultApi~searchProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchProductsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the products to which the caller has access.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchProductsInput} searchProductsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~searchProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchProductsOutput}
     */
    searchProducts(xAmzTarget, searchProductsInput, opts, callback) {
      opts = opts || {};
      let postBody = searchProductsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling searchProducts");
      }
      // verify the required parameter 'searchProductsInput' is set
      if (searchProductsInput === undefined || searchProductsInput === null) {
        throw new Error("Missing the required parameter 'searchProductsInput' when calling searchProducts");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchProductsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.SearchProducts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchProductsAsAdmin operation.
     * @callback module:api/DefaultApi~searchProductsAsAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchProductsAsAdminOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the products for the specified portfolio or all products.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchProductsAsAdminInput} searchProductsAsAdminInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~searchProductsAsAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchProductsAsAdminOutput}
     */
    searchProductsAsAdmin(xAmzTarget, searchProductsAsAdminInput, opts, callback) {
      opts = opts || {};
      let postBody = searchProductsAsAdminInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling searchProductsAsAdmin");
      }
      // verify the required parameter 'searchProductsAsAdminInput' is set
      if (searchProductsAsAdminInput === undefined || searchProductsAsAdminInput === null) {
        throw new Error("Missing the required parameter 'searchProductsAsAdminInput' when calling searchProductsAsAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchProductsAsAdminOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.SearchProductsAsAdmin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchProvisionedProducts operation.
     * @callback module:api/DefaultApi~searchProvisionedProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchProvisionedProductsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the provisioned products that meet the specified criteria.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchProvisionedProductsInput} searchProvisionedProductsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [pageToken] Pagination token
     * @param {module:api/DefaultApi~searchProvisionedProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchProvisionedProductsOutput}
     */
    searchProvisionedProducts(xAmzTarget, searchProvisionedProductsInput, opts, callback) {
      opts = opts || {};
      let postBody = searchProvisionedProductsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling searchProvisionedProducts");
      }
      // verify the required parameter 'searchProvisionedProductsInput' is set
      if (searchProvisionedProductsInput === undefined || searchProvisionedProductsInput === null) {
        throw new Error("Missing the required parameter 'searchProvisionedProductsInput' when calling searchProvisionedProducts");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchProvisionedProductsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.SearchProvisionedProducts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateProvisionedProduct operation.
     * @callback module:api/DefaultApi~terminateProvisionedProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerminateProvisionedProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Terminates the specified provisioned product.</p> <p>This operation does not delete any records associated with the provisioned product.</p> <p>You can check the status of this request using <a>DescribeRecord</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TerminateProvisionedProductInput} terminateProvisionedProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~terminateProvisionedProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerminateProvisionedProductOutput}
     */
    terminateProvisionedProduct(xAmzTarget, terminateProvisionedProductInput, opts, callback) {
      opts = opts || {};
      let postBody = terminateProvisionedProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling terminateProvisionedProduct");
      }
      // verify the required parameter 'terminateProvisionedProductInput' is set
      if (terminateProvisionedProductInput === undefined || terminateProvisionedProductInput === null) {
        throw new Error("Missing the required parameter 'terminateProvisionedProductInput' when calling terminateProvisionedProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TerminateProvisionedProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.TerminateProvisionedProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConstraint operation.
     * @callback module:api/DefaultApi~updateConstraintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConstraintOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified constraint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateConstraintInput} updateConstraintInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConstraintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConstraintOutput}
     */
    updateConstraint(xAmzTarget, updateConstraintInput, opts, callback) {
      opts = opts || {};
      let postBody = updateConstraintInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateConstraint");
      }
      // verify the required parameter 'updateConstraintInput' is set
      if (updateConstraintInput === undefined || updateConstraintInput === null) {
        throw new Error("Missing the required parameter 'updateConstraintInput' when calling updateConstraint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConstraintOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.UpdateConstraint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolio operation.
     * @callback module:api/DefaultApi~updatePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePortfolioOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the specified portfolio.</p> <p>You cannot update a product that was shared with you.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePortfolioInput} updatePortfolioInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePortfolioOutput}
     */
    updatePortfolio(xAmzTarget, updatePortfolioInput, opts, callback) {
      opts = opts || {};
      let postBody = updatePortfolioInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePortfolio");
      }
      // verify the required parameter 'updatePortfolioInput' is set
      if (updatePortfolioInput === undefined || updatePortfolioInput === null) {
        throw new Error("Missing the required parameter 'updatePortfolioInput' when calling updatePortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePortfolioOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.UpdatePortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioShare operation.
     * @callback module:api/DefaultApi~updatePortfolioShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePortfolioShareOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the specified portfolio share. You can use this API to enable or disable <code>TagOptions</code> sharing or Principal sharing for an existing portfolio share. </p> <p>The portfolio share cannot be updated if the <code>CreatePortfolioShare</code> operation is <code>IN_PROGRESS</code>, as the share is not available to recipient entities. In this case, you must wait for the portfolio share to be COMPLETED.</p> <p>You must provide the <code>accountId</code> or organization node in the input, but not both.</p> <p>If the portfolio is shared to both an external account and an organization node, and both shares need to be updated, you must invoke <code>UpdatePortfolioShare</code> separately for each share type. </p> <p>This API cannot be used for removing the portfolio share. You must use <code>DeletePortfolioShare</code> API for that action. </p> <note> <p>When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is then shared with other accounts. For a user in a recipient account who is <i>not</i> an Service Catalog Admin, but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal name association for the portfolio. Although this user may not know which principal names are associated through Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then Service Catalog recommends using <code>PrincipalType</code> as <code>IAM</code>. With this configuration, the <code>PrincipalARN</code> must already exist in the recipient account before it can be associated. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePortfolioShareInput} updatePortfolioShareInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePortfolioShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePortfolioShareOutput}
     */
    updatePortfolioShare(xAmzTarget, updatePortfolioShareInput, opts, callback) {
      opts = opts || {};
      let postBody = updatePortfolioShareInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePortfolioShare");
      }
      // verify the required parameter 'updatePortfolioShareInput' is set
      if (updatePortfolioShareInput === undefined || updatePortfolioShareInput === null) {
        throw new Error("Missing the required parameter 'updatePortfolioShareInput' when calling updatePortfolioShare");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePortfolioShareOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.UpdatePortfolioShare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback module:api/DefaultApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified product.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProductInput} updateProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProductOutput}
     */
    updateProduct(xAmzTarget, updateProductInput, opts, callback) {
      opts = opts || {};
      let postBody = updateProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProduct");
      }
      // verify the required parameter 'updateProductInput' is set
      if (updateProductInput === undefined || updateProductInput === null) {
        throw new Error("Missing the required parameter 'updateProductInput' when calling updateProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.UpdateProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProvisionedProduct operation.
     * @callback module:api/DefaultApi~updateProvisionedProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProvisionedProductOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Requests updates to the configuration of the specified provisioned product.</p> <p>If there are tags associated with the object, they cannot be updated or added. Depending on the specific updates requested, this operation can update with no interruption, with some interruption, or replace the provisioned product entirely.</p> <p>You can check the status of this request using <a>DescribeRecord</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProvisionedProductInput} updateProvisionedProductInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProvisionedProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProvisionedProductOutput}
     */
    updateProvisionedProduct(xAmzTarget, updateProvisionedProductInput, opts, callback) {
      opts = opts || {};
      let postBody = updateProvisionedProductInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProvisionedProduct");
      }
      // verify the required parameter 'updateProvisionedProductInput' is set
      if (updateProvisionedProductInput === undefined || updateProvisionedProductInput === null) {
        throw new Error("Missing the required parameter 'updateProvisionedProductInput' when calling updateProvisionedProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProvisionedProductOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisionedProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProvisionedProductProperties operation.
     * @callback module:api/DefaultApi~updateProvisionedProductPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProvisionedProductPropertiesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests updates to the properties of the specified provisioned product.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProvisionedProductPropertiesInput} updateProvisionedProductPropertiesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProvisionedProductPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProvisionedProductPropertiesOutput}
     */
    updateProvisionedProductProperties(xAmzTarget, updateProvisionedProductPropertiesInput, opts, callback) {
      opts = opts || {};
      let postBody = updateProvisionedProductPropertiesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProvisionedProductProperties");
      }
      // verify the required parameter 'updateProvisionedProductPropertiesInput' is set
      if (updateProvisionedProductPropertiesInput === undefined || updateProvisionedProductPropertiesInput === null) {
        throw new Error("Missing the required parameter 'updateProvisionedProductPropertiesInput' when calling updateProvisionedProductProperties");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProvisionedProductPropertiesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisionedProductProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProvisioningArtifact operation.
     * @callback module:api/DefaultApi~updateProvisioningArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProvisioningArtifactOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the specified provisioning artifact (also known as a version) for the specified product.</p> <p>You cannot update a provisioning artifact for a product that was shared with you.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProvisioningArtifactInput} updateProvisioningArtifactInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProvisioningArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProvisioningArtifactOutput}
     */
    updateProvisioningArtifact(xAmzTarget, updateProvisioningArtifactInput, opts, callback) {
      opts = opts || {};
      let postBody = updateProvisioningArtifactInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProvisioningArtifact");
      }
      // verify the required parameter 'updateProvisioningArtifactInput' is set
      if (updateProvisioningArtifactInput === undefined || updateProvisioningArtifactInput === null) {
        throw new Error("Missing the required parameter 'updateProvisioningArtifactInput' when calling updateProvisioningArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProvisioningArtifactOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisioningArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceAction operation.
     * @callback module:api/DefaultApi~updateServiceActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceActionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a self-service action.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateServiceActionInput} updateServiceActionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServiceActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceActionOutput}
     */
    updateServiceAction(xAmzTarget, updateServiceActionInput, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceActionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateServiceAction");
      }
      // verify the required parameter 'updateServiceActionInput' is set
      if (updateServiceActionInput === undefined || updateServiceActionInput === null) {
        throw new Error("Missing the required parameter 'updateServiceActionInput' when calling updateServiceAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateServiceActionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.UpdateServiceAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTagOption operation.
     * @callback module:api/DefaultApi~updateTagOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTagOptionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified TagOption.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTagOptionInput} updateTagOptionInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTagOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTagOptionOutput}
     */
    updateTagOption(xAmzTarget, updateTagOptionInput, opts, callback) {
      opts = opts || {};
      let postBody = updateTagOptionInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTagOption");
      }
      // verify the required parameter 'updateTagOptionInput' is set
      if (updateTagOptionInput === undefined || updateTagOptionInput === null) {
        throw new Error("Missing the required parameter 'updateTagOptionInput' when calling updateTagOption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTagOptionOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWS242ServiceCatalogService.UpdateTagOption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
