/*
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptPortfolioShareInput;
import org.openapitools.client.model.AssociateBudgetWithResourceInput;
import org.openapitools.client.model.AssociatePrincipalWithPortfolioInput;
import org.openapitools.client.model.AssociateProductWithPortfolioInput;
import org.openapitools.client.model.AssociateServiceActionWithProvisioningArtifactInput;
import org.openapitools.client.model.AssociateTagOptionWithResourceInput;
import org.openapitools.client.model.BatchAssociateServiceActionWithProvisioningArtifactInput;
import org.openapitools.client.model.BatchAssociateServiceActionWithProvisioningArtifactOutput;
import org.openapitools.client.model.BatchDisassociateServiceActionFromProvisioningArtifactInput;
import org.openapitools.client.model.BatchDisassociateServiceActionFromProvisioningArtifactOutput;
import org.openapitools.client.model.CopyProductInput;
import org.openapitools.client.model.CopyProductOutput;
import org.openapitools.client.model.CreateConstraintInput;
import org.openapitools.client.model.CreateConstraintOutput;
import org.openapitools.client.model.CreatePortfolioInput;
import org.openapitools.client.model.CreatePortfolioOutput;
import org.openapitools.client.model.CreatePortfolioShareInput;
import org.openapitools.client.model.CreatePortfolioShareOutput;
import org.openapitools.client.model.CreateProductInput;
import org.openapitools.client.model.CreateProductOutput;
import org.openapitools.client.model.CreateProvisionedProductPlanInput;
import org.openapitools.client.model.CreateProvisionedProductPlanOutput;
import org.openapitools.client.model.CreateProvisioningArtifactInput;
import org.openapitools.client.model.CreateProvisioningArtifactOutput;
import org.openapitools.client.model.CreateServiceActionInput;
import org.openapitools.client.model.CreateServiceActionOutput;
import org.openapitools.client.model.CreateTagOptionInput;
import org.openapitools.client.model.CreateTagOptionOutput;
import org.openapitools.client.model.DeleteConstraintInput;
import org.openapitools.client.model.DeletePortfolioInput;
import org.openapitools.client.model.DeletePortfolioShareInput;
import org.openapitools.client.model.DeletePortfolioShareOutput;
import org.openapitools.client.model.DeleteProductInput;
import org.openapitools.client.model.DeleteProvisionedProductPlanInput;
import org.openapitools.client.model.DeleteProvisioningArtifactInput;
import org.openapitools.client.model.DeleteServiceActionInput;
import org.openapitools.client.model.DeleteTagOptionInput;
import org.openapitools.client.model.DescribeConstraintInput;
import org.openapitools.client.model.DescribeConstraintOutput;
import org.openapitools.client.model.DescribeCopyProductStatusInput;
import org.openapitools.client.model.DescribeCopyProductStatusOutput;
import org.openapitools.client.model.DescribePortfolioInput;
import org.openapitools.client.model.DescribePortfolioOutput;
import org.openapitools.client.model.DescribePortfolioShareStatusInput;
import org.openapitools.client.model.DescribePortfolioShareStatusOutput;
import org.openapitools.client.model.DescribePortfolioSharesInput;
import org.openapitools.client.model.DescribePortfolioSharesOutput;
import org.openapitools.client.model.DescribeProductAsAdminInput;
import org.openapitools.client.model.DescribeProductAsAdminOutput;
import org.openapitools.client.model.DescribeProductInput;
import org.openapitools.client.model.DescribeProductOutput;
import org.openapitools.client.model.DescribeProductViewInput;
import org.openapitools.client.model.DescribeProductViewOutput;
import org.openapitools.client.model.DescribeProvisionedProductInput;
import org.openapitools.client.model.DescribeProvisionedProductOutput;
import org.openapitools.client.model.DescribeProvisionedProductPlanInput;
import org.openapitools.client.model.DescribeProvisionedProductPlanOutput;
import org.openapitools.client.model.DescribeProvisioningArtifactInput;
import org.openapitools.client.model.DescribeProvisioningArtifactOutput;
import org.openapitools.client.model.DescribeProvisioningParametersInput;
import org.openapitools.client.model.DescribeProvisioningParametersOutput;
import org.openapitools.client.model.DescribeRecordInput;
import org.openapitools.client.model.DescribeRecordOutput;
import org.openapitools.client.model.DescribeServiceActionExecutionParametersInput;
import org.openapitools.client.model.DescribeServiceActionExecutionParametersOutput;
import org.openapitools.client.model.DescribeServiceActionInput;
import org.openapitools.client.model.DescribeServiceActionOutput;
import org.openapitools.client.model.DescribeTagOptionInput;
import org.openapitools.client.model.DescribeTagOptionOutput;
import org.openapitools.client.model.DisassociateBudgetFromResourceInput;
import org.openapitools.client.model.DisassociatePrincipalFromPortfolioInput;
import org.openapitools.client.model.DisassociateProductFromPortfolioInput;
import org.openapitools.client.model.DisassociateServiceActionFromProvisioningArtifactInput;
import org.openapitools.client.model.DisassociateTagOptionFromResourceInput;
import org.openapitools.client.model.ExecuteProvisionedProductPlanInput;
import org.openapitools.client.model.ExecuteProvisionedProductPlanOutput;
import org.openapitools.client.model.ExecuteProvisionedProductServiceActionInput;
import org.openapitools.client.model.ExecuteProvisionedProductServiceActionOutput;
import org.openapitools.client.model.GetAWSOrganizationsAccessStatusOutput;
import org.openapitools.client.model.GetProvisionedProductOutputsInput;
import org.openapitools.client.model.GetProvisionedProductOutputsOutput;
import org.openapitools.client.model.ImportAsProvisionedProductInput;
import org.openapitools.client.model.ImportAsProvisionedProductOutput;
import org.openapitools.client.model.ListAcceptedPortfolioSharesInput;
import org.openapitools.client.model.ListAcceptedPortfolioSharesOutput;
import org.openapitools.client.model.ListBudgetsForResourceInput;
import org.openapitools.client.model.ListBudgetsForResourceOutput;
import org.openapitools.client.model.ListConstraintsForPortfolioInput;
import org.openapitools.client.model.ListConstraintsForPortfolioOutput;
import org.openapitools.client.model.ListLaunchPathsInput;
import org.openapitools.client.model.ListLaunchPathsOutput;
import org.openapitools.client.model.ListOrganizationPortfolioAccessInput;
import org.openapitools.client.model.ListOrganizationPortfolioAccessOutput;
import org.openapitools.client.model.ListPortfolioAccessInput;
import org.openapitools.client.model.ListPortfolioAccessOutput;
import org.openapitools.client.model.ListPortfoliosForProductInput;
import org.openapitools.client.model.ListPortfoliosForProductOutput;
import org.openapitools.client.model.ListPortfoliosInput;
import org.openapitools.client.model.ListPortfoliosOutput;
import org.openapitools.client.model.ListPrincipalsForPortfolioInput;
import org.openapitools.client.model.ListPrincipalsForPortfolioOutput;
import org.openapitools.client.model.ListProvisionedProductPlansInput;
import org.openapitools.client.model.ListProvisionedProductPlansOutput;
import org.openapitools.client.model.ListProvisioningArtifactsForServiceActionInput;
import org.openapitools.client.model.ListProvisioningArtifactsForServiceActionOutput;
import org.openapitools.client.model.ListProvisioningArtifactsInput;
import org.openapitools.client.model.ListProvisioningArtifactsOutput;
import org.openapitools.client.model.ListRecordHistoryInput;
import org.openapitools.client.model.ListRecordHistoryOutput;
import org.openapitools.client.model.ListResourcesForTagOptionInput;
import org.openapitools.client.model.ListResourcesForTagOptionOutput;
import org.openapitools.client.model.ListServiceActionsForProvisioningArtifactInput;
import org.openapitools.client.model.ListServiceActionsForProvisioningArtifactOutput;
import org.openapitools.client.model.ListServiceActionsInput;
import org.openapitools.client.model.ListServiceActionsOutput;
import org.openapitools.client.model.ListStackInstancesForProvisionedProductInput;
import org.openapitools.client.model.ListStackInstancesForProvisionedProductOutput;
import org.openapitools.client.model.ListTagOptionsInput;
import org.openapitools.client.model.ListTagOptionsOutput;
import org.openapitools.client.model.NotifyProvisionProductEngineWorkflowResultInput;
import org.openapitools.client.model.NotifyTerminateProvisionedProductEngineWorkflowResultInput;
import org.openapitools.client.model.NotifyUpdateProvisionedProductEngineWorkflowResultInput;
import org.openapitools.client.model.ProvisionProductInput;
import org.openapitools.client.model.ProvisionProductOutput;
import org.openapitools.client.model.RejectPortfolioShareInput;
import org.openapitools.client.model.ScanProvisionedProductsInput;
import org.openapitools.client.model.ScanProvisionedProductsOutput;
import org.openapitools.client.model.SearchProductsAsAdminInput;
import org.openapitools.client.model.SearchProductsAsAdminOutput;
import org.openapitools.client.model.SearchProductsInput;
import org.openapitools.client.model.SearchProductsOutput;
import org.openapitools.client.model.SearchProvisionedProductsInput;
import org.openapitools.client.model.SearchProvisionedProductsOutput;
import org.openapitools.client.model.TerminateProvisionedProductInput;
import org.openapitools.client.model.TerminateProvisionedProductOutput;
import org.openapitools.client.model.UpdateConstraintInput;
import org.openapitools.client.model.UpdateConstraintOutput;
import org.openapitools.client.model.UpdatePortfolioInput;
import org.openapitools.client.model.UpdatePortfolioOutput;
import org.openapitools.client.model.UpdatePortfolioShareInput;
import org.openapitools.client.model.UpdatePortfolioShareOutput;
import org.openapitools.client.model.UpdateProductInput;
import org.openapitools.client.model.UpdateProductOutput;
import org.openapitools.client.model.UpdateProvisionedProductInput;
import org.openapitools.client.model.UpdateProvisionedProductOutput;
import org.openapitools.client.model.UpdateProvisionedProductPropertiesInput;
import org.openapitools.client.model.UpdateProvisionedProductPropertiesOutput;
import org.openapitools.client.model.UpdateProvisioningArtifactInput;
import org.openapitools.client.model.UpdateProvisioningArtifactOutput;
import org.openapitools.client.model.UpdateServiceActionInput;
import org.openapitools.client.model.UpdateServiceActionOutput;
import org.openapitools.client.model.UpdateTagOptionInput;
import org.openapitools.client.model.UpdateTagOptionOutput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Accepts an offer to share the specified portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptPortfolioShareTest() throws ApiException {
        String xAmzTarget = null;
        AcceptPortfolioShareInput acceptPortfolioShareInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.acceptPortfolioShare(xAmzTarget, acceptPortfolioShareInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates the specified budget with the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateBudgetWithResourceTest() throws ApiException {
        String xAmzTarget = null;
        AssociateBudgetWithResourceInput associateBudgetWithResourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateBudgetWithResource(xAmzTarget, associateBudgetWithResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates the specified principal ARN with the specified portfolio.&lt;/p&gt; &lt;p&gt;If you share the portfolio with principal name sharing enabled, the &lt;code&gt;PrincipalARN&lt;/code&gt; association is included in the share. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;PortfolioID&lt;/code&gt;, &lt;code&gt;PrincipalARN&lt;/code&gt;, and &lt;code&gt;PrincipalType&lt;/code&gt; parameters are required. &lt;/p&gt; &lt;p&gt;You can associate a maximum of 10 Principals with a portfolio using &lt;code&gt;PrincipalType&lt;/code&gt; as &lt;code&gt;IAM_PATTERN&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is then shared with other accounts. For a user in a recipient account who is &lt;i&gt;not&lt;/i&gt; an Service Catalog Admin, but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal name association for the portfolio. Although this user may not know which principal names are associated through Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then Service Catalog recommends using &lt;code&gt;PrincipalType&lt;/code&gt; as &lt;code&gt;IAM&lt;/code&gt;. With this configuration, the &lt;code&gt;PrincipalARN&lt;/code&gt; must already exist in the recipient account before it can be associated. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associatePrincipalWithPortfolioTest() throws ApiException {
        String xAmzTarget = null;
        AssociatePrincipalWithPortfolioInput associatePrincipalWithPortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associatePrincipalWithPortfolio(xAmzTarget, associatePrincipalWithPortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates the specified product with the specified portfolio.&lt;/p&gt; &lt;p&gt;A delegated admin is authorized to invoke this command.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateProductWithPortfolioTest() throws ApiException {
        String xAmzTarget = null;
        AssociateProductWithPortfolioInput associateProductWithPortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateProductWithPortfolio(xAmzTarget, associateProductWithPortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a self-service action with a provisioning artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateServiceActionWithProvisioningArtifactTest() throws ApiException {
        String xAmzTarget = null;
        AssociateServiceActionWithProvisioningArtifactInput associateServiceActionWithProvisioningArtifactInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateServiceActionWithProvisioningArtifact(xAmzTarget, associateServiceActionWithProvisioningArtifactInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associate the specified TagOption with the specified portfolio or product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateTagOptionWithResourceTest() throws ApiException {
        String xAmzTarget = null;
        AssociateTagOptionWithResourceInput associateTagOptionWithResourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateTagOptionWithResource(xAmzTarget, associateTagOptionWithResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates multiple self-service actions with provisioning artifacts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchAssociateServiceActionWithProvisioningArtifactTest() throws ApiException {
        String xAmzTarget = null;
        BatchAssociateServiceActionWithProvisioningArtifactInput batchAssociateServiceActionWithProvisioningArtifactInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchAssociateServiceActionWithProvisioningArtifactOutput response = api.batchAssociateServiceActionWithProvisioningArtifact(xAmzTarget, batchAssociateServiceActionWithProvisioningArtifactInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a batch of self-service actions from the specified provisioning artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDisassociateServiceActionFromProvisioningArtifactTest() throws ApiException {
        String xAmzTarget = null;
        BatchDisassociateServiceActionFromProvisioningArtifactInput batchDisassociateServiceActionFromProvisioningArtifactInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDisassociateServiceActionFromProvisioningArtifactOutput response = api.batchDisassociateServiceActionFromProvisioningArtifact(xAmzTarget, batchDisassociateServiceActionFromProvisioningArtifactInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies the specified source product to the specified target product or a new product.&lt;/p&gt; &lt;p&gt;You can copy a product to the same account or another account. You can copy a product to the same Region or another Region. If you copy a product to another account, you must first share the product in a portfolio using &lt;a&gt;CreatePortfolioShare&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This operation is performed asynchronously. To track the progress of the operation, use &lt;a&gt;DescribeCopyProductStatus&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyProductTest() throws ApiException {
        String xAmzTarget = null;
        CopyProductInput copyProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopyProductOutput response = api.copyProduct(xAmzTarget, copyProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a constraint.&lt;/p&gt; &lt;p&gt;A delegated admin is authorized to invoke this command.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConstraintTest() throws ApiException {
        String xAmzTarget = null;
        CreateConstraintInput createConstraintInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConstraintOutput response = api.createConstraint(xAmzTarget, createConstraintInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a portfolio.&lt;/p&gt; &lt;p&gt;A delegated admin is authorized to invoke this command.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPortfolioTest() throws ApiException {
        String xAmzTarget = null;
        CreatePortfolioInput createPortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePortfolioOutput response = api.createPortfolio(xAmzTarget, createPortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Shares the specified portfolio with the specified account or organization node. Shares to an organization node can only be created by the management account of an organization or by a delegated administrator. You can share portfolios to an organization, an organizational unit, or a specific account.&lt;/p&gt; &lt;p&gt;Note that if a delegated admin is de-registered, they can no longer create portfolio shares.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AWSOrganizationsAccess&lt;/code&gt; must be enabled in order to create a portfolio share to an organization node.&lt;/p&gt; &lt;p&gt;You can&#39;t share a shared resource, including portfolios that contain a shared product.&lt;/p&gt; &lt;p&gt;If the portfolio share with the specified account or organization node already exists, this action will have no effect and will not return an error. To update an existing share, you must use the &lt;code&gt; UpdatePortfolioShare&lt;/code&gt; API instead. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is then shared with other accounts. For a user in a recipient account who is &lt;i&gt;not&lt;/i&gt; an Service Catalog Admin, but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal name association for the portfolio. Although this user may not know which principal names are associated through Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then Service Catalog recommends using &lt;code&gt;PrincipalType&lt;/code&gt; as &lt;code&gt;IAM&lt;/code&gt;. With this configuration, the &lt;code&gt;PrincipalARN&lt;/code&gt; must already exist in the recipient account before it can be associated. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPortfolioShareTest() throws ApiException {
        String xAmzTarget = null;
        CreatePortfolioShareInput createPortfolioShareInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePortfolioShareOutput response = api.createPortfolioShare(xAmzTarget, createPortfolioShareInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a product.&lt;/p&gt; &lt;p&gt;A delegated admin is authorized to invoke this command.&lt;/p&gt; &lt;p&gt;The user or role that performs this operation must have the &lt;code&gt;cloudformation:GetTemplate&lt;/code&gt; IAM policy permission. This policy permission is required when using the &lt;code&gt;ImportFromPhysicalId&lt;/code&gt; template source in the information data section.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProductTest() throws ApiException {
        String xAmzTarget = null;
        CreateProductInput createProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProductOutput response = api.createProduct(xAmzTarget, createProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a plan.&lt;/p&gt; &lt;p&gt;A plan includes the list of resources to be created (when provisioning a new product) or modified (when updating a provisioned product) when the plan is executed.&lt;/p&gt; &lt;p&gt;You can create one plan for each provisioned product. To create a plan for an existing provisioned product, the product status must be AVAILABLE or TAINTED.&lt;/p&gt; &lt;p&gt;To view the resource changes in the change set, use &lt;a&gt;DescribeProvisionedProductPlan&lt;/a&gt;. To create or modify the provisioned product, use &lt;a&gt;ExecuteProvisionedProductPlan&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProvisionedProductPlanTest() throws ApiException {
        String xAmzTarget = null;
        CreateProvisionedProductPlanInput createProvisionedProductPlanInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProvisionedProductPlanOutput response = api.createProvisionedProductPlan(xAmzTarget, createProvisionedProductPlanInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a provisioning artifact (also known as a version) for the specified product.&lt;/p&gt; &lt;p&gt;You cannot create a provisioning artifact for a product that was shared with you.&lt;/p&gt; &lt;p&gt;The user or role that performs this operation must have the &lt;code&gt;cloudformation:GetTemplate&lt;/code&gt; IAM policy permission. This policy permission is required when using the &lt;code&gt;ImportFromPhysicalId&lt;/code&gt; template source in the information data section.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProvisioningArtifactTest() throws ApiException {
        String xAmzTarget = null;
        CreateProvisioningArtifactInput createProvisioningArtifactInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProvisioningArtifactOutput response = api.createProvisioningArtifact(xAmzTarget, createProvisioningArtifactInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a self-service action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceActionTest() throws ApiException {
        String xAmzTarget = null;
        CreateServiceActionInput createServiceActionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServiceActionOutput response = api.createServiceAction(xAmzTarget, createServiceActionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a TagOption.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagOptionTest() throws ApiException {
        String xAmzTarget = null;
        CreateTagOptionInput createTagOptionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTagOptionOutput response = api.createTagOption(xAmzTarget, createTagOptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified constraint.&lt;/p&gt; &lt;p&gt;A delegated admin is authorized to invoke this command.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConstraintTest() throws ApiException {
        String xAmzTarget = null;
        DeleteConstraintInput deleteConstraintInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConstraint(xAmzTarget, deleteConstraintInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified portfolio.&lt;/p&gt; &lt;p&gt;You cannot delete a portfolio if it was shared with you or if it has associated products, users, constraints, or shared accounts.&lt;/p&gt; &lt;p&gt;A delegated admin is authorized to invoke this command.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePortfolioTest() throws ApiException {
        String xAmzTarget = null;
        DeletePortfolioInput deletePortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePortfolio(xAmzTarget, deletePortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops sharing the specified portfolio with the specified account or organization node. Shares to an organization node can only be deleted by the management account of an organization or by a delegated administrator.&lt;/p&gt; &lt;p&gt;Note that if a delegated admin is de-registered, portfolio shares created from that account are removed.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePortfolioShareTest() throws ApiException {
        String xAmzTarget = null;
        DeletePortfolioShareInput deletePortfolioShareInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeletePortfolioShareOutput response = api.deletePortfolioShare(xAmzTarget, deletePortfolioShareInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified product.&lt;/p&gt; &lt;p&gt;You cannot delete a product if it was shared with you or is associated with a portfolio.&lt;/p&gt; &lt;p&gt;A delegated admin is authorized to invoke this command.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProductInput deleteProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProduct(xAmzTarget, deleteProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProvisionedProductPlanTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProvisionedProductPlanInput deleteProvisionedProductPlanInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProvisionedProductPlan(xAmzTarget, deleteProvisionedProductPlanInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified provisioning artifact (also known as a version) for the specified product.&lt;/p&gt; &lt;p&gt;You cannot delete a provisioning artifact associated with a product that was shared with you. You cannot delete the last provisioning artifact for a product, because a product must have at least one provisioning artifact.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProvisioningArtifactTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProvisioningArtifactInput deleteProvisioningArtifactInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProvisioningArtifact(xAmzTarget, deleteProvisioningArtifactInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a self-service action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceActionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteServiceActionInput deleteServiceActionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteServiceAction(xAmzTarget, deleteServiceActionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified TagOption.&lt;/p&gt; &lt;p&gt;You cannot delete a TagOption if it is associated with a product or portfolio.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagOptionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTagOptionInput deleteTagOptionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTagOption(xAmzTarget, deleteTagOptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the specified constraint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConstraintTest() throws ApiException {
        String xAmzTarget = null;
        DescribeConstraintInput describeConstraintInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConstraintOutput response = api.describeConstraint(xAmzTarget, describeConstraintInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the status of the specified copy product operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCopyProductStatusTest() throws ApiException {
        String xAmzTarget = null;
        DescribeCopyProductStatusInput describeCopyProductStatusInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeCopyProductStatusOutput response = api.describeCopyProductStatus(xAmzTarget, describeCopyProductStatusInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the specified portfolio.&lt;/p&gt; &lt;p&gt;A delegated admin is authorized to invoke this command.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePortfolioTest() throws ApiException {
        String xAmzTarget = null;
        DescribePortfolioInput describePortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePortfolioOutput response = api.describePortfolio(xAmzTarget, describePortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the status of the specified portfolio share operation. This API can only be called by the management account in the organization or by a delegated admin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePortfolioShareStatusTest() throws ApiException {
        String xAmzTarget = null;
        DescribePortfolioShareStatusInput describePortfolioShareStatusInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePortfolioShareStatusOutput response = api.describePortfolioShareStatus(xAmzTarget, describePortfolioShareStatusInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a summary of each of the portfolio shares that were created for the specified portfolio.&lt;/p&gt; &lt;p&gt;You can use this API to determine which accounts or organizational nodes this portfolio have been shared, whether the recipient entity has imported the share, and whether TagOptions are included with the share.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;PortfolioId&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt; parameters are both required.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePortfolioSharesTest() throws ApiException {
        String xAmzTarget = null;
        DescribePortfolioSharesInput describePortfolioSharesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        DescribePortfolioSharesOutput response = api.describePortfolioShares(xAmzTarget, describePortfolioSharesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the specified product.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Running this operation with administrator access results in a failure. &lt;a&gt;DescribeProductAsAdmin&lt;/a&gt; should be used instead. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProductTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProductInput describeProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProductOutput response = api.describeProduct(xAmzTarget, describeProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the specified product. This operation is run with administrator access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProductAsAdminTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProductAsAdminInput describeProductAsAdminInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProductAsAdminOutput response = api.describeProductAsAdmin(xAmzTarget, describeProductAsAdminInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the specified product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProductViewTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProductViewInput describeProductViewInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProductViewOutput response = api.describeProductView(xAmzTarget, describeProductViewInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the specified provisioned product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProvisionedProductTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProvisionedProductInput describeProvisionedProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProvisionedProductOutput response = api.describeProvisionedProduct(xAmzTarget, describeProvisionedProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the resource changes for the specified plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProvisionedProductPlanTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProvisionedProductPlanInput describeProvisionedProductPlanInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProvisionedProductPlanOutput response = api.describeProvisionedProductPlan(xAmzTarget, describeProvisionedProductPlanInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the specified provisioning artifact (also known as a version) for the specified product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProvisioningArtifactTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProvisioningArtifactInput describeProvisioningArtifactInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProvisioningArtifactOutput response = api.describeProvisioningArtifact(xAmzTarget, describeProvisioningArtifactInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the configuration required to provision the specified product using the specified provisioning artifact.&lt;/p&gt; &lt;p&gt;If the output contains a TagOption key with an empty list of values, there is a TagOption conflict for that key. The end user cannot take action to fix the conflict, and launch is not blocked. In subsequent calls to &lt;a&gt;ProvisionProduct&lt;/a&gt;, do not include conflicted TagOption keys as tags, or this causes the error \&quot;Parameter validation failed: Missing required parameter in Tags[&lt;i&gt;N&lt;/i&gt;]:&lt;i&gt;Value&lt;/i&gt;\&quot;. Tag the provisioned product with the value &lt;code&gt;sc-tagoption-conflict-portfolioId-productId&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProvisioningParametersTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProvisioningParametersInput describeProvisioningParametersInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProvisioningParametersOutput response = api.describeProvisioningParameters(xAmzTarget, describeProvisioningParametersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the specified request operation.&lt;/p&gt; &lt;p&gt;Use this operation after calling a request operation (for example, &lt;a&gt;ProvisionProduct&lt;/a&gt;, &lt;a&gt;TerminateProvisionedProduct&lt;/a&gt;, or &lt;a&gt;UpdateProvisionedProduct&lt;/a&gt;). &lt;/p&gt; &lt;note&gt; &lt;p&gt;If a provisioned product was transferred to a new owner using &lt;a&gt;UpdateProvisionedProductProperties&lt;/a&gt;, the new owner will be able to describe all past records for that product. The previous owner will no longer be able to describe the records, but will be able to use &lt;a&gt;ListRecordHistory&lt;/a&gt; to see the product&#39;s history from when he was the owner.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRecordTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRecordInput describeRecordInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRecordOutput response = api.describeRecord(xAmzTarget, describeRecordInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a self-service action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServiceActionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeServiceActionInput describeServiceActionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeServiceActionOutput response = api.describeServiceAction(xAmzTarget, describeServiceActionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Finds the default parameters for a specific self-service action on a specific provisioned product and returns a map of the results to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServiceActionExecutionParametersTest() throws ApiException {
        String xAmzTarget = null;
        DescribeServiceActionExecutionParametersInput describeServiceActionExecutionParametersInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeServiceActionExecutionParametersOutput response = api.describeServiceActionExecutionParameters(xAmzTarget, describeServiceActionExecutionParametersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the specified TagOption.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTagOptionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTagOptionInput describeTagOptionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTagOptionOutput response = api.describeTagOption(xAmzTarget, describeTagOptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disable portfolio sharing through the Organizations service. This command will not delete your current shares, but prevents you from creating new shares throughout your organization. Current shares are not kept in sync with your organization structure if the structure changes after calling this API. Only the management account in the organization can call this API.&lt;/p&gt; &lt;p&gt;You cannot call this API if there are active delegated administrators in the organization.&lt;/p&gt; &lt;p&gt;Note that a delegated administrator is not authorized to invoke &lt;code&gt;DisableAWSOrganizationsAccess&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you share an Service Catalog portfolio in an organization within Organizations, and then disable Organizations access for Service Catalog, the portfolio access permissions will not sync with the latest changes to the organization structure. Specifically, accounts that you removed from the organization after disabling Service Catalog access will retain access to the previously shared portfolio.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableAWSOrganizationsAccessTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableAWSOrganizationsAccess(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the specified budget from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateBudgetFromResourceTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateBudgetFromResourceInput disassociateBudgetFromResourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateBudgetFromResource(xAmzTarget, disassociateBudgetFromResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates a previously associated principal ARN from a specified portfolio.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;PrincipalType&lt;/code&gt; and &lt;code&gt;PrincipalARN&lt;/code&gt; must match the &lt;code&gt;AssociatePrincipalWithPortfolio&lt;/code&gt; call request details. For example, to disassociate an association created with a &lt;code&gt;PrincipalARN&lt;/code&gt; of &lt;code&gt;PrincipalType&lt;/code&gt; IAM you must use the &lt;code&gt;PrincipalType&lt;/code&gt; IAM when calling &lt;code&gt;DisassociatePrincipalFromPortfolio&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;For portfolios that have been shared with principal name sharing enabled: after disassociating a principal, share recipient accounts will no longer be able to provision products in this portfolio using a role matching the name of the associated principal. &lt;/p&gt; &lt;p&gt;For more information, review &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cli/latest/reference/servicecatalog/associate-principal-with-portfolio.html#options\&quot;&gt;associate-principal-with-portfolio&lt;/a&gt; in the Amazon Web Services CLI Command Reference. &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you disassociate a principal from a portfolio, with PrincipalType as &lt;code&gt;IAM&lt;/code&gt;, the same principal will still have access to the portfolio if it matches one of the associated principals of type &lt;code&gt;IAM_PATTERN&lt;/code&gt;. To fully remove access for a principal, verify all the associated Principals of type &lt;code&gt;IAM_PATTERN&lt;/code&gt;, and then ensure you disassociate any &lt;code&gt;IAM_PATTERN&lt;/code&gt; principals that match the principal whose access you are removing.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociatePrincipalFromPortfolioTest() throws ApiException {
        String xAmzTarget = null;
        DisassociatePrincipalFromPortfolioInput disassociatePrincipalFromPortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociatePrincipalFromPortfolio(xAmzTarget, disassociatePrincipalFromPortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates the specified product from the specified portfolio. &lt;/p&gt; &lt;p&gt;A delegated admin is authorized to invoke this command.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateProductFromPortfolioTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateProductFromPortfolioInput disassociateProductFromPortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateProductFromPortfolio(xAmzTarget, disassociateProductFromPortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the specified self-service action association from the specified provisioning artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateServiceActionFromProvisioningArtifactTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateServiceActionFromProvisioningArtifactInput disassociateServiceActionFromProvisioningArtifactInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateServiceActionFromProvisioningArtifact(xAmzTarget, disassociateServiceActionFromProvisioningArtifactInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the specified TagOption from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateTagOptionFromResourceTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateTagOptionFromResourceInput disassociateTagOptionFromResourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateTagOptionFromResource(xAmzTarget, disassociateTagOptionFromResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enable portfolio sharing feature through Organizations. This API will allow Service Catalog to receive updates on your organization in order to sync your shares with the current structure. This API can only be called by the management account in the organization.&lt;/p&gt; &lt;p&gt;When you call this API, Service Catalog calls &lt;code&gt;organizations:EnableAWSServiceAccess&lt;/code&gt; on your behalf so that your shares stay in sync with any changes in your Organizations structure.&lt;/p&gt; &lt;p&gt;Note that a delegated administrator is not authorized to invoke &lt;code&gt;EnableAWSOrganizationsAccess&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you have previously disabled Organizations access for Service Catalog, and then enable access again, the portfolio access permissions might not sync with the latest changes to the organization structure. Specifically, accounts that you removed from the organization after disabling Service Catalog access, and before you enabled access again, can retain access to the previously shared portfolio. As a result, an account that has been removed from the organization might still be able to create or manage Amazon Web Services resources when it is no longer authorized to do so. Amazon Web Services is working to resolve this issue.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableAWSOrganizationsAccessTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.enableAWSOrganizationsAccess(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provisions or modifies a product based on the resource changes for the specified plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void executeProvisionedProductPlanTest() throws ApiException {
        String xAmzTarget = null;
        ExecuteProvisionedProductPlanInput executeProvisionedProductPlanInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExecuteProvisionedProductPlanOutput response = api.executeProvisionedProductPlan(xAmzTarget, executeProvisionedProductPlanInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Executes a self-service action against a provisioned product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void executeProvisionedProductServiceActionTest() throws ApiException {
        String xAmzTarget = null;
        ExecuteProvisionedProductServiceActionInput executeProvisionedProductServiceActionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExecuteProvisionedProductServiceActionOutput response = api.executeProvisionedProductServiceAction(xAmzTarget, executeProvisionedProductServiceActionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the Access Status for Organizations portfolio share feature. This API can only be called by the management account in the organization or by a delegated admin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAWSOrganizationsAccessStatusTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAWSOrganizationsAccessStatusOutput response = api.getAWSOrganizationsAccessStatus(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This API takes either a &lt;code&gt;ProvisonedProductId&lt;/code&gt; or a &lt;code&gt;ProvisionedProductName&lt;/code&gt;, along with a list of one or more output keys, and responds with the key/value pairs of those outputs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProvisionedProductOutputsTest() throws ApiException {
        String xAmzTarget = null;
        GetProvisionedProductOutputsInput getProvisionedProductOutputsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        GetProvisionedProductOutputsOutput response = api.getProvisionedProductOutputs(xAmzTarget, getProvisionedProductOutputsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Requests the import of a resource as an Service Catalog provisioned product that is associated to an Service Catalog product and provisioning artifact. Once imported, all supported governance actions are supported on the provisioned product. &lt;/p&gt; &lt;p&gt; Resource import only supports CloudFormation stack ARNs. CloudFormation StackSets, and non-root nested stacks are not supported. &lt;/p&gt; &lt;p&gt; The CloudFormation stack must have one of the following statuses to be imported: &lt;code&gt;CREATE_COMPLETE&lt;/code&gt;, &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt;, &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt;, &lt;code&gt;IMPORT_COMPLETE&lt;/code&gt;, and &lt;code&gt;IMPORT_ROLLBACK_COMPLETE&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; Import of the resource requires that the CloudFormation stack template matches the associated Service Catalog product provisioning artifact. &lt;/p&gt; &lt;note&gt; &lt;p&gt; When you import an existing CloudFormation stack into a portfolio, constraints that are associated with the product aren&#39;t applied during the import process. The constraints are applied after you call &lt;code&gt;UpdateProvisionedProduct&lt;/code&gt; for the provisioned product. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; The user or role that performs this operation must have the &lt;code&gt;cloudformation:GetTemplate&lt;/code&gt; and &lt;code&gt;cloudformation:DescribeStacks&lt;/code&gt; IAM policy permissions. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importAsProvisionedProductTest() throws ApiException {
        String xAmzTarget = null;
        ImportAsProvisionedProductInput importAsProvisionedProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportAsProvisionedProductOutput response = api.importAsProvisionedProduct(xAmzTarget, importAsProvisionedProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all imported portfolios for which account-to-account shares were accepted by this account. By specifying the &lt;code&gt;PortfolioShareType&lt;/code&gt;, you can list portfolios for which organizational shares were accepted by this account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAcceptedPortfolioSharesTest() throws ApiException {
        String xAmzTarget = null;
        ListAcceptedPortfolioSharesInput listAcceptedPortfolioSharesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListAcceptedPortfolioSharesOutput response = api.listAcceptedPortfolioShares(xAmzTarget, listAcceptedPortfolioSharesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all the budgets associated to the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBudgetsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListBudgetsForResourceInput listBudgetsForResourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListBudgetsForResourceOutput response = api.listBudgetsForResource(xAmzTarget, listBudgetsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the constraints for the specified portfolio and product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConstraintsForPortfolioTest() throws ApiException {
        String xAmzTarget = null;
        ListConstraintsForPortfolioInput listConstraintsForPortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListConstraintsForPortfolioOutput response = api.listConstraintsForPortfolio(xAmzTarget, listConstraintsForPortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Lists the paths to the specified product. A path describes how the user gets access to a specified product and is necessary when provisioning a product. A path also determines the constraints that are put on a product. A path is dependent on a specific product, porfolio, and principal. &lt;/p&gt; &lt;note&gt; &lt;p&gt; When provisioning a product that&#39;s been added to a portfolio, you must grant your user, group, or role access to the portfolio. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_portfolios_users.html\&quot;&gt;Granting users access&lt;/a&gt; in the &lt;i&gt;Service Catalog User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLaunchPathsTest() throws ApiException {
        String xAmzTarget = null;
        ListLaunchPathsInput listLaunchPathsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListLaunchPathsOutput response = api.listLaunchPaths(xAmzTarget, listLaunchPathsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the organization nodes that have access to the specified portfolio. This API can only be called by the management account in the organization or by a delegated admin.&lt;/p&gt; &lt;p&gt;If a delegated admin is de-registered, they can no longer perform this operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationPortfolioAccessTest() throws ApiException {
        String xAmzTarget = null;
        ListOrganizationPortfolioAccessInput listOrganizationPortfolioAccessInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListOrganizationPortfolioAccessOutput response = api.listOrganizationPortfolioAccess(xAmzTarget, listOrganizationPortfolioAccessInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the account IDs that have access to the specified portfolio.&lt;/p&gt; &lt;p&gt;A delegated admin can list the accounts that have access to the shared portfolio. Note that if a delegated admin is de-registered, they can no longer perform this operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPortfolioAccessTest() throws ApiException {
        String xAmzTarget = null;
        ListPortfolioAccessInput listPortfolioAccessInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListPortfolioAccessOutput response = api.listPortfolioAccess(xAmzTarget, listPortfolioAccessInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all portfolios in the catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPortfoliosTest() throws ApiException {
        String xAmzTarget = null;
        ListPortfoliosInput listPortfoliosInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListPortfoliosOutput response = api.listPortfolios(xAmzTarget, listPortfoliosInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all portfolios that the specified product is associated with.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPortfoliosForProductTest() throws ApiException {
        String xAmzTarget = null;
        ListPortfoliosForProductInput listPortfoliosForProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListPortfoliosForProductOutput response = api.listPortfoliosForProduct(xAmzTarget, listPortfoliosForProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all &lt;code&gt;PrincipalARN&lt;/code&gt;s and corresponding &lt;code&gt;PrincipalType&lt;/code&gt;s associated with the specified portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPrincipalsForPortfolioTest() throws ApiException {
        String xAmzTarget = null;
        ListPrincipalsForPortfolioInput listPrincipalsForPortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListPrincipalsForPortfolioOutput response = api.listPrincipalsForPortfolio(xAmzTarget, listPrincipalsForPortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the plans for the specified provisioned product or all plans to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProvisionedProductPlansTest() throws ApiException {
        String xAmzTarget = null;
        ListProvisionedProductPlansInput listProvisionedProductPlansInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListProvisionedProductPlansOutput response = api.listProvisionedProductPlans(xAmzTarget, listProvisionedProductPlansInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all provisioning artifacts (also known as versions) for the specified product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProvisioningArtifactsTest() throws ApiException {
        String xAmzTarget = null;
        ListProvisioningArtifactsInput listProvisioningArtifactsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListProvisioningArtifactsOutput response = api.listProvisioningArtifacts(xAmzTarget, listProvisioningArtifactsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all provisioning artifacts (also known as versions) for the specified self-service action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProvisioningArtifactsForServiceActionTest() throws ApiException {
        String xAmzTarget = null;
        ListProvisioningArtifactsForServiceActionInput listProvisioningArtifactsForServiceActionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListProvisioningArtifactsForServiceActionOutput response = api.listProvisioningArtifactsForServiceAction(xAmzTarget, listProvisioningArtifactsForServiceActionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the specified requests or all performed requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecordHistoryTest() throws ApiException {
        String xAmzTarget = null;
        ListRecordHistoryInput listRecordHistoryInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListRecordHistoryOutput response = api.listRecordHistory(xAmzTarget, listRecordHistoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the resources associated with the specified TagOption.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourcesForTagOptionTest() throws ApiException {
        String xAmzTarget = null;
        ListResourcesForTagOptionInput listResourcesForTagOptionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListResourcesForTagOptionOutput response = api.listResourcesForTagOption(xAmzTarget, listResourcesForTagOptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all self-service actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceActionsTest() throws ApiException {
        String xAmzTarget = null;
        ListServiceActionsInput listServiceActionsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListServiceActionsOutput response = api.listServiceActions(xAmzTarget, listServiceActionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of self-service actions associated with the specified Product ID and Provisioning Artifact ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceActionsForProvisioningArtifactTest() throws ApiException {
        String xAmzTarget = null;
        ListServiceActionsForProvisioningArtifactInput listServiceActionsForProvisioningArtifactInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListServiceActionsForProvisioningArtifactOutput response = api.listServiceActionsForProvisioningArtifact(xAmzTarget, listServiceActionsForProvisioningArtifactInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns summary information about stack instances that are associated with the specified &lt;code&gt;CFN_STACKSET&lt;/code&gt; type provisioned product. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStackInstancesForProvisionedProductTest() throws ApiException {
        String xAmzTarget = null;
        ListStackInstancesForProvisionedProductInput listStackInstancesForProvisionedProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListStackInstancesForProvisionedProductOutput response = api.listStackInstancesForProvisionedProduct(xAmzTarget, listStackInstancesForProvisionedProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the specified TagOptions or all TagOptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagOptionsTest() throws ApiException {
        String xAmzTarget = null;
        ListTagOptionsInput listTagOptionsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        ListTagOptionsOutput response = api.listTagOptions(xAmzTarget, listTagOptionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     *  Notifies the result of the provisioning engine execution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notifyProvisionProductEngineWorkflowResultTest() throws ApiException {
        String xAmzTarget = null;
        NotifyProvisionProductEngineWorkflowResultInput notifyProvisionProductEngineWorkflowResultInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.notifyProvisionProductEngineWorkflowResult(xAmzTarget, notifyProvisionProductEngineWorkflowResultInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Notifies the result of the terminate engine execution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notifyTerminateProvisionedProductEngineWorkflowResultTest() throws ApiException {
        String xAmzTarget = null;
        NotifyTerminateProvisionedProductEngineWorkflowResultInput notifyTerminateProvisionedProductEngineWorkflowResultInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.notifyTerminateProvisionedProductEngineWorkflowResult(xAmzTarget, notifyTerminateProvisionedProductEngineWorkflowResultInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Notifies the result of the update engine execution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notifyUpdateProvisionedProductEngineWorkflowResultTest() throws ApiException {
        String xAmzTarget = null;
        NotifyUpdateProvisionedProductEngineWorkflowResultInput notifyUpdateProvisionedProductEngineWorkflowResultInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.notifyUpdateProvisionedProductEngineWorkflowResult(xAmzTarget, notifyUpdateProvisionedProductEngineWorkflowResultInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Provisions the specified product. &lt;/p&gt; &lt;p&gt; A provisioned product is a resourced instance of a product. For example, provisioning a product that&#39;s based on an CloudFormation template launches an CloudFormation stack and its underlying resources. You can check the status of this request using &lt;a&gt;DescribeRecord&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; If the request contains a tag key with an empty list of values, there&#39;s a tag conflict for that key. Don&#39;t include conflicted keys as tags, or this will cause the error \&quot;Parameter validation failed: Missing required parameter in Tags[&lt;i&gt;N&lt;/i&gt;]:&lt;i&gt;Value&lt;/i&gt;\&quot;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; When provisioning a product that&#39;s been added to a portfolio, you must grant your user, group, or role access to the portfolio. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_portfolios_users.html\&quot;&gt;Granting users access&lt;/a&gt; in the &lt;i&gt;Service Catalog User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionProductTest() throws ApiException {
        String xAmzTarget = null;
        ProvisionProductInput provisionProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ProvisionProductOutput response = api.provisionProduct(xAmzTarget, provisionProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Rejects an offer to share the specified portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectPortfolioShareTest() throws ApiException {
        String xAmzTarget = null;
        RejectPortfolioShareInput rejectPortfolioShareInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.rejectPortfolioShare(xAmzTarget, rejectPortfolioShareInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the provisioned products that are available (not terminated).&lt;/p&gt; &lt;p&gt;To use additional filtering, see &lt;a&gt;SearchProvisionedProducts&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scanProvisionedProductsTest() throws ApiException {
        String xAmzTarget = null;
        ScanProvisionedProductsInput scanProvisionedProductsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ScanProvisionedProductsOutput response = api.scanProvisionedProducts(xAmzTarget, scanProvisionedProductsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the products to which the caller has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchProductsTest() throws ApiException {
        String xAmzTarget = null;
        SearchProductsInput searchProductsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        SearchProductsOutput response = api.searchProducts(xAmzTarget, searchProductsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets information about the products for the specified portfolio or all products.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchProductsAsAdminTest() throws ApiException {
        String xAmzTarget = null;
        SearchProductsAsAdminInput searchProductsAsAdminInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        SearchProductsAsAdminOutput response = api.searchProductsAsAdmin(xAmzTarget, searchProductsAsAdminInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets information about the provisioned products that meet the specified criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchProvisionedProductsTest() throws ApiException {
        String xAmzTarget = null;
        SearchProvisionedProductsInput searchProvisionedProductsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String pageToken = null;
        SearchProvisionedProductsOutput response = api.searchProvisionedProducts(xAmzTarget, searchProvisionedProductsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Terminates the specified provisioned product.&lt;/p&gt; &lt;p&gt;This operation does not delete any records associated with the provisioned product.&lt;/p&gt; &lt;p&gt;You can check the status of this request using &lt;a&gt;DescribeRecord&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateProvisionedProductTest() throws ApiException {
        String xAmzTarget = null;
        TerminateProvisionedProductInput terminateProvisionedProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TerminateProvisionedProductOutput response = api.terminateProvisionedProduct(xAmzTarget, terminateProvisionedProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified constraint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConstraintTest() throws ApiException {
        String xAmzTarget = null;
        UpdateConstraintInput updateConstraintInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConstraintOutput response = api.updateConstraint(xAmzTarget, updateConstraintInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified portfolio.&lt;/p&gt; &lt;p&gt;You cannot update a product that was shared with you.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePortfolioTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePortfolioInput updatePortfolioInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePortfolioOutput response = api.updatePortfolio(xAmzTarget, updatePortfolioInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified portfolio share. You can use this API to enable or disable &lt;code&gt;TagOptions&lt;/code&gt; sharing or Principal sharing for an existing portfolio share. &lt;/p&gt; &lt;p&gt;The portfolio share cannot be updated if the &lt;code&gt;CreatePortfolioShare&lt;/code&gt; operation is &lt;code&gt;IN_PROGRESS&lt;/code&gt;, as the share is not available to recipient entities. In this case, you must wait for the portfolio share to be COMPLETED.&lt;/p&gt; &lt;p&gt;You must provide the &lt;code&gt;accountId&lt;/code&gt; or organization node in the input, but not both.&lt;/p&gt; &lt;p&gt;If the portfolio is shared to both an external account and an organization node, and both shares need to be updated, you must invoke &lt;code&gt;UpdatePortfolioShare&lt;/code&gt; separately for each share type. &lt;/p&gt; &lt;p&gt;This API cannot be used for removing the portfolio share. You must use &lt;code&gt;DeletePortfolioShare&lt;/code&gt; API for that action. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is then shared with other accounts. For a user in a recipient account who is &lt;i&gt;not&lt;/i&gt; an Service Catalog Admin, but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal name association for the portfolio. Although this user may not know which principal names are associated through Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then Service Catalog recommends using &lt;code&gt;PrincipalType&lt;/code&gt; as &lt;code&gt;IAM&lt;/code&gt;. With this configuration, the &lt;code&gt;PrincipalARN&lt;/code&gt; must already exist in the recipient account before it can be associated. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePortfolioShareTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePortfolioShareInput updatePortfolioShareInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePortfolioShareOutput response = api.updatePortfolioShare(xAmzTarget, updatePortfolioShareInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProductInput updateProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProductOutput response = api.updateProduct(xAmzTarget, updateProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Requests updates to the configuration of the specified provisioned product.&lt;/p&gt; &lt;p&gt;If there are tags associated with the object, they cannot be updated or added. Depending on the specific updates requested, this operation can update with no interruption, with some interruption, or replace the provisioned product entirely.&lt;/p&gt; &lt;p&gt;You can check the status of this request using &lt;a&gt;DescribeRecord&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProvisionedProductTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProvisionedProductInput updateProvisionedProductInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProvisionedProductOutput response = api.updateProvisionedProduct(xAmzTarget, updateProvisionedProductInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Requests updates to the properties of the specified provisioned product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProvisionedProductPropertiesTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProvisionedProductPropertiesInput updateProvisionedProductPropertiesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProvisionedProductPropertiesOutput response = api.updateProvisionedProductProperties(xAmzTarget, updateProvisionedProductPropertiesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified provisioning artifact (also known as a version) for the specified product.&lt;/p&gt; &lt;p&gt;You cannot update a provisioning artifact for a product that was shared with you.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProvisioningArtifactTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProvisioningArtifactInput updateProvisioningArtifactInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProvisioningArtifactOutput response = api.updateProvisioningArtifact(xAmzTarget, updateProvisioningArtifactInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a self-service action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceActionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateServiceActionInput updateServiceActionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateServiceActionOutput response = api.updateServiceAction(xAmzTarget, updateServiceActionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified TagOption.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagOptionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTagOptionInput updateTagOptionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTagOptionOutput response = api.updateTagOption(xAmzTarget, updateTagOptionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
