/*
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeProductOutputProductViewSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeProductOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:56.086226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeProductOutput {
  public static final String SERIALIZED_NAME_PRODUCT_VIEW_SUMMARY = "ProductViewSummary";
  @SerializedName(SERIALIZED_NAME_PRODUCT_VIEW_SUMMARY)
  private DescribeProductOutputProductViewSummary productViewSummary;

  public static final String SERIALIZED_NAME_PROVISIONING_ARTIFACTS = "ProvisioningArtifacts";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ARTIFACTS)
  private List provisioningArtifacts;

  public static final String SERIALIZED_NAME_BUDGETS = "Budgets";
  @SerializedName(SERIALIZED_NAME_BUDGETS)
  private List budgets;

  public static final String SERIALIZED_NAME_LAUNCH_PATHS = "LaunchPaths";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PATHS)
  private List launchPaths;

  public DescribeProductOutput() {
  }

  public DescribeProductOutput productViewSummary(DescribeProductOutputProductViewSummary productViewSummary) {
    this.productViewSummary = productViewSummary;
    return this;
  }

  /**
   * Get productViewSummary
   * @return productViewSummary
   */
  @javax.annotation.Nullable
  public DescribeProductOutputProductViewSummary getProductViewSummary() {
    return productViewSummary;
  }

  public void setProductViewSummary(DescribeProductOutputProductViewSummary productViewSummary) {
    this.productViewSummary = productViewSummary;
  }


  public DescribeProductOutput provisioningArtifacts(List provisioningArtifacts) {
    this.provisioningArtifacts = provisioningArtifacts;
    return this;
  }

  /**
   * Get provisioningArtifacts
   * @return provisioningArtifacts
   */
  @javax.annotation.Nullable
  public List getProvisioningArtifacts() {
    return provisioningArtifacts;
  }

  public void setProvisioningArtifacts(List provisioningArtifacts) {
    this.provisioningArtifacts = provisioningArtifacts;
  }


  public DescribeProductOutput budgets(List budgets) {
    this.budgets = budgets;
    return this;
  }

  /**
   * Get budgets
   * @return budgets
   */
  @javax.annotation.Nullable
  public List getBudgets() {
    return budgets;
  }

  public void setBudgets(List budgets) {
    this.budgets = budgets;
  }


  public DescribeProductOutput launchPaths(List launchPaths) {
    this.launchPaths = launchPaths;
    return this;
  }

  /**
   * Get launchPaths
   * @return launchPaths
   */
  @javax.annotation.Nullable
  public List getLaunchPaths() {
    return launchPaths;
  }

  public void setLaunchPaths(List launchPaths) {
    this.launchPaths = launchPaths;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeProductOutput describeProductOutput = (DescribeProductOutput) o;
    return Objects.equals(this.productViewSummary, describeProductOutput.productViewSummary) &&
        Objects.equals(this.provisioningArtifacts, describeProductOutput.provisioningArtifacts) &&
        Objects.equals(this.budgets, describeProductOutput.budgets) &&
        Objects.equals(this.launchPaths, describeProductOutput.launchPaths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productViewSummary, provisioningArtifacts, budgets, launchPaths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeProductOutput {\n");
    sb.append("    productViewSummary: ").append(toIndentedString(productViewSummary)).append("\n");
    sb.append("    provisioningArtifacts: ").append(toIndentedString(provisioningArtifacts)).append("\n");
    sb.append("    budgets: ").append(toIndentedString(budgets)).append("\n");
    sb.append("    launchPaths: ").append(toIndentedString(launchPaths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProductViewSummary");
    openapiFields.add("ProvisioningArtifacts");
    openapiFields.add("Budgets");
    openapiFields.add("LaunchPaths");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeProductOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeProductOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeProductOutput is not found in the empty JSON string", DescribeProductOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeProductOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeProductOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ProductViewSummary`
      if (jsonObj.get("ProductViewSummary") != null && !jsonObj.get("ProductViewSummary").isJsonNull()) {
        DescribeProductOutputProductViewSummary.validateJsonElement(jsonObj.get("ProductViewSummary"));
      }
      // validate the optional field `ProvisioningArtifacts`
      if (jsonObj.get("ProvisioningArtifacts") != null && !jsonObj.get("ProvisioningArtifacts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProvisioningArtifacts"));
      }
      // validate the optional field `Budgets`
      if (jsonObj.get("Budgets") != null && !jsonObj.get("Budgets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Budgets"));
      }
      // validate the optional field `LaunchPaths`
      if (jsonObj.get("LaunchPaths") != null && !jsonObj.get("LaunchPaths").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LaunchPaths"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeProductOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeProductOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeProductOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeProductOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeProductOutput>() {
           @Override
           public void write(JsonWriter out, DescribeProductOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeProductOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeProductOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeProductOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeProductOutput
   */
  public static DescribeProductOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeProductOutput.class);
  }

  /**
   * Convert an instance of DescribeProductOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

