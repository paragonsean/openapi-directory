/*
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CopyProductInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:56.086226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CopyProductInput {
  public static final String SERIALIZED_NAME_ACCEPT_LANGUAGE = "AcceptLanguage";
  @SerializedName(SERIALIZED_NAME_ACCEPT_LANGUAGE)
  private String acceptLanguage;

  public static final String SERIALIZED_NAME_SOURCE_PRODUCT_ARN = "SourceProductArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_PRODUCT_ARN)
  private String sourceProductArn;

  public static final String SERIALIZED_NAME_TARGET_PRODUCT_ID = "TargetProductId";
  @SerializedName(SERIALIZED_NAME_TARGET_PRODUCT_ID)
  private String targetProductId;

  public static final String SERIALIZED_NAME_TARGET_PRODUCT_NAME = "TargetProductName";
  @SerializedName(SERIALIZED_NAME_TARGET_PRODUCT_NAME)
  private String targetProductName;

  public static final String SERIALIZED_NAME_SOURCE_PROVISIONING_ARTIFACT_IDENTIFIERS = "SourceProvisioningArtifactIdentifiers";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROVISIONING_ARTIFACT_IDENTIFIERS)
  private List sourceProvisioningArtifactIdentifiers;

  public static final String SERIALIZED_NAME_COPY_OPTIONS = "CopyOptions";
  @SerializedName(SERIALIZED_NAME_COPY_OPTIONS)
  private List copyOptions;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_TOKEN = "IdempotencyToken";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_TOKEN)
  private String idempotencyToken;

  public CopyProductInput() {
  }

  public CopyProductInput acceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
    return this;
  }

  /**
   * Get acceptLanguage
   * @return acceptLanguage
   */
  @javax.annotation.Nullable
  public String getAcceptLanguage() {
    return acceptLanguage;
  }

  public void setAcceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
  }


  public CopyProductInput sourceProductArn(String sourceProductArn) {
    this.sourceProductArn = sourceProductArn;
    return this;
  }

  /**
   * Get sourceProductArn
   * @return sourceProductArn
   */
  @javax.annotation.Nonnull
  public String getSourceProductArn() {
    return sourceProductArn;
  }

  public void setSourceProductArn(String sourceProductArn) {
    this.sourceProductArn = sourceProductArn;
  }


  public CopyProductInput targetProductId(String targetProductId) {
    this.targetProductId = targetProductId;
    return this;
  }

  /**
   * Get targetProductId
   * @return targetProductId
   */
  @javax.annotation.Nullable
  public String getTargetProductId() {
    return targetProductId;
  }

  public void setTargetProductId(String targetProductId) {
    this.targetProductId = targetProductId;
  }


  public CopyProductInput targetProductName(String targetProductName) {
    this.targetProductName = targetProductName;
    return this;
  }

  /**
   * Get targetProductName
   * @return targetProductName
   */
  @javax.annotation.Nullable
  public String getTargetProductName() {
    return targetProductName;
  }

  public void setTargetProductName(String targetProductName) {
    this.targetProductName = targetProductName;
  }


  public CopyProductInput sourceProvisioningArtifactIdentifiers(List sourceProvisioningArtifactIdentifiers) {
    this.sourceProvisioningArtifactIdentifiers = sourceProvisioningArtifactIdentifiers;
    return this;
  }

  /**
   * Get sourceProvisioningArtifactIdentifiers
   * @return sourceProvisioningArtifactIdentifiers
   */
  @javax.annotation.Nullable
  public List getSourceProvisioningArtifactIdentifiers() {
    return sourceProvisioningArtifactIdentifiers;
  }

  public void setSourceProvisioningArtifactIdentifiers(List sourceProvisioningArtifactIdentifiers) {
    this.sourceProvisioningArtifactIdentifiers = sourceProvisioningArtifactIdentifiers;
  }


  public CopyProductInput copyOptions(List copyOptions) {
    this.copyOptions = copyOptions;
    return this;
  }

  /**
   * Get copyOptions
   * @return copyOptions
   */
  @javax.annotation.Nullable
  public List getCopyOptions() {
    return copyOptions;
  }

  public void setCopyOptions(List copyOptions) {
    this.copyOptions = copyOptions;
  }


  public CopyProductInput idempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
    return this;
  }

  /**
   * Get idempotencyToken
   * @return idempotencyToken
   */
  @javax.annotation.Nonnull
  public String getIdempotencyToken() {
    return idempotencyToken;
  }

  public void setIdempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyProductInput copyProductInput = (CopyProductInput) o;
    return Objects.equals(this.acceptLanguage, copyProductInput.acceptLanguage) &&
        Objects.equals(this.sourceProductArn, copyProductInput.sourceProductArn) &&
        Objects.equals(this.targetProductId, copyProductInput.targetProductId) &&
        Objects.equals(this.targetProductName, copyProductInput.targetProductName) &&
        Objects.equals(this.sourceProvisioningArtifactIdentifiers, copyProductInput.sourceProvisioningArtifactIdentifiers) &&
        Objects.equals(this.copyOptions, copyProductInput.copyOptions) &&
        Objects.equals(this.idempotencyToken, copyProductInput.idempotencyToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptLanguage, sourceProductArn, targetProductId, targetProductName, sourceProvisioningArtifactIdentifiers, copyOptions, idempotencyToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyProductInput {\n");
    sb.append("    acceptLanguage: ").append(toIndentedString(acceptLanguage)).append("\n");
    sb.append("    sourceProductArn: ").append(toIndentedString(sourceProductArn)).append("\n");
    sb.append("    targetProductId: ").append(toIndentedString(targetProductId)).append("\n");
    sb.append("    targetProductName: ").append(toIndentedString(targetProductName)).append("\n");
    sb.append("    sourceProvisioningArtifactIdentifiers: ").append(toIndentedString(sourceProvisioningArtifactIdentifiers)).append("\n");
    sb.append("    copyOptions: ").append(toIndentedString(copyOptions)).append("\n");
    sb.append("    idempotencyToken: ").append(toIndentedString(idempotencyToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcceptLanguage");
    openapiFields.add("SourceProductArn");
    openapiFields.add("TargetProductId");
    openapiFields.add("TargetProductName");
    openapiFields.add("SourceProvisioningArtifactIdentifiers");
    openapiFields.add("CopyOptions");
    openapiFields.add("IdempotencyToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceProductArn");
    openapiRequiredFields.add("IdempotencyToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CopyProductInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CopyProductInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CopyProductInput is not found in the empty JSON string", CopyProductInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CopyProductInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CopyProductInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CopyProductInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AcceptLanguage`
      if (jsonObj.get("AcceptLanguage") != null && !jsonObj.get("AcceptLanguage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AcceptLanguage"));
      }
      // validate the required field `SourceProductArn`
      String.validateJsonElement(jsonObj.get("SourceProductArn"));
      // validate the optional field `TargetProductId`
      if (jsonObj.get("TargetProductId") != null && !jsonObj.get("TargetProductId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetProductId"));
      }
      // validate the optional field `TargetProductName`
      if (jsonObj.get("TargetProductName") != null && !jsonObj.get("TargetProductName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetProductName"));
      }
      // validate the optional field `SourceProvisioningArtifactIdentifiers`
      if (jsonObj.get("SourceProvisioningArtifactIdentifiers") != null && !jsonObj.get("SourceProvisioningArtifactIdentifiers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SourceProvisioningArtifactIdentifiers"));
      }
      // validate the optional field `CopyOptions`
      if (jsonObj.get("CopyOptions") != null && !jsonObj.get("CopyOptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CopyOptions"));
      }
      // validate the required field `IdempotencyToken`
      String.validateJsonElement(jsonObj.get("IdempotencyToken"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CopyProductInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CopyProductInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CopyProductInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CopyProductInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CopyProductInput>() {
           @Override
           public void write(JsonWriter out, CopyProductInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CopyProductInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CopyProductInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CopyProductInput
   * @throws IOException if the JSON string is invalid with respect to CopyProductInput
   */
  public static CopyProductInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CopyProductInput.class);
  }

  /**
   * Convert an instance of CopyProductInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

