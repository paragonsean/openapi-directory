/*
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TerminateProvisionedProductInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:56.086226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TerminateProvisionedProductInput {
  public static final String SERIALIZED_NAME_PROVISIONED_PRODUCT_NAME = "ProvisionedProductName";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_PRODUCT_NAME)
  private String provisionedProductName;

  public static final String SERIALIZED_NAME_PROVISIONED_PRODUCT_ID = "ProvisionedProductId";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_PRODUCT_ID)
  private String provisionedProductId;

  public static final String SERIALIZED_NAME_TERMINATE_TOKEN = "TerminateToken";
  @SerializedName(SERIALIZED_NAME_TERMINATE_TOKEN)
  private String terminateToken;

  public static final String SERIALIZED_NAME_IGNORE_ERRORS = "IgnoreErrors";
  @SerializedName(SERIALIZED_NAME_IGNORE_ERRORS)
  private Boolean ignoreErrors;

  public static final String SERIALIZED_NAME_ACCEPT_LANGUAGE = "AcceptLanguage";
  @SerializedName(SERIALIZED_NAME_ACCEPT_LANGUAGE)
  private String acceptLanguage;

  public static final String SERIALIZED_NAME_RETAIN_PHYSICAL_RESOURCES = "RetainPhysicalResources";
  @SerializedName(SERIALIZED_NAME_RETAIN_PHYSICAL_RESOURCES)
  private Boolean retainPhysicalResources;

  public TerminateProvisionedProductInput() {
  }

  public TerminateProvisionedProductInput provisionedProductName(String provisionedProductName) {
    this.provisionedProductName = provisionedProductName;
    return this;
  }

  /**
   * Get provisionedProductName
   * @return provisionedProductName
   */
  @javax.annotation.Nullable
  public String getProvisionedProductName() {
    return provisionedProductName;
  }

  public void setProvisionedProductName(String provisionedProductName) {
    this.provisionedProductName = provisionedProductName;
  }


  public TerminateProvisionedProductInput provisionedProductId(String provisionedProductId) {
    this.provisionedProductId = provisionedProductId;
    return this;
  }

  /**
   * Get provisionedProductId
   * @return provisionedProductId
   */
  @javax.annotation.Nullable
  public String getProvisionedProductId() {
    return provisionedProductId;
  }

  public void setProvisionedProductId(String provisionedProductId) {
    this.provisionedProductId = provisionedProductId;
  }


  public TerminateProvisionedProductInput terminateToken(String terminateToken) {
    this.terminateToken = terminateToken;
    return this;
  }

  /**
   * Get terminateToken
   * @return terminateToken
   */
  @javax.annotation.Nonnull
  public String getTerminateToken() {
    return terminateToken;
  }

  public void setTerminateToken(String terminateToken) {
    this.terminateToken = terminateToken;
  }


  public TerminateProvisionedProductInput ignoreErrors(Boolean ignoreErrors) {
    this.ignoreErrors = ignoreErrors;
    return this;
  }

  /**
   * Get ignoreErrors
   * @return ignoreErrors
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreErrors() {
    return ignoreErrors;
  }

  public void setIgnoreErrors(Boolean ignoreErrors) {
    this.ignoreErrors = ignoreErrors;
  }


  public TerminateProvisionedProductInput acceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
    return this;
  }

  /**
   * Get acceptLanguage
   * @return acceptLanguage
   */
  @javax.annotation.Nullable
  public String getAcceptLanguage() {
    return acceptLanguage;
  }

  public void setAcceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
  }


  public TerminateProvisionedProductInput retainPhysicalResources(Boolean retainPhysicalResources) {
    this.retainPhysicalResources = retainPhysicalResources;
    return this;
  }

  /**
   * Get retainPhysicalResources
   * @return retainPhysicalResources
   */
  @javax.annotation.Nullable
  public Boolean getRetainPhysicalResources() {
    return retainPhysicalResources;
  }

  public void setRetainPhysicalResources(Boolean retainPhysicalResources) {
    this.retainPhysicalResources = retainPhysicalResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminateProvisionedProductInput terminateProvisionedProductInput = (TerminateProvisionedProductInput) o;
    return Objects.equals(this.provisionedProductName, terminateProvisionedProductInput.provisionedProductName) &&
        Objects.equals(this.provisionedProductId, terminateProvisionedProductInput.provisionedProductId) &&
        Objects.equals(this.terminateToken, terminateProvisionedProductInput.terminateToken) &&
        Objects.equals(this.ignoreErrors, terminateProvisionedProductInput.ignoreErrors) &&
        Objects.equals(this.acceptLanguage, terminateProvisionedProductInput.acceptLanguage) &&
        Objects.equals(this.retainPhysicalResources, terminateProvisionedProductInput.retainPhysicalResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisionedProductName, provisionedProductId, terminateToken, ignoreErrors, acceptLanguage, retainPhysicalResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminateProvisionedProductInput {\n");
    sb.append("    provisionedProductName: ").append(toIndentedString(provisionedProductName)).append("\n");
    sb.append("    provisionedProductId: ").append(toIndentedString(provisionedProductId)).append("\n");
    sb.append("    terminateToken: ").append(toIndentedString(terminateToken)).append("\n");
    sb.append("    ignoreErrors: ").append(toIndentedString(ignoreErrors)).append("\n");
    sb.append("    acceptLanguage: ").append(toIndentedString(acceptLanguage)).append("\n");
    sb.append("    retainPhysicalResources: ").append(toIndentedString(retainPhysicalResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProvisionedProductName");
    openapiFields.add("ProvisionedProductId");
    openapiFields.add("TerminateToken");
    openapiFields.add("IgnoreErrors");
    openapiFields.add("AcceptLanguage");
    openapiFields.add("RetainPhysicalResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TerminateToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerminateProvisionedProductInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerminateProvisionedProductInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerminateProvisionedProductInput is not found in the empty JSON string", TerminateProvisionedProductInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerminateProvisionedProductInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerminateProvisionedProductInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TerminateProvisionedProductInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ProvisionedProductName`
      if (jsonObj.get("ProvisionedProductName") != null && !jsonObj.get("ProvisionedProductName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProvisionedProductName"));
      }
      // validate the optional field `ProvisionedProductId`
      if (jsonObj.get("ProvisionedProductId") != null && !jsonObj.get("ProvisionedProductId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProvisionedProductId"));
      }
      // validate the required field `TerminateToken`
      String.validateJsonElement(jsonObj.get("TerminateToken"));
      // validate the optional field `IgnoreErrors`
      if (jsonObj.get("IgnoreErrors") != null && !jsonObj.get("IgnoreErrors").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IgnoreErrors"));
      }
      // validate the optional field `AcceptLanguage`
      if (jsonObj.get("AcceptLanguage") != null && !jsonObj.get("AcceptLanguage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AcceptLanguage"));
      }
      // validate the optional field `RetainPhysicalResources`
      if (jsonObj.get("RetainPhysicalResources") != null && !jsonObj.get("RetainPhysicalResources").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RetainPhysicalResources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerminateProvisionedProductInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerminateProvisionedProductInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerminateProvisionedProductInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerminateProvisionedProductInput.class));

       return (TypeAdapter<T>) new TypeAdapter<TerminateProvisionedProductInput>() {
           @Override
           public void write(JsonWriter out, TerminateProvisionedProductInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerminateProvisionedProductInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerminateProvisionedProductInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerminateProvisionedProductInput
   * @throws IOException if the JSON string is invalid with respect to TerminateProvisionedProductInput
   */
  public static TerminateProvisionedProductInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerminateProvisionedProductInput.class);
  }

  /**
   * Convert an instance of TerminateProvisionedProductInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

