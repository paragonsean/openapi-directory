/*
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProvisioningArtifactParameterParameterConstraints;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a parameter used to provision a product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:56.086226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvisioningArtifactParameter {
  public static final String SERIALIZED_NAME_PARAMETER_KEY = "ParameterKey";
  @SerializedName(SERIALIZED_NAME_PARAMETER_KEY)
  private String parameterKey;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_PARAMETER_TYPE = "ParameterType";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TYPE)
  private String parameterType;

  public static final String SERIALIZED_NAME_IS_NO_ECHO = "IsNoEcho";
  @SerializedName(SERIALIZED_NAME_IS_NO_ECHO)
  private Boolean isNoEcho;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PARAMETER_CONSTRAINTS = "ParameterConstraints";
  @SerializedName(SERIALIZED_NAME_PARAMETER_CONSTRAINTS)
  private ProvisioningArtifactParameterParameterConstraints parameterConstraints;

  public ProvisioningArtifactParameter() {
  }

  public ProvisioningArtifactParameter parameterKey(String parameterKey) {
    this.parameterKey = parameterKey;
    return this;
  }

  /**
   * Get parameterKey
   * @return parameterKey
   */
  @javax.annotation.Nullable
  public String getParameterKey() {
    return parameterKey;
  }

  public void setParameterKey(String parameterKey) {
    this.parameterKey = parameterKey;
  }


  public ProvisioningArtifactParameter defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public ProvisioningArtifactParameter parameterType(String parameterType) {
    this.parameterType = parameterType;
    return this;
  }

  /**
   * Get parameterType
   * @return parameterType
   */
  @javax.annotation.Nullable
  public String getParameterType() {
    return parameterType;
  }

  public void setParameterType(String parameterType) {
    this.parameterType = parameterType;
  }


  public ProvisioningArtifactParameter isNoEcho(Boolean isNoEcho) {
    this.isNoEcho = isNoEcho;
    return this;
  }

  /**
   * Get isNoEcho
   * @return isNoEcho
   */
  @javax.annotation.Nullable
  public Boolean getIsNoEcho() {
    return isNoEcho;
  }

  public void setIsNoEcho(Boolean isNoEcho) {
    this.isNoEcho = isNoEcho;
  }


  public ProvisioningArtifactParameter description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProvisioningArtifactParameter parameterConstraints(ProvisioningArtifactParameterParameterConstraints parameterConstraints) {
    this.parameterConstraints = parameterConstraints;
    return this;
  }

  /**
   * Get parameterConstraints
   * @return parameterConstraints
   */
  @javax.annotation.Nullable
  public ProvisioningArtifactParameterParameterConstraints getParameterConstraints() {
    return parameterConstraints;
  }

  public void setParameterConstraints(ProvisioningArtifactParameterParameterConstraints parameterConstraints) {
    this.parameterConstraints = parameterConstraints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisioningArtifactParameter provisioningArtifactParameter = (ProvisioningArtifactParameter) o;
    return Objects.equals(this.parameterKey, provisioningArtifactParameter.parameterKey) &&
        Objects.equals(this.defaultValue, provisioningArtifactParameter.defaultValue) &&
        Objects.equals(this.parameterType, provisioningArtifactParameter.parameterType) &&
        Objects.equals(this.isNoEcho, provisioningArtifactParameter.isNoEcho) &&
        Objects.equals(this.description, provisioningArtifactParameter.description) &&
        Objects.equals(this.parameterConstraints, provisioningArtifactParameter.parameterConstraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parameterKey, defaultValue, parameterType, isNoEcho, description, parameterConstraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisioningArtifactParameter {\n");
    sb.append("    parameterKey: ").append(toIndentedString(parameterKey)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    parameterType: ").append(toIndentedString(parameterType)).append("\n");
    sb.append("    isNoEcho: ").append(toIndentedString(isNoEcho)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parameterConstraints: ").append(toIndentedString(parameterConstraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ParameterKey");
    openapiFields.add("DefaultValue");
    openapiFields.add("ParameterType");
    openapiFields.add("IsNoEcho");
    openapiFields.add("Description");
    openapiFields.add("ParameterConstraints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisioningArtifactParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisioningArtifactParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisioningArtifactParameter is not found in the empty JSON string", ProvisioningArtifactParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisioningArtifactParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisioningArtifactParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ParameterKey`
      if (jsonObj.get("ParameterKey") != null && !jsonObj.get("ParameterKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParameterKey"));
      }
      // validate the optional field `DefaultValue`
      if (jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultValue"));
      }
      // validate the optional field `ParameterType`
      if (jsonObj.get("ParameterType") != null && !jsonObj.get("ParameterType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParameterType"));
      }
      // validate the optional field `IsNoEcho`
      if (jsonObj.get("IsNoEcho") != null && !jsonObj.get("IsNoEcho").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsNoEcho"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `ParameterConstraints`
      if (jsonObj.get("ParameterConstraints") != null && !jsonObj.get("ParameterConstraints").isJsonNull()) {
        ProvisioningArtifactParameterParameterConstraints.validateJsonElement(jsonObj.get("ParameterConstraints"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisioningArtifactParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisioningArtifactParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisioningArtifactParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisioningArtifactParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisioningArtifactParameter>() {
           @Override
           public void write(JsonWriter out, ProvisioningArtifactParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisioningArtifactParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisioningArtifactParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisioningArtifactParameter
   * @throws IOException if the JSON string is invalid with respect to ProvisioningArtifactParameter
   */
  public static ProvisioningArtifactParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisioningArtifactParameter.class);
  }

  /**
   * Convert an instance of ProvisioningArtifactParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

