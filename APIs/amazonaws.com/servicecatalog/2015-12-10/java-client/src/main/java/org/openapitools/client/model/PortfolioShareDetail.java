/*
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DescribePortfolioShareType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the portfolio share.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:56.086226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PortfolioShareDetail {
  public static final String SERIALIZED_NAME_PRINCIPAL_ID = "PrincipalId";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ID)
  private String principalId;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DescribePortfolioShareType type;

  public static final String SERIALIZED_NAME_ACCEPTED = "Accepted";
  @SerializedName(SERIALIZED_NAME_ACCEPTED)
  private Boolean accepted;

  public static final String SERIALIZED_NAME_SHARE_TAG_OPTIONS = "ShareTagOptions";
  @SerializedName(SERIALIZED_NAME_SHARE_TAG_OPTIONS)
  private Boolean shareTagOptions;

  public static final String SERIALIZED_NAME_SHARE_PRINCIPALS = "SharePrincipals";
  @SerializedName(SERIALIZED_NAME_SHARE_PRINCIPALS)
  private Boolean sharePrincipals;

  public PortfolioShareDetail() {
  }

  public PortfolioShareDetail principalId(String principalId) {
    this.principalId = principalId;
    return this;
  }

  /**
   * Get principalId
   * @return principalId
   */
  @javax.annotation.Nullable
  public String getPrincipalId() {
    return principalId;
  }

  public void setPrincipalId(String principalId) {
    this.principalId = principalId;
  }


  public PortfolioShareDetail type(DescribePortfolioShareType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public DescribePortfolioShareType getType() {
    return type;
  }

  public void setType(DescribePortfolioShareType type) {
    this.type = type;
  }


  public PortfolioShareDetail accepted(Boolean accepted) {
    this.accepted = accepted;
    return this;
  }

  /**
   * Get accepted
   * @return accepted
   */
  @javax.annotation.Nullable
  public Boolean getAccepted() {
    return accepted;
  }

  public void setAccepted(Boolean accepted) {
    this.accepted = accepted;
  }


  public PortfolioShareDetail shareTagOptions(Boolean shareTagOptions) {
    this.shareTagOptions = shareTagOptions;
    return this;
  }

  /**
   * Get shareTagOptions
   * @return shareTagOptions
   */
  @javax.annotation.Nullable
  public Boolean getShareTagOptions() {
    return shareTagOptions;
  }

  public void setShareTagOptions(Boolean shareTagOptions) {
    this.shareTagOptions = shareTagOptions;
  }


  public PortfolioShareDetail sharePrincipals(Boolean sharePrincipals) {
    this.sharePrincipals = sharePrincipals;
    return this;
  }

  /**
   * Get sharePrincipals
   * @return sharePrincipals
   */
  @javax.annotation.Nullable
  public Boolean getSharePrincipals() {
    return sharePrincipals;
  }

  public void setSharePrincipals(Boolean sharePrincipals) {
    this.sharePrincipals = sharePrincipals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioShareDetail portfolioShareDetail = (PortfolioShareDetail) o;
    return Objects.equals(this.principalId, portfolioShareDetail.principalId) &&
        Objects.equals(this.type, portfolioShareDetail.type) &&
        Objects.equals(this.accepted, portfolioShareDetail.accepted) &&
        Objects.equals(this.shareTagOptions, portfolioShareDetail.shareTagOptions) &&
        Objects.equals(this.sharePrincipals, portfolioShareDetail.sharePrincipals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(principalId, type, accepted, shareTagOptions, sharePrincipals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioShareDetail {\n");
    sb.append("    principalId: ").append(toIndentedString(principalId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    accepted: ").append(toIndentedString(accepted)).append("\n");
    sb.append("    shareTagOptions: ").append(toIndentedString(shareTagOptions)).append("\n");
    sb.append("    sharePrincipals: ").append(toIndentedString(sharePrincipals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PrincipalId");
    openapiFields.add("Type");
    openapiFields.add("Accepted");
    openapiFields.add("ShareTagOptions");
    openapiFields.add("SharePrincipals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PortfolioShareDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PortfolioShareDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortfolioShareDetail is not found in the empty JSON string", PortfolioShareDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PortfolioShareDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PortfolioShareDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PrincipalId`
      if (jsonObj.get("PrincipalId") != null && !jsonObj.get("PrincipalId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PrincipalId"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        DescribePortfolioShareType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Accepted`
      if (jsonObj.get("Accepted") != null && !jsonObj.get("Accepted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Accepted"));
      }
      // validate the optional field `ShareTagOptions`
      if (jsonObj.get("ShareTagOptions") != null && !jsonObj.get("ShareTagOptions").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ShareTagOptions"));
      }
      // validate the optional field `SharePrincipals`
      if (jsonObj.get("SharePrincipals") != null && !jsonObj.get("SharePrincipals").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SharePrincipals"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortfolioShareDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortfolioShareDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortfolioShareDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortfolioShareDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<PortfolioShareDetail>() {
           @Override
           public void write(JsonWriter out, PortfolioShareDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortfolioShareDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PortfolioShareDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PortfolioShareDetail
   * @throws IOException if the JSON string is invalid with respect to PortfolioShareDetail
   */
  public static PortfolioShareDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortfolioShareDetail.class);
  }

  /**
   * Convert an instance of PortfolioShareDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

