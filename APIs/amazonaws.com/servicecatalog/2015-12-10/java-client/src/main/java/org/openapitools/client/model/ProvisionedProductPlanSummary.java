/*
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProvisionedProductPlanType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary information about a plan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:56.086226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvisionedProductPlanSummary {
  public static final String SERIALIZED_NAME_PLAN_NAME = "PlanName";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  private String planName;

  public static final String SERIALIZED_NAME_PLAN_ID = "PlanId";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  public static final String SERIALIZED_NAME_PROVISION_PRODUCT_ID = "ProvisionProductId";
  @SerializedName(SERIALIZED_NAME_PROVISION_PRODUCT_ID)
  private String provisionProductId;

  public static final String SERIALIZED_NAME_PROVISION_PRODUCT_NAME = "ProvisionProductName";
  @SerializedName(SERIALIZED_NAME_PROVISION_PRODUCT_NAME)
  private String provisionProductName;

  public static final String SERIALIZED_NAME_PLAN_TYPE = "PlanType";
  @SerializedName(SERIALIZED_NAME_PLAN_TYPE)
  private ProvisionedProductPlanType planType;

  public static final String SERIALIZED_NAME_PROVISIONING_ARTIFACT_ID = "ProvisioningArtifactId";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ARTIFACT_ID)
  private String provisioningArtifactId;

  public ProvisionedProductPlanSummary() {
  }

  public ProvisionedProductPlanSummary planName(String planName) {
    this.planName = planName;
    return this;
  }

  /**
   * Get planName
   * @return planName
   */
  @javax.annotation.Nullable
  public String getPlanName() {
    return planName;
  }

  public void setPlanName(String planName) {
    this.planName = planName;
  }


  public ProvisionedProductPlanSummary planId(String planId) {
    this.planId = planId;
    return this;
  }

  /**
   * Get planId
   * @return planId
   */
  @javax.annotation.Nullable
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }


  public ProvisionedProductPlanSummary provisionProductId(String provisionProductId) {
    this.provisionProductId = provisionProductId;
    return this;
  }

  /**
   * Get provisionProductId
   * @return provisionProductId
   */
  @javax.annotation.Nullable
  public String getProvisionProductId() {
    return provisionProductId;
  }

  public void setProvisionProductId(String provisionProductId) {
    this.provisionProductId = provisionProductId;
  }


  public ProvisionedProductPlanSummary provisionProductName(String provisionProductName) {
    this.provisionProductName = provisionProductName;
    return this;
  }

  /**
   * Get provisionProductName
   * @return provisionProductName
   */
  @javax.annotation.Nullable
  public String getProvisionProductName() {
    return provisionProductName;
  }

  public void setProvisionProductName(String provisionProductName) {
    this.provisionProductName = provisionProductName;
  }


  public ProvisionedProductPlanSummary planType(ProvisionedProductPlanType planType) {
    this.planType = planType;
    return this;
  }

  /**
   * Get planType
   * @return planType
   */
  @javax.annotation.Nullable
  public ProvisionedProductPlanType getPlanType() {
    return planType;
  }

  public void setPlanType(ProvisionedProductPlanType planType) {
    this.planType = planType;
  }


  public ProvisionedProductPlanSummary provisioningArtifactId(String provisioningArtifactId) {
    this.provisioningArtifactId = provisioningArtifactId;
    return this;
  }

  /**
   * Get provisioningArtifactId
   * @return provisioningArtifactId
   */
  @javax.annotation.Nullable
  public String getProvisioningArtifactId() {
    return provisioningArtifactId;
  }

  public void setProvisioningArtifactId(String provisioningArtifactId) {
    this.provisioningArtifactId = provisioningArtifactId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionedProductPlanSummary provisionedProductPlanSummary = (ProvisionedProductPlanSummary) o;
    return Objects.equals(this.planName, provisionedProductPlanSummary.planName) &&
        Objects.equals(this.planId, provisionedProductPlanSummary.planId) &&
        Objects.equals(this.provisionProductId, provisionedProductPlanSummary.provisionProductId) &&
        Objects.equals(this.provisionProductName, provisionedProductPlanSummary.provisionProductName) &&
        Objects.equals(this.planType, provisionedProductPlanSummary.planType) &&
        Objects.equals(this.provisioningArtifactId, provisionedProductPlanSummary.provisioningArtifactId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(planName, planId, provisionProductId, provisionProductName, planType, provisioningArtifactId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionedProductPlanSummary {\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    provisionProductId: ").append(toIndentedString(provisionProductId)).append("\n");
    sb.append("    provisionProductName: ").append(toIndentedString(provisionProductName)).append("\n");
    sb.append("    planType: ").append(toIndentedString(planType)).append("\n");
    sb.append("    provisioningArtifactId: ").append(toIndentedString(provisioningArtifactId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PlanName");
    openapiFields.add("PlanId");
    openapiFields.add("ProvisionProductId");
    openapiFields.add("ProvisionProductName");
    openapiFields.add("PlanType");
    openapiFields.add("ProvisioningArtifactId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisionedProductPlanSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionedProductPlanSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionedProductPlanSummary is not found in the empty JSON string", ProvisionedProductPlanSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisionedProductPlanSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisionedProductPlanSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PlanName`
      if (jsonObj.get("PlanName") != null && !jsonObj.get("PlanName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlanName"));
      }
      // validate the optional field `PlanId`
      if (jsonObj.get("PlanId") != null && !jsonObj.get("PlanId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlanId"));
      }
      // validate the optional field `ProvisionProductId`
      if (jsonObj.get("ProvisionProductId") != null && !jsonObj.get("ProvisionProductId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProvisionProductId"));
      }
      // validate the optional field `ProvisionProductName`
      if (jsonObj.get("ProvisionProductName") != null && !jsonObj.get("ProvisionProductName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProvisionProductName"));
      }
      // validate the optional field `PlanType`
      if (jsonObj.get("PlanType") != null && !jsonObj.get("PlanType").isJsonNull()) {
        ProvisionedProductPlanType.validateJsonElement(jsonObj.get("PlanType"));
      }
      // validate the optional field `ProvisioningArtifactId`
      if (jsonObj.get("ProvisioningArtifactId") != null && !jsonObj.get("ProvisioningArtifactId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProvisioningArtifactId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisionedProductPlanSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisionedProductPlanSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisionedProductPlanSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisionedProductPlanSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisionedProductPlanSummary>() {
           @Override
           public void write(JsonWriter out, ProvisionedProductPlanSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisionedProductPlanSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisionedProductPlanSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisionedProductPlanSummary
   * @throws IOException if the JSON string is invalid with respect to ProvisionedProductPlanSummary
   */
  public static ProvisionedProductPlanSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionedProductPlanSummary.class);
  }

  /**
   * Convert an instance of ProvisionedProductPlanSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

