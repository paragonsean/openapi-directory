/*
 * AWS Service Catalog
 * <fullname>Service Catalog</fullname> <p> <a href=\"http://aws.amazon.com/servicecatalog\">Service Catalog</a> enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in <a href=\"http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html\">Service Catalog Concepts</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProvisionedProductPlanType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateProvisionedProductPlanInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:56.086226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateProvisionedProductPlanInput {
  public static final String SERIALIZED_NAME_ACCEPT_LANGUAGE = "AcceptLanguage";
  @SerializedName(SERIALIZED_NAME_ACCEPT_LANGUAGE)
  private String acceptLanguage;

  public static final String SERIALIZED_NAME_PLAN_NAME = "PlanName";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  private String planName;

  public static final String SERIALIZED_NAME_PLAN_TYPE = "PlanType";
  @SerializedName(SERIALIZED_NAME_PLAN_TYPE)
  private ProvisionedProductPlanType planType;

  public static final String SERIALIZED_NAME_NOTIFICATION_ARNS = "NotificationArns";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ARNS)
  private List notificationArns;

  public static final String SERIALIZED_NAME_PATH_ID = "PathId";
  @SerializedName(SERIALIZED_NAME_PATH_ID)
  private String pathId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "ProductId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PROVISIONED_PRODUCT_NAME = "ProvisionedProductName";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_PRODUCT_NAME)
  private String provisionedProductName;

  public static final String SERIALIZED_NAME_PROVISIONING_ARTIFACT_ID = "ProvisioningArtifactId";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ARTIFACT_ID)
  private String provisioningArtifactId;

  public static final String SERIALIZED_NAME_PROVISIONING_PARAMETERS = "ProvisioningParameters";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PARAMETERS)
  private List provisioningParameters;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_TOKEN = "IdempotencyToken";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_TOKEN)
  private String idempotencyToken;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateProvisionedProductPlanInput() {
  }

  public CreateProvisionedProductPlanInput acceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
    return this;
  }

  /**
   * Get acceptLanguage
   * @return acceptLanguage
   */
  @javax.annotation.Nullable
  public String getAcceptLanguage() {
    return acceptLanguage;
  }

  public void setAcceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
  }


  public CreateProvisionedProductPlanInput planName(String planName) {
    this.planName = planName;
    return this;
  }

  /**
   * Get planName
   * @return planName
   */
  @javax.annotation.Nonnull
  public String getPlanName() {
    return planName;
  }

  public void setPlanName(String planName) {
    this.planName = planName;
  }


  public CreateProvisionedProductPlanInput planType(ProvisionedProductPlanType planType) {
    this.planType = planType;
    return this;
  }

  /**
   * Get planType
   * @return planType
   */
  @javax.annotation.Nonnull
  public ProvisionedProductPlanType getPlanType() {
    return planType;
  }

  public void setPlanType(ProvisionedProductPlanType planType) {
    this.planType = planType;
  }


  public CreateProvisionedProductPlanInput notificationArns(List notificationArns) {
    this.notificationArns = notificationArns;
    return this;
  }

  /**
   * Get notificationArns
   * @return notificationArns
   */
  @javax.annotation.Nullable
  public List getNotificationArns() {
    return notificationArns;
  }

  public void setNotificationArns(List notificationArns) {
    this.notificationArns = notificationArns;
  }


  public CreateProvisionedProductPlanInput pathId(String pathId) {
    this.pathId = pathId;
    return this;
  }

  /**
   * Get pathId
   * @return pathId
   */
  @javax.annotation.Nullable
  public String getPathId() {
    return pathId;
  }

  public void setPathId(String pathId) {
    this.pathId = pathId;
  }


  public CreateProvisionedProductPlanInput productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nonnull
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public CreateProvisionedProductPlanInput provisionedProductName(String provisionedProductName) {
    this.provisionedProductName = provisionedProductName;
    return this;
  }

  /**
   * Get provisionedProductName
   * @return provisionedProductName
   */
  @javax.annotation.Nonnull
  public String getProvisionedProductName() {
    return provisionedProductName;
  }

  public void setProvisionedProductName(String provisionedProductName) {
    this.provisionedProductName = provisionedProductName;
  }


  public CreateProvisionedProductPlanInput provisioningArtifactId(String provisioningArtifactId) {
    this.provisioningArtifactId = provisioningArtifactId;
    return this;
  }

  /**
   * Get provisioningArtifactId
   * @return provisioningArtifactId
   */
  @javax.annotation.Nonnull
  public String getProvisioningArtifactId() {
    return provisioningArtifactId;
  }

  public void setProvisioningArtifactId(String provisioningArtifactId) {
    this.provisioningArtifactId = provisioningArtifactId;
  }


  public CreateProvisionedProductPlanInput provisioningParameters(List provisioningParameters) {
    this.provisioningParameters = provisioningParameters;
    return this;
  }

  /**
   * Get provisioningParameters
   * @return provisioningParameters
   */
  @javax.annotation.Nullable
  public List getProvisioningParameters() {
    return provisioningParameters;
  }

  public void setProvisioningParameters(List provisioningParameters) {
    this.provisioningParameters = provisioningParameters;
  }


  public CreateProvisionedProductPlanInput idempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
    return this;
  }

  /**
   * Get idempotencyToken
   * @return idempotencyToken
   */
  @javax.annotation.Nonnull
  public String getIdempotencyToken() {
    return idempotencyToken;
  }

  public void setIdempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
  }


  public CreateProvisionedProductPlanInput tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProvisionedProductPlanInput createProvisionedProductPlanInput = (CreateProvisionedProductPlanInput) o;
    return Objects.equals(this.acceptLanguage, createProvisionedProductPlanInput.acceptLanguage) &&
        Objects.equals(this.planName, createProvisionedProductPlanInput.planName) &&
        Objects.equals(this.planType, createProvisionedProductPlanInput.planType) &&
        Objects.equals(this.notificationArns, createProvisionedProductPlanInput.notificationArns) &&
        Objects.equals(this.pathId, createProvisionedProductPlanInput.pathId) &&
        Objects.equals(this.productId, createProvisionedProductPlanInput.productId) &&
        Objects.equals(this.provisionedProductName, createProvisionedProductPlanInput.provisionedProductName) &&
        Objects.equals(this.provisioningArtifactId, createProvisionedProductPlanInput.provisioningArtifactId) &&
        Objects.equals(this.provisioningParameters, createProvisionedProductPlanInput.provisioningParameters) &&
        Objects.equals(this.idempotencyToken, createProvisionedProductPlanInput.idempotencyToken) &&
        Objects.equals(this.tags, createProvisionedProductPlanInput.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptLanguage, planName, planType, notificationArns, pathId, productId, provisionedProductName, provisioningArtifactId, provisioningParameters, idempotencyToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProvisionedProductPlanInput {\n");
    sb.append("    acceptLanguage: ").append(toIndentedString(acceptLanguage)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    planType: ").append(toIndentedString(planType)).append("\n");
    sb.append("    notificationArns: ").append(toIndentedString(notificationArns)).append("\n");
    sb.append("    pathId: ").append(toIndentedString(pathId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    provisionedProductName: ").append(toIndentedString(provisionedProductName)).append("\n");
    sb.append("    provisioningArtifactId: ").append(toIndentedString(provisioningArtifactId)).append("\n");
    sb.append("    provisioningParameters: ").append(toIndentedString(provisioningParameters)).append("\n");
    sb.append("    idempotencyToken: ").append(toIndentedString(idempotencyToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcceptLanguage");
    openapiFields.add("PlanName");
    openapiFields.add("PlanType");
    openapiFields.add("NotificationArns");
    openapiFields.add("PathId");
    openapiFields.add("ProductId");
    openapiFields.add("ProvisionedProductName");
    openapiFields.add("ProvisioningArtifactId");
    openapiFields.add("ProvisioningParameters");
    openapiFields.add("IdempotencyToken");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PlanName");
    openapiRequiredFields.add("PlanType");
    openapiRequiredFields.add("ProductId");
    openapiRequiredFields.add("ProvisionedProductName");
    openapiRequiredFields.add("ProvisioningArtifactId");
    openapiRequiredFields.add("IdempotencyToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateProvisionedProductPlanInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateProvisionedProductPlanInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProvisionedProductPlanInput is not found in the empty JSON string", CreateProvisionedProductPlanInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateProvisionedProductPlanInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateProvisionedProductPlanInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateProvisionedProductPlanInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AcceptLanguage`
      if (jsonObj.get("AcceptLanguage") != null && !jsonObj.get("AcceptLanguage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AcceptLanguage"));
      }
      // validate the required field `PlanName`
      String.validateJsonElement(jsonObj.get("PlanName"));
      // validate the required field `PlanType`
      ProvisionedProductPlanType.validateJsonElement(jsonObj.get("PlanType"));
      // validate the optional field `NotificationArns`
      if (jsonObj.get("NotificationArns") != null && !jsonObj.get("NotificationArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NotificationArns"));
      }
      // validate the optional field `PathId`
      if (jsonObj.get("PathId") != null && !jsonObj.get("PathId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PathId"));
      }
      // validate the required field `ProductId`
      String.validateJsonElement(jsonObj.get("ProductId"));
      // validate the required field `ProvisionedProductName`
      String.validateJsonElement(jsonObj.get("ProvisionedProductName"));
      // validate the required field `ProvisioningArtifactId`
      String.validateJsonElement(jsonObj.get("ProvisioningArtifactId"));
      // validate the optional field `ProvisioningParameters`
      if (jsonObj.get("ProvisioningParameters") != null && !jsonObj.get("ProvisioningParameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProvisioningParameters"));
      }
      // validate the required field `IdempotencyToken`
      String.validateJsonElement(jsonObj.get("IdempotencyToken"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProvisionedProductPlanInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProvisionedProductPlanInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProvisionedProductPlanInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProvisionedProductPlanInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProvisionedProductPlanInput>() {
           @Override
           public void write(JsonWriter out, CreateProvisionedProductPlanInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProvisionedProductPlanInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateProvisionedProductPlanInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateProvisionedProductPlanInput
   * @throws IOException if the JSON string is invalid with respect to CreateProvisionedProductPlanInput
   */
  public static CreateProvisionedProductPlanInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProvisionedProductPlanInput.class);
  }

  /**
   * Convert an instance of CreateProvisionedProductPlanInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

