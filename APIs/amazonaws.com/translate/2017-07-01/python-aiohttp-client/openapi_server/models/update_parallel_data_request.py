# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_parallel_data_request_parallel_data_config import CreateParallelDataRequestParallelDataConfig
from openapi_server import util


class UpdateParallelDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, parallel_data_config: CreateParallelDataRequestParallelDataConfig=None, client_token: str=None):
        """UpdateParallelDataRequest - a model defined in OpenAPI

        :param name: The name of this UpdateParallelDataRequest.
        :param description: The description of this UpdateParallelDataRequest.
        :param parallel_data_config: The parallel_data_config of this UpdateParallelDataRequest.
        :param client_token: The client_token of this UpdateParallelDataRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'parallel_data_config': CreateParallelDataRequestParallelDataConfig,
            'client_token': str
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'parallel_data_config': 'ParallelDataConfig',
            'client_token': 'ClientToken'
        }

        self._name = name
        self._description = description
        self._parallel_data_config = parallel_data_config
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateParallelDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateParallelDataRequest of this UpdateParallelDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateParallelDataRequest.


        :return: The name of this UpdateParallelDataRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateParallelDataRequest.


        :param name: The name of this UpdateParallelDataRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateParallelDataRequest.


        :return: The description of this UpdateParallelDataRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateParallelDataRequest.


        :param description: The description of this UpdateParallelDataRequest.
        :type description: str
        """

        self._description = description

    @property
    def parallel_data_config(self):
        """Gets the parallel_data_config of this UpdateParallelDataRequest.


        :return: The parallel_data_config of this UpdateParallelDataRequest.
        :rtype: CreateParallelDataRequestParallelDataConfig
        """
        return self._parallel_data_config

    @parallel_data_config.setter
    def parallel_data_config(self, parallel_data_config):
        """Sets the parallel_data_config of this UpdateParallelDataRequest.


        :param parallel_data_config: The parallel_data_config of this UpdateParallelDataRequest.
        :type parallel_data_config: CreateParallelDataRequestParallelDataConfig
        """
        if parallel_data_config is None:
            raise ValueError("Invalid value for `parallel_data_config`, must not be `None`")

        self._parallel_data_config = parallel_data_config

    @property
    def client_token(self):
        """Gets the client_token of this UpdateParallelDataRequest.


        :return: The client_token of this UpdateParallelDataRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateParallelDataRequest.


        :param client_token: The client_token of this UpdateParallelDataRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token
