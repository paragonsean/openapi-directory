# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.formality import Formality
from openapi_server.models.profanity import Profanity
from openapi_server import util


class TextTranslationJobPropertiesSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, formality: Formality=None, profanity: Profanity=None):
        """TextTranslationJobPropertiesSettings - a model defined in OpenAPI

        :param formality: The formality of this TextTranslationJobPropertiesSettings.
        :param profanity: The profanity of this TextTranslationJobPropertiesSettings.
        """
        self.openapi_types = {
            'formality': Formality,
            'profanity': Profanity
        }

        self.attribute_map = {
            'formality': 'Formality',
            'profanity': 'Profanity'
        }

        self._formality = formality
        self._profanity = profanity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextTranslationJobPropertiesSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextTranslationJobProperties_Settings of this TextTranslationJobPropertiesSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def formality(self):
        """Gets the formality of this TextTranslationJobPropertiesSettings.


        :return: The formality of this TextTranslationJobPropertiesSettings.
        :rtype: Formality
        """
        return self._formality

    @formality.setter
    def formality(self, formality):
        """Sets the formality of this TextTranslationJobPropertiesSettings.


        :param formality: The formality of this TextTranslationJobPropertiesSettings.
        :type formality: Formality
        """

        self._formality = formality

    @property
    def profanity(self):
        """Gets the profanity of this TextTranslationJobPropertiesSettings.


        :return: The profanity of this TextTranslationJobPropertiesSettings.
        :rtype: Profanity
        """
        return self._profanity

    @profanity.setter
    def profanity(self, profanity):
        """Sets the profanity of this TextTranslationJobPropertiesSettings.


        :param profanity: The profanity of this TextTranslationJobPropertiesSettings.
        :type profanity: Profanity
        """

        self._profanity = profanity
