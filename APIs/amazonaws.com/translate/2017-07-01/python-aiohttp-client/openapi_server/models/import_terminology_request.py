# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_terminology_request_encryption_key import ImportTerminologyRequestEncryptionKey
from openapi_server.models.import_terminology_request_terminology_data import ImportTerminologyRequestTerminologyData
from openapi_server.models.merge_strategy import MergeStrategy
from openapi_server import util


class ImportTerminologyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, merge_strategy: MergeStrategy=None, description: str=None, terminology_data: ImportTerminologyRequestTerminologyData=None, encryption_key: ImportTerminologyRequestEncryptionKey=None, tags: List=None):
        """ImportTerminologyRequest - a model defined in OpenAPI

        :param name: The name of this ImportTerminologyRequest.
        :param merge_strategy: The merge_strategy of this ImportTerminologyRequest.
        :param description: The description of this ImportTerminologyRequest.
        :param terminology_data: The terminology_data of this ImportTerminologyRequest.
        :param encryption_key: The encryption_key of this ImportTerminologyRequest.
        :param tags: The tags of this ImportTerminologyRequest.
        """
        self.openapi_types = {
            'name': str,
            'merge_strategy': MergeStrategy,
            'description': str,
            'terminology_data': ImportTerminologyRequestTerminologyData,
            'encryption_key': ImportTerminologyRequestEncryptionKey,
            'tags': List
        }

        self.attribute_map = {
            'name': 'Name',
            'merge_strategy': 'MergeStrategy',
            'description': 'Description',
            'terminology_data': 'TerminologyData',
            'encryption_key': 'EncryptionKey',
            'tags': 'Tags'
        }

        self._name = name
        self._merge_strategy = merge_strategy
        self._description = description
        self._terminology_data = terminology_data
        self._encryption_key = encryption_key
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportTerminologyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportTerminologyRequest of this ImportTerminologyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ImportTerminologyRequest.


        :return: The name of this ImportTerminologyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportTerminologyRequest.


        :param name: The name of this ImportTerminologyRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def merge_strategy(self):
        """Gets the merge_strategy of this ImportTerminologyRequest.


        :return: The merge_strategy of this ImportTerminologyRequest.
        :rtype: MergeStrategy
        """
        return self._merge_strategy

    @merge_strategy.setter
    def merge_strategy(self, merge_strategy):
        """Sets the merge_strategy of this ImportTerminologyRequest.


        :param merge_strategy: The merge_strategy of this ImportTerminologyRequest.
        :type merge_strategy: MergeStrategy
        """
        if merge_strategy is None:
            raise ValueError("Invalid value for `merge_strategy`, must not be `None`")

        self._merge_strategy = merge_strategy

    @property
    def description(self):
        """Gets the description of this ImportTerminologyRequest.


        :return: The description of this ImportTerminologyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportTerminologyRequest.


        :param description: The description of this ImportTerminologyRequest.
        :type description: str
        """

        self._description = description

    @property
    def terminology_data(self):
        """Gets the terminology_data of this ImportTerminologyRequest.


        :return: The terminology_data of this ImportTerminologyRequest.
        :rtype: ImportTerminologyRequestTerminologyData
        """
        return self._terminology_data

    @terminology_data.setter
    def terminology_data(self, terminology_data):
        """Sets the terminology_data of this ImportTerminologyRequest.


        :param terminology_data: The terminology_data of this ImportTerminologyRequest.
        :type terminology_data: ImportTerminologyRequestTerminologyData
        """
        if terminology_data is None:
            raise ValueError("Invalid value for `terminology_data`, must not be `None`")

        self._terminology_data = terminology_data

    @property
    def encryption_key(self):
        """Gets the encryption_key of this ImportTerminologyRequest.


        :return: The encryption_key of this ImportTerminologyRequest.
        :rtype: ImportTerminologyRequestEncryptionKey
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this ImportTerminologyRequest.


        :param encryption_key: The encryption_key of this ImportTerminologyRequest.
        :type encryption_key: ImportTerminologyRequestEncryptionKey
        """

        self._encryption_key = encryption_key

    @property
    def tags(self):
        """Gets the tags of this ImportTerminologyRequest.


        :return: The tags of this ImportTerminologyRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImportTerminologyRequest.


        :param tags: The tags of this ImportTerminologyRequest.
        :type tags: List
        """

        self._tags = tags
