# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.translate_document_request_document import TranslateDocumentRequestDocument
from openapi_server.models.translation_settings import TranslationSettings
from openapi_server import util


class TranslateDocumentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: TranslateDocumentRequestDocument=None, terminology_names: List=None, source_language_code: str=None, target_language_code: str=None, settings: TranslationSettings=None):
        """TranslateDocumentRequest - a model defined in OpenAPI

        :param document: The document of this TranslateDocumentRequest.
        :param terminology_names: The terminology_names of this TranslateDocumentRequest.
        :param source_language_code: The source_language_code of this TranslateDocumentRequest.
        :param target_language_code: The target_language_code of this TranslateDocumentRequest.
        :param settings: The settings of this TranslateDocumentRequest.
        """
        self.openapi_types = {
            'document': TranslateDocumentRequestDocument,
            'terminology_names': List,
            'source_language_code': str,
            'target_language_code': str,
            'settings': TranslationSettings
        }

        self.attribute_map = {
            'document': 'Document',
            'terminology_names': 'TerminologyNames',
            'source_language_code': 'SourceLanguageCode',
            'target_language_code': 'TargetLanguageCode',
            'settings': 'Settings'
        }

        self._document = document
        self._terminology_names = terminology_names
        self._source_language_code = source_language_code
        self._target_language_code = target_language_code
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TranslateDocumentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TranslateDocumentRequest of this TranslateDocumentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this TranslateDocumentRequest.


        :return: The document of this TranslateDocumentRequest.
        :rtype: TranslateDocumentRequestDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this TranslateDocumentRequest.


        :param document: The document of this TranslateDocumentRequest.
        :type document: TranslateDocumentRequestDocument
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def terminology_names(self):
        """Gets the terminology_names of this TranslateDocumentRequest.


        :return: The terminology_names of this TranslateDocumentRequest.
        :rtype: List
        """
        return self._terminology_names

    @terminology_names.setter
    def terminology_names(self, terminology_names):
        """Sets the terminology_names of this TranslateDocumentRequest.


        :param terminology_names: The terminology_names of this TranslateDocumentRequest.
        :type terminology_names: List
        """

        self._terminology_names = terminology_names

    @property
    def source_language_code(self):
        """Gets the source_language_code of this TranslateDocumentRequest.


        :return: The source_language_code of this TranslateDocumentRequest.
        :rtype: str
        """
        return self._source_language_code

    @source_language_code.setter
    def source_language_code(self, source_language_code):
        """Sets the source_language_code of this TranslateDocumentRequest.


        :param source_language_code: The source_language_code of this TranslateDocumentRequest.
        :type source_language_code: str
        """
        if source_language_code is None:
            raise ValueError("Invalid value for `source_language_code`, must not be `None`")

        self._source_language_code = source_language_code

    @property
    def target_language_code(self):
        """Gets the target_language_code of this TranslateDocumentRequest.


        :return: The target_language_code of this TranslateDocumentRequest.
        :rtype: str
        """
        return self._target_language_code

    @target_language_code.setter
    def target_language_code(self, target_language_code):
        """Sets the target_language_code of this TranslateDocumentRequest.


        :param target_language_code: The target_language_code of this TranslateDocumentRequest.
        :type target_language_code: str
        """
        if target_language_code is None:
            raise ValueError("Invalid value for `target_language_code`, must not be `None`")

        self._target_language_code = target_language_code

    @property
    def settings(self):
        """Gets the settings of this TranslateDocumentRequest.


        :return: The settings of this TranslateDocumentRequest.
        :rtype: TranslationSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this TranslateDocumentRequest.


        :param settings: The settings of this TranslateDocumentRequest.
        :type settings: TranslationSettings
        """

        self._settings = settings
