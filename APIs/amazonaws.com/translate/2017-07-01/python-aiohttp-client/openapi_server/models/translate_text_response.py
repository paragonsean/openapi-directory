# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.translate_text_response_applied_settings import TranslateTextResponseAppliedSettings
from openapi_server import util


class TranslateTextResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, translated_text: str=None, source_language_code: str=None, target_language_code: str=None, applied_terminologies: List=None, applied_settings: TranslateTextResponseAppliedSettings=None):
        """TranslateTextResponse - a model defined in OpenAPI

        :param translated_text: The translated_text of this TranslateTextResponse.
        :param source_language_code: The source_language_code of this TranslateTextResponse.
        :param target_language_code: The target_language_code of this TranslateTextResponse.
        :param applied_terminologies: The applied_terminologies of this TranslateTextResponse.
        :param applied_settings: The applied_settings of this TranslateTextResponse.
        """
        self.openapi_types = {
            'translated_text': str,
            'source_language_code': str,
            'target_language_code': str,
            'applied_terminologies': List,
            'applied_settings': TranslateTextResponseAppliedSettings
        }

        self.attribute_map = {
            'translated_text': 'TranslatedText',
            'source_language_code': 'SourceLanguageCode',
            'target_language_code': 'TargetLanguageCode',
            'applied_terminologies': 'AppliedTerminologies',
            'applied_settings': 'AppliedSettings'
        }

        self._translated_text = translated_text
        self._source_language_code = source_language_code
        self._target_language_code = target_language_code
        self._applied_terminologies = applied_terminologies
        self._applied_settings = applied_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TranslateTextResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TranslateTextResponse of this TranslateTextResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def translated_text(self):
        """Gets the translated_text of this TranslateTextResponse.


        :return: The translated_text of this TranslateTextResponse.
        :rtype: str
        """
        return self._translated_text

    @translated_text.setter
    def translated_text(self, translated_text):
        """Sets the translated_text of this TranslateTextResponse.


        :param translated_text: The translated_text of this TranslateTextResponse.
        :type translated_text: str
        """
        if translated_text is None:
            raise ValueError("Invalid value for `translated_text`, must not be `None`")

        self._translated_text = translated_text

    @property
    def source_language_code(self):
        """Gets the source_language_code of this TranslateTextResponse.


        :return: The source_language_code of this TranslateTextResponse.
        :rtype: str
        """
        return self._source_language_code

    @source_language_code.setter
    def source_language_code(self, source_language_code):
        """Sets the source_language_code of this TranslateTextResponse.


        :param source_language_code: The source_language_code of this TranslateTextResponse.
        :type source_language_code: str
        """
        if source_language_code is None:
            raise ValueError("Invalid value for `source_language_code`, must not be `None`")

        self._source_language_code = source_language_code

    @property
    def target_language_code(self):
        """Gets the target_language_code of this TranslateTextResponse.


        :return: The target_language_code of this TranslateTextResponse.
        :rtype: str
        """
        return self._target_language_code

    @target_language_code.setter
    def target_language_code(self, target_language_code):
        """Sets the target_language_code of this TranslateTextResponse.


        :param target_language_code: The target_language_code of this TranslateTextResponse.
        :type target_language_code: str
        """
        if target_language_code is None:
            raise ValueError("Invalid value for `target_language_code`, must not be `None`")

        self._target_language_code = target_language_code

    @property
    def applied_terminologies(self):
        """Gets the applied_terminologies of this TranslateTextResponse.


        :return: The applied_terminologies of this TranslateTextResponse.
        :rtype: List
        """
        return self._applied_terminologies

    @applied_terminologies.setter
    def applied_terminologies(self, applied_terminologies):
        """Sets the applied_terminologies of this TranslateTextResponse.


        :param applied_terminologies: The applied_terminologies of this TranslateTextResponse.
        :type applied_terminologies: List
        """

        self._applied_terminologies = applied_terminologies

    @property
    def applied_settings(self):
        """Gets the applied_settings of this TranslateTextResponse.


        :return: The applied_settings of this TranslateTextResponse.
        :rtype: TranslateTextResponseAppliedSettings
        """
        return self._applied_settings

    @applied_settings.setter
    def applied_settings(self, applied_settings):
        """Sets the applied_settings of this TranslateTextResponse.


        :param applied_settings: The applied_settings of this TranslateTextResponse.
        :type applied_settings: TranslateTextResponseAppliedSettings
        """

        self._applied_settings = applied_settings
