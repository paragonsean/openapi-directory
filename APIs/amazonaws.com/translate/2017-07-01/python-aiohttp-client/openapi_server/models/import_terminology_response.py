# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_terminology_response_auxiliary_data_location import ImportTerminologyResponseAuxiliaryDataLocation
from openapi_server.models.import_terminology_response_terminology_properties import ImportTerminologyResponseTerminologyProperties
from openapi_server import util


class ImportTerminologyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, terminology_properties: ImportTerminologyResponseTerminologyProperties=None, auxiliary_data_location: ImportTerminologyResponseAuxiliaryDataLocation=None):
        """ImportTerminologyResponse - a model defined in OpenAPI

        :param terminology_properties: The terminology_properties of this ImportTerminologyResponse.
        :param auxiliary_data_location: The auxiliary_data_location of this ImportTerminologyResponse.
        """
        self.openapi_types = {
            'terminology_properties': ImportTerminologyResponseTerminologyProperties,
            'auxiliary_data_location': ImportTerminologyResponseAuxiliaryDataLocation
        }

        self.attribute_map = {
            'terminology_properties': 'TerminologyProperties',
            'auxiliary_data_location': 'AuxiliaryDataLocation'
        }

        self._terminology_properties = terminology_properties
        self._auxiliary_data_location = auxiliary_data_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportTerminologyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportTerminologyResponse of this ImportTerminologyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def terminology_properties(self):
        """Gets the terminology_properties of this ImportTerminologyResponse.


        :return: The terminology_properties of this ImportTerminologyResponse.
        :rtype: ImportTerminologyResponseTerminologyProperties
        """
        return self._terminology_properties

    @terminology_properties.setter
    def terminology_properties(self, terminology_properties):
        """Sets the terminology_properties of this ImportTerminologyResponse.


        :param terminology_properties: The terminology_properties of this ImportTerminologyResponse.
        :type terminology_properties: ImportTerminologyResponseTerminologyProperties
        """

        self._terminology_properties = terminology_properties

    @property
    def auxiliary_data_location(self):
        """Gets the auxiliary_data_location of this ImportTerminologyResponse.


        :return: The auxiliary_data_location of this ImportTerminologyResponse.
        :rtype: ImportTerminologyResponseAuxiliaryDataLocation
        """
        return self._auxiliary_data_location

    @auxiliary_data_location.setter
    def auxiliary_data_location(self, auxiliary_data_location):
        """Sets the auxiliary_data_location of this ImportTerminologyResponse.


        :param auxiliary_data_location: The auxiliary_data_location of this ImportTerminologyResponse.
        :type auxiliary_data_location: ImportTerminologyResponseAuxiliaryDataLocation
        """

        self._auxiliary_data_location = auxiliary_data_location
