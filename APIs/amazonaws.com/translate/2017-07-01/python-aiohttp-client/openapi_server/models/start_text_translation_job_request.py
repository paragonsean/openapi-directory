# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_text_translation_job_request_input_data_config import StartTextTranslationJobRequestInputDataConfig
from openapi_server.models.start_text_translation_job_request_output_data_config import StartTextTranslationJobRequestOutputDataConfig
from openapi_server.models.start_text_translation_job_request_settings import StartTextTranslationJobRequestSettings
from openapi_server import util


class StartTextTranslationJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_name: str=None, input_data_config: StartTextTranslationJobRequestInputDataConfig=None, output_data_config: StartTextTranslationJobRequestOutputDataConfig=None, data_access_role_arn: str=None, source_language_code: str=None, target_language_codes: List=None, terminology_names: List=None, parallel_data_names: List=None, client_token: str=None, settings: StartTextTranslationJobRequestSettings=None):
        """StartTextTranslationJobRequest - a model defined in OpenAPI

        :param job_name: The job_name of this StartTextTranslationJobRequest.
        :param input_data_config: The input_data_config of this StartTextTranslationJobRequest.
        :param output_data_config: The output_data_config of this StartTextTranslationJobRequest.
        :param data_access_role_arn: The data_access_role_arn of this StartTextTranslationJobRequest.
        :param source_language_code: The source_language_code of this StartTextTranslationJobRequest.
        :param target_language_codes: The target_language_codes of this StartTextTranslationJobRequest.
        :param terminology_names: The terminology_names of this StartTextTranslationJobRequest.
        :param parallel_data_names: The parallel_data_names of this StartTextTranslationJobRequest.
        :param client_token: The client_token of this StartTextTranslationJobRequest.
        :param settings: The settings of this StartTextTranslationJobRequest.
        """
        self.openapi_types = {
            'job_name': str,
            'input_data_config': StartTextTranslationJobRequestInputDataConfig,
            'output_data_config': StartTextTranslationJobRequestOutputDataConfig,
            'data_access_role_arn': str,
            'source_language_code': str,
            'target_language_codes': List,
            'terminology_names': List,
            'parallel_data_names': List,
            'client_token': str,
            'settings': StartTextTranslationJobRequestSettings
        }

        self.attribute_map = {
            'job_name': 'JobName',
            'input_data_config': 'InputDataConfig',
            'output_data_config': 'OutputDataConfig',
            'data_access_role_arn': 'DataAccessRoleArn',
            'source_language_code': 'SourceLanguageCode',
            'target_language_codes': 'TargetLanguageCodes',
            'terminology_names': 'TerminologyNames',
            'parallel_data_names': 'ParallelDataNames',
            'client_token': 'ClientToken',
            'settings': 'Settings'
        }

        self._job_name = job_name
        self._input_data_config = input_data_config
        self._output_data_config = output_data_config
        self._data_access_role_arn = data_access_role_arn
        self._source_language_code = source_language_code
        self._target_language_codes = target_language_codes
        self._terminology_names = terminology_names
        self._parallel_data_names = parallel_data_names
        self._client_token = client_token
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTextTranslationJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTextTranslationJobRequest of this StartTextTranslationJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_name(self):
        """Gets the job_name of this StartTextTranslationJobRequest.


        :return: The job_name of this StartTextTranslationJobRequest.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this StartTextTranslationJobRequest.


        :param job_name: The job_name of this StartTextTranslationJobRequest.
        :type job_name: str
        """

        self._job_name = job_name

    @property
    def input_data_config(self):
        """Gets the input_data_config of this StartTextTranslationJobRequest.


        :return: The input_data_config of this StartTextTranslationJobRequest.
        :rtype: StartTextTranslationJobRequestInputDataConfig
        """
        return self._input_data_config

    @input_data_config.setter
    def input_data_config(self, input_data_config):
        """Sets the input_data_config of this StartTextTranslationJobRequest.


        :param input_data_config: The input_data_config of this StartTextTranslationJobRequest.
        :type input_data_config: StartTextTranslationJobRequestInputDataConfig
        """
        if input_data_config is None:
            raise ValueError("Invalid value for `input_data_config`, must not be `None`")

        self._input_data_config = input_data_config

    @property
    def output_data_config(self):
        """Gets the output_data_config of this StartTextTranslationJobRequest.


        :return: The output_data_config of this StartTextTranslationJobRequest.
        :rtype: StartTextTranslationJobRequestOutputDataConfig
        """
        return self._output_data_config

    @output_data_config.setter
    def output_data_config(self, output_data_config):
        """Sets the output_data_config of this StartTextTranslationJobRequest.


        :param output_data_config: The output_data_config of this StartTextTranslationJobRequest.
        :type output_data_config: StartTextTranslationJobRequestOutputDataConfig
        """
        if output_data_config is None:
            raise ValueError("Invalid value for `output_data_config`, must not be `None`")

        self._output_data_config = output_data_config

    @property
    def data_access_role_arn(self):
        """Gets the data_access_role_arn of this StartTextTranslationJobRequest.


        :return: The data_access_role_arn of this StartTextTranslationJobRequest.
        :rtype: str
        """
        return self._data_access_role_arn

    @data_access_role_arn.setter
    def data_access_role_arn(self, data_access_role_arn):
        """Sets the data_access_role_arn of this StartTextTranslationJobRequest.


        :param data_access_role_arn: The data_access_role_arn of this StartTextTranslationJobRequest.
        :type data_access_role_arn: str
        """
        if data_access_role_arn is None:
            raise ValueError("Invalid value for `data_access_role_arn`, must not be `None`")

        self._data_access_role_arn = data_access_role_arn

    @property
    def source_language_code(self):
        """Gets the source_language_code of this StartTextTranslationJobRequest.


        :return: The source_language_code of this StartTextTranslationJobRequest.
        :rtype: str
        """
        return self._source_language_code

    @source_language_code.setter
    def source_language_code(self, source_language_code):
        """Sets the source_language_code of this StartTextTranslationJobRequest.


        :param source_language_code: The source_language_code of this StartTextTranslationJobRequest.
        :type source_language_code: str
        """
        if source_language_code is None:
            raise ValueError("Invalid value for `source_language_code`, must not be `None`")

        self._source_language_code = source_language_code

    @property
    def target_language_codes(self):
        """Gets the target_language_codes of this StartTextTranslationJobRequest.


        :return: The target_language_codes of this StartTextTranslationJobRequest.
        :rtype: List
        """
        return self._target_language_codes

    @target_language_codes.setter
    def target_language_codes(self, target_language_codes):
        """Sets the target_language_codes of this StartTextTranslationJobRequest.


        :param target_language_codes: The target_language_codes of this StartTextTranslationJobRequest.
        :type target_language_codes: List
        """
        if target_language_codes is None:
            raise ValueError("Invalid value for `target_language_codes`, must not be `None`")

        self._target_language_codes = target_language_codes

    @property
    def terminology_names(self):
        """Gets the terminology_names of this StartTextTranslationJobRequest.


        :return: The terminology_names of this StartTextTranslationJobRequest.
        :rtype: List
        """
        return self._terminology_names

    @terminology_names.setter
    def terminology_names(self, terminology_names):
        """Sets the terminology_names of this StartTextTranslationJobRequest.


        :param terminology_names: The terminology_names of this StartTextTranslationJobRequest.
        :type terminology_names: List
        """

        self._terminology_names = terminology_names

    @property
    def parallel_data_names(self):
        """Gets the parallel_data_names of this StartTextTranslationJobRequest.


        :return: The parallel_data_names of this StartTextTranslationJobRequest.
        :rtype: List
        """
        return self._parallel_data_names

    @parallel_data_names.setter
    def parallel_data_names(self, parallel_data_names):
        """Sets the parallel_data_names of this StartTextTranslationJobRequest.


        :param parallel_data_names: The parallel_data_names of this StartTextTranslationJobRequest.
        :type parallel_data_names: List
        """

        self._parallel_data_names = parallel_data_names

    @property
    def client_token(self):
        """Gets the client_token of this StartTextTranslationJobRequest.


        :return: The client_token of this StartTextTranslationJobRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartTextTranslationJobRequest.


        :param client_token: The client_token of this StartTextTranslationJobRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token

    @property
    def settings(self):
        """Gets the settings of this StartTextTranslationJobRequest.


        :return: The settings of this StartTextTranslationJobRequest.
        :rtype: StartTextTranslationJobRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this StartTextTranslationJobRequest.


        :param settings: The settings of this StartTextTranslationJobRequest.
        :type settings: StartTextTranslationJobRequestSettings
        """

        self._settings = settings
