# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directionality import Directionality
from openapi_server.models.terminology_data_format import TerminologyDataFormat
from openapi_server import util


class TerminologyData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file: str=None, format: TerminologyDataFormat=None, directionality: Directionality=None):
        """TerminologyData - a model defined in OpenAPI

        :param file: The file of this TerminologyData.
        :param format: The format of this TerminologyData.
        :param directionality: The directionality of this TerminologyData.
        """
        self.openapi_types = {
            'file': str,
            'format': TerminologyDataFormat,
            'directionality': Directionality
        }

        self.attribute_map = {
            'file': 'File',
            'format': 'Format',
            'directionality': 'Directionality'
        }

        self._file = file
        self._format = format
        self._directionality = directionality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TerminologyData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TerminologyData of this TerminologyData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self):
        """Gets the file of this TerminologyData.


        :return: The file of this TerminologyData.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this TerminologyData.


        :param file: The file of this TerminologyData.
        :type file: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")

        self._file = file

    @property
    def format(self):
        """Gets the format of this TerminologyData.


        :return: The format of this TerminologyData.
        :rtype: TerminologyDataFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this TerminologyData.


        :param format: The format of this TerminologyData.
        :type format: TerminologyDataFormat
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def directionality(self):
        """Gets the directionality of this TerminologyData.


        :return: The directionality of this TerminologyData.
        :rtype: Directionality
        """
        return self._directionality

    @directionality.setter
    def directionality(self, directionality):
        """Sets the directionality of this TerminologyData.


        :param directionality: The directionality of this TerminologyData.
        :type directionality: Directionality
        """

        self._directionality = directionality
