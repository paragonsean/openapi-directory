/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateParallelDataRequest.h
 *
 * 
 */

#ifndef OAICreateParallelDataRequest_H
#define OAICreateParallelDataRequest_H

#include <QJsonObject>

#include "OAICreateParallelDataRequest_ParallelDataConfig.h"
#include "OAIEncryptionKey.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateParallelDataRequest_ParallelDataConfig;
class OAIEncryptionKey;

class OAICreateParallelDataRequest : public OAIObject {
public:
    OAICreateParallelDataRequest();
    OAICreateParallelDataRequest(QString json);
    ~OAICreateParallelDataRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAICreateParallelDataRequest_ParallelDataConfig getParallelDataConfig() const;
    void setParallelDataConfig(const OAICreateParallelDataRequest_ParallelDataConfig &parallel_data_config);
    bool is_parallel_data_config_Set() const;
    bool is_parallel_data_config_Valid() const;

    OAIEncryptionKey getEncryptionKey() const;
    void setEncryptionKey(const OAIEncryptionKey &encryption_key);
    bool is_encryption_key_Set() const;
    bool is_encryption_key_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAICreateParallelDataRequest_ParallelDataConfig m_parallel_data_config;
    bool m_parallel_data_config_isSet;
    bool m_parallel_data_config_isValid;

    OAIEncryptionKey m_encryption_key;
    bool m_encryption_key_isSet;
    bool m_encryption_key_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateParallelDataRequest)

#endif // OAICreateParallelDataRequest_H
