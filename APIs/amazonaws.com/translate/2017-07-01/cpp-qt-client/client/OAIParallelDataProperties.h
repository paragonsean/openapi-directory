/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIParallelDataProperties.h
 *
 * The properties of a parallel data resource.
 */

#ifndef OAIParallelDataProperties_H
#define OAIParallelDataProperties_H

#include <QJsonObject>

#include "OAICreateParallelDataRequest_ParallelDataConfig.h"
#include "OAIEncryptionKey.h"
#include "OAIParallelDataStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateParallelDataRequest_ParallelDataConfig;
class OAIEncryptionKey;

class OAIParallelDataProperties : public OAIObject {
public:
    OAIParallelDataProperties();
    OAIParallelDataProperties(QString json);
    ~OAIParallelDataProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIParallelDataStatus getStatus() const;
    void setStatus(const OAIParallelDataStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSourceLanguageCode() const;
    void setSourceLanguageCode(const QString &source_language_code);
    bool is_source_language_code_Set() const;
    bool is_source_language_code_Valid() const;

    QList getTargetLanguageCodes() const;
    void setTargetLanguageCodes(const QList &target_language_codes);
    bool is_target_language_codes_Set() const;
    bool is_target_language_codes_Valid() const;

    OAICreateParallelDataRequest_ParallelDataConfig getParallelDataConfig() const;
    void setParallelDataConfig(const OAICreateParallelDataRequest_ParallelDataConfig &parallel_data_config);
    bool is_parallel_data_config_Set() const;
    bool is_parallel_data_config_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    qint32 getImportedDataSize() const;
    void setImportedDataSize(const qint32 &imported_data_size);
    bool is_imported_data_size_Set() const;
    bool is_imported_data_size_Valid() const;

    qint32 getImportedRecordCount() const;
    void setImportedRecordCount(const qint32 &imported_record_count);
    bool is_imported_record_count_Set() const;
    bool is_imported_record_count_Valid() const;

    qint32 getFailedRecordCount() const;
    void setFailedRecordCount(const qint32 &failed_record_count);
    bool is_failed_record_count_Set() const;
    bool is_failed_record_count_Valid() const;

    qint32 getSkippedRecordCount() const;
    void setSkippedRecordCount(const qint32 &skipped_record_count);
    bool is_skipped_record_count_Set() const;
    bool is_skipped_record_count_Valid() const;

    OAIEncryptionKey getEncryptionKey() const;
    void setEncryptionKey(const OAIEncryptionKey &encryption_key);
    bool is_encryption_key_Set() const;
    bool is_encryption_key_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getLastUpdatedAt() const;
    void setLastUpdatedAt(const QDateTime &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    OAIParallelDataStatus getLatestUpdateAttemptStatus() const;
    void setLatestUpdateAttemptStatus(const OAIParallelDataStatus &latest_update_attempt_status);
    bool is_latest_update_attempt_status_Set() const;
    bool is_latest_update_attempt_status_Valid() const;

    QDateTime getLatestUpdateAttemptAt() const;
    void setLatestUpdateAttemptAt(const QDateTime &latest_update_attempt_at);
    bool is_latest_update_attempt_at_Set() const;
    bool is_latest_update_attempt_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIParallelDataStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_source_language_code;
    bool m_source_language_code_isSet;
    bool m_source_language_code_isValid;

    QList m_target_language_codes;
    bool m_target_language_codes_isSet;
    bool m_target_language_codes_isValid;

    OAICreateParallelDataRequest_ParallelDataConfig m_parallel_data_config;
    bool m_parallel_data_config_isSet;
    bool m_parallel_data_config_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    qint32 m_imported_data_size;
    bool m_imported_data_size_isSet;
    bool m_imported_data_size_isValid;

    qint32 m_imported_record_count;
    bool m_imported_record_count_isSet;
    bool m_imported_record_count_isValid;

    qint32 m_failed_record_count;
    bool m_failed_record_count_isSet;
    bool m_failed_record_count_isValid;

    qint32 m_skipped_record_count;
    bool m_skipped_record_count_isSet;
    bool m_skipped_record_count_isValid;

    OAIEncryptionKey m_encryption_key;
    bool m_encryption_key_isSet;
    bool m_encryption_key_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;

    OAIParallelDataStatus m_latest_update_attempt_status;
    bool m_latest_update_attempt_status_isSet;
    bool m_latest_update_attempt_status_isValid;

    QDateTime m_latest_update_attempt_at;
    bool m_latest_update_attempt_at_isSet;
    bool m_latest_update_attempt_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIParallelDataProperties)

#endif // OAIParallelDataProperties_H
