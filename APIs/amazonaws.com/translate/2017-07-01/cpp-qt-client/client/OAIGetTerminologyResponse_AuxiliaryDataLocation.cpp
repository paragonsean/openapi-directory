/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTerminologyResponse_AuxiliaryDataLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTerminologyResponse_AuxiliaryDataLocation::OAIGetTerminologyResponse_AuxiliaryDataLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTerminologyResponse_AuxiliaryDataLocation::OAIGetTerminologyResponse_AuxiliaryDataLocation() {
    this->initializeModel();
}

OAIGetTerminologyResponse_AuxiliaryDataLocation::~OAIGetTerminologyResponse_AuxiliaryDataLocation() {}

void OAIGetTerminologyResponse_AuxiliaryDataLocation::initializeModel() {

    m_repository_type_isSet = false;
    m_repository_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIGetTerminologyResponse_AuxiliaryDataLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTerminologyResponse_AuxiliaryDataLocation::fromJsonObject(QJsonObject json) {

    m_repository_type_isValid = ::OpenAPI::fromJsonValue(m_repository_type, json[QString("RepositoryType")]);
    m_repository_type_isSet = !json[QString("RepositoryType")].isNull() && m_repository_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;
}

QString OAIGetTerminologyResponse_AuxiliaryDataLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTerminologyResponse_AuxiliaryDataLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_type_isSet) {
        obj.insert(QString("RepositoryType"), ::OpenAPI::toJsonValue(m_repository_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

QString OAIGetTerminologyResponse_AuxiliaryDataLocation::getRepositoryType() const {
    return m_repository_type;
}
void OAIGetTerminologyResponse_AuxiliaryDataLocation::setRepositoryType(const QString &repository_type) {
    m_repository_type = repository_type;
    m_repository_type_isSet = true;
}

bool OAIGetTerminologyResponse_AuxiliaryDataLocation::is_repository_type_Set() const{
    return m_repository_type_isSet;
}

bool OAIGetTerminologyResponse_AuxiliaryDataLocation::is_repository_type_Valid() const{
    return m_repository_type_isValid;
}

QString OAIGetTerminologyResponse_AuxiliaryDataLocation::getLocation() const {
    return m_location;
}
void OAIGetTerminologyResponse_AuxiliaryDataLocation::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGetTerminologyResponse_AuxiliaryDataLocation::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGetTerminologyResponse_AuxiliaryDataLocation::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIGetTerminologyResponse_AuxiliaryDataLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTerminologyResponse_AuxiliaryDataLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_type_isValid && m_location_isValid && true;
}

} // namespace OpenAPI
