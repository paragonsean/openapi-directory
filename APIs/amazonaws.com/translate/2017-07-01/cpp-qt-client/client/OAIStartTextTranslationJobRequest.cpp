/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTextTranslationJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTextTranslationJobRequest::OAIStartTextTranslationJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTextTranslationJobRequest::OAIStartTextTranslationJobRequest() {
    this->initializeModel();
}

OAIStartTextTranslationJobRequest::~OAIStartTextTranslationJobRequest() {}

void OAIStartTextTranslationJobRequest::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;

    m_source_language_code_isSet = false;
    m_source_language_code_isValid = false;

    m_target_language_codes_isSet = false;
    m_target_language_codes_isValid = false;

    m_terminology_names_isSet = false;
    m_terminology_names_isValid = false;

    m_parallel_data_names_isSet = false;
    m_parallel_data_names_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAIStartTextTranslationJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTextTranslationJobRequest::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;

    m_source_language_code_isValid = ::OpenAPI::fromJsonValue(m_source_language_code, json[QString("SourceLanguageCode")]);
    m_source_language_code_isSet = !json[QString("SourceLanguageCode")].isNull() && m_source_language_code_isValid;

    m_target_language_codes_isValid = ::OpenAPI::fromJsonValue(m_target_language_codes, json[QString("TargetLanguageCodes")]);
    m_target_language_codes_isSet = !json[QString("TargetLanguageCodes")].isNull() && m_target_language_codes_isValid;

    m_terminology_names_isValid = ::OpenAPI::fromJsonValue(m_terminology_names, json[QString("TerminologyNames")]);
    m_terminology_names_isSet = !json[QString("TerminologyNames")].isNull() && m_terminology_names_isValid;

    m_parallel_data_names_isValid = ::OpenAPI::fromJsonValue(m_parallel_data_names, json[QString("ParallelDataNames")]);
    m_parallel_data_names_isSet = !json[QString("ParallelDataNames")].isNull() && m_parallel_data_names_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;
}

QString OAIStartTextTranslationJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTextTranslationJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    if (m_source_language_code_isSet) {
        obj.insert(QString("SourceLanguageCode"), ::OpenAPI::toJsonValue(m_source_language_code));
    }
    if (m_target_language_codes.isSet()) {
        obj.insert(QString("TargetLanguageCodes"), ::OpenAPI::toJsonValue(m_target_language_codes));
    }
    if (m_terminology_names.isSet()) {
        obj.insert(QString("TerminologyNames"), ::OpenAPI::toJsonValue(m_terminology_names));
    }
    if (m_parallel_data_names.isSet()) {
        obj.insert(QString("ParallelDataNames"), ::OpenAPI::toJsonValue(m_parallel_data_names));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

QString OAIStartTextTranslationJobRequest::getJobName() const {
    return m_job_name;
}
void OAIStartTextTranslationJobRequest::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIStartTextTranslationJobRequest::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIStartTextTranslationJobRequest_InputDataConfig OAIStartTextTranslationJobRequest::getInputDataConfig() const {
    return m_input_data_config;
}
void OAIStartTextTranslationJobRequest::setInputDataConfig(const OAIStartTextTranslationJobRequest_InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAIStartTextTranslationJobRequest::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAIStartTextTranslationJobRequest_OutputDataConfig OAIStartTextTranslationJobRequest::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAIStartTextTranslationJobRequest::setOutputDataConfig(const OAIStartTextTranslationJobRequest_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAIStartTextTranslationJobRequest::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

QString OAIStartTextTranslationJobRequest::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAIStartTextTranslationJobRequest::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAIStartTextTranslationJobRequest::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

QString OAIStartTextTranslationJobRequest::getSourceLanguageCode() const {
    return m_source_language_code;
}
void OAIStartTextTranslationJobRequest::setSourceLanguageCode(const QString &source_language_code) {
    m_source_language_code = source_language_code;
    m_source_language_code_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_source_language_code_Set() const{
    return m_source_language_code_isSet;
}

bool OAIStartTextTranslationJobRequest::is_source_language_code_Valid() const{
    return m_source_language_code_isValid;
}

QList OAIStartTextTranslationJobRequest::getTargetLanguageCodes() const {
    return m_target_language_codes;
}
void OAIStartTextTranslationJobRequest::setTargetLanguageCodes(const QList &target_language_codes) {
    m_target_language_codes = target_language_codes;
    m_target_language_codes_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_target_language_codes_Set() const{
    return m_target_language_codes_isSet;
}

bool OAIStartTextTranslationJobRequest::is_target_language_codes_Valid() const{
    return m_target_language_codes_isValid;
}

QList OAIStartTextTranslationJobRequest::getTerminologyNames() const {
    return m_terminology_names;
}
void OAIStartTextTranslationJobRequest::setTerminologyNames(const QList &terminology_names) {
    m_terminology_names = terminology_names;
    m_terminology_names_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_terminology_names_Set() const{
    return m_terminology_names_isSet;
}

bool OAIStartTextTranslationJobRequest::is_terminology_names_Valid() const{
    return m_terminology_names_isValid;
}

QList OAIStartTextTranslationJobRequest::getParallelDataNames() const {
    return m_parallel_data_names;
}
void OAIStartTextTranslationJobRequest::setParallelDataNames(const QList &parallel_data_names) {
    m_parallel_data_names = parallel_data_names;
    m_parallel_data_names_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_parallel_data_names_Set() const{
    return m_parallel_data_names_isSet;
}

bool OAIStartTextTranslationJobRequest::is_parallel_data_names_Valid() const{
    return m_parallel_data_names_isValid;
}

QString OAIStartTextTranslationJobRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartTextTranslationJobRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartTextTranslationJobRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIStartTextTranslationJobRequest_Settings OAIStartTextTranslationJobRequest::getSettings() const {
    return m_settings;
}
void OAIStartTextTranslationJobRequest::setSettings(const OAIStartTextTranslationJobRequest_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIStartTextTranslationJobRequest::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIStartTextTranslationJobRequest::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAIStartTextTranslationJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminology_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_data_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTextTranslationJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_data_config_isValid && m_output_data_config_isValid && m_data_access_role_arn_isValid && m_source_language_code_isValid && m_target_language_codes_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
