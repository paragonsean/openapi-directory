/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParallelDataProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParallelDataProperties::OAIParallelDataProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParallelDataProperties::OAIParallelDataProperties() {
    this->initializeModel();
}

OAIParallelDataProperties::~OAIParallelDataProperties() {}

void OAIParallelDataProperties::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_source_language_code_isSet = false;
    m_source_language_code_isValid = false;

    m_target_language_codes_isSet = false;
    m_target_language_codes_isValid = false;

    m_parallel_data_config_isSet = false;
    m_parallel_data_config_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_imported_data_size_isSet = false;
    m_imported_data_size_isValid = false;

    m_imported_record_count_isSet = false;
    m_imported_record_count_isValid = false;

    m_failed_record_count_isSet = false;
    m_failed_record_count_isValid = false;

    m_skipped_record_count_isSet = false;
    m_skipped_record_count_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_latest_update_attempt_status_isSet = false;
    m_latest_update_attempt_status_isValid = false;

    m_latest_update_attempt_at_isSet = false;
    m_latest_update_attempt_at_isValid = false;
}

void OAIParallelDataProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParallelDataProperties::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_source_language_code_isValid = ::OpenAPI::fromJsonValue(m_source_language_code, json[QString("SourceLanguageCode")]);
    m_source_language_code_isSet = !json[QString("SourceLanguageCode")].isNull() && m_source_language_code_isValid;

    m_target_language_codes_isValid = ::OpenAPI::fromJsonValue(m_target_language_codes, json[QString("TargetLanguageCodes")]);
    m_target_language_codes_isSet = !json[QString("TargetLanguageCodes")].isNull() && m_target_language_codes_isValid;

    m_parallel_data_config_isValid = ::OpenAPI::fromJsonValue(m_parallel_data_config, json[QString("ParallelDataConfig")]);
    m_parallel_data_config_isSet = !json[QString("ParallelDataConfig")].isNull() && m_parallel_data_config_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_imported_data_size_isValid = ::OpenAPI::fromJsonValue(m_imported_data_size, json[QString("ImportedDataSize")]);
    m_imported_data_size_isSet = !json[QString("ImportedDataSize")].isNull() && m_imported_data_size_isValid;

    m_imported_record_count_isValid = ::OpenAPI::fromJsonValue(m_imported_record_count, json[QString("ImportedRecordCount")]);
    m_imported_record_count_isSet = !json[QString("ImportedRecordCount")].isNull() && m_imported_record_count_isValid;

    m_failed_record_count_isValid = ::OpenAPI::fromJsonValue(m_failed_record_count, json[QString("FailedRecordCount")]);
    m_failed_record_count_isSet = !json[QString("FailedRecordCount")].isNull() && m_failed_record_count_isValid;

    m_skipped_record_count_isValid = ::OpenAPI::fromJsonValue(m_skipped_record_count, json[QString("SkippedRecordCount")]);
    m_skipped_record_count_isSet = !json[QString("SkippedRecordCount")].isNull() && m_skipped_record_count_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("EncryptionKey")]);
    m_encryption_key_isSet = !json[QString("EncryptionKey")].isNull() && m_encryption_key_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_latest_update_attempt_status_isValid = ::OpenAPI::fromJsonValue(m_latest_update_attempt_status, json[QString("LatestUpdateAttemptStatus")]);
    m_latest_update_attempt_status_isSet = !json[QString("LatestUpdateAttemptStatus")].isNull() && m_latest_update_attempt_status_isValid;

    m_latest_update_attempt_at_isValid = ::OpenAPI::fromJsonValue(m_latest_update_attempt_at, json[QString("LatestUpdateAttemptAt")]);
    m_latest_update_attempt_at_isSet = !json[QString("LatestUpdateAttemptAt")].isNull() && m_latest_update_attempt_at_isValid;
}

QString OAIParallelDataProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParallelDataProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_source_language_code_isSet) {
        obj.insert(QString("SourceLanguageCode"), ::OpenAPI::toJsonValue(m_source_language_code));
    }
    if (m_target_language_codes.isSet()) {
        obj.insert(QString("TargetLanguageCodes"), ::OpenAPI::toJsonValue(m_target_language_codes));
    }
    if (m_parallel_data_config.isSet()) {
        obj.insert(QString("ParallelDataConfig"), ::OpenAPI::toJsonValue(m_parallel_data_config));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_imported_data_size_isSet) {
        obj.insert(QString("ImportedDataSize"), ::OpenAPI::toJsonValue(m_imported_data_size));
    }
    if (m_imported_record_count_isSet) {
        obj.insert(QString("ImportedRecordCount"), ::OpenAPI::toJsonValue(m_imported_record_count));
    }
    if (m_failed_record_count_isSet) {
        obj.insert(QString("FailedRecordCount"), ::OpenAPI::toJsonValue(m_failed_record_count));
    }
    if (m_skipped_record_count_isSet) {
        obj.insert(QString("SkippedRecordCount"), ::OpenAPI::toJsonValue(m_skipped_record_count));
    }
    if (m_encryption_key.isSet()) {
        obj.insert(QString("EncryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_latest_update_attempt_status.isSet()) {
        obj.insert(QString("LatestUpdateAttemptStatus"), ::OpenAPI::toJsonValue(m_latest_update_attempt_status));
    }
    if (m_latest_update_attempt_at_isSet) {
        obj.insert(QString("LatestUpdateAttemptAt"), ::OpenAPI::toJsonValue(m_latest_update_attempt_at));
    }
    return obj;
}

QString OAIParallelDataProperties::getName() const {
    return m_name;
}
void OAIParallelDataProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParallelDataProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParallelDataProperties::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIParallelDataProperties::getArn() const {
    return m_arn;
}
void OAIParallelDataProperties::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIParallelDataProperties::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIParallelDataProperties::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIParallelDataProperties::getDescription() const {
    return m_description;
}
void OAIParallelDataProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIParallelDataProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIParallelDataProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIParallelDataStatus OAIParallelDataProperties::getStatus() const {
    return m_status;
}
void OAIParallelDataProperties::setStatus(const OAIParallelDataStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIParallelDataProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIParallelDataProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIParallelDataProperties::getSourceLanguageCode() const {
    return m_source_language_code;
}
void OAIParallelDataProperties::setSourceLanguageCode(const QString &source_language_code) {
    m_source_language_code = source_language_code;
    m_source_language_code_isSet = true;
}

bool OAIParallelDataProperties::is_source_language_code_Set() const{
    return m_source_language_code_isSet;
}

bool OAIParallelDataProperties::is_source_language_code_Valid() const{
    return m_source_language_code_isValid;
}

QList OAIParallelDataProperties::getTargetLanguageCodes() const {
    return m_target_language_codes;
}
void OAIParallelDataProperties::setTargetLanguageCodes(const QList &target_language_codes) {
    m_target_language_codes = target_language_codes;
    m_target_language_codes_isSet = true;
}

bool OAIParallelDataProperties::is_target_language_codes_Set() const{
    return m_target_language_codes_isSet;
}

bool OAIParallelDataProperties::is_target_language_codes_Valid() const{
    return m_target_language_codes_isValid;
}

OAICreateParallelDataRequest_ParallelDataConfig OAIParallelDataProperties::getParallelDataConfig() const {
    return m_parallel_data_config;
}
void OAIParallelDataProperties::setParallelDataConfig(const OAICreateParallelDataRequest_ParallelDataConfig &parallel_data_config) {
    m_parallel_data_config = parallel_data_config;
    m_parallel_data_config_isSet = true;
}

bool OAIParallelDataProperties::is_parallel_data_config_Set() const{
    return m_parallel_data_config_isSet;
}

bool OAIParallelDataProperties::is_parallel_data_config_Valid() const{
    return m_parallel_data_config_isValid;
}

QString OAIParallelDataProperties::getMessage() const {
    return m_message;
}
void OAIParallelDataProperties::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIParallelDataProperties::is_message_Set() const{
    return m_message_isSet;
}

bool OAIParallelDataProperties::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIParallelDataProperties::getImportedDataSize() const {
    return m_imported_data_size;
}
void OAIParallelDataProperties::setImportedDataSize(const qint32 &imported_data_size) {
    m_imported_data_size = imported_data_size;
    m_imported_data_size_isSet = true;
}

bool OAIParallelDataProperties::is_imported_data_size_Set() const{
    return m_imported_data_size_isSet;
}

bool OAIParallelDataProperties::is_imported_data_size_Valid() const{
    return m_imported_data_size_isValid;
}

qint32 OAIParallelDataProperties::getImportedRecordCount() const {
    return m_imported_record_count;
}
void OAIParallelDataProperties::setImportedRecordCount(const qint32 &imported_record_count) {
    m_imported_record_count = imported_record_count;
    m_imported_record_count_isSet = true;
}

bool OAIParallelDataProperties::is_imported_record_count_Set() const{
    return m_imported_record_count_isSet;
}

bool OAIParallelDataProperties::is_imported_record_count_Valid() const{
    return m_imported_record_count_isValid;
}

qint32 OAIParallelDataProperties::getFailedRecordCount() const {
    return m_failed_record_count;
}
void OAIParallelDataProperties::setFailedRecordCount(const qint32 &failed_record_count) {
    m_failed_record_count = failed_record_count;
    m_failed_record_count_isSet = true;
}

bool OAIParallelDataProperties::is_failed_record_count_Set() const{
    return m_failed_record_count_isSet;
}

bool OAIParallelDataProperties::is_failed_record_count_Valid() const{
    return m_failed_record_count_isValid;
}

qint32 OAIParallelDataProperties::getSkippedRecordCount() const {
    return m_skipped_record_count;
}
void OAIParallelDataProperties::setSkippedRecordCount(const qint32 &skipped_record_count) {
    m_skipped_record_count = skipped_record_count;
    m_skipped_record_count_isSet = true;
}

bool OAIParallelDataProperties::is_skipped_record_count_Set() const{
    return m_skipped_record_count_isSet;
}

bool OAIParallelDataProperties::is_skipped_record_count_Valid() const{
    return m_skipped_record_count_isValid;
}

OAIEncryptionKey OAIParallelDataProperties::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIParallelDataProperties::setEncryptionKey(const OAIEncryptionKey &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIParallelDataProperties::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIParallelDataProperties::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QDateTime OAIParallelDataProperties::getCreatedAt() const {
    return m_created_at;
}
void OAIParallelDataProperties::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIParallelDataProperties::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIParallelDataProperties::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIParallelDataProperties::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIParallelDataProperties::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIParallelDataProperties::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIParallelDataProperties::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

OAIParallelDataStatus OAIParallelDataProperties::getLatestUpdateAttemptStatus() const {
    return m_latest_update_attempt_status;
}
void OAIParallelDataProperties::setLatestUpdateAttemptStatus(const OAIParallelDataStatus &latest_update_attempt_status) {
    m_latest_update_attempt_status = latest_update_attempt_status;
    m_latest_update_attempt_status_isSet = true;
}

bool OAIParallelDataProperties::is_latest_update_attempt_status_Set() const{
    return m_latest_update_attempt_status_isSet;
}

bool OAIParallelDataProperties::is_latest_update_attempt_status_Valid() const{
    return m_latest_update_attempt_status_isValid;
}

QDateTime OAIParallelDataProperties::getLatestUpdateAttemptAt() const {
    return m_latest_update_attempt_at;
}
void OAIParallelDataProperties::setLatestUpdateAttemptAt(const QDateTime &latest_update_attempt_at) {
    m_latest_update_attempt_at = latest_update_attempt_at;
    m_latest_update_attempt_at_isSet = true;
}

bool OAIParallelDataProperties::is_latest_update_attempt_at_Set() const{
    return m_latest_update_attempt_at_isSet;
}

bool OAIParallelDataProperties::is_latest_update_attempt_at_Valid() const{
    return m_latest_update_attempt_at_isValid;
}

bool OAIParallelDataProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_data_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_update_attempt_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_update_attempt_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParallelDataProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
