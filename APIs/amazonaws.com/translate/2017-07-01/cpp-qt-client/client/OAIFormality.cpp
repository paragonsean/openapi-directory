/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormality.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormality::OAIFormality(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormality::OAIFormality() {
    this->initializeModel();
}

OAIFormality::~OAIFormality() {}

void OAIFormality::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFormality::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFormality::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FORMAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormality::FORMAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INFORMAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormality::INFORMAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFormality::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFormality::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFormality::FORMAL:
            val = "FORMAL";
            break;
        case eOAIFormality::INFORMAL:
            val = "INFORMAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFormality::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFormality::eOAIFormality OAIFormality::getValue() const {
    return m_value;
}

void OAIFormality::setValue(const OAIFormality::eOAIFormality& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFormality::isSet() const {
    
    return m_value_isSet;
}

bool OAIFormality::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
