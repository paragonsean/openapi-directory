/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranslateDocumentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranslateDocumentResponse::OAITranslateDocumentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranslateDocumentResponse::OAITranslateDocumentResponse() {
    this->initializeModel();
}

OAITranslateDocumentResponse::~OAITranslateDocumentResponse() {}

void OAITranslateDocumentResponse::initializeModel() {

    m_translated_document_isSet = false;
    m_translated_document_isValid = false;

    m_source_language_code_isSet = false;
    m_source_language_code_isValid = false;

    m_target_language_code_isSet = false;
    m_target_language_code_isValid = false;

    m_applied_terminologies_isSet = false;
    m_applied_terminologies_isValid = false;

    m_applied_settings_isSet = false;
    m_applied_settings_isValid = false;
}

void OAITranslateDocumentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranslateDocumentResponse::fromJsonObject(QJsonObject json) {

    m_translated_document_isValid = ::OpenAPI::fromJsonValue(m_translated_document, json[QString("TranslatedDocument")]);
    m_translated_document_isSet = !json[QString("TranslatedDocument")].isNull() && m_translated_document_isValid;

    m_source_language_code_isValid = ::OpenAPI::fromJsonValue(m_source_language_code, json[QString("SourceLanguageCode")]);
    m_source_language_code_isSet = !json[QString("SourceLanguageCode")].isNull() && m_source_language_code_isValid;

    m_target_language_code_isValid = ::OpenAPI::fromJsonValue(m_target_language_code, json[QString("TargetLanguageCode")]);
    m_target_language_code_isSet = !json[QString("TargetLanguageCode")].isNull() && m_target_language_code_isValid;

    m_applied_terminologies_isValid = ::OpenAPI::fromJsonValue(m_applied_terminologies, json[QString("AppliedTerminologies")]);
    m_applied_terminologies_isSet = !json[QString("AppliedTerminologies")].isNull() && m_applied_terminologies_isValid;

    m_applied_settings_isValid = ::OpenAPI::fromJsonValue(m_applied_settings, json[QString("AppliedSettings")]);
    m_applied_settings_isSet = !json[QString("AppliedSettings")].isNull() && m_applied_settings_isValid;
}

QString OAITranslateDocumentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranslateDocumentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_translated_document.isSet()) {
        obj.insert(QString("TranslatedDocument"), ::OpenAPI::toJsonValue(m_translated_document));
    }
    if (m_source_language_code_isSet) {
        obj.insert(QString("SourceLanguageCode"), ::OpenAPI::toJsonValue(m_source_language_code));
    }
    if (m_target_language_code_isSet) {
        obj.insert(QString("TargetLanguageCode"), ::OpenAPI::toJsonValue(m_target_language_code));
    }
    if (m_applied_terminologies.isSet()) {
        obj.insert(QString("AppliedTerminologies"), ::OpenAPI::toJsonValue(m_applied_terminologies));
    }
    if (m_applied_settings.isSet()) {
        obj.insert(QString("AppliedSettings"), ::OpenAPI::toJsonValue(m_applied_settings));
    }
    return obj;
}

OAITranslateDocumentResponse_TranslatedDocument OAITranslateDocumentResponse::getTranslatedDocument() const {
    return m_translated_document;
}
void OAITranslateDocumentResponse::setTranslatedDocument(const OAITranslateDocumentResponse_TranslatedDocument &translated_document) {
    m_translated_document = translated_document;
    m_translated_document_isSet = true;
}

bool OAITranslateDocumentResponse::is_translated_document_Set() const{
    return m_translated_document_isSet;
}

bool OAITranslateDocumentResponse::is_translated_document_Valid() const{
    return m_translated_document_isValid;
}

QString OAITranslateDocumentResponse::getSourceLanguageCode() const {
    return m_source_language_code;
}
void OAITranslateDocumentResponse::setSourceLanguageCode(const QString &source_language_code) {
    m_source_language_code = source_language_code;
    m_source_language_code_isSet = true;
}

bool OAITranslateDocumentResponse::is_source_language_code_Set() const{
    return m_source_language_code_isSet;
}

bool OAITranslateDocumentResponse::is_source_language_code_Valid() const{
    return m_source_language_code_isValid;
}

QString OAITranslateDocumentResponse::getTargetLanguageCode() const {
    return m_target_language_code;
}
void OAITranslateDocumentResponse::setTargetLanguageCode(const QString &target_language_code) {
    m_target_language_code = target_language_code;
    m_target_language_code_isSet = true;
}

bool OAITranslateDocumentResponse::is_target_language_code_Set() const{
    return m_target_language_code_isSet;
}

bool OAITranslateDocumentResponse::is_target_language_code_Valid() const{
    return m_target_language_code_isValid;
}

QList OAITranslateDocumentResponse::getAppliedTerminologies() const {
    return m_applied_terminologies;
}
void OAITranslateDocumentResponse::setAppliedTerminologies(const QList &applied_terminologies) {
    m_applied_terminologies = applied_terminologies;
    m_applied_terminologies_isSet = true;
}

bool OAITranslateDocumentResponse::is_applied_terminologies_Set() const{
    return m_applied_terminologies_isSet;
}

bool OAITranslateDocumentResponse::is_applied_terminologies_Valid() const{
    return m_applied_terminologies_isValid;
}

OAITranslationSettings OAITranslateDocumentResponse::getAppliedSettings() const {
    return m_applied_settings;
}
void OAITranslateDocumentResponse::setAppliedSettings(const OAITranslationSettings &applied_settings) {
    m_applied_settings = applied_settings;
    m_applied_settings_isSet = true;
}

bool OAITranslateDocumentResponse::is_applied_settings_Set() const{
    return m_applied_settings_isSet;
}

bool OAITranslateDocumentResponse::is_applied_settings_Valid() const{
    return m_applied_settings_isValid;
}

bool OAITranslateDocumentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_translated_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_terminologies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranslateDocumentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_translated_document_isValid && m_source_language_code_isValid && m_target_language_code_isValid && true;
}

} // namespace OpenAPI
