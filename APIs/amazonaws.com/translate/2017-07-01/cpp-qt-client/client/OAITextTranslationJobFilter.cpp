/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextTranslationJobFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextTranslationJobFilter::OAITextTranslationJobFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextTranslationJobFilter::OAITextTranslationJobFilter() {
    this->initializeModel();
}

OAITextTranslationJobFilter::~OAITextTranslationJobFilter() {}

void OAITextTranslationJobFilter::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_submitted_before_time_isSet = false;
    m_submitted_before_time_isValid = false;

    m_submitted_after_time_isSet = false;
    m_submitted_after_time_isValid = false;
}

void OAITextTranslationJobFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextTranslationJobFilter::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_submitted_before_time_isValid = ::OpenAPI::fromJsonValue(m_submitted_before_time, json[QString("SubmittedBeforeTime")]);
    m_submitted_before_time_isSet = !json[QString("SubmittedBeforeTime")].isNull() && m_submitted_before_time_isValid;

    m_submitted_after_time_isValid = ::OpenAPI::fromJsonValue(m_submitted_after_time, json[QString("SubmittedAfterTime")]);
    m_submitted_after_time_isSet = !json[QString("SubmittedAfterTime")].isNull() && m_submitted_after_time_isValid;
}

QString OAITextTranslationJobFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextTranslationJobFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_submitted_before_time_isSet) {
        obj.insert(QString("SubmittedBeforeTime"), ::OpenAPI::toJsonValue(m_submitted_before_time));
    }
    if (m_submitted_after_time_isSet) {
        obj.insert(QString("SubmittedAfterTime"), ::OpenAPI::toJsonValue(m_submitted_after_time));
    }
    return obj;
}

QString OAITextTranslationJobFilter::getJobName() const {
    return m_job_name;
}
void OAITextTranslationJobFilter::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAITextTranslationJobFilter::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAITextTranslationJobFilter::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIJobStatus OAITextTranslationJobFilter::getJobStatus() const {
    return m_job_status;
}
void OAITextTranslationJobFilter::setJobStatus(const OAIJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAITextTranslationJobFilter::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAITextTranslationJobFilter::is_job_status_Valid() const{
    return m_job_status_isValid;
}

QDateTime OAITextTranslationJobFilter::getSubmittedBeforeTime() const {
    return m_submitted_before_time;
}
void OAITextTranslationJobFilter::setSubmittedBeforeTime(const QDateTime &submitted_before_time) {
    m_submitted_before_time = submitted_before_time;
    m_submitted_before_time_isSet = true;
}

bool OAITextTranslationJobFilter::is_submitted_before_time_Set() const{
    return m_submitted_before_time_isSet;
}

bool OAITextTranslationJobFilter::is_submitted_before_time_Valid() const{
    return m_submitted_before_time_isValid;
}

QDateTime OAITextTranslationJobFilter::getSubmittedAfterTime() const {
    return m_submitted_after_time;
}
void OAITextTranslationJobFilter::setSubmittedAfterTime(const QDateTime &submitted_after_time) {
    m_submitted_after_time = submitted_after_time;
    m_submitted_after_time_isSet = true;
}

bool OAITextTranslationJobFilter::is_submitted_after_time_Set() const{
    return m_submitted_after_time_isSet;
}

bool OAITextTranslationJobFilter::is_submitted_after_time_Valid() const{
    return m_submitted_after_time_isValid;
}

bool OAITextTranslationJobFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_before_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_after_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextTranslationJobFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
