/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetParallelDataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetParallelDataResponse::OAIGetParallelDataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetParallelDataResponse::OAIGetParallelDataResponse() {
    this->initializeModel();
}

OAIGetParallelDataResponse::~OAIGetParallelDataResponse() {}

void OAIGetParallelDataResponse::initializeModel() {

    m_parallel_data_properties_isSet = false;
    m_parallel_data_properties_isValid = false;

    m_data_location_isSet = false;
    m_data_location_isValid = false;

    m_auxiliary_data_location_isSet = false;
    m_auxiliary_data_location_isValid = false;

    m_latest_update_attempt_auxiliary_data_location_isSet = false;
    m_latest_update_attempt_auxiliary_data_location_isValid = false;
}

void OAIGetParallelDataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetParallelDataResponse::fromJsonObject(QJsonObject json) {

    m_parallel_data_properties_isValid = ::OpenAPI::fromJsonValue(m_parallel_data_properties, json[QString("ParallelDataProperties")]);
    m_parallel_data_properties_isSet = !json[QString("ParallelDataProperties")].isNull() && m_parallel_data_properties_isValid;

    m_data_location_isValid = ::OpenAPI::fromJsonValue(m_data_location, json[QString("DataLocation")]);
    m_data_location_isSet = !json[QString("DataLocation")].isNull() && m_data_location_isValid;

    m_auxiliary_data_location_isValid = ::OpenAPI::fromJsonValue(m_auxiliary_data_location, json[QString("AuxiliaryDataLocation")]);
    m_auxiliary_data_location_isSet = !json[QString("AuxiliaryDataLocation")].isNull() && m_auxiliary_data_location_isValid;

    m_latest_update_attempt_auxiliary_data_location_isValid = ::OpenAPI::fromJsonValue(m_latest_update_attempt_auxiliary_data_location, json[QString("LatestUpdateAttemptAuxiliaryDataLocation")]);
    m_latest_update_attempt_auxiliary_data_location_isSet = !json[QString("LatestUpdateAttemptAuxiliaryDataLocation")].isNull() && m_latest_update_attempt_auxiliary_data_location_isValid;
}

QString OAIGetParallelDataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetParallelDataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_parallel_data_properties.isSet()) {
        obj.insert(QString("ParallelDataProperties"), ::OpenAPI::toJsonValue(m_parallel_data_properties));
    }
    if (m_data_location.isSet()) {
        obj.insert(QString("DataLocation"), ::OpenAPI::toJsonValue(m_data_location));
    }
    if (m_auxiliary_data_location.isSet()) {
        obj.insert(QString("AuxiliaryDataLocation"), ::OpenAPI::toJsonValue(m_auxiliary_data_location));
    }
    if (m_latest_update_attempt_auxiliary_data_location.isSet()) {
        obj.insert(QString("LatestUpdateAttemptAuxiliaryDataLocation"), ::OpenAPI::toJsonValue(m_latest_update_attempt_auxiliary_data_location));
    }
    return obj;
}

OAIGetParallelDataResponse_ParallelDataProperties OAIGetParallelDataResponse::getParallelDataProperties() const {
    return m_parallel_data_properties;
}
void OAIGetParallelDataResponse::setParallelDataProperties(const OAIGetParallelDataResponse_ParallelDataProperties &parallel_data_properties) {
    m_parallel_data_properties = parallel_data_properties;
    m_parallel_data_properties_isSet = true;
}

bool OAIGetParallelDataResponse::is_parallel_data_properties_Set() const{
    return m_parallel_data_properties_isSet;
}

bool OAIGetParallelDataResponse::is_parallel_data_properties_Valid() const{
    return m_parallel_data_properties_isValid;
}

OAIGetParallelDataResponse_DataLocation OAIGetParallelDataResponse::getDataLocation() const {
    return m_data_location;
}
void OAIGetParallelDataResponse::setDataLocation(const OAIGetParallelDataResponse_DataLocation &data_location) {
    m_data_location = data_location;
    m_data_location_isSet = true;
}

bool OAIGetParallelDataResponse::is_data_location_Set() const{
    return m_data_location_isSet;
}

bool OAIGetParallelDataResponse::is_data_location_Valid() const{
    return m_data_location_isValid;
}

OAIGetParallelDataResponse_AuxiliaryDataLocation OAIGetParallelDataResponse::getAuxiliaryDataLocation() const {
    return m_auxiliary_data_location;
}
void OAIGetParallelDataResponse::setAuxiliaryDataLocation(const OAIGetParallelDataResponse_AuxiliaryDataLocation &auxiliary_data_location) {
    m_auxiliary_data_location = auxiliary_data_location;
    m_auxiliary_data_location_isSet = true;
}

bool OAIGetParallelDataResponse::is_auxiliary_data_location_Set() const{
    return m_auxiliary_data_location_isSet;
}

bool OAIGetParallelDataResponse::is_auxiliary_data_location_Valid() const{
    return m_auxiliary_data_location_isValid;
}

OAIGetParallelDataResponse_LatestUpdateAttemptAuxiliaryDataLocation OAIGetParallelDataResponse::getLatestUpdateAttemptAuxiliaryDataLocation() const {
    return m_latest_update_attempt_auxiliary_data_location;
}
void OAIGetParallelDataResponse::setLatestUpdateAttemptAuxiliaryDataLocation(const OAIGetParallelDataResponse_LatestUpdateAttemptAuxiliaryDataLocation &latest_update_attempt_auxiliary_data_location) {
    m_latest_update_attempt_auxiliary_data_location = latest_update_attempt_auxiliary_data_location;
    m_latest_update_attempt_auxiliary_data_location_isSet = true;
}

bool OAIGetParallelDataResponse::is_latest_update_attempt_auxiliary_data_location_Set() const{
    return m_latest_update_attempt_auxiliary_data_location_isSet;
}

bool OAIGetParallelDataResponse::is_latest_update_attempt_auxiliary_data_location_Valid() const{
    return m_latest_update_attempt_auxiliary_data_location_isValid;
}

bool OAIGetParallelDataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parallel_data_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auxiliary_data_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_update_attempt_auxiliary_data_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetParallelDataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
