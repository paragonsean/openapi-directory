/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportTerminologyResponse_TerminologyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportTerminologyResponse_TerminologyProperties::OAIImportTerminologyResponse_TerminologyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportTerminologyResponse_TerminologyProperties::OAIImportTerminologyResponse_TerminologyProperties() {
    this->initializeModel();
}

OAIImportTerminologyResponse_TerminologyProperties::~OAIImportTerminologyResponse_TerminologyProperties() {}

void OAIImportTerminologyResponse_TerminologyProperties::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_source_language_code_isSet = false;
    m_source_language_code_isValid = false;

    m_target_language_codes_isSet = false;
    m_target_language_codes_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_term_count_isSet = false;
    m_term_count_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_directionality_isSet = false;
    m_directionality_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_skipped_term_count_isSet = false;
    m_skipped_term_count_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAIImportTerminologyResponse_TerminologyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportTerminologyResponse_TerminologyProperties::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_source_language_code_isValid = ::OpenAPI::fromJsonValue(m_source_language_code, json[QString("SourceLanguageCode")]);
    m_source_language_code_isSet = !json[QString("SourceLanguageCode")].isNull() && m_source_language_code_isValid;

    m_target_language_codes_isValid = ::OpenAPI::fromJsonValue(m_target_language_codes, json[QString("TargetLanguageCodes")]);
    m_target_language_codes_isSet = !json[QString("TargetLanguageCodes")].isNull() && m_target_language_codes_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("EncryptionKey")]);
    m_encryption_key_isSet = !json[QString("EncryptionKey")].isNull() && m_encryption_key_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("SizeBytes")]);
    m_size_bytes_isSet = !json[QString("SizeBytes")].isNull() && m_size_bytes_isValid;

    m_term_count_isValid = ::OpenAPI::fromJsonValue(m_term_count, json[QString("TermCount")]);
    m_term_count_isSet = !json[QString("TermCount")].isNull() && m_term_count_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_directionality_isValid = ::OpenAPI::fromJsonValue(m_directionality, json[QString("Directionality")]);
    m_directionality_isSet = !json[QString("Directionality")].isNull() && m_directionality_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_skipped_term_count_isValid = ::OpenAPI::fromJsonValue(m_skipped_term_count, json[QString("SkippedTermCount")]);
    m_skipped_term_count_isSet = !json[QString("SkippedTermCount")].isNull() && m_skipped_term_count_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;
}

QString OAIImportTerminologyResponse_TerminologyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportTerminologyResponse_TerminologyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_source_language_code_isSet) {
        obj.insert(QString("SourceLanguageCode"), ::OpenAPI::toJsonValue(m_source_language_code));
    }
    if (m_target_language_codes.isSet()) {
        obj.insert(QString("TargetLanguageCodes"), ::OpenAPI::toJsonValue(m_target_language_codes));
    }
    if (m_encryption_key.isSet()) {
        obj.insert(QString("EncryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("SizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_term_count_isSet) {
        obj.insert(QString("TermCount"), ::OpenAPI::toJsonValue(m_term_count));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_directionality.isSet()) {
        obj.insert(QString("Directionality"), ::OpenAPI::toJsonValue(m_directionality));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_skipped_term_count_isSet) {
        obj.insert(QString("SkippedTermCount"), ::OpenAPI::toJsonValue(m_skipped_term_count));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

QString OAIImportTerminologyResponse_TerminologyProperties::getName() const {
    return m_name;
}
void OAIImportTerminologyResponse_TerminologyProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImportTerminologyResponse_TerminologyProperties::getDescription() const {
    return m_description;
}
void OAIImportTerminologyResponse_TerminologyProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIImportTerminologyResponse_TerminologyProperties::getArn() const {
    return m_arn;
}
void OAIImportTerminologyResponse_TerminologyProperties::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIImportTerminologyResponse_TerminologyProperties::getSourceLanguageCode() const {
    return m_source_language_code;
}
void OAIImportTerminologyResponse_TerminologyProperties::setSourceLanguageCode(const QString &source_language_code) {
    m_source_language_code = source_language_code;
    m_source_language_code_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_source_language_code_Set() const{
    return m_source_language_code_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_source_language_code_Valid() const{
    return m_source_language_code_isValid;
}

QList OAIImportTerminologyResponse_TerminologyProperties::getTargetLanguageCodes() const {
    return m_target_language_codes;
}
void OAIImportTerminologyResponse_TerminologyProperties::setTargetLanguageCodes(const QList &target_language_codes) {
    m_target_language_codes = target_language_codes;
    m_target_language_codes_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_target_language_codes_Set() const{
    return m_target_language_codes_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_target_language_codes_Valid() const{
    return m_target_language_codes_isValid;
}

OAITerminologyProperties_EncryptionKey OAIImportTerminologyResponse_TerminologyProperties::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIImportTerminologyResponse_TerminologyProperties::setEncryptionKey(const OAITerminologyProperties_EncryptionKey &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

qint32 OAIImportTerminologyResponse_TerminologyProperties::getSizeBytes() const {
    return m_size_bytes;
}
void OAIImportTerminologyResponse_TerminologyProperties::setSizeBytes(const qint32 &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

qint32 OAIImportTerminologyResponse_TerminologyProperties::getTermCount() const {
    return m_term_count;
}
void OAIImportTerminologyResponse_TerminologyProperties::setTermCount(const qint32 &term_count) {
    m_term_count = term_count;
    m_term_count_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_term_count_Set() const{
    return m_term_count_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_term_count_Valid() const{
    return m_term_count_isValid;
}

QDateTime OAIImportTerminologyResponse_TerminologyProperties::getCreatedAt() const {
    return m_created_at;
}
void OAIImportTerminologyResponse_TerminologyProperties::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIImportTerminologyResponse_TerminologyProperties::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIImportTerminologyResponse_TerminologyProperties::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

OAIDirectionality OAIImportTerminologyResponse_TerminologyProperties::getDirectionality() const {
    return m_directionality;
}
void OAIImportTerminologyResponse_TerminologyProperties::setDirectionality(const OAIDirectionality &directionality) {
    m_directionality = directionality;
    m_directionality_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_directionality_Set() const{
    return m_directionality_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_directionality_Valid() const{
    return m_directionality_isValid;
}

QString OAIImportTerminologyResponse_TerminologyProperties::getMessage() const {
    return m_message;
}
void OAIImportTerminologyResponse_TerminologyProperties::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_message_Set() const{
    return m_message_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIImportTerminologyResponse_TerminologyProperties::getSkippedTermCount() const {
    return m_skipped_term_count;
}
void OAIImportTerminologyResponse_TerminologyProperties::setSkippedTermCount(const qint32 &skipped_term_count) {
    m_skipped_term_count = skipped_term_count;
    m_skipped_term_count_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_skipped_term_count_Set() const{
    return m_skipped_term_count_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_skipped_term_count_Valid() const{
    return m_skipped_term_count_isValid;
}

OAITerminologyDataFormat OAIImportTerminologyResponse_TerminologyProperties::getFormat() const {
    return m_format;
}
void OAIImportTerminologyResponse_TerminologyProperties::setFormat(const OAITerminologyDataFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_format_Set() const{
    return m_format_isSet;
}

bool OAIImportTerminologyResponse_TerminologyProperties::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIImportTerminologyResponse_TerminologyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directionality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_term_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportTerminologyResponse_TerminologyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
