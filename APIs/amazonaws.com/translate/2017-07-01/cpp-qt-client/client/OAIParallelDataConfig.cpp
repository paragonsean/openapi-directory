/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParallelDataConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParallelDataConfig::OAIParallelDataConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParallelDataConfig::OAIParallelDataConfig() {
    this->initializeModel();
}

OAIParallelDataConfig::~OAIParallelDataConfig() {}

void OAIParallelDataConfig::initializeModel() {

    m_s3_uri_isSet = false;
    m_s3_uri_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAIParallelDataConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParallelDataConfig::fromJsonObject(QJsonObject json) {

    m_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_s3_uri, json[QString("S3Uri")]);
    m_s3_uri_isSet = !json[QString("S3Uri")].isNull() && m_s3_uri_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;
}

QString OAIParallelDataConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParallelDataConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_uri_isSet) {
        obj.insert(QString("S3Uri"), ::OpenAPI::toJsonValue(m_s3_uri));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

QString OAIParallelDataConfig::getS3Uri() const {
    return m_s3_uri;
}
void OAIParallelDataConfig::setS3Uri(const QString &s3_uri) {
    m_s3_uri = s3_uri;
    m_s3_uri_isSet = true;
}

bool OAIParallelDataConfig::is_s3_uri_Set() const{
    return m_s3_uri_isSet;
}

bool OAIParallelDataConfig::is_s3_uri_Valid() const{
    return m_s3_uri_isValid;
}

OAIParallelDataFormat OAIParallelDataConfig::getFormat() const {
    return m_format;
}
void OAIParallelDataConfig::setFormat(const OAIParallelDataFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIParallelDataConfig::is_format_Set() const{
    return m_format_isSet;
}

bool OAIParallelDataConfig::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIParallelDataConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParallelDataConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_uri_isValid && m_format_isValid && true;
}

} // namespace OpenAPI
