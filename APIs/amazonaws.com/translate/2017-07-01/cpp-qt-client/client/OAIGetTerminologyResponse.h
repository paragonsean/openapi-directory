/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTerminologyResponse.h
 *
 * 
 */

#ifndef OAIGetTerminologyResponse_H
#define OAIGetTerminologyResponse_H

#include <QJsonObject>

#include "OAIGetTerminologyResponse_AuxiliaryDataLocation.h"
#include "OAIGetTerminologyResponse_TerminologyDataLocation.h"
#include "OAIGetTerminologyResponse_TerminologyProperties.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetTerminologyResponse_TerminologyProperties;
class OAIGetTerminologyResponse_TerminologyDataLocation;
class OAIGetTerminologyResponse_AuxiliaryDataLocation;

class OAIGetTerminologyResponse : public OAIObject {
public:
    OAIGetTerminologyResponse();
    OAIGetTerminologyResponse(QString json);
    ~OAIGetTerminologyResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetTerminologyResponse_TerminologyProperties getTerminologyProperties() const;
    void setTerminologyProperties(const OAIGetTerminologyResponse_TerminologyProperties &terminology_properties);
    bool is_terminology_properties_Set() const;
    bool is_terminology_properties_Valid() const;

    OAIGetTerminologyResponse_TerminologyDataLocation getTerminologyDataLocation() const;
    void setTerminologyDataLocation(const OAIGetTerminologyResponse_TerminologyDataLocation &terminology_data_location);
    bool is_terminology_data_location_Set() const;
    bool is_terminology_data_location_Valid() const;

    OAIGetTerminologyResponse_AuxiliaryDataLocation getAuxiliaryDataLocation() const;
    void setAuxiliaryDataLocation(const OAIGetTerminologyResponse_AuxiliaryDataLocation &auxiliary_data_location);
    bool is_auxiliary_data_location_Set() const;
    bool is_auxiliary_data_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetTerminologyResponse_TerminologyProperties m_terminology_properties;
    bool m_terminology_properties_isSet;
    bool m_terminology_properties_isValid;

    OAIGetTerminologyResponse_TerminologyDataLocation m_terminology_data_location;
    bool m_terminology_data_location_isSet;
    bool m_terminology_data_location_isValid;

    OAIGetTerminologyResponse_AuxiliaryDataLocation m_auxiliary_data_location;
    bool m_auxiliary_data_location_isSet;
    bool m_auxiliary_data_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTerminologyResponse)

#endif // OAIGetTerminologyResponse_H
