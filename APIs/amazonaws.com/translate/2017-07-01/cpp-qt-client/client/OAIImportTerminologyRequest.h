/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportTerminologyRequest.h
 *
 * 
 */

#ifndef OAIImportTerminologyRequest_H
#define OAIImportTerminologyRequest_H

#include <QJsonObject>

#include "OAIImportTerminologyRequest_EncryptionKey.h"
#include "OAIImportTerminologyRequest_TerminologyData.h"
#include "OAIMergeStrategy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImportTerminologyRequest_TerminologyData;
class OAIImportTerminologyRequest_EncryptionKey;

class OAIImportTerminologyRequest : public OAIObject {
public:
    OAIImportTerminologyRequest();
    OAIImportTerminologyRequest(QString json);
    ~OAIImportTerminologyRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIMergeStrategy getMergeStrategy() const;
    void setMergeStrategy(const OAIMergeStrategy &merge_strategy);
    bool is_merge_strategy_Set() const;
    bool is_merge_strategy_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIImportTerminologyRequest_TerminologyData getTerminologyData() const;
    void setTerminologyData(const OAIImportTerminologyRequest_TerminologyData &terminology_data);
    bool is_terminology_data_Set() const;
    bool is_terminology_data_Valid() const;

    OAIImportTerminologyRequest_EncryptionKey getEncryptionKey() const;
    void setEncryptionKey(const OAIImportTerminologyRequest_EncryptionKey &encryption_key);
    bool is_encryption_key_Set() const;
    bool is_encryption_key_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIMergeStrategy m_merge_strategy;
    bool m_merge_strategy_isSet;
    bool m_merge_strategy_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIImportTerminologyRequest_TerminologyData m_terminology_data;
    bool m_terminology_data_isSet;
    bool m_terminology_data_isValid;

    OAIImportTerminologyRequest_EncryptionKey m_encryption_key;
    bool m_encryption_key_isSet;
    bool m_encryption_key_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportTerminologyRequest)

#endif // OAIImportTerminologyRequest_H
