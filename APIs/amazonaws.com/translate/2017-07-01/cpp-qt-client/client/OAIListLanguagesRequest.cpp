/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLanguagesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLanguagesRequest::OAIListLanguagesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLanguagesRequest::OAIListLanguagesRequest() {
    this->initializeModel();
}

OAIListLanguagesRequest::~OAIListLanguagesRequest() {}

void OAIListLanguagesRequest::initializeModel() {

    m_display_language_code_isSet = false;
    m_display_language_code_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListLanguagesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLanguagesRequest::fromJsonObject(QJsonObject json) {

    m_display_language_code_isValid = ::OpenAPI::fromJsonValue(m_display_language_code, json[QString("DisplayLanguageCode")]);
    m_display_language_code_isSet = !json[QString("DisplayLanguageCode")].isNull() && m_display_language_code_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListLanguagesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLanguagesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_display_language_code.isSet()) {
        obj.insert(QString("DisplayLanguageCode"), ::OpenAPI::toJsonValue(m_display_language_code));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAIDisplayLanguageCode OAIListLanguagesRequest::getDisplayLanguageCode() const {
    return m_display_language_code;
}
void OAIListLanguagesRequest::setDisplayLanguageCode(const OAIDisplayLanguageCode &display_language_code) {
    m_display_language_code = display_language_code;
    m_display_language_code_isSet = true;
}

bool OAIListLanguagesRequest::is_display_language_code_Set() const{
    return m_display_language_code_isSet;
}

bool OAIListLanguagesRequest::is_display_language_code_Valid() const{
    return m_display_language_code_isValid;
}

QString OAIListLanguagesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListLanguagesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListLanguagesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListLanguagesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListLanguagesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListLanguagesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListLanguagesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListLanguagesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListLanguagesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLanguagesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
