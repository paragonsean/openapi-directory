/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisplayLanguageCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisplayLanguageCode::OAIDisplayLanguageCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisplayLanguageCode::OAIDisplayLanguageCode() {
    this->initializeModel();
}

OAIDisplayLanguageCode::~OAIDisplayLanguageCode() {}

void OAIDisplayLanguageCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDisplayLanguageCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDisplayLanguageCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("de", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::EN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("it", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ja", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::JA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ko", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::KO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::PT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::ZH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh-TW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDisplayLanguageCode::ZH_TW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDisplayLanguageCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDisplayLanguageCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDisplayLanguageCode::DE:
            val = "de";
            break;
        case eOAIDisplayLanguageCode::EN:
            val = "en";
            break;
        case eOAIDisplayLanguageCode::ES:
            val = "es";
            break;
        case eOAIDisplayLanguageCode::FR:
            val = "fr";
            break;
        case eOAIDisplayLanguageCode::IT:
            val = "it";
            break;
        case eOAIDisplayLanguageCode::JA:
            val = "ja";
            break;
        case eOAIDisplayLanguageCode::KO:
            val = "ko";
            break;
        case eOAIDisplayLanguageCode::PT:
            val = "pt";
            break;
        case eOAIDisplayLanguageCode::ZH:
            val = "zh";
            break;
        case eOAIDisplayLanguageCode::ZH_TW:
            val = "zh-TW";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDisplayLanguageCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDisplayLanguageCode::eOAIDisplayLanguageCode OAIDisplayLanguageCode::getValue() const {
    return m_value;
}

void OAIDisplayLanguageCode::setValue(const OAIDisplayLanguageCode::eOAIDisplayLanguageCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDisplayLanguageCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIDisplayLanguageCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
