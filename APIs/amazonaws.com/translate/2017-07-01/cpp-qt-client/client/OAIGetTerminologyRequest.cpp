/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTerminologyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTerminologyRequest::OAIGetTerminologyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTerminologyRequest::OAIGetTerminologyRequest() {
    this->initializeModel();
}

OAIGetTerminologyRequest::~OAIGetTerminologyRequest() {}

void OAIGetTerminologyRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_terminology_data_format_isSet = false;
    m_terminology_data_format_isValid = false;
}

void OAIGetTerminologyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTerminologyRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_terminology_data_format_isValid = ::OpenAPI::fromJsonValue(m_terminology_data_format, json[QString("TerminologyDataFormat")]);
    m_terminology_data_format_isSet = !json[QString("TerminologyDataFormat")].isNull() && m_terminology_data_format_isValid;
}

QString OAIGetTerminologyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTerminologyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_terminology_data_format.isSet()) {
        obj.insert(QString("TerminologyDataFormat"), ::OpenAPI::toJsonValue(m_terminology_data_format));
    }
    return obj;
}

QString OAIGetTerminologyRequest::getName() const {
    return m_name;
}
void OAIGetTerminologyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetTerminologyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetTerminologyRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAITerminologyDataFormat OAIGetTerminologyRequest::getTerminologyDataFormat() const {
    return m_terminology_data_format;
}
void OAIGetTerminologyRequest::setTerminologyDataFormat(const OAITerminologyDataFormat &terminology_data_format) {
    m_terminology_data_format = terminology_data_format;
    m_terminology_data_format_isSet = true;
}

bool OAIGetTerminologyRequest::is_terminology_data_format_Set() const{
    return m_terminology_data_format_isSet;
}

bool OAIGetTerminologyRequest::is_terminology_data_format_Valid() const{
    return m_terminology_data_format_isValid;
}

bool OAIGetTerminologyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminology_data_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTerminologyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
