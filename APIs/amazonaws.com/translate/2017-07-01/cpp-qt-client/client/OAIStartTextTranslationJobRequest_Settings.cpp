/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTextTranslationJobRequest_Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTextTranslationJobRequest_Settings::OAIStartTextTranslationJobRequest_Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTextTranslationJobRequest_Settings::OAIStartTextTranslationJobRequest_Settings() {
    this->initializeModel();
}

OAIStartTextTranslationJobRequest_Settings::~OAIStartTextTranslationJobRequest_Settings() {}

void OAIStartTextTranslationJobRequest_Settings::initializeModel() {

    m_formality_isSet = false;
    m_formality_isValid = false;

    m_profanity_isSet = false;
    m_profanity_isValid = false;
}

void OAIStartTextTranslationJobRequest_Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTextTranslationJobRequest_Settings::fromJsonObject(QJsonObject json) {

    m_formality_isValid = ::OpenAPI::fromJsonValue(m_formality, json[QString("Formality")]);
    m_formality_isSet = !json[QString("Formality")].isNull() && m_formality_isValid;

    m_profanity_isValid = ::OpenAPI::fromJsonValue(m_profanity, json[QString("Profanity")]);
    m_profanity_isSet = !json[QString("Profanity")].isNull() && m_profanity_isValid;
}

QString OAIStartTextTranslationJobRequest_Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTextTranslationJobRequest_Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_formality.isSet()) {
        obj.insert(QString("Formality"), ::OpenAPI::toJsonValue(m_formality));
    }
    if (m_profanity.isSet()) {
        obj.insert(QString("Profanity"), ::OpenAPI::toJsonValue(m_profanity));
    }
    return obj;
}

OAIFormality OAIStartTextTranslationJobRequest_Settings::getFormality() const {
    return m_formality;
}
void OAIStartTextTranslationJobRequest_Settings::setFormality(const OAIFormality &formality) {
    m_formality = formality;
    m_formality_isSet = true;
}

bool OAIStartTextTranslationJobRequest_Settings::is_formality_Set() const{
    return m_formality_isSet;
}

bool OAIStartTextTranslationJobRequest_Settings::is_formality_Valid() const{
    return m_formality_isValid;
}

OAIProfanity OAIStartTextTranslationJobRequest_Settings::getProfanity() const {
    return m_profanity;
}
void OAIStartTextTranslationJobRequest_Settings::setProfanity(const OAIProfanity &profanity) {
    m_profanity = profanity;
    m_profanity_isSet = true;
}

bool OAIStartTextTranslationJobRequest_Settings::is_profanity_Set() const{
    return m_profanity_isSet;
}

bool OAIStartTextTranslationJobRequest_Settings::is_profanity_Valid() const{
    return m_profanity_isValid;
}

bool OAIStartTextTranslationJobRequest_Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profanity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTextTranslationJobRequest_Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
