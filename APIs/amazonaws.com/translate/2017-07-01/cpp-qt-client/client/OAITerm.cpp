/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerm::OAITerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerm::OAITerm() {
    this->initializeModel();
}

OAITerm::~OAITerm() {}

void OAITerm::initializeModel() {

    m_source_text_isSet = false;
    m_source_text_isValid = false;

    m_target_text_isSet = false;
    m_target_text_isValid = false;
}

void OAITerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerm::fromJsonObject(QJsonObject json) {

    m_source_text_isValid = ::OpenAPI::fromJsonValue(m_source_text, json[QString("SourceText")]);
    m_source_text_isSet = !json[QString("SourceText")].isNull() && m_source_text_isValid;

    m_target_text_isValid = ::OpenAPI::fromJsonValue(m_target_text, json[QString("TargetText")]);
    m_target_text_isSet = !json[QString("TargetText")].isNull() && m_target_text_isValid;
}

QString OAITerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerm::asJsonObject() const {
    QJsonObject obj;
    if (m_source_text_isSet) {
        obj.insert(QString("SourceText"), ::OpenAPI::toJsonValue(m_source_text));
    }
    if (m_target_text_isSet) {
        obj.insert(QString("TargetText"), ::OpenAPI::toJsonValue(m_target_text));
    }
    return obj;
}

QString OAITerm::getSourceText() const {
    return m_source_text;
}
void OAITerm::setSourceText(const QString &source_text) {
    m_source_text = source_text;
    m_source_text_isSet = true;
}

bool OAITerm::is_source_text_Set() const{
    return m_source_text_isSet;
}

bool OAITerm::is_source_text_Valid() const{
    return m_source_text_isValid;
}

QString OAITerm::getTargetText() const {
    return m_target_text;
}
void OAITerm::setTargetText(const QString &target_text) {
    m_target_text = target_text;
    m_target_text_isSet = true;
}

bool OAITerm::is_target_text_Set() const{
    return m_target_text_isSet;
}

bool OAITerm::is_target_text_Valid() const{
    return m_target_text_isValid;
}

bool OAITerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
