/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportTerminologyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportTerminologyResponse::OAIImportTerminologyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportTerminologyResponse::OAIImportTerminologyResponse() {
    this->initializeModel();
}

OAIImportTerminologyResponse::~OAIImportTerminologyResponse() {}

void OAIImportTerminologyResponse::initializeModel() {

    m_terminology_properties_isSet = false;
    m_terminology_properties_isValid = false;

    m_auxiliary_data_location_isSet = false;
    m_auxiliary_data_location_isValid = false;
}

void OAIImportTerminologyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportTerminologyResponse::fromJsonObject(QJsonObject json) {

    m_terminology_properties_isValid = ::OpenAPI::fromJsonValue(m_terminology_properties, json[QString("TerminologyProperties")]);
    m_terminology_properties_isSet = !json[QString("TerminologyProperties")].isNull() && m_terminology_properties_isValid;

    m_auxiliary_data_location_isValid = ::OpenAPI::fromJsonValue(m_auxiliary_data_location, json[QString("AuxiliaryDataLocation")]);
    m_auxiliary_data_location_isSet = !json[QString("AuxiliaryDataLocation")].isNull() && m_auxiliary_data_location_isValid;
}

QString OAIImportTerminologyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportTerminologyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_terminology_properties.isSet()) {
        obj.insert(QString("TerminologyProperties"), ::OpenAPI::toJsonValue(m_terminology_properties));
    }
    if (m_auxiliary_data_location.isSet()) {
        obj.insert(QString("AuxiliaryDataLocation"), ::OpenAPI::toJsonValue(m_auxiliary_data_location));
    }
    return obj;
}

OAIImportTerminologyResponse_TerminologyProperties OAIImportTerminologyResponse::getTerminologyProperties() const {
    return m_terminology_properties;
}
void OAIImportTerminologyResponse::setTerminologyProperties(const OAIImportTerminologyResponse_TerminologyProperties &terminology_properties) {
    m_terminology_properties = terminology_properties;
    m_terminology_properties_isSet = true;
}

bool OAIImportTerminologyResponse::is_terminology_properties_Set() const{
    return m_terminology_properties_isSet;
}

bool OAIImportTerminologyResponse::is_terminology_properties_Valid() const{
    return m_terminology_properties_isValid;
}

OAIImportTerminologyResponse_AuxiliaryDataLocation OAIImportTerminologyResponse::getAuxiliaryDataLocation() const {
    return m_auxiliary_data_location;
}
void OAIImportTerminologyResponse::setAuxiliaryDataLocation(const OAIImportTerminologyResponse_AuxiliaryDataLocation &auxiliary_data_location) {
    m_auxiliary_data_location = auxiliary_data_location;
    m_auxiliary_data_location_isSet = true;
}

bool OAIImportTerminologyResponse::is_auxiliary_data_location_Set() const{
    return m_auxiliary_data_location_isSet;
}

bool OAIImportTerminologyResponse::is_auxiliary_data_location_Valid() const{
    return m_auxiliary_data_location_isValid;
}

bool OAIImportTerminologyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_terminology_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auxiliary_data_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportTerminologyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
