/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetParallelDataResponse.h
 *
 * 
 */

#ifndef OAIGetParallelDataResponse_H
#define OAIGetParallelDataResponse_H

#include <QJsonObject>

#include "OAIGetParallelDataResponse_AuxiliaryDataLocation.h"
#include "OAIGetParallelDataResponse_DataLocation.h"
#include "OAIGetParallelDataResponse_LatestUpdateAttemptAuxiliaryDataLocation.h"
#include "OAIGetParallelDataResponse_ParallelDataProperties.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetParallelDataResponse_ParallelDataProperties;
class OAIGetParallelDataResponse_DataLocation;
class OAIGetParallelDataResponse_AuxiliaryDataLocation;
class OAIGetParallelDataResponse_LatestUpdateAttemptAuxiliaryDataLocation;

class OAIGetParallelDataResponse : public OAIObject {
public:
    OAIGetParallelDataResponse();
    OAIGetParallelDataResponse(QString json);
    ~OAIGetParallelDataResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetParallelDataResponse_ParallelDataProperties getParallelDataProperties() const;
    void setParallelDataProperties(const OAIGetParallelDataResponse_ParallelDataProperties &parallel_data_properties);
    bool is_parallel_data_properties_Set() const;
    bool is_parallel_data_properties_Valid() const;

    OAIGetParallelDataResponse_DataLocation getDataLocation() const;
    void setDataLocation(const OAIGetParallelDataResponse_DataLocation &data_location);
    bool is_data_location_Set() const;
    bool is_data_location_Valid() const;

    OAIGetParallelDataResponse_AuxiliaryDataLocation getAuxiliaryDataLocation() const;
    void setAuxiliaryDataLocation(const OAIGetParallelDataResponse_AuxiliaryDataLocation &auxiliary_data_location);
    bool is_auxiliary_data_location_Set() const;
    bool is_auxiliary_data_location_Valid() const;

    OAIGetParallelDataResponse_LatestUpdateAttemptAuxiliaryDataLocation getLatestUpdateAttemptAuxiliaryDataLocation() const;
    void setLatestUpdateAttemptAuxiliaryDataLocation(const OAIGetParallelDataResponse_LatestUpdateAttemptAuxiliaryDataLocation &latest_update_attempt_auxiliary_data_location);
    bool is_latest_update_attempt_auxiliary_data_location_Set() const;
    bool is_latest_update_attempt_auxiliary_data_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetParallelDataResponse_ParallelDataProperties m_parallel_data_properties;
    bool m_parallel_data_properties_isSet;
    bool m_parallel_data_properties_isValid;

    OAIGetParallelDataResponse_DataLocation m_data_location;
    bool m_data_location_isSet;
    bool m_data_location_isValid;

    OAIGetParallelDataResponse_AuxiliaryDataLocation m_auxiliary_data_location;
    bool m_auxiliary_data_location_isSet;
    bool m_auxiliary_data_location_isValid;

    OAIGetParallelDataResponse_LatestUpdateAttemptAuxiliaryDataLocation m_latest_update_attempt_auxiliary_data_location;
    bool m_latest_update_attempt_auxiliary_data_location_isSet;
    bool m_latest_update_attempt_auxiliary_data_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetParallelDataResponse)

#endif // OAIGetParallelDataResponse_H
