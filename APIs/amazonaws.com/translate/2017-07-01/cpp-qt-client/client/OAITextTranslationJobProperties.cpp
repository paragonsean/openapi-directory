/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextTranslationJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextTranslationJobProperties::OAITextTranslationJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextTranslationJobProperties::OAITextTranslationJobProperties() {
    this->initializeModel();
}

OAITextTranslationJobProperties::~OAITextTranslationJobProperties() {}

void OAITextTranslationJobProperties::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_job_details_isSet = false;
    m_job_details_isValid = false;

    m_source_language_code_isSet = false;
    m_source_language_code_isValid = false;

    m_target_language_codes_isSet = false;
    m_target_language_codes_isValid = false;

    m_terminology_names_isSet = false;
    m_terminology_names_isValid = false;

    m_parallel_data_names_isSet = false;
    m_parallel_data_names_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_submitted_time_isSet = false;
    m_submitted_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAITextTranslationJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextTranslationJobProperties::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_job_details_isValid = ::OpenAPI::fromJsonValue(m_job_details, json[QString("JobDetails")]);
    m_job_details_isSet = !json[QString("JobDetails")].isNull() && m_job_details_isValid;

    m_source_language_code_isValid = ::OpenAPI::fromJsonValue(m_source_language_code, json[QString("SourceLanguageCode")]);
    m_source_language_code_isSet = !json[QString("SourceLanguageCode")].isNull() && m_source_language_code_isValid;

    m_target_language_codes_isValid = ::OpenAPI::fromJsonValue(m_target_language_codes, json[QString("TargetLanguageCodes")]);
    m_target_language_codes_isSet = !json[QString("TargetLanguageCodes")].isNull() && m_target_language_codes_isValid;

    m_terminology_names_isValid = ::OpenAPI::fromJsonValue(m_terminology_names, json[QString("TerminologyNames")]);
    m_terminology_names_isSet = !json[QString("TerminologyNames")].isNull() && m_terminology_names_isValid;

    m_parallel_data_names_isValid = ::OpenAPI::fromJsonValue(m_parallel_data_names, json[QString("ParallelDataNames")]);
    m_parallel_data_names_isSet = !json[QString("ParallelDataNames")].isNull() && m_parallel_data_names_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_submitted_time_isValid = ::OpenAPI::fromJsonValue(m_submitted_time, json[QString("SubmittedTime")]);
    m_submitted_time_isSet = !json[QString("SubmittedTime")].isNull() && m_submitted_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;
}

QString OAITextTranslationJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextTranslationJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_job_details.isSet()) {
        obj.insert(QString("JobDetails"), ::OpenAPI::toJsonValue(m_job_details));
    }
    if (m_source_language_code_isSet) {
        obj.insert(QString("SourceLanguageCode"), ::OpenAPI::toJsonValue(m_source_language_code));
    }
    if (m_target_language_codes.isSet()) {
        obj.insert(QString("TargetLanguageCodes"), ::OpenAPI::toJsonValue(m_target_language_codes));
    }
    if (m_terminology_names.isSet()) {
        obj.insert(QString("TerminologyNames"), ::OpenAPI::toJsonValue(m_terminology_names));
    }
    if (m_parallel_data_names.isSet()) {
        obj.insert(QString("ParallelDataNames"), ::OpenAPI::toJsonValue(m_parallel_data_names));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_submitted_time_isSet) {
        obj.insert(QString("SubmittedTime"), ::OpenAPI::toJsonValue(m_submitted_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

QString OAITextTranslationJobProperties::getJobId() const {
    return m_job_id;
}
void OAITextTranslationJobProperties::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAITextTranslationJobProperties::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAITextTranslationJobProperties::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAITextTranslationJobProperties::getJobName() const {
    return m_job_name;
}
void OAITextTranslationJobProperties::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAITextTranslationJobProperties::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAITextTranslationJobProperties::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIJobStatus OAITextTranslationJobProperties::getJobStatus() const {
    return m_job_status;
}
void OAITextTranslationJobProperties::setJobStatus(const OAIJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAITextTranslationJobProperties::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAITextTranslationJobProperties::is_job_status_Valid() const{
    return m_job_status_isValid;
}

OAITextTranslationJobProperties_JobDetails OAITextTranslationJobProperties::getJobDetails() const {
    return m_job_details;
}
void OAITextTranslationJobProperties::setJobDetails(const OAITextTranslationJobProperties_JobDetails &job_details) {
    m_job_details = job_details;
    m_job_details_isSet = true;
}

bool OAITextTranslationJobProperties::is_job_details_Set() const{
    return m_job_details_isSet;
}

bool OAITextTranslationJobProperties::is_job_details_Valid() const{
    return m_job_details_isValid;
}

QString OAITextTranslationJobProperties::getSourceLanguageCode() const {
    return m_source_language_code;
}
void OAITextTranslationJobProperties::setSourceLanguageCode(const QString &source_language_code) {
    m_source_language_code = source_language_code;
    m_source_language_code_isSet = true;
}

bool OAITextTranslationJobProperties::is_source_language_code_Set() const{
    return m_source_language_code_isSet;
}

bool OAITextTranslationJobProperties::is_source_language_code_Valid() const{
    return m_source_language_code_isValid;
}

QList OAITextTranslationJobProperties::getTargetLanguageCodes() const {
    return m_target_language_codes;
}
void OAITextTranslationJobProperties::setTargetLanguageCodes(const QList &target_language_codes) {
    m_target_language_codes = target_language_codes;
    m_target_language_codes_isSet = true;
}

bool OAITextTranslationJobProperties::is_target_language_codes_Set() const{
    return m_target_language_codes_isSet;
}

bool OAITextTranslationJobProperties::is_target_language_codes_Valid() const{
    return m_target_language_codes_isValid;
}

QList OAITextTranslationJobProperties::getTerminologyNames() const {
    return m_terminology_names;
}
void OAITextTranslationJobProperties::setTerminologyNames(const QList &terminology_names) {
    m_terminology_names = terminology_names;
    m_terminology_names_isSet = true;
}

bool OAITextTranslationJobProperties::is_terminology_names_Set() const{
    return m_terminology_names_isSet;
}

bool OAITextTranslationJobProperties::is_terminology_names_Valid() const{
    return m_terminology_names_isValid;
}

QList OAITextTranslationJobProperties::getParallelDataNames() const {
    return m_parallel_data_names;
}
void OAITextTranslationJobProperties::setParallelDataNames(const QList &parallel_data_names) {
    m_parallel_data_names = parallel_data_names;
    m_parallel_data_names_isSet = true;
}

bool OAITextTranslationJobProperties::is_parallel_data_names_Set() const{
    return m_parallel_data_names_isSet;
}

bool OAITextTranslationJobProperties::is_parallel_data_names_Valid() const{
    return m_parallel_data_names_isValid;
}

QString OAITextTranslationJobProperties::getMessage() const {
    return m_message;
}
void OAITextTranslationJobProperties::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITextTranslationJobProperties::is_message_Set() const{
    return m_message_isSet;
}

bool OAITextTranslationJobProperties::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAITextTranslationJobProperties::getSubmittedTime() const {
    return m_submitted_time;
}
void OAITextTranslationJobProperties::setSubmittedTime(const QDateTime &submitted_time) {
    m_submitted_time = submitted_time;
    m_submitted_time_isSet = true;
}

bool OAITextTranslationJobProperties::is_submitted_time_Set() const{
    return m_submitted_time_isSet;
}

bool OAITextTranslationJobProperties::is_submitted_time_Valid() const{
    return m_submitted_time_isValid;
}

QDateTime OAITextTranslationJobProperties::getEndTime() const {
    return m_end_time;
}
void OAITextTranslationJobProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITextTranslationJobProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITextTranslationJobProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAITextTranslationJobProperties_InputDataConfig OAITextTranslationJobProperties::getInputDataConfig() const {
    return m_input_data_config;
}
void OAITextTranslationJobProperties::setInputDataConfig(const OAITextTranslationJobProperties_InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAITextTranslationJobProperties::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAITextTranslationJobProperties::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAITextTranslationJobProperties_OutputDataConfig OAITextTranslationJobProperties::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAITextTranslationJobProperties::setOutputDataConfig(const OAITextTranslationJobProperties_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAITextTranslationJobProperties::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAITextTranslationJobProperties::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

QString OAITextTranslationJobProperties::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAITextTranslationJobProperties::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAITextTranslationJobProperties::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAITextTranslationJobProperties::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

OAITextTranslationJobProperties_Settings OAITextTranslationJobProperties::getSettings() const {
    return m_settings;
}
void OAITextTranslationJobProperties::setSettings(const OAITextTranslationJobProperties_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAITextTranslationJobProperties::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAITextTranslationJobProperties::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAITextTranslationJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminology_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_data_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextTranslationJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
