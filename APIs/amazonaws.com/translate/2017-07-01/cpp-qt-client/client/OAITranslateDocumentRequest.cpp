/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranslateDocumentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranslateDocumentRequest::OAITranslateDocumentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranslateDocumentRequest::OAITranslateDocumentRequest() {
    this->initializeModel();
}

OAITranslateDocumentRequest::~OAITranslateDocumentRequest() {}

void OAITranslateDocumentRequest::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_terminology_names_isSet = false;
    m_terminology_names_isValid = false;

    m_source_language_code_isSet = false;
    m_source_language_code_isValid = false;

    m_target_language_code_isSet = false;
    m_target_language_code_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAITranslateDocumentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranslateDocumentRequest::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("Document")]);
    m_document_isSet = !json[QString("Document")].isNull() && m_document_isValid;

    m_terminology_names_isValid = ::OpenAPI::fromJsonValue(m_terminology_names, json[QString("TerminologyNames")]);
    m_terminology_names_isSet = !json[QString("TerminologyNames")].isNull() && m_terminology_names_isValid;

    m_source_language_code_isValid = ::OpenAPI::fromJsonValue(m_source_language_code, json[QString("SourceLanguageCode")]);
    m_source_language_code_isSet = !json[QString("SourceLanguageCode")].isNull() && m_source_language_code_isValid;

    m_target_language_code_isValid = ::OpenAPI::fromJsonValue(m_target_language_code, json[QString("TargetLanguageCode")]);
    m_target_language_code_isSet = !json[QString("TargetLanguageCode")].isNull() && m_target_language_code_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;
}

QString OAITranslateDocumentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranslateDocumentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document.isSet()) {
        obj.insert(QString("Document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_terminology_names.isSet()) {
        obj.insert(QString("TerminologyNames"), ::OpenAPI::toJsonValue(m_terminology_names));
    }
    if (m_source_language_code_isSet) {
        obj.insert(QString("SourceLanguageCode"), ::OpenAPI::toJsonValue(m_source_language_code));
    }
    if (m_target_language_code_isSet) {
        obj.insert(QString("TargetLanguageCode"), ::OpenAPI::toJsonValue(m_target_language_code));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

OAITranslateDocumentRequest_Document OAITranslateDocumentRequest::getDocument() const {
    return m_document;
}
void OAITranslateDocumentRequest::setDocument(const OAITranslateDocumentRequest_Document &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAITranslateDocumentRequest::is_document_Set() const{
    return m_document_isSet;
}

bool OAITranslateDocumentRequest::is_document_Valid() const{
    return m_document_isValid;
}

QList OAITranslateDocumentRequest::getTerminologyNames() const {
    return m_terminology_names;
}
void OAITranslateDocumentRequest::setTerminologyNames(const QList &terminology_names) {
    m_terminology_names = terminology_names;
    m_terminology_names_isSet = true;
}

bool OAITranslateDocumentRequest::is_terminology_names_Set() const{
    return m_terminology_names_isSet;
}

bool OAITranslateDocumentRequest::is_terminology_names_Valid() const{
    return m_terminology_names_isValid;
}

QString OAITranslateDocumentRequest::getSourceLanguageCode() const {
    return m_source_language_code;
}
void OAITranslateDocumentRequest::setSourceLanguageCode(const QString &source_language_code) {
    m_source_language_code = source_language_code;
    m_source_language_code_isSet = true;
}

bool OAITranslateDocumentRequest::is_source_language_code_Set() const{
    return m_source_language_code_isSet;
}

bool OAITranslateDocumentRequest::is_source_language_code_Valid() const{
    return m_source_language_code_isValid;
}

QString OAITranslateDocumentRequest::getTargetLanguageCode() const {
    return m_target_language_code;
}
void OAITranslateDocumentRequest::setTargetLanguageCode(const QString &target_language_code) {
    m_target_language_code = target_language_code;
    m_target_language_code_isSet = true;
}

bool OAITranslateDocumentRequest::is_target_language_code_Set() const{
    return m_target_language_code_isSet;
}

bool OAITranslateDocumentRequest::is_target_language_code_Valid() const{
    return m_target_language_code_isValid;
}

OAITranslationSettings OAITranslateDocumentRequest::getSettings() const {
    return m_settings;
}
void OAITranslateDocumentRequest::setSettings(const OAITranslationSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAITranslateDocumentRequest::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAITranslateDocumentRequest::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAITranslateDocumentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminology_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranslateDocumentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && m_source_language_code_isValid && m_target_language_code_isValid && true;
}

} // namespace OpenAPI
