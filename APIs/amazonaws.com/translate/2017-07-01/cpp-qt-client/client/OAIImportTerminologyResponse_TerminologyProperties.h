/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportTerminologyResponse_TerminologyProperties.h
 *
 * 
 */

#ifndef OAIImportTerminologyResponse_TerminologyProperties_H
#define OAIImportTerminologyResponse_TerminologyProperties_H

#include <QJsonObject>

#include "OAIDirectionality.h"
#include "OAITerminologyDataFormat.h"
#include "OAITerminologyProperties_EncryptionKey.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITerminologyProperties_EncryptionKey;

class OAIImportTerminologyResponse_TerminologyProperties : public OAIObject {
public:
    OAIImportTerminologyResponse_TerminologyProperties();
    OAIImportTerminologyResponse_TerminologyProperties(QString json);
    ~OAIImportTerminologyResponse_TerminologyProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getSourceLanguageCode() const;
    void setSourceLanguageCode(const QString &source_language_code);
    bool is_source_language_code_Set() const;
    bool is_source_language_code_Valid() const;

    QList getTargetLanguageCodes() const;
    void setTargetLanguageCodes(const QList &target_language_codes);
    bool is_target_language_codes_Set() const;
    bool is_target_language_codes_Valid() const;

    OAITerminologyProperties_EncryptionKey getEncryptionKey() const;
    void setEncryptionKey(const OAITerminologyProperties_EncryptionKey &encryption_key);
    bool is_encryption_key_Set() const;
    bool is_encryption_key_Valid() const;

    qint32 getSizeBytes() const;
    void setSizeBytes(const qint32 &size_bytes);
    bool is_size_bytes_Set() const;
    bool is_size_bytes_Valid() const;

    qint32 getTermCount() const;
    void setTermCount(const qint32 &term_count);
    bool is_term_count_Set() const;
    bool is_term_count_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getLastUpdatedAt() const;
    void setLastUpdatedAt(const QDateTime &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    OAIDirectionality getDirectionality() const;
    void setDirectionality(const OAIDirectionality &directionality);
    bool is_directionality_Set() const;
    bool is_directionality_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    qint32 getSkippedTermCount() const;
    void setSkippedTermCount(const qint32 &skipped_term_count);
    bool is_skipped_term_count_Set() const;
    bool is_skipped_term_count_Valid() const;

    OAITerminologyDataFormat getFormat() const;
    void setFormat(const OAITerminologyDataFormat &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_source_language_code;
    bool m_source_language_code_isSet;
    bool m_source_language_code_isValid;

    QList m_target_language_codes;
    bool m_target_language_codes_isSet;
    bool m_target_language_codes_isValid;

    OAITerminologyProperties_EncryptionKey m_encryption_key;
    bool m_encryption_key_isSet;
    bool m_encryption_key_isValid;

    qint32 m_size_bytes;
    bool m_size_bytes_isSet;
    bool m_size_bytes_isValid;

    qint32 m_term_count;
    bool m_term_count_isSet;
    bool m_term_count_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;

    OAIDirectionality m_directionality;
    bool m_directionality_isSet;
    bool m_directionality_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    qint32 m_skipped_term_count;
    bool m_skipped_term_count_isSet;
    bool m_skipped_term_count_isValid;

    OAITerminologyDataFormat m_format;
    bool m_format_isSet;
    bool m_format_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportTerminologyResponse_TerminologyProperties)

#endif // OAIImportTerminologyResponse_TerminologyProperties_H
