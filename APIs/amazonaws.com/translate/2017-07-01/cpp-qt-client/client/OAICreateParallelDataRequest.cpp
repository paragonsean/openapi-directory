/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateParallelDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateParallelDataRequest::OAICreateParallelDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateParallelDataRequest::OAICreateParallelDataRequest() {
    this->initializeModel();
}

OAICreateParallelDataRequest::~OAICreateParallelDataRequest() {}

void OAICreateParallelDataRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parallel_data_config_isSet = false;
    m_parallel_data_config_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateParallelDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateParallelDataRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_parallel_data_config_isValid = ::OpenAPI::fromJsonValue(m_parallel_data_config, json[QString("ParallelDataConfig")]);
    m_parallel_data_config_isSet = !json[QString("ParallelDataConfig")].isNull() && m_parallel_data_config_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("EncryptionKey")]);
    m_encryption_key_isSet = !json[QString("EncryptionKey")].isNull() && m_encryption_key_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateParallelDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateParallelDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parallel_data_config.isSet()) {
        obj.insert(QString("ParallelDataConfig"), ::OpenAPI::toJsonValue(m_parallel_data_config));
    }
    if (m_encryption_key.isSet()) {
        obj.insert(QString("EncryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateParallelDataRequest::getName() const {
    return m_name;
}
void OAICreateParallelDataRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateParallelDataRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateParallelDataRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateParallelDataRequest::getDescription() const {
    return m_description;
}
void OAICreateParallelDataRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateParallelDataRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateParallelDataRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateParallelDataRequest_ParallelDataConfig OAICreateParallelDataRequest::getParallelDataConfig() const {
    return m_parallel_data_config;
}
void OAICreateParallelDataRequest::setParallelDataConfig(const OAICreateParallelDataRequest_ParallelDataConfig &parallel_data_config) {
    m_parallel_data_config = parallel_data_config;
    m_parallel_data_config_isSet = true;
}

bool OAICreateParallelDataRequest::is_parallel_data_config_Set() const{
    return m_parallel_data_config_isSet;
}

bool OAICreateParallelDataRequest::is_parallel_data_config_Valid() const{
    return m_parallel_data_config_isValid;
}

OAIEncryptionKey OAICreateParallelDataRequest::getEncryptionKey() const {
    return m_encryption_key;
}
void OAICreateParallelDataRequest::setEncryptionKey(const OAIEncryptionKey &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAICreateParallelDataRequest::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAICreateParallelDataRequest::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QString OAICreateParallelDataRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateParallelDataRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateParallelDataRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateParallelDataRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAICreateParallelDataRequest::getTags() const {
    return m_tags;
}
void OAICreateParallelDataRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateParallelDataRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateParallelDataRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateParallelDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateParallelDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_parallel_data_config_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
