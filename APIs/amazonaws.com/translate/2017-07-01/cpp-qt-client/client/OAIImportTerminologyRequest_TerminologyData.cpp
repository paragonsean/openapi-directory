/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportTerminologyRequest_TerminologyData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportTerminologyRequest_TerminologyData::OAIImportTerminologyRequest_TerminologyData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportTerminologyRequest_TerminologyData::OAIImportTerminologyRequest_TerminologyData() {
    this->initializeModel();
}

OAIImportTerminologyRequest_TerminologyData::~OAIImportTerminologyRequest_TerminologyData() {}

void OAIImportTerminologyRequest_TerminologyData::initializeModel() {

    m_file_isSet = false;
    m_file_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_directionality_isSet = false;
    m_directionality_isValid = false;
}

void OAIImportTerminologyRequest_TerminologyData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportTerminologyRequest_TerminologyData::fromJsonObject(QJsonObject json) {

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("File")]);
    m_file_isSet = !json[QString("File")].isNull() && m_file_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_directionality_isValid = ::OpenAPI::fromJsonValue(m_directionality, json[QString("Directionality")]);
    m_directionality_isSet = !json[QString("Directionality")].isNull() && m_directionality_isValid;
}

QString OAIImportTerminologyRequest_TerminologyData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportTerminologyRequest_TerminologyData::asJsonObject() const {
    QJsonObject obj;
    if (m_file_isSet) {
        obj.insert(QString("File"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_directionality.isSet()) {
        obj.insert(QString("Directionality"), ::OpenAPI::toJsonValue(m_directionality));
    }
    return obj;
}

QString OAIImportTerminologyRequest_TerminologyData::getFile() const {
    return m_file;
}
void OAIImportTerminologyRequest_TerminologyData::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIImportTerminologyRequest_TerminologyData::is_file_Set() const{
    return m_file_isSet;
}

bool OAIImportTerminologyRequest_TerminologyData::is_file_Valid() const{
    return m_file_isValid;
}

OAITerminologyDataFormat OAIImportTerminologyRequest_TerminologyData::getFormat() const {
    return m_format;
}
void OAIImportTerminologyRequest_TerminologyData::setFormat(const OAITerminologyDataFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIImportTerminologyRequest_TerminologyData::is_format_Set() const{
    return m_format_isSet;
}

bool OAIImportTerminologyRequest_TerminologyData::is_format_Valid() const{
    return m_format_isValid;
}

OAIDirectionality OAIImportTerminologyRequest_TerminologyData::getDirectionality() const {
    return m_directionality;
}
void OAIImportTerminologyRequest_TerminologyData::setDirectionality(const OAIDirectionality &directionality) {
    m_directionality = directionality;
    m_directionality_isSet = true;
}

bool OAIImportTerminologyRequest_TerminologyData::is_directionality_Set() const{
    return m_directionality_isSet;
}

bool OAIImportTerminologyRequest_TerminologyData::is_directionality_Valid() const{
    return m_directionality_isValid;
}

bool OAIImportTerminologyRequest_TerminologyData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directionality.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportTerminologyRequest_TerminologyData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_isValid && m_format_isValid && true;
}

} // namespace OpenAPI
