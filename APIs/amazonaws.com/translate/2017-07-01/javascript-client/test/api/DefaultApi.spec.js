/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonTranslate);
  }
}(this, function(expect, AmazonTranslate) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonTranslate.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createParallelData', function() {
      it('should call createParallelData successfully', function(done) {
        //uncomment below and update the code to test createParallelData
        //instance.createParallelData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteParallelData', function() {
      it('should call deleteParallelData successfully', function(done) {
        //uncomment below and update the code to test deleteParallelData
        //instance.deleteParallelData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTerminology', function() {
      it('should call deleteTerminology successfully', function(done) {
        //uncomment below and update the code to test deleteTerminology
        //instance.deleteTerminology(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTextTranslationJob', function() {
      it('should call describeTextTranslationJob successfully', function(done) {
        //uncomment below and update the code to test describeTextTranslationJob
        //instance.describeTextTranslationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getParallelData', function() {
      it('should call getParallelData successfully', function(done) {
        //uncomment below and update the code to test getParallelData
        //instance.getParallelData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTerminology', function() {
      it('should call getTerminology successfully', function(done) {
        //uncomment below and update the code to test getTerminology
        //instance.getTerminology(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importTerminology', function() {
      it('should call importTerminology successfully', function(done) {
        //uncomment below and update the code to test importTerminology
        //instance.importTerminology(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLanguages', function() {
      it('should call listLanguages successfully', function(done) {
        //uncomment below and update the code to test listLanguages
        //instance.listLanguages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listParallelData', function() {
      it('should call listParallelData successfully', function(done) {
        //uncomment below and update the code to test listParallelData
        //instance.listParallelData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTerminologies', function() {
      it('should call listTerminologies successfully', function(done) {
        //uncomment below and update the code to test listTerminologies
        //instance.listTerminologies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTextTranslationJobs', function() {
      it('should call listTextTranslationJobs successfully', function(done) {
        //uncomment below and update the code to test listTextTranslationJobs
        //instance.listTextTranslationJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startTextTranslationJob', function() {
      it('should call startTextTranslationJob successfully', function(done) {
        //uncomment below and update the code to test startTextTranslationJob
        //instance.startTextTranslationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopTextTranslationJob', function() {
      it('should call stopTextTranslationJob successfully', function(done) {
        //uncomment below and update the code to test stopTextTranslationJob
        //instance.stopTextTranslationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('translateDocument', function() {
      it('should call translateDocument successfully', function(done) {
        //uncomment below and update the code to test translateDocument
        //instance.translateDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('translateText', function() {
      it('should call translateText successfully', function(done) {
        //uncomment below and update the code to test translateText
        //instance.translateText(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateParallelData', function() {
      it('should call updateParallelData successfully', function(done) {
        //uncomment below and update the code to test updateParallelData
        //instance.updateParallelData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
