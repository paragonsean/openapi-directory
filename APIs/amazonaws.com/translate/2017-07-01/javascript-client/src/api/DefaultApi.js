/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateParallelDataRequest from '../model/CreateParallelDataRequest';
import CreateParallelDataResponse from '../model/CreateParallelDataResponse';
import DeleteParallelDataRequest from '../model/DeleteParallelDataRequest';
import DeleteParallelDataResponse from '../model/DeleteParallelDataResponse';
import DeleteTerminologyRequest from '../model/DeleteTerminologyRequest';
import DescribeTextTranslationJobRequest from '../model/DescribeTextTranslationJobRequest';
import DescribeTextTranslationJobResponse from '../model/DescribeTextTranslationJobResponse';
import GetParallelDataRequest from '../model/GetParallelDataRequest';
import GetParallelDataResponse from '../model/GetParallelDataResponse';
import GetTerminologyRequest from '../model/GetTerminologyRequest';
import GetTerminologyResponse from '../model/GetTerminologyResponse';
import ImportTerminologyRequest from '../model/ImportTerminologyRequest';
import ImportTerminologyResponse from '../model/ImportTerminologyResponse';
import ListLanguagesRequest from '../model/ListLanguagesRequest';
import ListLanguagesResponse from '../model/ListLanguagesResponse';
import ListParallelDataRequest from '../model/ListParallelDataRequest';
import ListParallelDataResponse from '../model/ListParallelDataResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTerminologiesRequest from '../model/ListTerminologiesRequest';
import ListTerminologiesResponse from '../model/ListTerminologiesResponse';
import ListTextTranslationJobsRequest from '../model/ListTextTranslationJobsRequest';
import ListTextTranslationJobsResponse from '../model/ListTextTranslationJobsResponse';
import StartTextTranslationJobRequest from '../model/StartTextTranslationJobRequest';
import StartTextTranslationJobResponse from '../model/StartTextTranslationJobResponse';
import StopTextTranslationJobRequest from '../model/StopTextTranslationJobRequest';
import StopTextTranslationJobResponse from '../model/StopTextTranslationJobResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import TranslateDocumentRequest from '../model/TranslateDocumentRequest';
import TranslateDocumentResponse from '../model/TranslateDocumentResponse';
import TranslateTextRequest from '../model/TranslateTextRequest';
import TranslateTextResponse from '../model/TranslateTextResponse';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateParallelDataRequest from '../model/UpdateParallelDataRequest';
import UpdateParallelDataResponse from '../model/UpdateParallelDataResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-07-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createParallelData operation.
     * @callback module:api/DefaultApi~createParallelDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateParallelDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a parallel data resource in Amazon Translate by importing an input file from Amazon S3. Parallel data files contain examples that show how you want segments of text to be translated. By adding parallel data, you can influence the style, tone, and word choice in your translation output.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateParallelDataRequest} createParallelDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createParallelDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateParallelDataResponse}
     */
    createParallelData(xAmzTarget, createParallelDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = createParallelDataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createParallelData");
      }
      // verify the required parameter 'createParallelDataRequest' is set
      if (createParallelDataRequest === undefined || createParallelDataRequest === null) {
        throw new Error("Missing the required parameter 'createParallelDataRequest' when calling createParallelData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateParallelDataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.CreateParallelData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteParallelData operation.
     * @callback module:api/DefaultApi~deleteParallelDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteParallelDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a parallel data resource in Amazon Translate.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteParallelDataRequest} deleteParallelDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteParallelDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteParallelDataResponse}
     */
    deleteParallelData(xAmzTarget, deleteParallelDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteParallelDataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteParallelData");
      }
      // verify the required parameter 'deleteParallelDataRequest' is set
      if (deleteParallelDataRequest === undefined || deleteParallelDataRequest === null) {
        throw new Error("Missing the required parameter 'deleteParallelDataRequest' when calling deleteParallelData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteParallelDataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.DeleteParallelData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTerminology operation.
     * @callback module:api/DefaultApi~deleteTerminologyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A synchronous action that deletes a custom terminology.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTerminologyRequest} deleteTerminologyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTerminologyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTerminology(xAmzTarget, deleteTerminologyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTerminologyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTerminology");
      }
      // verify the required parameter 'deleteTerminologyRequest' is set
      if (deleteTerminologyRequest === undefined || deleteTerminologyRequest === null) {
        throw new Error("Missing the required parameter 'deleteTerminologyRequest' when calling deleteTerminology");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.DeleteTerminology', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTextTranslationJob operation.
     * @callback module:api/DefaultApi~describeTextTranslationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTextTranslationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties associated with an asynchronous batch translation job including name, ID, status, source and target languages, input/output S3 buckets, and so on.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTextTranslationJobRequest} describeTextTranslationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTextTranslationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTextTranslationJobResponse}
     */
    describeTextTranslationJob(xAmzTarget, describeTextTranslationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTextTranslationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTextTranslationJob");
      }
      // verify the required parameter 'describeTextTranslationJobRequest' is set
      if (describeTextTranslationJobRequest === undefined || describeTextTranslationJobRequest === null) {
        throw new Error("Missing the required parameter 'describeTextTranslationJobRequest' when calling describeTextTranslationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTextTranslationJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.DescribeTextTranslationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParallelData operation.
     * @callback module:api/DefaultApi~getParallelDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetParallelDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about a parallel data resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetParallelDataRequest} getParallelDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getParallelDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetParallelDataResponse}
     */
    getParallelData(xAmzTarget, getParallelDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = getParallelDataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getParallelData");
      }
      // verify the required parameter 'getParallelDataRequest' is set
      if (getParallelDataRequest === undefined || getParallelDataRequest === null) {
        throw new Error("Missing the required parameter 'getParallelDataRequest' when calling getParallelData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetParallelDataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.GetParallelData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTerminology operation.
     * @callback module:api/DefaultApi~getTerminologyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTerminologyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a custom terminology.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetTerminologyRequest} getTerminologyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTerminologyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTerminologyResponse}
     */
    getTerminology(xAmzTarget, getTerminologyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTerminologyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getTerminology");
      }
      // verify the required parameter 'getTerminologyRequest' is set
      if (getTerminologyRequest === undefined || getTerminologyRequest === null) {
        throw new Error("Missing the required parameter 'getTerminologyRequest' when calling getTerminology");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTerminologyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.GetTerminology', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importTerminology operation.
     * @callback module:api/DefaultApi~importTerminologyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportTerminologyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates or updates a custom terminology, depending on whether one already exists for the given terminology name. Importing a terminology with the same name as an existing one will merge the terminologies based on the chosen merge strategy. The only supported merge strategy is OVERWRITE, where the imported terminology overwrites the existing terminology of the same name.</p> <p>If you import a terminology that overwrites an existing one, the new terminology takes up to 10 minutes to fully propagate. After that, translations have access to the new terminology.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportTerminologyRequest} importTerminologyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importTerminologyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportTerminologyResponse}
     */
    importTerminology(xAmzTarget, importTerminologyRequest, opts, callback) {
      opts = opts || {};
      let postBody = importTerminologyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importTerminology");
      }
      // verify the required parameter 'importTerminologyRequest' is set
      if (importTerminologyRequest === undefined || importTerminologyRequest === null) {
        throw new Error("Missing the required parameter 'importTerminologyRequest' when calling importTerminology");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportTerminologyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.ImportTerminology', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLanguages operation.
     * @callback module:api/DefaultApi~listLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLanguagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of languages (RFC-5646 codes and names) that Amazon Translate supports.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLanguagesRequest} listLanguagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLanguagesResponse}
     */
    listLanguages(xAmzTarget, listLanguagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLanguagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLanguages");
      }
      // verify the required parameter 'listLanguagesRequest' is set
      if (listLanguagesRequest === undefined || listLanguagesRequest === null) {
        throw new Error("Missing the required parameter 'listLanguagesRequest' when calling listLanguages");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLanguagesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.ListLanguages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listParallelData operation.
     * @callback module:api/DefaultApi~listParallelDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListParallelDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of your parallel data resources in Amazon Translate.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListParallelDataRequest} listParallelDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listParallelDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListParallelDataResponse}
     */
    listParallelData(xAmzTarget, listParallelDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = listParallelDataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listParallelData");
      }
      // verify the required parameter 'listParallelDataRequest' is set
      if (listParallelDataRequest === undefined || listParallelDataRequest === null) {
        throw new Error("Missing the required parameter 'listParallelDataRequest' when calling listParallelData");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListParallelDataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.ListParallelData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags associated with a given Amazon Translate resource. For more information, see <a href=\"https://docs.aws.amazon.com/translate/latest/dg/tagging.html\"> Tagging your resources</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTerminologies operation.
     * @callback module:api/DefaultApi~listTerminologiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTerminologiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of custom terminologies associated with your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTerminologiesRequest} listTerminologiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTerminologiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTerminologiesResponse}
     */
    listTerminologies(xAmzTarget, listTerminologiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTerminologiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTerminologies");
      }
      // verify the required parameter 'listTerminologiesRequest' is set
      if (listTerminologiesRequest === undefined || listTerminologiesRequest === null) {
        throw new Error("Missing the required parameter 'listTerminologiesRequest' when calling listTerminologies");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTerminologiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.ListTerminologies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTextTranslationJobs operation.
     * @callback module:api/DefaultApi~listTextTranslationJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTextTranslationJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the batch translation jobs that you have submitted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTextTranslationJobsRequest} listTextTranslationJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTextTranslationJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTextTranslationJobsResponse}
     */
    listTextTranslationJobs(xAmzTarget, listTextTranslationJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTextTranslationJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTextTranslationJobs");
      }
      // verify the required parameter 'listTextTranslationJobsRequest' is set
      if (listTextTranslationJobsRequest === undefined || listTextTranslationJobsRequest === null) {
        throw new Error("Missing the required parameter 'listTextTranslationJobsRequest' when calling listTextTranslationJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTextTranslationJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.ListTextTranslationJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTextTranslationJob operation.
     * @callback module:api/DefaultApi~startTextTranslationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTextTranslationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts an asynchronous batch translation job. Use batch translation jobs to translate large volumes of text across multiple documents at once. For batch translation, you can input documents with different source languages (specify <code>auto</code> as the source language). You can specify one or more target languages. Batch translation translates each input document into each of the target languages. For more information, see <a href=\"https://docs.aws.amazon.com/translate/latest/dg/async.html\">Asynchronous batch processing</a>.</p> <p>Batch translation jobs can be described with the <a>DescribeTextTranslationJob</a> operation, listed with the <a>ListTextTranslationJobs</a> operation, and stopped with the <a>StopTextTranslationJob</a> operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartTextTranslationJobRequest} startTextTranslationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startTextTranslationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTextTranslationJobResponse}
     */
    startTextTranslationJob(xAmzTarget, startTextTranslationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startTextTranslationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startTextTranslationJob");
      }
      // verify the required parameter 'startTextTranslationJobRequest' is set
      if (startTextTranslationJobRequest === undefined || startTextTranslationJobRequest === null) {
        throw new Error("Missing the required parameter 'startTextTranslationJobRequest' when calling startTextTranslationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartTextTranslationJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.StartTextTranslationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopTextTranslationJob operation.
     * @callback module:api/DefaultApi~stopTextTranslationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopTextTranslationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops an asynchronous batch translation job that is in progress.</p> <p>If the job's state is <code>IN_PROGRESS</code>, the job will be marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state. Otherwise, the job is put into the <code>STOPPED</code> state.</p> <p>Asynchronous batch translation jobs are started with the <a>StartTextTranslationJob</a> operation. You can use the <a>DescribeTextTranslationJob</a> or <a>ListTextTranslationJobs</a> operations to get a batch translation job's <code>JobId</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopTextTranslationJobRequest} stopTextTranslationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopTextTranslationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopTextTranslationJobResponse}
     */
    stopTextTranslationJob(xAmzTarget, stopTextTranslationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopTextTranslationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopTextTranslationJob");
      }
      // verify the required parameter 'stopTextTranslationJobRequest' is set
      if (stopTextTranslationJobRequest === undefined || stopTextTranslationJobRequest === null) {
        throw new Error("Missing the required parameter 'stopTextTranslationJobRequest' when calling stopTextTranslationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopTextTranslationJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.StopTextTranslationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a specific tag with a resource. A tag is a key-value pair that adds as a metadata to a resource. For more information, see <a href=\"https://docs.aws.amazon.com/translate/latest/dg/tagging.html\"> Tagging your resources</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateDocument operation.
     * @callback module:api/DefaultApi~translateDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranslateDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Translates the input document from the source language to the target language. This synchronous operation supports plain text or HTML for the input document. <code>TranslateDocument</code> supports translations from English to any supported language, and from any supported language to English. Therefore, specify either the source language code or the target language code as “en” (English). </p> <p> <code>TranslateDocument</code> does not support language auto-detection. </p> <p> If you set the <code>Formality</code> parameter, the request will fail if the target language does not support formality. For a list of target languages that support formality, see <a href=\"https://docs.aws.amazon.com/translate/latest/dg/customizing-translations-formality.html\">Setting formality</a>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TranslateDocumentRequest} translateDocumentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~translateDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranslateDocumentResponse}
     */
    translateDocument(xAmzTarget, translateDocumentRequest, opts, callback) {
      opts = opts || {};
      let postBody = translateDocumentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling translateDocument");
      }
      // verify the required parameter 'translateDocumentRequest' is set
      if (translateDocumentRequest === undefined || translateDocumentRequest === null) {
        throw new Error("Missing the required parameter 'translateDocumentRequest' when calling translateDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TranslateDocumentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.TranslateDocument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateText operation.
     * @callback module:api/DefaultApi~translateTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranslateTextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translates input text from the source language to the target language. For a list of available languages and language codes, see <a href=\"https://docs.aws.amazon.com/translate/latest/dg/what-is-languages.html\">Supported languages</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TranslateTextRequest} translateTextRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~translateTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranslateTextResponse}
     */
    translateText(xAmzTarget, translateTextRequest, opts, callback) {
      opts = opts || {};
      let postBody = translateTextRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling translateText");
      }
      // verify the required parameter 'translateTextRequest' is set
      if (translateTextRequest === undefined || translateTextRequest === null) {
        throw new Error("Missing the required parameter 'translateTextRequest' when calling translateText");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TranslateTextResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.TranslateText', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a specific tag associated with an Amazon Translate resource. For more information, see <a href=\"https://docs.aws.amazon.com/translate/latest/dg/tagging.html\"> Tagging your resources</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParallelData operation.
     * @callback module:api/DefaultApi~updateParallelDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateParallelDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a previously created parallel data resource by importing a new input file from Amazon S3.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateParallelDataRequest} updateParallelDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateParallelDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateParallelDataResponse}
     */
    updateParallelData(xAmzTarget, updateParallelDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateParallelDataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateParallelData");
      }
      // verify the required parameter 'updateParallelDataRequest' is set
      if (updateParallelDataRequest === undefined || updateParallelDataRequest === null) {
        throw new Error("Missing the required parameter 'updateParallelDataRequest' when calling updateParallelData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateParallelDataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSShineFrontendService_20170701.UpdateParallelData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
