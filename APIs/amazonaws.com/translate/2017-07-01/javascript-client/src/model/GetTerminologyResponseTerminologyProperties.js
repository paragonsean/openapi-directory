/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Directionality from './Directionality';
import TerminologyDataFormat from './TerminologyDataFormat';
import TerminologyProperties from './TerminologyProperties';
import TerminologyPropertiesEncryptionKey from './TerminologyPropertiesEncryptionKey';

/**
 * The GetTerminologyResponseTerminologyProperties model module.
 * @module model/GetTerminologyResponseTerminologyProperties
 * @version 2017-07-01
 */
class GetTerminologyResponseTerminologyProperties {
    /**
     * Constructs a new <code>GetTerminologyResponseTerminologyProperties</code>.
     * @alias module:model/GetTerminologyResponseTerminologyProperties
     * @implements module:model/TerminologyProperties
     */
    constructor() { 
        TerminologyProperties.initialize(this);
        GetTerminologyResponseTerminologyProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetTerminologyResponseTerminologyProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetTerminologyResponseTerminologyProperties} obj Optional instance to populate.
     * @return {module:model/GetTerminologyResponseTerminologyProperties} The populated <code>GetTerminologyResponseTerminologyProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetTerminologyResponseTerminologyProperties();
            TerminologyProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Arn')) {
                obj['Arn'] = ApiClient.convertToType(data['Arn'], 'String');
            }
            if (data.hasOwnProperty('SourceLanguageCode')) {
                obj['SourceLanguageCode'] = ApiClient.convertToType(data['SourceLanguageCode'], 'String');
            }
            if (data.hasOwnProperty('TargetLanguageCodes')) {
                obj['TargetLanguageCodes'] = ApiClient.convertToType(data['TargetLanguageCodes'], Array);
            }
            if (data.hasOwnProperty('EncryptionKey')) {
                obj['EncryptionKey'] = TerminologyPropertiesEncryptionKey.constructFromObject(data['EncryptionKey']);
            }
            if (data.hasOwnProperty('SizeBytes')) {
                obj['SizeBytes'] = ApiClient.convertToType(data['SizeBytes'], 'Number');
            }
            if (data.hasOwnProperty('TermCount')) {
                obj['TermCount'] = ApiClient.convertToType(data['TermCount'], 'Number');
            }
            if (data.hasOwnProperty('CreatedAt')) {
                obj['CreatedAt'] = ApiClient.convertToType(data['CreatedAt'], 'Date');
            }
            if (data.hasOwnProperty('LastUpdatedAt')) {
                obj['LastUpdatedAt'] = ApiClient.convertToType(data['LastUpdatedAt'], 'Date');
            }
            if (data.hasOwnProperty('Directionality')) {
                obj['Directionality'] = ApiClient.convertToType(data['Directionality'], Directionality);
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('SkippedTermCount')) {
                obj['SkippedTermCount'] = ApiClient.convertToType(data['SkippedTermCount'], 'Number');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], TerminologyDataFormat);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetTerminologyResponseTerminologyProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetTerminologyResponseTerminologyProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `Arn`
        if (data['Arn']) { // data not null
          String.validateJSON(data['Arn']);
        }
        // validate the optional field `SourceLanguageCode`
        if (data['SourceLanguageCode']) { // data not null
          String.validateJSON(data['SourceLanguageCode']);
        }
        // validate the optional field `TargetLanguageCodes`
        if (data['TargetLanguageCodes']) { // data not null
          Array.validateJSON(data['TargetLanguageCodes']);
        }
        // validate the optional field `EncryptionKey`
        if (data['EncryptionKey']) { // data not null
          TerminologyPropertiesEncryptionKey.validateJSON(data['EncryptionKey']);
        }
        // validate the optional field `SizeBytes`
        if (data['SizeBytes']) { // data not null
          Number.validateJSON(data['SizeBytes']);
        }
        // validate the optional field `TermCount`
        if (data['TermCount']) { // data not null
          Number.validateJSON(data['TermCount']);
        }
        // validate the optional field `CreatedAt`
        if (data['CreatedAt']) { // data not null
          Date.validateJSON(data['CreatedAt']);
        }
        // validate the optional field `LastUpdatedAt`
        if (data['LastUpdatedAt']) { // data not null
          Date.validateJSON(data['LastUpdatedAt']);
        }
        // validate the optional field `Directionality`
        if (data['Directionality']) { // data not null
          Directionality.validateJSON(data['Directionality']);
        }
        // validate the optional field `Message`
        if (data['Message']) { // data not null
          String.validateJSON(data['Message']);
        }
        // validate the optional field `SkippedTermCount`
        if (data['SkippedTermCount']) { // data not null
          Number.validateJSON(data['SkippedTermCount']);
        }
        // validate the optional field `Format`
        if (data['Format']) { // data not null
          TerminologyDataFormat.validateJSON(data['Format']);
        }

        return true;
    }


}



/**
 * @member {String} Name
 */
GetTerminologyResponseTerminologyProperties.prototype['Name'] = undefined;

/**
 * @member {String} Description
 */
GetTerminologyResponseTerminologyProperties.prototype['Description'] = undefined;

/**
 * @member {String} Arn
 */
GetTerminologyResponseTerminologyProperties.prototype['Arn'] = undefined;

/**
 * @member {String} SourceLanguageCode
 */
GetTerminologyResponseTerminologyProperties.prototype['SourceLanguageCode'] = undefined;

/**
 * @member {Array} TargetLanguageCodes
 */
GetTerminologyResponseTerminologyProperties.prototype['TargetLanguageCodes'] = undefined;

/**
 * @member {module:model/TerminologyPropertiesEncryptionKey} EncryptionKey
 */
GetTerminologyResponseTerminologyProperties.prototype['EncryptionKey'] = undefined;

/**
 * @member {Number} SizeBytes
 */
GetTerminologyResponseTerminologyProperties.prototype['SizeBytes'] = undefined;

/**
 * @member {Number} TermCount
 */
GetTerminologyResponseTerminologyProperties.prototype['TermCount'] = undefined;

/**
 * @member {Date} CreatedAt
 */
GetTerminologyResponseTerminologyProperties.prototype['CreatedAt'] = undefined;

/**
 * @member {Date} LastUpdatedAt
 */
GetTerminologyResponseTerminologyProperties.prototype['LastUpdatedAt'] = undefined;

/**
 * @member {module:model/Directionality} Directionality
 */
GetTerminologyResponseTerminologyProperties.prototype['Directionality'] = undefined;

/**
 * @member {String} Message
 */
GetTerminologyResponseTerminologyProperties.prototype['Message'] = undefined;

/**
 * @member {Number} SkippedTermCount
 */
GetTerminologyResponseTerminologyProperties.prototype['SkippedTermCount'] = undefined;

/**
 * @member {module:model/TerminologyDataFormat} Format
 */
GetTerminologyResponseTerminologyProperties.prototype['Format'] = undefined;


// Implement TerminologyProperties interface:
/**
 * @member {String} Name
 */
TerminologyProperties.prototype['Name'] = undefined;
/**
 * @member {String} Description
 */
TerminologyProperties.prototype['Description'] = undefined;
/**
 * @member {String} Arn
 */
TerminologyProperties.prototype['Arn'] = undefined;
/**
 * @member {String} SourceLanguageCode
 */
TerminologyProperties.prototype['SourceLanguageCode'] = undefined;
/**
 * @member {Array} TargetLanguageCodes
 */
TerminologyProperties.prototype['TargetLanguageCodes'] = undefined;
/**
 * @member {module:model/TerminologyPropertiesEncryptionKey} EncryptionKey
 */
TerminologyProperties.prototype['EncryptionKey'] = undefined;
/**
 * @member {Number} SizeBytes
 */
TerminologyProperties.prototype['SizeBytes'] = undefined;
/**
 * @member {Number} TermCount
 */
TerminologyProperties.prototype['TermCount'] = undefined;
/**
 * @member {Date} CreatedAt
 */
TerminologyProperties.prototype['CreatedAt'] = undefined;
/**
 * @member {Date} LastUpdatedAt
 */
TerminologyProperties.prototype['LastUpdatedAt'] = undefined;
/**
 * @member {module:model/Directionality} Directionality
 */
TerminologyProperties.prototype['Directionality'] = undefined;
/**
 * @member {String} Message
 */
TerminologyProperties.prototype['Message'] = undefined;
/**
 * @member {Number} SkippedTermCount
 */
TerminologyProperties.prototype['SkippedTermCount'] = undefined;
/**
 * @member {module:model/TerminologyDataFormat} Format
 */
TerminologyProperties.prototype['Format'] = undefined;




export default GetTerminologyResponseTerminologyProperties;

