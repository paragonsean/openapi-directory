/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionKeyType from './EncryptionKeyType';

/**
 * The EncryptionKey model module.
 * @module model/EncryptionKey
 * @version 2017-07-01
 */
class EncryptionKey {
    /**
     * Constructs a new <code>EncryptionKey</code>.
     * The encryption key used to encrypt this object.
     * @alias module:model/EncryptionKey
     * @param type {module:model/EncryptionKeyType} 
     * @param id {String} 
     */
    constructor(type, id) { 
        
        EncryptionKey.initialize(this, type, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, id) { 
        obj['Type'] = type;
        obj['Id'] = id;
    }

    /**
     * Constructs a <code>EncryptionKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptionKey} obj Optional instance to populate.
     * @return {module:model/EncryptionKey} The populated <code>EncryptionKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptionKey();

            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], EncryptionKeyType);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptionKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptionKey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EncryptionKey.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          EncryptionKeyType.validateJSON(data['Type']);
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }

        return true;
    }


}

EncryptionKey.RequiredProperties = ["Type", "Id"];

/**
 * @member {module:model/EncryptionKeyType} Type
 */
EncryptionKey.prototype['Type'] = undefined;

/**
 * @member {String} Id
 */
EncryptionKey.prototype['Id'] = undefined;






export default EncryptionKey;

