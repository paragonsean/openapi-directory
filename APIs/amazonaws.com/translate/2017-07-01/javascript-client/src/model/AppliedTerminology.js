/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppliedTerminology model module.
 * @module model/AppliedTerminology
 * @version 2017-07-01
 */
class AppliedTerminology {
    /**
     * Constructs a new <code>AppliedTerminology</code>.
     * The custom terminology applied to the input text by Amazon Translate for the translated text response. This is optional in the response and will only be present if you specified terminology input in the request. Currently, only one terminology can be applied per TranslateText request.
     * @alias module:model/AppliedTerminology
     */
    constructor() { 
        
        AppliedTerminology.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppliedTerminology</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppliedTerminology} obj Optional instance to populate.
     * @return {module:model/AppliedTerminology} The populated <code>AppliedTerminology</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppliedTerminology();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Terms')) {
                obj['Terms'] = ApiClient.convertToType(data['Terms'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppliedTerminology</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppliedTerminology</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Terms`
        if (data['Terms']) { // data not null
          Array.validateJSON(data['Terms']);
        }

        return true;
    }


}



/**
 * @member {String} Name
 */
AppliedTerminology.prototype['Name'] = undefined;

/**
 * @member {Array} Terms
 */
AppliedTerminology.prototype['Terms'] = undefined;






export default AppliedTerminology;

