/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetParallelDataResponseAuxiliaryDataLocation from './GetParallelDataResponseAuxiliaryDataLocation';
import GetParallelDataResponseDataLocation from './GetParallelDataResponseDataLocation';
import GetParallelDataResponseLatestUpdateAttemptAuxiliaryDataLocation from './GetParallelDataResponseLatestUpdateAttemptAuxiliaryDataLocation';
import GetParallelDataResponseParallelDataProperties from './GetParallelDataResponseParallelDataProperties';

/**
 * The GetParallelDataResponse model module.
 * @module model/GetParallelDataResponse
 * @version 2017-07-01
 */
class GetParallelDataResponse {
    /**
     * Constructs a new <code>GetParallelDataResponse</code>.
     * @alias module:model/GetParallelDataResponse
     */
    constructor() { 
        
        GetParallelDataResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetParallelDataResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetParallelDataResponse} obj Optional instance to populate.
     * @return {module:model/GetParallelDataResponse} The populated <code>GetParallelDataResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetParallelDataResponse();

            if (data.hasOwnProperty('ParallelDataProperties')) {
                obj['ParallelDataProperties'] = GetParallelDataResponseParallelDataProperties.constructFromObject(data['ParallelDataProperties']);
            }
            if (data.hasOwnProperty('DataLocation')) {
                obj['DataLocation'] = GetParallelDataResponseDataLocation.constructFromObject(data['DataLocation']);
            }
            if (data.hasOwnProperty('AuxiliaryDataLocation')) {
                obj['AuxiliaryDataLocation'] = GetParallelDataResponseAuxiliaryDataLocation.constructFromObject(data['AuxiliaryDataLocation']);
            }
            if (data.hasOwnProperty('LatestUpdateAttemptAuxiliaryDataLocation')) {
                obj['LatestUpdateAttemptAuxiliaryDataLocation'] = GetParallelDataResponseLatestUpdateAttemptAuxiliaryDataLocation.constructFromObject(data['LatestUpdateAttemptAuxiliaryDataLocation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetParallelDataResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetParallelDataResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ParallelDataProperties`
        if (data['ParallelDataProperties']) { // data not null
          GetParallelDataResponseParallelDataProperties.validateJSON(data['ParallelDataProperties']);
        }
        // validate the optional field `DataLocation`
        if (data['DataLocation']) { // data not null
          GetParallelDataResponseDataLocation.validateJSON(data['DataLocation']);
        }
        // validate the optional field `AuxiliaryDataLocation`
        if (data['AuxiliaryDataLocation']) { // data not null
          GetParallelDataResponseAuxiliaryDataLocation.validateJSON(data['AuxiliaryDataLocation']);
        }
        // validate the optional field `LatestUpdateAttemptAuxiliaryDataLocation`
        if (data['LatestUpdateAttemptAuxiliaryDataLocation']) { // data not null
          GetParallelDataResponseLatestUpdateAttemptAuxiliaryDataLocation.validateJSON(data['LatestUpdateAttemptAuxiliaryDataLocation']);
        }

        return true;
    }


}



/**
 * @member {module:model/GetParallelDataResponseParallelDataProperties} ParallelDataProperties
 */
GetParallelDataResponse.prototype['ParallelDataProperties'] = undefined;

/**
 * @member {module:model/GetParallelDataResponseDataLocation} DataLocation
 */
GetParallelDataResponse.prototype['DataLocation'] = undefined;

/**
 * @member {module:model/GetParallelDataResponseAuxiliaryDataLocation} AuxiliaryDataLocation
 */
GetParallelDataResponse.prototype['AuxiliaryDataLocation'] = undefined;

/**
 * @member {module:model/GetParallelDataResponseLatestUpdateAttemptAuxiliaryDataLocation} LatestUpdateAttemptAuxiliaryDataLocation
 */
GetParallelDataResponse.prototype['LatestUpdateAttemptAuxiliaryDataLocation'] = undefined;






export default GetParallelDataResponse;

