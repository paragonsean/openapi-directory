/**
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Directionality from './Directionality';
import TerminologyData from './TerminologyData';
import TerminologyDataFormat from './TerminologyDataFormat';

/**
 * The ImportTerminologyRequestTerminologyData model module.
 * @module model/ImportTerminologyRequestTerminologyData
 * @version 2017-07-01
 */
class ImportTerminologyRequestTerminologyData {
    /**
     * Constructs a new <code>ImportTerminologyRequestTerminologyData</code>.
     * @alias module:model/ImportTerminologyRequestTerminologyData
     * @implements module:model/TerminologyData
     * @param file {String} 
     * @param format {module:model/TerminologyDataFormat} 
     */
    constructor(file, format) { 
        TerminologyData.initialize(this, file, format);
        ImportTerminologyRequestTerminologyData.initialize(this, file, format);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, file, format) { 
        obj['File'] = file;
        obj['Format'] = format;
    }

    /**
     * Constructs a <code>ImportTerminologyRequestTerminologyData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportTerminologyRequestTerminologyData} obj Optional instance to populate.
     * @return {module:model/ImportTerminologyRequestTerminologyData} The populated <code>ImportTerminologyRequestTerminologyData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportTerminologyRequestTerminologyData();
            TerminologyData.constructFromObject(data, obj);

            if (data.hasOwnProperty('File')) {
                obj['File'] = ApiClient.convertToType(data['File'], 'String');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], TerminologyDataFormat);
            }
            if (data.hasOwnProperty('Directionality')) {
                obj['Directionality'] = ApiClient.convertToType(data['Directionality'], Directionality);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportTerminologyRequestTerminologyData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportTerminologyRequestTerminologyData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportTerminologyRequestTerminologyData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `File`
        if (data['File']) { // data not null
          String.validateJSON(data['File']);
        }
        // validate the optional field `Format`
        if (data['Format']) { // data not null
          TerminologyDataFormat.validateJSON(data['Format']);
        }
        // validate the optional field `Directionality`
        if (data['Directionality']) { // data not null
          Directionality.validateJSON(data['Directionality']);
        }

        return true;
    }


}

ImportTerminologyRequestTerminologyData.RequiredProperties = ["File", "Format"];

/**
 * @member {String} File
 */
ImportTerminologyRequestTerminologyData.prototype['File'] = undefined;

/**
 * @member {module:model/TerminologyDataFormat} Format
 */
ImportTerminologyRequestTerminologyData.prototype['Format'] = undefined;

/**
 * @member {module:model/Directionality} Directionality
 */
ImportTerminologyRequestTerminologyData.prototype['Directionality'] = undefined;


// Implement TerminologyData interface:
/**
 * @member {String} File
 */
TerminologyData.prototype['File'] = undefined;
/**
 * @member {module:model/TerminologyDataFormat} Format
 */
TerminologyData.prototype['Format'] = undefined;
/**
 * @member {module:model/Directionality} Directionality
 */
TerminologyData.prototype['Directionality'] = undefined;




export default ImportTerminologyRequestTerminologyData;

