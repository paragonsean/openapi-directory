/*
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTextTranslationJobsRequestFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:41.006574-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTextTranslationJobsRequestFilter {
  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_SUBMITTED_BEFORE_TIME = "SubmittedBeforeTime";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_BEFORE_TIME)
  private OffsetDateTime submittedBeforeTime;

  public static final String SERIALIZED_NAME_SUBMITTED_AFTER_TIME = "SubmittedAfterTime";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_AFTER_TIME)
  private OffsetDateTime submittedAfterTime;

  public ListTextTranslationJobsRequestFilter() {
  }

  public ListTextTranslationJobsRequestFilter jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public ListTextTranslationJobsRequestFilter jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public ListTextTranslationJobsRequestFilter submittedBeforeTime(OffsetDateTime submittedBeforeTime) {
    this.submittedBeforeTime = submittedBeforeTime;
    return this;
  }

  /**
   * Get submittedBeforeTime
   * @return submittedBeforeTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmittedBeforeTime() {
    return submittedBeforeTime;
  }

  public void setSubmittedBeforeTime(OffsetDateTime submittedBeforeTime) {
    this.submittedBeforeTime = submittedBeforeTime;
  }


  public ListTextTranslationJobsRequestFilter submittedAfterTime(OffsetDateTime submittedAfterTime) {
    this.submittedAfterTime = submittedAfterTime;
    return this;
  }

  /**
   * Get submittedAfterTime
   * @return submittedAfterTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmittedAfterTime() {
    return submittedAfterTime;
  }

  public void setSubmittedAfterTime(OffsetDateTime submittedAfterTime) {
    this.submittedAfterTime = submittedAfterTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTextTranslationJobsRequestFilter listTextTranslationJobsRequestFilter = (ListTextTranslationJobsRequestFilter) o;
    return Objects.equals(this.jobName, listTextTranslationJobsRequestFilter.jobName) &&
        Objects.equals(this.jobStatus, listTextTranslationJobsRequestFilter.jobStatus) &&
        Objects.equals(this.submittedBeforeTime, listTextTranslationJobsRequestFilter.submittedBeforeTime) &&
        Objects.equals(this.submittedAfterTime, listTextTranslationJobsRequestFilter.submittedAfterTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobName, jobStatus, submittedBeforeTime, submittedAfterTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTextTranslationJobsRequestFilter {\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    submittedBeforeTime: ").append(toIndentedString(submittedBeforeTime)).append("\n");
    sb.append("    submittedAfterTime: ").append(toIndentedString(submittedAfterTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobName");
    openapiFields.add("JobStatus");
    openapiFields.add("SubmittedBeforeTime");
    openapiFields.add("SubmittedAfterTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTextTranslationJobsRequestFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTextTranslationJobsRequestFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTextTranslationJobsRequestFilter is not found in the empty JSON string", ListTextTranslationJobsRequestFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTextTranslationJobsRequestFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTextTranslationJobsRequestFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `JobStatus`
      if (jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("JobStatus"));
      }
      // validate the optional field `SubmittedBeforeTime`
      if (jsonObj.get("SubmittedBeforeTime") != null && !jsonObj.get("SubmittedBeforeTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmittedBeforeTime"));
      }
      // validate the optional field `SubmittedAfterTime`
      if (jsonObj.get("SubmittedAfterTime") != null && !jsonObj.get("SubmittedAfterTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmittedAfterTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTextTranslationJobsRequestFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTextTranslationJobsRequestFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTextTranslationJobsRequestFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTextTranslationJobsRequestFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTextTranslationJobsRequestFilter>() {
           @Override
           public void write(JsonWriter out, ListTextTranslationJobsRequestFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTextTranslationJobsRequestFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTextTranslationJobsRequestFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTextTranslationJobsRequestFilter
   * @throws IOException if the JSON string is invalid with respect to ListTextTranslationJobsRequestFilter
   */
  public static ListTextTranslationJobsRequestFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTextTranslationJobsRequestFilter.class);
  }

  /**
   * Convert an instance of ListTextTranslationJobsRequestFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

