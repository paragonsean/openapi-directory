/*
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Directionality;
import org.openapitools.client.model.TerminologyDataFormat;
import org.openapitools.client.model.TerminologyPropertiesEncryptionKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTerminologyResponseTerminologyProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:41.006574-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTerminologyResponseTerminologyProperties {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE_CODE = "SourceLanguageCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE_CODE)
  private String sourceLanguageCode;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGE_CODES = "TargetLanguageCodes";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGE_CODES)
  private List targetLanguageCodes;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "EncryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private TerminologyPropertiesEncryptionKey encryptionKey;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "SizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private Integer sizeBytes;

  public static final String SERIALIZED_NAME_TERM_COUNT = "TermCount";
  @SerializedName(SERIALIZED_NAME_TERM_COUNT)
  private Integer termCount;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_DIRECTIONALITY = "Directionality";
  @SerializedName(SERIALIZED_NAME_DIRECTIONALITY)
  private Directionality directionality;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_SKIPPED_TERM_COUNT = "SkippedTermCount";
  @SerializedName(SERIALIZED_NAME_SKIPPED_TERM_COUNT)
  private Integer skippedTermCount;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private TerminologyDataFormat format;

  public GetTerminologyResponseTerminologyProperties() {
  }

  public GetTerminologyResponseTerminologyProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetTerminologyResponseTerminologyProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetTerminologyResponseTerminologyProperties arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetTerminologyResponseTerminologyProperties sourceLanguageCode(String sourceLanguageCode) {
    this.sourceLanguageCode = sourceLanguageCode;
    return this;
  }

  /**
   * Get sourceLanguageCode
   * @return sourceLanguageCode
   */
  @javax.annotation.Nullable
  public String getSourceLanguageCode() {
    return sourceLanguageCode;
  }

  public void setSourceLanguageCode(String sourceLanguageCode) {
    this.sourceLanguageCode = sourceLanguageCode;
  }


  public GetTerminologyResponseTerminologyProperties targetLanguageCodes(List targetLanguageCodes) {
    this.targetLanguageCodes = targetLanguageCodes;
    return this;
  }

  /**
   * Get targetLanguageCodes
   * @return targetLanguageCodes
   */
  @javax.annotation.Nullable
  public List getTargetLanguageCodes() {
    return targetLanguageCodes;
  }

  public void setTargetLanguageCodes(List targetLanguageCodes) {
    this.targetLanguageCodes = targetLanguageCodes;
  }


  public GetTerminologyResponseTerminologyProperties encryptionKey(TerminologyPropertiesEncryptionKey encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Get encryptionKey
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public TerminologyPropertiesEncryptionKey getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(TerminologyPropertiesEncryptionKey encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public GetTerminologyResponseTerminologyProperties sizeBytes(Integer sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

  /**
   * Get sizeBytes
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public Integer getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(Integer sizeBytes) {
    this.sizeBytes = sizeBytes;
  }


  public GetTerminologyResponseTerminologyProperties termCount(Integer termCount) {
    this.termCount = termCount;
    return this;
  }

  /**
   * Get termCount
   * @return termCount
   */
  @javax.annotation.Nullable
  public Integer getTermCount() {
    return termCount;
  }

  public void setTermCount(Integer termCount) {
    this.termCount = termCount;
  }


  public GetTerminologyResponseTerminologyProperties createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetTerminologyResponseTerminologyProperties lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public GetTerminologyResponseTerminologyProperties directionality(Directionality directionality) {
    this.directionality = directionality;
    return this;
  }

  /**
   * Get directionality
   * @return directionality
   */
  @javax.annotation.Nullable
  public Directionality getDirectionality() {
    return directionality;
  }

  public void setDirectionality(Directionality directionality) {
    this.directionality = directionality;
  }


  public GetTerminologyResponseTerminologyProperties message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GetTerminologyResponseTerminologyProperties skippedTermCount(Integer skippedTermCount) {
    this.skippedTermCount = skippedTermCount;
    return this;
  }

  /**
   * Get skippedTermCount
   * @return skippedTermCount
   */
  @javax.annotation.Nullable
  public Integer getSkippedTermCount() {
    return skippedTermCount;
  }

  public void setSkippedTermCount(Integer skippedTermCount) {
    this.skippedTermCount = skippedTermCount;
  }


  public GetTerminologyResponseTerminologyProperties format(TerminologyDataFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public TerminologyDataFormat getFormat() {
    return format;
  }

  public void setFormat(TerminologyDataFormat format) {
    this.format = format;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTerminologyResponseTerminologyProperties getTerminologyResponseTerminologyProperties = (GetTerminologyResponseTerminologyProperties) o;
    return Objects.equals(this.name, getTerminologyResponseTerminologyProperties.name) &&
        Objects.equals(this.description, getTerminologyResponseTerminologyProperties.description) &&
        Objects.equals(this.arn, getTerminologyResponseTerminologyProperties.arn) &&
        Objects.equals(this.sourceLanguageCode, getTerminologyResponseTerminologyProperties.sourceLanguageCode) &&
        Objects.equals(this.targetLanguageCodes, getTerminologyResponseTerminologyProperties.targetLanguageCodes) &&
        Objects.equals(this.encryptionKey, getTerminologyResponseTerminologyProperties.encryptionKey) &&
        Objects.equals(this.sizeBytes, getTerminologyResponseTerminologyProperties.sizeBytes) &&
        Objects.equals(this.termCount, getTerminologyResponseTerminologyProperties.termCount) &&
        Objects.equals(this.createdAt, getTerminologyResponseTerminologyProperties.createdAt) &&
        Objects.equals(this.lastUpdatedAt, getTerminologyResponseTerminologyProperties.lastUpdatedAt) &&
        Objects.equals(this.directionality, getTerminologyResponseTerminologyProperties.directionality) &&
        Objects.equals(this.message, getTerminologyResponseTerminologyProperties.message) &&
        Objects.equals(this.skippedTermCount, getTerminologyResponseTerminologyProperties.skippedTermCount) &&
        Objects.equals(this.format, getTerminologyResponseTerminologyProperties.format);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, arn, sourceLanguageCode, targetLanguageCodes, encryptionKey, sizeBytes, termCount, createdAt, lastUpdatedAt, directionality, message, skippedTermCount, format);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTerminologyResponseTerminologyProperties {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    sourceLanguageCode: ").append(toIndentedString(sourceLanguageCode)).append("\n");
    sb.append("    targetLanguageCodes: ").append(toIndentedString(targetLanguageCodes)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    termCount: ").append(toIndentedString(termCount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    directionality: ").append(toIndentedString(directionality)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    skippedTermCount: ").append(toIndentedString(skippedTermCount)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("Arn");
    openapiFields.add("SourceLanguageCode");
    openapiFields.add("TargetLanguageCodes");
    openapiFields.add("EncryptionKey");
    openapiFields.add("SizeBytes");
    openapiFields.add("TermCount");
    openapiFields.add("CreatedAt");
    openapiFields.add("LastUpdatedAt");
    openapiFields.add("Directionality");
    openapiFields.add("Message");
    openapiFields.add("SkippedTermCount");
    openapiFields.add("Format");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTerminologyResponseTerminologyProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTerminologyResponseTerminologyProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTerminologyResponseTerminologyProperties is not found in the empty JSON string", GetTerminologyResponseTerminologyProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTerminologyResponseTerminologyProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTerminologyResponseTerminologyProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `SourceLanguageCode`
      if (jsonObj.get("SourceLanguageCode") != null && !jsonObj.get("SourceLanguageCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceLanguageCode"));
      }
      // validate the optional field `TargetLanguageCodes`
      if (jsonObj.get("TargetLanguageCodes") != null && !jsonObj.get("TargetLanguageCodes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetLanguageCodes"));
      }
      // validate the optional field `EncryptionKey`
      if (jsonObj.get("EncryptionKey") != null && !jsonObj.get("EncryptionKey").isJsonNull()) {
        TerminologyPropertiesEncryptionKey.validateJsonElement(jsonObj.get("EncryptionKey"));
      }
      // validate the optional field `SizeBytes`
      if (jsonObj.get("SizeBytes") != null && !jsonObj.get("SizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SizeBytes"));
      }
      // validate the optional field `TermCount`
      if (jsonObj.get("TermCount") != null && !jsonObj.get("TermCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TermCount"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `LastUpdatedAt`
      if (jsonObj.get("LastUpdatedAt") != null && !jsonObj.get("LastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
      }
      // validate the optional field `Directionality`
      if (jsonObj.get("Directionality") != null && !jsonObj.get("Directionality").isJsonNull()) {
        Directionality.validateJsonElement(jsonObj.get("Directionality"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
      // validate the optional field `SkippedTermCount`
      if (jsonObj.get("SkippedTermCount") != null && !jsonObj.get("SkippedTermCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SkippedTermCount"));
      }
      // validate the optional field `Format`
      if (jsonObj.get("Format") != null && !jsonObj.get("Format").isJsonNull()) {
        TerminologyDataFormat.validateJsonElement(jsonObj.get("Format"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTerminologyResponseTerminologyProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTerminologyResponseTerminologyProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTerminologyResponseTerminologyProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTerminologyResponseTerminologyProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTerminologyResponseTerminologyProperties>() {
           @Override
           public void write(JsonWriter out, GetTerminologyResponseTerminologyProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTerminologyResponseTerminologyProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTerminologyResponseTerminologyProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTerminologyResponseTerminologyProperties
   * @throws IOException if the JSON string is invalid with respect to GetTerminologyResponseTerminologyProperties
   */
  public static GetTerminologyResponseTerminologyProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTerminologyResponseTerminologyProperties.class);
  }

  /**
   * Convert an instance of GetTerminologyResponseTerminologyProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

