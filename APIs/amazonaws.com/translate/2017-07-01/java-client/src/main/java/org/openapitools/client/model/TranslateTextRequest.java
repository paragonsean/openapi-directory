/*
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StartTextTranslationJobRequestSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TranslateTextRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:41.006574-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TranslateTextRequest {
  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TERMINOLOGY_NAMES = "TerminologyNames";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY_NAMES)
  private List terminologyNames;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE_CODE = "SourceLanguageCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE_CODE)
  private String sourceLanguageCode;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGE_CODE = "TargetLanguageCode";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGE_CODE)
  private String targetLanguageCode;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private StartTextTranslationJobRequestSettings settings;

  public TranslateTextRequest() {
  }

  public TranslateTextRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public TranslateTextRequest terminologyNames(List terminologyNames) {
    this.terminologyNames = terminologyNames;
    return this;
  }

  /**
   * Get terminologyNames
   * @return terminologyNames
   */
  @javax.annotation.Nullable
  public List getTerminologyNames() {
    return terminologyNames;
  }

  public void setTerminologyNames(List terminologyNames) {
    this.terminologyNames = terminologyNames;
  }


  public TranslateTextRequest sourceLanguageCode(String sourceLanguageCode) {
    this.sourceLanguageCode = sourceLanguageCode;
    return this;
  }

  /**
   * Get sourceLanguageCode
   * @return sourceLanguageCode
   */
  @javax.annotation.Nonnull
  public String getSourceLanguageCode() {
    return sourceLanguageCode;
  }

  public void setSourceLanguageCode(String sourceLanguageCode) {
    this.sourceLanguageCode = sourceLanguageCode;
  }


  public TranslateTextRequest targetLanguageCode(String targetLanguageCode) {
    this.targetLanguageCode = targetLanguageCode;
    return this;
  }

  /**
   * Get targetLanguageCode
   * @return targetLanguageCode
   */
  @javax.annotation.Nonnull
  public String getTargetLanguageCode() {
    return targetLanguageCode;
  }

  public void setTargetLanguageCode(String targetLanguageCode) {
    this.targetLanguageCode = targetLanguageCode;
  }


  public TranslateTextRequest settings(StartTextTranslationJobRequestSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public StartTextTranslationJobRequestSettings getSettings() {
    return settings;
  }

  public void setSettings(StartTextTranslationJobRequestSettings settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranslateTextRequest translateTextRequest = (TranslateTextRequest) o;
    return Objects.equals(this.text, translateTextRequest.text) &&
        Objects.equals(this.terminologyNames, translateTextRequest.terminologyNames) &&
        Objects.equals(this.sourceLanguageCode, translateTextRequest.sourceLanguageCode) &&
        Objects.equals(this.targetLanguageCode, translateTextRequest.targetLanguageCode) &&
        Objects.equals(this.settings, translateTextRequest.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, terminologyNames, sourceLanguageCode, targetLanguageCode, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranslateTextRequest {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    terminologyNames: ").append(toIndentedString(terminologyNames)).append("\n");
    sb.append("    sourceLanguageCode: ").append(toIndentedString(sourceLanguageCode)).append("\n");
    sb.append("    targetLanguageCode: ").append(toIndentedString(targetLanguageCode)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Text");
    openapiFields.add("TerminologyNames");
    openapiFields.add("SourceLanguageCode");
    openapiFields.add("TargetLanguageCode");
    openapiFields.add("Settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Text");
    openapiRequiredFields.add("SourceLanguageCode");
    openapiRequiredFields.add("TargetLanguageCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TranslateTextRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TranslateTextRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TranslateTextRequest is not found in the empty JSON string", TranslateTextRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TranslateTextRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TranslateTextRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TranslateTextRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Text`
      String.validateJsonElement(jsonObj.get("Text"));
      // validate the optional field `TerminologyNames`
      if (jsonObj.get("TerminologyNames") != null && !jsonObj.get("TerminologyNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TerminologyNames"));
      }
      // validate the required field `SourceLanguageCode`
      String.validateJsonElement(jsonObj.get("SourceLanguageCode"));
      // validate the required field `TargetLanguageCode`
      String.validateJsonElement(jsonObj.get("TargetLanguageCode"));
      // validate the optional field `Settings`
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        StartTextTranslationJobRequestSettings.validateJsonElement(jsonObj.get("Settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TranslateTextRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TranslateTextRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TranslateTextRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TranslateTextRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TranslateTextRequest>() {
           @Override
           public void write(JsonWriter out, TranslateTextRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TranslateTextRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TranslateTextRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TranslateTextRequest
   * @throws IOException if the JSON string is invalid with respect to TranslateTextRequest
   */
  public static TranslateTextRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TranslateTextRequest.class);
  }

  /**
   * Convert an instance of TranslateTextRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

