/*
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobStatus;
import org.openapitools.client.model.TextTranslationJobPropertiesInputDataConfig;
import org.openapitools.client.model.TextTranslationJobPropertiesJobDetails;
import org.openapitools.client.model.TextTranslationJobPropertiesOutputDataConfig;
import org.openapitools.client.model.TextTranslationJobPropertiesSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeTextTranslationJobResponseTextTranslationJobProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:41.006574-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeTextTranslationJobResponseTextTranslationJobProperties {
  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_JOB_DETAILS = "JobDetails";
  @SerializedName(SERIALIZED_NAME_JOB_DETAILS)
  private TextTranslationJobPropertiesJobDetails jobDetails;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE_CODE = "SourceLanguageCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE_CODE)
  private String sourceLanguageCode;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGE_CODES = "TargetLanguageCodes";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGE_CODES)
  private List targetLanguageCodes;

  public static final String SERIALIZED_NAME_TERMINOLOGY_NAMES = "TerminologyNames";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY_NAMES)
  private List terminologyNames;

  public static final String SERIALIZED_NAME_PARALLEL_DATA_NAMES = "ParallelDataNames";
  @SerializedName(SERIALIZED_NAME_PARALLEL_DATA_NAMES)
  private List parallelDataNames;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_SUBMITTED_TIME = "SubmittedTime";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_TIME)
  private OffsetDateTime submittedTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_INPUT_DATA_CONFIG = "InputDataConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA_CONFIG)
  private TextTranslationJobPropertiesInputDataConfig inputDataConfig;

  public static final String SERIALIZED_NAME_OUTPUT_DATA_CONFIG = "OutputDataConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DATA_CONFIG)
  private TextTranslationJobPropertiesOutputDataConfig outputDataConfig;

  public static final String SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN = "DataAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN)
  private String dataAccessRoleArn;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private TextTranslationJobPropertiesSettings settings;

  public DescribeTextTranslationJobResponseTextTranslationJobProperties() {
  }

  public DescribeTextTranslationJobResponseTextTranslationJobProperties jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties jobDetails(TextTranslationJobPropertiesJobDetails jobDetails) {
    this.jobDetails = jobDetails;
    return this;
  }

  /**
   * Get jobDetails
   * @return jobDetails
   */
  @javax.annotation.Nullable
  public TextTranslationJobPropertiesJobDetails getJobDetails() {
    return jobDetails;
  }

  public void setJobDetails(TextTranslationJobPropertiesJobDetails jobDetails) {
    this.jobDetails = jobDetails;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties sourceLanguageCode(String sourceLanguageCode) {
    this.sourceLanguageCode = sourceLanguageCode;
    return this;
  }

  /**
   * Get sourceLanguageCode
   * @return sourceLanguageCode
   */
  @javax.annotation.Nullable
  public String getSourceLanguageCode() {
    return sourceLanguageCode;
  }

  public void setSourceLanguageCode(String sourceLanguageCode) {
    this.sourceLanguageCode = sourceLanguageCode;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties targetLanguageCodes(List targetLanguageCodes) {
    this.targetLanguageCodes = targetLanguageCodes;
    return this;
  }

  /**
   * Get targetLanguageCodes
   * @return targetLanguageCodes
   */
  @javax.annotation.Nullable
  public List getTargetLanguageCodes() {
    return targetLanguageCodes;
  }

  public void setTargetLanguageCodes(List targetLanguageCodes) {
    this.targetLanguageCodes = targetLanguageCodes;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties terminologyNames(List terminologyNames) {
    this.terminologyNames = terminologyNames;
    return this;
  }

  /**
   * Get terminologyNames
   * @return terminologyNames
   */
  @javax.annotation.Nullable
  public List getTerminologyNames() {
    return terminologyNames;
  }

  public void setTerminologyNames(List terminologyNames) {
    this.terminologyNames = terminologyNames;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties parallelDataNames(List parallelDataNames) {
    this.parallelDataNames = parallelDataNames;
    return this;
  }

  /**
   * Get parallelDataNames
   * @return parallelDataNames
   */
  @javax.annotation.Nullable
  public List getParallelDataNames() {
    return parallelDataNames;
  }

  public void setParallelDataNames(List parallelDataNames) {
    this.parallelDataNames = parallelDataNames;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties submittedTime(OffsetDateTime submittedTime) {
    this.submittedTime = submittedTime;
    return this;
  }

  /**
   * Get submittedTime
   * @return submittedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmittedTime() {
    return submittedTime;
  }

  public void setSubmittedTime(OffsetDateTime submittedTime) {
    this.submittedTime = submittedTime;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties inputDataConfig(TextTranslationJobPropertiesInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
    return this;
  }

  /**
   * Get inputDataConfig
   * @return inputDataConfig
   */
  @javax.annotation.Nullable
  public TextTranslationJobPropertiesInputDataConfig getInputDataConfig() {
    return inputDataConfig;
  }

  public void setInputDataConfig(TextTranslationJobPropertiesInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties outputDataConfig(TextTranslationJobPropertiesOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
    return this;
  }

  /**
   * Get outputDataConfig
   * @return outputDataConfig
   */
  @javax.annotation.Nullable
  public TextTranslationJobPropertiesOutputDataConfig getOutputDataConfig() {
    return outputDataConfig;
  }

  public void setOutputDataConfig(TextTranslationJobPropertiesOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties dataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
    return this;
  }

  /**
   * Get dataAccessRoleArn
   * @return dataAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getDataAccessRoleArn() {
    return dataAccessRoleArn;
  }

  public void setDataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
  }


  public DescribeTextTranslationJobResponseTextTranslationJobProperties settings(TextTranslationJobPropertiesSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public TextTranslationJobPropertiesSettings getSettings() {
    return settings;
  }

  public void setSettings(TextTranslationJobPropertiesSettings settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeTextTranslationJobResponseTextTranslationJobProperties describeTextTranslationJobResponseTextTranslationJobProperties = (DescribeTextTranslationJobResponseTextTranslationJobProperties) o;
    return Objects.equals(this.jobId, describeTextTranslationJobResponseTextTranslationJobProperties.jobId) &&
        Objects.equals(this.jobName, describeTextTranslationJobResponseTextTranslationJobProperties.jobName) &&
        Objects.equals(this.jobStatus, describeTextTranslationJobResponseTextTranslationJobProperties.jobStatus) &&
        Objects.equals(this.jobDetails, describeTextTranslationJobResponseTextTranslationJobProperties.jobDetails) &&
        Objects.equals(this.sourceLanguageCode, describeTextTranslationJobResponseTextTranslationJobProperties.sourceLanguageCode) &&
        Objects.equals(this.targetLanguageCodes, describeTextTranslationJobResponseTextTranslationJobProperties.targetLanguageCodes) &&
        Objects.equals(this.terminologyNames, describeTextTranslationJobResponseTextTranslationJobProperties.terminologyNames) &&
        Objects.equals(this.parallelDataNames, describeTextTranslationJobResponseTextTranslationJobProperties.parallelDataNames) &&
        Objects.equals(this.message, describeTextTranslationJobResponseTextTranslationJobProperties.message) &&
        Objects.equals(this.submittedTime, describeTextTranslationJobResponseTextTranslationJobProperties.submittedTime) &&
        Objects.equals(this.endTime, describeTextTranslationJobResponseTextTranslationJobProperties.endTime) &&
        Objects.equals(this.inputDataConfig, describeTextTranslationJobResponseTextTranslationJobProperties.inputDataConfig) &&
        Objects.equals(this.outputDataConfig, describeTextTranslationJobResponseTextTranslationJobProperties.outputDataConfig) &&
        Objects.equals(this.dataAccessRoleArn, describeTextTranslationJobResponseTextTranslationJobProperties.dataAccessRoleArn) &&
        Objects.equals(this.settings, describeTextTranslationJobResponseTextTranslationJobProperties.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, jobName, jobStatus, jobDetails, sourceLanguageCode, targetLanguageCodes, terminologyNames, parallelDataNames, message, submittedTime, endTime, inputDataConfig, outputDataConfig, dataAccessRoleArn, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeTextTranslationJobResponseTextTranslationJobProperties {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    jobDetails: ").append(toIndentedString(jobDetails)).append("\n");
    sb.append("    sourceLanguageCode: ").append(toIndentedString(sourceLanguageCode)).append("\n");
    sb.append("    targetLanguageCodes: ").append(toIndentedString(targetLanguageCodes)).append("\n");
    sb.append("    terminologyNames: ").append(toIndentedString(terminologyNames)).append("\n");
    sb.append("    parallelDataNames: ").append(toIndentedString(parallelDataNames)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    submittedTime: ").append(toIndentedString(submittedTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    inputDataConfig: ").append(toIndentedString(inputDataConfig)).append("\n");
    sb.append("    outputDataConfig: ").append(toIndentedString(outputDataConfig)).append("\n");
    sb.append("    dataAccessRoleArn: ").append(toIndentedString(dataAccessRoleArn)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobId");
    openapiFields.add("JobName");
    openapiFields.add("JobStatus");
    openapiFields.add("JobDetails");
    openapiFields.add("SourceLanguageCode");
    openapiFields.add("TargetLanguageCodes");
    openapiFields.add("TerminologyNames");
    openapiFields.add("ParallelDataNames");
    openapiFields.add("Message");
    openapiFields.add("SubmittedTime");
    openapiFields.add("EndTime");
    openapiFields.add("InputDataConfig");
    openapiFields.add("OutputDataConfig");
    openapiFields.add("DataAccessRoleArn");
    openapiFields.add("Settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeTextTranslationJobResponseTextTranslationJobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeTextTranslationJobResponseTextTranslationJobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeTextTranslationJobResponseTextTranslationJobProperties is not found in the empty JSON string", DescribeTextTranslationJobResponseTextTranslationJobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeTextTranslationJobResponseTextTranslationJobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeTextTranslationJobResponseTextTranslationJobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobId`
      if (jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobId"));
      }
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `JobStatus`
      if (jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("JobStatus"));
      }
      // validate the optional field `JobDetails`
      if (jsonObj.get("JobDetails") != null && !jsonObj.get("JobDetails").isJsonNull()) {
        TextTranslationJobPropertiesJobDetails.validateJsonElement(jsonObj.get("JobDetails"));
      }
      // validate the optional field `SourceLanguageCode`
      if (jsonObj.get("SourceLanguageCode") != null && !jsonObj.get("SourceLanguageCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceLanguageCode"));
      }
      // validate the optional field `TargetLanguageCodes`
      if (jsonObj.get("TargetLanguageCodes") != null && !jsonObj.get("TargetLanguageCodes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetLanguageCodes"));
      }
      // validate the optional field `TerminologyNames`
      if (jsonObj.get("TerminologyNames") != null && !jsonObj.get("TerminologyNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TerminologyNames"));
      }
      // validate the optional field `ParallelDataNames`
      if (jsonObj.get("ParallelDataNames") != null && !jsonObj.get("ParallelDataNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ParallelDataNames"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
      // validate the optional field `SubmittedTime`
      if (jsonObj.get("SubmittedTime") != null && !jsonObj.get("SubmittedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmittedTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `InputDataConfig`
      if (jsonObj.get("InputDataConfig") != null && !jsonObj.get("InputDataConfig").isJsonNull()) {
        TextTranslationJobPropertiesInputDataConfig.validateJsonElement(jsonObj.get("InputDataConfig"));
      }
      // validate the optional field `OutputDataConfig`
      if (jsonObj.get("OutputDataConfig") != null && !jsonObj.get("OutputDataConfig").isJsonNull()) {
        TextTranslationJobPropertiesOutputDataConfig.validateJsonElement(jsonObj.get("OutputDataConfig"));
      }
      // validate the optional field `DataAccessRoleArn`
      if (jsonObj.get("DataAccessRoleArn") != null && !jsonObj.get("DataAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataAccessRoleArn"));
      }
      // validate the optional field `Settings`
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        TextTranslationJobPropertiesSettings.validateJsonElement(jsonObj.get("Settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeTextTranslationJobResponseTextTranslationJobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeTextTranslationJobResponseTextTranslationJobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeTextTranslationJobResponseTextTranslationJobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeTextTranslationJobResponseTextTranslationJobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeTextTranslationJobResponseTextTranslationJobProperties>() {
           @Override
           public void write(JsonWriter out, DescribeTextTranslationJobResponseTextTranslationJobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeTextTranslationJobResponseTextTranslationJobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeTextTranslationJobResponseTextTranslationJobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeTextTranslationJobResponseTextTranslationJobProperties
   * @throws IOException if the JSON string is invalid with respect to DescribeTextTranslationJobResponseTextTranslationJobProperties
   */
  public static DescribeTextTranslationJobResponseTextTranslationJobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeTextTranslationJobResponseTextTranslationJobProperties.class);
  }

  /**
   * Convert an instance of DescribeTextTranslationJobResponseTextTranslationJobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

