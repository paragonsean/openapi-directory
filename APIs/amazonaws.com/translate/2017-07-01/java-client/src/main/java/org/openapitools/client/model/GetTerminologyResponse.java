/*
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetTerminologyResponseAuxiliaryDataLocation;
import org.openapitools.client.model.GetTerminologyResponseTerminologyDataLocation;
import org.openapitools.client.model.GetTerminologyResponseTerminologyProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTerminologyResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:41.006574-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTerminologyResponse {
  public static final String SERIALIZED_NAME_TERMINOLOGY_PROPERTIES = "TerminologyProperties";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY_PROPERTIES)
  private GetTerminologyResponseTerminologyProperties terminologyProperties;

  public static final String SERIALIZED_NAME_TERMINOLOGY_DATA_LOCATION = "TerminologyDataLocation";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY_DATA_LOCATION)
  private GetTerminologyResponseTerminologyDataLocation terminologyDataLocation;

  public static final String SERIALIZED_NAME_AUXILIARY_DATA_LOCATION = "AuxiliaryDataLocation";
  @SerializedName(SERIALIZED_NAME_AUXILIARY_DATA_LOCATION)
  private GetTerminologyResponseAuxiliaryDataLocation auxiliaryDataLocation;

  public GetTerminologyResponse() {
  }

  public GetTerminologyResponse terminologyProperties(GetTerminologyResponseTerminologyProperties terminologyProperties) {
    this.terminologyProperties = terminologyProperties;
    return this;
  }

  /**
   * Get terminologyProperties
   * @return terminologyProperties
   */
  @javax.annotation.Nullable
  public GetTerminologyResponseTerminologyProperties getTerminologyProperties() {
    return terminologyProperties;
  }

  public void setTerminologyProperties(GetTerminologyResponseTerminologyProperties terminologyProperties) {
    this.terminologyProperties = terminologyProperties;
  }


  public GetTerminologyResponse terminologyDataLocation(GetTerminologyResponseTerminologyDataLocation terminologyDataLocation) {
    this.terminologyDataLocation = terminologyDataLocation;
    return this;
  }

  /**
   * Get terminologyDataLocation
   * @return terminologyDataLocation
   */
  @javax.annotation.Nullable
  public GetTerminologyResponseTerminologyDataLocation getTerminologyDataLocation() {
    return terminologyDataLocation;
  }

  public void setTerminologyDataLocation(GetTerminologyResponseTerminologyDataLocation terminologyDataLocation) {
    this.terminologyDataLocation = terminologyDataLocation;
  }


  public GetTerminologyResponse auxiliaryDataLocation(GetTerminologyResponseAuxiliaryDataLocation auxiliaryDataLocation) {
    this.auxiliaryDataLocation = auxiliaryDataLocation;
    return this;
  }

  /**
   * Get auxiliaryDataLocation
   * @return auxiliaryDataLocation
   */
  @javax.annotation.Nullable
  public GetTerminologyResponseAuxiliaryDataLocation getAuxiliaryDataLocation() {
    return auxiliaryDataLocation;
  }

  public void setAuxiliaryDataLocation(GetTerminologyResponseAuxiliaryDataLocation auxiliaryDataLocation) {
    this.auxiliaryDataLocation = auxiliaryDataLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTerminologyResponse getTerminologyResponse = (GetTerminologyResponse) o;
    return Objects.equals(this.terminologyProperties, getTerminologyResponse.terminologyProperties) &&
        Objects.equals(this.terminologyDataLocation, getTerminologyResponse.terminologyDataLocation) &&
        Objects.equals(this.auxiliaryDataLocation, getTerminologyResponse.auxiliaryDataLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(terminologyProperties, terminologyDataLocation, auxiliaryDataLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTerminologyResponse {\n");
    sb.append("    terminologyProperties: ").append(toIndentedString(terminologyProperties)).append("\n");
    sb.append("    terminologyDataLocation: ").append(toIndentedString(terminologyDataLocation)).append("\n");
    sb.append("    auxiliaryDataLocation: ").append(toIndentedString(auxiliaryDataLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TerminologyProperties");
    openapiFields.add("TerminologyDataLocation");
    openapiFields.add("AuxiliaryDataLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTerminologyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTerminologyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTerminologyResponse is not found in the empty JSON string", GetTerminologyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTerminologyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTerminologyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TerminologyProperties`
      if (jsonObj.get("TerminologyProperties") != null && !jsonObj.get("TerminologyProperties").isJsonNull()) {
        GetTerminologyResponseTerminologyProperties.validateJsonElement(jsonObj.get("TerminologyProperties"));
      }
      // validate the optional field `TerminologyDataLocation`
      if (jsonObj.get("TerminologyDataLocation") != null && !jsonObj.get("TerminologyDataLocation").isJsonNull()) {
        GetTerminologyResponseTerminologyDataLocation.validateJsonElement(jsonObj.get("TerminologyDataLocation"));
      }
      // validate the optional field `AuxiliaryDataLocation`
      if (jsonObj.get("AuxiliaryDataLocation") != null && !jsonObj.get("AuxiliaryDataLocation").isJsonNull()) {
        GetTerminologyResponseAuxiliaryDataLocation.validateJsonElement(jsonObj.get("AuxiliaryDataLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTerminologyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTerminologyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTerminologyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTerminologyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTerminologyResponse>() {
           @Override
           public void write(JsonWriter out, GetTerminologyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTerminologyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTerminologyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTerminologyResponse
   * @throws IOException if the JSON string is invalid with respect to GetTerminologyResponse
   */
  public static GetTerminologyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTerminologyResponse.class);
  }

  /**
   * Convert an instance of GetTerminologyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

