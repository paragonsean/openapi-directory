/*
 * Amazon Translate
 * Provides translation of the input content from the source language to the target language.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StartTextTranslationJobRequestInputDataConfig;
import org.openapitools.client.model.StartTextTranslationJobRequestOutputDataConfig;
import org.openapitools.client.model.StartTextTranslationJobRequestSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartTextTranslationJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:41.006574-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartTextTranslationJobRequest {
  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_INPUT_DATA_CONFIG = "InputDataConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA_CONFIG)
  private StartTextTranslationJobRequestInputDataConfig inputDataConfig;

  public static final String SERIALIZED_NAME_OUTPUT_DATA_CONFIG = "OutputDataConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DATA_CONFIG)
  private StartTextTranslationJobRequestOutputDataConfig outputDataConfig;

  public static final String SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN = "DataAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN)
  private String dataAccessRoleArn;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE_CODE = "SourceLanguageCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE_CODE)
  private String sourceLanguageCode;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGE_CODES = "TargetLanguageCodes";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGE_CODES)
  private List targetLanguageCodes;

  public static final String SERIALIZED_NAME_TERMINOLOGY_NAMES = "TerminologyNames";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY_NAMES)
  private List terminologyNames;

  public static final String SERIALIZED_NAME_PARALLEL_DATA_NAMES = "ParallelDataNames";
  @SerializedName(SERIALIZED_NAME_PARALLEL_DATA_NAMES)
  private List parallelDataNames;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private StartTextTranslationJobRequestSettings settings;

  public StartTextTranslationJobRequest() {
  }

  public StartTextTranslationJobRequest jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public StartTextTranslationJobRequest inputDataConfig(StartTextTranslationJobRequestInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
    return this;
  }

  /**
   * Get inputDataConfig
   * @return inputDataConfig
   */
  @javax.annotation.Nonnull
  public StartTextTranslationJobRequestInputDataConfig getInputDataConfig() {
    return inputDataConfig;
  }

  public void setInputDataConfig(StartTextTranslationJobRequestInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
  }


  public StartTextTranslationJobRequest outputDataConfig(StartTextTranslationJobRequestOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
    return this;
  }

  /**
   * Get outputDataConfig
   * @return outputDataConfig
   */
  @javax.annotation.Nonnull
  public StartTextTranslationJobRequestOutputDataConfig getOutputDataConfig() {
    return outputDataConfig;
  }

  public void setOutputDataConfig(StartTextTranslationJobRequestOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
  }


  public StartTextTranslationJobRequest dataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
    return this;
  }

  /**
   * Get dataAccessRoleArn
   * @return dataAccessRoleArn
   */
  @javax.annotation.Nonnull
  public String getDataAccessRoleArn() {
    return dataAccessRoleArn;
  }

  public void setDataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
  }


  public StartTextTranslationJobRequest sourceLanguageCode(String sourceLanguageCode) {
    this.sourceLanguageCode = sourceLanguageCode;
    return this;
  }

  /**
   * Get sourceLanguageCode
   * @return sourceLanguageCode
   */
  @javax.annotation.Nonnull
  public String getSourceLanguageCode() {
    return sourceLanguageCode;
  }

  public void setSourceLanguageCode(String sourceLanguageCode) {
    this.sourceLanguageCode = sourceLanguageCode;
  }


  public StartTextTranslationJobRequest targetLanguageCodes(List targetLanguageCodes) {
    this.targetLanguageCodes = targetLanguageCodes;
    return this;
  }

  /**
   * Get targetLanguageCodes
   * @return targetLanguageCodes
   */
  @javax.annotation.Nonnull
  public List getTargetLanguageCodes() {
    return targetLanguageCodes;
  }

  public void setTargetLanguageCodes(List targetLanguageCodes) {
    this.targetLanguageCodes = targetLanguageCodes;
  }


  public StartTextTranslationJobRequest terminologyNames(List terminologyNames) {
    this.terminologyNames = terminologyNames;
    return this;
  }

  /**
   * Get terminologyNames
   * @return terminologyNames
   */
  @javax.annotation.Nullable
  public List getTerminologyNames() {
    return terminologyNames;
  }

  public void setTerminologyNames(List terminologyNames) {
    this.terminologyNames = terminologyNames;
  }


  public StartTextTranslationJobRequest parallelDataNames(List parallelDataNames) {
    this.parallelDataNames = parallelDataNames;
    return this;
  }

  /**
   * Get parallelDataNames
   * @return parallelDataNames
   */
  @javax.annotation.Nullable
  public List getParallelDataNames() {
    return parallelDataNames;
  }

  public void setParallelDataNames(List parallelDataNames) {
    this.parallelDataNames = parallelDataNames;
  }


  public StartTextTranslationJobRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public StartTextTranslationJobRequest settings(StartTextTranslationJobRequestSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public StartTextTranslationJobRequestSettings getSettings() {
    return settings;
  }

  public void setSettings(StartTextTranslationJobRequestSettings settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTextTranslationJobRequest startTextTranslationJobRequest = (StartTextTranslationJobRequest) o;
    return Objects.equals(this.jobName, startTextTranslationJobRequest.jobName) &&
        Objects.equals(this.inputDataConfig, startTextTranslationJobRequest.inputDataConfig) &&
        Objects.equals(this.outputDataConfig, startTextTranslationJobRequest.outputDataConfig) &&
        Objects.equals(this.dataAccessRoleArn, startTextTranslationJobRequest.dataAccessRoleArn) &&
        Objects.equals(this.sourceLanguageCode, startTextTranslationJobRequest.sourceLanguageCode) &&
        Objects.equals(this.targetLanguageCodes, startTextTranslationJobRequest.targetLanguageCodes) &&
        Objects.equals(this.terminologyNames, startTextTranslationJobRequest.terminologyNames) &&
        Objects.equals(this.parallelDataNames, startTextTranslationJobRequest.parallelDataNames) &&
        Objects.equals(this.clientToken, startTextTranslationJobRequest.clientToken) &&
        Objects.equals(this.settings, startTextTranslationJobRequest.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobName, inputDataConfig, outputDataConfig, dataAccessRoleArn, sourceLanguageCode, targetLanguageCodes, terminologyNames, parallelDataNames, clientToken, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTextTranslationJobRequest {\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    inputDataConfig: ").append(toIndentedString(inputDataConfig)).append("\n");
    sb.append("    outputDataConfig: ").append(toIndentedString(outputDataConfig)).append("\n");
    sb.append("    dataAccessRoleArn: ").append(toIndentedString(dataAccessRoleArn)).append("\n");
    sb.append("    sourceLanguageCode: ").append(toIndentedString(sourceLanguageCode)).append("\n");
    sb.append("    targetLanguageCodes: ").append(toIndentedString(targetLanguageCodes)).append("\n");
    sb.append("    terminologyNames: ").append(toIndentedString(terminologyNames)).append("\n");
    sb.append("    parallelDataNames: ").append(toIndentedString(parallelDataNames)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobName");
    openapiFields.add("InputDataConfig");
    openapiFields.add("OutputDataConfig");
    openapiFields.add("DataAccessRoleArn");
    openapiFields.add("SourceLanguageCode");
    openapiFields.add("TargetLanguageCodes");
    openapiFields.add("TerminologyNames");
    openapiFields.add("ParallelDataNames");
    openapiFields.add("ClientToken");
    openapiFields.add("Settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InputDataConfig");
    openapiRequiredFields.add("OutputDataConfig");
    openapiRequiredFields.add("DataAccessRoleArn");
    openapiRequiredFields.add("SourceLanguageCode");
    openapiRequiredFields.add("TargetLanguageCodes");
    openapiRequiredFields.add("ClientToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartTextTranslationJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartTextTranslationJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartTextTranslationJobRequest is not found in the empty JSON string", StartTextTranslationJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartTextTranslationJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartTextTranslationJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartTextTranslationJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the required field `InputDataConfig`
      StartTextTranslationJobRequestInputDataConfig.validateJsonElement(jsonObj.get("InputDataConfig"));
      // validate the required field `OutputDataConfig`
      StartTextTranslationJobRequestOutputDataConfig.validateJsonElement(jsonObj.get("OutputDataConfig"));
      // validate the required field `DataAccessRoleArn`
      String.validateJsonElement(jsonObj.get("DataAccessRoleArn"));
      // validate the required field `SourceLanguageCode`
      String.validateJsonElement(jsonObj.get("SourceLanguageCode"));
      // validate the required field `TargetLanguageCodes`
      List.validateJsonElement(jsonObj.get("TargetLanguageCodes"));
      // validate the optional field `TerminologyNames`
      if (jsonObj.get("TerminologyNames") != null && !jsonObj.get("TerminologyNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TerminologyNames"));
      }
      // validate the optional field `ParallelDataNames`
      if (jsonObj.get("ParallelDataNames") != null && !jsonObj.get("ParallelDataNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ParallelDataNames"));
      }
      // validate the required field `ClientToken`
      String.validateJsonElement(jsonObj.get("ClientToken"));
      // validate the optional field `Settings`
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        StartTextTranslationJobRequestSettings.validateJsonElement(jsonObj.get("Settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartTextTranslationJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartTextTranslationJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartTextTranslationJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartTextTranslationJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartTextTranslationJobRequest>() {
           @Override
           public void write(JsonWriter out, StartTextTranslationJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartTextTranslationJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartTextTranslationJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartTextTranslationJobRequest
   * @throws IOException if the JSON string is invalid with respect to StartTextTranslationJobRequest
   */
  public static StartTextTranslationJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartTextTranslationJobRequest.class);
  }

  /**
   * Convert an instance of StartTextTranslationJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

