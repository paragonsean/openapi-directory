/**
 * Amazon CloudHSM
 * <fullname>AWS CloudHSM Service</fullname> <p>This is documentation for <b>AWS CloudHSM Classic</b>. For more information, see <a href=\"http://aws.amazon.com/cloudhsm/faqs-classic/\">AWS CloudHSM Classic FAQs</a>, the <a href=\"https://docs.aws.amazon.com/cloudhsm/classic/userguide/\">AWS CloudHSM Classic User Guide</a>, and the <a href=\"https://docs.aws.amazon.com/cloudhsm/classic/APIReference/\">AWS CloudHSM Classic API Reference</a>.</p> <p> <b>For information about the current version of AWS CloudHSM</b>, see <a href=\"http://aws.amazon.com/cloudhsm/\">AWS CloudHSM</a>, the <a href=\"https://docs.aws.amazon.com/cloudhsm/latest/userguide/\">AWS CloudHSM User Guide</a>, and the <a href=\"https://docs.aws.amazon.com/cloudhsm/latest/APIReference/\">AWS CloudHSM API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2014-05-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeHsmResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeHsmResponse::OAIDescribeHsmResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeHsmResponse::OAIDescribeHsmResponse() {
    this->initializeModel();
}

OAIDescribeHsmResponse::~OAIDescribeHsmResponse() {}

void OAIDescribeHsmResponse::initializeModel() {

    m_hsm_arn_isSet = false;
    m_hsm_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_eni_id_isSet = false;
    m_eni_id_isValid = false;

    m_eni_ip_isSet = false;
    m_eni_ip_isValid = false;

    m_subscription_type_isSet = false;
    m_subscription_type_isValid = false;

    m_subscription_start_date_isSet = false;
    m_subscription_start_date_isValid = false;

    m_subscription_end_date_isSet = false;
    m_subscription_end_date_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_vendor_name_isSet = false;
    m_vendor_name_isValid = false;

    m_hsm_type_isSet = false;
    m_hsm_type_isValid = false;

    m_software_version_isSet = false;
    m_software_version_isValid = false;

    m_ssh_public_key_isSet = false;
    m_ssh_public_key_isValid = false;

    m_ssh_key_last_updated_isSet = false;
    m_ssh_key_last_updated_isValid = false;

    m_server_cert_uri_isSet = false;
    m_server_cert_uri_isValid = false;

    m_server_cert_last_updated_isSet = false;
    m_server_cert_last_updated_isValid = false;

    m_partitions_isSet = false;
    m_partitions_isValid = false;
}

void OAIDescribeHsmResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeHsmResponse::fromJsonObject(QJsonObject json) {

    m_hsm_arn_isValid = ::OpenAPI::fromJsonValue(m_hsm_arn, json[QString("HsmArn")]);
    m_hsm_arn_isSet = !json[QString("HsmArn")].isNull() && m_hsm_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("StatusDetails")]);
    m_status_details_isSet = !json[QString("StatusDetails")].isNull() && m_status_details_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_eni_id_isValid = ::OpenAPI::fromJsonValue(m_eni_id, json[QString("EniId")]);
    m_eni_id_isSet = !json[QString("EniId")].isNull() && m_eni_id_isValid;

    m_eni_ip_isValid = ::OpenAPI::fromJsonValue(m_eni_ip, json[QString("EniIp")]);
    m_eni_ip_isSet = !json[QString("EniIp")].isNull() && m_eni_ip_isValid;

    m_subscription_type_isValid = ::OpenAPI::fromJsonValue(m_subscription_type, json[QString("SubscriptionType")]);
    m_subscription_type_isSet = !json[QString("SubscriptionType")].isNull() && m_subscription_type_isValid;

    m_subscription_start_date_isValid = ::OpenAPI::fromJsonValue(m_subscription_start_date, json[QString("SubscriptionStartDate")]);
    m_subscription_start_date_isSet = !json[QString("SubscriptionStartDate")].isNull() && m_subscription_start_date_isValid;

    m_subscription_end_date_isValid = ::OpenAPI::fromJsonValue(m_subscription_end_date, json[QString("SubscriptionEndDate")]);
    m_subscription_end_date_isSet = !json[QString("SubscriptionEndDate")].isNull() && m_subscription_end_date_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("SerialNumber")]);
    m_serial_number_isSet = !json[QString("SerialNumber")].isNull() && m_serial_number_isValid;

    m_vendor_name_isValid = ::OpenAPI::fromJsonValue(m_vendor_name, json[QString("VendorName")]);
    m_vendor_name_isSet = !json[QString("VendorName")].isNull() && m_vendor_name_isValid;

    m_hsm_type_isValid = ::OpenAPI::fromJsonValue(m_hsm_type, json[QString("HsmType")]);
    m_hsm_type_isSet = !json[QString("HsmType")].isNull() && m_hsm_type_isValid;

    m_software_version_isValid = ::OpenAPI::fromJsonValue(m_software_version, json[QString("SoftwareVersion")]);
    m_software_version_isSet = !json[QString("SoftwareVersion")].isNull() && m_software_version_isValid;

    m_ssh_public_key_isValid = ::OpenAPI::fromJsonValue(m_ssh_public_key, json[QString("SshPublicKey")]);
    m_ssh_public_key_isSet = !json[QString("SshPublicKey")].isNull() && m_ssh_public_key_isValid;

    m_ssh_key_last_updated_isValid = ::OpenAPI::fromJsonValue(m_ssh_key_last_updated, json[QString("SshKeyLastUpdated")]);
    m_ssh_key_last_updated_isSet = !json[QString("SshKeyLastUpdated")].isNull() && m_ssh_key_last_updated_isValid;

    m_server_cert_uri_isValid = ::OpenAPI::fromJsonValue(m_server_cert_uri, json[QString("ServerCertUri")]);
    m_server_cert_uri_isSet = !json[QString("ServerCertUri")].isNull() && m_server_cert_uri_isValid;

    m_server_cert_last_updated_isValid = ::OpenAPI::fromJsonValue(m_server_cert_last_updated, json[QString("ServerCertLastUpdated")]);
    m_server_cert_last_updated_isSet = !json[QString("ServerCertLastUpdated")].isNull() && m_server_cert_last_updated_isValid;

    m_partitions_isValid = ::OpenAPI::fromJsonValue(m_partitions, json[QString("Partitions")]);
    m_partitions_isSet = !json[QString("Partitions")].isNull() && m_partitions_isValid;
}

QString OAIDescribeHsmResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeHsmResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_hsm_arn_isSet) {
        obj.insert(QString("HsmArn"), ::OpenAPI::toJsonValue(m_hsm_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("StatusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_eni_id_isSet) {
        obj.insert(QString("EniId"), ::OpenAPI::toJsonValue(m_eni_id));
    }
    if (m_eni_ip_isSet) {
        obj.insert(QString("EniIp"), ::OpenAPI::toJsonValue(m_eni_ip));
    }
    if (m_subscription_type.isSet()) {
        obj.insert(QString("SubscriptionType"), ::OpenAPI::toJsonValue(m_subscription_type));
    }
    if (m_subscription_start_date_isSet) {
        obj.insert(QString("SubscriptionStartDate"), ::OpenAPI::toJsonValue(m_subscription_start_date));
    }
    if (m_subscription_end_date_isSet) {
        obj.insert(QString("SubscriptionEndDate"), ::OpenAPI::toJsonValue(m_subscription_end_date));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("SerialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_vendor_name_isSet) {
        obj.insert(QString("VendorName"), ::OpenAPI::toJsonValue(m_vendor_name));
    }
    if (m_hsm_type_isSet) {
        obj.insert(QString("HsmType"), ::OpenAPI::toJsonValue(m_hsm_type));
    }
    if (m_software_version_isSet) {
        obj.insert(QString("SoftwareVersion"), ::OpenAPI::toJsonValue(m_software_version));
    }
    if (m_ssh_public_key_isSet) {
        obj.insert(QString("SshPublicKey"), ::OpenAPI::toJsonValue(m_ssh_public_key));
    }
    if (m_ssh_key_last_updated_isSet) {
        obj.insert(QString("SshKeyLastUpdated"), ::OpenAPI::toJsonValue(m_ssh_key_last_updated));
    }
    if (m_server_cert_uri_isSet) {
        obj.insert(QString("ServerCertUri"), ::OpenAPI::toJsonValue(m_server_cert_uri));
    }
    if (m_server_cert_last_updated_isSet) {
        obj.insert(QString("ServerCertLastUpdated"), ::OpenAPI::toJsonValue(m_server_cert_last_updated));
    }
    if (m_partitions.isSet()) {
        obj.insert(QString("Partitions"), ::OpenAPI::toJsonValue(m_partitions));
    }
    return obj;
}

QString OAIDescribeHsmResponse::getHsmArn() const {
    return m_hsm_arn;
}
void OAIDescribeHsmResponse::setHsmArn(const QString &hsm_arn) {
    m_hsm_arn = hsm_arn;
    m_hsm_arn_isSet = true;
}

bool OAIDescribeHsmResponse::is_hsm_arn_Set() const{
    return m_hsm_arn_isSet;
}

bool OAIDescribeHsmResponse::is_hsm_arn_Valid() const{
    return m_hsm_arn_isValid;
}

OAIHsmStatus OAIDescribeHsmResponse::getStatus() const {
    return m_status;
}
void OAIDescribeHsmResponse::setStatus(const OAIHsmStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeHsmResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeHsmResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeHsmResponse::getStatusDetails() const {
    return m_status_details;
}
void OAIDescribeHsmResponse::setStatusDetails(const QString &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIDescribeHsmResponse::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIDescribeHsmResponse::is_status_details_Valid() const{
    return m_status_details_isValid;
}

QString OAIDescribeHsmResponse::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIDescribeHsmResponse::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIDescribeHsmResponse::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIDescribeHsmResponse::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAIDescribeHsmResponse::getEniId() const {
    return m_eni_id;
}
void OAIDescribeHsmResponse::setEniId(const QString &eni_id) {
    m_eni_id = eni_id;
    m_eni_id_isSet = true;
}

bool OAIDescribeHsmResponse::is_eni_id_Set() const{
    return m_eni_id_isSet;
}

bool OAIDescribeHsmResponse::is_eni_id_Valid() const{
    return m_eni_id_isValid;
}

QString OAIDescribeHsmResponse::getEniIp() const {
    return m_eni_ip;
}
void OAIDescribeHsmResponse::setEniIp(const QString &eni_ip) {
    m_eni_ip = eni_ip;
    m_eni_ip_isSet = true;
}

bool OAIDescribeHsmResponse::is_eni_ip_Set() const{
    return m_eni_ip_isSet;
}

bool OAIDescribeHsmResponse::is_eni_ip_Valid() const{
    return m_eni_ip_isValid;
}

OAISubscriptionType OAIDescribeHsmResponse::getSubscriptionType() const {
    return m_subscription_type;
}
void OAIDescribeHsmResponse::setSubscriptionType(const OAISubscriptionType &subscription_type) {
    m_subscription_type = subscription_type;
    m_subscription_type_isSet = true;
}

bool OAIDescribeHsmResponse::is_subscription_type_Set() const{
    return m_subscription_type_isSet;
}

bool OAIDescribeHsmResponse::is_subscription_type_Valid() const{
    return m_subscription_type_isValid;
}

QString OAIDescribeHsmResponse::getSubscriptionStartDate() const {
    return m_subscription_start_date;
}
void OAIDescribeHsmResponse::setSubscriptionStartDate(const QString &subscription_start_date) {
    m_subscription_start_date = subscription_start_date;
    m_subscription_start_date_isSet = true;
}

bool OAIDescribeHsmResponse::is_subscription_start_date_Set() const{
    return m_subscription_start_date_isSet;
}

bool OAIDescribeHsmResponse::is_subscription_start_date_Valid() const{
    return m_subscription_start_date_isValid;
}

QString OAIDescribeHsmResponse::getSubscriptionEndDate() const {
    return m_subscription_end_date;
}
void OAIDescribeHsmResponse::setSubscriptionEndDate(const QString &subscription_end_date) {
    m_subscription_end_date = subscription_end_date;
    m_subscription_end_date_isSet = true;
}

bool OAIDescribeHsmResponse::is_subscription_end_date_Set() const{
    return m_subscription_end_date_isSet;
}

bool OAIDescribeHsmResponse::is_subscription_end_date_Valid() const{
    return m_subscription_end_date_isValid;
}

QString OAIDescribeHsmResponse::getVpcId() const {
    return m_vpc_id;
}
void OAIDescribeHsmResponse::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIDescribeHsmResponse::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIDescribeHsmResponse::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QString OAIDescribeHsmResponse::getSubnetId() const {
    return m_subnet_id;
}
void OAIDescribeHsmResponse::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIDescribeHsmResponse::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIDescribeHsmResponse::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAIDescribeHsmResponse::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIDescribeHsmResponse::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIDescribeHsmResponse::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIDescribeHsmResponse::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

QString OAIDescribeHsmResponse::getSerialNumber() const {
    return m_serial_number;
}
void OAIDescribeHsmResponse::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDescribeHsmResponse::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDescribeHsmResponse::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIDescribeHsmResponse::getVendorName() const {
    return m_vendor_name;
}
void OAIDescribeHsmResponse::setVendorName(const QString &vendor_name) {
    m_vendor_name = vendor_name;
    m_vendor_name_isSet = true;
}

bool OAIDescribeHsmResponse::is_vendor_name_Set() const{
    return m_vendor_name_isSet;
}

bool OAIDescribeHsmResponse::is_vendor_name_Valid() const{
    return m_vendor_name_isValid;
}

QString OAIDescribeHsmResponse::getHsmType() const {
    return m_hsm_type;
}
void OAIDescribeHsmResponse::setHsmType(const QString &hsm_type) {
    m_hsm_type = hsm_type;
    m_hsm_type_isSet = true;
}

bool OAIDescribeHsmResponse::is_hsm_type_Set() const{
    return m_hsm_type_isSet;
}

bool OAIDescribeHsmResponse::is_hsm_type_Valid() const{
    return m_hsm_type_isValid;
}

QString OAIDescribeHsmResponse::getSoftwareVersion() const {
    return m_software_version;
}
void OAIDescribeHsmResponse::setSoftwareVersion(const QString &software_version) {
    m_software_version = software_version;
    m_software_version_isSet = true;
}

bool OAIDescribeHsmResponse::is_software_version_Set() const{
    return m_software_version_isSet;
}

bool OAIDescribeHsmResponse::is_software_version_Valid() const{
    return m_software_version_isValid;
}

QString OAIDescribeHsmResponse::getSshPublicKey() const {
    return m_ssh_public_key;
}
void OAIDescribeHsmResponse::setSshPublicKey(const QString &ssh_public_key) {
    m_ssh_public_key = ssh_public_key;
    m_ssh_public_key_isSet = true;
}

bool OAIDescribeHsmResponse::is_ssh_public_key_Set() const{
    return m_ssh_public_key_isSet;
}

bool OAIDescribeHsmResponse::is_ssh_public_key_Valid() const{
    return m_ssh_public_key_isValid;
}

QString OAIDescribeHsmResponse::getSshKeyLastUpdated() const {
    return m_ssh_key_last_updated;
}
void OAIDescribeHsmResponse::setSshKeyLastUpdated(const QString &ssh_key_last_updated) {
    m_ssh_key_last_updated = ssh_key_last_updated;
    m_ssh_key_last_updated_isSet = true;
}

bool OAIDescribeHsmResponse::is_ssh_key_last_updated_Set() const{
    return m_ssh_key_last_updated_isSet;
}

bool OAIDescribeHsmResponse::is_ssh_key_last_updated_Valid() const{
    return m_ssh_key_last_updated_isValid;
}

QString OAIDescribeHsmResponse::getServerCertUri() const {
    return m_server_cert_uri;
}
void OAIDescribeHsmResponse::setServerCertUri(const QString &server_cert_uri) {
    m_server_cert_uri = server_cert_uri;
    m_server_cert_uri_isSet = true;
}

bool OAIDescribeHsmResponse::is_server_cert_uri_Set() const{
    return m_server_cert_uri_isSet;
}

bool OAIDescribeHsmResponse::is_server_cert_uri_Valid() const{
    return m_server_cert_uri_isValid;
}

QString OAIDescribeHsmResponse::getServerCertLastUpdated() const {
    return m_server_cert_last_updated;
}
void OAIDescribeHsmResponse::setServerCertLastUpdated(const QString &server_cert_last_updated) {
    m_server_cert_last_updated = server_cert_last_updated;
    m_server_cert_last_updated_isSet = true;
}

bool OAIDescribeHsmResponse::is_server_cert_last_updated_Set() const{
    return m_server_cert_last_updated_isSet;
}

bool OAIDescribeHsmResponse::is_server_cert_last_updated_Valid() const{
    return m_server_cert_last_updated_isValid;
}

QList OAIDescribeHsmResponse::getPartitions() const {
    return m_partitions;
}
void OAIDescribeHsmResponse::setPartitions(const QList &partitions) {
    m_partitions = partitions;
    m_partitions_isSet = true;
}

bool OAIDescribeHsmResponse::is_partitions_Set() const{
    return m_partitions_isSet;
}

bool OAIDescribeHsmResponse::is_partitions_Valid() const{
    return m_partitions_isValid;
}

bool OAIDescribeHsmResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hsm_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eni_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eni_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_key_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_cert_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_cert_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partitions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeHsmResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
