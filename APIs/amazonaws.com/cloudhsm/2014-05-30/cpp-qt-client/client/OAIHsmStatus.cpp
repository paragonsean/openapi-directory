/**
 * Amazon CloudHSM
 * <fullname>AWS CloudHSM Service</fullname> <p>This is documentation for <b>AWS CloudHSM Classic</b>. For more information, see <a href=\"http://aws.amazon.com/cloudhsm/faqs-classic/\">AWS CloudHSM Classic FAQs</a>, the <a href=\"https://docs.aws.amazon.com/cloudhsm/classic/userguide/\">AWS CloudHSM Classic User Guide</a>, and the <a href=\"https://docs.aws.amazon.com/cloudhsm/classic/APIReference/\">AWS CloudHSM Classic API Reference</a>.</p> <p> <b>For information about the current version of AWS CloudHSM</b>, see <a href=\"http://aws.amazon.com/cloudhsm/\">AWS CloudHSM</a>, the <a href=\"https://docs.aws.amazon.com/cloudhsm/latest/userguide/\">AWS CloudHSM User Guide</a>, and the <a href=\"https://docs.aws.amazon.com/cloudhsm/latest/APIReference/\">AWS CloudHSM API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2014-05-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHsmStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHsmStatus::OAIHsmStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHsmStatus::OAIHsmStatus() {
    this->initializeModel();
}

OAIHsmStatus::~OAIHsmStatus() {}

void OAIHsmStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIHsmStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIHsmStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHsmStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHsmStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHsmStatus::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUSPENDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHsmStatus::SUSPENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERMINATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHsmStatus::TERMINATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERMINATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHsmStatus::TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEGRADED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHsmStatus::DEGRADED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIHsmStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIHsmStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIHsmStatus::PENDING:
            val = "PENDING";
            break;
        case eOAIHsmStatus::RUNNING:
            val = "RUNNING";
            break;
        case eOAIHsmStatus::UPDATING:
            val = "UPDATING";
            break;
        case eOAIHsmStatus::SUSPENDED:
            val = "SUSPENDED";
            break;
        case eOAIHsmStatus::TERMINATING:
            val = "TERMINATING";
            break;
        case eOAIHsmStatus::TERMINATED:
            val = "TERMINATED";
            break;
        case eOAIHsmStatus::DEGRADED:
            val = "DEGRADED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIHsmStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIHsmStatus::eOAIHsmStatus OAIHsmStatus::getValue() const {
    return m_value;
}

void OAIHsmStatus::setValue(const OAIHsmStatus::eOAIHsmStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIHsmStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIHsmStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
