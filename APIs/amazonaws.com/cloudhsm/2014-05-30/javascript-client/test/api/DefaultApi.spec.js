/**
 * Amazon CloudHSM
 * <fullname>AWS CloudHSM Service</fullname> <p>This is documentation for <b>AWS CloudHSM Classic</b>. For more information, see <a href=\"http://aws.amazon.com/cloudhsm/faqs-classic/\">AWS CloudHSM Classic FAQs</a>, the <a href=\"https://docs.aws.amazon.com/cloudhsm/classic/userguide/\">AWS CloudHSM Classic User Guide</a>, and the <a href=\"https://docs.aws.amazon.com/cloudhsm/classic/APIReference/\">AWS CloudHSM Classic API Reference</a>.</p> <p> <b>For information about the current version of AWS CloudHSM</b>, see <a href=\"http://aws.amazon.com/cloudhsm/\">AWS CloudHSM</a>, the <a href=\"https://docs.aws.amazon.com/cloudhsm/latest/userguide/\">AWS CloudHSM User Guide</a>, and the <a href=\"https://docs.aws.amazon.com/cloudhsm/latest/APIReference/\">AWS CloudHSM API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2014-05-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudHsm);
  }
}(this, function(expect, AmazonCloudHsm) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudHsm.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addTagsToResource', function() {
      it('should call addTagsToResource successfully', function(done) {
        //uncomment below and update the code to test addTagsToResource
        //instance.addTagsToResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createHapg', function() {
      it('should call createHapg successfully', function(done) {
        //uncomment below and update the code to test createHapg
        //instance.createHapg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createHsm', function() {
      it('should call createHsm successfully', function(done) {
        //uncomment below and update the code to test createHsm
        //instance.createHsm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLunaClient', function() {
      it('should call createLunaClient successfully', function(done) {
        //uncomment below and update the code to test createLunaClient
        //instance.createLunaClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHapg', function() {
      it('should call deleteHapg successfully', function(done) {
        //uncomment below and update the code to test deleteHapg
        //instance.deleteHapg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHsm', function() {
      it('should call deleteHsm successfully', function(done) {
        //uncomment below and update the code to test deleteHsm
        //instance.deleteHsm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLunaClient', function() {
      it('should call deleteLunaClient successfully', function(done) {
        //uncomment below and update the code to test deleteLunaClient
        //instance.deleteLunaClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeHapg', function() {
      it('should call describeHapg successfully', function(done) {
        //uncomment below and update the code to test describeHapg
        //instance.describeHapg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeHsm', function() {
      it('should call describeHsm successfully', function(done) {
        //uncomment below and update the code to test describeHsm
        //instance.describeHsm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLunaClient', function() {
      it('should call describeLunaClient successfully', function(done) {
        //uncomment below and update the code to test describeLunaClient
        //instance.describeLunaClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfig', function() {
      it('should call getConfig successfully', function(done) {
        //uncomment below and update the code to test getConfig
        //instance.getConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAvailableZones', function() {
      it('should call listAvailableZones successfully', function(done) {
        //uncomment below and update the code to test listAvailableZones
        //instance.listAvailableZones(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHapgs', function() {
      it('should call listHapgs successfully', function(done) {
        //uncomment below and update the code to test listHapgs
        //instance.listHapgs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHsms', function() {
      it('should call listHsms successfully', function(done) {
        //uncomment below and update the code to test listHsms
        //instance.listHsms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLunaClients', function() {
      it('should call listLunaClients successfully', function(done) {
        //uncomment below and update the code to test listLunaClients
        //instance.listLunaClients(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyHapg', function() {
      it('should call modifyHapg successfully', function(done) {
        //uncomment below and update the code to test modifyHapg
        //instance.modifyHapg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyHsm', function() {
      it('should call modifyHsm successfully', function(done) {
        //uncomment below and update the code to test modifyHsm
        //instance.modifyHsm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyLunaClient', function() {
      it('should call modifyLunaClient successfully', function(done) {
        //uncomment below and update the code to test modifyLunaClient
        //instance.modifyLunaClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTagsFromResource', function() {
      it('should call removeTagsFromResource successfully', function(done) {
        //uncomment below and update the code to test removeTagsFromResource
        //instance.removeTagsFromResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
