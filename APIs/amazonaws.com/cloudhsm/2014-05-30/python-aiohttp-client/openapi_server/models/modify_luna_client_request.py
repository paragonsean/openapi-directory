# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModifyLunaClientRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_arn: str=None, certificate: str=None):
        """ModifyLunaClientRequest - a model defined in OpenAPI

        :param client_arn: The client_arn of this ModifyLunaClientRequest.
        :param certificate: The certificate of this ModifyLunaClientRequest.
        """
        self.openapi_types = {
            'client_arn': str,
            'certificate': str
        }

        self.attribute_map = {
            'client_arn': 'ClientArn',
            'certificate': 'Certificate'
        }

        self._client_arn = client_arn
        self._certificate = certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifyLunaClientRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifyLunaClientRequest of this ModifyLunaClientRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_arn(self):
        """Gets the client_arn of this ModifyLunaClientRequest.


        :return: The client_arn of this ModifyLunaClientRequest.
        :rtype: str
        """
        return self._client_arn

    @client_arn.setter
    def client_arn(self, client_arn):
        """Sets the client_arn of this ModifyLunaClientRequest.


        :param client_arn: The client_arn of this ModifyLunaClientRequest.
        :type client_arn: str
        """
        if client_arn is None:
            raise ValueError("Invalid value for `client_arn`, must not be `None`")

        self._client_arn = client_arn

    @property
    def certificate(self):
        """Gets the certificate of this ModifyLunaClientRequest.


        :return: The certificate of this ModifyLunaClientRequest.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ModifyLunaClientRequest.


        :param certificate: The certificate of this ModifyLunaClientRequest.
        :type certificate: str
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate
