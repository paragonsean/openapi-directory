/*
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricsSummaryOpenFindings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetMetricsSummaryResponseMetricsSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:03.728816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetMetricsSummaryResponseMetricsSummary {
  public static final String SERIALIZED_NAME_CATEGORIES_WITH_MOST_FINDINGS = "categoriesWithMostFindings";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_WITH_MOST_FINDINGS)
  private List categoriesWithMostFindings;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_OPEN_FINDINGS = "openFindings";
  @SerializedName(SERIALIZED_NAME_OPEN_FINDINGS)
  private MetricsSummaryOpenFindings openFindings;

  public static final String SERIALIZED_NAME_SCANS_WITH_MOST_OPEN_CRITICAL_FINDINGS = "scansWithMostOpenCriticalFindings";
  @SerializedName(SERIALIZED_NAME_SCANS_WITH_MOST_OPEN_CRITICAL_FINDINGS)
  private List scansWithMostOpenCriticalFindings;

  public static final String SERIALIZED_NAME_SCANS_WITH_MOST_OPEN_FINDINGS = "scansWithMostOpenFindings";
  @SerializedName(SERIALIZED_NAME_SCANS_WITH_MOST_OPEN_FINDINGS)
  private List scansWithMostOpenFindings;

  public GetMetricsSummaryResponseMetricsSummary() {
  }

  public GetMetricsSummaryResponseMetricsSummary categoriesWithMostFindings(List categoriesWithMostFindings) {
    this.categoriesWithMostFindings = categoriesWithMostFindings;
    return this;
  }

  /**
   * Get categoriesWithMostFindings
   * @return categoriesWithMostFindings
   */
  @javax.annotation.Nullable
  public List getCategoriesWithMostFindings() {
    return categoriesWithMostFindings;
  }

  public void setCategoriesWithMostFindings(List categoriesWithMostFindings) {
    this.categoriesWithMostFindings = categoriesWithMostFindings;
  }


  public GetMetricsSummaryResponseMetricsSummary date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public GetMetricsSummaryResponseMetricsSummary openFindings(MetricsSummaryOpenFindings openFindings) {
    this.openFindings = openFindings;
    return this;
  }

  /**
   * Get openFindings
   * @return openFindings
   */
  @javax.annotation.Nullable
  public MetricsSummaryOpenFindings getOpenFindings() {
    return openFindings;
  }

  public void setOpenFindings(MetricsSummaryOpenFindings openFindings) {
    this.openFindings = openFindings;
  }


  public GetMetricsSummaryResponseMetricsSummary scansWithMostOpenCriticalFindings(List scansWithMostOpenCriticalFindings) {
    this.scansWithMostOpenCriticalFindings = scansWithMostOpenCriticalFindings;
    return this;
  }

  /**
   * Get scansWithMostOpenCriticalFindings
   * @return scansWithMostOpenCriticalFindings
   */
  @javax.annotation.Nullable
  public List getScansWithMostOpenCriticalFindings() {
    return scansWithMostOpenCriticalFindings;
  }

  public void setScansWithMostOpenCriticalFindings(List scansWithMostOpenCriticalFindings) {
    this.scansWithMostOpenCriticalFindings = scansWithMostOpenCriticalFindings;
  }


  public GetMetricsSummaryResponseMetricsSummary scansWithMostOpenFindings(List scansWithMostOpenFindings) {
    this.scansWithMostOpenFindings = scansWithMostOpenFindings;
    return this;
  }

  /**
   * Get scansWithMostOpenFindings
   * @return scansWithMostOpenFindings
   */
  @javax.annotation.Nullable
  public List getScansWithMostOpenFindings() {
    return scansWithMostOpenFindings;
  }

  public void setScansWithMostOpenFindings(List scansWithMostOpenFindings) {
    this.scansWithMostOpenFindings = scansWithMostOpenFindings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMetricsSummaryResponseMetricsSummary getMetricsSummaryResponseMetricsSummary = (GetMetricsSummaryResponseMetricsSummary) o;
    return Objects.equals(this.categoriesWithMostFindings, getMetricsSummaryResponseMetricsSummary.categoriesWithMostFindings) &&
        Objects.equals(this.date, getMetricsSummaryResponseMetricsSummary.date) &&
        Objects.equals(this.openFindings, getMetricsSummaryResponseMetricsSummary.openFindings) &&
        Objects.equals(this.scansWithMostOpenCriticalFindings, getMetricsSummaryResponseMetricsSummary.scansWithMostOpenCriticalFindings) &&
        Objects.equals(this.scansWithMostOpenFindings, getMetricsSummaryResponseMetricsSummary.scansWithMostOpenFindings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoriesWithMostFindings, date, openFindings, scansWithMostOpenCriticalFindings, scansWithMostOpenFindings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMetricsSummaryResponseMetricsSummary {\n");
    sb.append("    categoriesWithMostFindings: ").append(toIndentedString(categoriesWithMostFindings)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    openFindings: ").append(toIndentedString(openFindings)).append("\n");
    sb.append("    scansWithMostOpenCriticalFindings: ").append(toIndentedString(scansWithMostOpenCriticalFindings)).append("\n");
    sb.append("    scansWithMostOpenFindings: ").append(toIndentedString(scansWithMostOpenFindings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoriesWithMostFindings");
    openapiFields.add("date");
    openapiFields.add("openFindings");
    openapiFields.add("scansWithMostOpenCriticalFindings");
    openapiFields.add("scansWithMostOpenFindings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetMetricsSummaryResponseMetricsSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMetricsSummaryResponseMetricsSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMetricsSummaryResponseMetricsSummary is not found in the empty JSON string", GetMetricsSummaryResponseMetricsSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMetricsSummaryResponseMetricsSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMetricsSummaryResponseMetricsSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `categoriesWithMostFindings`
      if (jsonObj.get("categoriesWithMostFindings") != null && !jsonObj.get("categoriesWithMostFindings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("categoriesWithMostFindings"));
      }
      // validate the optional field `date`
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("date"));
      }
      // validate the optional field `openFindings`
      if (jsonObj.get("openFindings") != null && !jsonObj.get("openFindings").isJsonNull()) {
        MetricsSummaryOpenFindings.validateJsonElement(jsonObj.get("openFindings"));
      }
      // validate the optional field `scansWithMostOpenCriticalFindings`
      if (jsonObj.get("scansWithMostOpenCriticalFindings") != null && !jsonObj.get("scansWithMostOpenCriticalFindings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("scansWithMostOpenCriticalFindings"));
      }
      // validate the optional field `scansWithMostOpenFindings`
      if (jsonObj.get("scansWithMostOpenFindings") != null && !jsonObj.get("scansWithMostOpenFindings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("scansWithMostOpenFindings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMetricsSummaryResponseMetricsSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMetricsSummaryResponseMetricsSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMetricsSummaryResponseMetricsSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMetricsSummaryResponseMetricsSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMetricsSummaryResponseMetricsSummary>() {
           @Override
           public void write(JsonWriter out, GetMetricsSummaryResponseMetricsSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMetricsSummaryResponseMetricsSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetMetricsSummaryResponseMetricsSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetMetricsSummaryResponseMetricsSummary
   * @throws IOException if the JSON string is invalid with respect to GetMetricsSummaryResponseMetricsSummary
   */
  public static GetMetricsSummaryResponseMetricsSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMetricsSummaryResponseMetricsSummary.class);
  }

  /**
   * Convert an instance of GetMetricsSummaryResponseMetricsSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

