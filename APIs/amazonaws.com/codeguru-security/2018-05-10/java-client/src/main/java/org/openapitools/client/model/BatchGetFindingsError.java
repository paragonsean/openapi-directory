/*
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ErrorCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the error that caused a finding to fail to be retrieved.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:03.728816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchGetFindingsError {
  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private ErrorCode errorCode;

  public static final String SERIALIZED_NAME_FINDING_ID = "findingId";
  @SerializedName(SERIALIZED_NAME_FINDING_ID)
  private String findingId;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_SCAN_NAME = "scanName";
  @SerializedName(SERIALIZED_NAME_SCAN_NAME)
  private String scanName;

  public BatchGetFindingsError() {
  }

  public BatchGetFindingsError errorCode(ErrorCode errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nonnull
  public ErrorCode getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(ErrorCode errorCode) {
    this.errorCode = errorCode;
  }


  public BatchGetFindingsError findingId(String findingId) {
    this.findingId = findingId;
    return this;
  }

  /**
   * Get findingId
   * @return findingId
   */
  @javax.annotation.Nonnull
  public String getFindingId() {
    return findingId;
  }

  public void setFindingId(String findingId) {
    this.findingId = findingId;
  }


  public BatchGetFindingsError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public BatchGetFindingsError scanName(String scanName) {
    this.scanName = scanName;
    return this;
  }

  /**
   * Get scanName
   * @return scanName
   */
  @javax.annotation.Nonnull
  public String getScanName() {
    return scanName;
  }

  public void setScanName(String scanName) {
    this.scanName = scanName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetFindingsError batchGetFindingsError = (BatchGetFindingsError) o;
    return Objects.equals(this.errorCode, batchGetFindingsError.errorCode) &&
        Objects.equals(this.findingId, batchGetFindingsError.findingId) &&
        Objects.equals(this.message, batchGetFindingsError.message) &&
        Objects.equals(this.scanName, batchGetFindingsError.scanName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, findingId, message, scanName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetFindingsError {\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    findingId: ").append(toIndentedString(findingId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    scanName: ").append(toIndentedString(scanName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorCode");
    openapiFields.add("findingId");
    openapiFields.add("message");
    openapiFields.add("scanName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("errorCode");
    openapiRequiredFields.add("findingId");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("scanName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetFindingsError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetFindingsError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetFindingsError is not found in the empty JSON string", BatchGetFindingsError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetFindingsError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetFindingsError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchGetFindingsError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `errorCode`
      ErrorCode.validateJsonElement(jsonObj.get("errorCode"));
      // validate the required field `findingId`
      String.validateJsonElement(jsonObj.get("findingId"));
      // validate the required field `message`
      String.validateJsonElement(jsonObj.get("message"));
      // validate the required field `scanName`
      String.validateJsonElement(jsonObj.get("scanName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetFindingsError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetFindingsError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetFindingsError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetFindingsError.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetFindingsError>() {
           @Override
           public void write(JsonWriter out, BatchGetFindingsError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetFindingsError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetFindingsError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetFindingsError
   * @throws IOException if the JSON string is invalid with respect to BatchGetFindingsError
   */
  public static BatchGetFindingsError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetFindingsError.class);
  }

  /**
   * Convert an instance of BatchGetFindingsError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

