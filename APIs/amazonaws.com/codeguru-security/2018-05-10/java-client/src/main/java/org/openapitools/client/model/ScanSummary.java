/*
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ScanState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a scan. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:03.728816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScanSummary {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_RUN_ID = "runId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_SCAN_NAME = "scanName";
  @SerializedName(SERIALIZED_NAME_SCAN_NAME)
  private String scanName;

  public static final String SERIALIZED_NAME_SCAN_NAME_ARN = "scanNameArn";
  @SerializedName(SERIALIZED_NAME_SCAN_NAME_ARN)
  private String scanNameArn;

  public static final String SERIALIZED_NAME_SCAN_STATE = "scanState";
  @SerializedName(SERIALIZED_NAME_SCAN_STATE)
  private ScanState scanState;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public ScanSummary() {
  }

  public ScanSummary createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ScanSummary runId(String runId) {
    this.runId = runId;
    return this;
  }

  /**
   * Get runId
   * @return runId
   */
  @javax.annotation.Nonnull
  public String getRunId() {
    return runId;
  }

  public void setRunId(String runId) {
    this.runId = runId;
  }


  public ScanSummary scanName(String scanName) {
    this.scanName = scanName;
    return this;
  }

  /**
   * Get scanName
   * @return scanName
   */
  @javax.annotation.Nonnull
  public String getScanName() {
    return scanName;
  }

  public void setScanName(String scanName) {
    this.scanName = scanName;
  }


  public ScanSummary scanNameArn(String scanNameArn) {
    this.scanNameArn = scanNameArn;
    return this;
  }

  /**
   * Get scanNameArn
   * @return scanNameArn
   */
  @javax.annotation.Nullable
  public String getScanNameArn() {
    return scanNameArn;
  }

  public void setScanNameArn(String scanNameArn) {
    this.scanNameArn = scanNameArn;
  }


  public ScanSummary scanState(ScanState scanState) {
    this.scanState = scanState;
    return this;
  }

  /**
   * Get scanState
   * @return scanState
   */
  @javax.annotation.Nonnull
  public ScanState getScanState() {
    return scanState;
  }

  public void setScanState(ScanState scanState) {
    this.scanState = scanState;
  }


  public ScanSummary updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanSummary scanSummary = (ScanSummary) o;
    return Objects.equals(this.createdAt, scanSummary.createdAt) &&
        Objects.equals(this.runId, scanSummary.runId) &&
        Objects.equals(this.scanName, scanSummary.scanName) &&
        Objects.equals(this.scanNameArn, scanSummary.scanNameArn) &&
        Objects.equals(this.scanState, scanSummary.scanState) &&
        Objects.equals(this.updatedAt, scanSummary.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, runId, scanName, scanNameArn, scanState, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanSummary {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    scanName: ").append(toIndentedString(scanName)).append("\n");
    sb.append("    scanNameArn: ").append(toIndentedString(scanNameArn)).append("\n");
    sb.append("    scanState: ").append(toIndentedString(scanState)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("runId");
    openapiFields.add("scanName");
    openapiFields.add("scanNameArn");
    openapiFields.add("scanState");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("runId");
    openapiRequiredFields.add("scanName");
    openapiRequiredFields.add("scanState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScanSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScanSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScanSummary is not found in the empty JSON string", ScanSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScanSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScanSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScanSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the required field `runId`
      String.validateJsonElement(jsonObj.get("runId"));
      // validate the required field `scanName`
      String.validateJsonElement(jsonObj.get("scanName"));
      // validate the optional field `scanNameArn`
      if (jsonObj.get("scanNameArn") != null && !jsonObj.get("scanNameArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("scanNameArn"));
      }
      // validate the required field `scanState`
      ScanState.validateJsonElement(jsonObj.get("scanState"));
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScanSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScanSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScanSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScanSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ScanSummary>() {
           @Override
           public void write(JsonWriter out, ScanSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScanSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScanSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScanSummary
   * @throws IOException if the JSON string is invalid with respect to ScanSummary
   */
  public static ScanSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScanSummary.class);
  }

  /**
   * Convert an instance of ScanSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

