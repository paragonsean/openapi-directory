/*
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FindingRemediation;
import org.openapitools.client.model.FindingResource;
import org.openapitools.client.model.FindingVulnerability;
import org.openapitools.client.model.Severity;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a finding that was detected in your code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:03.728816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Finding {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETECTOR_ID = "detectorId";
  @SerializedName(SERIALIZED_NAME_DETECTOR_ID)
  private String detectorId;

  public static final String SERIALIZED_NAME_DETECTOR_NAME = "detectorName";
  @SerializedName(SERIALIZED_NAME_DETECTOR_NAME)
  private String detectorName;

  public static final String SERIALIZED_NAME_DETECTOR_TAGS = "detectorTags";
  @SerializedName(SERIALIZED_NAME_DETECTOR_TAGS)
  private List detectorTags;

  public static final String SERIALIZED_NAME_GENERATOR_ID = "generatorId";
  @SerializedName(SERIALIZED_NAME_GENERATOR_ID)
  private String generatorId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REMEDIATION = "remediation";
  @SerializedName(SERIALIZED_NAME_REMEDIATION)
  private FindingRemediation remediation;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private FindingResource resource;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Severity severity;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_VULNERABILITY = "vulnerability";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY)
  private FindingVulnerability vulnerability;

  public Finding() {
  }

  public Finding createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Finding description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Finding detectorId(String detectorId) {
    this.detectorId = detectorId;
    return this;
  }

  /**
   * Get detectorId
   * @return detectorId
   */
  @javax.annotation.Nullable
  public String getDetectorId() {
    return detectorId;
  }

  public void setDetectorId(String detectorId) {
    this.detectorId = detectorId;
  }


  public Finding detectorName(String detectorName) {
    this.detectorName = detectorName;
    return this;
  }

  /**
   * Get detectorName
   * @return detectorName
   */
  @javax.annotation.Nullable
  public String getDetectorName() {
    return detectorName;
  }

  public void setDetectorName(String detectorName) {
    this.detectorName = detectorName;
  }


  public Finding detectorTags(List detectorTags) {
    this.detectorTags = detectorTags;
    return this;
  }

  /**
   * Get detectorTags
   * @return detectorTags
   */
  @javax.annotation.Nullable
  public List getDetectorTags() {
    return detectorTags;
  }

  public void setDetectorTags(List detectorTags) {
    this.detectorTags = detectorTags;
  }


  public Finding generatorId(String generatorId) {
    this.generatorId = generatorId;
    return this;
  }

  /**
   * Get generatorId
   * @return generatorId
   */
  @javax.annotation.Nullable
  public String getGeneratorId() {
    return generatorId;
  }

  public void setGeneratorId(String generatorId) {
    this.generatorId = generatorId;
  }


  public Finding id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Finding remediation(FindingRemediation remediation) {
    this.remediation = remediation;
    return this;
  }

  /**
   * Get remediation
   * @return remediation
   */
  @javax.annotation.Nullable
  public FindingRemediation getRemediation() {
    return remediation;
  }

  public void setRemediation(FindingRemediation remediation) {
    this.remediation = remediation;
  }


  public Finding resource(FindingResource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public FindingResource getResource() {
    return resource;
  }

  public void setResource(FindingResource resource) {
    this.resource = resource;
  }


  public Finding ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * Get ruleId
   * @return ruleId
   */
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public Finding severity(Severity severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public Severity getSeverity() {
    return severity;
  }

  public void setSeverity(Severity severity) {
    this.severity = severity;
  }


  public Finding status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public Finding title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Finding type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Finding updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Finding vulnerability(FindingVulnerability vulnerability) {
    this.vulnerability = vulnerability;
    return this;
  }

  /**
   * Get vulnerability
   * @return vulnerability
   */
  @javax.annotation.Nullable
  public FindingVulnerability getVulnerability() {
    return vulnerability;
  }

  public void setVulnerability(FindingVulnerability vulnerability) {
    this.vulnerability = vulnerability;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Finding finding = (Finding) o;
    return Objects.equals(this.createdAt, finding.createdAt) &&
        Objects.equals(this.description, finding.description) &&
        Objects.equals(this.detectorId, finding.detectorId) &&
        Objects.equals(this.detectorName, finding.detectorName) &&
        Objects.equals(this.detectorTags, finding.detectorTags) &&
        Objects.equals(this.generatorId, finding.generatorId) &&
        Objects.equals(this.id, finding.id) &&
        Objects.equals(this.remediation, finding.remediation) &&
        Objects.equals(this.resource, finding.resource) &&
        Objects.equals(this.ruleId, finding.ruleId) &&
        Objects.equals(this.severity, finding.severity) &&
        Objects.equals(this.status, finding.status) &&
        Objects.equals(this.title, finding.title) &&
        Objects.equals(this.type, finding.type) &&
        Objects.equals(this.updatedAt, finding.updatedAt) &&
        Objects.equals(this.vulnerability, finding.vulnerability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, description, detectorId, detectorName, detectorTags, generatorId, id, remediation, resource, ruleId, severity, status, title, type, updatedAt, vulnerability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Finding {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detectorId: ").append(toIndentedString(detectorId)).append("\n");
    sb.append("    detectorName: ").append(toIndentedString(detectorName)).append("\n");
    sb.append("    detectorTags: ").append(toIndentedString(detectorTags)).append("\n");
    sb.append("    generatorId: ").append(toIndentedString(generatorId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    remediation: ").append(toIndentedString(remediation)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    vulnerability: ").append(toIndentedString(vulnerability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("description");
    openapiFields.add("detectorId");
    openapiFields.add("detectorName");
    openapiFields.add("detectorTags");
    openapiFields.add("generatorId");
    openapiFields.add("id");
    openapiFields.add("remediation");
    openapiFields.add("resource");
    openapiFields.add("ruleId");
    openapiFields.add("severity");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("updatedAt");
    openapiFields.add("vulnerability");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Finding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Finding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Finding is not found in the empty JSON string", Finding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Finding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Finding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `detectorId`
      if (jsonObj.get("detectorId") != null && !jsonObj.get("detectorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("detectorId"));
      }
      // validate the optional field `detectorName`
      if (jsonObj.get("detectorName") != null && !jsonObj.get("detectorName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("detectorName"));
      }
      // validate the optional field `detectorTags`
      if (jsonObj.get("detectorTags") != null && !jsonObj.get("detectorTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("detectorTags"));
      }
      // validate the optional field `generatorId`
      if (jsonObj.get("generatorId") != null && !jsonObj.get("generatorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("generatorId"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `remediation`
      if (jsonObj.get("remediation") != null && !jsonObj.get("remediation").isJsonNull()) {
        FindingRemediation.validateJsonElement(jsonObj.get("remediation"));
      }
      // validate the optional field `resource`
      if (jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) {
        FindingResource.validateJsonElement(jsonObj.get("resource"));
      }
      // validate the optional field `ruleId`
      if (jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ruleId"));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        Severity.validateJsonElement(jsonObj.get("severity"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `title`
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("title"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
      // validate the optional field `vulnerability`
      if (jsonObj.get("vulnerability") != null && !jsonObj.get("vulnerability").isJsonNull()) {
        FindingVulnerability.validateJsonElement(jsonObj.get("vulnerability"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Finding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Finding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Finding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Finding.class));

       return (TypeAdapter<T>) new TypeAdapter<Finding>() {
           @Override
           public void write(JsonWriter out, Finding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Finding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Finding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Finding
   * @throws IOException if the JSON string is invalid with respect to Finding
   */
  public static Finding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Finding.class);
  }

  /**
   * Convert an instance of Finding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

