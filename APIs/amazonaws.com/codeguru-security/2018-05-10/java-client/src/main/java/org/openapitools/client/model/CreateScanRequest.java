/*
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateScanRequestResourceId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateScanRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:03.728816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateScanRequest {
  /**
   * The type of analysis you want CodeGuru Security to perform in the scan, either &lt;code&gt;Security&lt;/code&gt; or &lt;code&gt;All&lt;/code&gt;. The &lt;code&gt;Security&lt;/code&gt; type only generates findings related to security. The &lt;code&gt;All&lt;/code&gt; type generates both security findings and quality findings. Defaults to &lt;code&gt;Security&lt;/code&gt; type if missing.
   */
  @JsonAdapter(AnalysisTypeEnum.Adapter.class)
  public enum AnalysisTypeEnum {
    SECURITY("Security"),
    
    ALL("All");

    private String value;

    AnalysisTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnalysisTypeEnum fromValue(String value) {
      for (AnalysisTypeEnum b : AnalysisTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnalysisTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnalysisTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnalysisTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnalysisTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANALYSIS_TYPE = "analysisType";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_TYPE)
  private AnalysisTypeEnum analysisType;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private CreateScanRequestResourceId resourceId;

  public static final String SERIALIZED_NAME_SCAN_NAME = "scanName";
  @SerializedName(SERIALIZED_NAME_SCAN_NAME)
  private String scanName;

  /**
   * &lt;p&gt;The type of scan, either &lt;code&gt;Standard&lt;/code&gt; or &lt;code&gt;Express&lt;/code&gt;. Defaults to &lt;code&gt;Standard&lt;/code&gt; type if missing.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Express&lt;/code&gt; scans run on limited resources and use a limited set of detectors to analyze your code in near-real time. &lt;code&gt;Standard&lt;/code&gt; scans have standard resource limits and use the full set of detectors to analyze your code.&lt;/p&gt;
   */
  @JsonAdapter(ScanTypeEnum.Adapter.class)
  public enum ScanTypeEnum {
    STANDARD("Standard"),
    
    EXPRESS("Express");

    private String value;

    ScanTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScanTypeEnum fromValue(String value) {
      for (ScanTypeEnum b : ScanTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScanTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScanTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScanTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScanTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScanTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCAN_TYPE = "scanType";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE)
  private ScanTypeEnum scanType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateScanRequest() {
  }

  public CreateScanRequest analysisType(AnalysisTypeEnum analysisType) {
    this.analysisType = analysisType;
    return this;
  }

  /**
   * The type of analysis you want CodeGuru Security to perform in the scan, either &lt;code&gt;Security&lt;/code&gt; or &lt;code&gt;All&lt;/code&gt;. The &lt;code&gt;Security&lt;/code&gt; type only generates findings related to security. The &lt;code&gt;All&lt;/code&gt; type generates both security findings and quality findings. Defaults to &lt;code&gt;Security&lt;/code&gt; type if missing.
   * @return analysisType
   */
  @javax.annotation.Nullable
  public AnalysisTypeEnum getAnalysisType() {
    return analysisType;
  }

  public void setAnalysisType(AnalysisTypeEnum analysisType) {
    this.analysisType = analysisType;
  }


  public CreateScanRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * The idempotency token for the request. Amazon CodeGuru Security uses this value to prevent the accidental creation of duplicate scans if there are failures and retries.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateScanRequest resourceId(CreateScanRequestResourceId resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nonnull
  public CreateScanRequestResourceId getResourceId() {
    return resourceId;
  }

  public void setResourceId(CreateScanRequestResourceId resourceId) {
    this.resourceId = resourceId;
  }


  public CreateScanRequest scanName(String scanName) {
    this.scanName = scanName;
    return this;
  }

  /**
   * The unique name that CodeGuru Security uses to track revisions across multiple scans of the same resource. Only allowed for a &lt;code&gt;STANDARD&lt;/code&gt; scan type. If not specified, it will be auto generated. 
   * @return scanName
   */
  @javax.annotation.Nonnull
  public String getScanName() {
    return scanName;
  }

  public void setScanName(String scanName) {
    this.scanName = scanName;
  }


  public CreateScanRequest scanType(ScanTypeEnum scanType) {
    this.scanType = scanType;
    return this;
  }

  /**
   * &lt;p&gt;The type of scan, either &lt;code&gt;Standard&lt;/code&gt; or &lt;code&gt;Express&lt;/code&gt;. Defaults to &lt;code&gt;Standard&lt;/code&gt; type if missing.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Express&lt;/code&gt; scans run on limited resources and use a limited set of detectors to analyze your code in near-real time. &lt;code&gt;Standard&lt;/code&gt; scans have standard resource limits and use the full set of detectors to analyze your code.&lt;/p&gt;
   * @return scanType
   */
  @javax.annotation.Nullable
  public ScanTypeEnum getScanType() {
    return scanType;
  }

  public void setScanType(ScanTypeEnum scanType) {
    this.scanType = scanType;
  }


  public CreateScanRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateScanRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;An array of key-value pairs used to tag a scan. A tag is a custom attribute label with two parts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A tag key. For example, &lt;code&gt;CostCenter&lt;/code&gt;, &lt;code&gt;Environment&lt;/code&gt;, or &lt;code&gt;Secret&lt;/code&gt;. Tag keys are case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An optional tag value field. For example, &lt;code&gt;111122223333&lt;/code&gt;, &lt;code&gt;Production&lt;/code&gt;, or a team name. Omitting the tag value is the same as using an empty string. Tag values are case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateScanRequest createScanRequest = (CreateScanRequest) o;
    return Objects.equals(this.analysisType, createScanRequest.analysisType) &&
        Objects.equals(this.clientToken, createScanRequest.clientToken) &&
        Objects.equals(this.resourceId, createScanRequest.resourceId) &&
        Objects.equals(this.scanName, createScanRequest.scanName) &&
        Objects.equals(this.scanType, createScanRequest.scanType) &&
        Objects.equals(this.tags, createScanRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisType, clientToken, resourceId, scanName, scanType, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateScanRequest {\n");
    sb.append("    analysisType: ").append(toIndentedString(analysisType)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    scanName: ").append(toIndentedString(scanName)).append("\n");
    sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysisType");
    openapiFields.add("clientToken");
    openapiFields.add("resourceId");
    openapiFields.add("scanName");
    openapiFields.add("scanType");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resourceId");
    openapiRequiredFields.add("scanName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateScanRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateScanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateScanRequest is not found in the empty JSON string", CreateScanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateScanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateScanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateScanRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analysisType") != null && !jsonObj.get("analysisType").isJsonNull()) && !jsonObj.get("analysisType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysisType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysisType").toString()));
      }
      // validate the optional field `analysisType`
      if (jsonObj.get("analysisType") != null && !jsonObj.get("analysisType").isJsonNull()) {
        AnalysisTypeEnum.validateJsonElement(jsonObj.get("analysisType"));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      // validate the required field `resourceId`
      CreateScanRequestResourceId.validateJsonElement(jsonObj.get("resourceId"));
      if (!jsonObj.get("scanName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scanName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scanName").toString()));
      }
      if ((jsonObj.get("scanType") != null && !jsonObj.get("scanType").isJsonNull()) && !jsonObj.get("scanType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scanType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scanType").toString()));
      }
      // validate the optional field `scanType`
      if (jsonObj.get("scanType") != null && !jsonObj.get("scanType").isJsonNull()) {
        ScanTypeEnum.validateJsonElement(jsonObj.get("scanType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateScanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateScanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateScanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateScanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateScanRequest>() {
           @Override
           public void write(JsonWriter out, CreateScanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateScanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateScanRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateScanRequest
   * @throws IOException if the JSON string is invalid with respect to CreateScanRequest
   */
  public static CreateScanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateScanRequest.class);
  }

  /**
   * Convert an instance of CreateScanRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

