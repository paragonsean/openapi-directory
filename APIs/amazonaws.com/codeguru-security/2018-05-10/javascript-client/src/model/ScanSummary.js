/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScanState from './ScanState';

/**
 * The ScanSummary model module.
 * @module model/ScanSummary
 * @version 2018-05-10
 */
class ScanSummary {
    /**
     * Constructs a new <code>ScanSummary</code>.
     * Information about a scan. 
     * @alias module:model/ScanSummary
     * @param createdAt {Date} 
     * @param runId {String} 
     * @param scanName {String} 
     * @param scanState {module:model/ScanState} 
     */
    constructor(createdAt, runId, scanName, scanState) { 
        
        ScanSummary.initialize(this, createdAt, runId, scanName, scanState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, runId, scanName, scanState) { 
        obj['createdAt'] = createdAt;
        obj['runId'] = runId;
        obj['scanName'] = scanName;
        obj['scanState'] = scanState;
    }

    /**
     * Constructs a <code>ScanSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScanSummary} obj Optional instance to populate.
     * @return {module:model/ScanSummary} The populated <code>ScanSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScanSummary();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('runId')) {
                obj['runId'] = ApiClient.convertToType(data['runId'], 'String');
            }
            if (data.hasOwnProperty('scanName')) {
                obj['scanName'] = ApiClient.convertToType(data['scanName'], 'String');
            }
            if (data.hasOwnProperty('scanNameArn')) {
                obj['scanNameArn'] = ApiClient.convertToType(data['scanNameArn'], 'String');
            }
            if (data.hasOwnProperty('scanState')) {
                obj['scanState'] = ApiClient.convertToType(data['scanState'], ScanState);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScanSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScanSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScanSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `runId`
        if (data['runId']) { // data not null
          String.validateJSON(data['runId']);
        }
        // validate the optional field `scanName`
        if (data['scanName']) { // data not null
          String.validateJSON(data['scanName']);
        }
        // validate the optional field `scanNameArn`
        if (data['scanNameArn']) { // data not null
          String.validateJSON(data['scanNameArn']);
        }
        // validate the optional field `scanState`
        if (data['scanState']) { // data not null
          ScanState.validateJSON(data['scanState']);
        }
        // validate the optional field `updatedAt`
        if (data['updatedAt']) { // data not null
          Date.validateJSON(data['updatedAt']);
        }

        return true;
    }


}

ScanSummary.RequiredProperties = ["createdAt", "runId", "scanName", "scanState"];

/**
 * @member {Date} createdAt
 */
ScanSummary.prototype['createdAt'] = undefined;

/**
 * @member {String} runId
 */
ScanSummary.prototype['runId'] = undefined;

/**
 * @member {String} scanName
 */
ScanSummary.prototype['scanName'] = undefined;

/**
 * @member {String} scanNameArn
 */
ScanSummary.prototype['scanNameArn'] = undefined;

/**
 * @member {module:model/ScanState} scanState
 */
ScanSummary.prototype['scanState'] = undefined;

/**
 * @member {Date} updatedAt
 */
ScanSummary.prototype['updatedAt'] = undefined;






export default ScanSummary;

