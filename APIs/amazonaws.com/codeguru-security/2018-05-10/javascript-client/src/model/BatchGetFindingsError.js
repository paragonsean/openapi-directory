/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorCode from './ErrorCode';

/**
 * The BatchGetFindingsError model module.
 * @module model/BatchGetFindingsError
 * @version 2018-05-10
 */
class BatchGetFindingsError {
    /**
     * Constructs a new <code>BatchGetFindingsError</code>.
     * Contains information about the error that caused a finding to fail to be retrieved.
     * @alias module:model/BatchGetFindingsError
     * @param errorCode {module:model/ErrorCode} 
     * @param findingId {String} 
     * @param message {String} 
     * @param scanName {String} 
     */
    constructor(errorCode, findingId, message, scanName) { 
        
        BatchGetFindingsError.initialize(this, errorCode, findingId, message, scanName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, errorCode, findingId, message, scanName) { 
        obj['errorCode'] = errorCode;
        obj['findingId'] = findingId;
        obj['message'] = message;
        obj['scanName'] = scanName;
    }

    /**
     * Constructs a <code>BatchGetFindingsError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchGetFindingsError} obj Optional instance to populate.
     * @return {module:model/BatchGetFindingsError} The populated <code>BatchGetFindingsError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchGetFindingsError();

            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], ErrorCode);
            }
            if (data.hasOwnProperty('findingId')) {
                obj['findingId'] = ApiClient.convertToType(data['findingId'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('scanName')) {
                obj['scanName'] = ApiClient.convertToType(data['scanName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchGetFindingsError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchGetFindingsError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BatchGetFindingsError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `errorCode`
        if (data['errorCode']) { // data not null
          ErrorCode.validateJSON(data['errorCode']);
        }
        // validate the optional field `findingId`
        if (data['findingId']) { // data not null
          String.validateJSON(data['findingId']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          String.validateJSON(data['message']);
        }
        // validate the optional field `scanName`
        if (data['scanName']) { // data not null
          String.validateJSON(data['scanName']);
        }

        return true;
    }


}

BatchGetFindingsError.RequiredProperties = ["errorCode", "findingId", "message", "scanName"];

/**
 * @member {module:model/ErrorCode} errorCode
 */
BatchGetFindingsError.prototype['errorCode'] = undefined;

/**
 * @member {String} findingId
 */
BatchGetFindingsError.prototype['findingId'] = undefined;

/**
 * @member {String} message
 */
BatchGetFindingsError.prototype['message'] = undefined;

/**
 * @member {String} scanName
 */
BatchGetFindingsError.prototype['scanName'] = undefined;






export default BatchGetFindingsError;

