/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateScanRequestResourceId from './CreateScanRequestResourceId';

/**
 * The CreateScanRequest model module.
 * @module model/CreateScanRequest
 * @version 2018-05-10
 */
class CreateScanRequest {
    /**
     * Constructs a new <code>CreateScanRequest</code>.
     * @alias module:model/CreateScanRequest
     * @param resourceId {module:model/CreateScanRequestResourceId} 
     * @param scanName {String} The unique name that CodeGuru Security uses to track revisions across multiple scans of the same resource. Only allowed for a <code>STANDARD</code> scan type. If not specified, it will be auto generated. 
     */
    constructor(resourceId, scanName) { 
        
        CreateScanRequest.initialize(this, resourceId, scanName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resourceId, scanName) { 
        obj['resourceId'] = resourceId;
        obj['scanName'] = scanName;
    }

    /**
     * Constructs a <code>CreateScanRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateScanRequest} obj Optional instance to populate.
     * @return {module:model/CreateScanRequest} The populated <code>CreateScanRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateScanRequest();

            if (data.hasOwnProperty('analysisType')) {
                obj['analysisType'] = ApiClient.convertToType(data['analysisType'], 'String');
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = CreateScanRequestResourceId.constructFromObject(data['resourceId']);
            }
            if (data.hasOwnProperty('scanName')) {
                obj['scanName'] = ApiClient.convertToType(data['scanName'], 'String');
            }
            if (data.hasOwnProperty('scanType')) {
                obj['scanType'] = ApiClient.convertToType(data['scanType'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateScanRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateScanRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateScanRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['analysisType'] && !(typeof data['analysisType'] === 'string' || data['analysisType'] instanceof String)) {
            throw new Error("Expected the field `analysisType` to be a primitive type in the JSON string but got " + data['analysisType']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // validate the optional field `resourceId`
        if (data['resourceId']) { // data not null
          CreateScanRequestResourceId.validateJSON(data['resourceId']);
        }
        // ensure the json data is a string
        if (data['scanName'] && !(typeof data['scanName'] === 'string' || data['scanName'] instanceof String)) {
            throw new Error("Expected the field `scanName` to be a primitive type in the JSON string but got " + data['scanName']);
        }
        // ensure the json data is a string
        if (data['scanType'] && !(typeof data['scanType'] === 'string' || data['scanType'] instanceof String)) {
            throw new Error("Expected the field `scanType` to be a primitive type in the JSON string but got " + data['scanType']);
        }

        return true;
    }


}

CreateScanRequest.RequiredProperties = ["resourceId", "scanName"];

/**
 * The type of analysis you want CodeGuru Security to perform in the scan, either <code>Security</code> or <code>All</code>. The <code>Security</code> type only generates findings related to security. The <code>All</code> type generates both security findings and quality findings. Defaults to <code>Security</code> type if missing.
 * @member {module:model/CreateScanRequest.AnalysisTypeEnum} analysisType
 */
CreateScanRequest.prototype['analysisType'] = undefined;

/**
 * The idempotency token for the request. Amazon CodeGuru Security uses this value to prevent the accidental creation of duplicate scans if there are failures and retries.
 * @member {String} clientToken
 */
CreateScanRequest.prototype['clientToken'] = undefined;

/**
 * @member {module:model/CreateScanRequestResourceId} resourceId
 */
CreateScanRequest.prototype['resourceId'] = undefined;

/**
 * The unique name that CodeGuru Security uses to track revisions across multiple scans of the same resource. Only allowed for a <code>STANDARD</code> scan type. If not specified, it will be auto generated. 
 * @member {String} scanName
 */
CreateScanRequest.prototype['scanName'] = undefined;

/**
 * <p>The type of scan, either <code>Standard</code> or <code>Express</code>. Defaults to <code>Standard</code> type if missing.</p> <p> <code>Express</code> scans run on limited resources and use a limited set of detectors to analyze your code in near-real time. <code>Standard</code> scans have standard resource limits and use the full set of detectors to analyze your code.</p>
 * @member {module:model/CreateScanRequest.ScanTypeEnum} scanType
 */
CreateScanRequest.prototype['scanType'] = undefined;

/**
 * <p>An array of key-value pairs used to tag a scan. A tag is a custom attribute label with two parts:</p> <ul> <li> <p>A tag key. For example, <code>CostCenter</code>, <code>Environment</code>, or <code>Secret</code>. Tag keys are case sensitive.</p> </li> <li> <p>An optional tag value field. For example, <code>111122223333</code>, <code>Production</code>, or a team name. Omitting the tag value is the same as using an empty string. Tag values are case sensitive.</p> </li> </ul>
 * @member {Object.<String, String>} tags
 */
CreateScanRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>analysisType</code> property.
 * @enum {String}
 * @readonly
 */
CreateScanRequest['AnalysisTypeEnum'] = {

    /**
     * value: "Security"
     * @const
     */
    "Security": "Security",

    /**
     * value: "All"
     * @const
     */
    "All": "All"
};


/**
 * Allowed values for the <code>scanType</code> property.
 * @enum {String}
 * @readonly
 */
CreateScanRequest['ScanTypeEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Express"
     * @const
     */
    "Express": "Express"
};



export default CreateScanRequest;

