/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCodeGuruSecurity);
  }
}(this, function(expect, AmazonCodeGuruSecurity) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCodeGuruSecurity.Finding();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Finding', function() {
    it('should create an instance of Finding', function() {
      // uncomment below and update the code to test Finding
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be.a(AmazonCodeGuruSecurity.Finding);
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property detectorId (base name: "detectorId")', function() {
      // uncomment below and update the code to test the property detectorId
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property detectorName (base name: "detectorName")', function() {
      // uncomment below and update the code to test the property detectorName
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property detectorTags (base name: "detectorTags")', function() {
      // uncomment below and update the code to test the property detectorTags
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property generatorId (base name: "generatorId")', function() {
      // uncomment below and update the code to test the property generatorId
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property remediation (base name: "remediation")', function() {
      // uncomment below and update the code to test the property remediation
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property resource (base name: "resource")', function() {
      // uncomment below and update the code to test the property resource
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property ruleId (base name: "ruleId")', function() {
      // uncomment below and update the code to test the property ruleId
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property severity (base name: "severity")', function() {
      // uncomment below and update the code to test the property severity
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

    it('should have the property vulnerability (base name: "vulnerability")', function() {
      // uncomment below and update the code to test the property vulnerability
      //var instance = new AmazonCodeGuruSecurity.Finding();
      //expect(instance).to.be();
    });

  });

}));
