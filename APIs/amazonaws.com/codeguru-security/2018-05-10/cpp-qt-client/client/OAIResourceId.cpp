/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceId::OAIResourceId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceId::OAIResourceId() {
    this->initializeModel();
}

OAIResourceId::~OAIResourceId() {}

void OAIResourceId::initializeModel() {

    m_code_artifact_id_isSet = false;
    m_code_artifact_id_isValid = false;
}

void OAIResourceId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceId::fromJsonObject(QJsonObject json) {

    m_code_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_code_artifact_id, json[QString("codeArtifactId")]);
    m_code_artifact_id_isSet = !json[QString("codeArtifactId")].isNull() && m_code_artifact_id_isValid;
}

QString OAIResourceId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceId::asJsonObject() const {
    QJsonObject obj;
    if (m_code_artifact_id_isSet) {
        obj.insert(QString("codeArtifactId"), ::OpenAPI::toJsonValue(m_code_artifact_id));
    }
    return obj;
}

QString OAIResourceId::getCodeArtifactId() const {
    return m_code_artifact_id;
}
void OAIResourceId::setCodeArtifactId(const QString &code_artifact_id) {
    m_code_artifact_id = code_artifact_id;
    m_code_artifact_id_isSet = true;
}

bool OAIResourceId::is_code_artifact_id_Set() const{
    return m_code_artifact_id_isSet;
}

bool OAIResourceId::is_code_artifact_id_Valid() const{
    return m_code_artifact_id_isValid;
}

bool OAIResourceId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
