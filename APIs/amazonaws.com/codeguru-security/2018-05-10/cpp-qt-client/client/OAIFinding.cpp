/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinding::OAIFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinding::OAIFinding() {
    this->initializeModel();
}

OAIFinding::~OAIFinding() {}

void OAIFinding::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_detector_id_isSet = false;
    m_detector_id_isValid = false;

    m_detector_name_isSet = false;
    m_detector_name_isValid = false;

    m_detector_tags_isSet = false;
    m_detector_tags_isValid = false;

    m_generator_id_isSet = false;
    m_generator_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_remediation_isSet = false;
    m_remediation_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_vulnerability_isSet = false;
    m_vulnerability_isValid = false;
}

void OAIFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinding::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_detector_id_isValid = ::OpenAPI::fromJsonValue(m_detector_id, json[QString("detectorId")]);
    m_detector_id_isSet = !json[QString("detectorId")].isNull() && m_detector_id_isValid;

    m_detector_name_isValid = ::OpenAPI::fromJsonValue(m_detector_name, json[QString("detectorName")]);
    m_detector_name_isSet = !json[QString("detectorName")].isNull() && m_detector_name_isValid;

    m_detector_tags_isValid = ::OpenAPI::fromJsonValue(m_detector_tags, json[QString("detectorTags")]);
    m_detector_tags_isSet = !json[QString("detectorTags")].isNull() && m_detector_tags_isValid;

    m_generator_id_isValid = ::OpenAPI::fromJsonValue(m_generator_id, json[QString("generatorId")]);
    m_generator_id_isSet = !json[QString("generatorId")].isNull() && m_generator_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_remediation_isValid = ::OpenAPI::fromJsonValue(m_remediation, json[QString("remediation")]);
    m_remediation_isSet = !json[QString("remediation")].isNull() && m_remediation_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_vulnerability_isValid = ::OpenAPI::fromJsonValue(m_vulnerability, json[QString("vulnerability")]);
    m_vulnerability_isSet = !json[QString("vulnerability")].isNull() && m_vulnerability_isValid;
}

QString OAIFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_detector_id_isSet) {
        obj.insert(QString("detectorId"), ::OpenAPI::toJsonValue(m_detector_id));
    }
    if (m_detector_name_isSet) {
        obj.insert(QString("detectorName"), ::OpenAPI::toJsonValue(m_detector_name));
    }
    if (m_detector_tags.isSet()) {
        obj.insert(QString("detectorTags"), ::OpenAPI::toJsonValue(m_detector_tags));
    }
    if (m_generator_id_isSet) {
        obj.insert(QString("generatorId"), ::OpenAPI::toJsonValue(m_generator_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_remediation.isSet()) {
        obj.insert(QString("remediation"), ::OpenAPI::toJsonValue(m_remediation));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_vulnerability.isSet()) {
        obj.insert(QString("vulnerability"), ::OpenAPI::toJsonValue(m_vulnerability));
    }
    return obj;
}

QDateTime OAIFinding::getCreatedAt() const {
    return m_created_at;
}
void OAIFinding::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFinding::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFinding::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIFinding::getDescription() const {
    return m_description;
}
void OAIFinding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFinding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFinding::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFinding::getDetectorId() const {
    return m_detector_id;
}
void OAIFinding::setDetectorId(const QString &detector_id) {
    m_detector_id = detector_id;
    m_detector_id_isSet = true;
}

bool OAIFinding::is_detector_id_Set() const{
    return m_detector_id_isSet;
}

bool OAIFinding::is_detector_id_Valid() const{
    return m_detector_id_isValid;
}

QString OAIFinding::getDetectorName() const {
    return m_detector_name;
}
void OAIFinding::setDetectorName(const QString &detector_name) {
    m_detector_name = detector_name;
    m_detector_name_isSet = true;
}

bool OAIFinding::is_detector_name_Set() const{
    return m_detector_name_isSet;
}

bool OAIFinding::is_detector_name_Valid() const{
    return m_detector_name_isValid;
}

QList OAIFinding::getDetectorTags() const {
    return m_detector_tags;
}
void OAIFinding::setDetectorTags(const QList &detector_tags) {
    m_detector_tags = detector_tags;
    m_detector_tags_isSet = true;
}

bool OAIFinding::is_detector_tags_Set() const{
    return m_detector_tags_isSet;
}

bool OAIFinding::is_detector_tags_Valid() const{
    return m_detector_tags_isValid;
}

QString OAIFinding::getGeneratorId() const {
    return m_generator_id;
}
void OAIFinding::setGeneratorId(const QString &generator_id) {
    m_generator_id = generator_id;
    m_generator_id_isSet = true;
}

bool OAIFinding::is_generator_id_Set() const{
    return m_generator_id_isSet;
}

bool OAIFinding::is_generator_id_Valid() const{
    return m_generator_id_isValid;
}

QString OAIFinding::getId() const {
    return m_id;
}
void OAIFinding::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFinding::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFinding::is_id_Valid() const{
    return m_id_isValid;
}

OAIFinding_remediation OAIFinding::getRemediation() const {
    return m_remediation;
}
void OAIFinding::setRemediation(const OAIFinding_remediation &remediation) {
    m_remediation = remediation;
    m_remediation_isSet = true;
}

bool OAIFinding::is_remediation_Set() const{
    return m_remediation_isSet;
}

bool OAIFinding::is_remediation_Valid() const{
    return m_remediation_isValid;
}

OAIFinding_resource OAIFinding::getResource() const {
    return m_resource;
}
void OAIFinding::setResource(const OAIFinding_resource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIFinding::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIFinding::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIFinding::getRuleId() const {
    return m_rule_id;
}
void OAIFinding::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIFinding::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIFinding::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

OAISeverity OAIFinding::getSeverity() const {
    return m_severity;
}
void OAIFinding::setSeverity(const OAISeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIFinding::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIFinding::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIStatus OAIFinding::getStatus() const {
    return m_status;
}
void OAIFinding::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFinding::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFinding::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFinding::getTitle() const {
    return m_title;
}
void OAIFinding::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFinding::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFinding::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFinding::getType() const {
    return m_type;
}
void OAIFinding::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFinding::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFinding::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIFinding::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFinding::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFinding::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFinding::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIFinding_vulnerability OAIFinding::getVulnerability() const {
    return m_vulnerability;
}
void OAIFinding::setVulnerability(const OAIFinding_vulnerability &vulnerability) {
    m_vulnerability = vulnerability;
    m_vulnerability_isSet = true;
}

bool OAIFinding::is_vulnerability_Set() const{
    return m_vulnerability_isSet;
}

bool OAIFinding::is_vulnerability_Valid() const{
    return m_vulnerability_isValid;
}

bool OAIFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
