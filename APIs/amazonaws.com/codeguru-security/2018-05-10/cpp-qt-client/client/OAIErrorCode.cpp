/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCode::OAIErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCode::OAIErrorCode() {
    this->initializeModel();
}

OAIErrorCode::~OAIErrorCode() {}

void OAIErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DUPLICATE_IDENTIFIER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::DUPLICATE_IDENTIFIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_DOES_NOT_EXIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ITEM_DOES_NOT_EXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INTERNAL_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_FINDING_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_FINDING_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_SCAN_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALID_SCAN_NAME;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorCode::DUPLICATE_IDENTIFIER:
            val = "DUPLICATE_IDENTIFIER";
            break;
        case eOAIErrorCode::ITEM_DOES_NOT_EXIST:
            val = "ITEM_DOES_NOT_EXIST";
            break;
        case eOAIErrorCode::INTERNAL_ERROR:
            val = "INTERNAL_ERROR";
            break;
        case eOAIErrorCode::INVALID_FINDING_ID:
            val = "INVALID_FINDING_ID";
            break;
        case eOAIErrorCode::INVALID_SCAN_NAME:
            val = "INVALID_SCAN_NAME";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorCode::eOAIErrorCode OAIErrorCode::getValue() const {
    return m_value;
}

void OAIErrorCode::setValue(const OAIErrorCode::eOAIErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
