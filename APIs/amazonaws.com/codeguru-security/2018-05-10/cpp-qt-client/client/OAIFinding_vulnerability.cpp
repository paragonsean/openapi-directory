/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinding_vulnerability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinding_vulnerability::OAIFinding_vulnerability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinding_vulnerability::OAIFinding_vulnerability() {
    this->initializeModel();
}

OAIFinding_vulnerability::~OAIFinding_vulnerability() {}

void OAIFinding_vulnerability::initializeModel() {

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_reference_urls_isSet = false;
    m_reference_urls_isValid = false;

    m_related_vulnerabilities_isSet = false;
    m_related_vulnerabilities_isValid = false;
}

void OAIFinding_vulnerability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinding_vulnerability::fromJsonObject(QJsonObject json) {

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("itemCount")]);
    m_item_count_isSet = !json[QString("itemCount")].isNull() && m_item_count_isValid;

    m_reference_urls_isValid = ::OpenAPI::fromJsonValue(m_reference_urls, json[QString("referenceUrls")]);
    m_reference_urls_isSet = !json[QString("referenceUrls")].isNull() && m_reference_urls_isValid;

    m_related_vulnerabilities_isValid = ::OpenAPI::fromJsonValue(m_related_vulnerabilities, json[QString("relatedVulnerabilities")]);
    m_related_vulnerabilities_isSet = !json[QString("relatedVulnerabilities")].isNull() && m_related_vulnerabilities_isValid;
}

QString OAIFinding_vulnerability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinding_vulnerability::asJsonObject() const {
    QJsonObject obj;
    if (m_file_path.isSet()) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("itemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_reference_urls.isSet()) {
        obj.insert(QString("referenceUrls"), ::OpenAPI::toJsonValue(m_reference_urls));
    }
    if (m_related_vulnerabilities.isSet()) {
        obj.insert(QString("relatedVulnerabilities"), ::OpenAPI::toJsonValue(m_related_vulnerabilities));
    }
    return obj;
}

OAIVulnerability_filePath OAIFinding_vulnerability::getFilePath() const {
    return m_file_path;
}
void OAIFinding_vulnerability::setFilePath(const OAIVulnerability_filePath &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIFinding_vulnerability::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIFinding_vulnerability::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIFinding_vulnerability::getId() const {
    return m_id;
}
void OAIFinding_vulnerability::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFinding_vulnerability::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFinding_vulnerability::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIFinding_vulnerability::getItemCount() const {
    return m_item_count;
}
void OAIFinding_vulnerability::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIFinding_vulnerability::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIFinding_vulnerability::is_item_count_Valid() const{
    return m_item_count_isValid;
}

QList OAIFinding_vulnerability::getReferenceUrls() const {
    return m_reference_urls;
}
void OAIFinding_vulnerability::setReferenceUrls(const QList &reference_urls) {
    m_reference_urls = reference_urls;
    m_reference_urls_isSet = true;
}

bool OAIFinding_vulnerability::is_reference_urls_Set() const{
    return m_reference_urls_isSet;
}

bool OAIFinding_vulnerability::is_reference_urls_Valid() const{
    return m_reference_urls_isValid;
}

QList OAIFinding_vulnerability::getRelatedVulnerabilities() const {
    return m_related_vulnerabilities;
}
void OAIFinding_vulnerability::setRelatedVulnerabilities(const QList &related_vulnerabilities) {
    m_related_vulnerabilities = related_vulnerabilities;
    m_related_vulnerabilities_isSet = true;
}

bool OAIFinding_vulnerability::is_related_vulnerabilities_Set() const{
    return m_related_vulnerabilities_isSet;
}

bool OAIFinding_vulnerability::is_related_vulnerabilities_Valid() const{
    return m_related_vulnerabilities_isValid;
}

bool OAIFinding_vulnerability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_vulnerabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinding_vulnerability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
