/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMetricsSummaryResponse_metricsSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMetricsSummaryResponse_metricsSummary::OAIGetMetricsSummaryResponse_metricsSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMetricsSummaryResponse_metricsSummary::OAIGetMetricsSummaryResponse_metricsSummary() {
    this->initializeModel();
}

OAIGetMetricsSummaryResponse_metricsSummary::~OAIGetMetricsSummaryResponse_metricsSummary() {}

void OAIGetMetricsSummaryResponse_metricsSummary::initializeModel() {

    m_categories_with_most_findings_isSet = false;
    m_categories_with_most_findings_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_open_findings_isSet = false;
    m_open_findings_isValid = false;

    m_scans_with_most_open_critical_findings_isSet = false;
    m_scans_with_most_open_critical_findings_isValid = false;

    m_scans_with_most_open_findings_isSet = false;
    m_scans_with_most_open_findings_isValid = false;
}

void OAIGetMetricsSummaryResponse_metricsSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMetricsSummaryResponse_metricsSummary::fromJsonObject(QJsonObject json) {

    m_categories_with_most_findings_isValid = ::OpenAPI::fromJsonValue(m_categories_with_most_findings, json[QString("categoriesWithMostFindings")]);
    m_categories_with_most_findings_isSet = !json[QString("categoriesWithMostFindings")].isNull() && m_categories_with_most_findings_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_open_findings_isValid = ::OpenAPI::fromJsonValue(m_open_findings, json[QString("openFindings")]);
    m_open_findings_isSet = !json[QString("openFindings")].isNull() && m_open_findings_isValid;

    m_scans_with_most_open_critical_findings_isValid = ::OpenAPI::fromJsonValue(m_scans_with_most_open_critical_findings, json[QString("scansWithMostOpenCriticalFindings")]);
    m_scans_with_most_open_critical_findings_isSet = !json[QString("scansWithMostOpenCriticalFindings")].isNull() && m_scans_with_most_open_critical_findings_isValid;

    m_scans_with_most_open_findings_isValid = ::OpenAPI::fromJsonValue(m_scans_with_most_open_findings, json[QString("scansWithMostOpenFindings")]);
    m_scans_with_most_open_findings_isSet = !json[QString("scansWithMostOpenFindings")].isNull() && m_scans_with_most_open_findings_isValid;
}

QString OAIGetMetricsSummaryResponse_metricsSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMetricsSummaryResponse_metricsSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_categories_with_most_findings.isSet()) {
        obj.insert(QString("categoriesWithMostFindings"), ::OpenAPI::toJsonValue(m_categories_with_most_findings));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_open_findings.isSet()) {
        obj.insert(QString("openFindings"), ::OpenAPI::toJsonValue(m_open_findings));
    }
    if (m_scans_with_most_open_critical_findings.isSet()) {
        obj.insert(QString("scansWithMostOpenCriticalFindings"), ::OpenAPI::toJsonValue(m_scans_with_most_open_critical_findings));
    }
    if (m_scans_with_most_open_findings.isSet()) {
        obj.insert(QString("scansWithMostOpenFindings"), ::OpenAPI::toJsonValue(m_scans_with_most_open_findings));
    }
    return obj;
}

QList OAIGetMetricsSummaryResponse_metricsSummary::getCategoriesWithMostFindings() const {
    return m_categories_with_most_findings;
}
void OAIGetMetricsSummaryResponse_metricsSummary::setCategoriesWithMostFindings(const QList &categories_with_most_findings) {
    m_categories_with_most_findings = categories_with_most_findings;
    m_categories_with_most_findings_isSet = true;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_categories_with_most_findings_Set() const{
    return m_categories_with_most_findings_isSet;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_categories_with_most_findings_Valid() const{
    return m_categories_with_most_findings_isValid;
}

QDateTime OAIGetMetricsSummaryResponse_metricsSummary::getDate() const {
    return m_date;
}
void OAIGetMetricsSummaryResponse_metricsSummary::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_date_Valid() const{
    return m_date_isValid;
}

OAIMetricsSummary_openFindings OAIGetMetricsSummaryResponse_metricsSummary::getOpenFindings() const {
    return m_open_findings;
}
void OAIGetMetricsSummaryResponse_metricsSummary::setOpenFindings(const OAIMetricsSummary_openFindings &open_findings) {
    m_open_findings = open_findings;
    m_open_findings_isSet = true;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_open_findings_Set() const{
    return m_open_findings_isSet;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_open_findings_Valid() const{
    return m_open_findings_isValid;
}

QList OAIGetMetricsSummaryResponse_metricsSummary::getScansWithMostOpenCriticalFindings() const {
    return m_scans_with_most_open_critical_findings;
}
void OAIGetMetricsSummaryResponse_metricsSummary::setScansWithMostOpenCriticalFindings(const QList &scans_with_most_open_critical_findings) {
    m_scans_with_most_open_critical_findings = scans_with_most_open_critical_findings;
    m_scans_with_most_open_critical_findings_isSet = true;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_scans_with_most_open_critical_findings_Set() const{
    return m_scans_with_most_open_critical_findings_isSet;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_scans_with_most_open_critical_findings_Valid() const{
    return m_scans_with_most_open_critical_findings_isValid;
}

QList OAIGetMetricsSummaryResponse_metricsSummary::getScansWithMostOpenFindings() const {
    return m_scans_with_most_open_findings;
}
void OAIGetMetricsSummaryResponse_metricsSummary::setScansWithMostOpenFindings(const QList &scans_with_most_open_findings) {
    m_scans_with_most_open_findings = scans_with_most_open_findings;
    m_scans_with_most_open_findings_isSet = true;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_scans_with_most_open_findings_Set() const{
    return m_scans_with_most_open_findings_isSet;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::is_scans_with_most_open_findings_Valid() const{
    return m_scans_with_most_open_findings_isValid;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories_with_most_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scans_with_most_open_critical_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scans_with_most_open_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMetricsSummaryResponse_metricsSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
