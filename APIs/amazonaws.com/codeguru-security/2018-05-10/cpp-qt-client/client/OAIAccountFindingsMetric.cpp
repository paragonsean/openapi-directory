/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountFindingsMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountFindingsMetric::OAIAccountFindingsMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountFindingsMetric::OAIAccountFindingsMetric() {
    this->initializeModel();
}

OAIAccountFindingsMetric::~OAIAccountFindingsMetric() {}

void OAIAccountFindingsMetric::initializeModel() {

    m_closed_findings_isSet = false;
    m_closed_findings_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_mean_time_to_close_isSet = false;
    m_mean_time_to_close_isValid = false;

    m_new_findings_isSet = false;
    m_new_findings_isValid = false;

    m_open_findings_isSet = false;
    m_open_findings_isValid = false;
}

void OAIAccountFindingsMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountFindingsMetric::fromJsonObject(QJsonObject json) {

    m_closed_findings_isValid = ::OpenAPI::fromJsonValue(m_closed_findings, json[QString("closedFindings")]);
    m_closed_findings_isSet = !json[QString("closedFindings")].isNull() && m_closed_findings_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_mean_time_to_close_isValid = ::OpenAPI::fromJsonValue(m_mean_time_to_close, json[QString("meanTimeToClose")]);
    m_mean_time_to_close_isSet = !json[QString("meanTimeToClose")].isNull() && m_mean_time_to_close_isValid;

    m_new_findings_isValid = ::OpenAPI::fromJsonValue(m_new_findings, json[QString("newFindings")]);
    m_new_findings_isSet = !json[QString("newFindings")].isNull() && m_new_findings_isValid;

    m_open_findings_isValid = ::OpenAPI::fromJsonValue(m_open_findings, json[QString("openFindings")]);
    m_open_findings_isSet = !json[QString("openFindings")].isNull() && m_open_findings_isValid;
}

QString OAIAccountFindingsMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountFindingsMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_findings.isSet()) {
        obj.insert(QString("closedFindings"), ::OpenAPI::toJsonValue(m_closed_findings));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_mean_time_to_close.isSet()) {
        obj.insert(QString("meanTimeToClose"), ::OpenAPI::toJsonValue(m_mean_time_to_close));
    }
    if (m_new_findings.isSet()) {
        obj.insert(QString("newFindings"), ::OpenAPI::toJsonValue(m_new_findings));
    }
    if (m_open_findings.isSet()) {
        obj.insert(QString("openFindings"), ::OpenAPI::toJsonValue(m_open_findings));
    }
    return obj;
}

OAIAccountFindingsMetric_closedFindings OAIAccountFindingsMetric::getClosedFindings() const {
    return m_closed_findings;
}
void OAIAccountFindingsMetric::setClosedFindings(const OAIAccountFindingsMetric_closedFindings &closed_findings) {
    m_closed_findings = closed_findings;
    m_closed_findings_isSet = true;
}

bool OAIAccountFindingsMetric::is_closed_findings_Set() const{
    return m_closed_findings_isSet;
}

bool OAIAccountFindingsMetric::is_closed_findings_Valid() const{
    return m_closed_findings_isValid;
}

QDateTime OAIAccountFindingsMetric::getDate() const {
    return m_date;
}
void OAIAccountFindingsMetric::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAccountFindingsMetric::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAccountFindingsMetric::is_date_Valid() const{
    return m_date_isValid;
}

OAIAccountFindingsMetric_meanTimeToClose OAIAccountFindingsMetric::getMeanTimeToClose() const {
    return m_mean_time_to_close;
}
void OAIAccountFindingsMetric::setMeanTimeToClose(const OAIAccountFindingsMetric_meanTimeToClose &mean_time_to_close) {
    m_mean_time_to_close = mean_time_to_close;
    m_mean_time_to_close_isSet = true;
}

bool OAIAccountFindingsMetric::is_mean_time_to_close_Set() const{
    return m_mean_time_to_close_isSet;
}

bool OAIAccountFindingsMetric::is_mean_time_to_close_Valid() const{
    return m_mean_time_to_close_isValid;
}

OAIAccountFindingsMetric_newFindings OAIAccountFindingsMetric::getNewFindings() const {
    return m_new_findings;
}
void OAIAccountFindingsMetric::setNewFindings(const OAIAccountFindingsMetric_newFindings &new_findings) {
    m_new_findings = new_findings;
    m_new_findings_isSet = true;
}

bool OAIAccountFindingsMetric::is_new_findings_Set() const{
    return m_new_findings_isSet;
}

bool OAIAccountFindingsMetric::is_new_findings_Valid() const{
    return m_new_findings_isValid;
}

OAIAccountFindingsMetric_openFindings OAIAccountFindingsMetric::getOpenFindings() const {
    return m_open_findings;
}
void OAIAccountFindingsMetric::setOpenFindings(const OAIAccountFindingsMetric_openFindings &open_findings) {
    m_open_findings = open_findings;
    m_open_findings_isSet = true;
}

bool OAIAccountFindingsMetric::is_open_findings_Set() const{
    return m_open_findings_isSet;
}

bool OAIAccountFindingsMetric::is_open_findings_Valid() const{
    return m_open_findings_isValid;
}

bool OAIAccountFindingsMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_time_to_close.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountFindingsMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
