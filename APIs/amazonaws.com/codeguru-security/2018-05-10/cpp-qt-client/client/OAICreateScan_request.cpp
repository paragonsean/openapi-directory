/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateScan_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateScan_request::OAICreateScan_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateScan_request::OAICreateScan_request() {
    this->initializeModel();
}

OAICreateScan_request::~OAICreateScan_request() {}

void OAICreateScan_request::initializeModel() {

    m_analysis_type_isSet = false;
    m_analysis_type_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_scan_name_isSet = false;
    m_scan_name_isValid = false;

    m_scan_type_isSet = false;
    m_scan_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateScan_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateScan_request::fromJsonObject(QJsonObject json) {

    m_analysis_type_isValid = ::OpenAPI::fromJsonValue(m_analysis_type, json[QString("analysisType")]);
    m_analysis_type_isSet = !json[QString("analysisType")].isNull() && m_analysis_type_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_scan_name_isValid = ::OpenAPI::fromJsonValue(m_scan_name, json[QString("scanName")]);
    m_scan_name_isSet = !json[QString("scanName")].isNull() && m_scan_name_isValid;

    m_scan_type_isValid = ::OpenAPI::fromJsonValue(m_scan_type, json[QString("scanType")]);
    m_scan_type_isSet = !json[QString("scanType")].isNull() && m_scan_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateScan_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateScan_request::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_type_isSet) {
        obj.insert(QString("analysisType"), ::OpenAPI::toJsonValue(m_analysis_type));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_resource_id.isSet()) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_scan_name_isSet) {
        obj.insert(QString("scanName"), ::OpenAPI::toJsonValue(m_scan_name));
    }
    if (m_scan_type_isSet) {
        obj.insert(QString("scanType"), ::OpenAPI::toJsonValue(m_scan_type));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateScan_request::getAnalysisType() const {
    return m_analysis_type;
}
void OAICreateScan_request::setAnalysisType(const QString &analysis_type) {
    m_analysis_type = analysis_type;
    m_analysis_type_isSet = true;
}

bool OAICreateScan_request::is_analysis_type_Set() const{
    return m_analysis_type_isSet;
}

bool OAICreateScan_request::is_analysis_type_Valid() const{
    return m_analysis_type_isValid;
}

QString OAICreateScan_request::getClientToken() const {
    return m_client_token;
}
void OAICreateScan_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateScan_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateScan_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateScan_request_resourceId OAICreateScan_request::getResourceId() const {
    return m_resource_id;
}
void OAICreateScan_request::setResourceId(const OAICreateScan_request_resourceId &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICreateScan_request::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICreateScan_request::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAICreateScan_request::getScanName() const {
    return m_scan_name;
}
void OAICreateScan_request::setScanName(const QString &scan_name) {
    m_scan_name = scan_name;
    m_scan_name_isSet = true;
}

bool OAICreateScan_request::is_scan_name_Set() const{
    return m_scan_name_isSet;
}

bool OAICreateScan_request::is_scan_name_Valid() const{
    return m_scan_name_isValid;
}

QString OAICreateScan_request::getScanType() const {
    return m_scan_type;
}
void OAICreateScan_request::setScanType(const QString &scan_type) {
    m_scan_type = scan_type;
    m_scan_type_isSet = true;
}

bool OAICreateScan_request::is_scan_type_Set() const{
    return m_scan_type_isSet;
}

bool OAICreateScan_request::is_scan_type_Valid() const{
    return m_scan_type_isValid;
}

QMap<QString, QString> OAICreateScan_request::getTags() const {
    return m_tags;
}
void OAICreateScan_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateScan_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateScan_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateScan_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateScan_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_id_isValid && m_scan_name_isValid && true;
}

} // namespace OpenAPI
