/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeverity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeverity::OAISeverity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeverity::OAISeverity() {
    this->initializeModel();
}

OAISeverity::~OAISeverity() {}

void OAISeverity::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISeverity::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISeverity::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Critical", Qt::CaseInsensitive) == 0) {
        m_value = eOAISeverity::CRITICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("High", Qt::CaseInsensitive) == 0) {
        m_value = eOAISeverity::HIGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Medium", Qt::CaseInsensitive) == 0) {
        m_value = eOAISeverity::MEDIUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Low", Qt::CaseInsensitive) == 0) {
        m_value = eOAISeverity::LOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Info", Qt::CaseInsensitive) == 0) {
        m_value = eOAISeverity::INFO;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISeverity::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISeverity::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISeverity::CRITICAL:
            val = "Critical";
            break;
        case eOAISeverity::HIGH:
            val = "High";
            break;
        case eOAISeverity::MEDIUM:
            val = "Medium";
            break;
        case eOAISeverity::LOW:
            val = "Low";
            break;
        case eOAISeverity::INFO:
            val = "Info";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISeverity::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISeverity::eOAISeverity OAISeverity::getValue() const {
    return m_value;
}

void OAISeverity::setValue(const OAISeverity::eOAISeverity& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISeverity::isSet() const {
    
    return m_value_isSet;
}

bool OAISeverity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
