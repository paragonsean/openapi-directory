/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountFindingsMetric_newFindings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountFindingsMetric_newFindings::OAIAccountFindingsMetric_newFindings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountFindingsMetric_newFindings::OAIAccountFindingsMetric_newFindings() {
    this->initializeModel();
}

OAIAccountFindingsMetric_newFindings::~OAIAccountFindingsMetric_newFindings() {}

void OAIAccountFindingsMetric_newFindings::initializeModel() {

    m_critical_isSet = false;
    m_critical_isValid = false;

    m_high_isSet = false;
    m_high_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_low_isSet = false;
    m_low_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;
}

void OAIAccountFindingsMetric_newFindings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountFindingsMetric_newFindings::fromJsonObject(QJsonObject json) {

    m_critical_isValid = ::OpenAPI::fromJsonValue(m_critical, json[QString("critical")]);
    m_critical_isSet = !json[QString("critical")].isNull() && m_critical_isValid;

    m_high_isValid = ::OpenAPI::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_low_isValid = ::OpenAPI::fromJsonValue(m_low, json[QString("low")]);
    m_low_isSet = !json[QString("low")].isNull() && m_low_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;
}

QString OAIAccountFindingsMetric_newFindings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountFindingsMetric_newFindings::asJsonObject() const {
    QJsonObject obj;
    if (m_critical_isSet) {
        obj.insert(QString("critical"), ::OpenAPI::toJsonValue(m_critical));
    }
    if (m_high_isSet) {
        obj.insert(QString("high"), ::OpenAPI::toJsonValue(m_high));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_low_isSet) {
        obj.insert(QString("low"), ::OpenAPI::toJsonValue(m_low));
    }
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    return obj;
}

double OAIAccountFindingsMetric_newFindings::getCritical() const {
    return m_critical;
}
void OAIAccountFindingsMetric_newFindings::setCritical(const double &critical) {
    m_critical = critical;
    m_critical_isSet = true;
}

bool OAIAccountFindingsMetric_newFindings::is_critical_Set() const{
    return m_critical_isSet;
}

bool OAIAccountFindingsMetric_newFindings::is_critical_Valid() const{
    return m_critical_isValid;
}

double OAIAccountFindingsMetric_newFindings::getHigh() const {
    return m_high;
}
void OAIAccountFindingsMetric_newFindings::setHigh(const double &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OAIAccountFindingsMetric_newFindings::is_high_Set() const{
    return m_high_isSet;
}

bool OAIAccountFindingsMetric_newFindings::is_high_Valid() const{
    return m_high_isValid;
}

double OAIAccountFindingsMetric_newFindings::getInfo() const {
    return m_info;
}
void OAIAccountFindingsMetric_newFindings::setInfo(const double &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIAccountFindingsMetric_newFindings::is_info_Set() const{
    return m_info_isSet;
}

bool OAIAccountFindingsMetric_newFindings::is_info_Valid() const{
    return m_info_isValid;
}

double OAIAccountFindingsMetric_newFindings::getLow() const {
    return m_low;
}
void OAIAccountFindingsMetric_newFindings::setLow(const double &low) {
    m_low = low;
    m_low_isSet = true;
}

bool OAIAccountFindingsMetric_newFindings::is_low_Set() const{
    return m_low_isSet;
}

bool OAIAccountFindingsMetric_newFindings::is_low_Valid() const{
    return m_low_isValid;
}

double OAIAccountFindingsMetric_newFindings::getMedium() const {
    return m_medium;
}
void OAIAccountFindingsMetric_newFindings::setMedium(const double &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIAccountFindingsMetric_newFindings::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIAccountFindingsMetric_newFindings::is_medium_Valid() const{
    return m_medium_isValid;
}

bool OAIAccountFindingsMetric_newFindings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_critical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountFindingsMetric_newFindings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
