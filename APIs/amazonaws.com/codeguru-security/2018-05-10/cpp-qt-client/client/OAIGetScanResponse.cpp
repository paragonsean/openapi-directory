/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetScanResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetScanResponse::OAIGetScanResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetScanResponse::OAIGetScanResponse() {
    this->initializeModel();
}

OAIGetScanResponse::~OAIGetScanResponse() {}

void OAIGetScanResponse::initializeModel() {

    m_analysis_type_isSet = false;
    m_analysis_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_number_of_revisions_isSet = false;
    m_number_of_revisions_isValid = false;

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_scan_name_isSet = false;
    m_scan_name_isValid = false;

    m_scan_name_arn_isSet = false;
    m_scan_name_arn_isValid = false;

    m_scan_state_isSet = false;
    m_scan_state_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIGetScanResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetScanResponse::fromJsonObject(QJsonObject json) {

    m_analysis_type_isValid = ::OpenAPI::fromJsonValue(m_analysis_type, json[QString("analysisType")]);
    m_analysis_type_isSet = !json[QString("analysisType")].isNull() && m_analysis_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_number_of_revisions_isValid = ::OpenAPI::fromJsonValue(m_number_of_revisions, json[QString("numberOfRevisions")]);
    m_number_of_revisions_isSet = !json[QString("numberOfRevisions")].isNull() && m_number_of_revisions_isValid;

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("runId")]);
    m_run_id_isSet = !json[QString("runId")].isNull() && m_run_id_isValid;

    m_scan_name_isValid = ::OpenAPI::fromJsonValue(m_scan_name, json[QString("scanName")]);
    m_scan_name_isSet = !json[QString("scanName")].isNull() && m_scan_name_isValid;

    m_scan_name_arn_isValid = ::OpenAPI::fromJsonValue(m_scan_name_arn, json[QString("scanNameArn")]);
    m_scan_name_arn_isSet = !json[QString("scanNameArn")].isNull() && m_scan_name_arn_isValid;

    m_scan_state_isValid = ::OpenAPI::fromJsonValue(m_scan_state, json[QString("scanState")]);
    m_scan_state_isSet = !json[QString("scanState")].isNull() && m_scan_state_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIGetScanResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetScanResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_type.isSet()) {
        obj.insert(QString("analysisType"), ::OpenAPI::toJsonValue(m_analysis_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_number_of_revisions_isSet) {
        obj.insert(QString("numberOfRevisions"), ::OpenAPI::toJsonValue(m_number_of_revisions));
    }
    if (m_run_id_isSet) {
        obj.insert(QString("runId"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_scan_name_isSet) {
        obj.insert(QString("scanName"), ::OpenAPI::toJsonValue(m_scan_name));
    }
    if (m_scan_name_arn_isSet) {
        obj.insert(QString("scanNameArn"), ::OpenAPI::toJsonValue(m_scan_name_arn));
    }
    if (m_scan_state.isSet()) {
        obj.insert(QString("scanState"), ::OpenAPI::toJsonValue(m_scan_state));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIAnalysisType OAIGetScanResponse::getAnalysisType() const {
    return m_analysis_type;
}
void OAIGetScanResponse::setAnalysisType(const OAIAnalysisType &analysis_type) {
    m_analysis_type = analysis_type;
    m_analysis_type_isSet = true;
}

bool OAIGetScanResponse::is_analysis_type_Set() const{
    return m_analysis_type_isSet;
}

bool OAIGetScanResponse::is_analysis_type_Valid() const{
    return m_analysis_type_isValid;
}

QDateTime OAIGetScanResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetScanResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetScanResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetScanResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIGetScanResponse::getNumberOfRevisions() const {
    return m_number_of_revisions;
}
void OAIGetScanResponse::setNumberOfRevisions(const qint32 &number_of_revisions) {
    m_number_of_revisions = number_of_revisions;
    m_number_of_revisions_isSet = true;
}

bool OAIGetScanResponse::is_number_of_revisions_Set() const{
    return m_number_of_revisions_isSet;
}

bool OAIGetScanResponse::is_number_of_revisions_Valid() const{
    return m_number_of_revisions_isValid;
}

QString OAIGetScanResponse::getRunId() const {
    return m_run_id;
}
void OAIGetScanResponse::setRunId(const QString &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIGetScanResponse::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIGetScanResponse::is_run_id_Valid() const{
    return m_run_id_isValid;
}

QString OAIGetScanResponse::getScanName() const {
    return m_scan_name;
}
void OAIGetScanResponse::setScanName(const QString &scan_name) {
    m_scan_name = scan_name;
    m_scan_name_isSet = true;
}

bool OAIGetScanResponse::is_scan_name_Set() const{
    return m_scan_name_isSet;
}

bool OAIGetScanResponse::is_scan_name_Valid() const{
    return m_scan_name_isValid;
}

QString OAIGetScanResponse::getScanNameArn() const {
    return m_scan_name_arn;
}
void OAIGetScanResponse::setScanNameArn(const QString &scan_name_arn) {
    m_scan_name_arn = scan_name_arn;
    m_scan_name_arn_isSet = true;
}

bool OAIGetScanResponse::is_scan_name_arn_Set() const{
    return m_scan_name_arn_isSet;
}

bool OAIGetScanResponse::is_scan_name_arn_Valid() const{
    return m_scan_name_arn_isValid;
}

OAIScanState OAIGetScanResponse::getScanState() const {
    return m_scan_state;
}
void OAIGetScanResponse::setScanState(const OAIScanState &scan_state) {
    m_scan_state = scan_state;
    m_scan_state_isSet = true;
}

bool OAIGetScanResponse::is_scan_state_Set() const{
    return m_scan_state_isSet;
}

bool OAIGetScanResponse::is_scan_state_Valid() const{
    return m_scan_state_isValid;
}

QDateTime OAIGetScanResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetScanResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetScanResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetScanResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIGetScanResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_revisions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_name_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetScanResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_type_isValid && m_created_at_isValid && m_run_id_isValid && m_scan_name_isValid && m_scan_state_isValid && true;
}

} // namespace OpenAPI
