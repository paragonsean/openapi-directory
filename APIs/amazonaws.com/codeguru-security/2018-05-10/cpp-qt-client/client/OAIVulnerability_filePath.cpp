/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerability_filePath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerability_filePath::OAIVulnerability_filePath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerability_filePath::OAIVulnerability_filePath() {
    this->initializeModel();
}

OAIVulnerability_filePath::~OAIVulnerability_filePath() {}

void OAIVulnerability_filePath::initializeModel() {

    m_code_snippet_isSet = false;
    m_code_snippet_isValid = false;

    m_end_line_isSet = false;
    m_end_line_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_start_line_isSet = false;
    m_start_line_isValid = false;
}

void OAIVulnerability_filePath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerability_filePath::fromJsonObject(QJsonObject json) {

    m_code_snippet_isValid = ::OpenAPI::fromJsonValue(m_code_snippet, json[QString("codeSnippet")]);
    m_code_snippet_isSet = !json[QString("codeSnippet")].isNull() && m_code_snippet_isValid;

    m_end_line_isValid = ::OpenAPI::fromJsonValue(m_end_line, json[QString("endLine")]);
    m_end_line_isSet = !json[QString("endLine")].isNull() && m_end_line_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_start_line_isValid = ::OpenAPI::fromJsonValue(m_start_line, json[QString("startLine")]);
    m_start_line_isSet = !json[QString("startLine")].isNull() && m_start_line_isValid;
}

QString OAIVulnerability_filePath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerability_filePath::asJsonObject() const {
    QJsonObject obj;
    if (m_code_snippet.isSet()) {
        obj.insert(QString("codeSnippet"), ::OpenAPI::toJsonValue(m_code_snippet));
    }
    if (m_end_line_isSet) {
        obj.insert(QString("endLine"), ::OpenAPI::toJsonValue(m_end_line));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_start_line_isSet) {
        obj.insert(QString("startLine"), ::OpenAPI::toJsonValue(m_start_line));
    }
    return obj;
}

QList OAIVulnerability_filePath::getCodeSnippet() const {
    return m_code_snippet;
}
void OAIVulnerability_filePath::setCodeSnippet(const QList &code_snippet) {
    m_code_snippet = code_snippet;
    m_code_snippet_isSet = true;
}

bool OAIVulnerability_filePath::is_code_snippet_Set() const{
    return m_code_snippet_isSet;
}

bool OAIVulnerability_filePath::is_code_snippet_Valid() const{
    return m_code_snippet_isValid;
}

qint32 OAIVulnerability_filePath::getEndLine() const {
    return m_end_line;
}
void OAIVulnerability_filePath::setEndLine(const qint32 &end_line) {
    m_end_line = end_line;
    m_end_line_isSet = true;
}

bool OAIVulnerability_filePath::is_end_line_Set() const{
    return m_end_line_isSet;
}

bool OAIVulnerability_filePath::is_end_line_Valid() const{
    return m_end_line_isValid;
}

QString OAIVulnerability_filePath::getName() const {
    return m_name;
}
void OAIVulnerability_filePath::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVulnerability_filePath::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVulnerability_filePath::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVulnerability_filePath::getPath() const {
    return m_path;
}
void OAIVulnerability_filePath::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIVulnerability_filePath::is_path_Set() const{
    return m_path_isSet;
}

bool OAIVulnerability_filePath::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIVulnerability_filePath::getStartLine() const {
    return m_start_line;
}
void OAIVulnerability_filePath::setStartLine(const qint32 &start_line) {
    m_start_line = start_line;
    m_start_line_isSet = true;
}

bool OAIVulnerability_filePath::is_start_line_Set() const{
    return m_start_line_isSet;
}

bool OAIVulnerability_filePath::is_start_line_Valid() const{
    return m_start_line_isValid;
}

bool OAIVulnerability_filePath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_snippet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_line_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerability_filePath::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
