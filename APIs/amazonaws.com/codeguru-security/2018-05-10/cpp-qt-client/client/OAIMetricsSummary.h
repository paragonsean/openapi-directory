/**
 * Amazon CodeGuru Security
 * <note> <p>Amazon CodeGuru Security is in preview release and is subject to change.</p> </note> <p>This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.</p> <p>By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the <a href=\"https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html\">Amazon CodeGuru Security User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricsSummary.h
 *
 * Information about summary metrics in an account.
 */

#ifndef OAIMetricsSummary_H
#define OAIMetricsSummary_H

#include <QJsonObject>

#include "OAIMetricsSummary_openFindings.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricsSummary_openFindings;

class OAIMetricsSummary : public OAIObject {
public:
    OAIMetricsSummary();
    OAIMetricsSummary(QString json);
    ~OAIMetricsSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCategoriesWithMostFindings() const;
    void setCategoriesWithMostFindings(const QList &categories_with_most_findings);
    bool is_categories_with_most_findings_Set() const;
    bool is_categories_with_most_findings_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    OAIMetricsSummary_openFindings getOpenFindings() const;
    void setOpenFindings(const OAIMetricsSummary_openFindings &open_findings);
    bool is_open_findings_Set() const;
    bool is_open_findings_Valid() const;

    QList getScansWithMostOpenCriticalFindings() const;
    void setScansWithMostOpenCriticalFindings(const QList &scans_with_most_open_critical_findings);
    bool is_scans_with_most_open_critical_findings_Set() const;
    bool is_scans_with_most_open_critical_findings_Valid() const;

    QList getScansWithMostOpenFindings() const;
    void setScansWithMostOpenFindings(const QList &scans_with_most_open_findings);
    bool is_scans_with_most_open_findings_Set() const;
    bool is_scans_with_most_open_findings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_categories_with_most_findings;
    bool m_categories_with_most_findings_isSet;
    bool m_categories_with_most_findings_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    OAIMetricsSummary_openFindings m_open_findings;
    bool m_open_findings_isSet;
    bool m_open_findings_isValid;

    QList m_scans_with_most_open_critical_findings;
    bool m_scans_with_most_open_critical_findings_isSet;
    bool m_scans_with_most_open_critical_findings_isValid;

    QList m_scans_with_most_open_findings;
    bool m_scans_with_most_open_findings_isSet;
    bool m_scans_with_most_open_findings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricsSummary)

#endif // OAIMetricsSummary_H
