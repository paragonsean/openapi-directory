# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_scan_request_resource_id import CreateScanRequestResourceId
import re
from openapi_server import util


class CreateScanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_type: str=None, client_token: str=None, resource_id: CreateScanRequestResourceId=None, scan_name: str=None, scan_type: str=None, tags: Dict[str, str]=None):
        """CreateScanRequest - a model defined in OpenAPI

        :param analysis_type: The analysis_type of this CreateScanRequest.
        :param client_token: The client_token of this CreateScanRequest.
        :param resource_id: The resource_id of this CreateScanRequest.
        :param scan_name: The scan_name of this CreateScanRequest.
        :param scan_type: The scan_type of this CreateScanRequest.
        :param tags: The tags of this CreateScanRequest.
        """
        self.openapi_types = {
            'analysis_type': str,
            'client_token': str,
            'resource_id': CreateScanRequestResourceId,
            'scan_name': str,
            'scan_type': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'analysis_type': 'analysisType',
            'client_token': 'clientToken',
            'resource_id': 'resourceId',
            'scan_name': 'scanName',
            'scan_type': 'scanType',
            'tags': 'tags'
        }

        self._analysis_type = analysis_type
        self._client_token = client_token
        self._resource_id = resource_id
        self._scan_name = scan_name
        self._scan_type = scan_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateScanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateScan_request of this CreateScanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_type(self):
        """Gets the analysis_type of this CreateScanRequest.

        The type of analysis you want CodeGuru Security to perform in the scan, either <code>Security</code> or <code>All</code>. The <code>Security</code> type only generates findings related to security. The <code>All</code> type generates both security findings and quality findings. Defaults to <code>Security</code> type if missing.

        :return: The analysis_type of this CreateScanRequest.
        :rtype: str
        """
        return self._analysis_type

    @analysis_type.setter
    def analysis_type(self, analysis_type):
        """Sets the analysis_type of this CreateScanRequest.

        The type of analysis you want CodeGuru Security to perform in the scan, either <code>Security</code> or <code>All</code>. The <code>Security</code> type only generates findings related to security. The <code>All</code> type generates both security findings and quality findings. Defaults to <code>Security</code> type if missing.

        :param analysis_type: The analysis_type of this CreateScanRequest.
        :type analysis_type: str
        """
        allowed_values = ["Security", "All"]  # noqa: E501
        if analysis_type not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_type` ({0}), must be one of {1}"
                .format(analysis_type, allowed_values)
            )

        self._analysis_type = analysis_type

    @property
    def client_token(self):
        """Gets the client_token of this CreateScanRequest.

        The idempotency token for the request. Amazon CodeGuru Security uses this value to prevent the accidental creation of duplicate scans if there are failures and retries.

        :return: The client_token of this CreateScanRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateScanRequest.

        The idempotency token for the request. Amazon CodeGuru Security uses this value to prevent the accidental creation of duplicate scans if there are failures and retries.

        :param client_token: The client_token of this CreateScanRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[\S]+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[\S]+$/`")

        self._client_token = client_token

    @property
    def resource_id(self):
        """Gets the resource_id of this CreateScanRequest.


        :return: The resource_id of this CreateScanRequest.
        :rtype: CreateScanRequestResourceId
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CreateScanRequest.


        :param resource_id: The resource_id of this CreateScanRequest.
        :type resource_id: CreateScanRequestResourceId
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def scan_name(self):
        """Gets the scan_name of this CreateScanRequest.

        The unique name that CodeGuru Security uses to track revisions across multiple scans of the same resource. Only allowed for a <code>STANDARD</code> scan type. If not specified, it will be auto generated. 

        :return: The scan_name of this CreateScanRequest.
        :rtype: str
        """
        return self._scan_name

    @scan_name.setter
    def scan_name(self, scan_name):
        """Sets the scan_name of this CreateScanRequest.

        The unique name that CodeGuru Security uses to track revisions across multiple scans of the same resource. Only allowed for a <code>STANDARD</code> scan type. If not specified, it will be auto generated. 

        :param scan_name: The scan_name of this CreateScanRequest.
        :type scan_name: str
        """
        if scan_name is None:
            raise ValueError("Invalid value for `scan_name`, must not be `None`")
        if scan_name is not None and len(scan_name) > 140:
            raise ValueError("Invalid value for `scan_name`, length must be less than or equal to `140`")
        if scan_name is not None and len(scan_name) < 1:
            raise ValueError("Invalid value for `scan_name`, length must be greater than or equal to `1`")
        if scan_name is not None and not re.search(r'^[a-zA-Z0-9-_$:.]*$', scan_name):
            raise ValueError("Invalid value for `scan_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_$:.]*$/`")

        self._scan_name = scan_name

    @property
    def scan_type(self):
        """Gets the scan_type of this CreateScanRequest.

        <p>The type of scan, either <code>Standard</code> or <code>Express</code>. Defaults to <code>Standard</code> type if missing.</p> <p> <code>Express</code> scans run on limited resources and use a limited set of detectors to analyze your code in near-real time. <code>Standard</code> scans have standard resource limits and use the full set of detectors to analyze your code.</p>

        :return: The scan_type of this CreateScanRequest.
        :rtype: str
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this CreateScanRequest.

        <p>The type of scan, either <code>Standard</code> or <code>Express</code>. Defaults to <code>Standard</code> type if missing.</p> <p> <code>Express</code> scans run on limited resources and use a limited set of detectors to analyze your code in near-real time. <code>Standard</code> scans have standard resource limits and use the full set of detectors to analyze your code.</p>

        :param scan_type: The scan_type of this CreateScanRequest.
        :type scan_type: str
        """
        allowed_values = ["Standard", "Express"]  # noqa: E501
        if scan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scan_type` ({0}), must be one of {1}"
                .format(scan_type, allowed_values)
            )

        self._scan_type = scan_type

    @property
    def tags(self):
        """Gets the tags of this CreateScanRequest.

        <p>An array of key-value pairs used to tag a scan. A tag is a custom attribute label with two parts:</p> <ul> <li> <p>A tag key. For example, <code>CostCenter</code>, <code>Environment</code>, or <code>Secret</code>. Tag keys are case sensitive.</p> </li> <li> <p>An optional tag value field. For example, <code>111122223333</code>, <code>Production</code>, or a team name. Omitting the tag value is the same as using an empty string. Tag values are case sensitive.</p> </li> </ul>

        :return: The tags of this CreateScanRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateScanRequest.

        <p>An array of key-value pairs used to tag a scan. A tag is a custom attribute label with two parts:</p> <ul> <li> <p>A tag key. For example, <code>CostCenter</code>, <code>Environment</code>, or <code>Secret</code>. Tag keys are case sensitive.</p> </li> <li> <p>An optional tag value field. For example, <code>111122223333</code>, <code>Production</code>, or a team name. Omitting the tag value is the same as using an empty string. Tag values are case sensitive.</p> </li> </ul>

        :param tags: The tags of this CreateScanRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
