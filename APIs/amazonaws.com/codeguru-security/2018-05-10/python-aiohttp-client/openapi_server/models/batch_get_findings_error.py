# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_code import ErrorCode
from openapi_server import util


class BatchGetFindingsError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: ErrorCode=None, finding_id: str=None, message: str=None, scan_name: str=None):
        """BatchGetFindingsError - a model defined in OpenAPI

        :param error_code: The error_code of this BatchGetFindingsError.
        :param finding_id: The finding_id of this BatchGetFindingsError.
        :param message: The message of this BatchGetFindingsError.
        :param scan_name: The scan_name of this BatchGetFindingsError.
        """
        self.openapi_types = {
            'error_code': ErrorCode,
            'finding_id': str,
            'message': str,
            'scan_name': str
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'finding_id': 'findingId',
            'message': 'message',
            'scan_name': 'scanName'
        }

        self._error_code = error_code
        self._finding_id = finding_id
        self._message = message
        self._scan_name = scan_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetFindingsError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetFindingsError of this BatchGetFindingsError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this BatchGetFindingsError.


        :return: The error_code of this BatchGetFindingsError.
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this BatchGetFindingsError.


        :param error_code: The error_code of this BatchGetFindingsError.
        :type error_code: ErrorCode
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def finding_id(self):
        """Gets the finding_id of this BatchGetFindingsError.


        :return: The finding_id of this BatchGetFindingsError.
        :rtype: str
        """
        return self._finding_id

    @finding_id.setter
    def finding_id(self, finding_id):
        """Sets the finding_id of this BatchGetFindingsError.


        :param finding_id: The finding_id of this BatchGetFindingsError.
        :type finding_id: str
        """
        if finding_id is None:
            raise ValueError("Invalid value for `finding_id`, must not be `None`")

        self._finding_id = finding_id

    @property
    def message(self):
        """Gets the message of this BatchGetFindingsError.


        :return: The message of this BatchGetFindingsError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BatchGetFindingsError.


        :param message: The message of this BatchGetFindingsError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def scan_name(self):
        """Gets the scan_name of this BatchGetFindingsError.


        :return: The scan_name of this BatchGetFindingsError.
        :rtype: str
        """
        return self._scan_name

    @scan_name.setter
    def scan_name(self, scan_name):
        """Sets the scan_name of this BatchGetFindingsError.


        :param scan_name: The scan_name of this BatchGetFindingsError.
        :type scan_name: str
        """
        if scan_name is None:
            raise ValueError("Invalid value for `scan_name`, must not be `None`")

        self._scan_name = scan_name
