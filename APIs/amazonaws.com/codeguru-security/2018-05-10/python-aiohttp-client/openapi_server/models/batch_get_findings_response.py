# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetFindingsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_findings: List=None, findings: List=None):
        """BatchGetFindingsResponse - a model defined in OpenAPI

        :param failed_findings: The failed_findings of this BatchGetFindingsResponse.
        :param findings: The findings of this BatchGetFindingsResponse.
        """
        self.openapi_types = {
            'failed_findings': List,
            'findings': List
        }

        self.attribute_map = {
            'failed_findings': 'failedFindings',
            'findings': 'findings'
        }

        self._failed_findings = failed_findings
        self._findings = findings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetFindingsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetFindingsResponse of this BatchGetFindingsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_findings(self):
        """Gets the failed_findings of this BatchGetFindingsResponse.


        :return: The failed_findings of this BatchGetFindingsResponse.
        :rtype: List
        """
        return self._failed_findings

    @failed_findings.setter
    def failed_findings(self, failed_findings):
        """Sets the failed_findings of this BatchGetFindingsResponse.


        :param failed_findings: The failed_findings of this BatchGetFindingsResponse.
        :type failed_findings: List
        """
        if failed_findings is None:
            raise ValueError("Invalid value for `failed_findings`, must not be `None`")

        self._failed_findings = failed_findings

    @property
    def findings(self):
        """Gets the findings of this BatchGetFindingsResponse.


        :return: The findings of this BatchGetFindingsResponse.
        :rtype: List
        """
        return self._findings

    @findings.setter
    def findings(self, findings):
        """Sets the findings of this BatchGetFindingsResponse.


        :param findings: The findings of this BatchGetFindingsResponse.
        :type findings: List
        """
        if findings is None:
            raise ValueError("Invalid value for `findings`, must not be `None`")

        self._findings = findings
