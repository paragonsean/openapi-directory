# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.finding_identifier import FindingIdentifier
from openapi_server import util


class BatchGetFindingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, finding_identifiers: List[FindingIdentifier]=None):
        """BatchGetFindingsRequest - a model defined in OpenAPI

        :param finding_identifiers: The finding_identifiers of this BatchGetFindingsRequest.
        """
        self.openapi_types = {
            'finding_identifiers': List[FindingIdentifier]
        }

        self.attribute_map = {
            'finding_identifiers': 'findingIdentifiers'
        }

        self._finding_identifiers = finding_identifiers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetFindingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetFindings_request of this BatchGetFindingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def finding_identifiers(self):
        """Gets the finding_identifiers of this BatchGetFindingsRequest.

        A list of finding identifiers. Each identifier consists of a <code>scanName</code> and a <code>findingId</code>. You retrieve the <code>findingId</code> when you call <code>GetFindings</code>.

        :return: The finding_identifiers of this BatchGetFindingsRequest.
        :rtype: List[FindingIdentifier]
        """
        return self._finding_identifiers

    @finding_identifiers.setter
    def finding_identifiers(self, finding_identifiers):
        """Sets the finding_identifiers of this BatchGetFindingsRequest.

        A list of finding identifiers. Each identifier consists of a <code>scanName</code> and a <code>findingId</code>. You retrieve the <code>findingId</code> when you call <code>GetFindings</code>.

        :param finding_identifiers: The finding_identifiers of this BatchGetFindingsRequest.
        :type finding_identifiers: List[FindingIdentifier]
        """
        if finding_identifiers is None:
            raise ValueError("Invalid value for `finding_identifiers`, must not be `None`")
        if finding_identifiers is not None and len(finding_identifiers) > 25:
            raise ValueError("Invalid value for `finding_identifiers`, number of items must be less than or equal to `25`")
        if finding_identifiers is not None and len(finding_identifiers) < 1:
            raise ValueError("Invalid value for `finding_identifiers`, number of items must be greater than or equal to `1`")

        self._finding_identifiers = finding_identifiers
