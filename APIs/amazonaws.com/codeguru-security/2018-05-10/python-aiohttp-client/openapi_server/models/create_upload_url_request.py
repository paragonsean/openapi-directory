# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateUploadUrlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scan_name: str=None):
        """CreateUploadUrlRequest - a model defined in OpenAPI

        :param scan_name: The scan_name of this CreateUploadUrlRequest.
        """
        self.openapi_types = {
            'scan_name': str
        }

        self.attribute_map = {
            'scan_name': 'scanName'
        }

        self._scan_name = scan_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUploadUrlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUploadUrl_request of this CreateUploadUrlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scan_name(self):
        """Gets the scan_name of this CreateUploadUrlRequest.

        The name of the scan that will use the uploaded resource. CodeGuru Security uses the unique scan name to track revisions across multiple scans of the same resource. Use this <code>scanName</code> when you call <code>CreateScan</code> on the code resource you upload to this URL.

        :return: The scan_name of this CreateUploadUrlRequest.
        :rtype: str
        """
        return self._scan_name

    @scan_name.setter
    def scan_name(self, scan_name):
        """Sets the scan_name of this CreateUploadUrlRequest.

        The name of the scan that will use the uploaded resource. CodeGuru Security uses the unique scan name to track revisions across multiple scans of the same resource. Use this <code>scanName</code> when you call <code>CreateScan</code> on the code resource you upload to this URL.

        :param scan_name: The scan_name of this CreateUploadUrlRequest.
        :type scan_name: str
        """
        if scan_name is None:
            raise ValueError("Invalid value for `scan_name`, must not be `None`")
        if scan_name is not None and len(scan_name) > 140:
            raise ValueError("Invalid value for `scan_name`, length must be less than or equal to `140`")
        if scan_name is not None and len(scan_name) < 1:
            raise ValueError("Invalid value for `scan_name`, length must be greater than or equal to `1`")
        if scan_name is not None and not re.search(r'^[a-zA-Z0-9-_$:.]*$', scan_name):
            raise ValueError("Invalid value for `scan_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_$:.]*$/`")

        self._scan_name = scan_name
