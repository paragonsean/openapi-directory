# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateUploadUrlResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_artifact_id: str=None, request_headers: Dict=None, s3_url: str=None):
        """CreateUploadUrlResponse - a model defined in OpenAPI

        :param code_artifact_id: The code_artifact_id of this CreateUploadUrlResponse.
        :param request_headers: The request_headers of this CreateUploadUrlResponse.
        :param s3_url: The s3_url of this CreateUploadUrlResponse.
        """
        self.openapi_types = {
            'code_artifact_id': str,
            'request_headers': Dict,
            's3_url': str
        }

        self.attribute_map = {
            'code_artifact_id': 'codeArtifactId',
            'request_headers': 'requestHeaders',
            's3_url': 's3Url'
        }

        self._code_artifact_id = code_artifact_id
        self._request_headers = request_headers
        self._s3_url = s3_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUploadUrlResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUploadUrlResponse of this CreateUploadUrlResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_artifact_id(self):
        """Gets the code_artifact_id of this CreateUploadUrlResponse.


        :return: The code_artifact_id of this CreateUploadUrlResponse.
        :rtype: str
        """
        return self._code_artifact_id

    @code_artifact_id.setter
    def code_artifact_id(self, code_artifact_id):
        """Sets the code_artifact_id of this CreateUploadUrlResponse.


        :param code_artifact_id: The code_artifact_id of this CreateUploadUrlResponse.
        :type code_artifact_id: str
        """
        if code_artifact_id is None:
            raise ValueError("Invalid value for `code_artifact_id`, must not be `None`")

        self._code_artifact_id = code_artifact_id

    @property
    def request_headers(self):
        """Gets the request_headers of this CreateUploadUrlResponse.


        :return: The request_headers of this CreateUploadUrlResponse.
        :rtype: Dict
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this CreateUploadUrlResponse.


        :param request_headers: The request_headers of this CreateUploadUrlResponse.
        :type request_headers: Dict
        """
        if request_headers is None:
            raise ValueError("Invalid value for `request_headers`, must not be `None`")

        self._request_headers = request_headers

    @property
    def s3_url(self):
        """Gets the s3_url of this CreateUploadUrlResponse.


        :return: The s3_url of this CreateUploadUrlResponse.
        :rtype: str
        """
        return self._s3_url

    @s3_url.setter
    def s3_url(self, s3_url):
        """Sets the s3_url of this CreateUploadUrlResponse.


        :param s3_url: The s3_url of this CreateUploadUrlResponse.
        :type s3_url: str
        """
        if s3_url is None:
            raise ValueError("Invalid value for `s3_url`, must not be `None`")

        self._s3_url = s3_url
