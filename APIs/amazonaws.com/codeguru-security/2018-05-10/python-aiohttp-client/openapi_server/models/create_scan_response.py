# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_scan_response_resource_id import CreateScanResponseResourceId
from openapi_server.models.scan_state import ScanState
from openapi_server import util


class CreateScanResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id: CreateScanResponseResourceId=None, run_id: str=None, scan_name: str=None, scan_name_arn: str=None, scan_state: ScanState=None):
        """CreateScanResponse - a model defined in OpenAPI

        :param resource_id: The resource_id of this CreateScanResponse.
        :param run_id: The run_id of this CreateScanResponse.
        :param scan_name: The scan_name of this CreateScanResponse.
        :param scan_name_arn: The scan_name_arn of this CreateScanResponse.
        :param scan_state: The scan_state of this CreateScanResponse.
        """
        self.openapi_types = {
            'resource_id': CreateScanResponseResourceId,
            'run_id': str,
            'scan_name': str,
            'scan_name_arn': str,
            'scan_state': ScanState
        }

        self.attribute_map = {
            'resource_id': 'resourceId',
            'run_id': 'runId',
            'scan_name': 'scanName',
            'scan_name_arn': 'scanNameArn',
            'scan_state': 'scanState'
        }

        self._resource_id = resource_id
        self._run_id = run_id
        self._scan_name = scan_name
        self._scan_name_arn = scan_name_arn
        self._scan_state = scan_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateScanResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateScanResponse of this CreateScanResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self):
        """Gets the resource_id of this CreateScanResponse.


        :return: The resource_id of this CreateScanResponse.
        :rtype: CreateScanResponseResourceId
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CreateScanResponse.


        :param resource_id: The resource_id of this CreateScanResponse.
        :type resource_id: CreateScanResponseResourceId
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def run_id(self):
        """Gets the run_id of this CreateScanResponse.


        :return: The run_id of this CreateScanResponse.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this CreateScanResponse.


        :param run_id: The run_id of this CreateScanResponse.
        :type run_id: str
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")

        self._run_id = run_id

    @property
    def scan_name(self):
        """Gets the scan_name of this CreateScanResponse.


        :return: The scan_name of this CreateScanResponse.
        :rtype: str
        """
        return self._scan_name

    @scan_name.setter
    def scan_name(self, scan_name):
        """Sets the scan_name of this CreateScanResponse.


        :param scan_name: The scan_name of this CreateScanResponse.
        :type scan_name: str
        """
        if scan_name is None:
            raise ValueError("Invalid value for `scan_name`, must not be `None`")

        self._scan_name = scan_name

    @property
    def scan_name_arn(self):
        """Gets the scan_name_arn of this CreateScanResponse.


        :return: The scan_name_arn of this CreateScanResponse.
        :rtype: str
        """
        return self._scan_name_arn

    @scan_name_arn.setter
    def scan_name_arn(self, scan_name_arn):
        """Sets the scan_name_arn of this CreateScanResponse.


        :param scan_name_arn: The scan_name_arn of this CreateScanResponse.
        :type scan_name_arn: str
        """

        self._scan_name_arn = scan_name_arn

    @property
    def scan_state(self):
        """Gets the scan_state of this CreateScanResponse.


        :return: The scan_state of this CreateScanResponse.
        :rtype: ScanState
        """
        return self._scan_state

    @scan_state.setter
    def scan_state(self, scan_state):
        """Sets the scan_state of this CreateScanResponse.


        :param scan_state: The scan_state of this CreateScanResponse.
        :type scan_state: ScanState
        """
        if scan_state is None:
            raise ValueError("Invalid value for `scan_state`, must not be `None`")

        self._scan_state = scan_state
