# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountFindingsMetricMeanTimeToClose(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, critical: float=None, high: float=None, info: float=None, low: float=None, medium: float=None):
        """AccountFindingsMetricMeanTimeToClose - a model defined in OpenAPI

        :param critical: The critical of this AccountFindingsMetricMeanTimeToClose.
        :param high: The high of this AccountFindingsMetricMeanTimeToClose.
        :param info: The info of this AccountFindingsMetricMeanTimeToClose.
        :param low: The low of this AccountFindingsMetricMeanTimeToClose.
        :param medium: The medium of this AccountFindingsMetricMeanTimeToClose.
        """
        self.openapi_types = {
            'critical': float,
            'high': float,
            'info': float,
            'low': float,
            'medium': float
        }

        self.attribute_map = {
            'critical': 'critical',
            'high': 'high',
            'info': 'info',
            'low': 'low',
            'medium': 'medium'
        }

        self._critical = critical
        self._high = high
        self._info = info
        self._low = low
        self._medium = medium

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountFindingsMetricMeanTimeToClose':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountFindingsMetric_meanTimeToClose of this AccountFindingsMetricMeanTimeToClose.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def critical(self):
        """Gets the critical of this AccountFindingsMetricMeanTimeToClose.


        :return: The critical of this AccountFindingsMetricMeanTimeToClose.
        :rtype: float
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this AccountFindingsMetricMeanTimeToClose.


        :param critical: The critical of this AccountFindingsMetricMeanTimeToClose.
        :type critical: float
        """

        self._critical = critical

    @property
    def high(self):
        """Gets the high of this AccountFindingsMetricMeanTimeToClose.


        :return: The high of this AccountFindingsMetricMeanTimeToClose.
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this AccountFindingsMetricMeanTimeToClose.


        :param high: The high of this AccountFindingsMetricMeanTimeToClose.
        :type high: float
        """

        self._high = high

    @property
    def info(self):
        """Gets the info of this AccountFindingsMetricMeanTimeToClose.


        :return: The info of this AccountFindingsMetricMeanTimeToClose.
        :rtype: float
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AccountFindingsMetricMeanTimeToClose.


        :param info: The info of this AccountFindingsMetricMeanTimeToClose.
        :type info: float
        """

        self._info = info

    @property
    def low(self):
        """Gets the low of this AccountFindingsMetricMeanTimeToClose.


        :return: The low of this AccountFindingsMetricMeanTimeToClose.
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this AccountFindingsMetricMeanTimeToClose.


        :param low: The low of this AccountFindingsMetricMeanTimeToClose.
        :type low: float
        """

        self._low = low

    @property
    def medium(self):
        """Gets the medium of this AccountFindingsMetricMeanTimeToClose.


        :return: The medium of this AccountFindingsMetricMeanTimeToClose.
        :rtype: float
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this AccountFindingsMetricMeanTimeToClose.


        :param medium: The medium of this AccountFindingsMetricMeanTimeToClose.
        :type medium: float
        """

        self._medium = medium
