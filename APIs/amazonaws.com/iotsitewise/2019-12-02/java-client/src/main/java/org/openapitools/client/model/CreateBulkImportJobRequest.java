/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateBulkImportJobRequestErrorReportLocation;
import org.openapitools.client.model.CreateBulkImportJobRequestJobConfiguration;
import org.openapitools.client.model.ModelFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBulkImportJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBulkImportJobRequest {
  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_ROLE_ARN = "jobRoleArn";
  @SerializedName(SERIALIZED_NAME_JOB_ROLE_ARN)
  private String jobRoleArn;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<ModelFile> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_REPORT_LOCATION = "errorReportLocation";
  @SerializedName(SERIALIZED_NAME_ERROR_REPORT_LOCATION)
  private CreateBulkImportJobRequestErrorReportLocation errorReportLocation;

  public static final String SERIALIZED_NAME_JOB_CONFIGURATION = "jobConfiguration";
  @SerializedName(SERIALIZED_NAME_JOB_CONFIGURATION)
  private CreateBulkImportJobRequestJobConfiguration jobConfiguration;

  public CreateBulkImportJobRequest() {
  }

  public CreateBulkImportJobRequest jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * The unique name that helps identify the job request.
   * @return jobName
   */
  @javax.annotation.Nonnull
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public CreateBulkImportJobRequest jobRoleArn(String jobRoleArn) {
    this.jobRoleArn = jobRoleArn;
    return this;
  }

  /**
   * The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;ARN&lt;/a&gt; of the IAM role that allows IoT SiteWise to read Amazon S3 data.
   * @return jobRoleArn
   */
  @javax.annotation.Nonnull
  public String getJobRoleArn() {
    return jobRoleArn;
  }

  public void setJobRoleArn(String jobRoleArn) {
    this.jobRoleArn = jobRoleArn;
  }


  public CreateBulkImportJobRequest files(List<ModelFile> files) {
    this.files = files;
    return this;
  }

  public CreateBulkImportJobRequest addFilesItem(ModelFile filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * The files in the specified Amazon S3 bucket that contain your data.
   * @return files
   */
  @javax.annotation.Nonnull
  public List<ModelFile> getFiles() {
    return files;
  }

  public void setFiles(List<ModelFile> files) {
    this.files = files;
  }


  public CreateBulkImportJobRequest errorReportLocation(CreateBulkImportJobRequestErrorReportLocation errorReportLocation) {
    this.errorReportLocation = errorReportLocation;
    return this;
  }

  /**
   * Get errorReportLocation
   * @return errorReportLocation
   */
  @javax.annotation.Nonnull
  public CreateBulkImportJobRequestErrorReportLocation getErrorReportLocation() {
    return errorReportLocation;
  }

  public void setErrorReportLocation(CreateBulkImportJobRequestErrorReportLocation errorReportLocation) {
    this.errorReportLocation = errorReportLocation;
  }


  public CreateBulkImportJobRequest jobConfiguration(CreateBulkImportJobRequestJobConfiguration jobConfiguration) {
    this.jobConfiguration = jobConfiguration;
    return this;
  }

  /**
   * Get jobConfiguration
   * @return jobConfiguration
   */
  @javax.annotation.Nonnull
  public CreateBulkImportJobRequestJobConfiguration getJobConfiguration() {
    return jobConfiguration;
  }

  public void setJobConfiguration(CreateBulkImportJobRequestJobConfiguration jobConfiguration) {
    this.jobConfiguration = jobConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBulkImportJobRequest createBulkImportJobRequest = (CreateBulkImportJobRequest) o;
    return Objects.equals(this.jobName, createBulkImportJobRequest.jobName) &&
        Objects.equals(this.jobRoleArn, createBulkImportJobRequest.jobRoleArn) &&
        Objects.equals(this.files, createBulkImportJobRequest.files) &&
        Objects.equals(this.errorReportLocation, createBulkImportJobRequest.errorReportLocation) &&
        Objects.equals(this.jobConfiguration, createBulkImportJobRequest.jobConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobName, jobRoleArn, files, errorReportLocation, jobConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBulkImportJobRequest {\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobRoleArn: ").append(toIndentedString(jobRoleArn)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    errorReportLocation: ").append(toIndentedString(errorReportLocation)).append("\n");
    sb.append("    jobConfiguration: ").append(toIndentedString(jobConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobName");
    openapiFields.add("jobRoleArn");
    openapiFields.add("files");
    openapiFields.add("errorReportLocation");
    openapiFields.add("jobConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobName");
    openapiRequiredFields.add("jobRoleArn");
    openapiRequiredFields.add("files");
    openapiRequiredFields.add("errorReportLocation");
    openapiRequiredFields.add("jobConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBulkImportJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBulkImportJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBulkImportJobRequest is not found in the empty JSON string", CreateBulkImportJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBulkImportJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBulkImportJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateBulkImportJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("jobName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobName").toString()));
      }
      if (!jsonObj.get("jobRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobRoleArn").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }

      JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
      // validate the required field `files` (array)
      for (int i = 0; i < jsonArrayfiles.size(); i++) {
        ModelFile.validateJsonElement(jsonArrayfiles.get(i));
      };
      // validate the required field `errorReportLocation`
      CreateBulkImportJobRequestErrorReportLocation.validateJsonElement(jsonObj.get("errorReportLocation"));
      // validate the required field `jobConfiguration`
      CreateBulkImportJobRequestJobConfiguration.validateJsonElement(jsonObj.get("jobConfiguration"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBulkImportJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBulkImportJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBulkImportJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBulkImportJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBulkImportJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateBulkImportJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBulkImportJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBulkImportJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBulkImportJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreateBulkImportJobRequest
   */
  public static CreateBulkImportJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBulkImportJobRequest.class);
  }

  /**
   * Convert an instance of CreateBulkImportJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

