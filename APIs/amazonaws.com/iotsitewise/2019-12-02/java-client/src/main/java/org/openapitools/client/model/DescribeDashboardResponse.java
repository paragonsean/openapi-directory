/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDashboardResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDashboardResponse {
  public static final String SERIALIZED_NAME_DASHBOARD_ID = "dashboardId";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_ID)
  private String dashboardId;

  public static final String SERIALIZED_NAME_DASHBOARD_ARN = "dashboardArn";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_ARN)
  private String dashboardArn;

  public static final String SERIALIZED_NAME_DASHBOARD_NAME = "dashboardName";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_NAME)
  private String dashboardName;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_DASHBOARD_DESCRIPTION = "dashboardDescription";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_DESCRIPTION)
  private String dashboardDescription;

  public static final String SERIALIZED_NAME_DASHBOARD_DEFINITION = "dashboardDefinition";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_DEFINITION)
  private String dashboardDefinition;

  public static final String SERIALIZED_NAME_DASHBOARD_CREATION_DATE = "dashboardCreationDate";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_CREATION_DATE)
  private OffsetDateTime dashboardCreationDate;

  public static final String SERIALIZED_NAME_DASHBOARD_LAST_UPDATE_DATE = "dashboardLastUpdateDate";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_LAST_UPDATE_DATE)
  private OffsetDateTime dashboardLastUpdateDate;

  public DescribeDashboardResponse() {
  }

  public DescribeDashboardResponse dashboardId(String dashboardId) {
    this.dashboardId = dashboardId;
    return this;
  }

  /**
   * Get dashboardId
   * @return dashboardId
   */
  @javax.annotation.Nonnull
  public String getDashboardId() {
    return dashboardId;
  }

  public void setDashboardId(String dashboardId) {
    this.dashboardId = dashboardId;
  }


  public DescribeDashboardResponse dashboardArn(String dashboardArn) {
    this.dashboardArn = dashboardArn;
    return this;
  }

  /**
   * Get dashboardArn
   * @return dashboardArn
   */
  @javax.annotation.Nonnull
  public String getDashboardArn() {
    return dashboardArn;
  }

  public void setDashboardArn(String dashboardArn) {
    this.dashboardArn = dashboardArn;
  }


  public DescribeDashboardResponse dashboardName(String dashboardName) {
    this.dashboardName = dashboardName;
    return this;
  }

  /**
   * Get dashboardName
   * @return dashboardName
   */
  @javax.annotation.Nonnull
  public String getDashboardName() {
    return dashboardName;
  }

  public void setDashboardName(String dashboardName) {
    this.dashboardName = dashboardName;
  }


  public DescribeDashboardResponse projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nonnull
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public DescribeDashboardResponse dashboardDescription(String dashboardDescription) {
    this.dashboardDescription = dashboardDescription;
    return this;
  }

  /**
   * Get dashboardDescription
   * @return dashboardDescription
   */
  @javax.annotation.Nullable
  public String getDashboardDescription() {
    return dashboardDescription;
  }

  public void setDashboardDescription(String dashboardDescription) {
    this.dashboardDescription = dashboardDescription;
  }


  public DescribeDashboardResponse dashboardDefinition(String dashboardDefinition) {
    this.dashboardDefinition = dashboardDefinition;
    return this;
  }

  /**
   * Get dashboardDefinition
   * @return dashboardDefinition
   */
  @javax.annotation.Nonnull
  public String getDashboardDefinition() {
    return dashboardDefinition;
  }

  public void setDashboardDefinition(String dashboardDefinition) {
    this.dashboardDefinition = dashboardDefinition;
  }


  public DescribeDashboardResponse dashboardCreationDate(OffsetDateTime dashboardCreationDate) {
    this.dashboardCreationDate = dashboardCreationDate;
    return this;
  }

  /**
   * Get dashboardCreationDate
   * @return dashboardCreationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDashboardCreationDate() {
    return dashboardCreationDate;
  }

  public void setDashboardCreationDate(OffsetDateTime dashboardCreationDate) {
    this.dashboardCreationDate = dashboardCreationDate;
  }


  public DescribeDashboardResponse dashboardLastUpdateDate(OffsetDateTime dashboardLastUpdateDate) {
    this.dashboardLastUpdateDate = dashboardLastUpdateDate;
    return this;
  }

  /**
   * Get dashboardLastUpdateDate
   * @return dashboardLastUpdateDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDashboardLastUpdateDate() {
    return dashboardLastUpdateDate;
  }

  public void setDashboardLastUpdateDate(OffsetDateTime dashboardLastUpdateDate) {
    this.dashboardLastUpdateDate = dashboardLastUpdateDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDashboardResponse describeDashboardResponse = (DescribeDashboardResponse) o;
    return Objects.equals(this.dashboardId, describeDashboardResponse.dashboardId) &&
        Objects.equals(this.dashboardArn, describeDashboardResponse.dashboardArn) &&
        Objects.equals(this.dashboardName, describeDashboardResponse.dashboardName) &&
        Objects.equals(this.projectId, describeDashboardResponse.projectId) &&
        Objects.equals(this.dashboardDescription, describeDashboardResponse.dashboardDescription) &&
        Objects.equals(this.dashboardDefinition, describeDashboardResponse.dashboardDefinition) &&
        Objects.equals(this.dashboardCreationDate, describeDashboardResponse.dashboardCreationDate) &&
        Objects.equals(this.dashboardLastUpdateDate, describeDashboardResponse.dashboardLastUpdateDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dashboardId, dashboardArn, dashboardName, projectId, dashboardDescription, dashboardDefinition, dashboardCreationDate, dashboardLastUpdateDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDashboardResponse {\n");
    sb.append("    dashboardId: ").append(toIndentedString(dashboardId)).append("\n");
    sb.append("    dashboardArn: ").append(toIndentedString(dashboardArn)).append("\n");
    sb.append("    dashboardName: ").append(toIndentedString(dashboardName)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    dashboardDescription: ").append(toIndentedString(dashboardDescription)).append("\n");
    sb.append("    dashboardDefinition: ").append(toIndentedString(dashboardDefinition)).append("\n");
    sb.append("    dashboardCreationDate: ").append(toIndentedString(dashboardCreationDate)).append("\n");
    sb.append("    dashboardLastUpdateDate: ").append(toIndentedString(dashboardLastUpdateDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dashboardId");
    openapiFields.add("dashboardArn");
    openapiFields.add("dashboardName");
    openapiFields.add("projectId");
    openapiFields.add("dashboardDescription");
    openapiFields.add("dashboardDefinition");
    openapiFields.add("dashboardCreationDate");
    openapiFields.add("dashboardLastUpdateDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dashboardId");
    openapiRequiredFields.add("dashboardArn");
    openapiRequiredFields.add("dashboardName");
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("dashboardDefinition");
    openapiRequiredFields.add("dashboardCreationDate");
    openapiRequiredFields.add("dashboardLastUpdateDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDashboardResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDashboardResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDashboardResponse is not found in the empty JSON string", DescribeDashboardResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDashboardResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDashboardResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeDashboardResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dashboardId`
      String.validateJsonElement(jsonObj.get("dashboardId"));
      // validate the required field `dashboardArn`
      String.validateJsonElement(jsonObj.get("dashboardArn"));
      // validate the required field `dashboardName`
      String.validateJsonElement(jsonObj.get("dashboardName"));
      // validate the required field `projectId`
      String.validateJsonElement(jsonObj.get("projectId"));
      // validate the optional field `dashboardDescription`
      if (jsonObj.get("dashboardDescription") != null && !jsonObj.get("dashboardDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dashboardDescription"));
      }
      // validate the required field `dashboardDefinition`
      String.validateJsonElement(jsonObj.get("dashboardDefinition"));
      // validate the required field `dashboardCreationDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("dashboardCreationDate"));
      // validate the required field `dashboardLastUpdateDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("dashboardLastUpdateDate"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDashboardResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDashboardResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDashboardResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDashboardResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDashboardResponse>() {
           @Override
           public void write(JsonWriter out, DescribeDashboardResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDashboardResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDashboardResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDashboardResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeDashboardResponse
   */
  public static DescribeDashboardResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDashboardResponse.class);
  }

  /**
   * Convert an instance of DescribeDashboardResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

