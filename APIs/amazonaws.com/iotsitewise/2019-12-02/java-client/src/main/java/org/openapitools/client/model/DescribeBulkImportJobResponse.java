/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeBulkImportJobResponseErrorReportLocation;
import org.openapitools.client.model.DescribeBulkImportJobResponseJobConfiguration;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeBulkImportJobResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeBulkImportJobResponse {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_STATUS = "jobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_JOB_ROLE_ARN = "jobRoleArn";
  @SerializedName(SERIALIZED_NAME_JOB_ROLE_ARN)
  private String jobRoleArn;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List files;

  public static final String SERIALIZED_NAME_ERROR_REPORT_LOCATION = "errorReportLocation";
  @SerializedName(SERIALIZED_NAME_ERROR_REPORT_LOCATION)
  private DescribeBulkImportJobResponseErrorReportLocation errorReportLocation;

  public static final String SERIALIZED_NAME_JOB_CONFIGURATION = "jobConfiguration";
  @SerializedName(SERIALIZED_NAME_JOB_CONFIGURATION)
  private DescribeBulkImportJobResponseJobConfiguration jobConfiguration;

  public static final String SERIALIZED_NAME_JOB_CREATION_DATE = "jobCreationDate";
  @SerializedName(SERIALIZED_NAME_JOB_CREATION_DATE)
  private OffsetDateTime jobCreationDate;

  public static final String SERIALIZED_NAME_JOB_LAST_UPDATE_DATE = "jobLastUpdateDate";
  @SerializedName(SERIALIZED_NAME_JOB_LAST_UPDATE_DATE)
  private OffsetDateTime jobLastUpdateDate;

  public DescribeBulkImportJobResponse() {
  }

  public DescribeBulkImportJobResponse jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public DescribeBulkImportJobResponse jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nonnull
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public DescribeBulkImportJobResponse jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nonnull
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public DescribeBulkImportJobResponse jobRoleArn(String jobRoleArn) {
    this.jobRoleArn = jobRoleArn;
    return this;
  }

  /**
   * Get jobRoleArn
   * @return jobRoleArn
   */
  @javax.annotation.Nonnull
  public String getJobRoleArn() {
    return jobRoleArn;
  }

  public void setJobRoleArn(String jobRoleArn) {
    this.jobRoleArn = jobRoleArn;
  }


  public DescribeBulkImportJobResponse files(List files) {
    this.files = files;
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nonnull
  public List getFiles() {
    return files;
  }

  public void setFiles(List files) {
    this.files = files;
  }


  public DescribeBulkImportJobResponse errorReportLocation(DescribeBulkImportJobResponseErrorReportLocation errorReportLocation) {
    this.errorReportLocation = errorReportLocation;
    return this;
  }

  /**
   * Get errorReportLocation
   * @return errorReportLocation
   */
  @javax.annotation.Nonnull
  public DescribeBulkImportJobResponseErrorReportLocation getErrorReportLocation() {
    return errorReportLocation;
  }

  public void setErrorReportLocation(DescribeBulkImportJobResponseErrorReportLocation errorReportLocation) {
    this.errorReportLocation = errorReportLocation;
  }


  public DescribeBulkImportJobResponse jobConfiguration(DescribeBulkImportJobResponseJobConfiguration jobConfiguration) {
    this.jobConfiguration = jobConfiguration;
    return this;
  }

  /**
   * Get jobConfiguration
   * @return jobConfiguration
   */
  @javax.annotation.Nonnull
  public DescribeBulkImportJobResponseJobConfiguration getJobConfiguration() {
    return jobConfiguration;
  }

  public void setJobConfiguration(DescribeBulkImportJobResponseJobConfiguration jobConfiguration) {
    this.jobConfiguration = jobConfiguration;
  }


  public DescribeBulkImportJobResponse jobCreationDate(OffsetDateTime jobCreationDate) {
    this.jobCreationDate = jobCreationDate;
    return this;
  }

  /**
   * Get jobCreationDate
   * @return jobCreationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getJobCreationDate() {
    return jobCreationDate;
  }

  public void setJobCreationDate(OffsetDateTime jobCreationDate) {
    this.jobCreationDate = jobCreationDate;
  }


  public DescribeBulkImportJobResponse jobLastUpdateDate(OffsetDateTime jobLastUpdateDate) {
    this.jobLastUpdateDate = jobLastUpdateDate;
    return this;
  }

  /**
   * Get jobLastUpdateDate
   * @return jobLastUpdateDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getJobLastUpdateDate() {
    return jobLastUpdateDate;
  }

  public void setJobLastUpdateDate(OffsetDateTime jobLastUpdateDate) {
    this.jobLastUpdateDate = jobLastUpdateDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeBulkImportJobResponse describeBulkImportJobResponse = (DescribeBulkImportJobResponse) o;
    return Objects.equals(this.jobId, describeBulkImportJobResponse.jobId) &&
        Objects.equals(this.jobName, describeBulkImportJobResponse.jobName) &&
        Objects.equals(this.jobStatus, describeBulkImportJobResponse.jobStatus) &&
        Objects.equals(this.jobRoleArn, describeBulkImportJobResponse.jobRoleArn) &&
        Objects.equals(this.files, describeBulkImportJobResponse.files) &&
        Objects.equals(this.errorReportLocation, describeBulkImportJobResponse.errorReportLocation) &&
        Objects.equals(this.jobConfiguration, describeBulkImportJobResponse.jobConfiguration) &&
        Objects.equals(this.jobCreationDate, describeBulkImportJobResponse.jobCreationDate) &&
        Objects.equals(this.jobLastUpdateDate, describeBulkImportJobResponse.jobLastUpdateDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, jobName, jobStatus, jobRoleArn, files, errorReportLocation, jobConfiguration, jobCreationDate, jobLastUpdateDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeBulkImportJobResponse {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    jobRoleArn: ").append(toIndentedString(jobRoleArn)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    errorReportLocation: ").append(toIndentedString(errorReportLocation)).append("\n");
    sb.append("    jobConfiguration: ").append(toIndentedString(jobConfiguration)).append("\n");
    sb.append("    jobCreationDate: ").append(toIndentedString(jobCreationDate)).append("\n");
    sb.append("    jobLastUpdateDate: ").append(toIndentedString(jobLastUpdateDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("jobName");
    openapiFields.add("jobStatus");
    openapiFields.add("jobRoleArn");
    openapiFields.add("files");
    openapiFields.add("errorReportLocation");
    openapiFields.add("jobConfiguration");
    openapiFields.add("jobCreationDate");
    openapiFields.add("jobLastUpdateDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobId");
    openapiRequiredFields.add("jobName");
    openapiRequiredFields.add("jobStatus");
    openapiRequiredFields.add("jobRoleArn");
    openapiRequiredFields.add("files");
    openapiRequiredFields.add("errorReportLocation");
    openapiRequiredFields.add("jobConfiguration");
    openapiRequiredFields.add("jobCreationDate");
    openapiRequiredFields.add("jobLastUpdateDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeBulkImportJobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeBulkImportJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeBulkImportJobResponse is not found in the empty JSON string", DescribeBulkImportJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeBulkImportJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeBulkImportJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeBulkImportJobResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `jobId`
      String.validateJsonElement(jsonObj.get("jobId"));
      // validate the required field `jobName`
      String.validateJsonElement(jsonObj.get("jobName"));
      // validate the required field `jobStatus`
      JobStatus.validateJsonElement(jsonObj.get("jobStatus"));
      // validate the required field `jobRoleArn`
      String.validateJsonElement(jsonObj.get("jobRoleArn"));
      // validate the required field `files`
      List.validateJsonElement(jsonObj.get("files"));
      // validate the required field `errorReportLocation`
      DescribeBulkImportJobResponseErrorReportLocation.validateJsonElement(jsonObj.get("errorReportLocation"));
      // validate the required field `jobConfiguration`
      DescribeBulkImportJobResponseJobConfiguration.validateJsonElement(jsonObj.get("jobConfiguration"));
      // validate the required field `jobCreationDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("jobCreationDate"));
      // validate the required field `jobLastUpdateDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("jobLastUpdateDate"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeBulkImportJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeBulkImportJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeBulkImportJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeBulkImportJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeBulkImportJobResponse>() {
           @Override
           public void write(JsonWriter out, DescribeBulkImportJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeBulkImportJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeBulkImportJobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeBulkImportJobResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeBulkImportJobResponse
   */
  public static DescribeBulkImportJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeBulkImportJobResponse.class);
  }

  /**
   * Convert an instance of DescribeBulkImportJobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

