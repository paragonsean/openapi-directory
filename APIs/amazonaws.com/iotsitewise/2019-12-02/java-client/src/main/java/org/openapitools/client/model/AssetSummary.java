/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssetSummaryStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a summary of an asset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetSummary {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ASSET_MODEL_ID = "assetModelId";
  @SerializedName(SERIALIZED_NAME_ASSET_MODEL_ID)
  private String assetModelId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_LAST_UPDATE_DATE = "lastUpdateDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_DATE)
  private OffsetDateTime lastUpdateDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AssetSummaryStatus status;

  public static final String SERIALIZED_NAME_HIERARCHIES = "hierarchies";
  @SerializedName(SERIALIZED_NAME_HIERARCHIES)
  private List hierarchies;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public AssetSummary() {
  }

  public AssetSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AssetSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public AssetSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AssetSummary assetModelId(String assetModelId) {
    this.assetModelId = assetModelId;
    return this;
  }

  /**
   * Get assetModelId
   * @return assetModelId
   */
  @javax.annotation.Nonnull
  public String getAssetModelId() {
    return assetModelId;
  }

  public void setAssetModelId(String assetModelId) {
    this.assetModelId = assetModelId;
  }


  public AssetSummary creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public AssetSummary lastUpdateDate(OffsetDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
    return this;
  }

  /**
   * Get lastUpdateDate
   * @return lastUpdateDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdateDate() {
    return lastUpdateDate;
  }

  public void setLastUpdateDate(OffsetDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }


  public AssetSummary status(AssetSummaryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public AssetSummaryStatus getStatus() {
    return status;
  }

  public void setStatus(AssetSummaryStatus status) {
    this.status = status;
  }


  public AssetSummary hierarchies(List hierarchies) {
    this.hierarchies = hierarchies;
    return this;
  }

  /**
   * Get hierarchies
   * @return hierarchies
   */
  @javax.annotation.Nonnull
  public List getHierarchies() {
    return hierarchies;
  }

  public void setHierarchies(List hierarchies) {
    this.hierarchies = hierarchies;
  }


  public AssetSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetSummary assetSummary = (AssetSummary) o;
    return Objects.equals(this.id, assetSummary.id) &&
        Objects.equals(this.arn, assetSummary.arn) &&
        Objects.equals(this.name, assetSummary.name) &&
        Objects.equals(this.assetModelId, assetSummary.assetModelId) &&
        Objects.equals(this.creationDate, assetSummary.creationDate) &&
        Objects.equals(this.lastUpdateDate, assetSummary.lastUpdateDate) &&
        Objects.equals(this.status, assetSummary.status) &&
        Objects.equals(this.hierarchies, assetSummary.hierarchies) &&
        Objects.equals(this.description, assetSummary.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, name, assetModelId, creationDate, lastUpdateDate, status, hierarchies, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    assetModelId: ").append(toIndentedString(assetModelId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastUpdateDate: ").append(toIndentedString(lastUpdateDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hierarchies: ").append(toIndentedString(hierarchies)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("assetModelId");
    openapiFields.add("creationDate");
    openapiFields.add("lastUpdateDate");
    openapiFields.add("status");
    openapiFields.add("hierarchies");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("assetModelId");
    openapiRequiredFields.add("creationDate");
    openapiRequiredFields.add("lastUpdateDate");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("hierarchies");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetSummary is not found in the empty JSON string", AssetSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `assetModelId`
      String.validateJsonElement(jsonObj.get("assetModelId"));
      // validate the required field `creationDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("creationDate"));
      // validate the required field `lastUpdateDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdateDate"));
      // validate the required field `status`
      AssetSummaryStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `hierarchies`
      List.validateJsonElement(jsonObj.get("hierarchies"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetSummary>() {
           @Override
           public void write(JsonWriter out, AssetSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetSummary
   * @throws IOException if the JSON string is invalid with respect to AssetSummary
   */
  public static AssetSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetSummary.class);
  }

  /**
   * Convert an instance of AssetSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

