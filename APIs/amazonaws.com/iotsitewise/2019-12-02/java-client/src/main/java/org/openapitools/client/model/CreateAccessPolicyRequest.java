/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateAccessPolicyRequestAccessPolicyIdentity;
import org.openapitools.client.model.CreateAccessPolicyRequestAccessPolicyResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAccessPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAccessPolicyRequest {
  public static final String SERIALIZED_NAME_ACCESS_POLICY_IDENTITY = "accessPolicyIdentity";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY_IDENTITY)
  private CreateAccessPolicyRequestAccessPolicyIdentity accessPolicyIdentity;

  public static final String SERIALIZED_NAME_ACCESS_POLICY_RESOURCE = "accessPolicyResource";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY_RESOURCE)
  private CreateAccessPolicyRequestAccessPolicyResource accessPolicyResource;

  /**
   * The permission level for this access policy. Note that a project &lt;code&gt;ADMINISTRATOR&lt;/code&gt; is also known as a project owner.
   */
  @JsonAdapter(AccessPolicyPermissionEnum.Adapter.class)
  public enum AccessPolicyPermissionEnum {
    ADMINISTRATOR("ADMINISTRATOR"),
    
    VIEWER("VIEWER");

    private String value;

    AccessPolicyPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessPolicyPermissionEnum fromValue(String value) {
      for (AccessPolicyPermissionEnum b : AccessPolicyPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessPolicyPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessPolicyPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessPolicyPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessPolicyPermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessPolicyPermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_POLICY_PERMISSION = "accessPolicyPermission";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICY_PERMISSION)
  private AccessPolicyPermissionEnum accessPolicyPermission;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateAccessPolicyRequest() {
  }

  public CreateAccessPolicyRequest accessPolicyIdentity(CreateAccessPolicyRequestAccessPolicyIdentity accessPolicyIdentity) {
    this.accessPolicyIdentity = accessPolicyIdentity;
    return this;
  }

  /**
   * Get accessPolicyIdentity
   * @return accessPolicyIdentity
   */
  @javax.annotation.Nonnull
  public CreateAccessPolicyRequestAccessPolicyIdentity getAccessPolicyIdentity() {
    return accessPolicyIdentity;
  }

  public void setAccessPolicyIdentity(CreateAccessPolicyRequestAccessPolicyIdentity accessPolicyIdentity) {
    this.accessPolicyIdentity = accessPolicyIdentity;
  }


  public CreateAccessPolicyRequest accessPolicyResource(CreateAccessPolicyRequestAccessPolicyResource accessPolicyResource) {
    this.accessPolicyResource = accessPolicyResource;
    return this;
  }

  /**
   * Get accessPolicyResource
   * @return accessPolicyResource
   */
  @javax.annotation.Nonnull
  public CreateAccessPolicyRequestAccessPolicyResource getAccessPolicyResource() {
    return accessPolicyResource;
  }

  public void setAccessPolicyResource(CreateAccessPolicyRequestAccessPolicyResource accessPolicyResource) {
    this.accessPolicyResource = accessPolicyResource;
  }


  public CreateAccessPolicyRequest accessPolicyPermission(AccessPolicyPermissionEnum accessPolicyPermission) {
    this.accessPolicyPermission = accessPolicyPermission;
    return this;
  }

  /**
   * The permission level for this access policy. Note that a project &lt;code&gt;ADMINISTRATOR&lt;/code&gt; is also known as a project owner.
   * @return accessPolicyPermission
   */
  @javax.annotation.Nonnull
  public AccessPolicyPermissionEnum getAccessPolicyPermission() {
    return accessPolicyPermission;
  }

  public void setAccessPolicyPermission(AccessPolicyPermissionEnum accessPolicyPermission) {
    this.accessPolicyPermission = accessPolicyPermission;
  }


  public CreateAccessPolicyRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don&#39;t reuse this client token if a new idempotent request is required.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateAccessPolicyRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateAccessPolicyRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A list of key-value pairs that contain metadata for the access policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\&quot;&gt;Tagging your IoT SiteWise resources&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAccessPolicyRequest createAccessPolicyRequest = (CreateAccessPolicyRequest) o;
    return Objects.equals(this.accessPolicyIdentity, createAccessPolicyRequest.accessPolicyIdentity) &&
        Objects.equals(this.accessPolicyResource, createAccessPolicyRequest.accessPolicyResource) &&
        Objects.equals(this.accessPolicyPermission, createAccessPolicyRequest.accessPolicyPermission) &&
        Objects.equals(this.clientToken, createAccessPolicyRequest.clientToken) &&
        Objects.equals(this.tags, createAccessPolicyRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPolicyIdentity, accessPolicyResource, accessPolicyPermission, clientToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAccessPolicyRequest {\n");
    sb.append("    accessPolicyIdentity: ").append(toIndentedString(accessPolicyIdentity)).append("\n");
    sb.append("    accessPolicyResource: ").append(toIndentedString(accessPolicyResource)).append("\n");
    sb.append("    accessPolicyPermission: ").append(toIndentedString(accessPolicyPermission)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessPolicyIdentity");
    openapiFields.add("accessPolicyResource");
    openapiFields.add("accessPolicyPermission");
    openapiFields.add("clientToken");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessPolicyIdentity");
    openapiRequiredFields.add("accessPolicyResource");
    openapiRequiredFields.add("accessPolicyPermission");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAccessPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAccessPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAccessPolicyRequest is not found in the empty JSON string", CreateAccessPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAccessPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAccessPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAccessPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `accessPolicyIdentity`
      CreateAccessPolicyRequestAccessPolicyIdentity.validateJsonElement(jsonObj.get("accessPolicyIdentity"));
      // validate the required field `accessPolicyResource`
      CreateAccessPolicyRequestAccessPolicyResource.validateJsonElement(jsonObj.get("accessPolicyResource"));
      if (!jsonObj.get("accessPolicyPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessPolicyPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessPolicyPermission").toString()));
      }
      // validate the required field `accessPolicyPermission`
      AccessPolicyPermissionEnum.validateJsonElement(jsonObj.get("accessPolicyPermission"));
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAccessPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAccessPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAccessPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAccessPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAccessPolicyRequest>() {
           @Override
           public void write(JsonWriter out, CreateAccessPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAccessPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAccessPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAccessPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAccessPolicyRequest
   */
  public static CreateAccessPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAccessPolicyRequest.class);
  }

  /**
   * Convert an instance of CreateAccessPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

