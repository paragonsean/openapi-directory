/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PropertyDataType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a summary of a time series (data stream).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesSummary {
  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private String assetId;

  public static final String SERIALIZED_NAME_PROPERTY_ID = "propertyId";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ID)
  private String propertyId;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_TIME_SERIES_ID = "timeSeriesId";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ID)
  private String timeSeriesId;

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private PropertyDataType dataType;

  public static final String SERIALIZED_NAME_DATA_TYPE_SPEC = "dataTypeSpec";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE_SPEC)
  private String dataTypeSpec;

  public static final String SERIALIZED_NAME_TIME_SERIES_CREATION_DATE = "timeSeriesCreationDate";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_CREATION_DATE)
  private OffsetDateTime timeSeriesCreationDate;

  public static final String SERIALIZED_NAME_TIME_SERIES_LAST_UPDATE_DATE = "timeSeriesLastUpdateDate";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_LAST_UPDATE_DATE)
  private OffsetDateTime timeSeriesLastUpdateDate;

  public static final String SERIALIZED_NAME_TIME_SERIES_ARN = "timeSeriesArn";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ARN)
  private String timeSeriesArn;

  public TimeSeriesSummary() {
  }

  public TimeSeriesSummary assetId(String assetId) {
    this.assetId = assetId;
    return this;
  }

  /**
   * Get assetId
   * @return assetId
   */
  @javax.annotation.Nullable
  public String getAssetId() {
    return assetId;
  }

  public void setAssetId(String assetId) {
    this.assetId = assetId;
  }


  public TimeSeriesSummary propertyId(String propertyId) {
    this.propertyId = propertyId;
    return this;
  }

  /**
   * Get propertyId
   * @return propertyId
   */
  @javax.annotation.Nullable
  public String getPropertyId() {
    return propertyId;
  }

  public void setPropertyId(String propertyId) {
    this.propertyId = propertyId;
  }


  public TimeSeriesSummary alias(String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Get alias
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }


  public TimeSeriesSummary timeSeriesId(String timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
    return this;
  }

  /**
   * Get timeSeriesId
   * @return timeSeriesId
   */
  @javax.annotation.Nonnull
  public String getTimeSeriesId() {
    return timeSeriesId;
  }

  public void setTimeSeriesId(String timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
  }


  public TimeSeriesSummary dataType(PropertyDataType dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nonnull
  public PropertyDataType getDataType() {
    return dataType;
  }

  public void setDataType(PropertyDataType dataType) {
    this.dataType = dataType;
  }


  public TimeSeriesSummary dataTypeSpec(String dataTypeSpec) {
    this.dataTypeSpec = dataTypeSpec;
    return this;
  }

  /**
   * Get dataTypeSpec
   * @return dataTypeSpec
   */
  @javax.annotation.Nullable
  public String getDataTypeSpec() {
    return dataTypeSpec;
  }

  public void setDataTypeSpec(String dataTypeSpec) {
    this.dataTypeSpec = dataTypeSpec;
  }


  public TimeSeriesSummary timeSeriesCreationDate(OffsetDateTime timeSeriesCreationDate) {
    this.timeSeriesCreationDate = timeSeriesCreationDate;
    return this;
  }

  /**
   * Get timeSeriesCreationDate
   * @return timeSeriesCreationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimeSeriesCreationDate() {
    return timeSeriesCreationDate;
  }

  public void setTimeSeriesCreationDate(OffsetDateTime timeSeriesCreationDate) {
    this.timeSeriesCreationDate = timeSeriesCreationDate;
  }


  public TimeSeriesSummary timeSeriesLastUpdateDate(OffsetDateTime timeSeriesLastUpdateDate) {
    this.timeSeriesLastUpdateDate = timeSeriesLastUpdateDate;
    return this;
  }

  /**
   * Get timeSeriesLastUpdateDate
   * @return timeSeriesLastUpdateDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimeSeriesLastUpdateDate() {
    return timeSeriesLastUpdateDate;
  }

  public void setTimeSeriesLastUpdateDate(OffsetDateTime timeSeriesLastUpdateDate) {
    this.timeSeriesLastUpdateDate = timeSeriesLastUpdateDate;
  }


  public TimeSeriesSummary timeSeriesArn(String timeSeriesArn) {
    this.timeSeriesArn = timeSeriesArn;
    return this;
  }

  /**
   * Get timeSeriesArn
   * @return timeSeriesArn
   */
  @javax.annotation.Nonnull
  public String getTimeSeriesArn() {
    return timeSeriesArn;
  }

  public void setTimeSeriesArn(String timeSeriesArn) {
    this.timeSeriesArn = timeSeriesArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesSummary timeSeriesSummary = (TimeSeriesSummary) o;
    return Objects.equals(this.assetId, timeSeriesSummary.assetId) &&
        Objects.equals(this.propertyId, timeSeriesSummary.propertyId) &&
        Objects.equals(this.alias, timeSeriesSummary.alias) &&
        Objects.equals(this.timeSeriesId, timeSeriesSummary.timeSeriesId) &&
        Objects.equals(this.dataType, timeSeriesSummary.dataType) &&
        Objects.equals(this.dataTypeSpec, timeSeriesSummary.dataTypeSpec) &&
        Objects.equals(this.timeSeriesCreationDate, timeSeriesSummary.timeSeriesCreationDate) &&
        Objects.equals(this.timeSeriesLastUpdateDate, timeSeriesSummary.timeSeriesLastUpdateDate) &&
        Objects.equals(this.timeSeriesArn, timeSeriesSummary.timeSeriesArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetId, propertyId, alias, timeSeriesId, dataType, dataTypeSpec, timeSeriesCreationDate, timeSeriesLastUpdateDate, timeSeriesArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesSummary {\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    timeSeriesId: ").append(toIndentedString(timeSeriesId)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dataTypeSpec: ").append(toIndentedString(dataTypeSpec)).append("\n");
    sb.append("    timeSeriesCreationDate: ").append(toIndentedString(timeSeriesCreationDate)).append("\n");
    sb.append("    timeSeriesLastUpdateDate: ").append(toIndentedString(timeSeriesLastUpdateDate)).append("\n");
    sb.append("    timeSeriesArn: ").append(toIndentedString(timeSeriesArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetId");
    openapiFields.add("propertyId");
    openapiFields.add("alias");
    openapiFields.add("timeSeriesId");
    openapiFields.add("dataType");
    openapiFields.add("dataTypeSpec");
    openapiFields.add("timeSeriesCreationDate");
    openapiFields.add("timeSeriesLastUpdateDate");
    openapiFields.add("timeSeriesArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("timeSeriesId");
    openapiRequiredFields.add("dataType");
    openapiRequiredFields.add("timeSeriesCreationDate");
    openapiRequiredFields.add("timeSeriesLastUpdateDate");
    openapiRequiredFields.add("timeSeriesArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesSummary is not found in the empty JSON string", TimeSeriesSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeSeriesSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assetId`
      if (jsonObj.get("assetId") != null && !jsonObj.get("assetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("assetId"));
      }
      // validate the optional field `propertyId`
      if (jsonObj.get("propertyId") != null && !jsonObj.get("propertyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("propertyId"));
      }
      // validate the optional field `alias`
      if (jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("alias"));
      }
      // validate the required field `timeSeriesId`
      String.validateJsonElement(jsonObj.get("timeSeriesId"));
      // validate the required field `dataType`
      PropertyDataType.validateJsonElement(jsonObj.get("dataType"));
      // validate the optional field `dataTypeSpec`
      if (jsonObj.get("dataTypeSpec") != null && !jsonObj.get("dataTypeSpec").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dataTypeSpec"));
      }
      // validate the required field `timeSeriesCreationDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("timeSeriesCreationDate"));
      // validate the required field `timeSeriesLastUpdateDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("timeSeriesLastUpdateDate"));
      // validate the required field `timeSeriesArn`
      String.validateJsonElement(jsonObj.get("timeSeriesArn"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesSummary>() {
           @Override
           public void write(JsonWriter out, TimeSeriesSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesSummary
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesSummary
   */
  public static TimeSeriesSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesSummary.class);
  }

  /**
   * Convert an instance of TimeSeriesSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

