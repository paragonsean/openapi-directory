/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateAccessPolicyRequestAccessPolicyIdentityGroup;
import org.openapitools.client.model.CreateAccessPolicyRequestAccessPolicyIdentityIamRole;
import org.openapitools.client.model.CreateAccessPolicyRequestAccessPolicyIdentityIamUser;
import org.openapitools.client.model.CreateAccessPolicyRequestAccessPolicyIdentityUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains an identity that can access an IoT SiteWise Monitor resource.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Currently, you can&#39;t use Amazon Web Services APIs to retrieve IAM Identity Center identity IDs. You can find the IAM Identity Center identity IDs in the URL of user and group pages in the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/singlesignon\&quot;&gt;IAM Identity Center console&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Identity {
  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private CreateAccessPolicyRequestAccessPolicyIdentityUser user;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private CreateAccessPolicyRequestAccessPolicyIdentityGroup group;

  public static final String SERIALIZED_NAME_IAM_USER = "iamUser";
  @SerializedName(SERIALIZED_NAME_IAM_USER)
  private CreateAccessPolicyRequestAccessPolicyIdentityIamUser iamUser;

  public static final String SERIALIZED_NAME_IAM_ROLE = "iamRole";
  @SerializedName(SERIALIZED_NAME_IAM_ROLE)
  private CreateAccessPolicyRequestAccessPolicyIdentityIamRole iamRole;

  public Identity() {
  }

  public Identity user(CreateAccessPolicyRequestAccessPolicyIdentityUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public CreateAccessPolicyRequestAccessPolicyIdentityUser getUser() {
    return user;
  }

  public void setUser(CreateAccessPolicyRequestAccessPolicyIdentityUser user) {
    this.user = user;
  }


  public Identity group(CreateAccessPolicyRequestAccessPolicyIdentityGroup group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public CreateAccessPolicyRequestAccessPolicyIdentityGroup getGroup() {
    return group;
  }

  public void setGroup(CreateAccessPolicyRequestAccessPolicyIdentityGroup group) {
    this.group = group;
  }


  public Identity iamUser(CreateAccessPolicyRequestAccessPolicyIdentityIamUser iamUser) {
    this.iamUser = iamUser;
    return this;
  }

  /**
   * Get iamUser
   * @return iamUser
   */
  @javax.annotation.Nullable
  public CreateAccessPolicyRequestAccessPolicyIdentityIamUser getIamUser() {
    return iamUser;
  }

  public void setIamUser(CreateAccessPolicyRequestAccessPolicyIdentityIamUser iamUser) {
    this.iamUser = iamUser;
  }


  public Identity iamRole(CreateAccessPolicyRequestAccessPolicyIdentityIamRole iamRole) {
    this.iamRole = iamRole;
    return this;
  }

  /**
   * Get iamRole
   * @return iamRole
   */
  @javax.annotation.Nullable
  public CreateAccessPolicyRequestAccessPolicyIdentityIamRole getIamRole() {
    return iamRole;
  }

  public void setIamRole(CreateAccessPolicyRequestAccessPolicyIdentityIamRole iamRole) {
    this.iamRole = iamRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Identity identity = (Identity) o;
    return Objects.equals(this.user, identity.user) &&
        Objects.equals(this.group, identity.group) &&
        Objects.equals(this.iamUser, identity.iamUser) &&
        Objects.equals(this.iamRole, identity.iamRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, group, iamUser, iamRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Identity {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    iamUser: ").append(toIndentedString(iamUser)).append("\n");
    sb.append("    iamRole: ").append(toIndentedString(iamRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user");
    openapiFields.add("group");
    openapiFields.add("iamUser");
    openapiFields.add("iamRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Identity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Identity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Identity is not found in the empty JSON string", Identity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Identity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Identity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        CreateAccessPolicyRequestAccessPolicyIdentityUser.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        CreateAccessPolicyRequestAccessPolicyIdentityGroup.validateJsonElement(jsonObj.get("group"));
      }
      // validate the optional field `iamUser`
      if (jsonObj.get("iamUser") != null && !jsonObj.get("iamUser").isJsonNull()) {
        CreateAccessPolicyRequestAccessPolicyIdentityIamUser.validateJsonElement(jsonObj.get("iamUser"));
      }
      // validate the optional field `iamRole`
      if (jsonObj.get("iamRole") != null && !jsonObj.get("iamRole").isJsonNull()) {
        CreateAccessPolicyRequestAccessPolicyIdentityIamRole.validateJsonElement(jsonObj.get("iamRole"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Identity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Identity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Identity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Identity.class));

       return (TypeAdapter<T>) new TypeAdapter<Identity>() {
           @Override
           public void write(JsonWriter out, Identity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Identity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Identity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Identity
   * @throws IOException if the JSON string is invalid with respect to Identity
   */
  public static Identity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Identity.class);
  }

  /**
   * Convert an instance of Identity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

