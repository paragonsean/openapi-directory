/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PropertyTypeAttribute;
import org.openapitools.client.model.PropertyTypeMeasurement;
import org.openapitools.client.model.PropertyTypeMetric;
import org.openapitools.client.model.PropertyTypeTransform;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PropertyType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PropertyType {
  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private PropertyTypeAttribute attribute;

  public static final String SERIALIZED_NAME_MEASUREMENT = "measurement";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT)
  private PropertyTypeMeasurement measurement;

  public static final String SERIALIZED_NAME_TRANSFORM = "transform";
  @SerializedName(SERIALIZED_NAME_TRANSFORM)
  private PropertyTypeTransform transform;

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private PropertyTypeMetric metric;

  public PropertyType() {
  }

  public PropertyType attribute(PropertyTypeAttribute attribute) {
    this.attribute = attribute;
    return this;
  }

  /**
   * Get attribute
   * @return attribute
   */
  @javax.annotation.Nullable
  public PropertyTypeAttribute getAttribute() {
    return attribute;
  }

  public void setAttribute(PropertyTypeAttribute attribute) {
    this.attribute = attribute;
  }


  public PropertyType measurement(PropertyTypeMeasurement measurement) {
    this.measurement = measurement;
    return this;
  }

  /**
   * Get measurement
   * @return measurement
   */
  @javax.annotation.Nullable
  public PropertyTypeMeasurement getMeasurement() {
    return measurement;
  }

  public void setMeasurement(PropertyTypeMeasurement measurement) {
    this.measurement = measurement;
  }


  public PropertyType transform(PropertyTypeTransform transform) {
    this.transform = transform;
    return this;
  }

  /**
   * Get transform
   * @return transform
   */
  @javax.annotation.Nullable
  public PropertyTypeTransform getTransform() {
    return transform;
  }

  public void setTransform(PropertyTypeTransform transform) {
    this.transform = transform;
  }


  public PropertyType metric(PropertyTypeMetric metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nullable
  public PropertyTypeMetric getMetric() {
    return metric;
  }

  public void setMetric(PropertyTypeMetric metric) {
    this.metric = metric;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyType propertyType = (PropertyType) o;
    return Objects.equals(this.attribute, propertyType.attribute) &&
        Objects.equals(this.measurement, propertyType.measurement) &&
        Objects.equals(this.transform, propertyType.transform) &&
        Objects.equals(this.metric, propertyType.metric);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute, measurement, transform, metric);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyType {\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    measurement: ").append(toIndentedString(measurement)).append("\n");
    sb.append("    transform: ").append(toIndentedString(transform)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute");
    openapiFields.add("measurement");
    openapiFields.add("transform");
    openapiFields.add("metric");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyType is not found in the empty JSON string", PropertyType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attribute`
      if (jsonObj.get("attribute") != null && !jsonObj.get("attribute").isJsonNull()) {
        PropertyTypeAttribute.validateJsonElement(jsonObj.get("attribute"));
      }
      // validate the optional field `measurement`
      if (jsonObj.get("measurement") != null && !jsonObj.get("measurement").isJsonNull()) {
        PropertyTypeMeasurement.validateJsonElement(jsonObj.get("measurement"));
      }
      // validate the optional field `transform`
      if (jsonObj.get("transform") != null && !jsonObj.get("transform").isJsonNull()) {
        PropertyTypeTransform.validateJsonElement(jsonObj.get("transform"));
      }
      // validate the optional field `metric`
      if (jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) {
        PropertyTypeMetric.validateJsonElement(jsonObj.get("metric"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyType.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyType>() {
           @Override
           public void write(JsonWriter out, PropertyType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyType
   * @throws IOException if the JSON string is invalid with respect to PropertyType
   */
  public static PropertyType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyType.class);
  }

  /**
   * Convert an instance of PropertyType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

