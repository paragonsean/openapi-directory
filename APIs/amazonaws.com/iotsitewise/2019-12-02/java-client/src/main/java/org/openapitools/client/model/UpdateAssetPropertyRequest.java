/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAssetPropertyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateAssetPropertyRequest {
  public static final String SERIALIZED_NAME_PROPERTY_ALIAS = "propertyAlias";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ALIAS)
  private String propertyAlias;

  /**
   * &lt;p&gt;The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html\&quot;&gt;Interacting with other services&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you omit this parameter, the notification state is set to &lt;code&gt;DISABLED&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(PropertyNotificationStateEnum.Adapter.class)
  public enum PropertyNotificationStateEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    PropertyNotificationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyNotificationStateEnum fromValue(String value) {
      for (PropertyNotificationStateEnum b : PropertyNotificationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyNotificationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyNotificationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyNotificationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyNotificationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyNotificationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_NOTIFICATION_STATE = "propertyNotificationState";
  @SerializedName(SERIALIZED_NAME_PROPERTY_NOTIFICATION_STATE)
  private PropertyNotificationStateEnum propertyNotificationState;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_PROPERTY_UNIT = "propertyUnit";
  @SerializedName(SERIALIZED_NAME_PROPERTY_UNIT)
  private String propertyUnit;

  public UpdateAssetPropertyRequest() {
  }

  public UpdateAssetPropertyRequest propertyAlias(String propertyAlias) {
    this.propertyAlias = propertyAlias;
    return this;
  }

  /**
   * &lt;p&gt;The alias that identifies the property, such as an OPC-UA server data stream path (for example, &lt;code&gt;/company/windfarm/3/turbine/7/temperature&lt;/code&gt;). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html\&quot;&gt;Mapping industrial data streams to asset properties&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you omit this parameter, the alias is removed from the property.&lt;/p&gt;
   * @return propertyAlias
   */
  @javax.annotation.Nullable
  public String getPropertyAlias() {
    return propertyAlias;
  }

  public void setPropertyAlias(String propertyAlias) {
    this.propertyAlias = propertyAlias;
  }


  public UpdateAssetPropertyRequest propertyNotificationState(PropertyNotificationStateEnum propertyNotificationState) {
    this.propertyNotificationState = propertyNotificationState;
    return this;
  }

  /**
   * &lt;p&gt;The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html\&quot;&gt;Interacting with other services&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you omit this parameter, the notification state is set to &lt;code&gt;DISABLED&lt;/code&gt;.&lt;/p&gt;
   * @return propertyNotificationState
   */
  @javax.annotation.Nullable
  public PropertyNotificationStateEnum getPropertyNotificationState() {
    return propertyNotificationState;
  }

  public void setPropertyNotificationState(PropertyNotificationStateEnum propertyNotificationState) {
    this.propertyNotificationState = propertyNotificationState;
  }


  public UpdateAssetPropertyRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don&#39;t reuse this client token if a new idempotent request is required.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public UpdateAssetPropertyRequest propertyUnit(String propertyUnit) {
    this.propertyUnit = propertyUnit;
    return this;
  }

  /**
   * The unit of measure (such as Newtons or RPM) of the asset property. If you don&#39;t specify a value for this parameter, the service uses the value of the &lt;code&gt;assetModelProperty&lt;/code&gt; in the asset model.
   * @return propertyUnit
   */
  @javax.annotation.Nullable
  public String getPropertyUnit() {
    return propertyUnit;
  }

  public void setPropertyUnit(String propertyUnit) {
    this.propertyUnit = propertyUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAssetPropertyRequest updateAssetPropertyRequest = (UpdateAssetPropertyRequest) o;
    return Objects.equals(this.propertyAlias, updateAssetPropertyRequest.propertyAlias) &&
        Objects.equals(this.propertyNotificationState, updateAssetPropertyRequest.propertyNotificationState) &&
        Objects.equals(this.clientToken, updateAssetPropertyRequest.clientToken) &&
        Objects.equals(this.propertyUnit, updateAssetPropertyRequest.propertyUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyAlias, propertyNotificationState, clientToken, propertyUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAssetPropertyRequest {\n");
    sb.append("    propertyAlias: ").append(toIndentedString(propertyAlias)).append("\n");
    sb.append("    propertyNotificationState: ").append(toIndentedString(propertyNotificationState)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    propertyUnit: ").append(toIndentedString(propertyUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("propertyAlias");
    openapiFields.add("propertyNotificationState");
    openapiFields.add("clientToken");
    openapiFields.add("propertyUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAssetPropertyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAssetPropertyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAssetPropertyRequest is not found in the empty JSON string", UpdateAssetPropertyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAssetPropertyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAssetPropertyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("propertyAlias") != null && !jsonObj.get("propertyAlias").isJsonNull()) && !jsonObj.get("propertyAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyAlias").toString()));
      }
      if ((jsonObj.get("propertyNotificationState") != null && !jsonObj.get("propertyNotificationState").isJsonNull()) && !jsonObj.get("propertyNotificationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyNotificationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyNotificationState").toString()));
      }
      // validate the optional field `propertyNotificationState`
      if (jsonObj.get("propertyNotificationState") != null && !jsonObj.get("propertyNotificationState").isJsonNull()) {
        PropertyNotificationStateEnum.validateJsonElement(jsonObj.get("propertyNotificationState"));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if ((jsonObj.get("propertyUnit") != null && !jsonObj.get("propertyUnit").isJsonNull()) && !jsonObj.get("propertyUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyUnit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAssetPropertyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAssetPropertyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAssetPropertyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAssetPropertyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAssetPropertyRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAssetPropertyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAssetPropertyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAssetPropertyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAssetPropertyRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAssetPropertyRequest
   */
  public static UpdateAssetPropertyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAssetPropertyRequest.class);
  }

  /**
   * Convert an instance of UpdateAssetPropertyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

