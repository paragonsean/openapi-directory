/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDashboardRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDashboardRequest {
  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_DASHBOARD_NAME = "dashboardName";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_NAME)
  private String dashboardName;

  public static final String SERIALIZED_NAME_DASHBOARD_DESCRIPTION = "dashboardDescription";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_DESCRIPTION)
  private String dashboardDescription;

  public static final String SERIALIZED_NAME_DASHBOARD_DEFINITION = "dashboardDefinition";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_DEFINITION)
  private String dashboardDefinition;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateDashboardRequest() {
  }

  public CreateDashboardRequest projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * The ID of the project in which to create the dashboard.
   * @return projectId
   */
  @javax.annotation.Nonnull
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public CreateDashboardRequest dashboardName(String dashboardName) {
    this.dashboardName = dashboardName;
    return this;
  }

  /**
   * A friendly name for the dashboard.
   * @return dashboardName
   */
  @javax.annotation.Nonnull
  public String getDashboardName() {
    return dashboardName;
  }

  public void setDashboardName(String dashboardName) {
    this.dashboardName = dashboardName;
  }


  public CreateDashboardRequest dashboardDescription(String dashboardDescription) {
    this.dashboardDescription = dashboardDescription;
    return this;
  }

  /**
   * A description for the dashboard.
   * @return dashboardDescription
   */
  @javax.annotation.Nullable
  public String getDashboardDescription() {
    return dashboardDescription;
  }

  public void setDashboardDescription(String dashboardDescription) {
    this.dashboardDescription = dashboardDescription;
  }


  public CreateDashboardRequest dashboardDefinition(String dashboardDefinition) {
    this.dashboardDefinition = dashboardDefinition;
    return this;
  }

  /**
   * The dashboard definition specified in a JSON literal. For detailed information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html\&quot;&gt;Creating dashboards (CLI)&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.
   * @return dashboardDefinition
   */
  @javax.annotation.Nonnull
  public String getDashboardDefinition() {
    return dashboardDefinition;
  }

  public void setDashboardDefinition(String dashboardDefinition) {
    this.dashboardDefinition = dashboardDefinition;
  }


  public CreateDashboardRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don&#39;t reuse this client token if a new idempotent request is required.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateDashboardRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDashboardRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A list of key-value pairs that contain metadata for the dashboard. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\&quot;&gt;Tagging your IoT SiteWise resources&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDashboardRequest createDashboardRequest = (CreateDashboardRequest) o;
    return Objects.equals(this.projectId, createDashboardRequest.projectId) &&
        Objects.equals(this.dashboardName, createDashboardRequest.dashboardName) &&
        Objects.equals(this.dashboardDescription, createDashboardRequest.dashboardDescription) &&
        Objects.equals(this.dashboardDefinition, createDashboardRequest.dashboardDefinition) &&
        Objects.equals(this.clientToken, createDashboardRequest.clientToken) &&
        Objects.equals(this.tags, createDashboardRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, dashboardName, dashboardDescription, dashboardDefinition, clientToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDashboardRequest {\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    dashboardName: ").append(toIndentedString(dashboardName)).append("\n");
    sb.append("    dashboardDescription: ").append(toIndentedString(dashboardDescription)).append("\n");
    sb.append("    dashboardDefinition: ").append(toIndentedString(dashboardDefinition)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectId");
    openapiFields.add("dashboardName");
    openapiFields.add("dashboardDescription");
    openapiFields.add("dashboardDefinition");
    openapiFields.add("clientToken");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("dashboardName");
    openapiRequiredFields.add("dashboardDefinition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDashboardRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDashboardRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDashboardRequest is not found in the empty JSON string", CreateDashboardRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDashboardRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDashboardRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDashboardRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (!jsonObj.get("dashboardName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboardName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboardName").toString()));
      }
      if ((jsonObj.get("dashboardDescription") != null && !jsonObj.get("dashboardDescription").isJsonNull()) && !jsonObj.get("dashboardDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboardDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboardDescription").toString()));
      }
      if (!jsonObj.get("dashboardDefinition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboardDefinition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboardDefinition").toString()));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDashboardRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDashboardRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDashboardRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDashboardRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDashboardRequest>() {
           @Override
           public void write(JsonWriter out, CreateDashboardRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDashboardRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDashboardRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDashboardRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDashboardRequest
   */
  public static CreateDashboardRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDashboardRequest.class);
  }

  /**
   * Convert an instance of CreateDashboardRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

