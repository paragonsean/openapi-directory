/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AuthMode;
import org.openapitools.client.model.DescribePortalResponseAlarms;
import org.openapitools.client.model.DescribePortalResponsePortalLogoImageLocation;
import org.openapitools.client.model.DescribePortalResponsePortalStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribePortalResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribePortalResponse {
  public static final String SERIALIZED_NAME_PORTAL_ID = "portalId";
  @SerializedName(SERIALIZED_NAME_PORTAL_ID)
  private String portalId;

  public static final String SERIALIZED_NAME_PORTAL_ARN = "portalArn";
  @SerializedName(SERIALIZED_NAME_PORTAL_ARN)
  private String portalArn;

  public static final String SERIALIZED_NAME_PORTAL_NAME = "portalName";
  @SerializedName(SERIALIZED_NAME_PORTAL_NAME)
  private String portalName;

  public static final String SERIALIZED_NAME_PORTAL_DESCRIPTION = "portalDescription";
  @SerializedName(SERIALIZED_NAME_PORTAL_DESCRIPTION)
  private String portalDescription;

  public static final String SERIALIZED_NAME_PORTAL_CLIENT_ID = "portalClientId";
  @SerializedName(SERIALIZED_NAME_PORTAL_CLIENT_ID)
  private String portalClientId;

  public static final String SERIALIZED_NAME_PORTAL_START_URL = "portalStartUrl";
  @SerializedName(SERIALIZED_NAME_PORTAL_START_URL)
  private String portalStartUrl;

  public static final String SERIALIZED_NAME_PORTAL_CONTACT_EMAIL = "portalContactEmail";
  @SerializedName(SERIALIZED_NAME_PORTAL_CONTACT_EMAIL)
  private String portalContactEmail;

  public static final String SERIALIZED_NAME_PORTAL_STATUS = "portalStatus";
  @SerializedName(SERIALIZED_NAME_PORTAL_STATUS)
  private DescribePortalResponsePortalStatus portalStatus;

  public static final String SERIALIZED_NAME_PORTAL_CREATION_DATE = "portalCreationDate";
  @SerializedName(SERIALIZED_NAME_PORTAL_CREATION_DATE)
  private OffsetDateTime portalCreationDate;

  public static final String SERIALIZED_NAME_PORTAL_LAST_UPDATE_DATE = "portalLastUpdateDate";
  @SerializedName(SERIALIZED_NAME_PORTAL_LAST_UPDATE_DATE)
  private OffsetDateTime portalLastUpdateDate;

  public static final String SERIALIZED_NAME_PORTAL_LOGO_IMAGE_LOCATION = "portalLogoImageLocation";
  @SerializedName(SERIALIZED_NAME_PORTAL_LOGO_IMAGE_LOCATION)
  private DescribePortalResponsePortalLogoImageLocation portalLogoImageLocation;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_PORTAL_AUTH_MODE = "portalAuthMode";
  @SerializedName(SERIALIZED_NAME_PORTAL_AUTH_MODE)
  private AuthMode portalAuthMode;

  public static final String SERIALIZED_NAME_NOTIFICATION_SENDER_EMAIL = "notificationSenderEmail";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SENDER_EMAIL)
  private String notificationSenderEmail;

  public static final String SERIALIZED_NAME_ALARMS = "alarms";
  @SerializedName(SERIALIZED_NAME_ALARMS)
  private DescribePortalResponseAlarms alarms;

  public DescribePortalResponse() {
  }

  public DescribePortalResponse portalId(String portalId) {
    this.portalId = portalId;
    return this;
  }

  /**
   * Get portalId
   * @return portalId
   */
  @javax.annotation.Nonnull
  public String getPortalId() {
    return portalId;
  }

  public void setPortalId(String portalId) {
    this.portalId = portalId;
  }


  public DescribePortalResponse portalArn(String portalArn) {
    this.portalArn = portalArn;
    return this;
  }

  /**
   * Get portalArn
   * @return portalArn
   */
  @javax.annotation.Nonnull
  public String getPortalArn() {
    return portalArn;
  }

  public void setPortalArn(String portalArn) {
    this.portalArn = portalArn;
  }


  public DescribePortalResponse portalName(String portalName) {
    this.portalName = portalName;
    return this;
  }

  /**
   * Get portalName
   * @return portalName
   */
  @javax.annotation.Nonnull
  public String getPortalName() {
    return portalName;
  }

  public void setPortalName(String portalName) {
    this.portalName = portalName;
  }


  public DescribePortalResponse portalDescription(String portalDescription) {
    this.portalDescription = portalDescription;
    return this;
  }

  /**
   * Get portalDescription
   * @return portalDescription
   */
  @javax.annotation.Nullable
  public String getPortalDescription() {
    return portalDescription;
  }

  public void setPortalDescription(String portalDescription) {
    this.portalDescription = portalDescription;
  }


  public DescribePortalResponse portalClientId(String portalClientId) {
    this.portalClientId = portalClientId;
    return this;
  }

  /**
   * Get portalClientId
   * @return portalClientId
   */
  @javax.annotation.Nonnull
  public String getPortalClientId() {
    return portalClientId;
  }

  public void setPortalClientId(String portalClientId) {
    this.portalClientId = portalClientId;
  }


  public DescribePortalResponse portalStartUrl(String portalStartUrl) {
    this.portalStartUrl = portalStartUrl;
    return this;
  }

  /**
   * Get portalStartUrl
   * @return portalStartUrl
   */
  @javax.annotation.Nonnull
  public String getPortalStartUrl() {
    return portalStartUrl;
  }

  public void setPortalStartUrl(String portalStartUrl) {
    this.portalStartUrl = portalStartUrl;
  }


  public DescribePortalResponse portalContactEmail(String portalContactEmail) {
    this.portalContactEmail = portalContactEmail;
    return this;
  }

  /**
   * Get portalContactEmail
   * @return portalContactEmail
   */
  @javax.annotation.Nonnull
  public String getPortalContactEmail() {
    return portalContactEmail;
  }

  public void setPortalContactEmail(String portalContactEmail) {
    this.portalContactEmail = portalContactEmail;
  }


  public DescribePortalResponse portalStatus(DescribePortalResponsePortalStatus portalStatus) {
    this.portalStatus = portalStatus;
    return this;
  }

  /**
   * Get portalStatus
   * @return portalStatus
   */
  @javax.annotation.Nonnull
  public DescribePortalResponsePortalStatus getPortalStatus() {
    return portalStatus;
  }

  public void setPortalStatus(DescribePortalResponsePortalStatus portalStatus) {
    this.portalStatus = portalStatus;
  }


  public DescribePortalResponse portalCreationDate(OffsetDateTime portalCreationDate) {
    this.portalCreationDate = portalCreationDate;
    return this;
  }

  /**
   * Get portalCreationDate
   * @return portalCreationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getPortalCreationDate() {
    return portalCreationDate;
  }

  public void setPortalCreationDate(OffsetDateTime portalCreationDate) {
    this.portalCreationDate = portalCreationDate;
  }


  public DescribePortalResponse portalLastUpdateDate(OffsetDateTime portalLastUpdateDate) {
    this.portalLastUpdateDate = portalLastUpdateDate;
    return this;
  }

  /**
   * Get portalLastUpdateDate
   * @return portalLastUpdateDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getPortalLastUpdateDate() {
    return portalLastUpdateDate;
  }

  public void setPortalLastUpdateDate(OffsetDateTime portalLastUpdateDate) {
    this.portalLastUpdateDate = portalLastUpdateDate;
  }


  public DescribePortalResponse portalLogoImageLocation(DescribePortalResponsePortalLogoImageLocation portalLogoImageLocation) {
    this.portalLogoImageLocation = portalLogoImageLocation;
    return this;
  }

  /**
   * Get portalLogoImageLocation
   * @return portalLogoImageLocation
   */
  @javax.annotation.Nullable
  public DescribePortalResponsePortalLogoImageLocation getPortalLogoImageLocation() {
    return portalLogoImageLocation;
  }

  public void setPortalLogoImageLocation(DescribePortalResponsePortalLogoImageLocation portalLogoImageLocation) {
    this.portalLogoImageLocation = portalLogoImageLocation;
  }


  public DescribePortalResponse roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public DescribePortalResponse portalAuthMode(AuthMode portalAuthMode) {
    this.portalAuthMode = portalAuthMode;
    return this;
  }

  /**
   * Get portalAuthMode
   * @return portalAuthMode
   */
  @javax.annotation.Nullable
  public AuthMode getPortalAuthMode() {
    return portalAuthMode;
  }

  public void setPortalAuthMode(AuthMode portalAuthMode) {
    this.portalAuthMode = portalAuthMode;
  }


  public DescribePortalResponse notificationSenderEmail(String notificationSenderEmail) {
    this.notificationSenderEmail = notificationSenderEmail;
    return this;
  }

  /**
   * Get notificationSenderEmail
   * @return notificationSenderEmail
   */
  @javax.annotation.Nullable
  public String getNotificationSenderEmail() {
    return notificationSenderEmail;
  }

  public void setNotificationSenderEmail(String notificationSenderEmail) {
    this.notificationSenderEmail = notificationSenderEmail;
  }


  public DescribePortalResponse alarms(DescribePortalResponseAlarms alarms) {
    this.alarms = alarms;
    return this;
  }

  /**
   * Get alarms
   * @return alarms
   */
  @javax.annotation.Nullable
  public DescribePortalResponseAlarms getAlarms() {
    return alarms;
  }

  public void setAlarms(DescribePortalResponseAlarms alarms) {
    this.alarms = alarms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribePortalResponse describePortalResponse = (DescribePortalResponse) o;
    return Objects.equals(this.portalId, describePortalResponse.portalId) &&
        Objects.equals(this.portalArn, describePortalResponse.portalArn) &&
        Objects.equals(this.portalName, describePortalResponse.portalName) &&
        Objects.equals(this.portalDescription, describePortalResponse.portalDescription) &&
        Objects.equals(this.portalClientId, describePortalResponse.portalClientId) &&
        Objects.equals(this.portalStartUrl, describePortalResponse.portalStartUrl) &&
        Objects.equals(this.portalContactEmail, describePortalResponse.portalContactEmail) &&
        Objects.equals(this.portalStatus, describePortalResponse.portalStatus) &&
        Objects.equals(this.portalCreationDate, describePortalResponse.portalCreationDate) &&
        Objects.equals(this.portalLastUpdateDate, describePortalResponse.portalLastUpdateDate) &&
        Objects.equals(this.portalLogoImageLocation, describePortalResponse.portalLogoImageLocation) &&
        Objects.equals(this.roleArn, describePortalResponse.roleArn) &&
        Objects.equals(this.portalAuthMode, describePortalResponse.portalAuthMode) &&
        Objects.equals(this.notificationSenderEmail, describePortalResponse.notificationSenderEmail) &&
        Objects.equals(this.alarms, describePortalResponse.alarms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(portalId, portalArn, portalName, portalDescription, portalClientId, portalStartUrl, portalContactEmail, portalStatus, portalCreationDate, portalLastUpdateDate, portalLogoImageLocation, roleArn, portalAuthMode, notificationSenderEmail, alarms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribePortalResponse {\n");
    sb.append("    portalId: ").append(toIndentedString(portalId)).append("\n");
    sb.append("    portalArn: ").append(toIndentedString(portalArn)).append("\n");
    sb.append("    portalName: ").append(toIndentedString(portalName)).append("\n");
    sb.append("    portalDescription: ").append(toIndentedString(portalDescription)).append("\n");
    sb.append("    portalClientId: ").append(toIndentedString(portalClientId)).append("\n");
    sb.append("    portalStartUrl: ").append(toIndentedString(portalStartUrl)).append("\n");
    sb.append("    portalContactEmail: ").append(toIndentedString(portalContactEmail)).append("\n");
    sb.append("    portalStatus: ").append(toIndentedString(portalStatus)).append("\n");
    sb.append("    portalCreationDate: ").append(toIndentedString(portalCreationDate)).append("\n");
    sb.append("    portalLastUpdateDate: ").append(toIndentedString(portalLastUpdateDate)).append("\n");
    sb.append("    portalLogoImageLocation: ").append(toIndentedString(portalLogoImageLocation)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    portalAuthMode: ").append(toIndentedString(portalAuthMode)).append("\n");
    sb.append("    notificationSenderEmail: ").append(toIndentedString(notificationSenderEmail)).append("\n");
    sb.append("    alarms: ").append(toIndentedString(alarms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("portalId");
    openapiFields.add("portalArn");
    openapiFields.add("portalName");
    openapiFields.add("portalDescription");
    openapiFields.add("portalClientId");
    openapiFields.add("portalStartUrl");
    openapiFields.add("portalContactEmail");
    openapiFields.add("portalStatus");
    openapiFields.add("portalCreationDate");
    openapiFields.add("portalLastUpdateDate");
    openapiFields.add("portalLogoImageLocation");
    openapiFields.add("roleArn");
    openapiFields.add("portalAuthMode");
    openapiFields.add("notificationSenderEmail");
    openapiFields.add("alarms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("portalId");
    openapiRequiredFields.add("portalArn");
    openapiRequiredFields.add("portalName");
    openapiRequiredFields.add("portalClientId");
    openapiRequiredFields.add("portalStartUrl");
    openapiRequiredFields.add("portalContactEmail");
    openapiRequiredFields.add("portalStatus");
    openapiRequiredFields.add("portalCreationDate");
    openapiRequiredFields.add("portalLastUpdateDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribePortalResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribePortalResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribePortalResponse is not found in the empty JSON string", DescribePortalResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribePortalResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribePortalResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribePortalResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `portalId`
      String.validateJsonElement(jsonObj.get("portalId"));
      // validate the required field `portalArn`
      String.validateJsonElement(jsonObj.get("portalArn"));
      // validate the required field `portalName`
      String.validateJsonElement(jsonObj.get("portalName"));
      // validate the optional field `portalDescription`
      if (jsonObj.get("portalDescription") != null && !jsonObj.get("portalDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("portalDescription"));
      }
      // validate the required field `portalClientId`
      String.validateJsonElement(jsonObj.get("portalClientId"));
      // validate the required field `portalStartUrl`
      String.validateJsonElement(jsonObj.get("portalStartUrl"));
      // validate the required field `portalContactEmail`
      String.validateJsonElement(jsonObj.get("portalContactEmail"));
      // validate the required field `portalStatus`
      DescribePortalResponsePortalStatus.validateJsonElement(jsonObj.get("portalStatus"));
      // validate the required field `portalCreationDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("portalCreationDate"));
      // validate the required field `portalLastUpdateDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("portalLastUpdateDate"));
      // validate the optional field `portalLogoImageLocation`
      if (jsonObj.get("portalLogoImageLocation") != null && !jsonObj.get("portalLogoImageLocation").isJsonNull()) {
        DescribePortalResponsePortalLogoImageLocation.validateJsonElement(jsonObj.get("portalLogoImageLocation"));
      }
      // validate the optional field `roleArn`
      if (jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("roleArn"));
      }
      // validate the optional field `portalAuthMode`
      if (jsonObj.get("portalAuthMode") != null && !jsonObj.get("portalAuthMode").isJsonNull()) {
        AuthMode.validateJsonElement(jsonObj.get("portalAuthMode"));
      }
      // validate the optional field `notificationSenderEmail`
      if (jsonObj.get("notificationSenderEmail") != null && !jsonObj.get("notificationSenderEmail").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("notificationSenderEmail"));
      }
      // validate the optional field `alarms`
      if (jsonObj.get("alarms") != null && !jsonObj.get("alarms").isJsonNull()) {
        DescribePortalResponseAlarms.validateJsonElement(jsonObj.get("alarms"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribePortalResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribePortalResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribePortalResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribePortalResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribePortalResponse>() {
           @Override
           public void write(JsonWriter out, DescribePortalResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribePortalResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribePortalResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribePortalResponse
   * @throws IOException if the JSON string is invalid with respect to DescribePortalResponse
   */
  public static DescribePortalResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribePortalResponse.class);
  }

  /**
   * Convert an instance of DescribePortalResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

