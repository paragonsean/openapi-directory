/*
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateAssetsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:16.403232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateAssetsRequest {
  public static final String SERIALIZED_NAME_HIERARCHY_ID = "hierarchyId";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_ID)
  private String hierarchyId;

  public static final String SERIALIZED_NAME_CHILD_ASSET_ID = "childAssetId";
  @SerializedName(SERIALIZED_NAME_CHILD_ASSET_ID)
  private String childAssetId;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public AssociateAssetsRequest() {
  }

  public AssociateAssetsRequest hierarchyId(String hierarchyId) {
    this.hierarchyId = hierarchyId;
    return this;
  }

  /**
   * The ID of a hierarchy in the parent asset&#39;s model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html\&quot;&gt;Asset hierarchies&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.
   * @return hierarchyId
   */
  @javax.annotation.Nonnull
  public String getHierarchyId() {
    return hierarchyId;
  }

  public void setHierarchyId(String hierarchyId) {
    this.hierarchyId = hierarchyId;
  }


  public AssociateAssetsRequest childAssetId(String childAssetId) {
    this.childAssetId = childAssetId;
    return this;
  }

  /**
   * The ID of the child asset to be associated.
   * @return childAssetId
   */
  @javax.annotation.Nonnull
  public String getChildAssetId() {
    return childAssetId;
  }

  public void setChildAssetId(String childAssetId) {
    this.childAssetId = childAssetId;
  }


  public AssociateAssetsRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don&#39;t reuse this client token if a new idempotent request is required.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateAssetsRequest associateAssetsRequest = (AssociateAssetsRequest) o;
    return Objects.equals(this.hierarchyId, associateAssetsRequest.hierarchyId) &&
        Objects.equals(this.childAssetId, associateAssetsRequest.childAssetId) &&
        Objects.equals(this.clientToken, associateAssetsRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hierarchyId, childAssetId, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateAssetsRequest {\n");
    sb.append("    hierarchyId: ").append(toIndentedString(hierarchyId)).append("\n");
    sb.append("    childAssetId: ").append(toIndentedString(childAssetId)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hierarchyId");
    openapiFields.add("childAssetId");
    openapiFields.add("clientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hierarchyId");
    openapiRequiredFields.add("childAssetId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateAssetsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateAssetsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateAssetsRequest is not found in the empty JSON string", AssociateAssetsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateAssetsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateAssetsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateAssetsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("hierarchyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hierarchyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hierarchyId").toString()));
      }
      if (!jsonObj.get("childAssetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `childAssetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("childAssetId").toString()));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateAssetsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateAssetsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateAssetsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateAssetsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateAssetsRequest>() {
           @Override
           public void write(JsonWriter out, AssociateAssetsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateAssetsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateAssetsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateAssetsRequest
   * @throws IOException if the JSON string is invalid with respect to AssociateAssetsRequest
   */
  public static AssociateAssetsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateAssetsRequest.class);
  }

  /**
   * Convert an instance of AssociateAssetsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

