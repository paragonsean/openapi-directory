/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricWindow_tumbling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricWindow_tumbling::OAIMetricWindow_tumbling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricWindow_tumbling::OAIMetricWindow_tumbling() {
    this->initializeModel();
}

OAIMetricWindow_tumbling::~OAIMetricWindow_tumbling() {}

void OAIMetricWindow_tumbling::initializeModel() {

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;
}

void OAIMetricWindow_tumbling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricWindow_tumbling::fromJsonObject(QJsonObject json) {

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;
}

QString OAIMetricWindow_tumbling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricWindow_tumbling::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    return obj;
}

QString OAIMetricWindow_tumbling::getInterval() const {
    return m_interval;
}
void OAIMetricWindow_tumbling::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIMetricWindow_tumbling::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIMetricWindow_tumbling::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIMetricWindow_tumbling::getOffset() const {
    return m_offset;
}
void OAIMetricWindow_tumbling::setOffset(const QString &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIMetricWindow_tumbling::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIMetricWindow_tumbling::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAIMetricWindow_tumbling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricWindow_tumbling::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interval_isValid && true;
}

} // namespace OpenAPI
