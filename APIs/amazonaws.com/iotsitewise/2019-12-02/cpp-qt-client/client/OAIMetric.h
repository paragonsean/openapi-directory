/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetric.h
 *
 * &lt;p&gt;Contains an asset metric property. With metrics, you can calculate aggregate functions, such as an average, maximum, or minimum, as specified through an expression. A metric maps several values to a single value (such as a sum).&lt;/p&gt; &lt;p&gt;The maximum number of dependent/cascading variables used in any one metric calculation is 10. Therefore, a &lt;i&gt;root&lt;/i&gt; metric can have up to 10 cascading metrics in its computational dependency tree. Additionally, a metric can only have a data type of &lt;code&gt;DOUBLE&lt;/code&gt; and consume properties with data types of &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;DOUBLE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html#metrics\&quot;&gt;Metrics&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIMetric_H
#define OAIMetric_H

#include <QJsonObject>

#include "OAIMetric_processingConfig.h"
#include "OAIMetric_window.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetric_window;
class OAIMetric_processingConfig;

class OAIMetric : public OAIObject {
public:
    OAIMetric();
    OAIMetric(QString json);
    ~OAIMetric() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExpression() const;
    void setExpression(const QString &expression);
    bool is_expression_Set() const;
    bool is_expression_Valid() const;

    QList getVariables() const;
    void setVariables(const QList &variables);
    bool is_variables_Set() const;
    bool is_variables_Valid() const;

    OAIMetric_window getWindow() const;
    void setWindow(const OAIMetric_window &window);
    bool is_window_Set() const;
    bool is_window_Valid() const;

    OAIMetric_processingConfig getProcessingConfig() const;
    void setProcessingConfig(const OAIMetric_processingConfig &processing_config);
    bool is_processing_config_Set() const;
    bool is_processing_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_expression;
    bool m_expression_isSet;
    bool m_expression_isValid;

    QList m_variables;
    bool m_variables_isSet;
    bool m_variables_isValid;

    OAIMetric_window m_window;
    bool m_window_isSet;
    bool m_window_isValid;

    OAIMetric_processingConfig m_processing_config;
    bool m_processing_config_isSet;
    bool m_processing_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetric)

#endif // OAIMetric_H
