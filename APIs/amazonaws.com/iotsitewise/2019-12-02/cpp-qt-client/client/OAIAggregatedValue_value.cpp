/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregatedValue_value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregatedValue_value::OAIAggregatedValue_value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregatedValue_value::OAIAggregatedValue_value() {
    this->initializeModel();
}

OAIAggregatedValue_value::~OAIAggregatedValue_value() {}

void OAIAggregatedValue_value::initializeModel() {

    m_average_isSet = false;
    m_average_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_standard_deviation_isSet = false;
    m_standard_deviation_isValid = false;
}

void OAIAggregatedValue_value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregatedValue_value::fromJsonObject(QJsonObject json) {

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("average")]);
    m_average_isSet = !json[QString("average")].isNull() && m_average_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;

    m_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_standard_deviation, json[QString("standardDeviation")]);
    m_standard_deviation_isSet = !json[QString("standardDeviation")].isNull() && m_standard_deviation_isValid;
}

QString OAIAggregatedValue_value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregatedValue_value::asJsonObject() const {
    QJsonObject obj;
    if (m_average_isSet) {
        obj.insert(QString("average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_sum_isSet) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_standard_deviation_isSet) {
        obj.insert(QString("standardDeviation"), ::OpenAPI::toJsonValue(m_standard_deviation));
    }
    return obj;
}

double OAIAggregatedValue_value::getAverage() const {
    return m_average;
}
void OAIAggregatedValue_value::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIAggregatedValue_value::is_average_Set() const{
    return m_average_isSet;
}

bool OAIAggregatedValue_value::is_average_Valid() const{
    return m_average_isValid;
}

double OAIAggregatedValue_value::getCount() const {
    return m_count;
}
void OAIAggregatedValue_value::setCount(const double &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIAggregatedValue_value::is_count_Set() const{
    return m_count_isSet;
}

bool OAIAggregatedValue_value::is_count_Valid() const{
    return m_count_isValid;
}

double OAIAggregatedValue_value::getMaximum() const {
    return m_maximum;
}
void OAIAggregatedValue_value::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIAggregatedValue_value::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIAggregatedValue_value::is_maximum_Valid() const{
    return m_maximum_isValid;
}

double OAIAggregatedValue_value::getMinimum() const {
    return m_minimum;
}
void OAIAggregatedValue_value::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIAggregatedValue_value::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIAggregatedValue_value::is_minimum_Valid() const{
    return m_minimum_isValid;
}

double OAIAggregatedValue_value::getSum() const {
    return m_sum;
}
void OAIAggregatedValue_value::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIAggregatedValue_value::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIAggregatedValue_value::is_sum_Valid() const{
    return m_sum_isValid;
}

double OAIAggregatedValue_value::getStandardDeviation() const {
    return m_standard_deviation;
}
void OAIAggregatedValue_value::setStandardDeviation(const double &standard_deviation) {
    m_standard_deviation = standard_deviation;
    m_standard_deviation_isSet = true;
}

bool OAIAggregatedValue_value::is_standard_deviation_Set() const{
    return m_standard_deviation_isSet;
}

bool OAIAggregatedValue_value::is_standard_deviation_Valid() const{
    return m_standard_deviation_isValid;
}

bool OAIAggregatedValue_value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregatedValue_value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
