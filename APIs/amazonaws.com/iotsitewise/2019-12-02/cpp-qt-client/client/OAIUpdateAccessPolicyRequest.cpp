/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAccessPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAccessPolicyRequest::OAIUpdateAccessPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAccessPolicyRequest::OAIUpdateAccessPolicyRequest() {
    this->initializeModel();
}

OAIUpdateAccessPolicyRequest::~OAIUpdateAccessPolicyRequest() {}

void OAIUpdateAccessPolicyRequest::initializeModel() {

    m_access_policy_identity_isSet = false;
    m_access_policy_identity_isValid = false;

    m_access_policy_resource_isSet = false;
    m_access_policy_resource_isValid = false;

    m_access_policy_permission_isSet = false;
    m_access_policy_permission_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAIUpdateAccessPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAccessPolicyRequest::fromJsonObject(QJsonObject json) {

    m_access_policy_identity_isValid = ::OpenAPI::fromJsonValue(m_access_policy_identity, json[QString("accessPolicyIdentity")]);
    m_access_policy_identity_isSet = !json[QString("accessPolicyIdentity")].isNull() && m_access_policy_identity_isValid;

    m_access_policy_resource_isValid = ::OpenAPI::fromJsonValue(m_access_policy_resource, json[QString("accessPolicyResource")]);
    m_access_policy_resource_isSet = !json[QString("accessPolicyResource")].isNull() && m_access_policy_resource_isValid;

    m_access_policy_permission_isValid = ::OpenAPI::fromJsonValue(m_access_policy_permission, json[QString("accessPolicyPermission")]);
    m_access_policy_permission_isSet = !json[QString("accessPolicyPermission")].isNull() && m_access_policy_permission_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;
}

QString OAIUpdateAccessPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAccessPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_policy_identity.isSet()) {
        obj.insert(QString("accessPolicyIdentity"), ::OpenAPI::toJsonValue(m_access_policy_identity));
    }
    if (m_access_policy_resource.isSet()) {
        obj.insert(QString("accessPolicyResource"), ::OpenAPI::toJsonValue(m_access_policy_resource));
    }
    if (m_access_policy_permission.isSet()) {
        obj.insert(QString("accessPolicyPermission"), ::OpenAPI::toJsonValue(m_access_policy_permission));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

OAICreateAccessPolicyRequest_accessPolicyIdentity OAIUpdateAccessPolicyRequest::getAccessPolicyIdentity() const {
    return m_access_policy_identity;
}
void OAIUpdateAccessPolicyRequest::setAccessPolicyIdentity(const OAICreateAccessPolicyRequest_accessPolicyIdentity &access_policy_identity) {
    m_access_policy_identity = access_policy_identity;
    m_access_policy_identity_isSet = true;
}

bool OAIUpdateAccessPolicyRequest::is_access_policy_identity_Set() const{
    return m_access_policy_identity_isSet;
}

bool OAIUpdateAccessPolicyRequest::is_access_policy_identity_Valid() const{
    return m_access_policy_identity_isValid;
}

OAICreateAccessPolicyRequest_accessPolicyResource OAIUpdateAccessPolicyRequest::getAccessPolicyResource() const {
    return m_access_policy_resource;
}
void OAIUpdateAccessPolicyRequest::setAccessPolicyResource(const OAICreateAccessPolicyRequest_accessPolicyResource &access_policy_resource) {
    m_access_policy_resource = access_policy_resource;
    m_access_policy_resource_isSet = true;
}

bool OAIUpdateAccessPolicyRequest::is_access_policy_resource_Set() const{
    return m_access_policy_resource_isSet;
}

bool OAIUpdateAccessPolicyRequest::is_access_policy_resource_Valid() const{
    return m_access_policy_resource_isValid;
}

OAIPermission OAIUpdateAccessPolicyRequest::getAccessPolicyPermission() const {
    return m_access_policy_permission;
}
void OAIUpdateAccessPolicyRequest::setAccessPolicyPermission(const OAIPermission &access_policy_permission) {
    m_access_policy_permission = access_policy_permission;
    m_access_policy_permission_isSet = true;
}

bool OAIUpdateAccessPolicyRequest::is_access_policy_permission_Set() const{
    return m_access_policy_permission_isSet;
}

bool OAIUpdateAccessPolicyRequest::is_access_policy_permission_Valid() const{
    return m_access_policy_permission_isValid;
}

QString OAIUpdateAccessPolicyRequest::getClientToken() const {
    return m_client_token;
}
void OAIUpdateAccessPolicyRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateAccessPolicyRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateAccessPolicyRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIUpdateAccessPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_policy_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_policy_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_policy_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAccessPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_policy_identity_isValid && m_access_policy_resource_isValid && m_access_policy_permission_isValid && true;
}

} // namespace OpenAPI
