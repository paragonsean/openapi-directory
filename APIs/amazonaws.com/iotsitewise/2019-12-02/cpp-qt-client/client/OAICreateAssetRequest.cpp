/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssetRequest::OAICreateAssetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssetRequest::OAICreateAssetRequest() {
    this->initializeModel();
}

OAICreateAssetRequest::~OAICreateAssetRequest() {}

void OAICreateAssetRequest::initializeModel() {

    m_asset_name_isSet = false;
    m_asset_name_isValid = false;

    m_asset_model_id_isSet = false;
    m_asset_model_id_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_asset_description_isSet = false;
    m_asset_description_isValid = false;
}

void OAICreateAssetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssetRequest::fromJsonObject(QJsonObject json) {

    m_asset_name_isValid = ::OpenAPI::fromJsonValue(m_asset_name, json[QString("assetName")]);
    m_asset_name_isSet = !json[QString("assetName")].isNull() && m_asset_name_isValid;

    m_asset_model_id_isValid = ::OpenAPI::fromJsonValue(m_asset_model_id, json[QString("assetModelId")]);
    m_asset_model_id_isSet = !json[QString("assetModelId")].isNull() && m_asset_model_id_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_asset_description_isValid = ::OpenAPI::fromJsonValue(m_asset_description, json[QString("assetDescription")]);
    m_asset_description_isSet = !json[QString("assetDescription")].isNull() && m_asset_description_isValid;
}

QString OAICreateAssetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_name_isSet) {
        obj.insert(QString("assetName"), ::OpenAPI::toJsonValue(m_asset_name));
    }
    if (m_asset_model_id_isSet) {
        obj.insert(QString("assetModelId"), ::OpenAPI::toJsonValue(m_asset_model_id));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_asset_description_isSet) {
        obj.insert(QString("assetDescription"), ::OpenAPI::toJsonValue(m_asset_description));
    }
    return obj;
}

QString OAICreateAssetRequest::getAssetName() const {
    return m_asset_name;
}
void OAICreateAssetRequest::setAssetName(const QString &asset_name) {
    m_asset_name = asset_name;
    m_asset_name_isSet = true;
}

bool OAICreateAssetRequest::is_asset_name_Set() const{
    return m_asset_name_isSet;
}

bool OAICreateAssetRequest::is_asset_name_Valid() const{
    return m_asset_name_isValid;
}

QString OAICreateAssetRequest::getAssetModelId() const {
    return m_asset_model_id;
}
void OAICreateAssetRequest::setAssetModelId(const QString &asset_model_id) {
    m_asset_model_id = asset_model_id;
    m_asset_model_id_isSet = true;
}

bool OAICreateAssetRequest::is_asset_model_id_Set() const{
    return m_asset_model_id_isSet;
}

bool OAICreateAssetRequest::is_asset_model_id_Valid() const{
    return m_asset_model_id_isValid;
}

QString OAICreateAssetRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateAssetRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAssetRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAssetRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QMap OAICreateAssetRequest::getTags() const {
    return m_tags;
}
void OAICreateAssetRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAssetRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAssetRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateAssetRequest::getAssetDescription() const {
    return m_asset_description;
}
void OAICreateAssetRequest::setAssetDescription(const QString &asset_description) {
    m_asset_description = asset_description;
    m_asset_description_isSet = true;
}

bool OAICreateAssetRequest::is_asset_description_Set() const{
    return m_asset_description_isSet;
}

bool OAICreateAssetRequest::is_asset_description_Valid() const{
    return m_asset_description_isValid;
}

bool OAICreateAssetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_name_isValid && m_asset_model_id_isValid && true;
}

} // namespace OpenAPI
