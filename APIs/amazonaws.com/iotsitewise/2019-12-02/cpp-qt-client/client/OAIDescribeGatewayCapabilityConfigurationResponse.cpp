/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeGatewayCapabilityConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeGatewayCapabilityConfigurationResponse::OAIDescribeGatewayCapabilityConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeGatewayCapabilityConfigurationResponse::OAIDescribeGatewayCapabilityConfigurationResponse() {
    this->initializeModel();
}

OAIDescribeGatewayCapabilityConfigurationResponse::~OAIDescribeGatewayCapabilityConfigurationResponse() {}

void OAIDescribeGatewayCapabilityConfigurationResponse::initializeModel() {

    m_gateway_id_isSet = false;
    m_gateway_id_isValid = false;

    m_capability_namespace_isSet = false;
    m_capability_namespace_isValid = false;

    m_capability_configuration_isSet = false;
    m_capability_configuration_isValid = false;

    m_capability_sync_status_isSet = false;
    m_capability_sync_status_isValid = false;
}

void OAIDescribeGatewayCapabilityConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeGatewayCapabilityConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_gateway_id_isValid = ::OpenAPI::fromJsonValue(m_gateway_id, json[QString("gatewayId")]);
    m_gateway_id_isSet = !json[QString("gatewayId")].isNull() && m_gateway_id_isValid;

    m_capability_namespace_isValid = ::OpenAPI::fromJsonValue(m_capability_namespace, json[QString("capabilityNamespace")]);
    m_capability_namespace_isSet = !json[QString("capabilityNamespace")].isNull() && m_capability_namespace_isValid;

    m_capability_configuration_isValid = ::OpenAPI::fromJsonValue(m_capability_configuration, json[QString("capabilityConfiguration")]);
    m_capability_configuration_isSet = !json[QString("capabilityConfiguration")].isNull() && m_capability_configuration_isValid;

    m_capability_sync_status_isValid = ::OpenAPI::fromJsonValue(m_capability_sync_status, json[QString("capabilitySyncStatus")]);
    m_capability_sync_status_isSet = !json[QString("capabilitySyncStatus")].isNull() && m_capability_sync_status_isValid;
}

QString OAIDescribeGatewayCapabilityConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeGatewayCapabilityConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_id_isSet) {
        obj.insert(QString("gatewayId"), ::OpenAPI::toJsonValue(m_gateway_id));
    }
    if (m_capability_namespace_isSet) {
        obj.insert(QString("capabilityNamespace"), ::OpenAPI::toJsonValue(m_capability_namespace));
    }
    if (m_capability_configuration_isSet) {
        obj.insert(QString("capabilityConfiguration"), ::OpenAPI::toJsonValue(m_capability_configuration));
    }
    if (m_capability_sync_status.isSet()) {
        obj.insert(QString("capabilitySyncStatus"), ::OpenAPI::toJsonValue(m_capability_sync_status));
    }
    return obj;
}

QString OAIDescribeGatewayCapabilityConfigurationResponse::getGatewayId() const {
    return m_gateway_id;
}
void OAIDescribeGatewayCapabilityConfigurationResponse::setGatewayId(const QString &gateway_id) {
    m_gateway_id = gateway_id;
    m_gateway_id_isSet = true;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::is_gateway_id_Set() const{
    return m_gateway_id_isSet;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::is_gateway_id_Valid() const{
    return m_gateway_id_isValid;
}

QString OAIDescribeGatewayCapabilityConfigurationResponse::getCapabilityNamespace() const {
    return m_capability_namespace;
}
void OAIDescribeGatewayCapabilityConfigurationResponse::setCapabilityNamespace(const QString &capability_namespace) {
    m_capability_namespace = capability_namespace;
    m_capability_namespace_isSet = true;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::is_capability_namespace_Set() const{
    return m_capability_namespace_isSet;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::is_capability_namespace_Valid() const{
    return m_capability_namespace_isValid;
}

QString OAIDescribeGatewayCapabilityConfigurationResponse::getCapabilityConfiguration() const {
    return m_capability_configuration;
}
void OAIDescribeGatewayCapabilityConfigurationResponse::setCapabilityConfiguration(const QString &capability_configuration) {
    m_capability_configuration = capability_configuration;
    m_capability_configuration_isSet = true;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::is_capability_configuration_Set() const{
    return m_capability_configuration_isSet;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::is_capability_configuration_Valid() const{
    return m_capability_configuration_isValid;
}

OAICapabilitySyncStatus OAIDescribeGatewayCapabilityConfigurationResponse::getCapabilitySyncStatus() const {
    return m_capability_sync_status;
}
void OAIDescribeGatewayCapabilityConfigurationResponse::setCapabilitySyncStatus(const OAICapabilitySyncStatus &capability_sync_status) {
    m_capability_sync_status = capability_sync_status;
    m_capability_sync_status_isSet = true;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::is_capability_sync_status_Set() const{
    return m_capability_sync_status_isSet;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::is_capability_sync_status_Valid() const{
    return m_capability_sync_status_isValid;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capability_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capability_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capability_sync_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeGatewayCapabilityConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gateway_id_isValid && m_capability_namespace_isValid && m_capability_configuration_isValid && m_capability_sync_status_isValid && true;
}

} // namespace OpenAPI
