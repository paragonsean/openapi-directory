/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetPropertyValue_value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetPropertyValue_value::OAIAssetPropertyValue_value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetPropertyValue_value::OAIAssetPropertyValue_value() {
    this->initializeModel();
}

OAIAssetPropertyValue_value::~OAIAssetPropertyValue_value() {}

void OAIAssetPropertyValue_value::initializeModel() {

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_integer_value_isSet = false;
    m_integer_value_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;
}

void OAIAssetPropertyValue_value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetPropertyValue_value::fromJsonObject(QJsonObject json) {

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;

    m_integer_value_isValid = ::OpenAPI::fromJsonValue(m_integer_value, json[QString("integerValue")]);
    m_integer_value_isSet = !json[QString("integerValue")].isNull() && m_integer_value_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("booleanValue")]);
    m_boolean_value_isSet = !json[QString("booleanValue")].isNull() && m_boolean_value_isValid;
}

QString OAIAssetPropertyValue_value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetPropertyValue_value::asJsonObject() const {
    QJsonObject obj;
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_integer_value_isSet) {
        obj.insert(QString("integerValue"), ::OpenAPI::toJsonValue(m_integer_value));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_boolean_value_isSet) {
        obj.insert(QString("booleanValue"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    return obj;
}

QString OAIAssetPropertyValue_value::getStringValue() const {
    return m_string_value;
}
void OAIAssetPropertyValue_value::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIAssetPropertyValue_value::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIAssetPropertyValue_value::is_string_value_Valid() const{
    return m_string_value_isValid;
}

qint32 OAIAssetPropertyValue_value::getIntegerValue() const {
    return m_integer_value;
}
void OAIAssetPropertyValue_value::setIntegerValue(const qint32 &integer_value) {
    m_integer_value = integer_value;
    m_integer_value_isSet = true;
}

bool OAIAssetPropertyValue_value::is_integer_value_Set() const{
    return m_integer_value_isSet;
}

bool OAIAssetPropertyValue_value::is_integer_value_Valid() const{
    return m_integer_value_isValid;
}

double OAIAssetPropertyValue_value::getDoubleValue() const {
    return m_double_value;
}
void OAIAssetPropertyValue_value::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIAssetPropertyValue_value::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIAssetPropertyValue_value::is_double_value_Valid() const{
    return m_double_value_isValid;
}

bool OAIAssetPropertyValue_value::getBooleanValue() const {
    return m_boolean_value;
}
void OAIAssetPropertyValue_value::setBooleanValue(const bool &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAIAssetPropertyValue_value::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAIAssetPropertyValue_value::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

bool OAIAssetPropertyValue_value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetPropertyValue_value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
