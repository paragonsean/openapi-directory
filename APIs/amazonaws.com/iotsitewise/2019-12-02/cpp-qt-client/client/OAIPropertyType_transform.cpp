/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyType_transform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyType_transform::OAIPropertyType_transform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyType_transform::OAIPropertyType_transform() {
    this->initializeModel();
}

OAIPropertyType_transform::~OAIPropertyType_transform() {}

void OAIPropertyType_transform::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;

    m_processing_config_isSet = false;
    m_processing_config_isValid = false;
}

void OAIPropertyType_transform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyType_transform::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;

    m_processing_config_isValid = ::OpenAPI::fromJsonValue(m_processing_config, json[QString("processingConfig")]);
    m_processing_config_isSet = !json[QString("processingConfig")].isNull() && m_processing_config_isValid;
}

QString OAIPropertyType_transform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyType_transform::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_variables.isSet()) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    if (m_processing_config.isSet()) {
        obj.insert(QString("processingConfig"), ::OpenAPI::toJsonValue(m_processing_config));
    }
    return obj;
}

QString OAIPropertyType_transform::getExpression() const {
    return m_expression;
}
void OAIPropertyType_transform::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIPropertyType_transform::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIPropertyType_transform::is_expression_Valid() const{
    return m_expression_isValid;
}

QList OAIPropertyType_transform::getVariables() const {
    return m_variables;
}
void OAIPropertyType_transform::setVariables(const QList &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIPropertyType_transform::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIPropertyType_transform::is_variables_Valid() const{
    return m_variables_isValid;
}

OAITransform_processingConfig OAIPropertyType_transform::getProcessingConfig() const {
    return m_processing_config;
}
void OAIPropertyType_transform::setProcessingConfig(const OAITransform_processingConfig &processing_config) {
    m_processing_config = processing_config;
    m_processing_config_isSet = true;
}

bool OAIPropertyType_transform::is_processing_config_Set() const{
    return m_processing_config_isSet;
}

bool OAIPropertyType_transform::is_processing_config_Valid() const{
    return m_processing_config_isValid;
}

bool OAIPropertyType_transform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyType_transform::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && m_variables_isValid && true;
}

} // namespace OpenAPI
