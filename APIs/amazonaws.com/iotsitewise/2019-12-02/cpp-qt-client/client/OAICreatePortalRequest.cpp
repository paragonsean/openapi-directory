/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePortalRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePortalRequest::OAICreatePortalRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePortalRequest::OAICreatePortalRequest() {
    this->initializeModel();
}

OAICreatePortalRequest::~OAICreatePortalRequest() {}

void OAICreatePortalRequest::initializeModel() {

    m_portal_name_isSet = false;
    m_portal_name_isValid = false;

    m_portal_description_isSet = false;
    m_portal_description_isValid = false;

    m_portal_contact_email_isSet = false;
    m_portal_contact_email_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_portal_logo_image_file_isSet = false;
    m_portal_logo_image_file_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_portal_auth_mode_isSet = false;
    m_portal_auth_mode_isValid = false;

    m_notification_sender_email_isSet = false;
    m_notification_sender_email_isValid = false;

    m_alarms_isSet = false;
    m_alarms_isValid = false;
}

void OAICreatePortalRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePortalRequest::fromJsonObject(QJsonObject json) {

    m_portal_name_isValid = ::OpenAPI::fromJsonValue(m_portal_name, json[QString("portalName")]);
    m_portal_name_isSet = !json[QString("portalName")].isNull() && m_portal_name_isValid;

    m_portal_description_isValid = ::OpenAPI::fromJsonValue(m_portal_description, json[QString("portalDescription")]);
    m_portal_description_isSet = !json[QString("portalDescription")].isNull() && m_portal_description_isValid;

    m_portal_contact_email_isValid = ::OpenAPI::fromJsonValue(m_portal_contact_email, json[QString("portalContactEmail")]);
    m_portal_contact_email_isSet = !json[QString("portalContactEmail")].isNull() && m_portal_contact_email_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_portal_logo_image_file_isValid = ::OpenAPI::fromJsonValue(m_portal_logo_image_file, json[QString("portalLogoImageFile")]);
    m_portal_logo_image_file_isSet = !json[QString("portalLogoImageFile")].isNull() && m_portal_logo_image_file_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_portal_auth_mode_isValid = ::OpenAPI::fromJsonValue(m_portal_auth_mode, json[QString("portalAuthMode")]);
    m_portal_auth_mode_isSet = !json[QString("portalAuthMode")].isNull() && m_portal_auth_mode_isValid;

    m_notification_sender_email_isValid = ::OpenAPI::fromJsonValue(m_notification_sender_email, json[QString("notificationSenderEmail")]);
    m_notification_sender_email_isSet = !json[QString("notificationSenderEmail")].isNull() && m_notification_sender_email_isValid;

    m_alarms_isValid = ::OpenAPI::fromJsonValue(m_alarms, json[QString("alarms")]);
    m_alarms_isSet = !json[QString("alarms")].isNull() && m_alarms_isValid;
}

QString OAICreatePortalRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePortalRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_portal_name_isSet) {
        obj.insert(QString("portalName"), ::OpenAPI::toJsonValue(m_portal_name));
    }
    if (m_portal_description_isSet) {
        obj.insert(QString("portalDescription"), ::OpenAPI::toJsonValue(m_portal_description));
    }
    if (m_portal_contact_email_isSet) {
        obj.insert(QString("portalContactEmail"), ::OpenAPI::toJsonValue(m_portal_contact_email));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_portal_logo_image_file.isSet()) {
        obj.insert(QString("portalLogoImageFile"), ::OpenAPI::toJsonValue(m_portal_logo_image_file));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_portal_auth_mode.isSet()) {
        obj.insert(QString("portalAuthMode"), ::OpenAPI::toJsonValue(m_portal_auth_mode));
    }
    if (m_notification_sender_email_isSet) {
        obj.insert(QString("notificationSenderEmail"), ::OpenAPI::toJsonValue(m_notification_sender_email));
    }
    if (m_alarms.isSet()) {
        obj.insert(QString("alarms"), ::OpenAPI::toJsonValue(m_alarms));
    }
    return obj;
}

QString OAICreatePortalRequest::getPortalName() const {
    return m_portal_name;
}
void OAICreatePortalRequest::setPortalName(const QString &portal_name) {
    m_portal_name = portal_name;
    m_portal_name_isSet = true;
}

bool OAICreatePortalRequest::is_portal_name_Set() const{
    return m_portal_name_isSet;
}

bool OAICreatePortalRequest::is_portal_name_Valid() const{
    return m_portal_name_isValid;
}

QString OAICreatePortalRequest::getPortalDescription() const {
    return m_portal_description;
}
void OAICreatePortalRequest::setPortalDescription(const QString &portal_description) {
    m_portal_description = portal_description;
    m_portal_description_isSet = true;
}

bool OAICreatePortalRequest::is_portal_description_Set() const{
    return m_portal_description_isSet;
}

bool OAICreatePortalRequest::is_portal_description_Valid() const{
    return m_portal_description_isValid;
}

QString OAICreatePortalRequest::getPortalContactEmail() const {
    return m_portal_contact_email;
}
void OAICreatePortalRequest::setPortalContactEmail(const QString &portal_contact_email) {
    m_portal_contact_email = portal_contact_email;
    m_portal_contact_email_isSet = true;
}

bool OAICreatePortalRequest::is_portal_contact_email_Set() const{
    return m_portal_contact_email_isSet;
}

bool OAICreatePortalRequest::is_portal_contact_email_Valid() const{
    return m_portal_contact_email_isValid;
}

QString OAICreatePortalRequest::getClientToken() const {
    return m_client_token;
}
void OAICreatePortalRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreatePortalRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreatePortalRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreatePortalRequest_portalLogoImageFile OAICreatePortalRequest::getPortalLogoImageFile() const {
    return m_portal_logo_image_file;
}
void OAICreatePortalRequest::setPortalLogoImageFile(const OAICreatePortalRequest_portalLogoImageFile &portal_logo_image_file) {
    m_portal_logo_image_file = portal_logo_image_file;
    m_portal_logo_image_file_isSet = true;
}

bool OAICreatePortalRequest::is_portal_logo_image_file_Set() const{
    return m_portal_logo_image_file_isSet;
}

bool OAICreatePortalRequest::is_portal_logo_image_file_Valid() const{
    return m_portal_logo_image_file_isValid;
}

QString OAICreatePortalRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreatePortalRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreatePortalRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreatePortalRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QMap OAICreatePortalRequest::getTags() const {
    return m_tags;
}
void OAICreatePortalRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePortalRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePortalRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIAuthMode OAICreatePortalRequest::getPortalAuthMode() const {
    return m_portal_auth_mode;
}
void OAICreatePortalRequest::setPortalAuthMode(const OAIAuthMode &portal_auth_mode) {
    m_portal_auth_mode = portal_auth_mode;
    m_portal_auth_mode_isSet = true;
}

bool OAICreatePortalRequest::is_portal_auth_mode_Set() const{
    return m_portal_auth_mode_isSet;
}

bool OAICreatePortalRequest::is_portal_auth_mode_Valid() const{
    return m_portal_auth_mode_isValid;
}

QString OAICreatePortalRequest::getNotificationSenderEmail() const {
    return m_notification_sender_email;
}
void OAICreatePortalRequest::setNotificationSenderEmail(const QString &notification_sender_email) {
    m_notification_sender_email = notification_sender_email;
    m_notification_sender_email_isSet = true;
}

bool OAICreatePortalRequest::is_notification_sender_email_Set() const{
    return m_notification_sender_email_isSet;
}

bool OAICreatePortalRequest::is_notification_sender_email_Valid() const{
    return m_notification_sender_email_isValid;
}

OAICreatePortalRequest_alarms OAICreatePortalRequest::getAlarms() const {
    return m_alarms;
}
void OAICreatePortalRequest::setAlarms(const OAICreatePortalRequest_alarms &alarms) {
    m_alarms = alarms;
    m_alarms_isSet = true;
}

bool OAICreatePortalRequest::is_alarms_Set() const{
    return m_alarms_isSet;
}

bool OAICreatePortalRequest::is_alarms_Valid() const{
    return m_alarms_isValid;
}

bool OAICreatePortalRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_portal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_contact_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_logo_image_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_auth_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_sender_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePortalRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portal_name_isValid && m_portal_contact_email_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
