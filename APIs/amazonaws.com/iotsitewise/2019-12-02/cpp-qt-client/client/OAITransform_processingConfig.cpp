/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransform_processingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransform_processingConfig::OAITransform_processingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransform_processingConfig::OAITransform_processingConfig() {
    this->initializeModel();
}

OAITransform_processingConfig::~OAITransform_processingConfig() {}

void OAITransform_processingConfig::initializeModel() {

    m_compute_location_isSet = false;
    m_compute_location_isValid = false;

    m_forwarding_config_isSet = false;
    m_forwarding_config_isValid = false;
}

void OAITransform_processingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransform_processingConfig::fromJsonObject(QJsonObject json) {

    m_compute_location_isValid = ::OpenAPI::fromJsonValue(m_compute_location, json[QString("computeLocation")]);
    m_compute_location_isSet = !json[QString("computeLocation")].isNull() && m_compute_location_isValid;

    m_forwarding_config_isValid = ::OpenAPI::fromJsonValue(m_forwarding_config, json[QString("forwardingConfig")]);
    m_forwarding_config_isSet = !json[QString("forwardingConfig")].isNull() && m_forwarding_config_isValid;
}

QString OAITransform_processingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransform_processingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_location.isSet()) {
        obj.insert(QString("computeLocation"), ::OpenAPI::toJsonValue(m_compute_location));
    }
    if (m_forwarding_config.isSet()) {
        obj.insert(QString("forwardingConfig"), ::OpenAPI::toJsonValue(m_forwarding_config));
    }
    return obj;
}

OAIComputeLocation OAITransform_processingConfig::getComputeLocation() const {
    return m_compute_location;
}
void OAITransform_processingConfig::setComputeLocation(const OAIComputeLocation &compute_location) {
    m_compute_location = compute_location;
    m_compute_location_isSet = true;
}

bool OAITransform_processingConfig::is_compute_location_Set() const{
    return m_compute_location_isSet;
}

bool OAITransform_processingConfig::is_compute_location_Valid() const{
    return m_compute_location_isValid;
}

OAIForwardingConfig OAITransform_processingConfig::getForwardingConfig() const {
    return m_forwarding_config;
}
void OAITransform_processingConfig::setForwardingConfig(const OAIForwardingConfig &forwarding_config) {
    m_forwarding_config = forwarding_config;
    m_forwarding_config_isSet = true;
}

bool OAITransform_processingConfig::is_forwarding_config_Set() const{
    return m_forwarding_config_isSet;
}

bool OAITransform_processingConfig::is_forwarding_config_Valid() const{
    return m_forwarding_config_isValid;
}

bool OAITransform_processingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransform_processingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compute_location_isValid && true;
}

} // namespace OpenAPI
