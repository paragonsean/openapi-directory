/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAssetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAssetResponse::OAIDescribeAssetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAssetResponse::OAIDescribeAssetResponse() {
    this->initializeModel();
}

OAIDescribeAssetResponse::~OAIDescribeAssetResponse() {}

void OAIDescribeAssetResponse::initializeModel() {

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_asset_arn_isSet = false;
    m_asset_arn_isValid = false;

    m_asset_name_isSet = false;
    m_asset_name_isValid = false;

    m_asset_model_id_isSet = false;
    m_asset_model_id_isValid = false;

    m_asset_properties_isSet = false;
    m_asset_properties_isValid = false;

    m_asset_hierarchies_isSet = false;
    m_asset_hierarchies_isValid = false;

    m_asset_composite_models_isSet = false;
    m_asset_composite_models_isValid = false;

    m_asset_creation_date_isSet = false;
    m_asset_creation_date_isValid = false;

    m_asset_last_update_date_isSet = false;
    m_asset_last_update_date_isValid = false;

    m_asset_status_isSet = false;
    m_asset_status_isValid = false;

    m_asset_description_isSet = false;
    m_asset_description_isValid = false;
}

void OAIDescribeAssetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAssetResponse::fromJsonObject(QJsonObject json) {

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_asset_arn_isValid = ::OpenAPI::fromJsonValue(m_asset_arn, json[QString("assetArn")]);
    m_asset_arn_isSet = !json[QString("assetArn")].isNull() && m_asset_arn_isValid;

    m_asset_name_isValid = ::OpenAPI::fromJsonValue(m_asset_name, json[QString("assetName")]);
    m_asset_name_isSet = !json[QString("assetName")].isNull() && m_asset_name_isValid;

    m_asset_model_id_isValid = ::OpenAPI::fromJsonValue(m_asset_model_id, json[QString("assetModelId")]);
    m_asset_model_id_isSet = !json[QString("assetModelId")].isNull() && m_asset_model_id_isValid;

    m_asset_properties_isValid = ::OpenAPI::fromJsonValue(m_asset_properties, json[QString("assetProperties")]);
    m_asset_properties_isSet = !json[QString("assetProperties")].isNull() && m_asset_properties_isValid;

    m_asset_hierarchies_isValid = ::OpenAPI::fromJsonValue(m_asset_hierarchies, json[QString("assetHierarchies")]);
    m_asset_hierarchies_isSet = !json[QString("assetHierarchies")].isNull() && m_asset_hierarchies_isValid;

    m_asset_composite_models_isValid = ::OpenAPI::fromJsonValue(m_asset_composite_models, json[QString("assetCompositeModels")]);
    m_asset_composite_models_isSet = !json[QString("assetCompositeModels")].isNull() && m_asset_composite_models_isValid;

    m_asset_creation_date_isValid = ::OpenAPI::fromJsonValue(m_asset_creation_date, json[QString("assetCreationDate")]);
    m_asset_creation_date_isSet = !json[QString("assetCreationDate")].isNull() && m_asset_creation_date_isValid;

    m_asset_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_asset_last_update_date, json[QString("assetLastUpdateDate")]);
    m_asset_last_update_date_isSet = !json[QString("assetLastUpdateDate")].isNull() && m_asset_last_update_date_isValid;

    m_asset_status_isValid = ::OpenAPI::fromJsonValue(m_asset_status, json[QString("assetStatus")]);
    m_asset_status_isSet = !json[QString("assetStatus")].isNull() && m_asset_status_isValid;

    m_asset_description_isValid = ::OpenAPI::fromJsonValue(m_asset_description, json[QString("assetDescription")]);
    m_asset_description_isSet = !json[QString("assetDescription")].isNull() && m_asset_description_isValid;
}

QString OAIDescribeAssetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAssetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_isSet) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_asset_arn_isSet) {
        obj.insert(QString("assetArn"), ::OpenAPI::toJsonValue(m_asset_arn));
    }
    if (m_asset_name_isSet) {
        obj.insert(QString("assetName"), ::OpenAPI::toJsonValue(m_asset_name));
    }
    if (m_asset_model_id_isSet) {
        obj.insert(QString("assetModelId"), ::OpenAPI::toJsonValue(m_asset_model_id));
    }
    if (m_asset_properties.isSet()) {
        obj.insert(QString("assetProperties"), ::OpenAPI::toJsonValue(m_asset_properties));
    }
    if (m_asset_hierarchies.isSet()) {
        obj.insert(QString("assetHierarchies"), ::OpenAPI::toJsonValue(m_asset_hierarchies));
    }
    if (m_asset_composite_models.isSet()) {
        obj.insert(QString("assetCompositeModels"), ::OpenAPI::toJsonValue(m_asset_composite_models));
    }
    if (m_asset_creation_date_isSet) {
        obj.insert(QString("assetCreationDate"), ::OpenAPI::toJsonValue(m_asset_creation_date));
    }
    if (m_asset_last_update_date_isSet) {
        obj.insert(QString("assetLastUpdateDate"), ::OpenAPI::toJsonValue(m_asset_last_update_date));
    }
    if (m_asset_status.isSet()) {
        obj.insert(QString("assetStatus"), ::OpenAPI::toJsonValue(m_asset_status));
    }
    if (m_asset_description_isSet) {
        obj.insert(QString("assetDescription"), ::OpenAPI::toJsonValue(m_asset_description));
    }
    return obj;
}

QString OAIDescribeAssetResponse::getAssetId() const {
    return m_asset_id;
}
void OAIDescribeAssetResponse::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIDescribeAssetResponse::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIDescribeAssetResponse::getAssetArn() const {
    return m_asset_arn;
}
void OAIDescribeAssetResponse::setAssetArn(const QString &asset_arn) {
    m_asset_arn = asset_arn;
    m_asset_arn_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_arn_Set() const{
    return m_asset_arn_isSet;
}

bool OAIDescribeAssetResponse::is_asset_arn_Valid() const{
    return m_asset_arn_isValid;
}

QString OAIDescribeAssetResponse::getAssetName() const {
    return m_asset_name;
}
void OAIDescribeAssetResponse::setAssetName(const QString &asset_name) {
    m_asset_name = asset_name;
    m_asset_name_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_name_Set() const{
    return m_asset_name_isSet;
}

bool OAIDescribeAssetResponse::is_asset_name_Valid() const{
    return m_asset_name_isValid;
}

QString OAIDescribeAssetResponse::getAssetModelId() const {
    return m_asset_model_id;
}
void OAIDescribeAssetResponse::setAssetModelId(const QString &asset_model_id) {
    m_asset_model_id = asset_model_id;
    m_asset_model_id_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_model_id_Set() const{
    return m_asset_model_id_isSet;
}

bool OAIDescribeAssetResponse::is_asset_model_id_Valid() const{
    return m_asset_model_id_isValid;
}

QList OAIDescribeAssetResponse::getAssetProperties() const {
    return m_asset_properties;
}
void OAIDescribeAssetResponse::setAssetProperties(const QList &asset_properties) {
    m_asset_properties = asset_properties;
    m_asset_properties_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_properties_Set() const{
    return m_asset_properties_isSet;
}

bool OAIDescribeAssetResponse::is_asset_properties_Valid() const{
    return m_asset_properties_isValid;
}

QList OAIDescribeAssetResponse::getAssetHierarchies() const {
    return m_asset_hierarchies;
}
void OAIDescribeAssetResponse::setAssetHierarchies(const QList &asset_hierarchies) {
    m_asset_hierarchies = asset_hierarchies;
    m_asset_hierarchies_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_hierarchies_Set() const{
    return m_asset_hierarchies_isSet;
}

bool OAIDescribeAssetResponse::is_asset_hierarchies_Valid() const{
    return m_asset_hierarchies_isValid;
}

QList OAIDescribeAssetResponse::getAssetCompositeModels() const {
    return m_asset_composite_models;
}
void OAIDescribeAssetResponse::setAssetCompositeModels(const QList &asset_composite_models) {
    m_asset_composite_models = asset_composite_models;
    m_asset_composite_models_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_composite_models_Set() const{
    return m_asset_composite_models_isSet;
}

bool OAIDescribeAssetResponse::is_asset_composite_models_Valid() const{
    return m_asset_composite_models_isValid;
}

QDateTime OAIDescribeAssetResponse::getAssetCreationDate() const {
    return m_asset_creation_date;
}
void OAIDescribeAssetResponse::setAssetCreationDate(const QDateTime &asset_creation_date) {
    m_asset_creation_date = asset_creation_date;
    m_asset_creation_date_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_creation_date_Set() const{
    return m_asset_creation_date_isSet;
}

bool OAIDescribeAssetResponse::is_asset_creation_date_Valid() const{
    return m_asset_creation_date_isValid;
}

QDateTime OAIDescribeAssetResponse::getAssetLastUpdateDate() const {
    return m_asset_last_update_date;
}
void OAIDescribeAssetResponse::setAssetLastUpdateDate(const QDateTime &asset_last_update_date) {
    m_asset_last_update_date = asset_last_update_date;
    m_asset_last_update_date_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_last_update_date_Set() const{
    return m_asset_last_update_date_isSet;
}

bool OAIDescribeAssetResponse::is_asset_last_update_date_Valid() const{
    return m_asset_last_update_date_isValid;
}

OAIDescribeAssetResponse_assetStatus OAIDescribeAssetResponse::getAssetStatus() const {
    return m_asset_status;
}
void OAIDescribeAssetResponse::setAssetStatus(const OAIDescribeAssetResponse_assetStatus &asset_status) {
    m_asset_status = asset_status;
    m_asset_status_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_status_Set() const{
    return m_asset_status_isSet;
}

bool OAIDescribeAssetResponse::is_asset_status_Valid() const{
    return m_asset_status_isValid;
}

QString OAIDescribeAssetResponse::getAssetDescription() const {
    return m_asset_description;
}
void OAIDescribeAssetResponse::setAssetDescription(const QString &asset_description) {
    m_asset_description = asset_description;
    m_asset_description_isSet = true;
}

bool OAIDescribeAssetResponse::is_asset_description_Set() const{
    return m_asset_description_isSet;
}

bool OAIDescribeAssetResponse::is_asset_description_Valid() const{
    return m_asset_description_isValid;
}

bool OAIDescribeAssetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_hierarchies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_composite_models.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAssetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_id_isValid && m_asset_arn_isValid && m_asset_name_isValid && m_asset_model_id_isValid && m_asset_properties_isValid && m_asset_hierarchies_isValid && m_asset_creation_date_isValid && m_asset_last_update_date_isValid && m_asset_status_isValid && true;
}

} // namespace OpenAPI
