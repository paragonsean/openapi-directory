/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePortalResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePortalResponse::OAICreatePortalResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePortalResponse::OAICreatePortalResponse() {
    this->initializeModel();
}

OAICreatePortalResponse::~OAICreatePortalResponse() {}

void OAICreatePortalResponse::initializeModel() {

    m_portal_id_isSet = false;
    m_portal_id_isValid = false;

    m_portal_arn_isSet = false;
    m_portal_arn_isValid = false;

    m_portal_start_url_isSet = false;
    m_portal_start_url_isValid = false;

    m_portal_status_isSet = false;
    m_portal_status_isValid = false;

    m_sso_application_id_isSet = false;
    m_sso_application_id_isValid = false;
}

void OAICreatePortalResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePortalResponse::fromJsonObject(QJsonObject json) {

    m_portal_id_isValid = ::OpenAPI::fromJsonValue(m_portal_id, json[QString("portalId")]);
    m_portal_id_isSet = !json[QString("portalId")].isNull() && m_portal_id_isValid;

    m_portal_arn_isValid = ::OpenAPI::fromJsonValue(m_portal_arn, json[QString("portalArn")]);
    m_portal_arn_isSet = !json[QString("portalArn")].isNull() && m_portal_arn_isValid;

    m_portal_start_url_isValid = ::OpenAPI::fromJsonValue(m_portal_start_url, json[QString("portalStartUrl")]);
    m_portal_start_url_isSet = !json[QString("portalStartUrl")].isNull() && m_portal_start_url_isValid;

    m_portal_status_isValid = ::OpenAPI::fromJsonValue(m_portal_status, json[QString("portalStatus")]);
    m_portal_status_isSet = !json[QString("portalStatus")].isNull() && m_portal_status_isValid;

    m_sso_application_id_isValid = ::OpenAPI::fromJsonValue(m_sso_application_id, json[QString("ssoApplicationId")]);
    m_sso_application_id_isSet = !json[QString("ssoApplicationId")].isNull() && m_sso_application_id_isValid;
}

QString OAICreatePortalResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePortalResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_portal_id_isSet) {
        obj.insert(QString("portalId"), ::OpenAPI::toJsonValue(m_portal_id));
    }
    if (m_portal_arn_isSet) {
        obj.insert(QString("portalArn"), ::OpenAPI::toJsonValue(m_portal_arn));
    }
    if (m_portal_start_url_isSet) {
        obj.insert(QString("portalStartUrl"), ::OpenAPI::toJsonValue(m_portal_start_url));
    }
    if (m_portal_status.isSet()) {
        obj.insert(QString("portalStatus"), ::OpenAPI::toJsonValue(m_portal_status));
    }
    if (m_sso_application_id_isSet) {
        obj.insert(QString("ssoApplicationId"), ::OpenAPI::toJsonValue(m_sso_application_id));
    }
    return obj;
}

QString OAICreatePortalResponse::getPortalId() const {
    return m_portal_id;
}
void OAICreatePortalResponse::setPortalId(const QString &portal_id) {
    m_portal_id = portal_id;
    m_portal_id_isSet = true;
}

bool OAICreatePortalResponse::is_portal_id_Set() const{
    return m_portal_id_isSet;
}

bool OAICreatePortalResponse::is_portal_id_Valid() const{
    return m_portal_id_isValid;
}

QString OAICreatePortalResponse::getPortalArn() const {
    return m_portal_arn;
}
void OAICreatePortalResponse::setPortalArn(const QString &portal_arn) {
    m_portal_arn = portal_arn;
    m_portal_arn_isSet = true;
}

bool OAICreatePortalResponse::is_portal_arn_Set() const{
    return m_portal_arn_isSet;
}

bool OAICreatePortalResponse::is_portal_arn_Valid() const{
    return m_portal_arn_isValid;
}

QString OAICreatePortalResponse::getPortalStartUrl() const {
    return m_portal_start_url;
}
void OAICreatePortalResponse::setPortalStartUrl(const QString &portal_start_url) {
    m_portal_start_url = portal_start_url;
    m_portal_start_url_isSet = true;
}

bool OAICreatePortalResponse::is_portal_start_url_Set() const{
    return m_portal_start_url_isSet;
}

bool OAICreatePortalResponse::is_portal_start_url_Valid() const{
    return m_portal_start_url_isValid;
}

OAICreatePortalResponse_portalStatus OAICreatePortalResponse::getPortalStatus() const {
    return m_portal_status;
}
void OAICreatePortalResponse::setPortalStatus(const OAICreatePortalResponse_portalStatus &portal_status) {
    m_portal_status = portal_status;
    m_portal_status_isSet = true;
}

bool OAICreatePortalResponse::is_portal_status_Set() const{
    return m_portal_status_isSet;
}

bool OAICreatePortalResponse::is_portal_status_Valid() const{
    return m_portal_status_isValid;
}

QString OAICreatePortalResponse::getSsoApplicationId() const {
    return m_sso_application_id;
}
void OAICreatePortalResponse::setSsoApplicationId(const QString &sso_application_id) {
    m_sso_application_id = sso_application_id;
    m_sso_application_id_isSet = true;
}

bool OAICreatePortalResponse::is_sso_application_id_Set() const{
    return m_sso_application_id_isSet;
}

bool OAICreatePortalResponse::is_sso_application_id_Valid() const{
    return m_sso_application_id_isValid;
}

bool OAICreatePortalResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_portal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_start_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePortalResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_portal_id_isValid && m_portal_arn_isValid && m_portal_start_url_isValid && m_portal_status_isValid && m_sso_application_id_isValid && true;
}

} // namespace OpenAPI
