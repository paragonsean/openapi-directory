/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDashboardRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDashboardRequest::OAICreateDashboardRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDashboardRequest::OAICreateDashboardRequest() {
    this->initializeModel();
}

OAICreateDashboardRequest::~OAICreateDashboardRequest() {}

void OAICreateDashboardRequest::initializeModel() {

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_dashboard_name_isSet = false;
    m_dashboard_name_isValid = false;

    m_dashboard_description_isSet = false;
    m_dashboard_description_isValid = false;

    m_dashboard_definition_isSet = false;
    m_dashboard_definition_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDashboardRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDashboardRequest::fromJsonObject(QJsonObject json) {

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_dashboard_name_isValid = ::OpenAPI::fromJsonValue(m_dashboard_name, json[QString("dashboardName")]);
    m_dashboard_name_isSet = !json[QString("dashboardName")].isNull() && m_dashboard_name_isValid;

    m_dashboard_description_isValid = ::OpenAPI::fromJsonValue(m_dashboard_description, json[QString("dashboardDescription")]);
    m_dashboard_description_isSet = !json[QString("dashboardDescription")].isNull() && m_dashboard_description_isValid;

    m_dashboard_definition_isValid = ::OpenAPI::fromJsonValue(m_dashboard_definition, json[QString("dashboardDefinition")]);
    m_dashboard_definition_isSet = !json[QString("dashboardDefinition")].isNull() && m_dashboard_definition_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateDashboardRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDashboardRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_dashboard_name_isSet) {
        obj.insert(QString("dashboardName"), ::OpenAPI::toJsonValue(m_dashboard_name));
    }
    if (m_dashboard_description_isSet) {
        obj.insert(QString("dashboardDescription"), ::OpenAPI::toJsonValue(m_dashboard_description));
    }
    if (m_dashboard_definition_isSet) {
        obj.insert(QString("dashboardDefinition"), ::OpenAPI::toJsonValue(m_dashboard_definition));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateDashboardRequest::getProjectId() const {
    return m_project_id;
}
void OAICreateDashboardRequest::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAICreateDashboardRequest::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAICreateDashboardRequest::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAICreateDashboardRequest::getDashboardName() const {
    return m_dashboard_name;
}
void OAICreateDashboardRequest::setDashboardName(const QString &dashboard_name) {
    m_dashboard_name = dashboard_name;
    m_dashboard_name_isSet = true;
}

bool OAICreateDashboardRequest::is_dashboard_name_Set() const{
    return m_dashboard_name_isSet;
}

bool OAICreateDashboardRequest::is_dashboard_name_Valid() const{
    return m_dashboard_name_isValid;
}

QString OAICreateDashboardRequest::getDashboardDescription() const {
    return m_dashboard_description;
}
void OAICreateDashboardRequest::setDashboardDescription(const QString &dashboard_description) {
    m_dashboard_description = dashboard_description;
    m_dashboard_description_isSet = true;
}

bool OAICreateDashboardRequest::is_dashboard_description_Set() const{
    return m_dashboard_description_isSet;
}

bool OAICreateDashboardRequest::is_dashboard_description_Valid() const{
    return m_dashboard_description_isValid;
}

QString OAICreateDashboardRequest::getDashboardDefinition() const {
    return m_dashboard_definition;
}
void OAICreateDashboardRequest::setDashboardDefinition(const QString &dashboard_definition) {
    m_dashboard_definition = dashboard_definition;
    m_dashboard_definition_isSet = true;
}

bool OAICreateDashboardRequest::is_dashboard_definition_Set() const{
    return m_dashboard_definition_isSet;
}

bool OAICreateDashboardRequest::is_dashboard_definition_Valid() const{
    return m_dashboard_definition_isValid;
}

QString OAICreateDashboardRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateDashboardRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDashboardRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDashboardRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QMap OAICreateDashboardRequest::getTags() const {
    return m_tags;
}
void OAICreateDashboardRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDashboardRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDashboardRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDashboardRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDashboardRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_id_isValid && m_dashboard_name_isValid && m_dashboard_definition_isValid && true;
}

} // namespace OpenAPI
