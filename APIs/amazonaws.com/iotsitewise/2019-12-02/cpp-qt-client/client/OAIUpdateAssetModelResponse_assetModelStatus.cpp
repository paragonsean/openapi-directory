/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAssetModelResponse_assetModelStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAssetModelResponse_assetModelStatus::OAIUpdateAssetModelResponse_assetModelStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAssetModelResponse_assetModelStatus::OAIUpdateAssetModelResponse_assetModelStatus() {
    this->initializeModel();
}

OAIUpdateAssetModelResponse_assetModelStatus::~OAIUpdateAssetModelResponse_assetModelStatus() {}

void OAIUpdateAssetModelResponse_assetModelStatus::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIUpdateAssetModelResponse_assetModelStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAssetModelResponse_assetModelStatus::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIUpdateAssetModelResponse_assetModelStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAssetModelResponse_assetModelStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

OAIAssetModelState OAIUpdateAssetModelResponse_assetModelStatus::getState() const {
    return m_state;
}
void OAIUpdateAssetModelResponse_assetModelStatus::setState(const OAIAssetModelState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUpdateAssetModelResponse_assetModelStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUpdateAssetModelResponse_assetModelStatus::is_state_Valid() const{
    return m_state_isValid;
}

OAIAssetModelStatus_error OAIUpdateAssetModelResponse_assetModelStatus::getError() const {
    return m_error;
}
void OAIUpdateAssetModelResponse_assetModelStatus::setError(const OAIAssetModelStatus_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIUpdateAssetModelResponse_assetModelStatus::is_error_Set() const{
    return m_error_isSet;
}

bool OAIUpdateAssetModelResponse_assetModelStatus::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIUpdateAssetModelResponse_assetModelStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAssetModelResponse_assetModelStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
