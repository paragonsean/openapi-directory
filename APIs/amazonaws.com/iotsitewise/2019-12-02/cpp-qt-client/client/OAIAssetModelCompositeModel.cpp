/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetModelCompositeModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetModelCompositeModel::OAIAssetModelCompositeModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetModelCompositeModel::OAIAssetModelCompositeModel() {
    this->initializeModel();
}

OAIAssetModelCompositeModel::~OAIAssetModelCompositeModel() {}

void OAIAssetModelCompositeModel::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIAssetModelCompositeModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetModelCompositeModel::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIAssetModelCompositeModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetModelCompositeModel::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIAssetModelCompositeModel::getName() const {
    return m_name;
}
void OAIAssetModelCompositeModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssetModelCompositeModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssetModelCompositeModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAssetModelCompositeModel::getDescription() const {
    return m_description;
}
void OAIAssetModelCompositeModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssetModelCompositeModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssetModelCompositeModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAssetModelCompositeModel::getType() const {
    return m_type;
}
void OAIAssetModelCompositeModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAssetModelCompositeModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAssetModelCompositeModel::is_type_Valid() const{
    return m_type_isValid;
}

QJsonValue OAIAssetModelCompositeModel::getProperties() const {
    return m_properties;
}
void OAIAssetModelCompositeModel::setProperties(const QJsonValue &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIAssetModelCompositeModel::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIAssetModelCompositeModel::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIAssetModelCompositeModel::getId() const {
    return m_id;
}
void OAIAssetModelCompositeModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssetModelCompositeModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssetModelCompositeModel::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAssetModelCompositeModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetModelCompositeModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
