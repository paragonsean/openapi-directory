/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDefaultEncryptionConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDefaultEncryptionConfigurationResponse::OAIDescribeDefaultEncryptionConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDefaultEncryptionConfigurationResponse::OAIDescribeDefaultEncryptionConfigurationResponse() {
    this->initializeModel();
}

OAIDescribeDefaultEncryptionConfigurationResponse::~OAIDescribeDefaultEncryptionConfigurationResponse() {}

void OAIDescribeDefaultEncryptionConfigurationResponse::initializeModel() {

    m_encryption_type_isSet = false;
    m_encryption_type_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_configuration_status_isSet = false;
    m_configuration_status_isValid = false;
}

void OAIDescribeDefaultEncryptionConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDefaultEncryptionConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_encryption_type, json[QString("encryptionType")]);
    m_encryption_type_isSet = !json[QString("encryptionType")].isNull() && m_encryption_type_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("kmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("kmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_configuration_status, json[QString("configurationStatus")]);
    m_configuration_status_isSet = !json[QString("configurationStatus")].isNull() && m_configuration_status_isValid;
}

QString OAIDescribeDefaultEncryptionConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDefaultEncryptionConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_type.isSet()) {
        obj.insert(QString("encryptionType"), ::OpenAPI::toJsonValue(m_encryption_type));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("kmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_configuration_status.isSet()) {
        obj.insert(QString("configurationStatus"), ::OpenAPI::toJsonValue(m_configuration_status));
    }
    return obj;
}

OAIEncryptionType OAIDescribeDefaultEncryptionConfigurationResponse::getEncryptionType() const {
    return m_encryption_type;
}
void OAIDescribeDefaultEncryptionConfigurationResponse::setEncryptionType(const OAIEncryptionType &encryption_type) {
    m_encryption_type = encryption_type;
    m_encryption_type_isSet = true;
}

bool OAIDescribeDefaultEncryptionConfigurationResponse::is_encryption_type_Set() const{
    return m_encryption_type_isSet;
}

bool OAIDescribeDefaultEncryptionConfigurationResponse::is_encryption_type_Valid() const{
    return m_encryption_type_isValid;
}

QString OAIDescribeDefaultEncryptionConfigurationResponse::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIDescribeDefaultEncryptionConfigurationResponse::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIDescribeDefaultEncryptionConfigurationResponse::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIDescribeDefaultEncryptionConfigurationResponse::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

OAIDescribeDefaultEncryptionConfigurationResponse_configurationStatus OAIDescribeDefaultEncryptionConfigurationResponse::getConfigurationStatus() const {
    return m_configuration_status;
}
void OAIDescribeDefaultEncryptionConfigurationResponse::setConfigurationStatus(const OAIDescribeDefaultEncryptionConfigurationResponse_configurationStatus &configuration_status) {
    m_configuration_status = configuration_status;
    m_configuration_status_isSet = true;
}

bool OAIDescribeDefaultEncryptionConfigurationResponse::is_configuration_status_Set() const{
    return m_configuration_status_isSet;
}

bool OAIDescribeDefaultEncryptionConfigurationResponse::is_configuration_status_Valid() const{
    return m_configuration_status_isValid;
}

bool OAIDescribeDefaultEncryptionConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDefaultEncryptionConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encryption_type_isValid && m_configuration_status_isValid && true;
}

} // namespace OpenAPI
