/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePortal_request_portalLogoImageFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePortal_request_portalLogoImageFile::OAICreatePortal_request_portalLogoImageFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePortal_request_portalLogoImageFile::OAICreatePortal_request_portalLogoImageFile() {
    this->initializeModel();
}

OAICreatePortal_request_portalLogoImageFile::~OAICreatePortal_request_portalLogoImageFile() {}

void OAICreatePortal_request_portalLogoImageFile::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreatePortal_request_portalLogoImageFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePortal_request_portalLogoImageFile::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreatePortal_request_portalLogoImageFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePortal_request_portalLogoImageFile::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreatePortal_request_portalLogoImageFile::getData() const {
    return m_data;
}
void OAICreatePortal_request_portalLogoImageFile::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAICreatePortal_request_portalLogoImageFile::is_data_Set() const{
    return m_data_isSet;
}

bool OAICreatePortal_request_portalLogoImageFile::is_data_Valid() const{
    return m_data_isValid;
}

OAIImageFileType OAICreatePortal_request_portalLogoImageFile::getType() const {
    return m_type;
}
void OAICreatePortal_request_portalLogoImageFile::setType(const OAIImageFileType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreatePortal_request_portalLogoImageFile::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreatePortal_request_portalLogoImageFile::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreatePortal_request_portalLogoImageFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePortal_request_portalLogoImageFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
