/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetAssetPropertyAggregatesEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetAssetPropertyAggregatesEntry::OAIBatchGetAssetPropertyAggregatesEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetAssetPropertyAggregatesEntry::OAIBatchGetAssetPropertyAggregatesEntry() {
    this->initializeModel();
}

OAIBatchGetAssetPropertyAggregatesEntry::~OAIBatchGetAssetPropertyAggregatesEntry() {}

void OAIBatchGetAssetPropertyAggregatesEntry::initializeModel() {

    m_entry_id_isSet = false;
    m_entry_id_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_property_id_isSet = false;
    m_property_id_isValid = false;

    m_property_alias_isSet = false;
    m_property_alias_isValid = false;

    m_aggregate_types_isSet = false;
    m_aggregate_types_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_qualities_isSet = false;
    m_qualities_isValid = false;

    m_time_ordering_isSet = false;
    m_time_ordering_isValid = false;
}

void OAIBatchGetAssetPropertyAggregatesEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetAssetPropertyAggregatesEntry::fromJsonObject(QJsonObject json) {

    m_entry_id_isValid = ::OpenAPI::fromJsonValue(m_entry_id, json[QString("entryId")]);
    m_entry_id_isSet = !json[QString("entryId")].isNull() && m_entry_id_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_property_id_isValid = ::OpenAPI::fromJsonValue(m_property_id, json[QString("propertyId")]);
    m_property_id_isSet = !json[QString("propertyId")].isNull() && m_property_id_isValid;

    m_property_alias_isValid = ::OpenAPI::fromJsonValue(m_property_alias, json[QString("propertyAlias")]);
    m_property_alias_isSet = !json[QString("propertyAlias")].isNull() && m_property_alias_isValid;

    m_aggregate_types_isValid = ::OpenAPI::fromJsonValue(m_aggregate_types, json[QString("aggregateTypes")]);
    m_aggregate_types_isSet = !json[QString("aggregateTypes")].isNull() && m_aggregate_types_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_qualities_isValid = ::OpenAPI::fromJsonValue(m_qualities, json[QString("qualities")]);
    m_qualities_isSet = !json[QString("qualities")].isNull() && m_qualities_isValid;

    m_time_ordering_isValid = ::OpenAPI::fromJsonValue(m_time_ordering, json[QString("timeOrdering")]);
    m_time_ordering_isSet = !json[QString("timeOrdering")].isNull() && m_time_ordering_isValid;
}

QString OAIBatchGetAssetPropertyAggregatesEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetAssetPropertyAggregatesEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_entry_id_isSet) {
        obj.insert(QString("entryId"), ::OpenAPI::toJsonValue(m_entry_id));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_property_id_isSet) {
        obj.insert(QString("propertyId"), ::OpenAPI::toJsonValue(m_property_id));
    }
    if (m_property_alias_isSet) {
        obj.insert(QString("propertyAlias"), ::OpenAPI::toJsonValue(m_property_alias));
    }
    if (m_aggregate_types.isSet()) {
        obj.insert(QString("aggregateTypes"), ::OpenAPI::toJsonValue(m_aggregate_types));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_qualities.isSet()) {
        obj.insert(QString("qualities"), ::OpenAPI::toJsonValue(m_qualities));
    }
    if (m_time_ordering.isSet()) {
        obj.insert(QString("timeOrdering"), ::OpenAPI::toJsonValue(m_time_ordering));
    }
    return obj;
}

QString OAIBatchGetAssetPropertyAggregatesEntry::getEntryId() const {
    return m_entry_id;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setEntryId(const QString &entry_id) {
    m_entry_id = entry_id;
    m_entry_id_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_entry_id_Set() const{
    return m_entry_id_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_entry_id_Valid() const{
    return m_entry_id_isValid;
}

QString OAIBatchGetAssetPropertyAggregatesEntry::getAssetId() const {
    return m_asset_id;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIBatchGetAssetPropertyAggregatesEntry::getPropertyId() const {
    return m_property_id;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setPropertyId(const QString &property_id) {
    m_property_id = property_id;
    m_property_id_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_property_id_Set() const{
    return m_property_id_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_property_id_Valid() const{
    return m_property_id_isValid;
}

QString OAIBatchGetAssetPropertyAggregatesEntry::getPropertyAlias() const {
    return m_property_alias;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setPropertyAlias(const QString &property_alias) {
    m_property_alias = property_alias;
    m_property_alias_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_property_alias_Set() const{
    return m_property_alias_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_property_alias_Valid() const{
    return m_property_alias_isValid;
}

QList OAIBatchGetAssetPropertyAggregatesEntry::getAggregateTypes() const {
    return m_aggregate_types;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setAggregateTypes(const QList &aggregate_types) {
    m_aggregate_types = aggregate_types;
    m_aggregate_types_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_aggregate_types_Set() const{
    return m_aggregate_types_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_aggregate_types_Valid() const{
    return m_aggregate_types_isValid;
}

QString OAIBatchGetAssetPropertyAggregatesEntry::getResolution() const {
    return m_resolution;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QDateTime OAIBatchGetAssetPropertyAggregatesEntry::getStartDate() const {
    return m_start_date;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIBatchGetAssetPropertyAggregatesEntry::getEndDate() const {
    return m_end_date;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList OAIBatchGetAssetPropertyAggregatesEntry::getQualities() const {
    return m_qualities;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setQualities(const QList &qualities) {
    m_qualities = qualities;
    m_qualities_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_qualities_Set() const{
    return m_qualities_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_qualities_Valid() const{
    return m_qualities_isValid;
}

OAITimeOrdering OAIBatchGetAssetPropertyAggregatesEntry::getTimeOrdering() const {
    return m_time_ordering;
}
void OAIBatchGetAssetPropertyAggregatesEntry::setTimeOrdering(const OAITimeOrdering &time_ordering) {
    m_time_ordering = time_ordering;
    m_time_ordering_isSet = true;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_time_ordering_Set() const{
    return m_time_ordering_isSet;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::is_time_ordering_Valid() const{
    return m_time_ordering_isValid;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregate_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_ordering.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetAssetPropertyAggregatesEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entry_id_isValid && m_aggregate_types_isValid && m_resolution_isValid && m_start_date_isValid && m_end_date_isValid && true;
}

} // namespace OpenAPI
