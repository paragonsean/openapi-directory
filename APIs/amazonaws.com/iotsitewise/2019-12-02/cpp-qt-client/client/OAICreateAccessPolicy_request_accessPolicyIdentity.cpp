/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccessPolicy_request_accessPolicyIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccessPolicy_request_accessPolicyIdentity::OAICreateAccessPolicy_request_accessPolicyIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccessPolicy_request_accessPolicyIdentity::OAICreateAccessPolicy_request_accessPolicyIdentity() {
    this->initializeModel();
}

OAICreateAccessPolicy_request_accessPolicyIdentity::~OAICreateAccessPolicy_request_accessPolicyIdentity() {}

void OAICreateAccessPolicy_request_accessPolicyIdentity::initializeModel() {

    m_user_isSet = false;
    m_user_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_iam_user_isSet = false;
    m_iam_user_isValid = false;

    m_iam_role_isSet = false;
    m_iam_role_isValid = false;
}

void OAICreateAccessPolicy_request_accessPolicyIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccessPolicy_request_accessPolicyIdentity::fromJsonObject(QJsonObject json) {

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_iam_user_isValid = ::OpenAPI::fromJsonValue(m_iam_user, json[QString("iamUser")]);
    m_iam_user_isSet = !json[QString("iamUser")].isNull() && m_iam_user_isValid;

    m_iam_role_isValid = ::OpenAPI::fromJsonValue(m_iam_role, json[QString("iamRole")]);
    m_iam_role_isSet = !json[QString("iamRole")].isNull() && m_iam_role_isValid;
}

QString OAICreateAccessPolicy_request_accessPolicyIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccessPolicy_request_accessPolicyIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_iam_user.isSet()) {
        obj.insert(QString("iamUser"), ::OpenAPI::toJsonValue(m_iam_user));
    }
    if (m_iam_role.isSet()) {
        obj.insert(QString("iamRole"), ::OpenAPI::toJsonValue(m_iam_role));
    }
    return obj;
}

OAICreateAccessPolicy_request_accessPolicyIdentity_user OAICreateAccessPolicy_request_accessPolicyIdentity::getUser() const {
    return m_user;
}
void OAICreateAccessPolicy_request_accessPolicyIdentity::setUser(const OAICreateAccessPolicy_request_accessPolicyIdentity_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::is_user_Set() const{
    return m_user_isSet;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::is_user_Valid() const{
    return m_user_isValid;
}

OAICreateAccessPolicy_request_accessPolicyIdentity_group OAICreateAccessPolicy_request_accessPolicyIdentity::getGroup() const {
    return m_group;
}
void OAICreateAccessPolicy_request_accessPolicyIdentity::setGroup(const OAICreateAccessPolicy_request_accessPolicyIdentity_group &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::is_group_Set() const{
    return m_group_isSet;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::is_group_Valid() const{
    return m_group_isValid;
}

OAICreateAccessPolicy_request_accessPolicyIdentity_iamUser OAICreateAccessPolicy_request_accessPolicyIdentity::getIamUser() const {
    return m_iam_user;
}
void OAICreateAccessPolicy_request_accessPolicyIdentity::setIamUser(const OAICreateAccessPolicy_request_accessPolicyIdentity_iamUser &iam_user) {
    m_iam_user = iam_user;
    m_iam_user_isSet = true;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::is_iam_user_Set() const{
    return m_iam_user_isSet;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::is_iam_user_Valid() const{
    return m_iam_user_isValid;
}

OAICreateAccessPolicy_request_accessPolicyIdentity_iamRole OAICreateAccessPolicy_request_accessPolicyIdentity::getIamRole() const {
    return m_iam_role;
}
void OAICreateAccessPolicy_request_accessPolicyIdentity::setIamRole(const OAICreateAccessPolicy_request_accessPolicyIdentity_iamRole &iam_role) {
    m_iam_role = iam_role;
    m_iam_role_isSet = true;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::is_iam_role_Set() const{
    return m_iam_role_isSet;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::is_iam_role_Valid() const{
    return m_iam_role_isValid;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccessPolicy_request_accessPolicyIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
