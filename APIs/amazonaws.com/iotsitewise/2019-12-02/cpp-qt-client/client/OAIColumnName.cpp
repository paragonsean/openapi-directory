/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnName::OAIColumnName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnName::OAIColumnName() {
    this->initializeModel();
}

OAIColumnName::~OAIColumnName() {}

void OAIColumnName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIColumnName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIColumnName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ALIAS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnName::ALIAS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ASSET_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnName::ASSET_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROPERTY_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnName::PROPERTY_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATA_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnName::DATA_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMESTAMP_SECONDS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnName::TIMESTAMP_SECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMESTAMP_NANO_OFFSET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnName::TIMESTAMP_NANO_OFFSET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUALITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnName::QUALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnName::VALUE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIColumnName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIColumnName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIColumnName::ALIAS:
            val = "ALIAS";
            break;
        case eOAIColumnName::ASSET_ID:
            val = "ASSET_ID";
            break;
        case eOAIColumnName::PROPERTY_ID:
            val = "PROPERTY_ID";
            break;
        case eOAIColumnName::DATA_TYPE:
            val = "DATA_TYPE";
            break;
        case eOAIColumnName::TIMESTAMP_SECONDS:
            val = "TIMESTAMP_SECONDS";
            break;
        case eOAIColumnName::TIMESTAMP_NANO_OFFSET:
            val = "TIMESTAMP_NANO_OFFSET";
            break;
        case eOAIColumnName::QUALITY:
            val = "QUALITY";
            break;
        case eOAIColumnName::VALUE:
            val = "VALUE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIColumnName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIColumnName::eOAIColumnName OAIColumnName::getValue() const {
    return m_value;
}

void OAIColumnName::setValue(const OAIColumnName::eOAIColumnName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIColumnName::isSet() const {
    
    return m_value_isSet;
}

bool OAIColumnName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
