/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAssetProperty_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAssetProperty_request::OAIUpdateAssetProperty_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAssetProperty_request::OAIUpdateAssetProperty_request() {
    this->initializeModel();
}

OAIUpdateAssetProperty_request::~OAIUpdateAssetProperty_request() {}

void OAIUpdateAssetProperty_request::initializeModel() {

    m_property_alias_isSet = false;
    m_property_alias_isValid = false;

    m_property_notification_state_isSet = false;
    m_property_notification_state_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_property_unit_isSet = false;
    m_property_unit_isValid = false;
}

void OAIUpdateAssetProperty_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAssetProperty_request::fromJsonObject(QJsonObject json) {

    m_property_alias_isValid = ::OpenAPI::fromJsonValue(m_property_alias, json[QString("propertyAlias")]);
    m_property_alias_isSet = !json[QString("propertyAlias")].isNull() && m_property_alias_isValid;

    m_property_notification_state_isValid = ::OpenAPI::fromJsonValue(m_property_notification_state, json[QString("propertyNotificationState")]);
    m_property_notification_state_isSet = !json[QString("propertyNotificationState")].isNull() && m_property_notification_state_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_property_unit_isValid = ::OpenAPI::fromJsonValue(m_property_unit, json[QString("propertyUnit")]);
    m_property_unit_isSet = !json[QString("propertyUnit")].isNull() && m_property_unit_isValid;
}

QString OAIUpdateAssetProperty_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAssetProperty_request::asJsonObject() const {
    QJsonObject obj;
    if (m_property_alias_isSet) {
        obj.insert(QString("propertyAlias"), ::OpenAPI::toJsonValue(m_property_alias));
    }
    if (m_property_notification_state_isSet) {
        obj.insert(QString("propertyNotificationState"), ::OpenAPI::toJsonValue(m_property_notification_state));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_property_unit_isSet) {
        obj.insert(QString("propertyUnit"), ::OpenAPI::toJsonValue(m_property_unit));
    }
    return obj;
}

QString OAIUpdateAssetProperty_request::getPropertyAlias() const {
    return m_property_alias;
}
void OAIUpdateAssetProperty_request::setPropertyAlias(const QString &property_alias) {
    m_property_alias = property_alias;
    m_property_alias_isSet = true;
}

bool OAIUpdateAssetProperty_request::is_property_alias_Set() const{
    return m_property_alias_isSet;
}

bool OAIUpdateAssetProperty_request::is_property_alias_Valid() const{
    return m_property_alias_isValid;
}

QString OAIUpdateAssetProperty_request::getPropertyNotificationState() const {
    return m_property_notification_state;
}
void OAIUpdateAssetProperty_request::setPropertyNotificationState(const QString &property_notification_state) {
    m_property_notification_state = property_notification_state;
    m_property_notification_state_isSet = true;
}

bool OAIUpdateAssetProperty_request::is_property_notification_state_Set() const{
    return m_property_notification_state_isSet;
}

bool OAIUpdateAssetProperty_request::is_property_notification_state_Valid() const{
    return m_property_notification_state_isValid;
}

QString OAIUpdateAssetProperty_request::getClientToken() const {
    return m_client_token;
}
void OAIUpdateAssetProperty_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateAssetProperty_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateAssetProperty_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIUpdateAssetProperty_request::getPropertyUnit() const {
    return m_property_unit;
}
void OAIUpdateAssetProperty_request::setPropertyUnit(const QString &property_unit) {
    m_property_unit = property_unit;
    m_property_unit_isSet = true;
}

bool OAIUpdateAssetProperty_request::is_property_unit_Set() const{
    return m_property_unit_isSet;
}

bool OAIUpdateAssetProperty_request::is_property_unit_Valid() const{
    return m_property_unit_isValid;
}

bool OAIUpdateAssetProperty_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_property_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_notification_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAssetProperty_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
