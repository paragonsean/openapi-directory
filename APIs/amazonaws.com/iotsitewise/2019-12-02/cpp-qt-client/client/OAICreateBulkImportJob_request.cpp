/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBulkImportJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBulkImportJob_request::OAICreateBulkImportJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBulkImportJob_request::OAICreateBulkImportJob_request() {
    this->initializeModel();
}

OAICreateBulkImportJob_request::~OAICreateBulkImportJob_request() {}

void OAICreateBulkImportJob_request::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_role_arn_isSet = false;
    m_job_role_arn_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_error_report_location_isSet = false;
    m_error_report_location_isValid = false;

    m_job_configuration_isSet = false;
    m_job_configuration_isValid = false;
}

void OAICreateBulkImportJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBulkImportJob_request::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("jobName")]);
    m_job_name_isSet = !json[QString("jobName")].isNull() && m_job_name_isValid;

    m_job_role_arn_isValid = ::OpenAPI::fromJsonValue(m_job_role_arn, json[QString("jobRoleArn")]);
    m_job_role_arn_isSet = !json[QString("jobRoleArn")].isNull() && m_job_role_arn_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_error_report_location_isValid = ::OpenAPI::fromJsonValue(m_error_report_location, json[QString("errorReportLocation")]);
    m_error_report_location_isSet = !json[QString("errorReportLocation")].isNull() && m_error_report_location_isValid;

    m_job_configuration_isValid = ::OpenAPI::fromJsonValue(m_job_configuration, json[QString("jobConfiguration")]);
    m_job_configuration_isSet = !json[QString("jobConfiguration")].isNull() && m_job_configuration_isValid;
}

QString OAICreateBulkImportJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBulkImportJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("jobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_role_arn_isSet) {
        obj.insert(QString("jobRoleArn"), ::OpenAPI::toJsonValue(m_job_role_arn));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_error_report_location.isSet()) {
        obj.insert(QString("errorReportLocation"), ::OpenAPI::toJsonValue(m_error_report_location));
    }
    if (m_job_configuration.isSet()) {
        obj.insert(QString("jobConfiguration"), ::OpenAPI::toJsonValue(m_job_configuration));
    }
    return obj;
}

QString OAICreateBulkImportJob_request::getJobName() const {
    return m_job_name;
}
void OAICreateBulkImportJob_request::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAICreateBulkImportJob_request::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAICreateBulkImportJob_request::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAICreateBulkImportJob_request::getJobRoleArn() const {
    return m_job_role_arn;
}
void OAICreateBulkImportJob_request::setJobRoleArn(const QString &job_role_arn) {
    m_job_role_arn = job_role_arn;
    m_job_role_arn_isSet = true;
}

bool OAICreateBulkImportJob_request::is_job_role_arn_Set() const{
    return m_job_role_arn_isSet;
}

bool OAICreateBulkImportJob_request::is_job_role_arn_Valid() const{
    return m_job_role_arn_isValid;
}

QList<OAIFile> OAICreateBulkImportJob_request::getFiles() const {
    return m_files;
}
void OAICreateBulkImportJob_request::setFiles(const QList<OAIFile> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAICreateBulkImportJob_request::is_files_Set() const{
    return m_files_isSet;
}

bool OAICreateBulkImportJob_request::is_files_Valid() const{
    return m_files_isValid;
}

OAICreateBulkImportJob_request_errorReportLocation OAICreateBulkImportJob_request::getErrorReportLocation() const {
    return m_error_report_location;
}
void OAICreateBulkImportJob_request::setErrorReportLocation(const OAICreateBulkImportJob_request_errorReportLocation &error_report_location) {
    m_error_report_location = error_report_location;
    m_error_report_location_isSet = true;
}

bool OAICreateBulkImportJob_request::is_error_report_location_Set() const{
    return m_error_report_location_isSet;
}

bool OAICreateBulkImportJob_request::is_error_report_location_Valid() const{
    return m_error_report_location_isValid;
}

OAICreateBulkImportJob_request_jobConfiguration OAICreateBulkImportJob_request::getJobConfiguration() const {
    return m_job_configuration;
}
void OAICreateBulkImportJob_request::setJobConfiguration(const OAICreateBulkImportJob_request_jobConfiguration &job_configuration) {
    m_job_configuration = job_configuration;
    m_job_configuration_isSet = true;
}

bool OAICreateBulkImportJob_request::is_job_configuration_Set() const{
    return m_job_configuration_isSet;
}

bool OAICreateBulkImportJob_request::is_job_configuration_Valid() const{
    return m_job_configuration_isValid;
}

bool OAICreateBulkImportJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_report_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBulkImportJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_name_isValid && m_job_role_arn_isValid && m_files_isValid && m_error_report_location_isValid && m_job_configuration_isValid && true;
}

} // namespace OpenAPI
