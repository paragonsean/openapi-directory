/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetModelProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetModelProperty::OAIAssetModelProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetModelProperty::OAIAssetModelProperty() {
    this->initializeModel();
}

OAIAssetModelProperty::~OAIAssetModelProperty() {}

void OAIAssetModelProperty::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_data_type_spec_isSet = false;
    m_data_type_spec_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAssetModelProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetModelProperty::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_data_type_spec_isValid = ::OpenAPI::fromJsonValue(m_data_type_spec, json[QString("dataTypeSpec")]);
    m_data_type_spec_isSet = !json[QString("dataTypeSpec")].isNull() && m_data_type_spec_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAssetModelProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetModelProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_data_type.isSet()) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_data_type_spec_isSet) {
        obj.insert(QString("dataTypeSpec"), ::OpenAPI::toJsonValue(m_data_type_spec));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAssetModelProperty::getId() const {
    return m_id;
}
void OAIAssetModelProperty::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssetModelProperty::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssetModelProperty::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAssetModelProperty::getName() const {
    return m_name;
}
void OAIAssetModelProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssetModelProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssetModelProperty::is_name_Valid() const{
    return m_name_isValid;
}

OAIPropertyDataType OAIAssetModelProperty::getDataType() const {
    return m_data_type;
}
void OAIAssetModelProperty::setDataType(const OAIPropertyDataType &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIAssetModelProperty::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIAssetModelProperty::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIAssetModelProperty::getDataTypeSpec() const {
    return m_data_type_spec;
}
void OAIAssetModelProperty::setDataTypeSpec(const QString &data_type_spec) {
    m_data_type_spec = data_type_spec;
    m_data_type_spec_isSet = true;
}

bool OAIAssetModelProperty::is_data_type_spec_Set() const{
    return m_data_type_spec_isSet;
}

bool OAIAssetModelProperty::is_data_type_spec_Valid() const{
    return m_data_type_spec_isValid;
}

QString OAIAssetModelProperty::getUnit() const {
    return m_unit;
}
void OAIAssetModelProperty::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIAssetModelProperty::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIAssetModelProperty::is_unit_Valid() const{
    return m_unit_isValid;
}

OAIAssetModelProperty_type OAIAssetModelProperty::getType() const {
    return m_type;
}
void OAIAssetModelProperty::setType(const OAIAssetModelProperty_type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAssetModelProperty::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAssetModelProperty::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAssetModelProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_spec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetModelProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_data_type_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
