/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortalSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortalSummary::OAIPortalSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortalSummary::OAIPortalSummary() {
    this->initializeModel();
}

OAIPortalSummary::~OAIPortalSummary() {}

void OAIPortalSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_start_url_isSet = false;
    m_start_url_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_last_update_date_isSet = false;
    m_last_update_date_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPortalSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPortalSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_start_url_isValid = ::OpenAPI::fromJsonValue(m_start_url, json[QString("startUrl")]);
    m_start_url_isSet = !json[QString("startUrl")].isNull() && m_start_url_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_update_date, json[QString("lastUpdateDate")]);
    m_last_update_date_isSet = !json[QString("lastUpdateDate")].isNull() && m_last_update_date_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPortalSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPortalSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_start_url_isSet) {
        obj.insert(QString("startUrl"), ::OpenAPI::toJsonValue(m_start_url));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_last_update_date_isSet) {
        obj.insert(QString("lastUpdateDate"), ::OpenAPI::toJsonValue(m_last_update_date));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPortalSummary::getId() const {
    return m_id;
}
void OAIPortalSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPortalSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPortalSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPortalSummary::getName() const {
    return m_name;
}
void OAIPortalSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPortalSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPortalSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPortalSummary::getDescription() const {
    return m_description;
}
void OAIPortalSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPortalSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPortalSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPortalSummary::getStartUrl() const {
    return m_start_url;
}
void OAIPortalSummary::setStartUrl(const QString &start_url) {
    m_start_url = start_url;
    m_start_url_isSet = true;
}

bool OAIPortalSummary::is_start_url_Set() const{
    return m_start_url_isSet;
}

bool OAIPortalSummary::is_start_url_Valid() const{
    return m_start_url_isValid;
}

QDateTime OAIPortalSummary::getCreationDate() const {
    return m_creation_date;
}
void OAIPortalSummary::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIPortalSummary::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIPortalSummary::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIPortalSummary::getLastUpdateDate() const {
    return m_last_update_date;
}
void OAIPortalSummary::setLastUpdateDate(const QDateTime &last_update_date) {
    m_last_update_date = last_update_date;
    m_last_update_date_isSet = true;
}

bool OAIPortalSummary::is_last_update_date_Set() const{
    return m_last_update_date_isSet;
}

bool OAIPortalSummary::is_last_update_date_Valid() const{
    return m_last_update_date_isValid;
}

QString OAIPortalSummary::getRoleArn() const {
    return m_role_arn;
}
void OAIPortalSummary::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIPortalSummary::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIPortalSummary::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIPortalStatus OAIPortalSummary::getStatus() const {
    return m_status;
}
void OAIPortalSummary::setStatus(const OAIPortalStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPortalSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPortalSummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPortalSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPortalSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_start_url_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
