/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessPolicySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessPolicySummary::OAIAccessPolicySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessPolicySummary::OAIAccessPolicySummary() {
    this->initializeModel();
}

OAIAccessPolicySummary::~OAIAccessPolicySummary() {}

void OAIAccessPolicySummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_last_update_date_isSet = false;
    m_last_update_date_isValid = false;
}

void OAIAccessPolicySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessPolicySummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_update_date, json[QString("lastUpdateDate")]);
    m_last_update_date_isSet = !json[QString("lastUpdateDate")].isNull() && m_last_update_date_isValid;
}

QString OAIAccessPolicySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessPolicySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identity.isSet()) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_permission.isSet()) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_last_update_date_isSet) {
        obj.insert(QString("lastUpdateDate"), ::OpenAPI::toJsonValue(m_last_update_date));
    }
    return obj;
}

QString OAIAccessPolicySummary::getId() const {
    return m_id;
}
void OAIAccessPolicySummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccessPolicySummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccessPolicySummary::is_id_Valid() const{
    return m_id_isValid;
}

OAIAccessPolicySummary_identity OAIAccessPolicySummary::getIdentity() const {
    return m_identity;
}
void OAIAccessPolicySummary::setIdentity(const OAIAccessPolicySummary_identity &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIAccessPolicySummary::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIAccessPolicySummary::is_identity_Valid() const{
    return m_identity_isValid;
}

OAIAccessPolicySummary_resource OAIAccessPolicySummary::getResource() const {
    return m_resource;
}
void OAIAccessPolicySummary::setResource(const OAIAccessPolicySummary_resource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIAccessPolicySummary::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIAccessPolicySummary::is_resource_Valid() const{
    return m_resource_isValid;
}

OAIPermission OAIAccessPolicySummary::getPermission() const {
    return m_permission;
}
void OAIAccessPolicySummary::setPermission(const OAIPermission &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIAccessPolicySummary::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIAccessPolicySummary::is_permission_Valid() const{
    return m_permission_isValid;
}

QDateTime OAIAccessPolicySummary::getCreationDate() const {
    return m_creation_date;
}
void OAIAccessPolicySummary::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIAccessPolicySummary::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIAccessPolicySummary::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIAccessPolicySummary::getLastUpdateDate() const {
    return m_last_update_date;
}
void OAIAccessPolicySummary::setLastUpdateDate(const QDateTime &last_update_date) {
    m_last_update_date = last_update_date;
    m_last_update_date_isSet = true;
}

bool OAIAccessPolicySummary::is_last_update_date_Set() const{
    return m_last_update_date_isSet;
}

bool OAIAccessPolicySummary::is_last_update_date_Valid() const{
    return m_last_update_date_isValid;
}

bool OAIAccessPolicySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessPolicySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_identity_isValid && m_resource_isValid && m_permission_isValid && true;
}

} // namespace OpenAPI
