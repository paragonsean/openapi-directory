/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeGatewayResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeGatewayResponse::OAIDescribeGatewayResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeGatewayResponse::OAIDescribeGatewayResponse() {
    this->initializeModel();
}

OAIDescribeGatewayResponse::~OAIDescribeGatewayResponse() {}

void OAIDescribeGatewayResponse::initializeModel() {

    m_gateway_id_isSet = false;
    m_gateway_id_isValid = false;

    m_gateway_name_isSet = false;
    m_gateway_name_isValid = false;

    m_gateway_arn_isSet = false;
    m_gateway_arn_isValid = false;

    m_gateway_platform_isSet = false;
    m_gateway_platform_isValid = false;

    m_gateway_capability_summaries_isSet = false;
    m_gateway_capability_summaries_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_last_update_date_isSet = false;
    m_last_update_date_isValid = false;
}

void OAIDescribeGatewayResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeGatewayResponse::fromJsonObject(QJsonObject json) {

    m_gateway_id_isValid = ::OpenAPI::fromJsonValue(m_gateway_id, json[QString("gatewayId")]);
    m_gateway_id_isSet = !json[QString("gatewayId")].isNull() && m_gateway_id_isValid;

    m_gateway_name_isValid = ::OpenAPI::fromJsonValue(m_gateway_name, json[QString("gatewayName")]);
    m_gateway_name_isSet = !json[QString("gatewayName")].isNull() && m_gateway_name_isValid;

    m_gateway_arn_isValid = ::OpenAPI::fromJsonValue(m_gateway_arn, json[QString("gatewayArn")]);
    m_gateway_arn_isSet = !json[QString("gatewayArn")].isNull() && m_gateway_arn_isValid;

    m_gateway_platform_isValid = ::OpenAPI::fromJsonValue(m_gateway_platform, json[QString("gatewayPlatform")]);
    m_gateway_platform_isSet = !json[QString("gatewayPlatform")].isNull() && m_gateway_platform_isValid;

    m_gateway_capability_summaries_isValid = ::OpenAPI::fromJsonValue(m_gateway_capability_summaries, json[QString("gatewayCapabilitySummaries")]);
    m_gateway_capability_summaries_isSet = !json[QString("gatewayCapabilitySummaries")].isNull() && m_gateway_capability_summaries_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_update_date, json[QString("lastUpdateDate")]);
    m_last_update_date_isSet = !json[QString("lastUpdateDate")].isNull() && m_last_update_date_isValid;
}

QString OAIDescribeGatewayResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeGatewayResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_id_isSet) {
        obj.insert(QString("gatewayId"), ::OpenAPI::toJsonValue(m_gateway_id));
    }
    if (m_gateway_name_isSet) {
        obj.insert(QString("gatewayName"), ::OpenAPI::toJsonValue(m_gateway_name));
    }
    if (m_gateway_arn_isSet) {
        obj.insert(QString("gatewayArn"), ::OpenAPI::toJsonValue(m_gateway_arn));
    }
    if (m_gateway_platform.isSet()) {
        obj.insert(QString("gatewayPlatform"), ::OpenAPI::toJsonValue(m_gateway_platform));
    }
    if (m_gateway_capability_summaries.isSet()) {
        obj.insert(QString("gatewayCapabilitySummaries"), ::OpenAPI::toJsonValue(m_gateway_capability_summaries));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_last_update_date_isSet) {
        obj.insert(QString("lastUpdateDate"), ::OpenAPI::toJsonValue(m_last_update_date));
    }
    return obj;
}

QString OAIDescribeGatewayResponse::getGatewayId() const {
    return m_gateway_id;
}
void OAIDescribeGatewayResponse::setGatewayId(const QString &gateway_id) {
    m_gateway_id = gateway_id;
    m_gateway_id_isSet = true;
}

bool OAIDescribeGatewayResponse::is_gateway_id_Set() const{
    return m_gateway_id_isSet;
}

bool OAIDescribeGatewayResponse::is_gateway_id_Valid() const{
    return m_gateway_id_isValid;
}

QString OAIDescribeGatewayResponse::getGatewayName() const {
    return m_gateway_name;
}
void OAIDescribeGatewayResponse::setGatewayName(const QString &gateway_name) {
    m_gateway_name = gateway_name;
    m_gateway_name_isSet = true;
}

bool OAIDescribeGatewayResponse::is_gateway_name_Set() const{
    return m_gateway_name_isSet;
}

bool OAIDescribeGatewayResponse::is_gateway_name_Valid() const{
    return m_gateway_name_isValid;
}

QString OAIDescribeGatewayResponse::getGatewayArn() const {
    return m_gateway_arn;
}
void OAIDescribeGatewayResponse::setGatewayArn(const QString &gateway_arn) {
    m_gateway_arn = gateway_arn;
    m_gateway_arn_isSet = true;
}

bool OAIDescribeGatewayResponse::is_gateway_arn_Set() const{
    return m_gateway_arn_isSet;
}

bool OAIDescribeGatewayResponse::is_gateway_arn_Valid() const{
    return m_gateway_arn_isValid;
}

OAIDescribeGatewayResponse_gatewayPlatform OAIDescribeGatewayResponse::getGatewayPlatform() const {
    return m_gateway_platform;
}
void OAIDescribeGatewayResponse::setGatewayPlatform(const OAIDescribeGatewayResponse_gatewayPlatform &gateway_platform) {
    m_gateway_platform = gateway_platform;
    m_gateway_platform_isSet = true;
}

bool OAIDescribeGatewayResponse::is_gateway_platform_Set() const{
    return m_gateway_platform_isSet;
}

bool OAIDescribeGatewayResponse::is_gateway_platform_Valid() const{
    return m_gateway_platform_isValid;
}

QList OAIDescribeGatewayResponse::getGatewayCapabilitySummaries() const {
    return m_gateway_capability_summaries;
}
void OAIDescribeGatewayResponse::setGatewayCapabilitySummaries(const QList &gateway_capability_summaries) {
    m_gateway_capability_summaries = gateway_capability_summaries;
    m_gateway_capability_summaries_isSet = true;
}

bool OAIDescribeGatewayResponse::is_gateway_capability_summaries_Set() const{
    return m_gateway_capability_summaries_isSet;
}

bool OAIDescribeGatewayResponse::is_gateway_capability_summaries_Valid() const{
    return m_gateway_capability_summaries_isValid;
}

QDateTime OAIDescribeGatewayResponse::getCreationDate() const {
    return m_creation_date;
}
void OAIDescribeGatewayResponse::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDescribeGatewayResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDescribeGatewayResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIDescribeGatewayResponse::getLastUpdateDate() const {
    return m_last_update_date;
}
void OAIDescribeGatewayResponse::setLastUpdateDate(const QDateTime &last_update_date) {
    m_last_update_date = last_update_date;
    m_last_update_date_isSet = true;
}

bool OAIDescribeGatewayResponse::is_last_update_date_Set() const{
    return m_last_update_date_isSet;
}

bool OAIDescribeGatewayResponse::is_last_update_date_Valid() const{
    return m_last_update_date_isValid;
}

bool OAIDescribeGatewayResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_capability_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeGatewayResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gateway_id_isValid && m_gateway_name_isValid && m_gateway_arn_isValid && m_gateway_capability_summaries_isValid && m_creation_date_isValid && m_last_update_date_isValid && true;
}

} // namespace OpenAPI
