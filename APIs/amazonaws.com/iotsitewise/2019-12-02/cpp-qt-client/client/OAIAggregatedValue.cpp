/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregatedValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregatedValue::OAIAggregatedValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregatedValue::OAIAggregatedValue() {
    this->initializeModel();
}

OAIAggregatedValue::~OAIAggregatedValue() {}

void OAIAggregatedValue::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAggregatedValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregatedValue::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAggregatedValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregatedValue::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_quality.isSet()) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QDateTime OAIAggregatedValue::getTimestamp() const {
    return m_timestamp;
}
void OAIAggregatedValue::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAggregatedValue::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAggregatedValue::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIQuality OAIAggregatedValue::getQuality() const {
    return m_quality;
}
void OAIAggregatedValue::setQuality(const OAIQuality &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIAggregatedValue::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIAggregatedValue::is_quality_Valid() const{
    return m_quality_isValid;
}

OAIAggregatedValue_value OAIAggregatedValue::getValue() const {
    return m_value;
}
void OAIAggregatedValue::setValue(const OAIAggregatedValue_value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAggregatedValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAggregatedValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAggregatedValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregatedValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timestamp_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
