/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutStorageConfiguration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutStorageConfiguration_request::OAIPutStorageConfiguration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutStorageConfiguration_request::OAIPutStorageConfiguration_request() {
    this->initializeModel();
}

OAIPutStorageConfiguration_request::~OAIPutStorageConfiguration_request() {}

void OAIPutStorageConfiguration_request::initializeModel() {

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_multi_layer_storage_isSet = false;
    m_multi_layer_storage_isValid = false;

    m_disassociated_data_storage_isSet = false;
    m_disassociated_data_storage_isValid = false;

    m_retention_period_isSet = false;
    m_retention_period_isValid = false;
}

void OAIPutStorageConfiguration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutStorageConfiguration_request::fromJsonObject(QJsonObject json) {

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("storageType")]);
    m_storage_type_isSet = !json[QString("storageType")].isNull() && m_storage_type_isValid;

    m_multi_layer_storage_isValid = ::OpenAPI::fromJsonValue(m_multi_layer_storage, json[QString("multiLayerStorage")]);
    m_multi_layer_storage_isSet = !json[QString("multiLayerStorage")].isNull() && m_multi_layer_storage_isValid;

    m_disassociated_data_storage_isValid = ::OpenAPI::fromJsonValue(m_disassociated_data_storage, json[QString("disassociatedDataStorage")]);
    m_disassociated_data_storage_isSet = !json[QString("disassociatedDataStorage")].isNull() && m_disassociated_data_storage_isValid;

    m_retention_period_isValid = ::OpenAPI::fromJsonValue(m_retention_period, json[QString("retentionPeriod")]);
    m_retention_period_isSet = !json[QString("retentionPeriod")].isNull() && m_retention_period_isValid;
}

QString OAIPutStorageConfiguration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutStorageConfiguration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_type_isSet) {
        obj.insert(QString("storageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_multi_layer_storage.isSet()) {
        obj.insert(QString("multiLayerStorage"), ::OpenAPI::toJsonValue(m_multi_layer_storage));
    }
    if (m_disassociated_data_storage_isSet) {
        obj.insert(QString("disassociatedDataStorage"), ::OpenAPI::toJsonValue(m_disassociated_data_storage));
    }
    if (m_retention_period.isSet()) {
        obj.insert(QString("retentionPeriod"), ::OpenAPI::toJsonValue(m_retention_period));
    }
    return obj;
}

QString OAIPutStorageConfiguration_request::getStorageType() const {
    return m_storage_type;
}
void OAIPutStorageConfiguration_request::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIPutStorageConfiguration_request::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIPutStorageConfiguration_request::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

OAIPutStorageConfiguration_request_multiLayerStorage OAIPutStorageConfiguration_request::getMultiLayerStorage() const {
    return m_multi_layer_storage;
}
void OAIPutStorageConfiguration_request::setMultiLayerStorage(const OAIPutStorageConfiguration_request_multiLayerStorage &multi_layer_storage) {
    m_multi_layer_storage = multi_layer_storage;
    m_multi_layer_storage_isSet = true;
}

bool OAIPutStorageConfiguration_request::is_multi_layer_storage_Set() const{
    return m_multi_layer_storage_isSet;
}

bool OAIPutStorageConfiguration_request::is_multi_layer_storage_Valid() const{
    return m_multi_layer_storage_isValid;
}

QString OAIPutStorageConfiguration_request::getDisassociatedDataStorage() const {
    return m_disassociated_data_storage;
}
void OAIPutStorageConfiguration_request::setDisassociatedDataStorage(const QString &disassociated_data_storage) {
    m_disassociated_data_storage = disassociated_data_storage;
    m_disassociated_data_storage_isSet = true;
}

bool OAIPutStorageConfiguration_request::is_disassociated_data_storage_Set() const{
    return m_disassociated_data_storage_isSet;
}

bool OAIPutStorageConfiguration_request::is_disassociated_data_storage_Valid() const{
    return m_disassociated_data_storage_isValid;
}

OAIPutStorageConfiguration_request_retentionPeriod OAIPutStorageConfiguration_request::getRetentionPeriod() const {
    return m_retention_period;
}
void OAIPutStorageConfiguration_request::setRetentionPeriod(const OAIPutStorageConfiguration_request_retentionPeriod &retention_period) {
    m_retention_period = retention_period;
    m_retention_period_isSet = true;
}

bool OAIPutStorageConfiguration_request::is_retention_period_Set() const{
    return m_retention_period_isSet;
}

bool OAIPutStorageConfiguration_request::is_retention_period_Valid() const{
    return m_retention_period_isValid;
}

bool OAIPutStorageConfiguration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_layer_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassociated_data_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutStorageConfiguration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_type_isValid && true;
}

} // namespace OpenAPI
