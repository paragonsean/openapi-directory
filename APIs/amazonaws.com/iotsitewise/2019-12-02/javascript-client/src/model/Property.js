/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetPropertyNotification from './AssetPropertyNotification';
import PropertyDataType from './PropertyDataType';
import PropertyType from './PropertyType';

/**
 * The Property model module.
 * @module model/Property
 * @version 2019-12-02
 */
class Property {
    /**
     * Constructs a new <code>Property</code>.
     * Contains asset property information.
     * @alias module:model/Property
     * @param id {String} 
     * @param name {String} 
     * @param dataType {module:model/PropertyDataType} 
     */
    constructor(id, name, dataType) { 
        
        Property.initialize(this, id, name, dataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, dataType) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['dataType'] = dataType;
    }

    /**
     * Constructs a <code>Property</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Property} obj Optional instance to populate.
     * @return {module:model/Property} The populated <code>Property</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Property();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('notification')) {
                obj['notification'] = AssetPropertyNotification.constructFromObject(data['notification']);
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], PropertyDataType);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = PropertyType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Property</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Property</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Property.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `alias`
        if (data['alias']) { // data not null
          String.validateJSON(data['alias']);
        }
        // validate the optional field `notification`
        if (data['notification']) { // data not null
          AssetPropertyNotification.validateJSON(data['notification']);
        }
        // validate the optional field `dataType`
        if (data['dataType']) { // data not null
          PropertyDataType.validateJSON(data['dataType']);
        }
        // validate the optional field `unit`
        if (data['unit']) { // data not null
          String.validateJSON(data['unit']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          PropertyType.validateJSON(data['type']);
        }

        return true;
    }


}

Property.RequiredProperties = ["id", "name", "dataType"];

/**
 * @member {String} id
 */
Property.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Property.prototype['name'] = undefined;

/**
 * @member {String} alias
 */
Property.prototype['alias'] = undefined;

/**
 * @member {module:model/AssetPropertyNotification} notification
 */
Property.prototype['notification'] = undefined;

/**
 * @member {module:model/PropertyDataType} dataType
 */
Property.prototype['dataType'] = undefined;

/**
 * @member {String} unit
 */
Property.prototype['unit'] = undefined;

/**
 * @member {module:model/PropertyType} type
 */
Property.prototype['type'] = undefined;






export default Property;

