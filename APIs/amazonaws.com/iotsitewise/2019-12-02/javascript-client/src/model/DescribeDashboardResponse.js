/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DescribeDashboardResponse model module.
 * @module model/DescribeDashboardResponse
 * @version 2019-12-02
 */
class DescribeDashboardResponse {
    /**
     * Constructs a new <code>DescribeDashboardResponse</code>.
     * @alias module:model/DescribeDashboardResponse
     * @param dashboardId {String} 
     * @param dashboardArn {String} 
     * @param dashboardName {String} 
     * @param projectId {String} 
     * @param dashboardDefinition {String} 
     * @param dashboardCreationDate {Date} 
     * @param dashboardLastUpdateDate {Date} 
     */
    constructor(dashboardId, dashboardArn, dashboardName, projectId, dashboardDefinition, dashboardCreationDate, dashboardLastUpdateDate) { 
        
        DescribeDashboardResponse.initialize(this, dashboardId, dashboardArn, dashboardName, projectId, dashboardDefinition, dashboardCreationDate, dashboardLastUpdateDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dashboardId, dashboardArn, dashboardName, projectId, dashboardDefinition, dashboardCreationDate, dashboardLastUpdateDate) { 
        obj['dashboardId'] = dashboardId;
        obj['dashboardArn'] = dashboardArn;
        obj['dashboardName'] = dashboardName;
        obj['projectId'] = projectId;
        obj['dashboardDefinition'] = dashboardDefinition;
        obj['dashboardCreationDate'] = dashboardCreationDate;
        obj['dashboardLastUpdateDate'] = dashboardLastUpdateDate;
    }

    /**
     * Constructs a <code>DescribeDashboardResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeDashboardResponse} obj Optional instance to populate.
     * @return {module:model/DescribeDashboardResponse} The populated <code>DescribeDashboardResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeDashboardResponse();

            if (data.hasOwnProperty('dashboardId')) {
                obj['dashboardId'] = ApiClient.convertToType(data['dashboardId'], 'String');
            }
            if (data.hasOwnProperty('dashboardArn')) {
                obj['dashboardArn'] = ApiClient.convertToType(data['dashboardArn'], 'String');
            }
            if (data.hasOwnProperty('dashboardName')) {
                obj['dashboardName'] = ApiClient.convertToType(data['dashboardName'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('dashboardDescription')) {
                obj['dashboardDescription'] = ApiClient.convertToType(data['dashboardDescription'], 'String');
            }
            if (data.hasOwnProperty('dashboardDefinition')) {
                obj['dashboardDefinition'] = ApiClient.convertToType(data['dashboardDefinition'], 'String');
            }
            if (data.hasOwnProperty('dashboardCreationDate')) {
                obj['dashboardCreationDate'] = ApiClient.convertToType(data['dashboardCreationDate'], 'Date');
            }
            if (data.hasOwnProperty('dashboardLastUpdateDate')) {
                obj['dashboardLastUpdateDate'] = ApiClient.convertToType(data['dashboardLastUpdateDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeDashboardResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeDashboardResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribeDashboardResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `dashboardId`
        if (data['dashboardId']) { // data not null
          String.validateJSON(data['dashboardId']);
        }
        // validate the optional field `dashboardArn`
        if (data['dashboardArn']) { // data not null
          String.validateJSON(data['dashboardArn']);
        }
        // validate the optional field `dashboardName`
        if (data['dashboardName']) { // data not null
          String.validateJSON(data['dashboardName']);
        }
        // validate the optional field `projectId`
        if (data['projectId']) { // data not null
          String.validateJSON(data['projectId']);
        }
        // validate the optional field `dashboardDescription`
        if (data['dashboardDescription']) { // data not null
          String.validateJSON(data['dashboardDescription']);
        }
        // validate the optional field `dashboardDefinition`
        if (data['dashboardDefinition']) { // data not null
          String.validateJSON(data['dashboardDefinition']);
        }
        // validate the optional field `dashboardCreationDate`
        if (data['dashboardCreationDate']) { // data not null
          Date.validateJSON(data['dashboardCreationDate']);
        }
        // validate the optional field `dashboardLastUpdateDate`
        if (data['dashboardLastUpdateDate']) { // data not null
          Date.validateJSON(data['dashboardLastUpdateDate']);
        }

        return true;
    }


}

DescribeDashboardResponse.RequiredProperties = ["dashboardId", "dashboardArn", "dashboardName", "projectId", "dashboardDefinition", "dashboardCreationDate", "dashboardLastUpdateDate"];

/**
 * @member {String} dashboardId
 */
DescribeDashboardResponse.prototype['dashboardId'] = undefined;

/**
 * @member {String} dashboardArn
 */
DescribeDashboardResponse.prototype['dashboardArn'] = undefined;

/**
 * @member {String} dashboardName
 */
DescribeDashboardResponse.prototype['dashboardName'] = undefined;

/**
 * @member {String} projectId
 */
DescribeDashboardResponse.prototype['projectId'] = undefined;

/**
 * @member {String} dashboardDescription
 */
DescribeDashboardResponse.prototype['dashboardDescription'] = undefined;

/**
 * @member {String} dashboardDefinition
 */
DescribeDashboardResponse.prototype['dashboardDefinition'] = undefined;

/**
 * @member {Date} dashboardCreationDate
 */
DescribeDashboardResponse.prototype['dashboardCreationDate'] = undefined;

/**
 * @member {Date} dashboardLastUpdateDate
 */
DescribeDashboardResponse.prototype['dashboardLastUpdateDate'] = undefined;






export default DescribeDashboardResponse;

