/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DisassociateAssetsRequest model module.
 * @module model/DisassociateAssetsRequest
 * @version 2019-12-02
 */
class DisassociateAssetsRequest {
    /**
     * Constructs a new <code>DisassociateAssetsRequest</code>.
     * @alias module:model/DisassociateAssetsRequest
     * @param hierarchyId {String} The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html\">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.
     * @param childAssetId {String} The ID of the child asset to disassociate.
     */
    constructor(hierarchyId, childAssetId) { 
        
        DisassociateAssetsRequest.initialize(this, hierarchyId, childAssetId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hierarchyId, childAssetId) { 
        obj['hierarchyId'] = hierarchyId;
        obj['childAssetId'] = childAssetId;
    }

    /**
     * Constructs a <code>DisassociateAssetsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisassociateAssetsRequest} obj Optional instance to populate.
     * @return {module:model/DisassociateAssetsRequest} The populated <code>DisassociateAssetsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisassociateAssetsRequest();

            if (data.hasOwnProperty('hierarchyId')) {
                obj['hierarchyId'] = ApiClient.convertToType(data['hierarchyId'], 'String');
            }
            if (data.hasOwnProperty('childAssetId')) {
                obj['childAssetId'] = ApiClient.convertToType(data['childAssetId'], 'String');
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisassociateAssetsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisassociateAssetsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DisassociateAssetsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['hierarchyId'] && !(typeof data['hierarchyId'] === 'string' || data['hierarchyId'] instanceof String)) {
            throw new Error("Expected the field `hierarchyId` to be a primitive type in the JSON string but got " + data['hierarchyId']);
        }
        // ensure the json data is a string
        if (data['childAssetId'] && !(typeof data['childAssetId'] === 'string' || data['childAssetId'] instanceof String)) {
            throw new Error("Expected the field `childAssetId` to be a primitive type in the JSON string but got " + data['childAssetId']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }

        return true;
    }


}

DisassociateAssetsRequest.RequiredProperties = ["hierarchyId", "childAssetId"];

/**
 * The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html\">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.
 * @member {String} hierarchyId
 */
DisassociateAssetsRequest.prototype['hierarchyId'] = undefined;

/**
 * The ID of the child asset to disassociate.
 * @member {String} childAssetId
 */
DisassociateAssetsRequest.prototype['childAssetId'] = undefined;

/**
 * A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
 * @member {String} clientToken
 */
DisassociateAssetsRequest.prototype['clientToken'] = undefined;






export default DisassociateAssetsRequest;

