/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchGetAssetPropertyValueHistoryEntry from './BatchGetAssetPropertyValueHistoryEntry';

/**
 * The BatchGetAssetPropertyValueHistoryRequest model module.
 * @module model/BatchGetAssetPropertyValueHistoryRequest
 * @version 2019-12-02
 */
class BatchGetAssetPropertyValueHistoryRequest {
    /**
     * Constructs a new <code>BatchGetAssetPropertyValueHistoryRequest</code>.
     * @alias module:model/BatchGetAssetPropertyValueHistoryRequest
     * @param entries {Array.<module:model/BatchGetAssetPropertyValueHistoryEntry>} The list of asset property historical value entries for the batch get request. You can specify up to 16 entries per request.
     */
    constructor(entries) { 
        
        BatchGetAssetPropertyValueHistoryRequest.initialize(this, entries);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, entries) { 
        obj['entries'] = entries;
    }

    /**
     * Constructs a <code>BatchGetAssetPropertyValueHistoryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchGetAssetPropertyValueHistoryRequest} obj Optional instance to populate.
     * @return {module:model/BatchGetAssetPropertyValueHistoryRequest} The populated <code>BatchGetAssetPropertyValueHistoryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchGetAssetPropertyValueHistoryRequest();

            if (data.hasOwnProperty('entries')) {
                obj['entries'] = ApiClient.convertToType(data['entries'], [BatchGetAssetPropertyValueHistoryEntry]);
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchGetAssetPropertyValueHistoryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchGetAssetPropertyValueHistoryRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BatchGetAssetPropertyValueHistoryRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['entries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entries'])) {
                throw new Error("Expected the field `entries` to be an array in the JSON data but got " + data['entries']);
            }
            // validate the optional field `entries` (array)
            for (const item of data['entries']) {
                BatchGetAssetPropertyValueHistoryEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }

        return true;
    }


}

BatchGetAssetPropertyValueHistoryRequest.RequiredProperties = ["entries"];

/**
 * The list of asset property historical value entries for the batch get request. You can specify up to 16 entries per request.
 * @member {Array.<module:model/BatchGetAssetPropertyValueHistoryEntry>} entries
 */
BatchGetAssetPropertyValueHistoryRequest.prototype['entries'] = undefined;

/**
 * The token to be used for the next set of paginated results.
 * @member {String} nextToken
 */
BatchGetAssetPropertyValueHistoryRequest.prototype['nextToken'] = undefined;

/**
 * <p>The maximum number of results to return for each paginated request. A result set is returned in the two cases, whichever occurs first.</p> <ul> <li> <p>The size of the result set is equal to 4 MB.</p> </li> <li> <p>The number of data points in the result set is equal to the value of <code>maxResults</code>. The maximum value of <code>maxResults</code> is 20000.</p> </li> </ul>
 * @member {Number} maxResults
 */
BatchGetAssetPropertyValueHistoryRequest.prototype['maxResults'] = undefined;






export default BatchGetAssetPropertyValueHistoryRequest;

