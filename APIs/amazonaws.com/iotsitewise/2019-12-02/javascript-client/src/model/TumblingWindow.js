/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TumblingWindow model module.
 * @module model/TumblingWindow
 * @version 2019-12-02
 */
class TumblingWindow {
    /**
     * Constructs a new <code>TumblingWindow</code>.
     * &lt;p&gt;Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time window. You can use this window in metrics to aggregate data from properties and other assets.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, and &lt;code&gt;w&lt;/code&gt; when you specify an interval or offset. Note that &lt;code&gt;m&lt;/code&gt; represents minutes, &lt;code&gt;h&lt;/code&gt; represents hours, &lt;code&gt;d&lt;/code&gt; represents days, and &lt;code&gt;w&lt;/code&gt; represents weeks. You can also use &lt;code&gt;s&lt;/code&gt; to represent seconds in &lt;code&gt;offset&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;interval&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; parameters support the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601 format&lt;/a&gt;. For example, &lt;code&gt;PT5S&lt;/code&gt; represents 5 seconds, &lt;code&gt;PT5M&lt;/code&gt; represents 5 minutes, and &lt;code&gt;PT5H&lt;/code&gt; represents 5 hours.&lt;/p&gt;
     * @alias module:model/TumblingWindow
     * @param interval {String} 
     */
    constructor(interval) { 
        
        TumblingWindow.initialize(this, interval);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, interval) { 
        obj['interval'] = interval;
    }

    /**
     * Constructs a <code>TumblingWindow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TumblingWindow} obj Optional instance to populate.
     * @return {module:model/TumblingWindow} The populated <code>TumblingWindow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TumblingWindow();

            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TumblingWindow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TumblingWindow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TumblingWindow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `interval`
        if (data['interval']) { // data not null
          String.validateJSON(data['interval']);
        }
        // validate the optional field `offset`
        if (data['offset']) { // data not null
          String.validateJSON(data['offset']);
        }

        return true;
    }


}

TumblingWindow.RequiredProperties = ["interval"];

/**
 * @member {String} interval
 */
TumblingWindow.prototype['interval'] = undefined;

/**
 * @member {String} offset
 */
TumblingWindow.prototype['offset'] = undefined;






export default TumblingWindow;

