/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutDefaultEncryptionConfigurationRequest model module.
 * @module model/PutDefaultEncryptionConfigurationRequest
 * @version 2019-12-02
 */
class PutDefaultEncryptionConfigurationRequest {
    /**
     * Constructs a new <code>PutDefaultEncryptionConfigurationRequest</code>.
     * @alias module:model/PutDefaultEncryptionConfigurationRequest
     * @param encryptionType {module:model/PutDefaultEncryptionConfigurationRequest.EncryptionTypeEnum} The type of encryption used for the encryption configuration.
     */
    constructor(encryptionType) { 
        
        PutDefaultEncryptionConfigurationRequest.initialize(this, encryptionType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, encryptionType) { 
        obj['encryptionType'] = encryptionType;
    }

    /**
     * Constructs a <code>PutDefaultEncryptionConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutDefaultEncryptionConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/PutDefaultEncryptionConfigurationRequest} The populated <code>PutDefaultEncryptionConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutDefaultEncryptionConfigurationRequest();

            if (data.hasOwnProperty('encryptionType')) {
                obj['encryptionType'] = ApiClient.convertToType(data['encryptionType'], 'String');
            }
            if (data.hasOwnProperty('kmsKeyId')) {
                obj['kmsKeyId'] = ApiClient.convertToType(data['kmsKeyId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutDefaultEncryptionConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutDefaultEncryptionConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutDefaultEncryptionConfigurationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['encryptionType'] && !(typeof data['encryptionType'] === 'string' || data['encryptionType'] instanceof String)) {
            throw new Error("Expected the field `encryptionType` to be a primitive type in the JSON string but got " + data['encryptionType']);
        }
        // ensure the json data is a string
        if (data['kmsKeyId'] && !(typeof data['kmsKeyId'] === 'string' || data['kmsKeyId'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyId` to be a primitive type in the JSON string but got " + data['kmsKeyId']);
        }

        return true;
    }


}

PutDefaultEncryptionConfigurationRequest.RequiredProperties = ["encryptionType"];

/**
 * The type of encryption used for the encryption configuration.
 * @member {module:model/PutDefaultEncryptionConfigurationRequest.EncryptionTypeEnum} encryptionType
 */
PutDefaultEncryptionConfigurationRequest.prototype['encryptionType'] = undefined;

/**
 * The Key ID of the customer managed key used for KMS encryption. This is required if you use <code>KMS_BASED_ENCRYPTION</code>.
 * @member {String} kmsKeyId
 */
PutDefaultEncryptionConfigurationRequest.prototype['kmsKeyId'] = undefined;





/**
 * Allowed values for the <code>encryptionType</code> property.
 * @enum {String}
 * @readonly
 */
PutDefaultEncryptionConfigurationRequest['EncryptionTypeEnum'] = {

    /**
     * value: "SITEWISE_DEFAULT_ENCRYPTION"
     * @const
     */
    "SITEWISE_DEFAULT_ENCRYPTION": "SITEWISE_DEFAULT_ENCRYPTION",

    /**
     * value: "KMS_BASED_ENCRYPTION"
     * @const
     */
    "KMS_BASED_ENCRYPTION": "KMS_BASED_ENCRYPTION"
};



export default PutDefaultEncryptionConfigurationRequest;

