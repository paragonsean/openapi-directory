/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateDashboardRequest model module.
 * @module model/CreateDashboardRequest
 * @version 2019-12-02
 */
class CreateDashboardRequest {
    /**
     * Constructs a new <code>CreateDashboardRequest</code>.
     * @alias module:model/CreateDashboardRequest
     * @param projectId {String} The ID of the project in which to create the dashboard.
     * @param dashboardName {String} A friendly name for the dashboard.
     * @param dashboardDefinition {String} The dashboard definition specified in a JSON literal. For detailed information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html\">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.
     */
    constructor(projectId, dashboardName, dashboardDefinition) { 
        
        CreateDashboardRequest.initialize(this, projectId, dashboardName, dashboardDefinition);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, projectId, dashboardName, dashboardDefinition) { 
        obj['projectId'] = projectId;
        obj['dashboardName'] = dashboardName;
        obj['dashboardDefinition'] = dashboardDefinition;
    }

    /**
     * Constructs a <code>CreateDashboardRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDashboardRequest} obj Optional instance to populate.
     * @return {module:model/CreateDashboardRequest} The populated <code>CreateDashboardRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDashboardRequest();

            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('dashboardName')) {
                obj['dashboardName'] = ApiClient.convertToType(data['dashboardName'], 'String');
            }
            if (data.hasOwnProperty('dashboardDescription')) {
                obj['dashboardDescription'] = ApiClient.convertToType(data['dashboardDescription'], 'String');
            }
            if (data.hasOwnProperty('dashboardDefinition')) {
                obj['dashboardDefinition'] = ApiClient.convertToType(data['dashboardDefinition'], 'String');
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDashboardRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDashboardRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateDashboardRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['dashboardName'] && !(typeof data['dashboardName'] === 'string' || data['dashboardName'] instanceof String)) {
            throw new Error("Expected the field `dashboardName` to be a primitive type in the JSON string but got " + data['dashboardName']);
        }
        // ensure the json data is a string
        if (data['dashboardDescription'] && !(typeof data['dashboardDescription'] === 'string' || data['dashboardDescription'] instanceof String)) {
            throw new Error("Expected the field `dashboardDescription` to be a primitive type in the JSON string but got " + data['dashboardDescription']);
        }
        // ensure the json data is a string
        if (data['dashboardDefinition'] && !(typeof data['dashboardDefinition'] === 'string' || data['dashboardDefinition'] instanceof String)) {
            throw new Error("Expected the field `dashboardDefinition` to be a primitive type in the JSON string but got " + data['dashboardDefinition']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }

        return true;
    }


}

CreateDashboardRequest.RequiredProperties = ["projectId", "dashboardName", "dashboardDefinition"];

/**
 * The ID of the project in which to create the dashboard.
 * @member {String} projectId
 */
CreateDashboardRequest.prototype['projectId'] = undefined;

/**
 * A friendly name for the dashboard.
 * @member {String} dashboardName
 */
CreateDashboardRequest.prototype['dashboardName'] = undefined;

/**
 * A description for the dashboard.
 * @member {String} dashboardDescription
 */
CreateDashboardRequest.prototype['dashboardDescription'] = undefined;

/**
 * The dashboard definition specified in a JSON literal. For detailed information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html\">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.
 * @member {String} dashboardDefinition
 */
CreateDashboardRequest.prototype['dashboardDefinition'] = undefined;

/**
 * A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
 * @member {String} clientToken
 */
CreateDashboardRequest.prototype['clientToken'] = undefined;

/**
 * A list of key-value pairs that contain metadata for the dashboard. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.
 * @member {Object.<String, String>} tags
 */
CreateDashboardRequest.prototype['tags'] = undefined;






export default CreateDashboardRequest;

