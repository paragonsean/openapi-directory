/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PutStorageConfigurationRequestMultiLayerStorage from './PutStorageConfigurationRequestMultiLayerStorage';
import PutStorageConfigurationRequestRetentionPeriod from './PutStorageConfigurationRequestRetentionPeriod';

/**
 * The PutStorageConfigurationRequest model module.
 * @module model/PutStorageConfigurationRequest
 * @version 2019-12-02
 */
class PutStorageConfigurationRequest {
    /**
     * Constructs a new <code>PutStorageConfigurationRequest</code>.
     * @alias module:model/PutStorageConfigurationRequest
     * @param storageType {module:model/PutStorageConfigurationRequest.StorageTypeEnum} <p>The storage tier that you specified for your data. The <code>storageType</code> parameter can be one of the following values:</p> <ul> <li> <p> <code>SITEWISE_DEFAULT_STORAGE</code> – IoT SiteWise saves your data into the hot tier. The hot tier is a service-managed database.</p> </li> <li> <p> <code>MULTI_LAYER_STORAGE</code> – IoT SiteWise saves your data in both the cold tier and the hot tier. The cold tier is a customer-managed Amazon S3 bucket.</p> </li> </ul>
     */
    constructor(storageType) { 
        
        PutStorageConfigurationRequest.initialize(this, storageType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, storageType) { 
        obj['storageType'] = storageType;
    }

    /**
     * Constructs a <code>PutStorageConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutStorageConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/PutStorageConfigurationRequest} The populated <code>PutStorageConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutStorageConfigurationRequest();

            if (data.hasOwnProperty('storageType')) {
                obj['storageType'] = ApiClient.convertToType(data['storageType'], 'String');
            }
            if (data.hasOwnProperty('multiLayerStorage')) {
                obj['multiLayerStorage'] = PutStorageConfigurationRequestMultiLayerStorage.constructFromObject(data['multiLayerStorage']);
            }
            if (data.hasOwnProperty('disassociatedDataStorage')) {
                obj['disassociatedDataStorage'] = ApiClient.convertToType(data['disassociatedDataStorage'], 'String');
            }
            if (data.hasOwnProperty('retentionPeriod')) {
                obj['retentionPeriod'] = PutStorageConfigurationRequestRetentionPeriod.constructFromObject(data['retentionPeriod']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutStorageConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutStorageConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutStorageConfigurationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['storageType'] && !(typeof data['storageType'] === 'string' || data['storageType'] instanceof String)) {
            throw new Error("Expected the field `storageType` to be a primitive type in the JSON string but got " + data['storageType']);
        }
        // validate the optional field `multiLayerStorage`
        if (data['multiLayerStorage']) { // data not null
          PutStorageConfigurationRequestMultiLayerStorage.validateJSON(data['multiLayerStorage']);
        }
        // ensure the json data is a string
        if (data['disassociatedDataStorage'] && !(typeof data['disassociatedDataStorage'] === 'string' || data['disassociatedDataStorage'] instanceof String)) {
            throw new Error("Expected the field `disassociatedDataStorage` to be a primitive type in the JSON string but got " + data['disassociatedDataStorage']);
        }
        // validate the optional field `retentionPeriod`
        if (data['retentionPeriod']) { // data not null
          PutStorageConfigurationRequestRetentionPeriod.validateJSON(data['retentionPeriod']);
        }

        return true;
    }


}

PutStorageConfigurationRequest.RequiredProperties = ["storageType"];

/**
 * <p>The storage tier that you specified for your data. The <code>storageType</code> parameter can be one of the following values:</p> <ul> <li> <p> <code>SITEWISE_DEFAULT_STORAGE</code> – IoT SiteWise saves your data into the hot tier. The hot tier is a service-managed database.</p> </li> <li> <p> <code>MULTI_LAYER_STORAGE</code> – IoT SiteWise saves your data in both the cold tier and the hot tier. The cold tier is a customer-managed Amazon S3 bucket.</p> </li> </ul>
 * @member {module:model/PutStorageConfigurationRequest.StorageTypeEnum} storageType
 */
PutStorageConfigurationRequest.prototype['storageType'] = undefined;

/**
 * @member {module:model/PutStorageConfigurationRequestMultiLayerStorage} multiLayerStorage
 */
PutStorageConfigurationRequest.prototype['multiLayerStorage'] = undefined;

/**
 * <p>Contains the storage configuration for time series (data streams) that aren't associated with asset properties. The <code>disassociatedDataStorage</code> can be one of the following values:</p> <ul> <li> <p> <code>ENABLED</code> – IoT SiteWise accepts time series that aren't associated with asset properties.</p> <important> <p>After the <code>disassociatedDataStorage</code> is enabled, you can't disable it.</p> </important> </li> <li> <p> <code>DISABLED</code> – IoT SiteWise doesn't accept time series (data streams) that aren't associated with asset properties.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/data-streams.html\">Data streams</a> in the <i>IoT SiteWise User Guide</i>.</p>
 * @member {module:model/PutStorageConfigurationRequest.DisassociatedDataStorageEnum} disassociatedDataStorage
 */
PutStorageConfigurationRequest.prototype['disassociatedDataStorage'] = undefined;

/**
 * @member {module:model/PutStorageConfigurationRequestRetentionPeriod} retentionPeriod
 */
PutStorageConfigurationRequest.prototype['retentionPeriod'] = undefined;





/**
 * Allowed values for the <code>storageType</code> property.
 * @enum {String}
 * @readonly
 */
PutStorageConfigurationRequest['StorageTypeEnum'] = {

    /**
     * value: "SITEWISE_DEFAULT_STORAGE"
     * @const
     */
    "SITEWISE_DEFAULT_STORAGE": "SITEWISE_DEFAULT_STORAGE",

    /**
     * value: "MULTI_LAYER_STORAGE"
     * @const
     */
    "MULTI_LAYER_STORAGE": "MULTI_LAYER_STORAGE"
};


/**
 * Allowed values for the <code>disassociatedDataStorage</code> property.
 * @enum {String}
 * @readonly
 */
PutStorageConfigurationRequest['DisassociatedDataStorageEnum'] = {

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};



export default PutStorageConfigurationRequest;

