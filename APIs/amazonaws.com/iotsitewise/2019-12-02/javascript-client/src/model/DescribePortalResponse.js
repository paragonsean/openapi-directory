/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthMode from './AuthMode';
import DescribePortalResponseAlarms from './DescribePortalResponseAlarms';
import DescribePortalResponsePortalLogoImageLocation from './DescribePortalResponsePortalLogoImageLocation';
import DescribePortalResponsePortalStatus from './DescribePortalResponsePortalStatus';

/**
 * The DescribePortalResponse model module.
 * @module model/DescribePortalResponse
 * @version 2019-12-02
 */
class DescribePortalResponse {
    /**
     * Constructs a new <code>DescribePortalResponse</code>.
     * @alias module:model/DescribePortalResponse
     * @param portalId {String} 
     * @param portalArn {String} 
     * @param portalName {String} 
     * @param portalClientId {String} 
     * @param portalStartUrl {String} 
     * @param portalContactEmail {String} 
     * @param portalStatus {module:model/DescribePortalResponsePortalStatus} 
     * @param portalCreationDate {Date} 
     * @param portalLastUpdateDate {Date} 
     */
    constructor(portalId, portalArn, portalName, portalClientId, portalStartUrl, portalContactEmail, portalStatus, portalCreationDate, portalLastUpdateDate) { 
        
        DescribePortalResponse.initialize(this, portalId, portalArn, portalName, portalClientId, portalStartUrl, portalContactEmail, portalStatus, portalCreationDate, portalLastUpdateDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, portalId, portalArn, portalName, portalClientId, portalStartUrl, portalContactEmail, portalStatus, portalCreationDate, portalLastUpdateDate) { 
        obj['portalId'] = portalId;
        obj['portalArn'] = portalArn;
        obj['portalName'] = portalName;
        obj['portalClientId'] = portalClientId;
        obj['portalStartUrl'] = portalStartUrl;
        obj['portalContactEmail'] = portalContactEmail;
        obj['portalStatus'] = portalStatus;
        obj['portalCreationDate'] = portalCreationDate;
        obj['portalLastUpdateDate'] = portalLastUpdateDate;
    }

    /**
     * Constructs a <code>DescribePortalResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribePortalResponse} obj Optional instance to populate.
     * @return {module:model/DescribePortalResponse} The populated <code>DescribePortalResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribePortalResponse();

            if (data.hasOwnProperty('portalId')) {
                obj['portalId'] = ApiClient.convertToType(data['portalId'], 'String');
            }
            if (data.hasOwnProperty('portalArn')) {
                obj['portalArn'] = ApiClient.convertToType(data['portalArn'], 'String');
            }
            if (data.hasOwnProperty('portalName')) {
                obj['portalName'] = ApiClient.convertToType(data['portalName'], 'String');
            }
            if (data.hasOwnProperty('portalDescription')) {
                obj['portalDescription'] = ApiClient.convertToType(data['portalDescription'], 'String');
            }
            if (data.hasOwnProperty('portalClientId')) {
                obj['portalClientId'] = ApiClient.convertToType(data['portalClientId'], 'String');
            }
            if (data.hasOwnProperty('portalStartUrl')) {
                obj['portalStartUrl'] = ApiClient.convertToType(data['portalStartUrl'], 'String');
            }
            if (data.hasOwnProperty('portalContactEmail')) {
                obj['portalContactEmail'] = ApiClient.convertToType(data['portalContactEmail'], 'String');
            }
            if (data.hasOwnProperty('portalStatus')) {
                obj['portalStatus'] = DescribePortalResponsePortalStatus.constructFromObject(data['portalStatus']);
            }
            if (data.hasOwnProperty('portalCreationDate')) {
                obj['portalCreationDate'] = ApiClient.convertToType(data['portalCreationDate'], 'Date');
            }
            if (data.hasOwnProperty('portalLastUpdateDate')) {
                obj['portalLastUpdateDate'] = ApiClient.convertToType(data['portalLastUpdateDate'], 'Date');
            }
            if (data.hasOwnProperty('portalLogoImageLocation')) {
                obj['portalLogoImageLocation'] = DescribePortalResponsePortalLogoImageLocation.constructFromObject(data['portalLogoImageLocation']);
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('portalAuthMode')) {
                obj['portalAuthMode'] = ApiClient.convertToType(data['portalAuthMode'], AuthMode);
            }
            if (data.hasOwnProperty('notificationSenderEmail')) {
                obj['notificationSenderEmail'] = ApiClient.convertToType(data['notificationSenderEmail'], 'String');
            }
            if (data.hasOwnProperty('alarms')) {
                obj['alarms'] = DescribePortalResponseAlarms.constructFromObject(data['alarms']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribePortalResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribePortalResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribePortalResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `portalId`
        if (data['portalId']) { // data not null
          String.validateJSON(data['portalId']);
        }
        // validate the optional field `portalArn`
        if (data['portalArn']) { // data not null
          String.validateJSON(data['portalArn']);
        }
        // validate the optional field `portalName`
        if (data['portalName']) { // data not null
          String.validateJSON(data['portalName']);
        }
        // validate the optional field `portalDescription`
        if (data['portalDescription']) { // data not null
          String.validateJSON(data['portalDescription']);
        }
        // validate the optional field `portalClientId`
        if (data['portalClientId']) { // data not null
          String.validateJSON(data['portalClientId']);
        }
        // validate the optional field `portalStartUrl`
        if (data['portalStartUrl']) { // data not null
          String.validateJSON(data['portalStartUrl']);
        }
        // validate the optional field `portalContactEmail`
        if (data['portalContactEmail']) { // data not null
          String.validateJSON(data['portalContactEmail']);
        }
        // validate the optional field `portalStatus`
        if (data['portalStatus']) { // data not null
          DescribePortalResponsePortalStatus.validateJSON(data['portalStatus']);
        }
        // validate the optional field `portalCreationDate`
        if (data['portalCreationDate']) { // data not null
          Date.validateJSON(data['portalCreationDate']);
        }
        // validate the optional field `portalLastUpdateDate`
        if (data['portalLastUpdateDate']) { // data not null
          Date.validateJSON(data['portalLastUpdateDate']);
        }
        // validate the optional field `portalLogoImageLocation`
        if (data['portalLogoImageLocation']) { // data not null
          DescribePortalResponsePortalLogoImageLocation.validateJSON(data['portalLogoImageLocation']);
        }
        // validate the optional field `roleArn`
        if (data['roleArn']) { // data not null
          String.validateJSON(data['roleArn']);
        }
        // validate the optional field `portalAuthMode`
        if (data['portalAuthMode']) { // data not null
          AuthMode.validateJSON(data['portalAuthMode']);
        }
        // validate the optional field `notificationSenderEmail`
        if (data['notificationSenderEmail']) { // data not null
          String.validateJSON(data['notificationSenderEmail']);
        }
        // validate the optional field `alarms`
        if (data['alarms']) { // data not null
          DescribePortalResponseAlarms.validateJSON(data['alarms']);
        }

        return true;
    }


}

DescribePortalResponse.RequiredProperties = ["portalId", "portalArn", "portalName", "portalClientId", "portalStartUrl", "portalContactEmail", "portalStatus", "portalCreationDate", "portalLastUpdateDate"];

/**
 * @member {String} portalId
 */
DescribePortalResponse.prototype['portalId'] = undefined;

/**
 * @member {String} portalArn
 */
DescribePortalResponse.prototype['portalArn'] = undefined;

/**
 * @member {String} portalName
 */
DescribePortalResponse.prototype['portalName'] = undefined;

/**
 * @member {String} portalDescription
 */
DescribePortalResponse.prototype['portalDescription'] = undefined;

/**
 * @member {String} portalClientId
 */
DescribePortalResponse.prototype['portalClientId'] = undefined;

/**
 * @member {String} portalStartUrl
 */
DescribePortalResponse.prototype['portalStartUrl'] = undefined;

/**
 * @member {String} portalContactEmail
 */
DescribePortalResponse.prototype['portalContactEmail'] = undefined;

/**
 * @member {module:model/DescribePortalResponsePortalStatus} portalStatus
 */
DescribePortalResponse.prototype['portalStatus'] = undefined;

/**
 * @member {Date} portalCreationDate
 */
DescribePortalResponse.prototype['portalCreationDate'] = undefined;

/**
 * @member {Date} portalLastUpdateDate
 */
DescribePortalResponse.prototype['portalLastUpdateDate'] = undefined;

/**
 * @member {module:model/DescribePortalResponsePortalLogoImageLocation} portalLogoImageLocation
 */
DescribePortalResponse.prototype['portalLogoImageLocation'] = undefined;

/**
 * @member {String} roleArn
 */
DescribePortalResponse.prototype['roleArn'] = undefined;

/**
 * @member {module:model/AuthMode} portalAuthMode
 */
DescribePortalResponse.prototype['portalAuthMode'] = undefined;

/**
 * @member {String} notificationSenderEmail
 */
DescribePortalResponse.prototype['notificationSenderEmail'] = undefined;

/**
 * @member {module:model/DescribePortalResponseAlarms} alarms
 */
DescribePortalResponse.prototype['alarms'] = undefined;






export default DescribePortalResponse;

