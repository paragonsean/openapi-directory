/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Aggregates from './Aggregates';

/**
 * The AggregatedValueValue model module.
 * @module model/AggregatedValueValue
 * @version 2019-12-02
 */
class AggregatedValueValue {
    /**
     * Constructs a new <code>AggregatedValueValue</code>.
     * @alias module:model/AggregatedValueValue
     * @implements module:model/Aggregates
     */
    constructor() { 
        Aggregates.initialize(this);
        AggregatedValueValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AggregatedValueValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AggregatedValueValue} obj Optional instance to populate.
     * @return {module:model/AggregatedValueValue} The populated <code>AggregatedValueValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AggregatedValueValue();
            Aggregates.constructFromObject(data, obj);

            if (data.hasOwnProperty('average')) {
                obj['average'] = ApiClient.convertToType(data['average'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ApiClient.convertToType(data['maximum'], 'Number');
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ApiClient.convertToType(data['minimum'], 'Number');
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], 'Number');
            }
            if (data.hasOwnProperty('standardDeviation')) {
                obj['standardDeviation'] = ApiClient.convertToType(data['standardDeviation'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AggregatedValueValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AggregatedValueValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `average`
        if (data['average']) { // data not null
          Number.validateJSON(data['average']);
        }
        // validate the optional field `count`
        if (data['count']) { // data not null
          Number.validateJSON(data['count']);
        }
        // validate the optional field `maximum`
        if (data['maximum']) { // data not null
          Number.validateJSON(data['maximum']);
        }
        // validate the optional field `minimum`
        if (data['minimum']) { // data not null
          Number.validateJSON(data['minimum']);
        }
        // validate the optional field `sum`
        if (data['sum']) { // data not null
          Number.validateJSON(data['sum']);
        }
        // validate the optional field `standardDeviation`
        if (data['standardDeviation']) { // data not null
          Number.validateJSON(data['standardDeviation']);
        }

        return true;
    }


}



/**
 * @member {Number} average
 */
AggregatedValueValue.prototype['average'] = undefined;

/**
 * @member {Number} count
 */
AggregatedValueValue.prototype['count'] = undefined;

/**
 * @member {Number} maximum
 */
AggregatedValueValue.prototype['maximum'] = undefined;

/**
 * @member {Number} minimum
 */
AggregatedValueValue.prototype['minimum'] = undefined;

/**
 * @member {Number} sum
 */
AggregatedValueValue.prototype['sum'] = undefined;

/**
 * @member {Number} standardDeviation
 */
AggregatedValueValue.prototype['standardDeviation'] = undefined;


// Implement Aggregates interface:
/**
 * @member {Number} average
 */
Aggregates.prototype['average'] = undefined;
/**
 * @member {Number} count
 */
Aggregates.prototype['count'] = undefined;
/**
 * @member {Number} maximum
 */
Aggregates.prototype['maximum'] = undefined;
/**
 * @member {Number} minimum
 */
Aggregates.prototype['minimum'] = undefined;
/**
 * @member {Number} sum
 */
Aggregates.prototype['sum'] = undefined;
/**
 * @member {Number} standardDeviation
 */
Aggregates.prototype['standardDeviation'] = undefined;




export default AggregatedValueValue;

