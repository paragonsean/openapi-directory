/**
 * AWS IoT SiteWise
 * Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects <a href=\"https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications\">Industrial Internet of Things (IIoT)</a> devices to the power of the Amazon Web Services Cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/\">IoT SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTSiteWise);
  }
}(this, function(expect, AwsIoTSiteWise) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTSiteWise.CreateDashboardRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateDashboardRequest', function() {
    it('should create an instance of CreateDashboardRequest', function() {
      // uncomment below and update the code to test CreateDashboardRequest
      //var instance = new AwsIoTSiteWise.CreateDashboardRequest();
      //expect(instance).to.be.a(AwsIoTSiteWise.CreateDashboardRequest);
    });

    it('should have the property projectId (base name: "projectId")', function() {
      // uncomment below and update the code to test the property projectId
      //var instance = new AwsIoTSiteWise.CreateDashboardRequest();
      //expect(instance).to.be();
    });

    it('should have the property dashboardName (base name: "dashboardName")', function() {
      // uncomment below and update the code to test the property dashboardName
      //var instance = new AwsIoTSiteWise.CreateDashboardRequest();
      //expect(instance).to.be();
    });

    it('should have the property dashboardDescription (base name: "dashboardDescription")', function() {
      // uncomment below and update the code to test the property dashboardDescription
      //var instance = new AwsIoTSiteWise.CreateDashboardRequest();
      //expect(instance).to.be();
    });

    it('should have the property dashboardDefinition (base name: "dashboardDefinition")', function() {
      // uncomment below and update the code to test the property dashboardDefinition
      //var instance = new AwsIoTSiteWise.CreateDashboardRequest();
      //expect(instance).to.be();
    });

    it('should have the property clientToken (base name: "clientToken")', function() {
      // uncomment below and update the code to test the property clientToken
      //var instance = new AwsIoTSiteWise.CreateDashboardRequest();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsIoTSiteWise.CreateDashboardRequest();
      //expect(instance).to.be();
    });

  });

}));
