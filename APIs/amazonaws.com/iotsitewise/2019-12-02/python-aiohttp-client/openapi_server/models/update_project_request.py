# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateProjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_name: str=None, project_description: str=None, client_token: str=None):
        """UpdateProjectRequest - a model defined in OpenAPI

        :param project_name: The project_name of this UpdateProjectRequest.
        :param project_description: The project_description of this UpdateProjectRequest.
        :param client_token: The client_token of this UpdateProjectRequest.
        """
        self.openapi_types = {
            'project_name': str,
            'project_description': str,
            'client_token': str
        }

        self.attribute_map = {
            'project_name': 'projectName',
            'project_description': 'projectDescription',
            'client_token': 'clientToken'
        }

        self._project_name = project_name
        self._project_description = project_description
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateProjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateProject_request of this UpdateProjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_name(self):
        """Gets the project_name of this UpdateProjectRequest.

        A new friendly name for the project.

        :return: The project_name of this UpdateProjectRequest.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this UpdateProjectRequest.

        A new friendly name for the project.

        :param project_name: The project_name of this UpdateProjectRequest.
        :type project_name: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")
        if project_name is not None and len(project_name) > 256:
            raise ValueError("Invalid value for `project_name`, length must be less than or equal to `256`")
        if project_name is not None and len(project_name) < 1:
            raise ValueError("Invalid value for `project_name`, length must be greater than or equal to `1`")
        if project_name is not None and not re.search(r'[^\u0000-\u001F\u007F]+', project_name):
            raise ValueError("Invalid value for `project_name`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._project_name = project_name

    @property
    def project_description(self):
        """Gets the project_description of this UpdateProjectRequest.

        A new description for the project.

        :return: The project_description of this UpdateProjectRequest.
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """Sets the project_description of this UpdateProjectRequest.

        A new description for the project.

        :param project_description: The project_description of this UpdateProjectRequest.
        :type project_description: str
        """
        if project_description is not None and len(project_description) > 2048:
            raise ValueError("Invalid value for `project_description`, length must be less than or equal to `2048`")
        if project_description is not None and len(project_description) < 1:
            raise ValueError("Invalid value for `project_description`, length must be greater than or equal to `1`")
        if project_description is not None and not re.search(r'[^\u0000-\u001F\u007F]+', project_description):
            raise ValueError("Invalid value for `project_description`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._project_description = project_description

    @property
    def client_token(self):
        """Gets the client_token of this UpdateProjectRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :return: The client_token of this UpdateProjectRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateProjectRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :param client_token: The client_token of this UpdateProjectRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 36:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `36`")
        if client_token is not None and not re.search(r'\S{36,64}', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S{36,64}/`")

        self._client_token = client_token
