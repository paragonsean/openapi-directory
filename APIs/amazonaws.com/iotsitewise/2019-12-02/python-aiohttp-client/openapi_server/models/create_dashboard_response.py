# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateDashboardResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dashboard_id: str=None, dashboard_arn: str=None):
        """CreateDashboardResponse - a model defined in OpenAPI

        :param dashboard_id: The dashboard_id of this CreateDashboardResponse.
        :param dashboard_arn: The dashboard_arn of this CreateDashboardResponse.
        """
        self.openapi_types = {
            'dashboard_id': str,
            'dashboard_arn': str
        }

        self.attribute_map = {
            'dashboard_id': 'dashboardId',
            'dashboard_arn': 'dashboardArn'
        }

        self._dashboard_id = dashboard_id
        self._dashboard_arn = dashboard_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDashboardResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDashboardResponse of this CreateDashboardResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this CreateDashboardResponse.


        :return: The dashboard_id of this CreateDashboardResponse.
        :rtype: str
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this CreateDashboardResponse.


        :param dashboard_id: The dashboard_id of this CreateDashboardResponse.
        :type dashboard_id: str
        """
        if dashboard_id is None:
            raise ValueError("Invalid value for `dashboard_id`, must not be `None`")

        self._dashboard_id = dashboard_id

    @property
    def dashboard_arn(self):
        """Gets the dashboard_arn of this CreateDashboardResponse.


        :return: The dashboard_arn of this CreateDashboardResponse.
        :rtype: str
        """
        return self._dashboard_arn

    @dashboard_arn.setter
    def dashboard_arn(self, dashboard_arn):
        """Sets the dashboard_arn of this CreateDashboardResponse.


        :param dashboard_arn: The dashboard_arn of this CreateDashboardResponse.
        :type dashboard_arn: str
        """
        if dashboard_arn is None:
            raise ValueError("Invalid value for `dashboard_arn`, must not be `None`")

        self._dashboard_arn = dashboard_arn
