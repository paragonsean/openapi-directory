# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class CreateBulkImportJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, job_name: str=None, job_status: JobStatus=None):
        """CreateBulkImportJobResponse - a model defined in OpenAPI

        :param job_id: The job_id of this CreateBulkImportJobResponse.
        :param job_name: The job_name of this CreateBulkImportJobResponse.
        :param job_status: The job_status of this CreateBulkImportJobResponse.
        """
        self.openapi_types = {
            'job_id': str,
            'job_name': str,
            'job_status': JobStatus
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'job_name': 'jobName',
            'job_status': 'jobStatus'
        }

        self._job_id = job_id
        self._job_name = job_name
        self._job_status = job_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBulkImportJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBulkImportJobResponse of this CreateBulkImportJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this CreateBulkImportJobResponse.


        :return: The job_id of this CreateBulkImportJobResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CreateBulkImportJobResponse.


        :param job_id: The job_id of this CreateBulkImportJobResponse.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this CreateBulkImportJobResponse.


        :return: The job_name of this CreateBulkImportJobResponse.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this CreateBulkImportJobResponse.


        :param job_name: The job_name of this CreateBulkImportJobResponse.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")

        self._job_name = job_name

    @property
    def job_status(self):
        """Gets the job_status of this CreateBulkImportJobResponse.


        :return: The job_status of this CreateBulkImportJobResponse.
        :rtype: JobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this CreateBulkImportJobResponse.


        :param job_status: The job_status of this CreateBulkImportJobResponse.
        :type job_status: JobStatus
        """
        if job_status is None:
            raise ValueError("Invalid value for `job_status`, must not be `None`")

        self._job_status = job_status
