# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_type_attribute import PropertyTypeAttribute
from openapi_server.models.property_type_measurement import PropertyTypeMeasurement
from openapi_server.models.property_type_metric import PropertyTypeMetric
from openapi_server.models.property_type_transform import PropertyTypeTransform
from openapi_server import util


class PropertyType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: PropertyTypeAttribute=None, measurement: PropertyTypeMeasurement=None, transform: PropertyTypeTransform=None, metric: PropertyTypeMetric=None):
        """PropertyType - a model defined in OpenAPI

        :param attribute: The attribute of this PropertyType.
        :param measurement: The measurement of this PropertyType.
        :param transform: The transform of this PropertyType.
        :param metric: The metric of this PropertyType.
        """
        self.openapi_types = {
            'attribute': PropertyTypeAttribute,
            'measurement': PropertyTypeMeasurement,
            'transform': PropertyTypeTransform,
            'metric': PropertyTypeMetric
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'measurement': 'measurement',
            'transform': 'transform',
            'metric': 'metric'
        }

        self._attribute = attribute
        self._measurement = measurement
        self._transform = transform
        self._metric = metric

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Property_type of this PropertyType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this PropertyType.


        :return: The attribute of this PropertyType.
        :rtype: PropertyTypeAttribute
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this PropertyType.


        :param attribute: The attribute of this PropertyType.
        :type attribute: PropertyTypeAttribute
        """

        self._attribute = attribute

    @property
    def measurement(self):
        """Gets the measurement of this PropertyType.


        :return: The measurement of this PropertyType.
        :rtype: PropertyTypeMeasurement
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement):
        """Sets the measurement of this PropertyType.


        :param measurement: The measurement of this PropertyType.
        :type measurement: PropertyTypeMeasurement
        """

        self._measurement = measurement

    @property
    def transform(self):
        """Gets the transform of this PropertyType.


        :return: The transform of this PropertyType.
        :rtype: PropertyTypeTransform
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this PropertyType.


        :param transform: The transform of this PropertyType.
        :type transform: PropertyTypeTransform
        """

        self._transform = transform

    @property
    def metric(self):
        """Gets the metric of this PropertyType.


        :return: The metric of this PropertyType.
        :rtype: PropertyTypeMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this PropertyType.


        :param metric: The metric of this PropertyType.
        :type metric: PropertyTypeMetric
        """

        self._metric = metric
