# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AssociateTimeSeriesToAssetPropertyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None):
        """AssociateTimeSeriesToAssetPropertyRequest - a model defined in OpenAPI

        :param client_token: The client_token of this AssociateTimeSeriesToAssetPropertyRequest.
        """
        self.openapi_types = {
            'client_token': str
        }

        self.attribute_map = {
            'client_token': 'clientToken'
        }

        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateTimeSeriesToAssetPropertyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateTimeSeriesToAssetProperty_request of this AssociateTimeSeriesToAssetPropertyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this AssociateTimeSeriesToAssetPropertyRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :return: The client_token of this AssociateTimeSeriesToAssetPropertyRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this AssociateTimeSeriesToAssetPropertyRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :param client_token: The client_token of this AssociateTimeSeriesToAssetPropertyRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 36:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `36`")
        if client_token is not None and not re.search(r'\S{36,64}', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S{36,64}/`")

        self._client_token = client_token
