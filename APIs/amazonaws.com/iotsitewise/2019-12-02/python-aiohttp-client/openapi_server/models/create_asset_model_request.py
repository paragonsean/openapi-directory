# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_model_composite_model_definition import AssetModelCompositeModelDefinition
from openapi_server.models.asset_model_hierarchy_definition import AssetModelHierarchyDefinition
from openapi_server.models.asset_model_property_definition import AssetModelPropertyDefinition
import re
from openapi_server import util


class CreateAssetModelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_model_name: str=None, asset_model_description: str=None, asset_model_properties: List[AssetModelPropertyDefinition]=None, asset_model_hierarchies: List[AssetModelHierarchyDefinition]=None, asset_model_composite_models: List[AssetModelCompositeModelDefinition]=None, client_token: str=None, tags: Dict[str, str]=None):
        """CreateAssetModelRequest - a model defined in OpenAPI

        :param asset_model_name: The asset_model_name of this CreateAssetModelRequest.
        :param asset_model_description: The asset_model_description of this CreateAssetModelRequest.
        :param asset_model_properties: The asset_model_properties of this CreateAssetModelRequest.
        :param asset_model_hierarchies: The asset_model_hierarchies of this CreateAssetModelRequest.
        :param asset_model_composite_models: The asset_model_composite_models of this CreateAssetModelRequest.
        :param client_token: The client_token of this CreateAssetModelRequest.
        :param tags: The tags of this CreateAssetModelRequest.
        """
        self.openapi_types = {
            'asset_model_name': str,
            'asset_model_description': str,
            'asset_model_properties': List[AssetModelPropertyDefinition],
            'asset_model_hierarchies': List[AssetModelHierarchyDefinition],
            'asset_model_composite_models': List[AssetModelCompositeModelDefinition],
            'client_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'asset_model_name': 'assetModelName',
            'asset_model_description': 'assetModelDescription',
            'asset_model_properties': 'assetModelProperties',
            'asset_model_hierarchies': 'assetModelHierarchies',
            'asset_model_composite_models': 'assetModelCompositeModels',
            'client_token': 'clientToken',
            'tags': 'tags'
        }

        self._asset_model_name = asset_model_name
        self._asset_model_description = asset_model_description
        self._asset_model_properties = asset_model_properties
        self._asset_model_hierarchies = asset_model_hierarchies
        self._asset_model_composite_models = asset_model_composite_models
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssetModelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAssetModel_request of this CreateAssetModelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_model_name(self):
        """Gets the asset_model_name of this CreateAssetModelRequest.

        A unique, friendly name for the asset model.

        :return: The asset_model_name of this CreateAssetModelRequest.
        :rtype: str
        """
        return self._asset_model_name

    @asset_model_name.setter
    def asset_model_name(self, asset_model_name):
        """Sets the asset_model_name of this CreateAssetModelRequest.

        A unique, friendly name for the asset model.

        :param asset_model_name: The asset_model_name of this CreateAssetModelRequest.
        :type asset_model_name: str
        """
        if asset_model_name is None:
            raise ValueError("Invalid value for `asset_model_name`, must not be `None`")
        if asset_model_name is not None and len(asset_model_name) > 256:
            raise ValueError("Invalid value for `asset_model_name`, length must be less than or equal to `256`")
        if asset_model_name is not None and len(asset_model_name) < 1:
            raise ValueError("Invalid value for `asset_model_name`, length must be greater than or equal to `1`")
        if asset_model_name is not None and not re.search(r'[^\u0000-\u001F\u007F]+', asset_model_name):
            raise ValueError("Invalid value for `asset_model_name`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._asset_model_name = asset_model_name

    @property
    def asset_model_description(self):
        """Gets the asset_model_description of this CreateAssetModelRequest.

        A description for the asset model.

        :return: The asset_model_description of this CreateAssetModelRequest.
        :rtype: str
        """
        return self._asset_model_description

    @asset_model_description.setter
    def asset_model_description(self, asset_model_description):
        """Sets the asset_model_description of this CreateAssetModelRequest.

        A description for the asset model.

        :param asset_model_description: The asset_model_description of this CreateAssetModelRequest.
        :type asset_model_description: str
        """
        if asset_model_description is not None and len(asset_model_description) > 2048:
            raise ValueError("Invalid value for `asset_model_description`, length must be less than or equal to `2048`")
        if asset_model_description is not None and len(asset_model_description) < 1:
            raise ValueError("Invalid value for `asset_model_description`, length must be greater than or equal to `1`")
        if asset_model_description is not None and not re.search(r'[^\u0000-\u001F\u007F]+', asset_model_description):
            raise ValueError("Invalid value for `asset_model_description`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._asset_model_description = asset_model_description

    @property
    def asset_model_properties(self):
        """Gets the asset_model_properties of this CreateAssetModelRequest.

        <p>The property definitions of the asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html\">Asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 200 properties per asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>

        :return: The asset_model_properties of this CreateAssetModelRequest.
        :rtype: List[AssetModelPropertyDefinition]
        """
        return self._asset_model_properties

    @asset_model_properties.setter
    def asset_model_properties(self, asset_model_properties):
        """Sets the asset_model_properties of this CreateAssetModelRequest.

        <p>The property definitions of the asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html\">Asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 200 properties per asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>

        :param asset_model_properties: The asset_model_properties of this CreateAssetModelRequest.
        :type asset_model_properties: List[AssetModelPropertyDefinition]
        """

        self._asset_model_properties = asset_model_properties

    @property
    def asset_model_hierarchies(self):
        """Gets the asset_model_hierarchies of this CreateAssetModelRequest.

        <p>The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html\">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 10 hierarchies per asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>

        :return: The asset_model_hierarchies of this CreateAssetModelRequest.
        :rtype: List[AssetModelHierarchyDefinition]
        """
        return self._asset_model_hierarchies

    @asset_model_hierarchies.setter
    def asset_model_hierarchies(self, asset_model_hierarchies):
        """Sets the asset_model_hierarchies of this CreateAssetModelRequest.

        <p>The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html\">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 10 hierarchies per asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>

        :param asset_model_hierarchies: The asset_model_hierarchies of this CreateAssetModelRequest.
        :type asset_model_hierarchies: List[AssetModelHierarchyDefinition]
        """

        self._asset_model_hierarchies = asset_model_hierarchies

    @property
    def asset_model_composite_models(self):
        """Gets the asset_model_composite_models of this CreateAssetModelRequest.

        The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. Use composite asset models to define alarms on this asset model.

        :return: The asset_model_composite_models of this CreateAssetModelRequest.
        :rtype: List[AssetModelCompositeModelDefinition]
        """
        return self._asset_model_composite_models

    @asset_model_composite_models.setter
    def asset_model_composite_models(self, asset_model_composite_models):
        """Sets the asset_model_composite_models of this CreateAssetModelRequest.

        The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. Use composite asset models to define alarms on this asset model.

        :param asset_model_composite_models: The asset_model_composite_models of this CreateAssetModelRequest.
        :type asset_model_composite_models: List[AssetModelCompositeModelDefinition]
        """

        self._asset_model_composite_models = asset_model_composite_models

    @property
    def client_token(self):
        """Gets the client_token of this CreateAssetModelRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :return: The client_token of this CreateAssetModelRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateAssetModelRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :param client_token: The client_token of this CreateAssetModelRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 36:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `36`")
        if client_token is not None and not re.search(r'\S{36,64}', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S{36,64}/`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateAssetModelRequest.

        A list of key-value pairs that contain metadata for the asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.

        :return: The tags of this CreateAssetModelRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAssetModelRequest.

        A list of key-value pairs that contain metadata for the asset model. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.

        :param tags: The tags of this CreateAssetModelRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
