# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_model_property_definition_type import AssetModelPropertyDefinitionType
from openapi_server.models.property_data_type import PropertyDataType
from openapi_server import util


class AssetModelPropertyDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, data_type: PropertyDataType=None, data_type_spec: str=None, unit: str=None, type: AssetModelPropertyDefinitionType=None):
        """AssetModelPropertyDefinition - a model defined in OpenAPI

        :param name: The name of this AssetModelPropertyDefinition.
        :param data_type: The data_type of this AssetModelPropertyDefinition.
        :param data_type_spec: The data_type_spec of this AssetModelPropertyDefinition.
        :param unit: The unit of this AssetModelPropertyDefinition.
        :param type: The type of this AssetModelPropertyDefinition.
        """
        self.openapi_types = {
            'name': str,
            'data_type': PropertyDataType,
            'data_type_spec': str,
            'unit': str,
            'type': AssetModelPropertyDefinitionType
        }

        self.attribute_map = {
            'name': 'name',
            'data_type': 'dataType',
            'data_type_spec': 'dataTypeSpec',
            'unit': 'unit',
            'type': 'type'
        }

        self._name = name
        self._data_type = data_type
        self._data_type_spec = data_type_spec
        self._unit = unit
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetModelPropertyDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetModelPropertyDefinition of this AssetModelPropertyDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AssetModelPropertyDefinition.


        :return: The name of this AssetModelPropertyDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetModelPropertyDefinition.


        :param name: The name of this AssetModelPropertyDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this AssetModelPropertyDefinition.


        :return: The data_type of this AssetModelPropertyDefinition.
        :rtype: PropertyDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this AssetModelPropertyDefinition.


        :param data_type: The data_type of this AssetModelPropertyDefinition.
        :type data_type: PropertyDataType
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")

        self._data_type = data_type

    @property
    def data_type_spec(self):
        """Gets the data_type_spec of this AssetModelPropertyDefinition.


        :return: The data_type_spec of this AssetModelPropertyDefinition.
        :rtype: str
        """
        return self._data_type_spec

    @data_type_spec.setter
    def data_type_spec(self, data_type_spec):
        """Sets the data_type_spec of this AssetModelPropertyDefinition.


        :param data_type_spec: The data_type_spec of this AssetModelPropertyDefinition.
        :type data_type_spec: str
        """

        self._data_type_spec = data_type_spec

    @property
    def unit(self):
        """Gets the unit of this AssetModelPropertyDefinition.


        :return: The unit of this AssetModelPropertyDefinition.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this AssetModelPropertyDefinition.


        :param unit: The unit of this AssetModelPropertyDefinition.
        :type unit: str
        """

        self._unit = unit

    @property
    def type(self):
        """Gets the type of this AssetModelPropertyDefinition.


        :return: The type of this AssetModelPropertyDefinition.
        :rtype: AssetModelPropertyDefinitionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssetModelPropertyDefinition.


        :param type: The type of this AssetModelPropertyDefinition.
        :type type: AssetModelPropertyDefinitionType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
