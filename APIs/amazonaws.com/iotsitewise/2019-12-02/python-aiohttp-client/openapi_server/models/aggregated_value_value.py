# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AggregatedValueValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, count: float=None, maximum: float=None, minimum: float=None, sum: float=None, standard_deviation: float=None):
        """AggregatedValueValue - a model defined in OpenAPI

        :param average: The average of this AggregatedValueValue.
        :param count: The count of this AggregatedValueValue.
        :param maximum: The maximum of this AggregatedValueValue.
        :param minimum: The minimum of this AggregatedValueValue.
        :param sum: The sum of this AggregatedValueValue.
        :param standard_deviation: The standard_deviation of this AggregatedValueValue.
        """
        self.openapi_types = {
            'average': float,
            'count': float,
            'maximum': float,
            'minimum': float,
            'sum': float,
            'standard_deviation': float
        }

        self.attribute_map = {
            'average': 'average',
            'count': 'count',
            'maximum': 'maximum',
            'minimum': 'minimum',
            'sum': 'sum',
            'standard_deviation': 'standardDeviation'
        }

        self._average = average
        self._count = count
        self._maximum = maximum
        self._minimum = minimum
        self._sum = sum
        self._standard_deviation = standard_deviation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregatedValueValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregatedValue_value of this AggregatedValueValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this AggregatedValueValue.


        :return: The average of this AggregatedValueValue.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this AggregatedValueValue.


        :param average: The average of this AggregatedValueValue.
        :type average: float
        """

        self._average = average

    @property
    def count(self):
        """Gets the count of this AggregatedValueValue.


        :return: The count of this AggregatedValueValue.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AggregatedValueValue.


        :param count: The count of this AggregatedValueValue.
        :type count: float
        """

        self._count = count

    @property
    def maximum(self):
        """Gets the maximum of this AggregatedValueValue.


        :return: The maximum of this AggregatedValueValue.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this AggregatedValueValue.


        :param maximum: The maximum of this AggregatedValueValue.
        :type maximum: float
        """

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this AggregatedValueValue.


        :return: The minimum of this AggregatedValueValue.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this AggregatedValueValue.


        :param minimum: The minimum of this AggregatedValueValue.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def sum(self):
        """Gets the sum of this AggregatedValueValue.


        :return: The sum of this AggregatedValueValue.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this AggregatedValueValue.


        :param sum: The sum of this AggregatedValueValue.
        :type sum: float
        """

        self._sum = sum

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this AggregatedValueValue.


        :return: The standard_deviation of this AggregatedValueValue.
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this AggregatedValueValue.


        :param standard_deviation: The standard_deviation of this AggregatedValueValue.
        :type standard_deviation: float
        """

        self._standard_deviation = standard_deviation
