# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetAssetPropertyAggregatesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_entries: List=None, success_entries: List=None, skipped_entries: List=None, next_token: str=None):
        """BatchGetAssetPropertyAggregatesResponse - a model defined in OpenAPI

        :param error_entries: The error_entries of this BatchGetAssetPropertyAggregatesResponse.
        :param success_entries: The success_entries of this BatchGetAssetPropertyAggregatesResponse.
        :param skipped_entries: The skipped_entries of this BatchGetAssetPropertyAggregatesResponse.
        :param next_token: The next_token of this BatchGetAssetPropertyAggregatesResponse.
        """
        self.openapi_types = {
            'error_entries': List,
            'success_entries': List,
            'skipped_entries': List,
            'next_token': str
        }

        self.attribute_map = {
            'error_entries': 'errorEntries',
            'success_entries': 'successEntries',
            'skipped_entries': 'skippedEntries',
            'next_token': 'nextToken'
        }

        self._error_entries = error_entries
        self._success_entries = success_entries
        self._skipped_entries = skipped_entries
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetAssetPropertyAggregatesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetAssetPropertyAggregatesResponse of this BatchGetAssetPropertyAggregatesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_entries(self):
        """Gets the error_entries of this BatchGetAssetPropertyAggregatesResponse.


        :return: The error_entries of this BatchGetAssetPropertyAggregatesResponse.
        :rtype: List
        """
        return self._error_entries

    @error_entries.setter
    def error_entries(self, error_entries):
        """Sets the error_entries of this BatchGetAssetPropertyAggregatesResponse.


        :param error_entries: The error_entries of this BatchGetAssetPropertyAggregatesResponse.
        :type error_entries: List
        """
        if error_entries is None:
            raise ValueError("Invalid value for `error_entries`, must not be `None`")

        self._error_entries = error_entries

    @property
    def success_entries(self):
        """Gets the success_entries of this BatchGetAssetPropertyAggregatesResponse.


        :return: The success_entries of this BatchGetAssetPropertyAggregatesResponse.
        :rtype: List
        """
        return self._success_entries

    @success_entries.setter
    def success_entries(self, success_entries):
        """Sets the success_entries of this BatchGetAssetPropertyAggregatesResponse.


        :param success_entries: The success_entries of this BatchGetAssetPropertyAggregatesResponse.
        :type success_entries: List
        """
        if success_entries is None:
            raise ValueError("Invalid value for `success_entries`, must not be `None`")

        self._success_entries = success_entries

    @property
    def skipped_entries(self):
        """Gets the skipped_entries of this BatchGetAssetPropertyAggregatesResponse.


        :return: The skipped_entries of this BatchGetAssetPropertyAggregatesResponse.
        :rtype: List
        """
        return self._skipped_entries

    @skipped_entries.setter
    def skipped_entries(self, skipped_entries):
        """Sets the skipped_entries of this BatchGetAssetPropertyAggregatesResponse.


        :param skipped_entries: The skipped_entries of this BatchGetAssetPropertyAggregatesResponse.
        :type skipped_entries: List
        """
        if skipped_entries is None:
            raise ValueError("Invalid value for `skipped_entries`, must not be `None`")

        self._skipped_entries = skipped_entries

    @property
    def next_token(self):
        """Gets the next_token of this BatchGetAssetPropertyAggregatesResponse.


        :return: The next_token of this BatchGetAssetPropertyAggregatesResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this BatchGetAssetPropertyAggregatesResponse.


        :param next_token: The next_token of this BatchGetAssetPropertyAggregatesResponse.
        :type next_token: str
        """

        self._next_token = next_token
