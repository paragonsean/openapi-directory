# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateAssetPropertyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, property_alias: str=None, property_notification_state: str=None, client_token: str=None, property_unit: str=None):
        """UpdateAssetPropertyRequest - a model defined in OpenAPI

        :param property_alias: The property_alias of this UpdateAssetPropertyRequest.
        :param property_notification_state: The property_notification_state of this UpdateAssetPropertyRequest.
        :param client_token: The client_token of this UpdateAssetPropertyRequest.
        :param property_unit: The property_unit of this UpdateAssetPropertyRequest.
        """
        self.openapi_types = {
            'property_alias': str,
            'property_notification_state': str,
            'client_token': str,
            'property_unit': str
        }

        self.attribute_map = {
            'property_alias': 'propertyAlias',
            'property_notification_state': 'propertyNotificationState',
            'client_token': 'clientToken',
            'property_unit': 'propertyUnit'
        }

        self._property_alias = property_alias
        self._property_notification_state = property_notification_state
        self._client_token = client_token
        self._property_unit = property_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAssetPropertyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAssetProperty_request of this UpdateAssetPropertyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def property_alias(self):
        """Gets the property_alias of this UpdateAssetPropertyRequest.

        <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html\">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>If you omit this parameter, the alias is removed from the property.</p>

        :return: The property_alias of this UpdateAssetPropertyRequest.
        :rtype: str
        """
        return self._property_alias

    @property_alias.setter
    def property_alias(self, property_alias):
        """Sets the property_alias of this UpdateAssetPropertyRequest.

        <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html\">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>If you omit this parameter, the alias is removed from the property.</p>

        :param property_alias: The property_alias of this UpdateAssetPropertyRequest.
        :type property_alias: str
        """
        if property_alias is not None and len(property_alias) < 1:
            raise ValueError("Invalid value for `property_alias`, length must be greater than or equal to `1`")
        if property_alias is not None and not re.search(r'[^\u0000-\u001F\u007F]+', property_alias):
            raise ValueError("Invalid value for `property_alias`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._property_alias = property_alias

    @property
    def property_notification_state(self):
        """Gets the property_notification_state of this UpdateAssetPropertyRequest.

        <p>The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html\">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>If you omit this parameter, the notification state is set to <code>DISABLED</code>.</p>

        :return: The property_notification_state of this UpdateAssetPropertyRequest.
        :rtype: str
        """
        return self._property_notification_state

    @property_notification_state.setter
    def property_notification_state(self, property_notification_state):
        """Sets the property_notification_state of this UpdateAssetPropertyRequest.

        <p>The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html\">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>If you omit this parameter, the notification state is set to <code>DISABLED</code>.</p>

        :param property_notification_state: The property_notification_state of this UpdateAssetPropertyRequest.
        :type property_notification_state: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if property_notification_state not in allowed_values:
            raise ValueError(
                "Invalid value for `property_notification_state` ({0}), must be one of {1}"
                .format(property_notification_state, allowed_values)
            )

        self._property_notification_state = property_notification_state

    @property
    def client_token(self):
        """Gets the client_token of this UpdateAssetPropertyRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :return: The client_token of this UpdateAssetPropertyRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateAssetPropertyRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :param client_token: The client_token of this UpdateAssetPropertyRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 36:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `36`")
        if client_token is not None and not re.search(r'\S{36,64}', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S{36,64}/`")

        self._client_token = client_token

    @property
    def property_unit(self):
        """Gets the property_unit of this UpdateAssetPropertyRequest.

        The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the <code>assetModelProperty</code> in the asset model.

        :return: The property_unit of this UpdateAssetPropertyRequest.
        :rtype: str
        """
        return self._property_unit

    @property_unit.setter
    def property_unit(self, property_unit):
        """Sets the property_unit of this UpdateAssetPropertyRequest.

        The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the <code>assetModelProperty</code> in the asset model.

        :param property_unit: The property_unit of this UpdateAssetPropertyRequest.
        :type property_unit: str
        """
        if property_unit is not None and len(property_unit) > 256:
            raise ValueError("Invalid value for `property_unit`, length must be less than or equal to `256`")
        if property_unit is not None and len(property_unit) < 1:
            raise ValueError("Invalid value for `property_unit`, length must be greater than or equal to `1`")
        if property_unit is not None and not re.search(r'[^\u0000-\u001F\u007F]+', property_unit):
            raise ValueError("Invalid value for `property_unit`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._property_unit = property_unit
