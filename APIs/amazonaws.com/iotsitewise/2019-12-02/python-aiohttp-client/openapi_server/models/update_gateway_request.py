# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateGatewayRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_name: str=None):
        """UpdateGatewayRequest - a model defined in OpenAPI

        :param gateway_name: The gateway_name of this UpdateGatewayRequest.
        """
        self.openapi_types = {
            'gateway_name': str
        }

        self.attribute_map = {
            'gateway_name': 'gatewayName'
        }

        self._gateway_name = gateway_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateGatewayRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateGateway_request of this UpdateGatewayRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_name(self):
        """Gets the gateway_name of this UpdateGatewayRequest.

        A unique, friendly name for the gateway.

        :return: The gateway_name of this UpdateGatewayRequest.
        :rtype: str
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name):
        """Sets the gateway_name of this UpdateGatewayRequest.

        A unique, friendly name for the gateway.

        :param gateway_name: The gateway_name of this UpdateGatewayRequest.
        :type gateway_name: str
        """
        if gateway_name is None:
            raise ValueError("Invalid value for `gateway_name`, must not be `None`")
        if gateway_name is not None and len(gateway_name) > 256:
            raise ValueError("Invalid value for `gateway_name`, length must be less than or equal to `256`")
        if gateway_name is not None and len(gateway_name) < 1:
            raise ValueError("Invalid value for `gateway_name`, length must be greater than or equal to `1`")
        if gateway_name is not None and not re.search(r'[^\u0000-\u001F\u007F]+', gateway_name):
            raise ValueError("Invalid value for `gateway_name`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._gateway_name = gateway_name
