# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutDefaultEncryptionConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_type: str=None, kms_key_id: str=None):
        """PutDefaultEncryptionConfigurationRequest - a model defined in OpenAPI

        :param encryption_type: The encryption_type of this PutDefaultEncryptionConfigurationRequest.
        :param kms_key_id: The kms_key_id of this PutDefaultEncryptionConfigurationRequest.
        """
        self.openapi_types = {
            'encryption_type': str,
            'kms_key_id': str
        }

        self.attribute_map = {
            'encryption_type': 'encryptionType',
            'kms_key_id': 'kmsKeyId'
        }

        self._encryption_type = encryption_type
        self._kms_key_id = kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutDefaultEncryptionConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutDefaultEncryptionConfiguration_request of this PutDefaultEncryptionConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_type(self):
        """Gets the encryption_type of this PutDefaultEncryptionConfigurationRequest.

        The type of encryption used for the encryption configuration.

        :return: The encryption_type of this PutDefaultEncryptionConfigurationRequest.
        :rtype: str
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """Sets the encryption_type of this PutDefaultEncryptionConfigurationRequest.

        The type of encryption used for the encryption configuration.

        :param encryption_type: The encryption_type of this PutDefaultEncryptionConfigurationRequest.
        :type encryption_type: str
        """
        allowed_values = ["SITEWISE_DEFAULT_ENCRYPTION", "KMS_BASED_ENCRYPTION"]  # noqa: E501
        if encryption_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_type` ({0}), must be one of {1}"
                .format(encryption_type, allowed_values)
            )

        self._encryption_type = encryption_type

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this PutDefaultEncryptionConfigurationRequest.

        The Key ID of the customer managed key used for KMS encryption. This is required if you use <code>KMS_BASED_ENCRYPTION</code>.

        :return: The kms_key_id of this PutDefaultEncryptionConfigurationRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this PutDefaultEncryptionConfigurationRequest.

        The Key ID of the customer managed key used for KMS encryption. This is required if you use <code>KMS_BASED_ENCRYPTION</code>.

        :param kms_key_id: The kms_key_id of this PutDefaultEncryptionConfigurationRequest.
        :type kms_key_id: str
        """
        if kms_key_id is not None and len(kms_key_id) > 2048:
            raise ValueError("Invalid value for `kms_key_id`, length must be less than or equal to `2048`")
        if kms_key_id is not None and len(kms_key_id) < 1:
            raise ValueError("Invalid value for `kms_key_id`, length must be greater than or equal to `1`")

        self._kms_key_id = kms_key_id
