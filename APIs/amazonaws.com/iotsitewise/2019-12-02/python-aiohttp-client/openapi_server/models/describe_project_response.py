# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeProjectResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_id: str=None, project_arn: str=None, project_name: str=None, portal_id: str=None, project_description: str=None, project_creation_date: datetime=None, project_last_update_date: datetime=None):
        """DescribeProjectResponse - a model defined in OpenAPI

        :param project_id: The project_id of this DescribeProjectResponse.
        :param project_arn: The project_arn of this DescribeProjectResponse.
        :param project_name: The project_name of this DescribeProjectResponse.
        :param portal_id: The portal_id of this DescribeProjectResponse.
        :param project_description: The project_description of this DescribeProjectResponse.
        :param project_creation_date: The project_creation_date of this DescribeProjectResponse.
        :param project_last_update_date: The project_last_update_date of this DescribeProjectResponse.
        """
        self.openapi_types = {
            'project_id': str,
            'project_arn': str,
            'project_name': str,
            'portal_id': str,
            'project_description': str,
            'project_creation_date': datetime,
            'project_last_update_date': datetime
        }

        self.attribute_map = {
            'project_id': 'projectId',
            'project_arn': 'projectArn',
            'project_name': 'projectName',
            'portal_id': 'portalId',
            'project_description': 'projectDescription',
            'project_creation_date': 'projectCreationDate',
            'project_last_update_date': 'projectLastUpdateDate'
        }

        self._project_id = project_id
        self._project_arn = project_arn
        self._project_name = project_name
        self._portal_id = portal_id
        self._project_description = project_description
        self._project_creation_date = project_creation_date
        self._project_last_update_date = project_last_update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeProjectResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeProjectResponse of this DescribeProjectResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self):
        """Gets the project_id of this DescribeProjectResponse.


        :return: The project_id of this DescribeProjectResponse.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DescribeProjectResponse.


        :param project_id: The project_id of this DescribeProjectResponse.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def project_arn(self):
        """Gets the project_arn of this DescribeProjectResponse.


        :return: The project_arn of this DescribeProjectResponse.
        :rtype: str
        """
        return self._project_arn

    @project_arn.setter
    def project_arn(self, project_arn):
        """Sets the project_arn of this DescribeProjectResponse.


        :param project_arn: The project_arn of this DescribeProjectResponse.
        :type project_arn: str
        """
        if project_arn is None:
            raise ValueError("Invalid value for `project_arn`, must not be `None`")

        self._project_arn = project_arn

    @property
    def project_name(self):
        """Gets the project_name of this DescribeProjectResponse.


        :return: The project_name of this DescribeProjectResponse.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this DescribeProjectResponse.


        :param project_name: The project_name of this DescribeProjectResponse.
        :type project_name: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")

        self._project_name = project_name

    @property
    def portal_id(self):
        """Gets the portal_id of this DescribeProjectResponse.


        :return: The portal_id of this DescribeProjectResponse.
        :rtype: str
        """
        return self._portal_id

    @portal_id.setter
    def portal_id(self, portal_id):
        """Sets the portal_id of this DescribeProjectResponse.


        :param portal_id: The portal_id of this DescribeProjectResponse.
        :type portal_id: str
        """
        if portal_id is None:
            raise ValueError("Invalid value for `portal_id`, must not be `None`")

        self._portal_id = portal_id

    @property
    def project_description(self):
        """Gets the project_description of this DescribeProjectResponse.


        :return: The project_description of this DescribeProjectResponse.
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """Sets the project_description of this DescribeProjectResponse.


        :param project_description: The project_description of this DescribeProjectResponse.
        :type project_description: str
        """

        self._project_description = project_description

    @property
    def project_creation_date(self):
        """Gets the project_creation_date of this DescribeProjectResponse.


        :return: The project_creation_date of this DescribeProjectResponse.
        :rtype: datetime
        """
        return self._project_creation_date

    @project_creation_date.setter
    def project_creation_date(self, project_creation_date):
        """Sets the project_creation_date of this DescribeProjectResponse.


        :param project_creation_date: The project_creation_date of this DescribeProjectResponse.
        :type project_creation_date: datetime
        """
        if project_creation_date is None:
            raise ValueError("Invalid value for `project_creation_date`, must not be `None`")

        self._project_creation_date = project_creation_date

    @property
    def project_last_update_date(self):
        """Gets the project_last_update_date of this DescribeProjectResponse.


        :return: The project_last_update_date of this DescribeProjectResponse.
        :rtype: datetime
        """
        return self._project_last_update_date

    @project_last_update_date.setter
    def project_last_update_date(self, project_last_update_date):
        """Sets the project_last_update_date of this DescribeProjectResponse.


        :param project_last_update_date: The project_last_update_date of this DescribeProjectResponse.
        :type project_last_update_date: datetime
        """
        if project_last_update_date is None:
            raise ValueError("Invalid value for `project_last_update_date`, must not be `None`")

        self._project_last_update_date = project_last_update_date
