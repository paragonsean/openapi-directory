# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_bulk_import_job_request_error_report_location import CreateBulkImportJobRequestErrorReportLocation
from openapi_server.models.create_bulk_import_job_request_job_configuration import CreateBulkImportJobRequestJobConfiguration
from openapi_server.models.file import File
import re
from openapi_server import util


class CreateBulkImportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_name: str=None, job_role_arn: str=None, files: List[File]=None, error_report_location: CreateBulkImportJobRequestErrorReportLocation=None, job_configuration: CreateBulkImportJobRequestJobConfiguration=None):
        """CreateBulkImportJobRequest - a model defined in OpenAPI

        :param job_name: The job_name of this CreateBulkImportJobRequest.
        :param job_role_arn: The job_role_arn of this CreateBulkImportJobRequest.
        :param files: The files of this CreateBulkImportJobRequest.
        :param error_report_location: The error_report_location of this CreateBulkImportJobRequest.
        :param job_configuration: The job_configuration of this CreateBulkImportJobRequest.
        """
        self.openapi_types = {
            'job_name': str,
            'job_role_arn': str,
            'files': List[File],
            'error_report_location': CreateBulkImportJobRequestErrorReportLocation,
            'job_configuration': CreateBulkImportJobRequestJobConfiguration
        }

        self.attribute_map = {
            'job_name': 'jobName',
            'job_role_arn': 'jobRoleArn',
            'files': 'files',
            'error_report_location': 'errorReportLocation',
            'job_configuration': 'jobConfiguration'
        }

        self._job_name = job_name
        self._job_role_arn = job_role_arn
        self._files = files
        self._error_report_location = error_report_location
        self._job_configuration = job_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBulkImportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBulkImportJob_request of this CreateBulkImportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_name(self):
        """Gets the job_name of this CreateBulkImportJobRequest.

        The unique name that helps identify the job request.

        :return: The job_name of this CreateBulkImportJobRequest.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this CreateBulkImportJobRequest.

        The unique name that helps identify the job request.

        :param job_name: The job_name of this CreateBulkImportJobRequest.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")
        if job_name is not None and len(job_name) > 256:
            raise ValueError("Invalid value for `job_name`, length must be less than or equal to `256`")
        if job_name is not None and len(job_name) < 1:
            raise ValueError("Invalid value for `job_name`, length must be greater than or equal to `1`")
        if job_name is not None and not re.search(r'[^\u0000-\u001F\u007F]+', job_name):
            raise ValueError("Invalid value for `job_name`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._job_name = job_name

    @property
    def job_role_arn(self):
        """Gets the job_role_arn of this CreateBulkImportJobRequest.

        The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">ARN</a> of the IAM role that allows IoT SiteWise to read Amazon S3 data.

        :return: The job_role_arn of this CreateBulkImportJobRequest.
        :rtype: str
        """
        return self._job_role_arn

    @job_role_arn.setter
    def job_role_arn(self, job_role_arn):
        """Sets the job_role_arn of this CreateBulkImportJobRequest.

        The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">ARN</a> of the IAM role that allows IoT SiteWise to read Amazon S3 data.

        :param job_role_arn: The job_role_arn of this CreateBulkImportJobRequest.
        :type job_role_arn: str
        """
        if job_role_arn is None:
            raise ValueError("Invalid value for `job_role_arn`, must not be `None`")
        if job_role_arn is not None and len(job_role_arn) > 1600:
            raise ValueError("Invalid value for `job_role_arn`, length must be less than or equal to `1600`")
        if job_role_arn is not None and len(job_role_arn) < 1:
            raise ValueError("Invalid value for `job_role_arn`, length must be greater than or equal to `1`")
        if job_role_arn is not None and not re.search(r'.*', job_role_arn):
            raise ValueError("Invalid value for `job_role_arn`, must be a follow pattern or equal to `/.*/`")

        self._job_role_arn = job_role_arn

    @property
    def files(self):
        """Gets the files of this CreateBulkImportJobRequest.

        The files in the specified Amazon S3 bucket that contain your data.

        :return: The files of this CreateBulkImportJobRequest.
        :rtype: List[File]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this CreateBulkImportJobRequest.

        The files in the specified Amazon S3 bucket that contain your data.

        :param files: The files of this CreateBulkImportJobRequest.
        :type files: List[File]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")

        self._files = files

    @property
    def error_report_location(self):
        """Gets the error_report_location of this CreateBulkImportJobRequest.


        :return: The error_report_location of this CreateBulkImportJobRequest.
        :rtype: CreateBulkImportJobRequestErrorReportLocation
        """
        return self._error_report_location

    @error_report_location.setter
    def error_report_location(self, error_report_location):
        """Sets the error_report_location of this CreateBulkImportJobRequest.


        :param error_report_location: The error_report_location of this CreateBulkImportJobRequest.
        :type error_report_location: CreateBulkImportJobRequestErrorReportLocation
        """
        if error_report_location is None:
            raise ValueError("Invalid value for `error_report_location`, must not be `None`")

        self._error_report_location = error_report_location

    @property
    def job_configuration(self):
        """Gets the job_configuration of this CreateBulkImportJobRequest.


        :return: The job_configuration of this CreateBulkImportJobRequest.
        :rtype: CreateBulkImportJobRequestJobConfiguration
        """
        return self._job_configuration

    @job_configuration.setter
    def job_configuration(self, job_configuration):
        """Sets the job_configuration of this CreateBulkImportJobRequest.


        :param job_configuration: The job_configuration of this CreateBulkImportJobRequest.
        :type job_configuration: CreateBulkImportJobRequestJobConfiguration
        """
        if job_configuration is None:
            raise ValueError("Invalid value for `job_configuration`, must not be `None`")

        self._job_configuration = job_configuration
