# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DisassociateAssetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hierarchy_id: str=None, child_asset_id: str=None, client_token: str=None):
        """DisassociateAssetsRequest - a model defined in OpenAPI

        :param hierarchy_id: The hierarchy_id of this DisassociateAssetsRequest.
        :param child_asset_id: The child_asset_id of this DisassociateAssetsRequest.
        :param client_token: The client_token of this DisassociateAssetsRequest.
        """
        self.openapi_types = {
            'hierarchy_id': str,
            'child_asset_id': str,
            'client_token': str
        }

        self.attribute_map = {
            'hierarchy_id': 'hierarchyId',
            'child_asset_id': 'childAssetId',
            'client_token': 'clientToken'
        }

        self._hierarchy_id = hierarchy_id
        self._child_asset_id = child_asset_id
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisassociateAssetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisassociateAssets_request of this DisassociateAssetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hierarchy_id(self):
        """Gets the hierarchy_id of this DisassociateAssetsRequest.

        The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html\">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.

        :return: The hierarchy_id of this DisassociateAssetsRequest.
        :rtype: str
        """
        return self._hierarchy_id

    @hierarchy_id.setter
    def hierarchy_id(self, hierarchy_id):
        """Sets the hierarchy_id of this DisassociateAssetsRequest.

        The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html\">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.

        :param hierarchy_id: The hierarchy_id of this DisassociateAssetsRequest.
        :type hierarchy_id: str
        """
        if hierarchy_id is None:
            raise ValueError("Invalid value for `hierarchy_id`, must not be `None`")
        if hierarchy_id is not None and len(hierarchy_id) > 36:
            raise ValueError("Invalid value for `hierarchy_id`, length must be less than or equal to `36`")
        if hierarchy_id is not None and len(hierarchy_id) < 36:
            raise ValueError("Invalid value for `hierarchy_id`, length must be greater than or equal to `36`")
        if hierarchy_id is not None and not re.search(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', hierarchy_id):
            raise ValueError("Invalid value for `hierarchy_id`, must be a follow pattern or equal to `/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")

        self._hierarchy_id = hierarchy_id

    @property
    def child_asset_id(self):
        """Gets the child_asset_id of this DisassociateAssetsRequest.

        The ID of the child asset to disassociate.

        :return: The child_asset_id of this DisassociateAssetsRequest.
        :rtype: str
        """
        return self._child_asset_id

    @child_asset_id.setter
    def child_asset_id(self, child_asset_id):
        """Sets the child_asset_id of this DisassociateAssetsRequest.

        The ID of the child asset to disassociate.

        :param child_asset_id: The child_asset_id of this DisassociateAssetsRequest.
        :type child_asset_id: str
        """
        if child_asset_id is None:
            raise ValueError("Invalid value for `child_asset_id`, must not be `None`")
        if child_asset_id is not None and len(child_asset_id) > 36:
            raise ValueError("Invalid value for `child_asset_id`, length must be less than or equal to `36`")
        if child_asset_id is not None and len(child_asset_id) < 36:
            raise ValueError("Invalid value for `child_asset_id`, length must be greater than or equal to `36`")
        if child_asset_id is not None and not re.search(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', child_asset_id):
            raise ValueError("Invalid value for `child_asset_id`, must be a follow pattern or equal to `/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")

        self._child_asset_id = child_asset_id

    @property
    def client_token(self):
        """Gets the client_token of this DisassociateAssetsRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :return: The client_token of this DisassociateAssetsRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this DisassociateAssetsRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :param client_token: The client_token of this DisassociateAssetsRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 36:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `36`")
        if client_token is not None and not re.search(r'\S{36,64}', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S{36,64}/`")

        self._client_token = client_token
