# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_property_notification import AssetPropertyNotification
from openapi_server.models.property_data_type import PropertyDataType
from openapi_server.models.property_type import PropertyType
from openapi_server import util


class ModelProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, alias: str=None, notification: AssetPropertyNotification=None, data_type: PropertyDataType=None, unit: str=None, type: PropertyType=None):
        """ModelProperty - a model defined in OpenAPI

        :param id: The id of this ModelProperty.
        :param name: The name of this ModelProperty.
        :param alias: The alias of this ModelProperty.
        :param notification: The notification of this ModelProperty.
        :param data_type: The data_type of this ModelProperty.
        :param unit: The unit of this ModelProperty.
        :param type: The type of this ModelProperty.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'alias': str,
            'notification': AssetPropertyNotification,
            'data_type': PropertyDataType,
            'unit': str,
            'type': PropertyType
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'alias': 'alias',
            'notification': 'notification',
            'data_type': 'dataType',
            'unit': 'unit',
            'type': 'type'
        }

        self._id = id
        self._name = name
        self._alias = alias
        self._notification = notification
        self._data_type = data_type
        self._unit = unit
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Property of this ModelProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ModelProperty.


        :return: The id of this ModelProperty.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelProperty.


        :param id: The id of this ModelProperty.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelProperty.


        :return: The name of this ModelProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelProperty.


        :param name: The name of this ModelProperty.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def alias(self):
        """Gets the alias of this ModelProperty.


        :return: The alias of this ModelProperty.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ModelProperty.


        :param alias: The alias of this ModelProperty.
        :type alias: str
        """

        self._alias = alias

    @property
    def notification(self):
        """Gets the notification of this ModelProperty.


        :return: The notification of this ModelProperty.
        :rtype: AssetPropertyNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this ModelProperty.


        :param notification: The notification of this ModelProperty.
        :type notification: AssetPropertyNotification
        """

        self._notification = notification

    @property
    def data_type(self):
        """Gets the data_type of this ModelProperty.


        :return: The data_type of this ModelProperty.
        :rtype: PropertyDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ModelProperty.


        :param data_type: The data_type of this ModelProperty.
        :type data_type: PropertyDataType
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")

        self._data_type = data_type

    @property
    def unit(self):
        """Gets the unit of this ModelProperty.


        :return: The unit of this ModelProperty.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ModelProperty.


        :param unit: The unit of this ModelProperty.
        :type unit: str
        """

        self._unit = unit

    @property
    def type(self):
        """Gets the type of this ModelProperty.


        :return: The type of this ModelProperty.
        :rtype: PropertyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelProperty.


        :param type: The type of this ModelProperty.
        :type type: PropertyType
        """

        self._type = type
