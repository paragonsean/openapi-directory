# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class BatchDisassociateProjectAssetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_ids: List[str]=None, client_token: str=None):
        """BatchDisassociateProjectAssetsRequest - a model defined in OpenAPI

        :param asset_ids: The asset_ids of this BatchDisassociateProjectAssetsRequest.
        :param client_token: The client_token of this BatchDisassociateProjectAssetsRequest.
        """
        self.openapi_types = {
            'asset_ids': List[str],
            'client_token': str
        }

        self.attribute_map = {
            'asset_ids': 'assetIds',
            'client_token': 'clientToken'
        }

        self._asset_ids = asset_ids
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDisassociateProjectAssetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDisassociateProjectAssets_request of this BatchDisassociateProjectAssetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_ids(self):
        """Gets the asset_ids of this BatchDisassociateProjectAssetsRequest.

        The IDs of the assets to be disassociated from the project.

        :return: The asset_ids of this BatchDisassociateProjectAssetsRequest.
        :rtype: List[str]
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """Sets the asset_ids of this BatchDisassociateProjectAssetsRequest.

        The IDs of the assets to be disassociated from the project.

        :param asset_ids: The asset_ids of this BatchDisassociateProjectAssetsRequest.
        :type asset_ids: List[str]
        """
        if asset_ids is None:
            raise ValueError("Invalid value for `asset_ids`, must not be `None`")
        if asset_ids is not None and len(asset_ids) > 100:
            raise ValueError("Invalid value for `asset_ids`, number of items must be less than or equal to `100`")
        if asset_ids is not None and len(asset_ids) < 1:
            raise ValueError("Invalid value for `asset_ids`, number of items must be greater than or equal to `1`")

        self._asset_ids = asset_ids

    @property
    def client_token(self):
        """Gets the client_token of this BatchDisassociateProjectAssetsRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :return: The client_token of this BatchDisassociateProjectAssetsRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this BatchDisassociateProjectAssetsRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :param client_token: The client_token of this BatchDisassociateProjectAssetsRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 36:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `36`")
        if client_token is not None and not re.search(r'\S{36,64}', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S{36,64}/`")

        self._client_token = client_token
