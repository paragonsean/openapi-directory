# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeDashboardResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dashboard_id: str=None, dashboard_arn: str=None, dashboard_name: str=None, project_id: str=None, dashboard_description: str=None, dashboard_definition: str=None, dashboard_creation_date: datetime=None, dashboard_last_update_date: datetime=None):
        """DescribeDashboardResponse - a model defined in OpenAPI

        :param dashboard_id: The dashboard_id of this DescribeDashboardResponse.
        :param dashboard_arn: The dashboard_arn of this DescribeDashboardResponse.
        :param dashboard_name: The dashboard_name of this DescribeDashboardResponse.
        :param project_id: The project_id of this DescribeDashboardResponse.
        :param dashboard_description: The dashboard_description of this DescribeDashboardResponse.
        :param dashboard_definition: The dashboard_definition of this DescribeDashboardResponse.
        :param dashboard_creation_date: The dashboard_creation_date of this DescribeDashboardResponse.
        :param dashboard_last_update_date: The dashboard_last_update_date of this DescribeDashboardResponse.
        """
        self.openapi_types = {
            'dashboard_id': str,
            'dashboard_arn': str,
            'dashboard_name': str,
            'project_id': str,
            'dashboard_description': str,
            'dashboard_definition': str,
            'dashboard_creation_date': datetime,
            'dashboard_last_update_date': datetime
        }

        self.attribute_map = {
            'dashboard_id': 'dashboardId',
            'dashboard_arn': 'dashboardArn',
            'dashboard_name': 'dashboardName',
            'project_id': 'projectId',
            'dashboard_description': 'dashboardDescription',
            'dashboard_definition': 'dashboardDefinition',
            'dashboard_creation_date': 'dashboardCreationDate',
            'dashboard_last_update_date': 'dashboardLastUpdateDate'
        }

        self._dashboard_id = dashboard_id
        self._dashboard_arn = dashboard_arn
        self._dashboard_name = dashboard_name
        self._project_id = project_id
        self._dashboard_description = dashboard_description
        self._dashboard_definition = dashboard_definition
        self._dashboard_creation_date = dashboard_creation_date
        self._dashboard_last_update_date = dashboard_last_update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDashboardResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDashboardResponse of this DescribeDashboardResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this DescribeDashboardResponse.


        :return: The dashboard_id of this DescribeDashboardResponse.
        :rtype: str
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this DescribeDashboardResponse.


        :param dashboard_id: The dashboard_id of this DescribeDashboardResponse.
        :type dashboard_id: str
        """
        if dashboard_id is None:
            raise ValueError("Invalid value for `dashboard_id`, must not be `None`")

        self._dashboard_id = dashboard_id

    @property
    def dashboard_arn(self):
        """Gets the dashboard_arn of this DescribeDashboardResponse.


        :return: The dashboard_arn of this DescribeDashboardResponse.
        :rtype: str
        """
        return self._dashboard_arn

    @dashboard_arn.setter
    def dashboard_arn(self, dashboard_arn):
        """Sets the dashboard_arn of this DescribeDashboardResponse.


        :param dashboard_arn: The dashboard_arn of this DescribeDashboardResponse.
        :type dashboard_arn: str
        """
        if dashboard_arn is None:
            raise ValueError("Invalid value for `dashboard_arn`, must not be `None`")

        self._dashboard_arn = dashboard_arn

    @property
    def dashboard_name(self):
        """Gets the dashboard_name of this DescribeDashboardResponse.


        :return: The dashboard_name of this DescribeDashboardResponse.
        :rtype: str
        """
        return self._dashboard_name

    @dashboard_name.setter
    def dashboard_name(self, dashboard_name):
        """Sets the dashboard_name of this DescribeDashboardResponse.


        :param dashboard_name: The dashboard_name of this DescribeDashboardResponse.
        :type dashboard_name: str
        """
        if dashboard_name is None:
            raise ValueError("Invalid value for `dashboard_name`, must not be `None`")

        self._dashboard_name = dashboard_name

    @property
    def project_id(self):
        """Gets the project_id of this DescribeDashboardResponse.


        :return: The project_id of this DescribeDashboardResponse.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DescribeDashboardResponse.


        :param project_id: The project_id of this DescribeDashboardResponse.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def dashboard_description(self):
        """Gets the dashboard_description of this DescribeDashboardResponse.


        :return: The dashboard_description of this DescribeDashboardResponse.
        :rtype: str
        """
        return self._dashboard_description

    @dashboard_description.setter
    def dashboard_description(self, dashboard_description):
        """Sets the dashboard_description of this DescribeDashboardResponse.


        :param dashboard_description: The dashboard_description of this DescribeDashboardResponse.
        :type dashboard_description: str
        """

        self._dashboard_description = dashboard_description

    @property
    def dashboard_definition(self):
        """Gets the dashboard_definition of this DescribeDashboardResponse.


        :return: The dashboard_definition of this DescribeDashboardResponse.
        :rtype: str
        """
        return self._dashboard_definition

    @dashboard_definition.setter
    def dashboard_definition(self, dashboard_definition):
        """Sets the dashboard_definition of this DescribeDashboardResponse.


        :param dashboard_definition: The dashboard_definition of this DescribeDashboardResponse.
        :type dashboard_definition: str
        """
        if dashboard_definition is None:
            raise ValueError("Invalid value for `dashboard_definition`, must not be `None`")

        self._dashboard_definition = dashboard_definition

    @property
    def dashboard_creation_date(self):
        """Gets the dashboard_creation_date of this DescribeDashboardResponse.


        :return: The dashboard_creation_date of this DescribeDashboardResponse.
        :rtype: datetime
        """
        return self._dashboard_creation_date

    @dashboard_creation_date.setter
    def dashboard_creation_date(self, dashboard_creation_date):
        """Sets the dashboard_creation_date of this DescribeDashboardResponse.


        :param dashboard_creation_date: The dashboard_creation_date of this DescribeDashboardResponse.
        :type dashboard_creation_date: datetime
        """
        if dashboard_creation_date is None:
            raise ValueError("Invalid value for `dashboard_creation_date`, must not be `None`")

        self._dashboard_creation_date = dashboard_creation_date

    @property
    def dashboard_last_update_date(self):
        """Gets the dashboard_last_update_date of this DescribeDashboardResponse.


        :return: The dashboard_last_update_date of this DescribeDashboardResponse.
        :rtype: datetime
        """
        return self._dashboard_last_update_date

    @dashboard_last_update_date.setter
    def dashboard_last_update_date(self, dashboard_last_update_date):
        """Sets the dashboard_last_update_date of this DescribeDashboardResponse.


        :param dashboard_last_update_date: The dashboard_last_update_date of this DescribeDashboardResponse.
        :type dashboard_last_update_date: datetime
        """
        if dashboard_last_update_date is None:
            raise ValueError("Invalid value for `dashboard_last_update_date`, must not be `None`")

        self._dashboard_last_update_date = dashboard_last_update_date
