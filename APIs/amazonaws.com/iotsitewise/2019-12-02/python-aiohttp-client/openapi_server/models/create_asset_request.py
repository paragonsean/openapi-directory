# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateAssetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_name: str=None, asset_model_id: str=None, client_token: str=None, tags: Dict[str, str]=None, asset_description: str=None):
        """CreateAssetRequest - a model defined in OpenAPI

        :param asset_name: The asset_name of this CreateAssetRequest.
        :param asset_model_id: The asset_model_id of this CreateAssetRequest.
        :param client_token: The client_token of this CreateAssetRequest.
        :param tags: The tags of this CreateAssetRequest.
        :param asset_description: The asset_description of this CreateAssetRequest.
        """
        self.openapi_types = {
            'asset_name': str,
            'asset_model_id': str,
            'client_token': str,
            'tags': Dict[str, str],
            'asset_description': str
        }

        self.attribute_map = {
            'asset_name': 'assetName',
            'asset_model_id': 'assetModelId',
            'client_token': 'clientToken',
            'tags': 'tags',
            'asset_description': 'assetDescription'
        }

        self._asset_name = asset_name
        self._asset_model_id = asset_model_id
        self._client_token = client_token
        self._tags = tags
        self._asset_description = asset_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAsset_request of this CreateAssetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_name(self):
        """Gets the asset_name of this CreateAssetRequest.

        A friendly name for the asset.

        :return: The asset_name of this CreateAssetRequest.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this CreateAssetRequest.

        A friendly name for the asset.

        :param asset_name: The asset_name of this CreateAssetRequest.
        :type asset_name: str
        """
        if asset_name is None:
            raise ValueError("Invalid value for `asset_name`, must not be `None`")
        if asset_name is not None and len(asset_name) > 256:
            raise ValueError("Invalid value for `asset_name`, length must be less than or equal to `256`")
        if asset_name is not None and len(asset_name) < 1:
            raise ValueError("Invalid value for `asset_name`, length must be greater than or equal to `1`")
        if asset_name is not None and not re.search(r'[^\u0000-\u001F\u007F]+', asset_name):
            raise ValueError("Invalid value for `asset_name`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._asset_name = asset_name

    @property
    def asset_model_id(self):
        """Gets the asset_model_id of this CreateAssetRequest.

        The ID of the asset model from which to create the asset.

        :return: The asset_model_id of this CreateAssetRequest.
        :rtype: str
        """
        return self._asset_model_id

    @asset_model_id.setter
    def asset_model_id(self, asset_model_id):
        """Sets the asset_model_id of this CreateAssetRequest.

        The ID of the asset model from which to create the asset.

        :param asset_model_id: The asset_model_id of this CreateAssetRequest.
        :type asset_model_id: str
        """
        if asset_model_id is None:
            raise ValueError("Invalid value for `asset_model_id`, must not be `None`")
        if asset_model_id is not None and len(asset_model_id) > 36:
            raise ValueError("Invalid value for `asset_model_id`, length must be less than or equal to `36`")
        if asset_model_id is not None and len(asset_model_id) < 36:
            raise ValueError("Invalid value for `asset_model_id`, length must be greater than or equal to `36`")
        if asset_model_id is not None and not re.search(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', asset_model_id):
            raise ValueError("Invalid value for `asset_model_id`, must be a follow pattern or equal to `/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")

        self._asset_model_id = asset_model_id

    @property
    def client_token(self):
        """Gets the client_token of this CreateAssetRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :return: The client_token of this CreateAssetRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateAssetRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :param client_token: The client_token of this CreateAssetRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 36:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `36`")
        if client_token is not None and not re.search(r'\S{36,64}', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S{36,64}/`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateAssetRequest.

        A list of key-value pairs that contain metadata for the asset. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.

        :return: The tags of this CreateAssetRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAssetRequest.

        A list of key-value pairs that contain metadata for the asset. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.

        :param tags: The tags of this CreateAssetRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def asset_description(self):
        """Gets the asset_description of this CreateAssetRequest.

        A description for the asset.

        :return: The asset_description of this CreateAssetRequest.
        :rtype: str
        """
        return self._asset_description

    @asset_description.setter
    def asset_description(self, asset_description):
        """Sets the asset_description of this CreateAssetRequest.

        A description for the asset.

        :param asset_description: The asset_description of this CreateAssetRequest.
        :type asset_description: str
        """
        if asset_description is not None and len(asset_description) > 2048:
            raise ValueError("Invalid value for `asset_description`, length must be less than or equal to `2048`")
        if asset_description is not None and len(asset_description) < 1:
            raise ValueError("Invalid value for `asset_description`, length must be greater than or equal to `1`")
        if asset_description is not None and not re.search(r'[^\u0000-\u001F\u007F]+', asset_description):
            raise ValueError("Invalid value for `asset_description`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._asset_description = asset_description
