# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_location import ComputeLocation
from openapi_server import util


class MetricProcessingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_location: ComputeLocation=None):
        """MetricProcessingConfig - a model defined in OpenAPI

        :param compute_location: The compute_location of this MetricProcessingConfig.
        """
        self.openapi_types = {
            'compute_location': ComputeLocation
        }

        self.attribute_map = {
            'compute_location': 'computeLocation'
        }

        self._compute_location = compute_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricProcessingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric_processingConfig of this MetricProcessingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_location(self):
        """Gets the compute_location of this MetricProcessingConfig.


        :return: The compute_location of this MetricProcessingConfig.
        :rtype: ComputeLocation
        """
        return self._compute_location

    @compute_location.setter
    def compute_location(self, compute_location):
        """Sets the compute_location of this MetricProcessingConfig.


        :param compute_location: The compute_location of this MetricProcessingConfig.
        :type compute_location: ComputeLocation
        """
        if compute_location is None:
            raise ValueError("Invalid value for `compute_location`, must not be `None`")

        self._compute_location = compute_location
