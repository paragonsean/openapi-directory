# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_resource_arn: str=None, role_arn: str=None):
        """PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage - a model defined in OpenAPI

        :param s3_resource_arn: The s3_resource_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.
        :param role_arn: The role_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.
        """
        self.openapi_types = {
            's3_resource_arn': str,
            'role_arn': str
        }

        self.attribute_map = {
            's3_resource_arn': 's3ResourceArn',
            'role_arn': 'roleArn'
        }

        self._s3_resource_arn = s3_resource_arn
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutStorageConfiguration_request_multiLayerStorage_customerManagedS3Storage of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_resource_arn(self):
        """Gets the s3_resource_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.


        :return: The s3_resource_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.
        :rtype: str
        """
        return self._s3_resource_arn

    @s3_resource_arn.setter
    def s3_resource_arn(self, s3_resource_arn):
        """Sets the s3_resource_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.


        :param s3_resource_arn: The s3_resource_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.
        :type s3_resource_arn: str
        """
        if s3_resource_arn is None:
            raise ValueError("Invalid value for `s3_resource_arn`, must not be `None`")

        self._s3_resource_arn = s3_resource_arn

    @property
    def role_arn(self):
        """Gets the role_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.


        :return: The role_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.


        :param role_arn: The role_arn of this PutStorageConfigurationRequestMultiLayerStorageCustomerManagedS3Storage.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn
