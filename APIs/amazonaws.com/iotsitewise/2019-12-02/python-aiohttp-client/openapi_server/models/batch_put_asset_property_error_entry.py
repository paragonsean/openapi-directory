# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchPutAssetPropertyErrorEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_id: str=None, errors: List=None):
        """BatchPutAssetPropertyErrorEntry - a model defined in OpenAPI

        :param entry_id: The entry_id of this BatchPutAssetPropertyErrorEntry.
        :param errors: The errors of this BatchPutAssetPropertyErrorEntry.
        """
        self.openapi_types = {
            'entry_id': str,
            'errors': List
        }

        self.attribute_map = {
            'entry_id': 'entryId',
            'errors': 'errors'
        }

        self._entry_id = entry_id
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPutAssetPropertyErrorEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPutAssetPropertyErrorEntry of this BatchPutAssetPropertyErrorEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_id(self):
        """Gets the entry_id of this BatchPutAssetPropertyErrorEntry.


        :return: The entry_id of this BatchPutAssetPropertyErrorEntry.
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this BatchPutAssetPropertyErrorEntry.


        :param entry_id: The entry_id of this BatchPutAssetPropertyErrorEntry.
        :type entry_id: str
        """
        if entry_id is None:
            raise ValueError("Invalid value for `entry_id`, must not be `None`")

        self._entry_id = entry_id

    @property
    def errors(self):
        """Gets the errors of this BatchPutAssetPropertyErrorEntry.


        :return: The errors of this BatchPutAssetPropertyErrorEntry.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchPutAssetPropertyErrorEntry.


        :param errors: The errors of this BatchPutAssetPropertyErrorEntry.
        :type errors: List
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors
