# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetModelHierarchyDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, child_asset_model_id: str=None):
        """AssetModelHierarchyDefinition - a model defined in OpenAPI

        :param name: The name of this AssetModelHierarchyDefinition.
        :param child_asset_model_id: The child_asset_model_id of this AssetModelHierarchyDefinition.
        """
        self.openapi_types = {
            'name': str,
            'child_asset_model_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'child_asset_model_id': 'childAssetModelId'
        }

        self._name = name
        self._child_asset_model_id = child_asset_model_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetModelHierarchyDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetModelHierarchyDefinition of this AssetModelHierarchyDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AssetModelHierarchyDefinition.


        :return: The name of this AssetModelHierarchyDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetModelHierarchyDefinition.


        :param name: The name of this AssetModelHierarchyDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def child_asset_model_id(self):
        """Gets the child_asset_model_id of this AssetModelHierarchyDefinition.


        :return: The child_asset_model_id of this AssetModelHierarchyDefinition.
        :rtype: str
        """
        return self._child_asset_model_id

    @child_asset_model_id.setter
    def child_asset_model_id(self, child_asset_model_id):
        """Sets the child_asset_model_id of this AssetModelHierarchyDefinition.


        :param child_asset_model_id: The child_asset_model_id of this AssetModelHierarchyDefinition.
        :type child_asset_model_id: str
        """
        if child_asset_model_id is None:
            raise ValueError("Invalid value for `child_asset_model_id`, must not be `None`")

        self._child_asset_model_id = child_asset_model_id
