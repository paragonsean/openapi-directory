# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transform_processing_config import TransformProcessingConfig
from openapi_server import util


class Transform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression: str=None, variables: List=None, processing_config: TransformProcessingConfig=None):
        """Transform - a model defined in OpenAPI

        :param expression: The expression of this Transform.
        :param variables: The variables of this Transform.
        :param processing_config: The processing_config of this Transform.
        """
        self.openapi_types = {
            'expression': str,
            'variables': List,
            'processing_config': TransformProcessingConfig
        }

        self.attribute_map = {
            'expression': 'expression',
            'variables': 'variables',
            'processing_config': 'processingConfig'
        }

        self._expression = expression
        self._variables = variables
        self._processing_config = processing_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transform of this Transform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression(self):
        """Gets the expression of this Transform.


        :return: The expression of this Transform.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Transform.


        :param expression: The expression of this Transform.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def variables(self):
        """Gets the variables of this Transform.


        :return: The variables of this Transform.
        :rtype: List
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this Transform.


        :param variables: The variables of this Transform.
        :type variables: List
        """
        if variables is None:
            raise ValueError("Invalid value for `variables`, must not be `None`")

        self._variables = variables

    @property
    def processing_config(self):
        """Gets the processing_config of this Transform.


        :return: The processing_config of this Transform.
        :rtype: TransformProcessingConfig
        """
        return self._processing_config

    @processing_config.setter
    def processing_config(self, processing_config):
        """Sets the processing_config of this Transform.


        :param processing_config: The processing_config of this Transform.
        :type processing_config: TransformProcessingConfig
        """

        self._processing_config = processing_config
