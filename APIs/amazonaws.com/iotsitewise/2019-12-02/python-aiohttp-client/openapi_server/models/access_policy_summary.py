# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_policy_summary_identity import AccessPolicySummaryIdentity
from openapi_server.models.access_policy_summary_resource import AccessPolicySummaryResource
from openapi_server.models.permission import Permission
from openapi_server import util


class AccessPolicySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, identity: AccessPolicySummaryIdentity=None, resource: AccessPolicySummaryResource=None, permission: Permission=None, creation_date: datetime=None, last_update_date: datetime=None):
        """AccessPolicySummary - a model defined in OpenAPI

        :param id: The id of this AccessPolicySummary.
        :param identity: The identity of this AccessPolicySummary.
        :param resource: The resource of this AccessPolicySummary.
        :param permission: The permission of this AccessPolicySummary.
        :param creation_date: The creation_date of this AccessPolicySummary.
        :param last_update_date: The last_update_date of this AccessPolicySummary.
        """
        self.openapi_types = {
            'id': str,
            'identity': AccessPolicySummaryIdentity,
            'resource': AccessPolicySummaryResource,
            'permission': Permission,
            'creation_date': datetime,
            'last_update_date': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'identity': 'identity',
            'resource': 'resource',
            'permission': 'permission',
            'creation_date': 'creationDate',
            'last_update_date': 'lastUpdateDate'
        }

        self._id = id
        self._identity = identity
        self._resource = resource
        self._permission = permission
        self._creation_date = creation_date
        self._last_update_date = last_update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessPolicySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessPolicySummary of this AccessPolicySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AccessPolicySummary.


        :return: The id of this AccessPolicySummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccessPolicySummary.


        :param id: The id of this AccessPolicySummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identity(self):
        """Gets the identity of this AccessPolicySummary.


        :return: The identity of this AccessPolicySummary.
        :rtype: AccessPolicySummaryIdentity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this AccessPolicySummary.


        :param identity: The identity of this AccessPolicySummary.
        :type identity: AccessPolicySummaryIdentity
        """
        if identity is None:
            raise ValueError("Invalid value for `identity`, must not be `None`")

        self._identity = identity

    @property
    def resource(self):
        """Gets the resource of this AccessPolicySummary.


        :return: The resource of this AccessPolicySummary.
        :rtype: AccessPolicySummaryResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this AccessPolicySummary.


        :param resource: The resource of this AccessPolicySummary.
        :type resource: AccessPolicySummaryResource
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def permission(self):
        """Gets the permission of this AccessPolicySummary.


        :return: The permission of this AccessPolicySummary.
        :rtype: Permission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AccessPolicySummary.


        :param permission: The permission of this AccessPolicySummary.
        :type permission: Permission
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")

        self._permission = permission

    @property
    def creation_date(self):
        """Gets the creation_date of this AccessPolicySummary.


        :return: The creation_date of this AccessPolicySummary.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AccessPolicySummary.


        :param creation_date: The creation_date of this AccessPolicySummary.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def last_update_date(self):
        """Gets the last_update_date of this AccessPolicySummary.


        :return: The last_update_date of this AccessPolicySummary.
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this AccessPolicySummary.


        :param last_update_date: The last_update_date of this AccessPolicySummary.
        :type last_update_date: datetime
        """

        self._last_update_date = last_update_date
