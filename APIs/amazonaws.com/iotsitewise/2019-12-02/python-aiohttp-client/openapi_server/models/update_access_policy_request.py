# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_access_policy_request_access_policy_identity import CreateAccessPolicyRequestAccessPolicyIdentity
from openapi_server.models.create_access_policy_request_access_policy_resource import CreateAccessPolicyRequestAccessPolicyResource
import re
from openapi_server import util


class UpdateAccessPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_policy_identity: CreateAccessPolicyRequestAccessPolicyIdentity=None, access_policy_resource: CreateAccessPolicyRequestAccessPolicyResource=None, access_policy_permission: str=None, client_token: str=None):
        """UpdateAccessPolicyRequest - a model defined in OpenAPI

        :param access_policy_identity: The access_policy_identity of this UpdateAccessPolicyRequest.
        :param access_policy_resource: The access_policy_resource of this UpdateAccessPolicyRequest.
        :param access_policy_permission: The access_policy_permission of this UpdateAccessPolicyRequest.
        :param client_token: The client_token of this UpdateAccessPolicyRequest.
        """
        self.openapi_types = {
            'access_policy_identity': CreateAccessPolicyRequestAccessPolicyIdentity,
            'access_policy_resource': CreateAccessPolicyRequestAccessPolicyResource,
            'access_policy_permission': str,
            'client_token': str
        }

        self.attribute_map = {
            'access_policy_identity': 'accessPolicyIdentity',
            'access_policy_resource': 'accessPolicyResource',
            'access_policy_permission': 'accessPolicyPermission',
            'client_token': 'clientToken'
        }

        self._access_policy_identity = access_policy_identity
        self._access_policy_resource = access_policy_resource
        self._access_policy_permission = access_policy_permission
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccessPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccessPolicy_request of this UpdateAccessPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_policy_identity(self):
        """Gets the access_policy_identity of this UpdateAccessPolicyRequest.


        :return: The access_policy_identity of this UpdateAccessPolicyRequest.
        :rtype: CreateAccessPolicyRequestAccessPolicyIdentity
        """
        return self._access_policy_identity

    @access_policy_identity.setter
    def access_policy_identity(self, access_policy_identity):
        """Sets the access_policy_identity of this UpdateAccessPolicyRequest.


        :param access_policy_identity: The access_policy_identity of this UpdateAccessPolicyRequest.
        :type access_policy_identity: CreateAccessPolicyRequestAccessPolicyIdentity
        """
        if access_policy_identity is None:
            raise ValueError("Invalid value for `access_policy_identity`, must not be `None`")

        self._access_policy_identity = access_policy_identity

    @property
    def access_policy_resource(self):
        """Gets the access_policy_resource of this UpdateAccessPolicyRequest.


        :return: The access_policy_resource of this UpdateAccessPolicyRequest.
        :rtype: CreateAccessPolicyRequestAccessPolicyResource
        """
        return self._access_policy_resource

    @access_policy_resource.setter
    def access_policy_resource(self, access_policy_resource):
        """Sets the access_policy_resource of this UpdateAccessPolicyRequest.


        :param access_policy_resource: The access_policy_resource of this UpdateAccessPolicyRequest.
        :type access_policy_resource: CreateAccessPolicyRequestAccessPolicyResource
        """
        if access_policy_resource is None:
            raise ValueError("Invalid value for `access_policy_resource`, must not be `None`")

        self._access_policy_resource = access_policy_resource

    @property
    def access_policy_permission(self):
        """Gets the access_policy_permission of this UpdateAccessPolicyRequest.

        The permission level for this access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.

        :return: The access_policy_permission of this UpdateAccessPolicyRequest.
        :rtype: str
        """
        return self._access_policy_permission

    @access_policy_permission.setter
    def access_policy_permission(self, access_policy_permission):
        """Sets the access_policy_permission of this UpdateAccessPolicyRequest.

        The permission level for this access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.

        :param access_policy_permission: The access_policy_permission of this UpdateAccessPolicyRequest.
        :type access_policy_permission: str
        """
        allowed_values = ["ADMINISTRATOR", "VIEWER"]  # noqa: E501
        if access_policy_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `access_policy_permission` ({0}), must be one of {1}"
                .format(access_policy_permission, allowed_values)
            )

        self._access_policy_permission = access_policy_permission

    @property
    def client_token(self):
        """Gets the client_token of this UpdateAccessPolicyRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :return: The client_token of this UpdateAccessPolicyRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateAccessPolicyRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :param client_token: The client_token of this UpdateAccessPolicyRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 36:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `36`")
        if client_token is not None and not re.search(r'\S{36,64}', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S{36,64}/`")

        self._client_token = client_token
