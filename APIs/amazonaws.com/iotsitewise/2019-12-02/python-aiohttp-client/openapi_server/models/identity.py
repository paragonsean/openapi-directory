# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_access_policy_request_access_policy_identity_group import CreateAccessPolicyRequestAccessPolicyIdentityGroup
from openapi_server.models.create_access_policy_request_access_policy_identity_iam_role import CreateAccessPolicyRequestAccessPolicyIdentityIamRole
from openapi_server.models.create_access_policy_request_access_policy_identity_iam_user import CreateAccessPolicyRequestAccessPolicyIdentityIamUser
from openapi_server.models.create_access_policy_request_access_policy_identity_user import CreateAccessPolicyRequestAccessPolicyIdentityUser
from openapi_server import util


class Identity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user: CreateAccessPolicyRequestAccessPolicyIdentityUser=None, group: CreateAccessPolicyRequestAccessPolicyIdentityGroup=None, iam_user: CreateAccessPolicyRequestAccessPolicyIdentityIamUser=None, iam_role: CreateAccessPolicyRequestAccessPolicyIdentityIamRole=None):
        """Identity - a model defined in OpenAPI

        :param user: The user of this Identity.
        :param group: The group of this Identity.
        :param iam_user: The iam_user of this Identity.
        :param iam_role: The iam_role of this Identity.
        """
        self.openapi_types = {
            'user': CreateAccessPolicyRequestAccessPolicyIdentityUser,
            'group': CreateAccessPolicyRequestAccessPolicyIdentityGroup,
            'iam_user': CreateAccessPolicyRequestAccessPolicyIdentityIamUser,
            'iam_role': CreateAccessPolicyRequestAccessPolicyIdentityIamRole
        }

        self.attribute_map = {
            'user': 'user',
            'group': 'group',
            'iam_user': 'iamUser',
            'iam_role': 'iamRole'
        }

        self._user = user
        self._group = group
        self._iam_user = iam_user
        self._iam_role = iam_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Identity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Identity of this Identity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self):
        """Gets the user of this Identity.


        :return: The user of this Identity.
        :rtype: CreateAccessPolicyRequestAccessPolicyIdentityUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Identity.


        :param user: The user of this Identity.
        :type user: CreateAccessPolicyRequestAccessPolicyIdentityUser
        """

        self._user = user

    @property
    def group(self):
        """Gets the group of this Identity.


        :return: The group of this Identity.
        :rtype: CreateAccessPolicyRequestAccessPolicyIdentityGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Identity.


        :param group: The group of this Identity.
        :type group: CreateAccessPolicyRequestAccessPolicyIdentityGroup
        """

        self._group = group

    @property
    def iam_user(self):
        """Gets the iam_user of this Identity.


        :return: The iam_user of this Identity.
        :rtype: CreateAccessPolicyRequestAccessPolicyIdentityIamUser
        """
        return self._iam_user

    @iam_user.setter
    def iam_user(self, iam_user):
        """Sets the iam_user of this Identity.


        :param iam_user: The iam_user of this Identity.
        :type iam_user: CreateAccessPolicyRequestAccessPolicyIdentityIamUser
        """

        self._iam_user = iam_user

    @property
    def iam_role(self):
        """Gets the iam_role of this Identity.


        :return: The iam_role of this Identity.
        :rtype: CreateAccessPolicyRequestAccessPolicyIdentityIamRole
        """
        return self._iam_role

    @iam_role.setter
    def iam_role(self, iam_role):
        """Sets the iam_role of this Identity.


        :param iam_role: The iam_role of this Identity.
        :type iam_role: CreateAccessPolicyRequestAccessPolicyIdentityIamRole
        """

        self._iam_role = iam_role
