# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_get_asset_property_aggregates_entry import BatchGetAssetPropertyAggregatesEntry
import re
from openapi_server import util


class BatchGetAssetPropertyAggregatesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entries: List[BatchGetAssetPropertyAggregatesEntry]=None, next_token: str=None, max_results: int=None):
        """BatchGetAssetPropertyAggregatesRequest - a model defined in OpenAPI

        :param entries: The entries of this BatchGetAssetPropertyAggregatesRequest.
        :param next_token: The next_token of this BatchGetAssetPropertyAggregatesRequest.
        :param max_results: The max_results of this BatchGetAssetPropertyAggregatesRequest.
        """
        self.openapi_types = {
            'entries': List[BatchGetAssetPropertyAggregatesEntry],
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'entries': 'entries',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._entries = entries
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetAssetPropertyAggregatesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetAssetPropertyAggregates_request of this BatchGetAssetPropertyAggregatesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entries(self):
        """Gets the entries of this BatchGetAssetPropertyAggregatesRequest.

        The list of asset property aggregate entries for the batch get request. You can specify up to 16 entries per request.

        :return: The entries of this BatchGetAssetPropertyAggregatesRequest.
        :rtype: List[BatchGetAssetPropertyAggregatesEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this BatchGetAssetPropertyAggregatesRequest.

        The list of asset property aggregate entries for the batch get request. You can specify up to 16 entries per request.

        :param entries: The entries of this BatchGetAssetPropertyAggregatesRequest.
        :type entries: List[BatchGetAssetPropertyAggregatesEntry]
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")

        self._entries = entries

    @property
    def next_token(self):
        """Gets the next_token of this BatchGetAssetPropertyAggregatesRequest.

        The token to be used for the next set of paginated results.

        :return: The next_token of this BatchGetAssetPropertyAggregatesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this BatchGetAssetPropertyAggregatesRequest.

        The token to be used for the next set of paginated results.

        :param next_token: The next_token of this BatchGetAssetPropertyAggregatesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'[A-Za-z0-9+\/=]+', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/[A-Za-z0-9+\/=]+/`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this BatchGetAssetPropertyAggregatesRequest.

        <p>The maximum number of results to return for each paginated request. A result set is returned in the two cases, whichever occurs first.</p> <ul> <li> <p>The size of the result set is equal to 1 MB.</p> </li> <li> <p>The number of data points in the result set is equal to the value of <code>maxResults</code>. The maximum value of <code>maxResults</code> is 4000.</p> </li> </ul>

        :return: The max_results of this BatchGetAssetPropertyAggregatesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this BatchGetAssetPropertyAggregatesRequest.

        <p>The maximum number of results to return for each paginated request. A result set is returned in the two cases, whichever occurs first.</p> <ul> <li> <p>The size of the result set is equal to 1 MB.</p> </li> <li> <p>The number of data points in the result set is equal to the value of <code>maxResults</code>. The maximum value of <code>maxResults</code> is 4000.</p> </li> </ul>

        :param max_results: The max_results of this BatchGetAssetPropertyAggregatesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
