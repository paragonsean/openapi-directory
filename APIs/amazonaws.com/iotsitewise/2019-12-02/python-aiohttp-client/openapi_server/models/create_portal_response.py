# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_portal_response_portal_status import CreatePortalResponsePortalStatus
from openapi_server import util


class CreatePortalResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, portal_id: str=None, portal_arn: str=None, portal_start_url: str=None, portal_status: CreatePortalResponsePortalStatus=None, sso_application_id: str=None):
        """CreatePortalResponse - a model defined in OpenAPI

        :param portal_id: The portal_id of this CreatePortalResponse.
        :param portal_arn: The portal_arn of this CreatePortalResponse.
        :param portal_start_url: The portal_start_url of this CreatePortalResponse.
        :param portal_status: The portal_status of this CreatePortalResponse.
        :param sso_application_id: The sso_application_id of this CreatePortalResponse.
        """
        self.openapi_types = {
            'portal_id': str,
            'portal_arn': str,
            'portal_start_url': str,
            'portal_status': CreatePortalResponsePortalStatus,
            'sso_application_id': str
        }

        self.attribute_map = {
            'portal_id': 'portalId',
            'portal_arn': 'portalArn',
            'portal_start_url': 'portalStartUrl',
            'portal_status': 'portalStatus',
            'sso_application_id': 'ssoApplicationId'
        }

        self._portal_id = portal_id
        self._portal_arn = portal_arn
        self._portal_start_url = portal_start_url
        self._portal_status = portal_status
        self._sso_application_id = sso_application_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePortalResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePortalResponse of this CreatePortalResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def portal_id(self):
        """Gets the portal_id of this CreatePortalResponse.


        :return: The portal_id of this CreatePortalResponse.
        :rtype: str
        """
        return self._portal_id

    @portal_id.setter
    def portal_id(self, portal_id):
        """Sets the portal_id of this CreatePortalResponse.


        :param portal_id: The portal_id of this CreatePortalResponse.
        :type portal_id: str
        """
        if portal_id is None:
            raise ValueError("Invalid value for `portal_id`, must not be `None`")

        self._portal_id = portal_id

    @property
    def portal_arn(self):
        """Gets the portal_arn of this CreatePortalResponse.


        :return: The portal_arn of this CreatePortalResponse.
        :rtype: str
        """
        return self._portal_arn

    @portal_arn.setter
    def portal_arn(self, portal_arn):
        """Sets the portal_arn of this CreatePortalResponse.


        :param portal_arn: The portal_arn of this CreatePortalResponse.
        :type portal_arn: str
        """
        if portal_arn is None:
            raise ValueError("Invalid value for `portal_arn`, must not be `None`")

        self._portal_arn = portal_arn

    @property
    def portal_start_url(self):
        """Gets the portal_start_url of this CreatePortalResponse.


        :return: The portal_start_url of this CreatePortalResponse.
        :rtype: str
        """
        return self._portal_start_url

    @portal_start_url.setter
    def portal_start_url(self, portal_start_url):
        """Sets the portal_start_url of this CreatePortalResponse.


        :param portal_start_url: The portal_start_url of this CreatePortalResponse.
        :type portal_start_url: str
        """
        if portal_start_url is None:
            raise ValueError("Invalid value for `portal_start_url`, must not be `None`")

        self._portal_start_url = portal_start_url

    @property
    def portal_status(self):
        """Gets the portal_status of this CreatePortalResponse.


        :return: The portal_status of this CreatePortalResponse.
        :rtype: CreatePortalResponsePortalStatus
        """
        return self._portal_status

    @portal_status.setter
    def portal_status(self, portal_status):
        """Sets the portal_status of this CreatePortalResponse.


        :param portal_status: The portal_status of this CreatePortalResponse.
        :type portal_status: CreatePortalResponsePortalStatus
        """
        if portal_status is None:
            raise ValueError("Invalid value for `portal_status`, must not be `None`")

        self._portal_status = portal_status

    @property
    def sso_application_id(self):
        """Gets the sso_application_id of this CreatePortalResponse.


        :return: The sso_application_id of this CreatePortalResponse.
        :rtype: str
        """
        return self._sso_application_id

    @sso_application_id.setter
    def sso_application_id(self, sso_application_id):
        """Sets the sso_application_id of this CreatePortalResponse.


        :param sso_application_id: The sso_application_id of this CreatePortalResponse.
        :type sso_application_id: str
        """
        if sso_application_id is None:
            raise ValueError("Invalid value for `sso_application_id`, must not be `None`")

        self._sso_application_id = sso_application_id
