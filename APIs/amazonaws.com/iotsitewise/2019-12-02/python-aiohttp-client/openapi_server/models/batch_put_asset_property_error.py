# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_put_asset_property_value_error_code import BatchPutAssetPropertyValueErrorCode
from openapi_server import util


class BatchPutAssetPropertyError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: BatchPutAssetPropertyValueErrorCode=None, error_message: str=None, timestamps: List=None):
        """BatchPutAssetPropertyError - a model defined in OpenAPI

        :param error_code: The error_code of this BatchPutAssetPropertyError.
        :param error_message: The error_message of this BatchPutAssetPropertyError.
        :param timestamps: The timestamps of this BatchPutAssetPropertyError.
        """
        self.openapi_types = {
            'error_code': BatchPutAssetPropertyValueErrorCode,
            'error_message': str,
            'timestamps': List
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'timestamps': 'timestamps'
        }

        self._error_code = error_code
        self._error_message = error_message
        self._timestamps = timestamps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPutAssetPropertyError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPutAssetPropertyError of this BatchPutAssetPropertyError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this BatchPutAssetPropertyError.


        :return: The error_code of this BatchPutAssetPropertyError.
        :rtype: BatchPutAssetPropertyValueErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this BatchPutAssetPropertyError.


        :param error_code: The error_code of this BatchPutAssetPropertyError.
        :type error_code: BatchPutAssetPropertyValueErrorCode
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this BatchPutAssetPropertyError.


        :return: The error_message of this BatchPutAssetPropertyError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BatchPutAssetPropertyError.


        :param error_message: The error_message of this BatchPutAssetPropertyError.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message

    @property
    def timestamps(self):
        """Gets the timestamps of this BatchPutAssetPropertyError.


        :return: The timestamps of this BatchPutAssetPropertyError.
        :rtype: List
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this BatchPutAssetPropertyError.


        :param timestamps: The timestamps of this BatchPutAssetPropertyError.
        :type timestamps: List
        """
        if timestamps is None:
            raise ValueError("Invalid value for `timestamps`, must not be `None`")

        self._timestamps = timestamps
