# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_property import ModelProperty
from openapi_server import util


class DescribeAssetPropertyResponseCompositeModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, asset_property: ModelProperty=None, id: str=None):
        """DescribeAssetPropertyResponseCompositeModel - a model defined in OpenAPI

        :param name: The name of this DescribeAssetPropertyResponseCompositeModel.
        :param type: The type of this DescribeAssetPropertyResponseCompositeModel.
        :param asset_property: The asset_property of this DescribeAssetPropertyResponseCompositeModel.
        :param id: The id of this DescribeAssetPropertyResponseCompositeModel.
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'asset_property': ModelProperty,
            'id': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'asset_property': 'assetProperty',
            'id': 'id'
        }

        self._name = name
        self._type = type
        self._asset_property = asset_property
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAssetPropertyResponseCompositeModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAssetPropertyResponse_compositeModel of this DescribeAssetPropertyResponseCompositeModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DescribeAssetPropertyResponseCompositeModel.


        :return: The name of this DescribeAssetPropertyResponseCompositeModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescribeAssetPropertyResponseCompositeModel.


        :param name: The name of this DescribeAssetPropertyResponseCompositeModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this DescribeAssetPropertyResponseCompositeModel.


        :return: The type of this DescribeAssetPropertyResponseCompositeModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DescribeAssetPropertyResponseCompositeModel.


        :param type: The type of this DescribeAssetPropertyResponseCompositeModel.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def asset_property(self):
        """Gets the asset_property of this DescribeAssetPropertyResponseCompositeModel.


        :return: The asset_property of this DescribeAssetPropertyResponseCompositeModel.
        :rtype: ModelProperty
        """
        return self._asset_property

    @asset_property.setter
    def asset_property(self, asset_property):
        """Sets the asset_property of this DescribeAssetPropertyResponseCompositeModel.


        :param asset_property: The asset_property of this DescribeAssetPropertyResponseCompositeModel.
        :type asset_property: ModelProperty
        """
        if asset_property is None:
            raise ValueError("Invalid value for `asset_property`, must not be `None`")

        self._asset_property = asset_property

    @property
    def id(self):
        """Gets the id of this DescribeAssetPropertyResponseCompositeModel.


        :return: The id of this DescribeAssetPropertyResponseCompositeModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DescribeAssetPropertyResponseCompositeModel.


        :param id: The id of this DescribeAssetPropertyResponseCompositeModel.
        :type id: str
        """

        self._id = id
