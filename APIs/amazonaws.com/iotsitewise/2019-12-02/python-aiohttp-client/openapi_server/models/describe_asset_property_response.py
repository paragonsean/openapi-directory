# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_asset_property_response_asset_property import DescribeAssetPropertyResponseAssetProperty
from openapi_server.models.describe_asset_property_response_composite_model import DescribeAssetPropertyResponseCompositeModel
from openapi_server import util


class DescribeAssetPropertyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_id: str=None, asset_name: str=None, asset_model_id: str=None, asset_property: DescribeAssetPropertyResponseAssetProperty=None, composite_model: DescribeAssetPropertyResponseCompositeModel=None):
        """DescribeAssetPropertyResponse - a model defined in OpenAPI

        :param asset_id: The asset_id of this DescribeAssetPropertyResponse.
        :param asset_name: The asset_name of this DescribeAssetPropertyResponse.
        :param asset_model_id: The asset_model_id of this DescribeAssetPropertyResponse.
        :param asset_property: The asset_property of this DescribeAssetPropertyResponse.
        :param composite_model: The composite_model of this DescribeAssetPropertyResponse.
        """
        self.openapi_types = {
            'asset_id': str,
            'asset_name': str,
            'asset_model_id': str,
            'asset_property': DescribeAssetPropertyResponseAssetProperty,
            'composite_model': DescribeAssetPropertyResponseCompositeModel
        }

        self.attribute_map = {
            'asset_id': 'assetId',
            'asset_name': 'assetName',
            'asset_model_id': 'assetModelId',
            'asset_property': 'assetProperty',
            'composite_model': 'compositeModel'
        }

        self._asset_id = asset_id
        self._asset_name = asset_name
        self._asset_model_id = asset_model_id
        self._asset_property = asset_property
        self._composite_model = composite_model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAssetPropertyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAssetPropertyResponse of this DescribeAssetPropertyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self):
        """Gets the asset_id of this DescribeAssetPropertyResponse.


        :return: The asset_id of this DescribeAssetPropertyResponse.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this DescribeAssetPropertyResponse.


        :param asset_id: The asset_id of this DescribeAssetPropertyResponse.
        :type asset_id: str
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")

        self._asset_id = asset_id

    @property
    def asset_name(self):
        """Gets the asset_name of this DescribeAssetPropertyResponse.


        :return: The asset_name of this DescribeAssetPropertyResponse.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this DescribeAssetPropertyResponse.


        :param asset_name: The asset_name of this DescribeAssetPropertyResponse.
        :type asset_name: str
        """
        if asset_name is None:
            raise ValueError("Invalid value for `asset_name`, must not be `None`")

        self._asset_name = asset_name

    @property
    def asset_model_id(self):
        """Gets the asset_model_id of this DescribeAssetPropertyResponse.


        :return: The asset_model_id of this DescribeAssetPropertyResponse.
        :rtype: str
        """
        return self._asset_model_id

    @asset_model_id.setter
    def asset_model_id(self, asset_model_id):
        """Sets the asset_model_id of this DescribeAssetPropertyResponse.


        :param asset_model_id: The asset_model_id of this DescribeAssetPropertyResponse.
        :type asset_model_id: str
        """
        if asset_model_id is None:
            raise ValueError("Invalid value for `asset_model_id`, must not be `None`")

        self._asset_model_id = asset_model_id

    @property
    def asset_property(self):
        """Gets the asset_property of this DescribeAssetPropertyResponse.


        :return: The asset_property of this DescribeAssetPropertyResponse.
        :rtype: DescribeAssetPropertyResponseAssetProperty
        """
        return self._asset_property

    @asset_property.setter
    def asset_property(self, asset_property):
        """Sets the asset_property of this DescribeAssetPropertyResponse.


        :param asset_property: The asset_property of this DescribeAssetPropertyResponse.
        :type asset_property: DescribeAssetPropertyResponseAssetProperty
        """

        self._asset_property = asset_property

    @property
    def composite_model(self):
        """Gets the composite_model of this DescribeAssetPropertyResponse.


        :return: The composite_model of this DescribeAssetPropertyResponse.
        :rtype: DescribeAssetPropertyResponseCompositeModel
        """
        return self._composite_model

    @composite_model.setter
    def composite_model(self, composite_model):
        """Sets the composite_model of this DescribeAssetPropertyResponse.


        :param composite_model: The composite_model of this DescribeAssetPropertyResponse.
        :type composite_model: DescribeAssetPropertyResponseCompositeModel
        """

        self._composite_model = composite_model
