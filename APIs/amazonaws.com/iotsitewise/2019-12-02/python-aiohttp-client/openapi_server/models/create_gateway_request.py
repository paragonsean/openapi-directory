# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_gateway_request_gateway_platform import CreateGatewayRequestGatewayPlatform
import re
from openapi_server import util


class CreateGatewayRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_name: str=None, gateway_platform: CreateGatewayRequestGatewayPlatform=None, tags: Dict[str, str]=None):
        """CreateGatewayRequest - a model defined in OpenAPI

        :param gateway_name: The gateway_name of this CreateGatewayRequest.
        :param gateway_platform: The gateway_platform of this CreateGatewayRequest.
        :param tags: The tags of this CreateGatewayRequest.
        """
        self.openapi_types = {
            'gateway_name': str,
            'gateway_platform': CreateGatewayRequestGatewayPlatform,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'gateway_name': 'gatewayName',
            'gateway_platform': 'gatewayPlatform',
            'tags': 'tags'
        }

        self._gateway_name = gateway_name
        self._gateway_platform = gateway_platform
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGatewayRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGateway_request of this CreateGatewayRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_name(self):
        """Gets the gateway_name of this CreateGatewayRequest.

        A unique, friendly name for the gateway.

        :return: The gateway_name of this CreateGatewayRequest.
        :rtype: str
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name):
        """Sets the gateway_name of this CreateGatewayRequest.

        A unique, friendly name for the gateway.

        :param gateway_name: The gateway_name of this CreateGatewayRequest.
        :type gateway_name: str
        """
        if gateway_name is None:
            raise ValueError("Invalid value for `gateway_name`, must not be `None`")
        if gateway_name is not None and len(gateway_name) > 256:
            raise ValueError("Invalid value for `gateway_name`, length must be less than or equal to `256`")
        if gateway_name is not None and len(gateway_name) < 1:
            raise ValueError("Invalid value for `gateway_name`, length must be greater than or equal to `1`")
        if gateway_name is not None and not re.search(r'[^\u0000-\u001F\u007F]+', gateway_name):
            raise ValueError("Invalid value for `gateway_name`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._gateway_name = gateway_name

    @property
    def gateway_platform(self):
        """Gets the gateway_platform of this CreateGatewayRequest.


        :return: The gateway_platform of this CreateGatewayRequest.
        :rtype: CreateGatewayRequestGatewayPlatform
        """
        return self._gateway_platform

    @gateway_platform.setter
    def gateway_platform(self, gateway_platform):
        """Sets the gateway_platform of this CreateGatewayRequest.


        :param gateway_platform: The gateway_platform of this CreateGatewayRequest.
        :type gateway_platform: CreateGatewayRequestGatewayPlatform
        """
        if gateway_platform is None:
            raise ValueError("Invalid value for `gateway_platform`, must not be `None`")

        self._gateway_platform = gateway_platform

    @property
    def tags(self):
        """Gets the tags of this CreateGatewayRequest.

        A list of key-value pairs that contain metadata for the gateway. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.

        :return: The tags of this CreateGatewayRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateGatewayRequest.

        A list of key-value pairs that contain metadata for the gateway. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.

        :param tags: The tags of this CreateGatewayRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
