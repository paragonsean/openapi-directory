# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateDashboardRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_id: str=None, dashboard_name: str=None, dashboard_description: str=None, dashboard_definition: str=None, client_token: str=None, tags: Dict[str, str]=None):
        """CreateDashboardRequest - a model defined in OpenAPI

        :param project_id: The project_id of this CreateDashboardRequest.
        :param dashboard_name: The dashboard_name of this CreateDashboardRequest.
        :param dashboard_description: The dashboard_description of this CreateDashboardRequest.
        :param dashboard_definition: The dashboard_definition of this CreateDashboardRequest.
        :param client_token: The client_token of this CreateDashboardRequest.
        :param tags: The tags of this CreateDashboardRequest.
        """
        self.openapi_types = {
            'project_id': str,
            'dashboard_name': str,
            'dashboard_description': str,
            'dashboard_definition': str,
            'client_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'project_id': 'projectId',
            'dashboard_name': 'dashboardName',
            'dashboard_description': 'dashboardDescription',
            'dashboard_definition': 'dashboardDefinition',
            'client_token': 'clientToken',
            'tags': 'tags'
        }

        self._project_id = project_id
        self._dashboard_name = dashboard_name
        self._dashboard_description = dashboard_description
        self._dashboard_definition = dashboard_definition
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDashboardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDashboard_request of this CreateDashboardRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self):
        """Gets the project_id of this CreateDashboardRequest.

        The ID of the project in which to create the dashboard.

        :return: The project_id of this CreateDashboardRequest.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CreateDashboardRequest.

        The ID of the project in which to create the dashboard.

        :param project_id: The project_id of this CreateDashboardRequest.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")
        if project_id is not None and len(project_id) > 36:
            raise ValueError("Invalid value for `project_id`, length must be less than or equal to `36`")
        if project_id is not None and len(project_id) < 36:
            raise ValueError("Invalid value for `project_id`, length must be greater than or equal to `36`")
        if project_id is not None and not re.search(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', project_id):
            raise ValueError("Invalid value for `project_id`, must be a follow pattern or equal to `/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")

        self._project_id = project_id

    @property
    def dashboard_name(self):
        """Gets the dashboard_name of this CreateDashboardRequest.

        A friendly name for the dashboard.

        :return: The dashboard_name of this CreateDashboardRequest.
        :rtype: str
        """
        return self._dashboard_name

    @dashboard_name.setter
    def dashboard_name(self, dashboard_name):
        """Sets the dashboard_name of this CreateDashboardRequest.

        A friendly name for the dashboard.

        :param dashboard_name: The dashboard_name of this CreateDashboardRequest.
        :type dashboard_name: str
        """
        if dashboard_name is None:
            raise ValueError("Invalid value for `dashboard_name`, must not be `None`")
        if dashboard_name is not None and len(dashboard_name) > 256:
            raise ValueError("Invalid value for `dashboard_name`, length must be less than or equal to `256`")
        if dashboard_name is not None and len(dashboard_name) < 1:
            raise ValueError("Invalid value for `dashboard_name`, length must be greater than or equal to `1`")
        if dashboard_name is not None and not re.search(r'[^\u0000-\u001F\u007F]+', dashboard_name):
            raise ValueError("Invalid value for `dashboard_name`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._dashboard_name = dashboard_name

    @property
    def dashboard_description(self):
        """Gets the dashboard_description of this CreateDashboardRequest.

        A description for the dashboard.

        :return: The dashboard_description of this CreateDashboardRequest.
        :rtype: str
        """
        return self._dashboard_description

    @dashboard_description.setter
    def dashboard_description(self, dashboard_description):
        """Sets the dashboard_description of this CreateDashboardRequest.

        A description for the dashboard.

        :param dashboard_description: The dashboard_description of this CreateDashboardRequest.
        :type dashboard_description: str
        """
        if dashboard_description is not None and len(dashboard_description) > 2048:
            raise ValueError("Invalid value for `dashboard_description`, length must be less than or equal to `2048`")
        if dashboard_description is not None and len(dashboard_description) < 1:
            raise ValueError("Invalid value for `dashboard_description`, length must be greater than or equal to `1`")
        if dashboard_description is not None and not re.search(r'[^\u0000-\u001F\u007F]+', dashboard_description):
            raise ValueError("Invalid value for `dashboard_description`, must be a follow pattern or equal to `/[^\u0000-\u001F\u007F]+/`")

        self._dashboard_description = dashboard_description

    @property
    def dashboard_definition(self):
        """Gets the dashboard_definition of this CreateDashboardRequest.

        The dashboard definition specified in a JSON literal. For detailed information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html\">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.

        :return: The dashboard_definition of this CreateDashboardRequest.
        :rtype: str
        """
        return self._dashboard_definition

    @dashboard_definition.setter
    def dashboard_definition(self, dashboard_definition):
        """Sets the dashboard_definition of this CreateDashboardRequest.

        The dashboard definition specified in a JSON literal. For detailed information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html\">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.

        :param dashboard_definition: The dashboard_definition of this CreateDashboardRequest.
        :type dashboard_definition: str
        """
        if dashboard_definition is None:
            raise ValueError("Invalid value for `dashboard_definition`, must not be `None`")
        if dashboard_definition is not None and len(dashboard_definition) > 204800:
            raise ValueError("Invalid value for `dashboard_definition`, length must be less than or equal to `204800`")
        if dashboard_definition is not None and len(dashboard_definition) < 0:
            raise ValueError("Invalid value for `dashboard_definition`, length must be greater than or equal to `0`")
        if dashboard_definition is not None and not re.search(r'.+', dashboard_definition):
            raise ValueError("Invalid value for `dashboard_definition`, must be a follow pattern or equal to `/.+/`")

        self._dashboard_definition = dashboard_definition

    @property
    def client_token(self):
        """Gets the client_token of this CreateDashboardRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :return: The client_token of this CreateDashboardRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateDashboardRequest.

        A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

        :param client_token: The client_token of this CreateDashboardRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 36:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `36`")
        if client_token is not None and not re.search(r'\S{36,64}', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/\S{36,64}/`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateDashboardRequest.

        A list of key-value pairs that contain metadata for the dashboard. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.

        :return: The tags of this CreateDashboardRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDashboardRequest.

        A list of key-value pairs that contain metadata for the dashboard. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.

        :param tags: The tags of this CreateDashboardRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
