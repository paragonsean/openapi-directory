# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_logging_options_response_logging_options import DescribeLoggingOptionsResponseLoggingOptions
from openapi_server import util


class DescribeLoggingOptionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logging_options: DescribeLoggingOptionsResponseLoggingOptions=None):
        """DescribeLoggingOptionsResponse - a model defined in OpenAPI

        :param logging_options: The logging_options of this DescribeLoggingOptionsResponse.
        """
        self.openapi_types = {
            'logging_options': DescribeLoggingOptionsResponseLoggingOptions
        }

        self.attribute_map = {
            'logging_options': 'loggingOptions'
        }

        self._logging_options = logging_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeLoggingOptionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeLoggingOptionsResponse of this DescribeLoggingOptionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logging_options(self):
        """Gets the logging_options of this DescribeLoggingOptionsResponse.


        :return: The logging_options of this DescribeLoggingOptionsResponse.
        :rtype: DescribeLoggingOptionsResponseLoggingOptions
        """
        return self._logging_options

    @logging_options.setter
    def logging_options(self, logging_options):
        """Sets the logging_options of this DescribeLoggingOptionsResponse.


        :param logging_options: The logging_options of this DescribeLoggingOptionsResponse.
        :type logging_options: DescribeLoggingOptionsResponseLoggingOptions
        """
        if logging_options is None:
            raise ValueError("Invalid value for `logging_options`, must not be `None`")

        self._logging_options = logging_options
