# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_model_state import AssetModelState
from openapi_server.models.asset_model_status_error import AssetModelStatusError
from openapi_server import util


class DeleteAssetModelResponseAssetModelStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: AssetModelState=None, error: AssetModelStatusError=None):
        """DeleteAssetModelResponseAssetModelStatus - a model defined in OpenAPI

        :param state: The state of this DeleteAssetModelResponseAssetModelStatus.
        :param error: The error of this DeleteAssetModelResponseAssetModelStatus.
        """
        self.openapi_types = {
            'state': AssetModelState,
            'error': AssetModelStatusError
        }

        self.attribute_map = {
            'state': 'state',
            'error': 'error'
        }

        self._state = state
        self._error = error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteAssetModelResponseAssetModelStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteAssetModelResponse_assetModelStatus of this DeleteAssetModelResponseAssetModelStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this DeleteAssetModelResponseAssetModelStatus.


        :return: The state of this DeleteAssetModelResponseAssetModelStatus.
        :rtype: AssetModelState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeleteAssetModelResponseAssetModelStatus.


        :param state: The state of this DeleteAssetModelResponseAssetModelStatus.
        :type state: AssetModelState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def error(self):
        """Gets the error of this DeleteAssetModelResponseAssetModelStatus.


        :return: The error of this DeleteAssetModelResponseAssetModelStatus.
        :rtype: AssetModelStatusError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DeleteAssetModelResponseAssetModelStatus.


        :param error: The error of this DeleteAssetModelResponseAssetModelStatus.
        :type error: AssetModelStatusError
        """

        self._error = error
