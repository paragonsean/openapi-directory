# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregated_value_value import AggregatedValueValue
from openapi_server.models.quality import Quality
from openapi_server import util


class AggregatedValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: datetime=None, quality: Quality=None, value: AggregatedValueValue=None):
        """AggregatedValue - a model defined in OpenAPI

        :param timestamp: The timestamp of this AggregatedValue.
        :param quality: The quality of this AggregatedValue.
        :param value: The value of this AggregatedValue.
        """
        self.openapi_types = {
            'timestamp': datetime,
            'quality': Quality,
            'value': AggregatedValueValue
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'quality': 'quality',
            'value': 'value'
        }

        self._timestamp = timestamp
        self._quality = quality
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregatedValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregatedValue of this AggregatedValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this AggregatedValue.


        :return: The timestamp of this AggregatedValue.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AggregatedValue.


        :param timestamp: The timestamp of this AggregatedValue.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def quality(self):
        """Gets the quality of this AggregatedValue.


        :return: The quality of this AggregatedValue.
        :rtype: Quality
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this AggregatedValue.


        :param quality: The quality of this AggregatedValue.
        :type quality: Quality
        """

        self._quality = quality

    @property
    def value(self):
        """Gets the value of this AggregatedValue.


        :return: The value of this AggregatedValue.
        :rtype: AggregatedValueValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AggregatedValue.


        :param value: The value of this AggregatedValue.
        :type value: AggregatedValueValue
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
