# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_type import EncryptionType
from openapi_server.models.put_default_encryption_configuration_response_configuration_status import PutDefaultEncryptionConfigurationResponseConfigurationStatus
from openapi_server import util


class PutDefaultEncryptionConfigurationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_type: EncryptionType=None, kms_key_arn: str=None, configuration_status: PutDefaultEncryptionConfigurationResponseConfigurationStatus=None):
        """PutDefaultEncryptionConfigurationResponse - a model defined in OpenAPI

        :param encryption_type: The encryption_type of this PutDefaultEncryptionConfigurationResponse.
        :param kms_key_arn: The kms_key_arn of this PutDefaultEncryptionConfigurationResponse.
        :param configuration_status: The configuration_status of this PutDefaultEncryptionConfigurationResponse.
        """
        self.openapi_types = {
            'encryption_type': EncryptionType,
            'kms_key_arn': str,
            'configuration_status': PutDefaultEncryptionConfigurationResponseConfigurationStatus
        }

        self.attribute_map = {
            'encryption_type': 'encryptionType',
            'kms_key_arn': 'kmsKeyArn',
            'configuration_status': 'configurationStatus'
        }

        self._encryption_type = encryption_type
        self._kms_key_arn = kms_key_arn
        self._configuration_status = configuration_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutDefaultEncryptionConfigurationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutDefaultEncryptionConfigurationResponse of this PutDefaultEncryptionConfigurationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_type(self):
        """Gets the encryption_type of this PutDefaultEncryptionConfigurationResponse.


        :return: The encryption_type of this PutDefaultEncryptionConfigurationResponse.
        :rtype: EncryptionType
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """Sets the encryption_type of this PutDefaultEncryptionConfigurationResponse.


        :param encryption_type: The encryption_type of this PutDefaultEncryptionConfigurationResponse.
        :type encryption_type: EncryptionType
        """
        if encryption_type is None:
            raise ValueError("Invalid value for `encryption_type`, must not be `None`")

        self._encryption_type = encryption_type

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this PutDefaultEncryptionConfigurationResponse.


        :return: The kms_key_arn of this PutDefaultEncryptionConfigurationResponse.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this PutDefaultEncryptionConfigurationResponse.


        :param kms_key_arn: The kms_key_arn of this PutDefaultEncryptionConfigurationResponse.
        :type kms_key_arn: str
        """

        self._kms_key_arn = kms_key_arn

    @property
    def configuration_status(self):
        """Gets the configuration_status of this PutDefaultEncryptionConfigurationResponse.


        :return: The configuration_status of this PutDefaultEncryptionConfigurationResponse.
        :rtype: PutDefaultEncryptionConfigurationResponseConfigurationStatus
        """
        return self._configuration_status

    @configuration_status.setter
    def configuration_status(self, configuration_status):
        """Sets the configuration_status of this PutDefaultEncryptionConfigurationResponse.


        :param configuration_status: The configuration_status of this PutDefaultEncryptionConfigurationResponse.
        :type configuration_status: PutDefaultEncryptionConfigurationResponseConfigurationStatus
        """
        if configuration_status is None:
            raise ValueError("Invalid value for `configuration_status`, must not be `None`")

        self._configuration_status = configuration_status
