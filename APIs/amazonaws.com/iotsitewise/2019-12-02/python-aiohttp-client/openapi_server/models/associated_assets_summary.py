# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_summary_status import AssetSummaryStatus
from openapi_server import util


class AssociatedAssetsSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, name: str=None, asset_model_id: str=None, creation_date: datetime=None, last_update_date: datetime=None, status: AssetSummaryStatus=None, hierarchies: List=None, description: str=None):
        """AssociatedAssetsSummary - a model defined in OpenAPI

        :param id: The id of this AssociatedAssetsSummary.
        :param arn: The arn of this AssociatedAssetsSummary.
        :param name: The name of this AssociatedAssetsSummary.
        :param asset_model_id: The asset_model_id of this AssociatedAssetsSummary.
        :param creation_date: The creation_date of this AssociatedAssetsSummary.
        :param last_update_date: The last_update_date of this AssociatedAssetsSummary.
        :param status: The status of this AssociatedAssetsSummary.
        :param hierarchies: The hierarchies of this AssociatedAssetsSummary.
        :param description: The description of this AssociatedAssetsSummary.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'name': str,
            'asset_model_id': str,
            'creation_date': datetime,
            'last_update_date': datetime,
            'status': AssetSummaryStatus,
            'hierarchies': List,
            'description': str
        }

        self.attribute_map = {
            'id': 'id',
            'arn': 'arn',
            'name': 'name',
            'asset_model_id': 'assetModelId',
            'creation_date': 'creationDate',
            'last_update_date': 'lastUpdateDate',
            'status': 'status',
            'hierarchies': 'hierarchies',
            'description': 'description'
        }

        self._id = id
        self._arn = arn
        self._name = name
        self._asset_model_id = asset_model_id
        self._creation_date = creation_date
        self._last_update_date = last_update_date
        self._status = status
        self._hierarchies = hierarchies
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociatedAssetsSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociatedAssetsSummary of this AssociatedAssetsSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AssociatedAssetsSummary.


        :return: The id of this AssociatedAssetsSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssociatedAssetsSummary.


        :param id: The id of this AssociatedAssetsSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this AssociatedAssetsSummary.


        :return: The arn of this AssociatedAssetsSummary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AssociatedAssetsSummary.


        :param arn: The arn of this AssociatedAssetsSummary.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this AssociatedAssetsSummary.


        :return: The name of this AssociatedAssetsSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssociatedAssetsSummary.


        :param name: The name of this AssociatedAssetsSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def asset_model_id(self):
        """Gets the asset_model_id of this AssociatedAssetsSummary.


        :return: The asset_model_id of this AssociatedAssetsSummary.
        :rtype: str
        """
        return self._asset_model_id

    @asset_model_id.setter
    def asset_model_id(self, asset_model_id):
        """Sets the asset_model_id of this AssociatedAssetsSummary.


        :param asset_model_id: The asset_model_id of this AssociatedAssetsSummary.
        :type asset_model_id: str
        """
        if asset_model_id is None:
            raise ValueError("Invalid value for `asset_model_id`, must not be `None`")

        self._asset_model_id = asset_model_id

    @property
    def creation_date(self):
        """Gets the creation_date of this AssociatedAssetsSummary.


        :return: The creation_date of this AssociatedAssetsSummary.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AssociatedAssetsSummary.


        :param creation_date: The creation_date of this AssociatedAssetsSummary.
        :type creation_date: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def last_update_date(self):
        """Gets the last_update_date of this AssociatedAssetsSummary.


        :return: The last_update_date of this AssociatedAssetsSummary.
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this AssociatedAssetsSummary.


        :param last_update_date: The last_update_date of this AssociatedAssetsSummary.
        :type last_update_date: datetime
        """
        if last_update_date is None:
            raise ValueError("Invalid value for `last_update_date`, must not be `None`")

        self._last_update_date = last_update_date

    @property
    def status(self):
        """Gets the status of this AssociatedAssetsSummary.


        :return: The status of this AssociatedAssetsSummary.
        :rtype: AssetSummaryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssociatedAssetsSummary.


        :param status: The status of this AssociatedAssetsSummary.
        :type status: AssetSummaryStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def hierarchies(self):
        """Gets the hierarchies of this AssociatedAssetsSummary.


        :return: The hierarchies of this AssociatedAssetsSummary.
        :rtype: List
        """
        return self._hierarchies

    @hierarchies.setter
    def hierarchies(self, hierarchies):
        """Sets the hierarchies of this AssociatedAssetsSummary.


        :param hierarchies: The hierarchies of this AssociatedAssetsSummary.
        :type hierarchies: List
        """
        if hierarchies is None:
            raise ValueError("Invalid value for `hierarchies`, must not be `None`")

        self._hierarchies = hierarchies

    @property
    def description(self):
        """Gets the description of this AssociatedAssetsSummary.


        :return: The description of this AssociatedAssetsSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssociatedAssetsSummary.


        :param description: The description of this AssociatedAssetsSummary.
        :type description: str
        """

        self._description = description
