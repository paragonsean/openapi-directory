# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_asset_response_asset_status import CreateAssetResponseAssetStatus
from openapi_server import util


class CreateAssetResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_id: str=None, asset_arn: str=None, asset_status: CreateAssetResponseAssetStatus=None):
        """CreateAssetResponse - a model defined in OpenAPI

        :param asset_id: The asset_id of this CreateAssetResponse.
        :param asset_arn: The asset_arn of this CreateAssetResponse.
        :param asset_status: The asset_status of this CreateAssetResponse.
        """
        self.openapi_types = {
            'asset_id': str,
            'asset_arn': str,
            'asset_status': CreateAssetResponseAssetStatus
        }

        self.attribute_map = {
            'asset_id': 'assetId',
            'asset_arn': 'assetArn',
            'asset_status': 'assetStatus'
        }

        self._asset_id = asset_id
        self._asset_arn = asset_arn
        self._asset_status = asset_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssetResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAssetResponse of this CreateAssetResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self):
        """Gets the asset_id of this CreateAssetResponse.


        :return: The asset_id of this CreateAssetResponse.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this CreateAssetResponse.


        :param asset_id: The asset_id of this CreateAssetResponse.
        :type asset_id: str
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")

        self._asset_id = asset_id

    @property
    def asset_arn(self):
        """Gets the asset_arn of this CreateAssetResponse.


        :return: The asset_arn of this CreateAssetResponse.
        :rtype: str
        """
        return self._asset_arn

    @asset_arn.setter
    def asset_arn(self, asset_arn):
        """Sets the asset_arn of this CreateAssetResponse.


        :param asset_arn: The asset_arn of this CreateAssetResponse.
        :type asset_arn: str
        """
        if asset_arn is None:
            raise ValueError("Invalid value for `asset_arn`, must not be `None`")

        self._asset_arn = asset_arn

    @property
    def asset_status(self):
        """Gets the asset_status of this CreateAssetResponse.


        :return: The asset_status of this CreateAssetResponse.
        :rtype: CreateAssetResponseAssetStatus
        """
        return self._asset_status

    @asset_status.setter
    def asset_status(self, asset_status):
        """Sets the asset_status of this CreateAssetResponse.


        :param asset_status: The asset_status of this CreateAssetResponse.
        :type asset_status: CreateAssetResponseAssetStatus
        """
        if asset_status is None:
            raise ValueError("Invalid value for `asset_status`, must not be `None`")

        self._asset_status = asset_status
