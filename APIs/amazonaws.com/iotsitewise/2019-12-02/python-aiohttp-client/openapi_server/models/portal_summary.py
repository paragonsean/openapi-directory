# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.portal_status import PortalStatus
from openapi_server import util


class PortalSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, description: str=None, start_url: str=None, creation_date: datetime=None, last_update_date: datetime=None, role_arn: str=None, status: PortalStatus=None):
        """PortalSummary - a model defined in OpenAPI

        :param id: The id of this PortalSummary.
        :param name: The name of this PortalSummary.
        :param description: The description of this PortalSummary.
        :param start_url: The start_url of this PortalSummary.
        :param creation_date: The creation_date of this PortalSummary.
        :param last_update_date: The last_update_date of this PortalSummary.
        :param role_arn: The role_arn of this PortalSummary.
        :param status: The status of this PortalSummary.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'start_url': str,
            'creation_date': datetime,
            'last_update_date': datetime,
            'role_arn': str,
            'status': PortalStatus
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'start_url': 'startUrl',
            'creation_date': 'creationDate',
            'last_update_date': 'lastUpdateDate',
            'role_arn': 'roleArn',
            'status': 'status'
        }

        self._id = id
        self._name = name
        self._description = description
        self._start_url = start_url
        self._creation_date = creation_date
        self._last_update_date = last_update_date
        self._role_arn = role_arn
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortalSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortalSummary of this PortalSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PortalSummary.


        :return: The id of this PortalSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortalSummary.


        :param id: The id of this PortalSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this PortalSummary.


        :return: The name of this PortalSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortalSummary.


        :param name: The name of this PortalSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this PortalSummary.


        :return: The description of this PortalSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PortalSummary.


        :param description: The description of this PortalSummary.
        :type description: str
        """

        self._description = description

    @property
    def start_url(self):
        """Gets the start_url of this PortalSummary.


        :return: The start_url of this PortalSummary.
        :rtype: str
        """
        return self._start_url

    @start_url.setter
    def start_url(self, start_url):
        """Sets the start_url of this PortalSummary.


        :param start_url: The start_url of this PortalSummary.
        :type start_url: str
        """
        if start_url is None:
            raise ValueError("Invalid value for `start_url`, must not be `None`")

        self._start_url = start_url

    @property
    def creation_date(self):
        """Gets the creation_date of this PortalSummary.


        :return: The creation_date of this PortalSummary.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this PortalSummary.


        :param creation_date: The creation_date of this PortalSummary.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def last_update_date(self):
        """Gets the last_update_date of this PortalSummary.


        :return: The last_update_date of this PortalSummary.
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this PortalSummary.


        :param last_update_date: The last_update_date of this PortalSummary.
        :type last_update_date: datetime
        """

        self._last_update_date = last_update_date

    @property
    def role_arn(self):
        """Gets the role_arn of this PortalSummary.


        :return: The role_arn of this PortalSummary.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this PortalSummary.


        :param role_arn: The role_arn of this PortalSummary.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def status(self):
        """Gets the status of this PortalSummary.


        :return: The status of this PortalSummary.
        :rtype: PortalStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PortalSummary.


        :param status: The status of this PortalSummary.
        :type status: PortalStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
