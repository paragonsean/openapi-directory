/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyUsage model module.
 * @module model/KeyUsage
 * @version 2017-08-22
 */
class KeyUsage {
    /**
     * Constructs a new <code>KeyUsage</code>.
     * Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
     * @alias module:model/KeyUsage
     */
    constructor() { 
        
        KeyUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyUsage} obj Optional instance to populate.
     * @return {module:model/KeyUsage} The populated <code>KeyUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyUsage();

            if (data.hasOwnProperty('DigitalSignature')) {
                obj['DigitalSignature'] = ApiClient.convertToType(data['DigitalSignature'], 'Boolean');
            }
            if (data.hasOwnProperty('NonRepudiation')) {
                obj['NonRepudiation'] = ApiClient.convertToType(data['NonRepudiation'], 'Boolean');
            }
            if (data.hasOwnProperty('KeyEncipherment')) {
                obj['KeyEncipherment'] = ApiClient.convertToType(data['KeyEncipherment'], 'Boolean');
            }
            if (data.hasOwnProperty('DataEncipherment')) {
                obj['DataEncipherment'] = ApiClient.convertToType(data['DataEncipherment'], 'Boolean');
            }
            if (data.hasOwnProperty('KeyAgreement')) {
                obj['KeyAgreement'] = ApiClient.convertToType(data['KeyAgreement'], 'Boolean');
            }
            if (data.hasOwnProperty('KeyCertSign')) {
                obj['KeyCertSign'] = ApiClient.convertToType(data['KeyCertSign'], 'Boolean');
            }
            if (data.hasOwnProperty('CRLSign')) {
                obj['CRLSign'] = ApiClient.convertToType(data['CRLSign'], 'Boolean');
            }
            if (data.hasOwnProperty('EncipherOnly')) {
                obj['EncipherOnly'] = ApiClient.convertToType(data['EncipherOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('DecipherOnly')) {
                obj['DecipherOnly'] = ApiClient.convertToType(data['DecipherOnly'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyUsage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DigitalSignature`
        if (data['DigitalSignature']) { // data not null
          Boolean.validateJSON(data['DigitalSignature']);
        }
        // validate the optional field `NonRepudiation`
        if (data['NonRepudiation']) { // data not null
          Boolean.validateJSON(data['NonRepudiation']);
        }
        // validate the optional field `KeyEncipherment`
        if (data['KeyEncipherment']) { // data not null
          Boolean.validateJSON(data['KeyEncipherment']);
        }
        // validate the optional field `DataEncipherment`
        if (data['DataEncipherment']) { // data not null
          Boolean.validateJSON(data['DataEncipherment']);
        }
        // validate the optional field `KeyAgreement`
        if (data['KeyAgreement']) { // data not null
          Boolean.validateJSON(data['KeyAgreement']);
        }
        // validate the optional field `KeyCertSign`
        if (data['KeyCertSign']) { // data not null
          Boolean.validateJSON(data['KeyCertSign']);
        }
        // validate the optional field `CRLSign`
        if (data['CRLSign']) { // data not null
          Boolean.validateJSON(data['CRLSign']);
        }
        // validate the optional field `EncipherOnly`
        if (data['EncipherOnly']) { // data not null
          Boolean.validateJSON(data['EncipherOnly']);
        }
        // validate the optional field `DecipherOnly`
        if (data['DecipherOnly']) { // data not null
          Boolean.validateJSON(data['DecipherOnly']);
        }

        return true;
    }


}



/**
 * @member {Boolean} DigitalSignature
 */
KeyUsage.prototype['DigitalSignature'] = undefined;

/**
 * @member {Boolean} NonRepudiation
 */
KeyUsage.prototype['NonRepudiation'] = undefined;

/**
 * @member {Boolean} KeyEncipherment
 */
KeyUsage.prototype['KeyEncipherment'] = undefined;

/**
 * @member {Boolean} DataEncipherment
 */
KeyUsage.prototype['DataEncipherment'] = undefined;

/**
 * @member {Boolean} KeyAgreement
 */
KeyUsage.prototype['KeyAgreement'] = undefined;

/**
 * @member {Boolean} KeyCertSign
 */
KeyUsage.prototype['KeyCertSign'] = undefined;

/**
 * @member {Boolean} CRLSign
 */
KeyUsage.prototype['CRLSign'] = undefined;

/**
 * @member {Boolean} EncipherOnly
 */
KeyUsage.prototype['EncipherOnly'] = undefined;

/**
 * @member {Boolean} DecipherOnly
 */
KeyUsage.prototype['DecipherOnly'] = undefined;






export default KeyUsage;

