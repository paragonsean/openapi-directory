/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import S3ObjectAcl from './S3ObjectAcl';

/**
 * The CrlConfiguration model module.
 * @module model/CrlConfiguration
 * @version 2017-08-22
 */
class CrlConfiguration {
    /**
     * Constructs a new <code>CrlConfiguration</code>.
     * &lt;p&gt;Contains configuration information for a certificate revocation list (CRL). Your private certificate authority (CA) creates base CRLs. Delta CRLs are not supported. You can enable CRLs for your new or an existing private CA by setting the &lt;b&gt;Enabled&lt;/b&gt; parameter to &lt;code&gt;true&lt;/code&gt;. Your private CA writes CRLs to an S3 bucket that you specify in the &lt;b&gt;S3BucketName&lt;/b&gt; parameter. You can hide the name of your bucket by specifying a value for the &lt;b&gt;CustomCname&lt;/b&gt; parameter. Your private CA copies the CNAME or the S3 bucket name to the &lt;b&gt;CRL Distribution Points&lt;/b&gt; extension of each certificate it issues. Your S3 bucket policy must give write permission to Amazon Web Services Private CA. &lt;/p&gt; &lt;p&gt;Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#crl-encryption\&quot;&gt;Encrypting Your CRLs&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Your private CA uses the value in the &lt;b&gt;ExpirationInDays&lt;/b&gt; parameter to calculate the &lt;b&gt;nextUpdate&lt;/b&gt; field in the CRL. The CRL is refreshed prior to a certificate&#39;s expiration date or when a certificate is revoked. When a certificate is revoked, it appears in the CRL until the certificate expires, and then in one additional CRL after expiration, and it always appears in the audit report.&lt;/p&gt; &lt;p&gt;A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason a CRL update fails, Amazon Web Services Private CA makes further attempts every 15 minutes.&lt;/p&gt; &lt;p&gt;CRLs contain the following fields:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Version&lt;/b&gt;: The current version number defined in RFC 5280 is V2. The integer value is 0x1. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Signature Algorithm&lt;/b&gt;: The name of the algorithm used to sign the CRL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Issuer&lt;/b&gt;: The X.500 distinguished name of your private CA that issued the CRL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Last Update&lt;/b&gt;: The issue date and time of this CRL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Next Update&lt;/b&gt;: The day and time by which the next CRL will be issued.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Revoked Certificates&lt;/b&gt;: List of revoked certificates. Each list item contains the following information.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Serial Number&lt;/b&gt;: The serial number, in hexadecimal format, of the revoked certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Revocation Date&lt;/b&gt;: Date and time the certificate was revoked.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CRL Entry Extensions&lt;/b&gt;: Optional extensions for the CRL entry.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;X509v3 CRL Reason Code&lt;/b&gt;: Reason the certificate was revoked.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CRL Extensions&lt;/b&gt;: Optional extensions for the CRL.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;X509v3 Authority Key Identifier&lt;/b&gt;: Identifies the public key associated with the private key used to sign the certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;X509v3 CRL Number:&lt;/b&gt;: Decimal sequence number for the CRL.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Signature Algorithm&lt;/b&gt;: Algorithm used by your private CA to sign the CRL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Signature Value&lt;/b&gt;: Signature computed over the CRL.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Certificate revocation lists created by Amazon Web Services Private CA are DER-encoded. You can use the following OpenSSL command to list a CRL.&lt;/p&gt; &lt;p&gt; &lt;code&gt;openssl crl -inform DER -text -in &lt;i&gt;crl_path&lt;/i&gt; -noout&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html\&quot;&gt;Planning a certificate revocation list (CRL)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Private Certificate Authority User Guide&lt;/i&gt; &lt;/p&gt;
     * @alias module:model/CrlConfiguration
     * @param enabled {Boolean} 
     */
    constructor(enabled) { 
        
        CrlConfiguration.initialize(this, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled) { 
        obj['Enabled'] = enabled;
    }

    /**
     * Constructs a <code>CrlConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CrlConfiguration} obj Optional instance to populate.
     * @return {module:model/CrlConfiguration} The populated <code>CrlConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CrlConfiguration();

            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('ExpirationInDays')) {
                obj['ExpirationInDays'] = ApiClient.convertToType(data['ExpirationInDays'], 'Number');
            }
            if (data.hasOwnProperty('CustomCname')) {
                obj['CustomCname'] = ApiClient.convertToType(data['CustomCname'], 'String');
            }
            if (data.hasOwnProperty('S3BucketName')) {
                obj['S3BucketName'] = ApiClient.convertToType(data['S3BucketName'], 'String');
            }
            if (data.hasOwnProperty('S3ObjectAcl')) {
                obj['S3ObjectAcl'] = ApiClient.convertToType(data['S3ObjectAcl'], S3ObjectAcl);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CrlConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CrlConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CrlConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Enabled`
        if (data['Enabled']) { // data not null
          Boolean.validateJSON(data['Enabled']);
        }
        // validate the optional field `ExpirationInDays`
        if (data['ExpirationInDays']) { // data not null
          Number.validateJSON(data['ExpirationInDays']);
        }
        // validate the optional field `CustomCname`
        if (data['CustomCname']) { // data not null
          String.validateJSON(data['CustomCname']);
        }
        // validate the optional field `S3BucketName`
        if (data['S3BucketName']) { // data not null
          String.validateJSON(data['S3BucketName']);
        }
        // validate the optional field `S3ObjectAcl`
        if (data['S3ObjectAcl']) { // data not null
          S3ObjectAcl.validateJSON(data['S3ObjectAcl']);
        }

        return true;
    }


}

CrlConfiguration.RequiredProperties = ["Enabled"];

/**
 * @member {Boolean} Enabled
 */
CrlConfiguration.prototype['Enabled'] = undefined;

/**
 * @member {Number} ExpirationInDays
 */
CrlConfiguration.prototype['ExpirationInDays'] = undefined;

/**
 * @member {String} CustomCname
 */
CrlConfiguration.prototype['CustomCname'] = undefined;

/**
 * @member {String} S3BucketName
 */
CrlConfiguration.prototype['S3BucketName'] = undefined;

/**
 * @member {module:model/S3ObjectAcl} S3ObjectAcl
 */
CrlConfiguration.prototype['S3ObjectAcl'] = undefined;






export default CrlConfiguration;

