/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCertificateManagerPrivateCertificateAuthority);
  }
}(this, function(expect, AwsCertificateManagerPrivateCertificateAuthority) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('KeyUsage', function() {
    it('should create an instance of KeyUsage', function() {
      // uncomment below and update the code to test KeyUsage
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be.a(AwsCertificateManagerPrivateCertificateAuthority.KeyUsage);
    });

    it('should have the property digitalSignature (base name: "DigitalSignature")', function() {
      // uncomment below and update the code to test the property digitalSignature
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be();
    });

    it('should have the property nonRepudiation (base name: "NonRepudiation")', function() {
      // uncomment below and update the code to test the property nonRepudiation
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be();
    });

    it('should have the property keyEncipherment (base name: "KeyEncipherment")', function() {
      // uncomment below and update the code to test the property keyEncipherment
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be();
    });

    it('should have the property dataEncipherment (base name: "DataEncipherment")', function() {
      // uncomment below and update the code to test the property dataEncipherment
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be();
    });

    it('should have the property keyAgreement (base name: "KeyAgreement")', function() {
      // uncomment below and update the code to test the property keyAgreement
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be();
    });

    it('should have the property keyCertSign (base name: "KeyCertSign")', function() {
      // uncomment below and update the code to test the property keyCertSign
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be();
    });

    it('should have the property cRLSign (base name: "CRLSign")', function() {
      // uncomment below and update the code to test the property cRLSign
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be();
    });

    it('should have the property encipherOnly (base name: "EncipherOnly")', function() {
      // uncomment below and update the code to test the property encipherOnly
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be();
    });

    it('should have the property decipherOnly (base name: "DecipherOnly")', function() {
      // uncomment below and update the code to test the property decipherOnly
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.KeyUsage();
      //expect(instance).to.be();
    });

  });

}));
