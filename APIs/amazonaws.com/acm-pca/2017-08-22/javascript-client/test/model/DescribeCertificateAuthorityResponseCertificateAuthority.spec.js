/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCertificateManagerPrivateCertificateAuthority);
  }
}(this, function(expect, AwsCertificateManagerPrivateCertificateAuthority) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DescribeCertificateAuthorityResponseCertificateAuthority', function() {
    it('should create an instance of DescribeCertificateAuthorityResponseCertificateAuthority', function() {
      // uncomment below and update the code to test DescribeCertificateAuthorityResponseCertificateAuthority
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be.a(AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority);
    });

    it('should have the property arn (base name: "Arn")', function() {
      // uncomment below and update the code to test the property arn
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property ownerAccount (base name: "OwnerAccount")', function() {
      // uncomment below and update the code to test the property ownerAccount
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "CreatedAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property lastStateChangeAt (base name: "LastStateChangeAt")', function() {
      // uncomment below and update the code to test the property lastStateChangeAt
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property serial (base name: "Serial")', function() {
      // uncomment below and update the code to test the property serial
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property notBefore (base name: "NotBefore")', function() {
      // uncomment below and update the code to test the property notBefore
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property notAfter (base name: "NotAfter")', function() {
      // uncomment below and update the code to test the property notAfter
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property failureReason (base name: "FailureReason")', function() {
      // uncomment below and update the code to test the property failureReason
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property certificateAuthorityConfiguration (base name: "CertificateAuthorityConfiguration")', function() {
      // uncomment below and update the code to test the property certificateAuthorityConfiguration
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property revocationConfiguration (base name: "RevocationConfiguration")', function() {
      // uncomment below and update the code to test the property revocationConfiguration
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property restorableUntil (base name: "RestorableUntil")', function() {
      // uncomment below and update the code to test the property restorableUntil
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property keyStorageSecurityStandard (base name: "KeyStorageSecurityStandard")', function() {
      // uncomment below and update the code to test the property keyStorageSecurityStandard
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

    it('should have the property usageMode (base name: "UsageMode")', function() {
      // uncomment below and update the code to test the property usageMode
      //var instance = new AwsCertificateManagerPrivateCertificateAuthority.DescribeCertificateAuthorityResponseCertificateAuthority();
      //expect(instance).to.be();
    });

  });

}));
