/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCertificateManagerPrivateCertificateAuthority);
  }
}(this, function(expect, AwsCertificateManagerPrivateCertificateAuthority) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCertificateManagerPrivateCertificateAuthority.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createCertificateAuthority', function() {
      it('should call createCertificateAuthority successfully', function(done) {
        //uncomment below and update the code to test createCertificateAuthority
        //instance.createCertificateAuthority(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCertificateAuthorityAuditReport', function() {
      it('should call createCertificateAuthorityAuditReport successfully', function(done) {
        //uncomment below and update the code to test createCertificateAuthorityAuditReport
        //instance.createCertificateAuthorityAuditReport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPermission', function() {
      it('should call createPermission successfully', function(done) {
        //uncomment below and update the code to test createPermission
        //instance.createPermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCertificateAuthority', function() {
      it('should call deleteCertificateAuthority successfully', function(done) {
        //uncomment below and update the code to test deleteCertificateAuthority
        //instance.deleteCertificateAuthority(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermission', function() {
      it('should call deletePermission successfully', function(done) {
        //uncomment below and update the code to test deletePermission
        //instance.deletePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePolicy', function() {
      it('should call deletePolicy successfully', function(done) {
        //uncomment below and update the code to test deletePolicy
        //instance.deletePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCertificateAuthority', function() {
      it('should call describeCertificateAuthority successfully', function(done) {
        //uncomment below and update the code to test describeCertificateAuthority
        //instance.describeCertificateAuthority(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCertificateAuthorityAuditReport', function() {
      it('should call describeCertificateAuthorityAuditReport successfully', function(done) {
        //uncomment below and update the code to test describeCertificateAuthorityAuditReport
        //instance.describeCertificateAuthorityAuditReport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCertificate', function() {
      it('should call getCertificate successfully', function(done) {
        //uncomment below and update the code to test getCertificate
        //instance.getCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCertificateAuthorityCertificate', function() {
      it('should call getCertificateAuthorityCertificate successfully', function(done) {
        //uncomment below and update the code to test getCertificateAuthorityCertificate
        //instance.getCertificateAuthorityCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCertificateAuthorityCsr', function() {
      it('should call getCertificateAuthorityCsr successfully', function(done) {
        //uncomment below and update the code to test getCertificateAuthorityCsr
        //instance.getCertificateAuthorityCsr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPolicy', function() {
      it('should call getPolicy successfully', function(done) {
        //uncomment below and update the code to test getPolicy
        //instance.getPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importCertificateAuthorityCertificate', function() {
      it('should call importCertificateAuthorityCertificate successfully', function(done) {
        //uncomment below and update the code to test importCertificateAuthorityCertificate
        //instance.importCertificateAuthorityCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('issueCertificate', function() {
      it('should call issueCertificate successfully', function(done) {
        //uncomment below and update the code to test issueCertificate
        //instance.issueCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCertificateAuthorities', function() {
      it('should call listCertificateAuthorities successfully', function(done) {
        //uncomment below and update the code to test listCertificateAuthorities
        //instance.listCertificateAuthorities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPermissions', function() {
      it('should call listPermissions successfully', function(done) {
        //uncomment below and update the code to test listPermissions
        //instance.listPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTags', function() {
      it('should call listTags successfully', function(done) {
        //uncomment below and update the code to test listTags
        //instance.listTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putPolicy', function() {
      it('should call putPolicy successfully', function(done) {
        //uncomment below and update the code to test putPolicy
        //instance.putPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreCertificateAuthority', function() {
      it('should call restoreCertificateAuthority successfully', function(done) {
        //uncomment below and update the code to test restoreCertificateAuthority
        //instance.restoreCertificateAuthority(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeCertificate', function() {
      it('should call revokeCertificate successfully', function(done) {
        //uncomment below and update the code to test revokeCertificate
        //instance.revokeCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagCertificateAuthority', function() {
      it('should call tagCertificateAuthority successfully', function(done) {
        //uncomment below and update the code to test tagCertificateAuthority
        //instance.tagCertificateAuthority(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagCertificateAuthority', function() {
      it('should call untagCertificateAuthority successfully', function(done) {
        //uncomment below and update the code to test untagCertificateAuthority
        //instance.untagCertificateAuthority(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCertificateAuthority', function() {
      it('should call updateCertificateAuthority successfully', function(done) {
        //uncomment below and update the code to test updateCertificateAuthority
        //instance.updateCertificateAuthority(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
