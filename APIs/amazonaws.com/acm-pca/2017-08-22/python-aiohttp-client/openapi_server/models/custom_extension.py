# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomExtension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_identifier: str=None, value: str=None, critical: bool=None):
        """CustomExtension - a model defined in OpenAPI

        :param object_identifier: The object_identifier of this CustomExtension.
        :param value: The value of this CustomExtension.
        :param critical: The critical of this CustomExtension.
        """
        self.openapi_types = {
            'object_identifier': str,
            'value': str,
            'critical': bool
        }

        self.attribute_map = {
            'object_identifier': 'ObjectIdentifier',
            'value': 'Value',
            'critical': 'Critical'
        }

        self._object_identifier = object_identifier
        self._value = value
        self._critical = critical

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomExtension of this CustomExtension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_identifier(self):
        """Gets the object_identifier of this CustomExtension.


        :return: The object_identifier of this CustomExtension.
        :rtype: str
        """
        return self._object_identifier

    @object_identifier.setter
    def object_identifier(self, object_identifier):
        """Sets the object_identifier of this CustomExtension.


        :param object_identifier: The object_identifier of this CustomExtension.
        :type object_identifier: str
        """
        if object_identifier is None:
            raise ValueError("Invalid value for `object_identifier`, must not be `None`")

        self._object_identifier = object_identifier

    @property
    def value(self):
        """Gets the value of this CustomExtension.


        :return: The value of this CustomExtension.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomExtension.


        :param value: The value of this CustomExtension.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def critical(self):
        """Gets the critical of this CustomExtension.


        :return: The critical of this CustomExtension.
        :rtype: bool
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this CustomExtension.


        :param critical: The critical of this CustomExtension.
        :type critical: bool
        """

        self._critical = critical
