# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_usage import KeyUsage
from openapi_server import util


class Extensions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_policies: List=None, extended_key_usage: List=None, key_usage: KeyUsage=None, subject_alternative_names: List=None, custom_extensions: List=None):
        """Extensions - a model defined in OpenAPI

        :param certificate_policies: The certificate_policies of this Extensions.
        :param extended_key_usage: The extended_key_usage of this Extensions.
        :param key_usage: The key_usage of this Extensions.
        :param subject_alternative_names: The subject_alternative_names of this Extensions.
        :param custom_extensions: The custom_extensions of this Extensions.
        """
        self.openapi_types = {
            'certificate_policies': List,
            'extended_key_usage': List,
            'key_usage': KeyUsage,
            'subject_alternative_names': List,
            'custom_extensions': List
        }

        self.attribute_map = {
            'certificate_policies': 'CertificatePolicies',
            'extended_key_usage': 'ExtendedKeyUsage',
            'key_usage': 'KeyUsage',
            'subject_alternative_names': 'SubjectAlternativeNames',
            'custom_extensions': 'CustomExtensions'
        }

        self._certificate_policies = certificate_policies
        self._extended_key_usage = extended_key_usage
        self._key_usage = key_usage
        self._subject_alternative_names = subject_alternative_names
        self._custom_extensions = custom_extensions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Extensions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Extensions of this Extensions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_policies(self):
        """Gets the certificate_policies of this Extensions.


        :return: The certificate_policies of this Extensions.
        :rtype: List
        """
        return self._certificate_policies

    @certificate_policies.setter
    def certificate_policies(self, certificate_policies):
        """Sets the certificate_policies of this Extensions.


        :param certificate_policies: The certificate_policies of this Extensions.
        :type certificate_policies: List
        """

        self._certificate_policies = certificate_policies

    @property
    def extended_key_usage(self):
        """Gets the extended_key_usage of this Extensions.


        :return: The extended_key_usage of this Extensions.
        :rtype: List
        """
        return self._extended_key_usage

    @extended_key_usage.setter
    def extended_key_usage(self, extended_key_usage):
        """Sets the extended_key_usage of this Extensions.


        :param extended_key_usage: The extended_key_usage of this Extensions.
        :type extended_key_usage: List
        """

        self._extended_key_usage = extended_key_usage

    @property
    def key_usage(self):
        """Gets the key_usage of this Extensions.


        :return: The key_usage of this Extensions.
        :rtype: KeyUsage
        """
        return self._key_usage

    @key_usage.setter
    def key_usage(self, key_usage):
        """Sets the key_usage of this Extensions.


        :param key_usage: The key_usage of this Extensions.
        :type key_usage: KeyUsage
        """

        self._key_usage = key_usage

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this Extensions.


        :return: The subject_alternative_names of this Extensions.
        :rtype: List
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this Extensions.


        :param subject_alternative_names: The subject_alternative_names of this Extensions.
        :type subject_alternative_names: List
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def custom_extensions(self):
        """Gets the custom_extensions of this Extensions.


        :return: The custom_extensions of this Extensions.
        :rtype: List
        """
        return self._custom_extensions

    @custom_extensions.setter
    def custom_extensions(self, custom_extensions):
        """Sets the custom_extensions of this Extensions.


        :param custom_extensions: The custom_extensions of this Extensions.
        :type custom_extensions: List
        """

        self._custom_extensions = custom_extensions
