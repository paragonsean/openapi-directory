# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_authority_arn: str=None, principal: str=None, source_account: str=None, actions: List=None):
        """CreatePermissionRequest - a model defined in OpenAPI

        :param certificate_authority_arn: The certificate_authority_arn of this CreatePermissionRequest.
        :param principal: The principal of this CreatePermissionRequest.
        :param source_account: The source_account of this CreatePermissionRequest.
        :param actions: The actions of this CreatePermissionRequest.
        """
        self.openapi_types = {
            'certificate_authority_arn': str,
            'principal': str,
            'source_account': str,
            'actions': List
        }

        self.attribute_map = {
            'certificate_authority_arn': 'CertificateAuthorityArn',
            'principal': 'Principal',
            'source_account': 'SourceAccount',
            'actions': 'Actions'
        }

        self._certificate_authority_arn = certificate_authority_arn
        self._principal = principal
        self._source_account = source_account
        self._actions = actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePermissionRequest of this CreatePermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_authority_arn(self):
        """Gets the certificate_authority_arn of this CreatePermissionRequest.


        :return: The certificate_authority_arn of this CreatePermissionRequest.
        :rtype: str
        """
        return self._certificate_authority_arn

    @certificate_authority_arn.setter
    def certificate_authority_arn(self, certificate_authority_arn):
        """Sets the certificate_authority_arn of this CreatePermissionRequest.


        :param certificate_authority_arn: The certificate_authority_arn of this CreatePermissionRequest.
        :type certificate_authority_arn: str
        """
        if certificate_authority_arn is None:
            raise ValueError("Invalid value for `certificate_authority_arn`, must not be `None`")

        self._certificate_authority_arn = certificate_authority_arn

    @property
    def principal(self):
        """Gets the principal of this CreatePermissionRequest.


        :return: The principal of this CreatePermissionRequest.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this CreatePermissionRequest.


        :param principal: The principal of this CreatePermissionRequest.
        :type principal: str
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")

        self._principal = principal

    @property
    def source_account(self):
        """Gets the source_account of this CreatePermissionRequest.


        :return: The source_account of this CreatePermissionRequest.
        :rtype: str
        """
        return self._source_account

    @source_account.setter
    def source_account(self, source_account):
        """Sets the source_account of this CreatePermissionRequest.


        :param source_account: The source_account of this CreatePermissionRequest.
        :type source_account: str
        """

        self._source_account = source_account

    @property
    def actions(self):
        """Gets the actions of this CreatePermissionRequest.


        :return: The actions of this CreatePermissionRequest.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CreatePermissionRequest.


        :param actions: The actions of this CreatePermissionRequest.
        :type actions: List
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions
