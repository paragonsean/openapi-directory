# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digital_signature: bool=None, non_repudiation: bool=None, key_encipherment: bool=None, data_encipherment: bool=None, key_agreement: bool=None, key_cert_sign: bool=None, crl_sign: bool=None, encipher_only: bool=None, decipher_only: bool=None):
        """KeyUsage - a model defined in OpenAPI

        :param digital_signature: The digital_signature of this KeyUsage.
        :param non_repudiation: The non_repudiation of this KeyUsage.
        :param key_encipherment: The key_encipherment of this KeyUsage.
        :param data_encipherment: The data_encipherment of this KeyUsage.
        :param key_agreement: The key_agreement of this KeyUsage.
        :param key_cert_sign: The key_cert_sign of this KeyUsage.
        :param crl_sign: The crl_sign of this KeyUsage.
        :param encipher_only: The encipher_only of this KeyUsage.
        :param decipher_only: The decipher_only of this KeyUsage.
        """
        self.openapi_types = {
            'digital_signature': bool,
            'non_repudiation': bool,
            'key_encipherment': bool,
            'data_encipherment': bool,
            'key_agreement': bool,
            'key_cert_sign': bool,
            'crl_sign': bool,
            'encipher_only': bool,
            'decipher_only': bool
        }

        self.attribute_map = {
            'digital_signature': 'DigitalSignature',
            'non_repudiation': 'NonRepudiation',
            'key_encipherment': 'KeyEncipherment',
            'data_encipherment': 'DataEncipherment',
            'key_agreement': 'KeyAgreement',
            'key_cert_sign': 'KeyCertSign',
            'crl_sign': 'CRLSign',
            'encipher_only': 'EncipherOnly',
            'decipher_only': 'DecipherOnly'
        }

        self._digital_signature = digital_signature
        self._non_repudiation = non_repudiation
        self._key_encipherment = key_encipherment
        self._data_encipherment = data_encipherment
        self._key_agreement = key_agreement
        self._key_cert_sign = key_cert_sign
        self._crl_sign = crl_sign
        self._encipher_only = encipher_only
        self._decipher_only = decipher_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyUsage of this KeyUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digital_signature(self):
        """Gets the digital_signature of this KeyUsage.


        :return: The digital_signature of this KeyUsage.
        :rtype: bool
        """
        return self._digital_signature

    @digital_signature.setter
    def digital_signature(self, digital_signature):
        """Sets the digital_signature of this KeyUsage.


        :param digital_signature: The digital_signature of this KeyUsage.
        :type digital_signature: bool
        """

        self._digital_signature = digital_signature

    @property
    def non_repudiation(self):
        """Gets the non_repudiation of this KeyUsage.


        :return: The non_repudiation of this KeyUsage.
        :rtype: bool
        """
        return self._non_repudiation

    @non_repudiation.setter
    def non_repudiation(self, non_repudiation):
        """Sets the non_repudiation of this KeyUsage.


        :param non_repudiation: The non_repudiation of this KeyUsage.
        :type non_repudiation: bool
        """

        self._non_repudiation = non_repudiation

    @property
    def key_encipherment(self):
        """Gets the key_encipherment of this KeyUsage.


        :return: The key_encipherment of this KeyUsage.
        :rtype: bool
        """
        return self._key_encipherment

    @key_encipherment.setter
    def key_encipherment(self, key_encipherment):
        """Sets the key_encipherment of this KeyUsage.


        :param key_encipherment: The key_encipherment of this KeyUsage.
        :type key_encipherment: bool
        """

        self._key_encipherment = key_encipherment

    @property
    def data_encipherment(self):
        """Gets the data_encipherment of this KeyUsage.


        :return: The data_encipherment of this KeyUsage.
        :rtype: bool
        """
        return self._data_encipherment

    @data_encipherment.setter
    def data_encipherment(self, data_encipherment):
        """Sets the data_encipherment of this KeyUsage.


        :param data_encipherment: The data_encipherment of this KeyUsage.
        :type data_encipherment: bool
        """

        self._data_encipherment = data_encipherment

    @property
    def key_agreement(self):
        """Gets the key_agreement of this KeyUsage.


        :return: The key_agreement of this KeyUsage.
        :rtype: bool
        """
        return self._key_agreement

    @key_agreement.setter
    def key_agreement(self, key_agreement):
        """Sets the key_agreement of this KeyUsage.


        :param key_agreement: The key_agreement of this KeyUsage.
        :type key_agreement: bool
        """

        self._key_agreement = key_agreement

    @property
    def key_cert_sign(self):
        """Gets the key_cert_sign of this KeyUsage.


        :return: The key_cert_sign of this KeyUsage.
        :rtype: bool
        """
        return self._key_cert_sign

    @key_cert_sign.setter
    def key_cert_sign(self, key_cert_sign):
        """Sets the key_cert_sign of this KeyUsage.


        :param key_cert_sign: The key_cert_sign of this KeyUsage.
        :type key_cert_sign: bool
        """

        self._key_cert_sign = key_cert_sign

    @property
    def crl_sign(self):
        """Gets the crl_sign of this KeyUsage.


        :return: The crl_sign of this KeyUsage.
        :rtype: bool
        """
        return self._crl_sign

    @crl_sign.setter
    def crl_sign(self, crl_sign):
        """Sets the crl_sign of this KeyUsage.


        :param crl_sign: The crl_sign of this KeyUsage.
        :type crl_sign: bool
        """

        self._crl_sign = crl_sign

    @property
    def encipher_only(self):
        """Gets the encipher_only of this KeyUsage.


        :return: The encipher_only of this KeyUsage.
        :rtype: bool
        """
        return self._encipher_only

    @encipher_only.setter
    def encipher_only(self, encipher_only):
        """Sets the encipher_only of this KeyUsage.


        :param encipher_only: The encipher_only of this KeyUsage.
        :type encipher_only: bool
        """

        self._encipher_only = encipher_only

    @property
    def decipher_only(self):
        """Gets the decipher_only of this KeyUsage.


        :return: The decipher_only of this KeyUsage.
        :rtype: bool
        """
        return self._decipher_only

    @decipher_only.setter
    def decipher_only(self, decipher_only):
        """Sets the decipher_only of this KeyUsage.


        :param decipher_only: The decipher_only of this KeyUsage.
        :type decipher_only: bool
        """

        self._decipher_only = decipher_only
