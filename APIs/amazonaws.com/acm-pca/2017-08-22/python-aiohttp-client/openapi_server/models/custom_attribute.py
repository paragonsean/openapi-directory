# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_identifier: str=None, value: str=None):
        """CustomAttribute - a model defined in OpenAPI

        :param object_identifier: The object_identifier of this CustomAttribute.
        :param value: The value of this CustomAttribute.
        """
        self.openapi_types = {
            'object_identifier': str,
            'value': str
        }

        self.attribute_map = {
            'object_identifier': 'ObjectIdentifier',
            'value': 'Value'
        }

        self._object_identifier = object_identifier
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomAttribute of this CustomAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_identifier(self):
        """Gets the object_identifier of this CustomAttribute.


        :return: The object_identifier of this CustomAttribute.
        :rtype: str
        """
        return self._object_identifier

    @object_identifier.setter
    def object_identifier(self, object_identifier):
        """Sets the object_identifier of this CustomAttribute.


        :param object_identifier: The object_identifier of this CustomAttribute.
        :type object_identifier: str
        """
        if object_identifier is None:
            raise ValueError("Invalid value for `object_identifier`, must not be `None`")

        self._object_identifier = object_identifier

    @property
    def value(self):
        """Gets the value of this CustomAttribute.


        :return: The value of this CustomAttribute.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomAttribute.


        :param value: The value of this CustomAttribute.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
