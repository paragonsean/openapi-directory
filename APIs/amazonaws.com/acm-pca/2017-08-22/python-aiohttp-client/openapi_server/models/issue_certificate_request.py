# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue_certificate_request_api_passthrough import IssueCertificateRequestApiPassthrough
from openapi_server.models.issue_certificate_request_validity import IssueCertificateRequestValidity
from openapi_server.models.issue_certificate_request_validity_not_before import IssueCertificateRequestValidityNotBefore
from openapi_server.models.signing_algorithm import SigningAlgorithm
from openapi_server import util


class IssueCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_passthrough: IssueCertificateRequestApiPassthrough=None, certificate_authority_arn: str=None, csr: str=None, signing_algorithm: SigningAlgorithm=None, template_arn: str=None, validity: IssueCertificateRequestValidity=None, validity_not_before: IssueCertificateRequestValidityNotBefore=None, idempotency_token: str=None):
        """IssueCertificateRequest - a model defined in OpenAPI

        :param api_passthrough: The api_passthrough of this IssueCertificateRequest.
        :param certificate_authority_arn: The certificate_authority_arn of this IssueCertificateRequest.
        :param csr: The csr of this IssueCertificateRequest.
        :param signing_algorithm: The signing_algorithm of this IssueCertificateRequest.
        :param template_arn: The template_arn of this IssueCertificateRequest.
        :param validity: The validity of this IssueCertificateRequest.
        :param validity_not_before: The validity_not_before of this IssueCertificateRequest.
        :param idempotency_token: The idempotency_token of this IssueCertificateRequest.
        """
        self.openapi_types = {
            'api_passthrough': IssueCertificateRequestApiPassthrough,
            'certificate_authority_arn': str,
            'csr': str,
            'signing_algorithm': SigningAlgorithm,
            'template_arn': str,
            'validity': IssueCertificateRequestValidity,
            'validity_not_before': IssueCertificateRequestValidityNotBefore,
            'idempotency_token': str
        }

        self.attribute_map = {
            'api_passthrough': 'ApiPassthrough',
            'certificate_authority_arn': 'CertificateAuthorityArn',
            'csr': 'Csr',
            'signing_algorithm': 'SigningAlgorithm',
            'template_arn': 'TemplateArn',
            'validity': 'Validity',
            'validity_not_before': 'ValidityNotBefore',
            'idempotency_token': 'IdempotencyToken'
        }

        self._api_passthrough = api_passthrough
        self._certificate_authority_arn = certificate_authority_arn
        self._csr = csr
        self._signing_algorithm = signing_algorithm
        self._template_arn = template_arn
        self._validity = validity
        self._validity_not_before = validity_not_before
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueCertificateRequest of this IssueCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_passthrough(self):
        """Gets the api_passthrough of this IssueCertificateRequest.


        :return: The api_passthrough of this IssueCertificateRequest.
        :rtype: IssueCertificateRequestApiPassthrough
        """
        return self._api_passthrough

    @api_passthrough.setter
    def api_passthrough(self, api_passthrough):
        """Sets the api_passthrough of this IssueCertificateRequest.


        :param api_passthrough: The api_passthrough of this IssueCertificateRequest.
        :type api_passthrough: IssueCertificateRequestApiPassthrough
        """

        self._api_passthrough = api_passthrough

    @property
    def certificate_authority_arn(self):
        """Gets the certificate_authority_arn of this IssueCertificateRequest.


        :return: The certificate_authority_arn of this IssueCertificateRequest.
        :rtype: str
        """
        return self._certificate_authority_arn

    @certificate_authority_arn.setter
    def certificate_authority_arn(self, certificate_authority_arn):
        """Sets the certificate_authority_arn of this IssueCertificateRequest.


        :param certificate_authority_arn: The certificate_authority_arn of this IssueCertificateRequest.
        :type certificate_authority_arn: str
        """
        if certificate_authority_arn is None:
            raise ValueError("Invalid value for `certificate_authority_arn`, must not be `None`")

        self._certificate_authority_arn = certificate_authority_arn

    @property
    def csr(self):
        """Gets the csr of this IssueCertificateRequest.


        :return: The csr of this IssueCertificateRequest.
        :rtype: str
        """
        return self._csr

    @csr.setter
    def csr(self, csr):
        """Sets the csr of this IssueCertificateRequest.


        :param csr: The csr of this IssueCertificateRequest.
        :type csr: str
        """
        if csr is None:
            raise ValueError("Invalid value for `csr`, must not be `None`")

        self._csr = csr

    @property
    def signing_algorithm(self):
        """Gets the signing_algorithm of this IssueCertificateRequest.


        :return: The signing_algorithm of this IssueCertificateRequest.
        :rtype: SigningAlgorithm
        """
        return self._signing_algorithm

    @signing_algorithm.setter
    def signing_algorithm(self, signing_algorithm):
        """Sets the signing_algorithm of this IssueCertificateRequest.


        :param signing_algorithm: The signing_algorithm of this IssueCertificateRequest.
        :type signing_algorithm: SigningAlgorithm
        """
        if signing_algorithm is None:
            raise ValueError("Invalid value for `signing_algorithm`, must not be `None`")

        self._signing_algorithm = signing_algorithm

    @property
    def template_arn(self):
        """Gets the template_arn of this IssueCertificateRequest.


        :return: The template_arn of this IssueCertificateRequest.
        :rtype: str
        """
        return self._template_arn

    @template_arn.setter
    def template_arn(self, template_arn):
        """Sets the template_arn of this IssueCertificateRequest.


        :param template_arn: The template_arn of this IssueCertificateRequest.
        :type template_arn: str
        """

        self._template_arn = template_arn

    @property
    def validity(self):
        """Gets the validity of this IssueCertificateRequest.


        :return: The validity of this IssueCertificateRequest.
        :rtype: IssueCertificateRequestValidity
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this IssueCertificateRequest.


        :param validity: The validity of this IssueCertificateRequest.
        :type validity: IssueCertificateRequestValidity
        """
        if validity is None:
            raise ValueError("Invalid value for `validity`, must not be `None`")

        self._validity = validity

    @property
    def validity_not_before(self):
        """Gets the validity_not_before of this IssueCertificateRequest.


        :return: The validity_not_before of this IssueCertificateRequest.
        :rtype: IssueCertificateRequestValidityNotBefore
        """
        return self._validity_not_before

    @validity_not_before.setter
    def validity_not_before(self, validity_not_before):
        """Sets the validity_not_before of this IssueCertificateRequest.


        :param validity_not_before: The validity_not_before of this IssueCertificateRequest.
        :type validity_not_before: IssueCertificateRequestValidityNotBefore
        """

        self._validity_not_before = validity_not_before

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this IssueCertificateRequest.


        :return: The idempotency_token of this IssueCertificateRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this IssueCertificateRequest.


        :param idempotency_token: The idempotency_token of this IssueCertificateRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token
