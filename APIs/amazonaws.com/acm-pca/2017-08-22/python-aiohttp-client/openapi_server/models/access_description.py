# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_description_access_location import AccessDescriptionAccessLocation
from openapi_server.models.access_description_access_method import AccessDescriptionAccessMethod
from openapi_server import util


class AccessDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_method: AccessDescriptionAccessMethod=None, access_location: AccessDescriptionAccessLocation=None):
        """AccessDescription - a model defined in OpenAPI

        :param access_method: The access_method of this AccessDescription.
        :param access_location: The access_location of this AccessDescription.
        """
        self.openapi_types = {
            'access_method': AccessDescriptionAccessMethod,
            'access_location': AccessDescriptionAccessLocation
        }

        self.attribute_map = {
            'access_method': 'AccessMethod',
            'access_location': 'AccessLocation'
        }

        self._access_method = access_method
        self._access_location = access_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessDescription of this AccessDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_method(self):
        """Gets the access_method of this AccessDescription.


        :return: The access_method of this AccessDescription.
        :rtype: AccessDescriptionAccessMethod
        """
        return self._access_method

    @access_method.setter
    def access_method(self, access_method):
        """Sets the access_method of this AccessDescription.


        :param access_method: The access_method of this AccessDescription.
        :type access_method: AccessDescriptionAccessMethod
        """
        if access_method is None:
            raise ValueError("Invalid value for `access_method`, must not be `None`")

        self._access_method = access_method

    @property
    def access_location(self):
        """Gets the access_location of this AccessDescription.


        :return: The access_location of this AccessDescription.
        :rtype: AccessDescriptionAccessLocation
        """
        return self._access_location

    @access_location.setter
    def access_location(self, access_location):
        """Sets the access_location of this AccessDescription.


        :param access_location: The access_location of this AccessDescription.
        :type access_location: AccessDescriptionAccessLocation
        """
        if access_location is None:
            raise ValueError("Invalid value for `access_location`, must not be `None`")

        self._access_location = access_location
