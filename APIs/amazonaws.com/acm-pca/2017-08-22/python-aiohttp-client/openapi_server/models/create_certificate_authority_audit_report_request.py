# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_report_response_format import AuditReportResponseFormat
from openapi_server import util


class CreateCertificateAuthorityAuditReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_authority_arn: str=None, s3_bucket_name: str=None, audit_report_response_format: AuditReportResponseFormat=None):
        """CreateCertificateAuthorityAuditReportRequest - a model defined in OpenAPI

        :param certificate_authority_arn: The certificate_authority_arn of this CreateCertificateAuthorityAuditReportRequest.
        :param s3_bucket_name: The s3_bucket_name of this CreateCertificateAuthorityAuditReportRequest.
        :param audit_report_response_format: The audit_report_response_format of this CreateCertificateAuthorityAuditReportRequest.
        """
        self.openapi_types = {
            'certificate_authority_arn': str,
            's3_bucket_name': str,
            'audit_report_response_format': AuditReportResponseFormat
        }

        self.attribute_map = {
            'certificate_authority_arn': 'CertificateAuthorityArn',
            's3_bucket_name': 'S3BucketName',
            'audit_report_response_format': 'AuditReportResponseFormat'
        }

        self._certificate_authority_arn = certificate_authority_arn
        self._s3_bucket_name = s3_bucket_name
        self._audit_report_response_format = audit_report_response_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCertificateAuthorityAuditReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCertificateAuthorityAuditReportRequest of this CreateCertificateAuthorityAuditReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_authority_arn(self):
        """Gets the certificate_authority_arn of this CreateCertificateAuthorityAuditReportRequest.


        :return: The certificate_authority_arn of this CreateCertificateAuthorityAuditReportRequest.
        :rtype: str
        """
        return self._certificate_authority_arn

    @certificate_authority_arn.setter
    def certificate_authority_arn(self, certificate_authority_arn):
        """Sets the certificate_authority_arn of this CreateCertificateAuthorityAuditReportRequest.


        :param certificate_authority_arn: The certificate_authority_arn of this CreateCertificateAuthorityAuditReportRequest.
        :type certificate_authority_arn: str
        """
        if certificate_authority_arn is None:
            raise ValueError("Invalid value for `certificate_authority_arn`, must not be `None`")

        self._certificate_authority_arn = certificate_authority_arn

    @property
    def s3_bucket_name(self):
        """Gets the s3_bucket_name of this CreateCertificateAuthorityAuditReportRequest.


        :return: The s3_bucket_name of this CreateCertificateAuthorityAuditReportRequest.
        :rtype: str
        """
        return self._s3_bucket_name

    @s3_bucket_name.setter
    def s3_bucket_name(self, s3_bucket_name):
        """Sets the s3_bucket_name of this CreateCertificateAuthorityAuditReportRequest.


        :param s3_bucket_name: The s3_bucket_name of this CreateCertificateAuthorityAuditReportRequest.
        :type s3_bucket_name: str
        """
        if s3_bucket_name is None:
            raise ValueError("Invalid value for `s3_bucket_name`, must not be `None`")

        self._s3_bucket_name = s3_bucket_name

    @property
    def audit_report_response_format(self):
        """Gets the audit_report_response_format of this CreateCertificateAuthorityAuditReportRequest.


        :return: The audit_report_response_format of this CreateCertificateAuthorityAuditReportRequest.
        :rtype: AuditReportResponseFormat
        """
        return self._audit_report_response_format

    @audit_report_response_format.setter
    def audit_report_response_format(self, audit_report_response_format):
        """Sets the audit_report_response_format of this CreateCertificateAuthorityAuditReportRequest.


        :param audit_report_response_format: The audit_report_response_format of this CreateCertificateAuthorityAuditReportRequest.
        :type audit_report_response_format: AuditReportResponseFormat
        """
        if audit_report_response_format is None:
            raise ValueError("Invalid value for `audit_report_response_format`, must not be `None`")

        self._audit_report_response_format = audit_report_response_format
