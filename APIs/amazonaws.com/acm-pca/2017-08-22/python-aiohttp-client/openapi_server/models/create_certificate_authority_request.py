# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_authority_type import CertificateAuthorityType
from openapi_server.models.certificate_authority_usage_mode import CertificateAuthorityUsageMode
from openapi_server.models.create_certificate_authority_request_certificate_authority_configuration import CreateCertificateAuthorityRequestCertificateAuthorityConfiguration
from openapi_server.models.create_certificate_authority_request_revocation_configuration import CreateCertificateAuthorityRequestRevocationConfiguration
from openapi_server.models.key_storage_security_standard import KeyStorageSecurityStandard
from openapi_server import util


class CreateCertificateAuthorityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_authority_configuration: CreateCertificateAuthorityRequestCertificateAuthorityConfiguration=None, revocation_configuration: CreateCertificateAuthorityRequestRevocationConfiguration=None, certificate_authority_type: CertificateAuthorityType=None, idempotency_token: str=None, key_storage_security_standard: KeyStorageSecurityStandard=None, tags: List=None, usage_mode: CertificateAuthorityUsageMode=None):
        """CreateCertificateAuthorityRequest - a model defined in OpenAPI

        :param certificate_authority_configuration: The certificate_authority_configuration of this CreateCertificateAuthorityRequest.
        :param revocation_configuration: The revocation_configuration of this CreateCertificateAuthorityRequest.
        :param certificate_authority_type: The certificate_authority_type of this CreateCertificateAuthorityRequest.
        :param idempotency_token: The idempotency_token of this CreateCertificateAuthorityRequest.
        :param key_storage_security_standard: The key_storage_security_standard of this CreateCertificateAuthorityRequest.
        :param tags: The tags of this CreateCertificateAuthorityRequest.
        :param usage_mode: The usage_mode of this CreateCertificateAuthorityRequest.
        """
        self.openapi_types = {
            'certificate_authority_configuration': CreateCertificateAuthorityRequestCertificateAuthorityConfiguration,
            'revocation_configuration': CreateCertificateAuthorityRequestRevocationConfiguration,
            'certificate_authority_type': CertificateAuthorityType,
            'idempotency_token': str,
            'key_storage_security_standard': KeyStorageSecurityStandard,
            'tags': List,
            'usage_mode': CertificateAuthorityUsageMode
        }

        self.attribute_map = {
            'certificate_authority_configuration': 'CertificateAuthorityConfiguration',
            'revocation_configuration': 'RevocationConfiguration',
            'certificate_authority_type': 'CertificateAuthorityType',
            'idempotency_token': 'IdempotencyToken',
            'key_storage_security_standard': 'KeyStorageSecurityStandard',
            'tags': 'Tags',
            'usage_mode': 'UsageMode'
        }

        self._certificate_authority_configuration = certificate_authority_configuration
        self._revocation_configuration = revocation_configuration
        self._certificate_authority_type = certificate_authority_type
        self._idempotency_token = idempotency_token
        self._key_storage_security_standard = key_storage_security_standard
        self._tags = tags
        self._usage_mode = usage_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCertificateAuthorityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCertificateAuthorityRequest of this CreateCertificateAuthorityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_authority_configuration(self):
        """Gets the certificate_authority_configuration of this CreateCertificateAuthorityRequest.


        :return: The certificate_authority_configuration of this CreateCertificateAuthorityRequest.
        :rtype: CreateCertificateAuthorityRequestCertificateAuthorityConfiguration
        """
        return self._certificate_authority_configuration

    @certificate_authority_configuration.setter
    def certificate_authority_configuration(self, certificate_authority_configuration):
        """Sets the certificate_authority_configuration of this CreateCertificateAuthorityRequest.


        :param certificate_authority_configuration: The certificate_authority_configuration of this CreateCertificateAuthorityRequest.
        :type certificate_authority_configuration: CreateCertificateAuthorityRequestCertificateAuthorityConfiguration
        """
        if certificate_authority_configuration is None:
            raise ValueError("Invalid value for `certificate_authority_configuration`, must not be `None`")

        self._certificate_authority_configuration = certificate_authority_configuration

    @property
    def revocation_configuration(self):
        """Gets the revocation_configuration of this CreateCertificateAuthorityRequest.


        :return: The revocation_configuration of this CreateCertificateAuthorityRequest.
        :rtype: CreateCertificateAuthorityRequestRevocationConfiguration
        """
        return self._revocation_configuration

    @revocation_configuration.setter
    def revocation_configuration(self, revocation_configuration):
        """Sets the revocation_configuration of this CreateCertificateAuthorityRequest.


        :param revocation_configuration: The revocation_configuration of this CreateCertificateAuthorityRequest.
        :type revocation_configuration: CreateCertificateAuthorityRequestRevocationConfiguration
        """

        self._revocation_configuration = revocation_configuration

    @property
    def certificate_authority_type(self):
        """Gets the certificate_authority_type of this CreateCertificateAuthorityRequest.


        :return: The certificate_authority_type of this CreateCertificateAuthorityRequest.
        :rtype: CertificateAuthorityType
        """
        return self._certificate_authority_type

    @certificate_authority_type.setter
    def certificate_authority_type(self, certificate_authority_type):
        """Sets the certificate_authority_type of this CreateCertificateAuthorityRequest.


        :param certificate_authority_type: The certificate_authority_type of this CreateCertificateAuthorityRequest.
        :type certificate_authority_type: CertificateAuthorityType
        """
        if certificate_authority_type is None:
            raise ValueError("Invalid value for `certificate_authority_type`, must not be `None`")

        self._certificate_authority_type = certificate_authority_type

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateCertificateAuthorityRequest.


        :return: The idempotency_token of this CreateCertificateAuthorityRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateCertificateAuthorityRequest.


        :param idempotency_token: The idempotency_token of this CreateCertificateAuthorityRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token

    @property
    def key_storage_security_standard(self):
        """Gets the key_storage_security_standard of this CreateCertificateAuthorityRequest.


        :return: The key_storage_security_standard of this CreateCertificateAuthorityRequest.
        :rtype: KeyStorageSecurityStandard
        """
        return self._key_storage_security_standard

    @key_storage_security_standard.setter
    def key_storage_security_standard(self, key_storage_security_standard):
        """Sets the key_storage_security_standard of this CreateCertificateAuthorityRequest.


        :param key_storage_security_standard: The key_storage_security_standard of this CreateCertificateAuthorityRequest.
        :type key_storage_security_standard: KeyStorageSecurityStandard
        """

        self._key_storage_security_standard = key_storage_security_standard

    @property
    def tags(self):
        """Gets the tags of this CreateCertificateAuthorityRequest.


        :return: The tags of this CreateCertificateAuthorityRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCertificateAuthorityRequest.


        :param tags: The tags of this CreateCertificateAuthorityRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def usage_mode(self):
        """Gets the usage_mode of this CreateCertificateAuthorityRequest.


        :return: The usage_mode of this CreateCertificateAuthorityRequest.
        :rtype: CertificateAuthorityUsageMode
        """
        return self._usage_mode

    @usage_mode.setter
    def usage_mode(self, usage_mode):
        """Sets the usage_mode of this CreateCertificateAuthorityRequest.


        :param usage_mode: The usage_mode of this CreateCertificateAuthorityRequest.
        :type usage_mode: CertificateAuthorityUsageMode
        """

        self._usage_mode = usage_mode
