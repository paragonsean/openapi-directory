# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.revocation_reason import RevocationReason
from openapi_server import util


class RevokeCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_authority_arn: str=None, certificate_serial: str=None, revocation_reason: RevocationReason=None):
        """RevokeCertificateRequest - a model defined in OpenAPI

        :param certificate_authority_arn: The certificate_authority_arn of this RevokeCertificateRequest.
        :param certificate_serial: The certificate_serial of this RevokeCertificateRequest.
        :param revocation_reason: The revocation_reason of this RevokeCertificateRequest.
        """
        self.openapi_types = {
            'certificate_authority_arn': str,
            'certificate_serial': str,
            'revocation_reason': RevocationReason
        }

        self.attribute_map = {
            'certificate_authority_arn': 'CertificateAuthorityArn',
            'certificate_serial': 'CertificateSerial',
            'revocation_reason': 'RevocationReason'
        }

        self._certificate_authority_arn = certificate_authority_arn
        self._certificate_serial = certificate_serial
        self._revocation_reason = revocation_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevokeCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevokeCertificateRequest of this RevokeCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_authority_arn(self):
        """Gets the certificate_authority_arn of this RevokeCertificateRequest.


        :return: The certificate_authority_arn of this RevokeCertificateRequest.
        :rtype: str
        """
        return self._certificate_authority_arn

    @certificate_authority_arn.setter
    def certificate_authority_arn(self, certificate_authority_arn):
        """Sets the certificate_authority_arn of this RevokeCertificateRequest.


        :param certificate_authority_arn: The certificate_authority_arn of this RevokeCertificateRequest.
        :type certificate_authority_arn: str
        """
        if certificate_authority_arn is None:
            raise ValueError("Invalid value for `certificate_authority_arn`, must not be `None`")

        self._certificate_authority_arn = certificate_authority_arn

    @property
    def certificate_serial(self):
        """Gets the certificate_serial of this RevokeCertificateRequest.


        :return: The certificate_serial of this RevokeCertificateRequest.
        :rtype: str
        """
        return self._certificate_serial

    @certificate_serial.setter
    def certificate_serial(self, certificate_serial):
        """Sets the certificate_serial of this RevokeCertificateRequest.


        :param certificate_serial: The certificate_serial of this RevokeCertificateRequest.
        :type certificate_serial: str
        """
        if certificate_serial is None:
            raise ValueError("Invalid value for `certificate_serial`, must not be `None`")

        self._certificate_serial = certificate_serial

    @property
    def revocation_reason(self):
        """Gets the revocation_reason of this RevokeCertificateRequest.


        :return: The revocation_reason of this RevokeCertificateRequest.
        :rtype: RevocationReason
        """
        return self._revocation_reason

    @revocation_reason.setter
    def revocation_reason(self, revocation_reason):
        """Sets the revocation_reason of this RevokeCertificateRequest.


        :param revocation_reason: The revocation_reason of this RevokeCertificateRequest.
        :type revocation_reason: RevocationReason
        """
        if revocation_reason is None:
            raise ValueError("Invalid value for `revocation_reason`, must not be `None`")

        self._revocation_reason = revocation_reason
