# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeneralNameEdiPartyName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, party_name: str=None, name_assigner: str=None):
        """GeneralNameEdiPartyName - a model defined in OpenAPI

        :param party_name: The party_name of this GeneralNameEdiPartyName.
        :param name_assigner: The name_assigner of this GeneralNameEdiPartyName.
        """
        self.openapi_types = {
            'party_name': str,
            'name_assigner': str
        }

        self.attribute_map = {
            'party_name': 'PartyName',
            'name_assigner': 'NameAssigner'
        }

        self._party_name = party_name
        self._name_assigner = name_assigner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeneralNameEdiPartyName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeneralName_EdiPartyName of this GeneralNameEdiPartyName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def party_name(self):
        """Gets the party_name of this GeneralNameEdiPartyName.


        :return: The party_name of this GeneralNameEdiPartyName.
        :rtype: str
        """
        return self._party_name

    @party_name.setter
    def party_name(self, party_name):
        """Sets the party_name of this GeneralNameEdiPartyName.


        :param party_name: The party_name of this GeneralNameEdiPartyName.
        :type party_name: str
        """
        if party_name is None:
            raise ValueError("Invalid value for `party_name`, must not be `None`")

        self._party_name = party_name

    @property
    def name_assigner(self):
        """Gets the name_assigner of this GeneralNameEdiPartyName.


        :return: The name_assigner of this GeneralNameEdiPartyName.
        :rtype: str
        """
        return self._name_assigner

    @name_assigner.setter
    def name_assigner(self, name_assigner):
        """Sets the name_assigner of this GeneralNameEdiPartyName.


        :param name_assigner: The name_assigner of this GeneralNameEdiPartyName.
        :type name_assigner: str
        """

        self._name_assigner = name_assigner
