# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_authority_configuration_csr_extensions import CertificateAuthorityConfigurationCsrExtensions
from openapi_server.models.certificate_authority_configuration_subject import CertificateAuthorityConfigurationSubject
from openapi_server.models.key_algorithm import KeyAlgorithm
from openapi_server.models.signing_algorithm import SigningAlgorithm
from openapi_server import util


class CertificateAuthorityCertificateAuthorityConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_algorithm: KeyAlgorithm=None, signing_algorithm: SigningAlgorithm=None, subject: CertificateAuthorityConfigurationSubject=None, csr_extensions: CertificateAuthorityConfigurationCsrExtensions=None):
        """CertificateAuthorityCertificateAuthorityConfiguration - a model defined in OpenAPI

        :param key_algorithm: The key_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.
        :param signing_algorithm: The signing_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.
        :param subject: The subject of this CertificateAuthorityCertificateAuthorityConfiguration.
        :param csr_extensions: The csr_extensions of this CertificateAuthorityCertificateAuthorityConfiguration.
        """
        self.openapi_types = {
            'key_algorithm': KeyAlgorithm,
            'signing_algorithm': SigningAlgorithm,
            'subject': CertificateAuthorityConfigurationSubject,
            'csr_extensions': CertificateAuthorityConfigurationCsrExtensions
        }

        self.attribute_map = {
            'key_algorithm': 'KeyAlgorithm',
            'signing_algorithm': 'SigningAlgorithm',
            'subject': 'Subject',
            'csr_extensions': 'CsrExtensions'
        }

        self._key_algorithm = key_algorithm
        self._signing_algorithm = signing_algorithm
        self._subject = subject
        self._csr_extensions = csr_extensions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateAuthorityCertificateAuthorityConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateAuthority_CertificateAuthorityConfiguration of this CertificateAuthorityCertificateAuthorityConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.


        :return: The key_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.
        :rtype: KeyAlgorithm
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.


        :param key_algorithm: The key_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.
        :type key_algorithm: KeyAlgorithm
        """
        if key_algorithm is None:
            raise ValueError("Invalid value for `key_algorithm`, must not be `None`")

        self._key_algorithm = key_algorithm

    @property
    def signing_algorithm(self):
        """Gets the signing_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.


        :return: The signing_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.
        :rtype: SigningAlgorithm
        """
        return self._signing_algorithm

    @signing_algorithm.setter
    def signing_algorithm(self, signing_algorithm):
        """Sets the signing_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.


        :param signing_algorithm: The signing_algorithm of this CertificateAuthorityCertificateAuthorityConfiguration.
        :type signing_algorithm: SigningAlgorithm
        """
        if signing_algorithm is None:
            raise ValueError("Invalid value for `signing_algorithm`, must not be `None`")

        self._signing_algorithm = signing_algorithm

    @property
    def subject(self):
        """Gets the subject of this CertificateAuthorityCertificateAuthorityConfiguration.


        :return: The subject of this CertificateAuthorityCertificateAuthorityConfiguration.
        :rtype: CertificateAuthorityConfigurationSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateAuthorityCertificateAuthorityConfiguration.


        :param subject: The subject of this CertificateAuthorityCertificateAuthorityConfiguration.
        :type subject: CertificateAuthorityConfigurationSubject
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def csr_extensions(self):
        """Gets the csr_extensions of this CertificateAuthorityCertificateAuthorityConfiguration.


        :return: The csr_extensions of this CertificateAuthorityCertificateAuthorityConfiguration.
        :rtype: CertificateAuthorityConfigurationCsrExtensions
        """
        return self._csr_extensions

    @csr_extensions.setter
    def csr_extensions(self, csr_extensions):
        """Sets the csr_extensions of this CertificateAuthorityCertificateAuthorityConfiguration.


        :param csr_extensions: The csr_extensions of this CertificateAuthorityCertificateAuthorityConfiguration.
        :type csr_extensions: CertificateAuthorityConfigurationCsrExtensions
        """

        self._csr_extensions = csr_extensions
