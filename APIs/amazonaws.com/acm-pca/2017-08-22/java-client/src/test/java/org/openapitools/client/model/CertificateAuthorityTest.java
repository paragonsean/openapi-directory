/*
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CertificateAuthorityCertificateAuthorityConfiguration;
import org.openapitools.client.model.CertificateAuthorityRevocationConfiguration;
import org.openapitools.client.model.CertificateAuthorityStatus;
import org.openapitools.client.model.CertificateAuthorityType;
import org.openapitools.client.model.CertificateAuthorityUsageMode;
import org.openapitools.client.model.FailureReason;
import org.openapitools.client.model.KeyStorageSecurityStandard;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CertificateAuthority
 */
public class CertificateAuthorityTest {
    private final CertificateAuthority model = new CertificateAuthority();

    /**
     * Model tests for CertificateAuthority
     */
    @Test
    public void testCertificateAuthority() {
        // TODO: test CertificateAuthority
    }

    /**
     * Test the property 'arn'
     */
    @Test
    public void arnTest() {
        // TODO: test arn
    }

    /**
     * Test the property 'ownerAccount'
     */
    @Test
    public void ownerAccountTest() {
        // TODO: test ownerAccount
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'lastStateChangeAt'
     */
    @Test
    public void lastStateChangeAtTest() {
        // TODO: test lastStateChangeAt
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'serial'
     */
    @Test
    public void serialTest() {
        // TODO: test serial
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'notBefore'
     */
    @Test
    public void notBeforeTest() {
        // TODO: test notBefore
    }

    /**
     * Test the property 'notAfter'
     */
    @Test
    public void notAfterTest() {
        // TODO: test notAfter
    }

    /**
     * Test the property 'failureReason'
     */
    @Test
    public void failureReasonTest() {
        // TODO: test failureReason
    }

    /**
     * Test the property 'certificateAuthorityConfiguration'
     */
    @Test
    public void certificateAuthorityConfigurationTest() {
        // TODO: test certificateAuthorityConfiguration
    }

    /**
     * Test the property 'revocationConfiguration'
     */
    @Test
    public void revocationConfigurationTest() {
        // TODO: test revocationConfiguration
    }

    /**
     * Test the property 'restorableUntil'
     */
    @Test
    public void restorableUntilTest() {
        // TODO: test restorableUntil
    }

    /**
     * Test the property 'keyStorageSecurityStandard'
     */
    @Test
    public void keyStorageSecurityStandardTest() {
        // TODO: test keyStorageSecurityStandard
    }

    /**
     * Test the property 'usageMode'
     */
    @Test
    public void usageModeTest() {
        // TODO: test usageMode
    }

}
