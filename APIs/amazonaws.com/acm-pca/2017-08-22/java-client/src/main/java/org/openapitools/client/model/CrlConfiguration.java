/*
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3ObjectAcl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains configuration information for a certificate revocation list (CRL). Your private certificate authority (CA) creates base CRLs. Delta CRLs are not supported. You can enable CRLs for your new or an existing private CA by setting the &lt;b&gt;Enabled&lt;/b&gt; parameter to &lt;code&gt;true&lt;/code&gt;. Your private CA writes CRLs to an S3 bucket that you specify in the &lt;b&gt;S3BucketName&lt;/b&gt; parameter. You can hide the name of your bucket by specifying a value for the &lt;b&gt;CustomCname&lt;/b&gt; parameter. Your private CA copies the CNAME or the S3 bucket name to the &lt;b&gt;CRL Distribution Points&lt;/b&gt; extension of each certificate it issues. Your S3 bucket policy must give write permission to Amazon Web Services Private CA. &lt;/p&gt; &lt;p&gt;Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#crl-encryption\&quot;&gt;Encrypting Your CRLs&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Your private CA uses the value in the &lt;b&gt;ExpirationInDays&lt;/b&gt; parameter to calculate the &lt;b&gt;nextUpdate&lt;/b&gt; field in the CRL. The CRL is refreshed prior to a certificate&#39;s expiration date or when a certificate is revoked. When a certificate is revoked, it appears in the CRL until the certificate expires, and then in one additional CRL after expiration, and it always appears in the audit report.&lt;/p&gt; &lt;p&gt;A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason a CRL update fails, Amazon Web Services Private CA makes further attempts every 15 minutes.&lt;/p&gt; &lt;p&gt;CRLs contain the following fields:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Version&lt;/b&gt;: The current version number defined in RFC 5280 is V2. The integer value is 0x1. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Signature Algorithm&lt;/b&gt;: The name of the algorithm used to sign the CRL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Issuer&lt;/b&gt;: The X.500 distinguished name of your private CA that issued the CRL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Last Update&lt;/b&gt;: The issue date and time of this CRL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Next Update&lt;/b&gt;: The day and time by which the next CRL will be issued.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Revoked Certificates&lt;/b&gt;: List of revoked certificates. Each list item contains the following information.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Serial Number&lt;/b&gt;: The serial number, in hexadecimal format, of the revoked certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Revocation Date&lt;/b&gt;: Date and time the certificate was revoked.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CRL Entry Extensions&lt;/b&gt;: Optional extensions for the CRL entry.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;X509v3 CRL Reason Code&lt;/b&gt;: Reason the certificate was revoked.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CRL Extensions&lt;/b&gt;: Optional extensions for the CRL.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;X509v3 Authority Key Identifier&lt;/b&gt;: Identifies the public key associated with the private key used to sign the certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;X509v3 CRL Number:&lt;/b&gt;: Decimal sequence number for the CRL.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Signature Algorithm&lt;/b&gt;: Algorithm used by your private CA to sign the CRL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Signature Value&lt;/b&gt;: Signature computed over the CRL.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Certificate revocation lists created by Amazon Web Services Private CA are DER-encoded. You can use the following OpenSSL command to list a CRL.&lt;/p&gt; &lt;p&gt; &lt;code&gt;openssl crl -inform DER -text -in &lt;i&gt;crl_path&lt;/i&gt; -noout&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html\&quot;&gt;Planning a certificate revocation list (CRL)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Private Certificate Authority User Guide&lt;/i&gt; &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:35.096765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrlConfiguration {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXPIRATION_IN_DAYS = "ExpirationInDays";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_IN_DAYS)
  private Integer expirationInDays;

  public static final String SERIALIZED_NAME_CUSTOM_CNAME = "CustomCname";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CNAME)
  private String customCname;

  public static final String SERIALIZED_NAME_S3_BUCKET_NAME = "S3BucketName";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_NAME)
  private String s3BucketName;

  public static final String SERIALIZED_NAME_S3_OBJECT_ACL = "S3ObjectAcl";
  @SerializedName(SERIALIZED_NAME_S3_OBJECT_ACL)
  private S3ObjectAcl s3ObjectAcl;

  public CrlConfiguration() {
  }

  public CrlConfiguration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CrlConfiguration expirationInDays(Integer expirationInDays) {
    this.expirationInDays = expirationInDays;
    return this;
  }

  /**
   * Get expirationInDays
   * @return expirationInDays
   */
  @javax.annotation.Nullable
  public Integer getExpirationInDays() {
    return expirationInDays;
  }

  public void setExpirationInDays(Integer expirationInDays) {
    this.expirationInDays = expirationInDays;
  }


  public CrlConfiguration customCname(String customCname) {
    this.customCname = customCname;
    return this;
  }

  /**
   * Get customCname
   * @return customCname
   */
  @javax.annotation.Nullable
  public String getCustomCname() {
    return customCname;
  }

  public void setCustomCname(String customCname) {
    this.customCname = customCname;
  }


  public CrlConfiguration s3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
    return this;
  }

  /**
   * Get s3BucketName
   * @return s3BucketName
   */
  @javax.annotation.Nullable
  public String getS3BucketName() {
    return s3BucketName;
  }

  public void setS3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
  }


  public CrlConfiguration s3ObjectAcl(S3ObjectAcl s3ObjectAcl) {
    this.s3ObjectAcl = s3ObjectAcl;
    return this;
  }

  /**
   * Get s3ObjectAcl
   * @return s3ObjectAcl
   */
  @javax.annotation.Nullable
  public S3ObjectAcl getS3ObjectAcl() {
    return s3ObjectAcl;
  }

  public void setS3ObjectAcl(S3ObjectAcl s3ObjectAcl) {
    this.s3ObjectAcl = s3ObjectAcl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrlConfiguration crlConfiguration = (CrlConfiguration) o;
    return Objects.equals(this.enabled, crlConfiguration.enabled) &&
        Objects.equals(this.expirationInDays, crlConfiguration.expirationInDays) &&
        Objects.equals(this.customCname, crlConfiguration.customCname) &&
        Objects.equals(this.s3BucketName, crlConfiguration.s3BucketName) &&
        Objects.equals(this.s3ObjectAcl, crlConfiguration.s3ObjectAcl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, expirationInDays, customCname, s3BucketName, s3ObjectAcl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrlConfiguration {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    expirationInDays: ").append(toIndentedString(expirationInDays)).append("\n");
    sb.append("    customCname: ").append(toIndentedString(customCname)).append("\n");
    sb.append("    s3BucketName: ").append(toIndentedString(s3BucketName)).append("\n");
    sb.append("    s3ObjectAcl: ").append(toIndentedString(s3ObjectAcl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("ExpirationInDays");
    openapiFields.add("CustomCname");
    openapiFields.add("S3BucketName");
    openapiFields.add("S3ObjectAcl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrlConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrlConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrlConfiguration is not found in the empty JSON string", CrlConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrlConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrlConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CrlConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Enabled`
      Boolean.validateJsonElement(jsonObj.get("Enabled"));
      // validate the optional field `ExpirationInDays`
      if (jsonObj.get("ExpirationInDays") != null && !jsonObj.get("ExpirationInDays").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ExpirationInDays"));
      }
      // validate the optional field `CustomCname`
      if (jsonObj.get("CustomCname") != null && !jsonObj.get("CustomCname").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CustomCname"));
      }
      // validate the optional field `S3BucketName`
      if (jsonObj.get("S3BucketName") != null && !jsonObj.get("S3BucketName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3BucketName"));
      }
      // validate the optional field `S3ObjectAcl`
      if (jsonObj.get("S3ObjectAcl") != null && !jsonObj.get("S3ObjectAcl").isJsonNull()) {
        S3ObjectAcl.validateJsonElement(jsonObj.get("S3ObjectAcl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrlConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrlConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrlConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrlConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CrlConfiguration>() {
           @Override
           public void write(JsonWriter out, CrlConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrlConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrlConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrlConfiguration
   * @throws IOException if the JSON string is invalid with respect to CrlConfiguration
   */
  public static CrlConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrlConfiguration.class);
  }

  /**
   * Convert an instance of CrlConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

