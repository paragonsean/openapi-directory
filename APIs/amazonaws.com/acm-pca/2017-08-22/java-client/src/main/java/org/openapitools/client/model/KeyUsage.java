/*
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:35.096765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyUsage {
  public static final String SERIALIZED_NAME_DIGITAL_SIGNATURE = "DigitalSignature";
  @SerializedName(SERIALIZED_NAME_DIGITAL_SIGNATURE)
  private Boolean digitalSignature;

  public static final String SERIALIZED_NAME_NON_REPUDIATION = "NonRepudiation";
  @SerializedName(SERIALIZED_NAME_NON_REPUDIATION)
  private Boolean nonRepudiation;

  public static final String SERIALIZED_NAME_KEY_ENCIPHERMENT = "KeyEncipherment";
  @SerializedName(SERIALIZED_NAME_KEY_ENCIPHERMENT)
  private Boolean keyEncipherment;

  public static final String SERIALIZED_NAME_DATA_ENCIPHERMENT = "DataEncipherment";
  @SerializedName(SERIALIZED_NAME_DATA_ENCIPHERMENT)
  private Boolean dataEncipherment;

  public static final String SERIALIZED_NAME_KEY_AGREEMENT = "KeyAgreement";
  @SerializedName(SERIALIZED_NAME_KEY_AGREEMENT)
  private Boolean keyAgreement;

  public static final String SERIALIZED_NAME_KEY_CERT_SIGN = "KeyCertSign";
  @SerializedName(SERIALIZED_NAME_KEY_CERT_SIGN)
  private Boolean keyCertSign;

  public static final String SERIALIZED_NAME_CR_L_SIGN = "CRLSign";
  @SerializedName(SERIALIZED_NAME_CR_L_SIGN)
  private Boolean crLSign;

  public static final String SERIALIZED_NAME_ENCIPHER_ONLY = "EncipherOnly";
  @SerializedName(SERIALIZED_NAME_ENCIPHER_ONLY)
  private Boolean encipherOnly;

  public static final String SERIALIZED_NAME_DECIPHER_ONLY = "DecipherOnly";
  @SerializedName(SERIALIZED_NAME_DECIPHER_ONLY)
  private Boolean decipherOnly;

  public KeyUsage() {
  }

  public KeyUsage digitalSignature(Boolean digitalSignature) {
    this.digitalSignature = digitalSignature;
    return this;
  }

  /**
   * Get digitalSignature
   * @return digitalSignature
   */
  @javax.annotation.Nullable
  public Boolean getDigitalSignature() {
    return digitalSignature;
  }

  public void setDigitalSignature(Boolean digitalSignature) {
    this.digitalSignature = digitalSignature;
  }


  public KeyUsage nonRepudiation(Boolean nonRepudiation) {
    this.nonRepudiation = nonRepudiation;
    return this;
  }

  /**
   * Get nonRepudiation
   * @return nonRepudiation
   */
  @javax.annotation.Nullable
  public Boolean getNonRepudiation() {
    return nonRepudiation;
  }

  public void setNonRepudiation(Boolean nonRepudiation) {
    this.nonRepudiation = nonRepudiation;
  }


  public KeyUsage keyEncipherment(Boolean keyEncipherment) {
    this.keyEncipherment = keyEncipherment;
    return this;
  }

  /**
   * Get keyEncipherment
   * @return keyEncipherment
   */
  @javax.annotation.Nullable
  public Boolean getKeyEncipherment() {
    return keyEncipherment;
  }

  public void setKeyEncipherment(Boolean keyEncipherment) {
    this.keyEncipherment = keyEncipherment;
  }


  public KeyUsage dataEncipherment(Boolean dataEncipherment) {
    this.dataEncipherment = dataEncipherment;
    return this;
  }

  /**
   * Get dataEncipherment
   * @return dataEncipherment
   */
  @javax.annotation.Nullable
  public Boolean getDataEncipherment() {
    return dataEncipherment;
  }

  public void setDataEncipherment(Boolean dataEncipherment) {
    this.dataEncipherment = dataEncipherment;
  }


  public KeyUsage keyAgreement(Boolean keyAgreement) {
    this.keyAgreement = keyAgreement;
    return this;
  }

  /**
   * Get keyAgreement
   * @return keyAgreement
   */
  @javax.annotation.Nullable
  public Boolean getKeyAgreement() {
    return keyAgreement;
  }

  public void setKeyAgreement(Boolean keyAgreement) {
    this.keyAgreement = keyAgreement;
  }


  public KeyUsage keyCertSign(Boolean keyCertSign) {
    this.keyCertSign = keyCertSign;
    return this;
  }

  /**
   * Get keyCertSign
   * @return keyCertSign
   */
  @javax.annotation.Nullable
  public Boolean getKeyCertSign() {
    return keyCertSign;
  }

  public void setKeyCertSign(Boolean keyCertSign) {
    this.keyCertSign = keyCertSign;
  }


  public KeyUsage crLSign(Boolean crLSign) {
    this.crLSign = crLSign;
    return this;
  }

  /**
   * Get crLSign
   * @return crLSign
   */
  @javax.annotation.Nullable
  public Boolean getCrLSign() {
    return crLSign;
  }

  public void setCrLSign(Boolean crLSign) {
    this.crLSign = crLSign;
  }


  public KeyUsage encipherOnly(Boolean encipherOnly) {
    this.encipherOnly = encipherOnly;
    return this;
  }

  /**
   * Get encipherOnly
   * @return encipherOnly
   */
  @javax.annotation.Nullable
  public Boolean getEncipherOnly() {
    return encipherOnly;
  }

  public void setEncipherOnly(Boolean encipherOnly) {
    this.encipherOnly = encipherOnly;
  }


  public KeyUsage decipherOnly(Boolean decipherOnly) {
    this.decipherOnly = decipherOnly;
    return this;
  }

  /**
   * Get decipherOnly
   * @return decipherOnly
   */
  @javax.annotation.Nullable
  public Boolean getDecipherOnly() {
    return decipherOnly;
  }

  public void setDecipherOnly(Boolean decipherOnly) {
    this.decipherOnly = decipherOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyUsage keyUsage = (KeyUsage) o;
    return Objects.equals(this.digitalSignature, keyUsage.digitalSignature) &&
        Objects.equals(this.nonRepudiation, keyUsage.nonRepudiation) &&
        Objects.equals(this.keyEncipherment, keyUsage.keyEncipherment) &&
        Objects.equals(this.dataEncipherment, keyUsage.dataEncipherment) &&
        Objects.equals(this.keyAgreement, keyUsage.keyAgreement) &&
        Objects.equals(this.keyCertSign, keyUsage.keyCertSign) &&
        Objects.equals(this.crLSign, keyUsage.crLSign) &&
        Objects.equals(this.encipherOnly, keyUsage.encipherOnly) &&
        Objects.equals(this.decipherOnly, keyUsage.decipherOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, crLSign, encipherOnly, decipherOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyUsage {\n");
    sb.append("    digitalSignature: ").append(toIndentedString(digitalSignature)).append("\n");
    sb.append("    nonRepudiation: ").append(toIndentedString(nonRepudiation)).append("\n");
    sb.append("    keyEncipherment: ").append(toIndentedString(keyEncipherment)).append("\n");
    sb.append("    dataEncipherment: ").append(toIndentedString(dataEncipherment)).append("\n");
    sb.append("    keyAgreement: ").append(toIndentedString(keyAgreement)).append("\n");
    sb.append("    keyCertSign: ").append(toIndentedString(keyCertSign)).append("\n");
    sb.append("    crLSign: ").append(toIndentedString(crLSign)).append("\n");
    sb.append("    encipherOnly: ").append(toIndentedString(encipherOnly)).append("\n");
    sb.append("    decipherOnly: ").append(toIndentedString(decipherOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DigitalSignature");
    openapiFields.add("NonRepudiation");
    openapiFields.add("KeyEncipherment");
    openapiFields.add("DataEncipherment");
    openapiFields.add("KeyAgreement");
    openapiFields.add("KeyCertSign");
    openapiFields.add("CRLSign");
    openapiFields.add("EncipherOnly");
    openapiFields.add("DecipherOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyUsage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyUsage is not found in the empty JSON string", KeyUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DigitalSignature`
      if (jsonObj.get("DigitalSignature") != null && !jsonObj.get("DigitalSignature").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DigitalSignature"));
      }
      // validate the optional field `NonRepudiation`
      if (jsonObj.get("NonRepudiation") != null && !jsonObj.get("NonRepudiation").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("NonRepudiation"));
      }
      // validate the optional field `KeyEncipherment`
      if (jsonObj.get("KeyEncipherment") != null && !jsonObj.get("KeyEncipherment").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("KeyEncipherment"));
      }
      // validate the optional field `DataEncipherment`
      if (jsonObj.get("DataEncipherment") != null && !jsonObj.get("DataEncipherment").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DataEncipherment"));
      }
      // validate the optional field `KeyAgreement`
      if (jsonObj.get("KeyAgreement") != null && !jsonObj.get("KeyAgreement").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("KeyAgreement"));
      }
      // validate the optional field `KeyCertSign`
      if (jsonObj.get("KeyCertSign") != null && !jsonObj.get("KeyCertSign").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("KeyCertSign"));
      }
      // validate the optional field `CRLSign`
      if (jsonObj.get("CRLSign") != null && !jsonObj.get("CRLSign").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CRLSign"));
      }
      // validate the optional field `EncipherOnly`
      if (jsonObj.get("EncipherOnly") != null && !jsonObj.get("EncipherOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EncipherOnly"));
      }
      // validate the optional field `DecipherOnly`
      if (jsonObj.get("DecipherOnly") != null && !jsonObj.get("DecipherOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DecipherOnly"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyUsage>() {
           @Override
           public void write(JsonWriter out, KeyUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyUsage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyUsage
   * @throws IOException if the JSON string is invalid with respect to KeyUsage
   */
  public static KeyUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyUsage.class);
  }

  /**
   * Convert an instance of KeyUsage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

