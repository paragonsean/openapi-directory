/*
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CertificateAuthorityConfigurationCsrExtensions;
import org.openapitools.client.model.CertificateAuthorityConfigurationSubject;
import org.openapitools.client.model.KeyAlgorithm;
import org.openapitools.client.model.SigningAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains configuration information for your private certificate authority (CA). This includes information about the class of public key algorithm and the key pair that your private CA creates when it issues a certificate. It also includes the signature algorithm that it uses when issuing certificates, and its X.500 distinguished name. You must specify this information when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:35.096765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateAuthorityConfiguration {
  public static final String SERIALIZED_NAME_KEY_ALGORITHM = "KeyAlgorithm";
  @SerializedName(SERIALIZED_NAME_KEY_ALGORITHM)
  private KeyAlgorithm keyAlgorithm;

  public static final String SERIALIZED_NAME_SIGNING_ALGORITHM = "SigningAlgorithm";
  @SerializedName(SERIALIZED_NAME_SIGNING_ALGORITHM)
  private SigningAlgorithm signingAlgorithm;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private CertificateAuthorityConfigurationSubject subject;

  public static final String SERIALIZED_NAME_CSR_EXTENSIONS = "CsrExtensions";
  @SerializedName(SERIALIZED_NAME_CSR_EXTENSIONS)
  private CertificateAuthorityConfigurationCsrExtensions csrExtensions;

  public CertificateAuthorityConfiguration() {
  }

  public CertificateAuthorityConfiguration keyAlgorithm(KeyAlgorithm keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
    return this;
  }

  /**
   * Get keyAlgorithm
   * @return keyAlgorithm
   */
  @javax.annotation.Nonnull
  public KeyAlgorithm getKeyAlgorithm() {
    return keyAlgorithm;
  }

  public void setKeyAlgorithm(KeyAlgorithm keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
  }


  public CertificateAuthorityConfiguration signingAlgorithm(SigningAlgorithm signingAlgorithm) {
    this.signingAlgorithm = signingAlgorithm;
    return this;
  }

  /**
   * Get signingAlgorithm
   * @return signingAlgorithm
   */
  @javax.annotation.Nonnull
  public SigningAlgorithm getSigningAlgorithm() {
    return signingAlgorithm;
  }

  public void setSigningAlgorithm(SigningAlgorithm signingAlgorithm) {
    this.signingAlgorithm = signingAlgorithm;
  }


  public CertificateAuthorityConfiguration subject(CertificateAuthorityConfigurationSubject subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nonnull
  public CertificateAuthorityConfigurationSubject getSubject() {
    return subject;
  }

  public void setSubject(CertificateAuthorityConfigurationSubject subject) {
    this.subject = subject;
  }


  public CertificateAuthorityConfiguration csrExtensions(CertificateAuthorityConfigurationCsrExtensions csrExtensions) {
    this.csrExtensions = csrExtensions;
    return this;
  }

  /**
   * Get csrExtensions
   * @return csrExtensions
   */
  @javax.annotation.Nullable
  public CertificateAuthorityConfigurationCsrExtensions getCsrExtensions() {
    return csrExtensions;
  }

  public void setCsrExtensions(CertificateAuthorityConfigurationCsrExtensions csrExtensions) {
    this.csrExtensions = csrExtensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateAuthorityConfiguration certificateAuthorityConfiguration = (CertificateAuthorityConfiguration) o;
    return Objects.equals(this.keyAlgorithm, certificateAuthorityConfiguration.keyAlgorithm) &&
        Objects.equals(this.signingAlgorithm, certificateAuthorityConfiguration.signingAlgorithm) &&
        Objects.equals(this.subject, certificateAuthorityConfiguration.subject) &&
        Objects.equals(this.csrExtensions, certificateAuthorityConfiguration.csrExtensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyAlgorithm, signingAlgorithm, subject, csrExtensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateAuthorityConfiguration {\n");
    sb.append("    keyAlgorithm: ").append(toIndentedString(keyAlgorithm)).append("\n");
    sb.append("    signingAlgorithm: ").append(toIndentedString(signingAlgorithm)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    csrExtensions: ").append(toIndentedString(csrExtensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("KeyAlgorithm");
    openapiFields.add("SigningAlgorithm");
    openapiFields.add("Subject");
    openapiFields.add("CsrExtensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("KeyAlgorithm");
    openapiRequiredFields.add("SigningAlgorithm");
    openapiRequiredFields.add("Subject");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateAuthorityConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateAuthorityConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateAuthorityConfiguration is not found in the empty JSON string", CertificateAuthorityConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateAuthorityConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateAuthorityConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateAuthorityConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `KeyAlgorithm`
      KeyAlgorithm.validateJsonElement(jsonObj.get("KeyAlgorithm"));
      // validate the required field `SigningAlgorithm`
      SigningAlgorithm.validateJsonElement(jsonObj.get("SigningAlgorithm"));
      // validate the required field `Subject`
      CertificateAuthorityConfigurationSubject.validateJsonElement(jsonObj.get("Subject"));
      // validate the optional field `CsrExtensions`
      if (jsonObj.get("CsrExtensions") != null && !jsonObj.get("CsrExtensions").isJsonNull()) {
        CertificateAuthorityConfigurationCsrExtensions.validateJsonElement(jsonObj.get("CsrExtensions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateAuthorityConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateAuthorityConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateAuthorityConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateAuthorityConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateAuthorityConfiguration>() {
           @Override
           public void write(JsonWriter out, CertificateAuthorityConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateAuthorityConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateAuthorityConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateAuthorityConfiguration
   * @throws IOException if the JSON string is invalid with respect to CertificateAuthorityConfiguration
   */
  public static CertificateAuthorityConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateAuthorityConfiguration.class);
  }

  /**
   * Convert an instance of CertificateAuthorityConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

